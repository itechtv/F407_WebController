
F407_WebController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002b67c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00035984  0802b810  0802b810  0003b810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08061194  08061194  00080298  2**0
                  CONTENTS
  4 .ARM          00000008  08061194  08061194  00071194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806119c  0806119c  00080298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806119c  0806119c  0007119c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080611a0  080611a0  000711a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  080611a4  00080000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00080298  2**0
                  CONTENTS
 10 .bss          0001d2b4  20000298  20000298  00080298  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2001d54c  2001d54c  00080298  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00080298  2**0
                  CONTENTS, READONLY
 13 .debug_info   00061418  00000000  00000000  000802c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b06b  00000000  00000000  000e16e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002fa8  00000000  00000000  000ec750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002e28  00000000  00000000  000ef6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038109  00000000  00000000  000f2520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004c11b  00000000  00000000  0012a629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fefd5  00000000  00000000  00176744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00275719  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e028  00000000  00000000  0027576c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000298 	.word	0x20000298
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0802b7f4 	.word	0x0802b7f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000029c 	.word	0x2000029c
 80001cc:	0802b7f4 	.word	0x0802b7f4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c26:	f000 b9ef 	b.w	8001008 <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f883 	bl	8000d44 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f876 	bl	8000d44 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f865 	bl	8000d44 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f857 	bl	8000d44 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <case_insensitive_strcmp+0x16>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8001022:	2301      	movs	r3, #1
 8001024:	e056      	b.n	80010d4 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	d10d      	bne.n	800104a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800102e:	2300      	movs	r3, #0
 8001030:	e050      	b.n	80010d4 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <case_insensitive_strcmp+0x32>
        {
            return 0;
 800103a:	2300      	movs	r3, #0
 800103c:	e04a      	b.n	80010d4 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3301      	adds	r3, #1
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	3301      	adds	r3, #1
 8001054:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <case_insensitive_strcmp+0xd4>)
 8001056:	4413      	add	r3, r2
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b01      	cmp	r3, #1
 8001060:	d103      	bne.n	800106a <case_insensitive_strcmp+0x5e>
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	f103 0220 	add.w	r2, r3, #32
 8001068:	e000      	b.n	800106c <case_insensitive_strcmp+0x60>
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	73bb      	strb	r3, [r7, #14]
 8001072:	7bbb      	ldrb	r3, [r7, #14]
 8001074:	3301      	adds	r3, #1
 8001076:	491a      	ldr	r1, [pc, #104]	; (80010e0 <case_insensitive_strcmp+0xd4>)
 8001078:	440b      	add	r3, r1
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b01      	cmp	r3, #1
 8001082:	d102      	bne.n	800108a <case_insensitive_strcmp+0x7e>
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	3320      	adds	r3, #32
 8001088:	e000      	b.n	800108c <case_insensitive_strcmp+0x80>
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	429a      	cmp	r2, r3
 800108e:	d0d0      	beq.n	8001032 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	737b      	strb	r3, [r7, #13]
 8001096:	7b7b      	ldrb	r3, [r7, #13]
 8001098:	3301      	adds	r3, #1
 800109a:	4a11      	ldr	r2, [pc, #68]	; (80010e0 <case_insensitive_strcmp+0xd4>)
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d103      	bne.n	80010b0 <case_insensitive_strcmp+0xa4>
 80010a8:	7b7b      	ldrb	r3, [r7, #13]
 80010aa:	f103 0220 	add.w	r2, r3, #32
 80010ae:	e000      	b.n	80010b2 <case_insensitive_strcmp+0xa6>
 80010b0:	7b7a      	ldrb	r2, [r7, #13]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	733b      	strb	r3, [r7, #12]
 80010b8:	7b3b      	ldrb	r3, [r7, #12]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4908      	ldr	r1, [pc, #32]	; (80010e0 <case_insensitive_strcmp+0xd4>)
 80010be:	440b      	add	r3, r1
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d102      	bne.n	80010d0 <case_insensitive_strcmp+0xc4>
 80010ca:	7b3b      	ldrb	r3, [r7, #12]
 80010cc:	3320      	adds	r3, #32
 80010ce:	e000      	b.n	80010d2 <case_insensitive_strcmp+0xc6>
 80010d0:	7b3b      	ldrb	r3, [r7, #12]
 80010d2:	1ad3      	subs	r3, r2, r3
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	08060900 	.word	0x08060900

080010e4 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <cJSON_strdup+0x1c>
    {
        return NULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	e015      	b.n	800112c <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff f86f 	bl	80001e4 <strlen>
 8001106:	4603      	mov	r3, r0
 8001108:	3301      	adds	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	4798      	blx	r3
 8001114:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <cJSON_strdup+0x3c>
    {
        return NULL;
 800111c:	2300      	movs	r3, #0
 800111e:	e005      	b.n	800112c <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	68b8      	ldr	r0, [r7, #8]
 8001126:	f025 fa3f 	bl	80265a8 <memcpy>

    return copy;
 800112a:	68bb      	ldr	r3, [r7, #8]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2028      	movs	r0, #40	; 0x28
 8001142:	4798      	blx	r3
 8001144:	60f8      	str	r0, [r7, #12]
    if (node)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d004      	beq.n	8001156 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800114c:	2228      	movs	r2, #40	; 0x28
 800114e:	2100      	movs	r1, #0
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f025 fa51 	bl	80265f8 <memset>
    }

    return node;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800116c:	e037      	b.n	80011de <cJSON_Delete+0x7e>
    {
        next = item->next;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117c:	2b00      	cmp	r3, #0
 800117e:	d108      	bne.n	8001192 <cJSON_Delete+0x32>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d004      	beq.n	8001192 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ffe7 	bl	8001160 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119a:	2b00      	cmp	r3, #0
 800119c:	d109      	bne.n	80011b2 <cJSON_Delete+0x52>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d005      	beq.n	80011b2 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <cJSON_Delete+0x90>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	6912      	ldr	r2, [r2, #16]
 80011ae:	4610      	mov	r0, r2
 80011b0:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d109      	bne.n	80011d2 <cJSON_Delete+0x72>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d005      	beq.n	80011d2 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <cJSON_Delete+0x90>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	6a12      	ldr	r2, [r2, #32]
 80011ce:	4610      	mov	r0, r2
 80011d0:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <cJSON_Delete+0x90>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	4798      	blx	r3
        item = next;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1c4      	bne.n	800116e <cJSON_Delete+0xe>
    }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000000 	.word	0x20000000

080011f4 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80011f8:	232e      	movs	r3, #46	; 0x2e
#endif
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	0000      	movs	r0, r0
	...

08001208 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b098      	sub	sp, #96	; 0x60
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	f04f 0300 	mov.w	r3, #0
 800121a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800121e:	2300      	movs	r3, #0
 8001220:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001222:	f7ff ffe7 	bl	80011f4 <get_decimal_point>
 8001226:	4603      	mov	r3, r0
 8001228:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <parse_number+0x36>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <parse_number+0x3a>
    {
        return false;
 800123e:	2300      	movs	r3, #0
 8001240:	e0c6      	b.n	80013d0 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001242:	2300      	movs	r3, #0
 8001244:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001246:	e063      	b.n	8001310 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	6899      	ldr	r1, [r3, #8]
 8001250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001252:	440b      	add	r3, r1
 8001254:	4413      	add	r3, r2
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b45      	cmp	r3, #69	; 0x45
 800125a:	dc3d      	bgt.n	80012d8 <parse_number+0xd0>
 800125c:	2b2b      	cmp	r3, #43	; 0x2b
 800125e:	db66      	blt.n	800132e <parse_number+0x126>
 8001260:	3b2b      	subs	r3, #43	; 0x2b
 8001262:	2b1a      	cmp	r3, #26
 8001264:	d863      	bhi.n	800132e <parse_number+0x126>
 8001266:	a201      	add	r2, pc, #4	; (adr r2, 800126c <parse_number+0x64>)
 8001268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126c:	080012dd 	.word	0x080012dd
 8001270:	0800132f 	.word	0x0800132f
 8001274:	080012dd 	.word	0x080012dd
 8001278:	080012fb 	.word	0x080012fb
 800127c:	0800132f 	.word	0x0800132f
 8001280:	080012dd 	.word	0x080012dd
 8001284:	080012dd 	.word	0x080012dd
 8001288:	080012dd 	.word	0x080012dd
 800128c:	080012dd 	.word	0x080012dd
 8001290:	080012dd 	.word	0x080012dd
 8001294:	080012dd 	.word	0x080012dd
 8001298:	080012dd 	.word	0x080012dd
 800129c:	080012dd 	.word	0x080012dd
 80012a0:	080012dd 	.word	0x080012dd
 80012a4:	080012dd 	.word	0x080012dd
 80012a8:	0800132f 	.word	0x0800132f
 80012ac:	0800132f 	.word	0x0800132f
 80012b0:	0800132f 	.word	0x0800132f
 80012b4:	0800132f 	.word	0x0800132f
 80012b8:	0800132f 	.word	0x0800132f
 80012bc:	0800132f 	.word	0x0800132f
 80012c0:	0800132f 	.word	0x0800132f
 80012c4:	0800132f 	.word	0x0800132f
 80012c8:	0800132f 	.word	0x0800132f
 80012cc:	0800132f 	.word	0x0800132f
 80012d0:	0800132f 	.word	0x0800132f
 80012d4:	080012dd 	.word	0x080012dd
 80012d8:	2b65      	cmp	r3, #101	; 0x65
 80012da:	d128      	bne.n	800132e <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	6899      	ldr	r1, [r3, #8]
 80012e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012e6:	440b      	add	r3, r1
 80012e8:	4413      	add	r3, r2
 80012ea:	7819      	ldrb	r1, [r3, #0]
 80012ec:	f107 0208 	add.w	r2, r7, #8
 80012f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012f2:	4413      	add	r3, r2
 80012f4:	460a      	mov	r2, r1
 80012f6:	701a      	strb	r2, [r3, #0]
                break;
 80012f8:	e007      	b.n	800130a <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 80012fa:	f107 0208 	add.w	r2, r7, #8
 80012fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001300:	4413      	add	r3, r2
 8001302:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001306:	701a      	strb	r2, [r3, #0]
                break;
 8001308:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800130a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800130c:	3301      	adds	r3, #1
 800130e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001312:	2b3e      	cmp	r3, #62	; 0x3e
 8001314:	d80d      	bhi.n	8001332 <parse_number+0x12a>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00a      	beq.n	8001332 <parse_number+0x12a>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001322:	441a      	add	r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	d38d      	bcc.n	8001248 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 800132c:	e001      	b.n	8001332 <parse_number+0x12a>
                goto loop_end;
 800132e:	bf00      	nop
 8001330:	e000      	b.n	8001334 <parse_number+0x12c>
loop_end:
 8001332:	bf00      	nop
    number_c_string[i] = '\0';
 8001334:	f107 0208 	add.w	r2, r7, #8
 8001338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800133a:	4413      	add	r3, r2
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001340:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f027 fa66 	bl	802881c <strtod>
 8001350:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8001354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	429a      	cmp	r2, r3
 800135c:	d101      	bne.n	8001362 <parse_number+0x15a>
    {
        return false; /* parse_error */
 800135e:	2300      	movs	r3, #0
 8001360:	e036      	b.n	80013d0 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001368:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800136c:	a31b      	add	r3, pc, #108	; (adr r3, 80013dc <parse_number+0x1d4>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001376:	f7ff fbd5 	bl	8000b24 <__aeabi_dcmpge>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d004      	beq.n	800138a <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001386:	615a      	str	r2, [r3, #20]
 8001388:	e015      	b.n	80013b6 <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <parse_number+0x1d0>)
 8001390:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001394:	f7ff fbbc 	bl	8000b10 <__aeabi_dcmple>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d004      	beq.n	80013a8 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013a4:	615a      	str	r2, [r3, #20]
 80013a6:	e006      	b.n	80013b6 <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 80013a8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80013ac:	f7ff fbe4 	bl	8000b78 <__aeabi_d2iz>
 80013b0:	4602      	mov	r2, r0
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2208      	movs	r2, #8
 80013ba:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80013c2:	f107 0208 	add.w	r2, r7, #8
 80013c6:	1a8a      	subs	r2, r1, r2
 80013c8:	441a      	add	r2, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	609a      	str	r2, [r3, #8]
    return true;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3760      	adds	r7, #96	; 0x60
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	c1e00000 	.word	0xc1e00000
 80013dc:	ffc00000 	.word	0xffc00000
 80013e0:	41dfffff 	.word	0x41dfffff

080013e4 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <ensure+0x20>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <ensure+0x24>
    {
        return NULL;
 8001404:	2300      	movs	r3, #0
 8001406:	e083      	b.n	8001510 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d007      	beq.n	8001420 <ensure+0x3c>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	d301      	bcc.n	8001420 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800141c:	2300      	movs	r3, #0
 800141e:	e077      	b.n	8001510 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	da01      	bge.n	800142a <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8001426:	2300      	movs	r3, #0
 8001428:	e072      	b.n	8001510 <ensure+0x12c>
    }

    needed += p->offset + 1;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	4413      	add	r3, r2
 8001432:	3301      	adds	r3, #1
 8001434:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d805      	bhi.n	800144c <ensure+0x68>
    {
        return p->buffer + p->offset;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	4413      	add	r3, r2
 800144a:	e061      	b.n	8001510 <ensure+0x12c>
    }

    if (p->noalloc) {
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <ensure+0x74>
        return NULL;
 8001454:	2300      	movs	r3, #0
 8001456:	e05b      	b.n	8001510 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800145e:	d308      	bcc.n	8001472 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	db03      	blt.n	800146e <ensure+0x8a>
        {
            newsize = INT_MAX;
 8001466:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	e004      	b.n	8001478 <ensure+0x94>
        }
        else
        {
            return NULL;
 800146e:	2300      	movs	r3, #0
 8001470:	e04e      	b.n	8001510 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d018      	beq.n	80014b2 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	4610      	mov	r0, r2
 800148c:	4798      	blx	r3
 800148e:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d132      	bne.n	80014fc <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	4610      	mov	r0, r2
 80014a0:	4798      	blx	r3
            p->length = 0;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

            return NULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e02e      	b.n	8001510 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	68b8      	ldr	r0, [r7, #8]
 80014b8:	4798      	blx	r3
 80014ba:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10d      	bne.n	80014de <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	4610      	mov	r0, r2
 80014cc:	4798      	blx	r3
            p->length = 0;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]

            return NULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	e018      	b.n	8001510 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6819      	ldr	r1, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	3301      	adds	r3, #1
 80014e8:	461a      	mov	r2, r3
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f025 f85c 	bl	80265a8 <memcpy>
        p->hooks.deallocate(p->buffer);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	4610      	mov	r0, r2
 80014fa:	4798      	blx	r3
    }
    p->length = newsize;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	4413      	add	r3, r2
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d013      	beq.n	8001552 <update_offset+0x3a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00f      	beq.n	8001552 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	4413      	add	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689c      	ldr	r4, [r3, #8]
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7fe fe4e 	bl	80001e4 <strlen>
 8001548:	4603      	mov	r3, r0
 800154a:	18e2      	adds	r2, r4, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	e000      	b.n	8001554 <update_offset+0x3c>
        return;
 8001552:	bf00      	nop
}
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bd90      	pop	{r4, r7, pc}
	...

0800155c <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 800155c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001560:	b087      	sub	sp, #28
 8001562:	af00      	add	r7, sp, #0
 8001564:	ed87 0b02 	vstr	d0, [r7, #8]
 8001568:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 800156c:	68b8      	ldr	r0, [r7, #8]
 800156e:	68fe      	ldr	r6, [r7, #12]
 8001570:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	687e      	ldr	r6, [r7, #4]
 8001578:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800157c:	f7ff fadc 	bl	8000b38 <__aeabi_dcmpgt>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d004      	beq.n	8001590 <compare_double+0x34>
 8001586:	68bc      	ldr	r4, [r7, #8]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800158e:	e003      	b.n	8001598 <compare_double+0x3c>
 8001590:	683c      	ldr	r4, [r7, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001598:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 800159c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015a4:	f7fe fe80 	bl	80002a8 <__aeabi_dsub>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4690      	mov	r8, r2
 80015ae:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <compare_double+0x8c>)
 80015b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015bc:	f7ff f82c 	bl	8000618 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	2101      	movs	r1, #1
 80015c6:	460c      	mov	r4, r1
 80015c8:	4640      	mov	r0, r8
 80015ca:	4649      	mov	r1, r9
 80015cc:	f7ff faa0 	bl	8000b10 <__aeabi_dcmple>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <compare_double+0x7e>
 80015d6:	2300      	movs	r3, #0
 80015d8:	461c      	mov	r4, r3
 80015da:	b2e3      	uxtb	r3, r4
}
 80015dc:	4618      	mov	r0, r3
 80015de:	371c      	adds	r7, #28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015e6:	bf00      	nop
 80015e8:	3cb00000 	.word	0x3cb00000

080015ec <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 80015ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ee:	b093      	sub	sp, #76	; 0x4c
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001600:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	f107 0318 	add.w	r3, r7, #24
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
 8001620:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 8001622:	f7ff fde7 	bl	80011f4 <get_decimal_point>
 8001626:	4603      	mov	r3, r0
 8001628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <print_number+0x56>
    {
        return false;
 800163e:	2300      	movs	r3, #0
 8001640:	e0b4      	b.n	80017ac <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8001642:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001646:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800164a:	f7ff fa7f 	bl	8000b4c <__aeabi_dcmpun>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d121      	bne.n	8001698 <print_number+0xac>
 8001654:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001658:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800165c:	2301      	movs	r3, #1
 800165e:	461e      	mov	r6, r3
 8001660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001664:	4b53      	ldr	r3, [pc, #332]	; (80017b4 <print_number+0x1c8>)
 8001666:	4620      	mov	r0, r4
 8001668:	4629      	mov	r1, r5
 800166a:	f7ff fa6f 	bl	8000b4c <__aeabi_dcmpun>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10b      	bne.n	800168c <print_number+0xa0>
 8001674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001678:	4b4e      	ldr	r3, [pc, #312]	; (80017b4 <print_number+0x1c8>)
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7ff fa47 	bl	8000b10 <__aeabi_dcmple>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <print_number+0xa0>
 8001688:	2300      	movs	r3, #0
 800168a:	461e      	mov	r6, r3
 800168c:	b2f3      	uxtb	r3, r6
 800168e:	f083 0301 	eor.w	r3, r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d007      	beq.n	80016a8 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4946      	ldr	r1, [pc, #280]	; (80017b8 <print_number+0x1cc>)
 800169e:	4618      	mov	r0, r3
 80016a0:	f025 fc5e 	bl	8026f60 <siprintf>
 80016a4:	6478      	str	r0, [r7, #68]	; 0x44
 80016a6:	e03f      	b.n	8001728 <print_number+0x13c>
    }
	else if(d == (double)item->valueint)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff49 	bl	8000544 <__aeabi_i2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80016ba:	f7ff fa15 	bl	8000ae8 <__aeabi_dcmpeq>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d009      	beq.n	80016d8 <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695a      	ldr	r2, [r3, #20]
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	493b      	ldr	r1, [pc, #236]	; (80017bc <print_number+0x1d0>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f025 fc46 	bl	8026f60 <siprintf>
 80016d4:	6478      	str	r0, [r7, #68]	; 0x44
 80016d6:	e027      	b.n	8001728 <print_number+0x13c>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80016d8:	f107 0014 	add.w	r0, r7, #20
 80016dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016e0:	4937      	ldr	r1, [pc, #220]	; (80017c0 <print_number+0x1d4>)
 80016e2:	f025 fc3d 	bl	8026f60 <siprintf>
 80016e6:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80016e8:	f107 0208 	add.w	r2, r7, #8
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4934      	ldr	r1, [pc, #208]	; (80017c4 <print_number+0x1d8>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f025 fc54 	bl	8026fa0 <siscanf>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d10c      	bne.n	8001718 <print_number+0x12c>
 80016fe:	ed97 7b02 	vldr	d7, [r7, #8]
 8001702:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8001706:	eeb0 0a47 	vmov.f32	s0, s14
 800170a:	eef0 0a67 	vmov.f32	s1, s15
 800170e:	f7ff ff25 	bl	800155c <compare_double>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d107      	bne.n	8001728 <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8001718:	f107 0014 	add.w	r0, r7, #20
 800171c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001720:	4929      	ldr	r1, [pc, #164]	; (80017c8 <print_number+0x1dc>)
 8001722:	f025 fc1d 	bl	8026f60 <siprintf>
 8001726:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8001728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800172a:	2b00      	cmp	r3, #0
 800172c:	db02      	blt.n	8001734 <print_number+0x148>
 800172e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001730:	2b19      	cmp	r3, #25
 8001732:	dd01      	ble.n	8001738 <print_number+0x14c>
    {
        return false;
 8001734:	2300      	movs	r3, #0
 8001736:	e039      	b.n	80017ac <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800173a:	3301      	adds	r3, #1
 800173c:	4619      	mov	r1, r3
 800173e:	6838      	ldr	r0, [r7, #0]
 8001740:	f7ff fe50 	bl	80013e4 <ensure>
 8001744:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8001746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <print_number+0x164>
    {
        return false;
 800174c:	2300      	movs	r3, #0
 800174e:	e02d      	b.n	80017ac <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8001750:	2300      	movs	r3, #0
 8001752:	643b      	str	r3, [r7, #64]	; 0x40
 8001754:	e01a      	b.n	800178c <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 8001756:	f107 0214 	add.w	r2, r7, #20
 800175a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800175c:	4413      	add	r3, r2
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001764:	429a      	cmp	r2, r3
 8001766:	d105      	bne.n	8001774 <print_number+0x188>
        {
            output_pointer[i] = '.';
 8001768:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800176a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800176c:	4413      	add	r3, r2
 800176e:	222e      	movs	r2, #46	; 0x2e
 8001770:	701a      	strb	r2, [r3, #0]
            continue;
 8001772:	e008      	b.n	8001786 <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 8001774:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001778:	4413      	add	r3, r2
 800177a:	f107 0114 	add.w	r1, r7, #20
 800177e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001780:	440a      	add	r2, r1
 8001782:	7812      	ldrb	r2, [r2, #0]
 8001784:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8001786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001788:	3301      	adds	r3, #1
 800178a:	643b      	str	r3, [r7, #64]	; 0x40
 800178c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800178e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001790:	429a      	cmp	r2, r3
 8001792:	d3e0      	bcc.n	8001756 <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 8001794:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001798:	4413      	add	r3, r2
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017a4:	441a      	add	r2, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	609a      	str	r2, [r3, #8]

    return true;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	374c      	adds	r7, #76	; 0x4c
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b4:	7fefffff 	.word	0x7fefffff
 80017b8:	0802b81c 	.word	0x0802b81c
 80017bc:	0802b824 	.word	0x0802b824
 80017c0:	0802b828 	.word	0x0802b828
 80017c4:	0802b830 	.word	0x0802b830
 80017c8:	0802b834 	.word	0x0802b834

080017cc <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	e04c      	b.n	800187c <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4413      	add	r3, r2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b2f      	cmp	r3, #47	; 0x2f
 80017ec:	d90f      	bls.n	800180e <parse_hex4+0x42>
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4413      	add	r3, r2
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b39      	cmp	r3, #57	; 0x39
 80017f8:	d809      	bhi.n	800180e <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	4413      	add	r3, r2
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	3b30      	subs	r3, #48	; 0x30
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e02d      	b.n	800186a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4413      	add	r3, r2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b40      	cmp	r3, #64	; 0x40
 8001818:	d90f      	bls.n	800183a <parse_hex4+0x6e>
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4413      	add	r3, r2
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b46      	cmp	r3, #70	; 0x46
 8001824:	d809      	bhi.n	800183a <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4413      	add	r3, r2
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	3b37      	subs	r3, #55	; 0x37
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	e017      	b.n	800186a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4413      	add	r3, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b60      	cmp	r3, #96	; 0x60
 8001844:	d90f      	bls.n	8001866 <parse_hex4+0x9a>
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b66      	cmp	r3, #102	; 0x66
 8001850:	d809      	bhi.n	8001866 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4413      	add	r3, r2
 8001860:	3b57      	subs	r3, #87	; 0x57
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	e001      	b.n	800186a <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001866:	2300      	movs	r3, #0
 8001868:	e00c      	b.n	8001884 <parse_hex4+0xb8>
        }

        if (i < 3)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d802      	bhi.n	8001876 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	3301      	adds	r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d9af      	bls.n	80017e2 <parse_hex4+0x16>
        }
    }

    return h;
 8001882:	68fb      	ldr	r3, [r7, #12]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b05      	cmp	r3, #5
 80018c8:	f340 80b7 	ble.w	8001a3a <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	3302      	adds	r3, #2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff7b 	bl	80017cc <parse_hex4>
 80018d6:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018de:	d304      	bcc.n	80018ea <utf16_literal_to_utf8+0x5a>
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80018e6:	f0c0 80aa 	bcc.w	8001a3e <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80018f0:	d337      	bcc.n	8001962 <utf16_literal_to_utf8+0xd2>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018f8:	d233      	bcs.n	8001962 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	3306      	adds	r3, #6
 80018fe:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001904:	230c      	movs	r3, #12
 8001906:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b05      	cmp	r3, #5
 8001912:	f340 8096 	ble.w	8001a42 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b5c      	cmp	r3, #92	; 0x5c
 800191c:	f040 8093 	bne.w	8001a46 <utf16_literal_to_utf8+0x1b6>
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	3301      	adds	r3, #1
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b75      	cmp	r3, #117	; 0x75
 8001928:	f040 808d 	bne.w	8001a46 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	3302      	adds	r3, #2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff4b 	bl	80017cc <parse_hex4>
 8001936:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800193e:	f0c0 8084 	bcc.w	8001a4a <utf16_literal_to_utf8+0x1ba>
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001948:	d27f      	bcs.n	8001a4a <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	029a      	lsls	r2, r3, #10
 800194e:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <utf16_literal_to_utf8+0x1cc>)
 8001950:	4013      	ands	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001958:	4313      	orrs	r3, r2
 800195a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001960:	e004      	b.n	800196c <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001962:	2306      	movs	r3, #6
 8001964:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	2b7f      	cmp	r3, #127	; 0x7f
 8001970:	d803      	bhi.n	800197a <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001972:	2301      	movs	r3, #1
 8001974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001978:	e01f      	b.n	80019ba <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001980:	d206      	bcs.n	8001990 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8001982:	2302      	movs	r3, #2
 8001984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001988:	23c0      	movs	r3, #192	; 0xc0
 800198a:	f887 3020 	strb.w	r3, [r7, #32]
 800198e:	e014      	b.n	80019ba <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001996:	d206      	bcs.n	80019a6 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001998:	2303      	movs	r3, #3
 800199a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800199e:	23e0      	movs	r3, #224	; 0xe0
 80019a0:	f887 3020 	strb.w	r3, [r7, #32]
 80019a4:	e009      	b.n	80019ba <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80019ac:	d24f      	bcs.n	8001a4e <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80019ae:	2304      	movs	r3, #4
 80019b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80019b4:	23f0      	movs	r3, #240	; 0xf0
 80019b6:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80019ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019be:	3b01      	subs	r3, #1
 80019c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80019c4:	e015      	b.n	80019f2 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6819      	ldr	r1, [r3, #0]
 80019d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019d8:	440b      	add	r3, r1
 80019da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	099b      	lsrs	r3, r3, #6
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80019e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019ec:	3b01      	subs	r3, #1
 80019ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80019f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1e5      	bne.n	80019c6 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80019fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d909      	bls.n	8001a16 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	b2d9      	uxtb	r1, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	e007      	b.n	8001a26 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a2e:	441a      	add	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001a34:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a38:	e00b      	b.n	8001a52 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001a3a:	bf00      	nop
 8001a3c:	e008      	b.n	8001a50 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001a3e:	bf00      	nop
 8001a40:	e006      	b.n	8001a50 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a42:	bf00      	nop
 8001a44:	e004      	b.n	8001a50 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a46:	bf00      	nop
 8001a48:	e002      	b.n	8001a50 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a4a:	bf00      	nop
 8001a4c:	e000      	b.n	8001a50 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001a4e:	bf00      	nop

fail:
    return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3728      	adds	r7, #40	; 0x28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	000ffc00 	.word	0x000ffc00

08001a60 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	3301      	adds	r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	3301      	adds	r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	4413      	add	r3, r2
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b22      	cmp	r3, #34	; 0x22
 8001a9c:	f040 8102 	bne.w	8001ca4 <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001aa8:	e017      	b.n	8001ada <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b5c      	cmp	r3, #92	; 0x5c
 8001ab0:	d110      	bne.n	8001ad4 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	f080 80f0 	bcs.w	8001ca8 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	3301      	adds	r3, #1
 8001acc:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6a3a      	ldr	r2, [r7, #32]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d203      	bcs.n	8001af4 <parse_string+0x94>
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b22      	cmp	r3, #34	; 0x22
 8001af2:	d1da      	bne.n	8001aaa <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6a3a      	ldr	r2, [r7, #32]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	f080 80d2 	bcs.w	8001cac <parse_string+0x24c>
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b22      	cmp	r3, #34	; 0x22
 8001b0e:	f040 80cd 	bne.w	8001cac <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	6a3a      	ldr	r2, [r7, #32]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	3201      	adds	r2, #1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4798      	blx	r3
 8001b34:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80b9 	beq.w	8001cb0 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001b42:	e093      	b.n	8001c6c <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b5c      	cmp	r3, #92	; 0x5c
 8001b4a:	d008      	beq.n	8001b5e <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4e:	1c53      	adds	r3, r2, #1
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1c59      	adds	r1, r3, #1
 8001b56:	60f9      	str	r1, [r7, #12]
 8001b58:	7812      	ldrb	r2, [r2, #0]
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	e086      	b.n	8001c6c <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001b62:	6a3a      	ldr	r2, [r7, #32]
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f340 80a3 	ble.w	8001cb4 <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	3301      	adds	r3, #1
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b75      	cmp	r3, #117	; 0x75
 8001b76:	f300 809f 	bgt.w	8001cb8 <parse_string+0x258>
 8001b7a:	2b5c      	cmp	r3, #92	; 0x5c
 8001b7c:	da04      	bge.n	8001b88 <parse_string+0x128>
 8001b7e:	2b22      	cmp	r3, #34	; 0x22
 8001b80:	d05c      	beq.n	8001c3c <parse_string+0x1dc>
 8001b82:	2b2f      	cmp	r3, #47	; 0x2f
 8001b84:	d05a      	beq.n	8001c3c <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001b86:	e097      	b.n	8001cb8 <parse_string+0x258>
 8001b88:	3b5c      	subs	r3, #92	; 0x5c
 8001b8a:	2b19      	cmp	r3, #25
 8001b8c:	f200 8094 	bhi.w	8001cb8 <parse_string+0x258>
 8001b90:	a201      	add	r2, pc, #4	; (adr r2, 8001b98 <parse_string+0x138>)
 8001b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b96:	bf00      	nop
 8001b98:	08001c3d 	.word	0x08001c3d
 8001b9c:	08001cb9 	.word	0x08001cb9
 8001ba0:	08001cb9 	.word	0x08001cb9
 8001ba4:	08001cb9 	.word	0x08001cb9
 8001ba8:	08001cb9 	.word	0x08001cb9
 8001bac:	08001cb9 	.word	0x08001cb9
 8001bb0:	08001c01 	.word	0x08001c01
 8001bb4:	08001cb9 	.word	0x08001cb9
 8001bb8:	08001cb9 	.word	0x08001cb9
 8001bbc:	08001cb9 	.word	0x08001cb9
 8001bc0:	08001c0d 	.word	0x08001c0d
 8001bc4:	08001cb9 	.word	0x08001cb9
 8001bc8:	08001cb9 	.word	0x08001cb9
 8001bcc:	08001cb9 	.word	0x08001cb9
 8001bd0:	08001cb9 	.word	0x08001cb9
 8001bd4:	08001cb9 	.word	0x08001cb9
 8001bd8:	08001cb9 	.word	0x08001cb9
 8001bdc:	08001cb9 	.word	0x08001cb9
 8001be0:	08001c19 	.word	0x08001c19
 8001be4:	08001cb9 	.word	0x08001cb9
 8001be8:	08001cb9 	.word	0x08001cb9
 8001bec:	08001cb9 	.word	0x08001cb9
 8001bf0:	08001c25 	.word	0x08001c25
 8001bf4:	08001cb9 	.word	0x08001cb9
 8001bf8:	08001c31 	.word	0x08001c31
 8001bfc:	08001c4b 	.word	0x08001c4b
                    *output_pointer++ = '\b';
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	60fa      	str	r2, [r7, #12]
 8001c06:	2208      	movs	r2, #8
 8001c08:	701a      	strb	r2, [r3, #0]
                    break;
 8001c0a:	e02b      	b.n	8001c64 <parse_string+0x204>
                    *output_pointer++ = '\f';
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	60fa      	str	r2, [r7, #12]
 8001c12:	220c      	movs	r2, #12
 8001c14:	701a      	strb	r2, [r3, #0]
                    break;
 8001c16:	e025      	b.n	8001c64 <parse_string+0x204>
                    *output_pointer++ = '\n';
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	60fa      	str	r2, [r7, #12]
 8001c1e:	220a      	movs	r2, #10
 8001c20:	701a      	strb	r2, [r3, #0]
                    break;
 8001c22:	e01f      	b.n	8001c64 <parse_string+0x204>
                    *output_pointer++ = '\r';
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	60fa      	str	r2, [r7, #12]
 8001c2a:	220d      	movs	r2, #13
 8001c2c:	701a      	strb	r2, [r3, #0]
                    break;
 8001c2e:	e019      	b.n	8001c64 <parse_string+0x204>
                    *output_pointer++ = '\t';
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	60fa      	str	r2, [r7, #12]
 8001c36:	2209      	movs	r2, #9
 8001c38:	701a      	strb	r2, [r3, #0]
                    break;
 8001c3a:	e013      	b.n	8001c64 <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	60fa      	str	r2, [r7, #12]
 8001c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c44:	7852      	ldrb	r2, [r2, #1]
 8001c46:	701a      	strb	r2, [r3, #0]
                    break;
 8001c48:	e00c      	b.n	8001c64 <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	461a      	mov	r2, r3
 8001c50:	6a39      	ldr	r1, [r7, #32]
 8001c52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c54:	f7ff fe1c 	bl	8001890 <utf16_literal_to_utf8>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d02c      	beq.n	8001cbc <parse_string+0x25c>
                    break;
 8001c62:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
 8001c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c68:	4413      	add	r3, r2
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	f4ff af67 	bcc.w	8001b44 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2210      	movs	r2, #16
 8001c80:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6a3a      	ldr	r2, [r7, #32]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	609a      	str	r2, [r3, #8]

    return true;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e01e      	b.n	8001ce2 <parse_string+0x282>
        goto fail;
 8001ca4:	bf00      	nop
 8001ca6:	e00a      	b.n	8001cbe <parse_string+0x25e>
                    goto fail;
 8001ca8:	bf00      	nop
 8001caa:	e008      	b.n	8001cbe <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 8001cac:	bf00      	nop
 8001cae:	e006      	b.n	8001cbe <parse_string+0x25e>
            goto fail; /* allocation failure */
 8001cb0:	bf00      	nop
 8001cb2:	e004      	b.n	8001cbe <parse_string+0x25e>
                goto fail;
 8001cb4:	bf00      	nop
 8001cb6:	e002      	b.n	8001cbe <parse_string+0x25e>
                    goto fail;
 8001cb8:	bf00      	nop
 8001cba:	e000      	b.n	8001cbe <parse_string+0x25e>
                        goto fail;
 8001cbc:	bf00      	nop

fail:
    if (output != NULL)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	69f8      	ldr	r0, [r7, #28]
 8001cca:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d006      	beq.n	8001ce0 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3728      	adds	r7, #40	; 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop

08001cec <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <print_string_ptr+0x28>
    {
        return false;
 8001d10:	2300      	movs	r3, #0
 8001d12:	e110      	b.n	8001f36 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d111      	bne.n	8001d3e <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8001d1a:	2103      	movs	r1, #3
 8001d1c:	6838      	ldr	r0, [r7, #0]
 8001d1e:	f7ff fb61 	bl	80013e4 <ensure>
 8001d22:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <print_string_ptr+0x42>
        {
            return false;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e103      	b.n	8001f36 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4a83      	ldr	r2, [pc, #524]	; (8001f40 <print_string_ptr+0x254>)
 8001d32:	8811      	ldrh	r1, [r2, #0]
 8001d34:	7892      	ldrb	r2, [r2, #2]
 8001d36:	8019      	strh	r1, [r3, #0]
 8001d38:	709a      	strb	r2, [r3, #2]

        return true;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0fb      	b.n	8001f36 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	e023      	b.n	8001d8c <print_string_ptr+0xa0>
    {
        switch (*input_pointer)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b22      	cmp	r3, #34	; 0x22
 8001d4a:	dc0e      	bgt.n	8001d6a <print_string_ptr+0x7e>
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	db12      	blt.n	8001d76 <print_string_ptr+0x8a>
 8001d50:	3b08      	subs	r3, #8
 8001d52:	2201      	movs	r2, #1
 8001d54:	409a      	lsls	r2, r3
 8001d56:	4b7b      	ldr	r3, [pc, #492]	; (8001f44 <print_string_ptr+0x258>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	bf14      	ite	ne
 8001d5e:	2301      	movne	r3, #1
 8001d60:	2300      	moveq	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <print_string_ptr+0x82>
 8001d68:	e005      	b.n	8001d76 <print_string_ptr+0x8a>
 8001d6a:	2b5c      	cmp	r3, #92	; 0x5c
 8001d6c:	d103      	bne.n	8001d76 <print_string_ptr+0x8a>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3301      	adds	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
                break;
 8001d74:	e007      	b.n	8001d86 <print_string_ptr+0x9a>
            default:
                if (*input_pointer < 32)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b1f      	cmp	r3, #31
 8001d7c:	d802      	bhi.n	8001d84 <print_string_ptr+0x98>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3305      	adds	r3, #5
 8001d82:	617b      	str	r3, [r7, #20]
                }
                break;
 8001d84:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1d7      	bne.n	8001d44 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3303      	adds	r3, #3
 8001da6:	4619      	mov	r1, r3
 8001da8:	6838      	ldr	r0, [r7, #0]
 8001daa:	f7ff fb1b 	bl	80013e4 <ensure>
 8001dae:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <print_string_ptr+0xce>
    {
        return false;
 8001db6:	2300      	movs	r3, #0
 8001db8:	e0bd      	b.n	8001f36 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d117      	bne.n	8001df0 <print_string_ptr+0x104>
    {
        output[0] = '\"';
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	2222      	movs	r2, #34	; 0x22
 8001dc4:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f024 fbea 	bl	80265a8 <memcpy>
        output[output_length + 1] = '\"';
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4413      	add	r3, r2
 8001ddc:	2222      	movs	r2, #34	; 0x22
 8001dde:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3302      	adds	r3, #2
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4413      	add	r3, r2
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]

        return true;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0a2      	b.n	8001f36 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	2222      	movs	r2, #34	; 0x22
 8001df4:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	e087      	b.n	8001f12 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b1f      	cmp	r3, #31
 8001e08:	d90c      	bls.n	8001e24 <print_string_ptr+0x138>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b22      	cmp	r3, #34	; 0x22
 8001e10:	d008      	beq.n	8001e24 <print_string_ptr+0x138>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b5c      	cmp	r3, #92	; 0x5c
 8001e18:	d004      	beq.n	8001e24 <print_string_ptr+0x138>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	781a      	ldrb	r2, [r3, #0]
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	e070      	b.n	8001f06 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	61ba      	str	r2, [r7, #24]
 8001e2a:	225c      	movs	r2, #92	; 0x5c
 8001e2c:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b22      	cmp	r3, #34	; 0x22
 8001e34:	dc3e      	bgt.n	8001eb4 <print_string_ptr+0x1c8>
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	db5a      	blt.n	8001ef0 <print_string_ptr+0x204>
 8001e3a:	3b08      	subs	r3, #8
 8001e3c:	2b1a      	cmp	r3, #26
 8001e3e:	d857      	bhi.n	8001ef0 <print_string_ptr+0x204>
 8001e40:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <print_string_ptr+0x15c>)
 8001e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e46:	bf00      	nop
 8001e48:	08001ec9 	.word	0x08001ec9
 8001e4c:	08001ee9 	.word	0x08001ee9
 8001e50:	08001ed9 	.word	0x08001ed9
 8001e54:	08001ef1 	.word	0x08001ef1
 8001e58:	08001ed1 	.word	0x08001ed1
 8001e5c:	08001ee1 	.word	0x08001ee1
 8001e60:	08001ef1 	.word	0x08001ef1
 8001e64:	08001ef1 	.word	0x08001ef1
 8001e68:	08001ef1 	.word	0x08001ef1
 8001e6c:	08001ef1 	.word	0x08001ef1
 8001e70:	08001ef1 	.word	0x08001ef1
 8001e74:	08001ef1 	.word	0x08001ef1
 8001e78:	08001ef1 	.word	0x08001ef1
 8001e7c:	08001ef1 	.word	0x08001ef1
 8001e80:	08001ef1 	.word	0x08001ef1
 8001e84:	08001ef1 	.word	0x08001ef1
 8001e88:	08001ef1 	.word	0x08001ef1
 8001e8c:	08001ef1 	.word	0x08001ef1
 8001e90:	08001ef1 	.word	0x08001ef1
 8001e94:	08001ef1 	.word	0x08001ef1
 8001e98:	08001ef1 	.word	0x08001ef1
 8001e9c:	08001ef1 	.word	0x08001ef1
 8001ea0:	08001ef1 	.word	0x08001ef1
 8001ea4:	08001ef1 	.word	0x08001ef1
 8001ea8:	08001ef1 	.word	0x08001ef1
 8001eac:	08001ef1 	.word	0x08001ef1
 8001eb0:	08001ec1 	.word	0x08001ec1
 8001eb4:	2b5c      	cmp	r3, #92	; 0x5c
 8001eb6:	d11b      	bne.n	8001ef0 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	225c      	movs	r2, #92	; 0x5c
 8001ebc:	701a      	strb	r2, [r3, #0]
                    break;
 8001ebe:	e022      	b.n	8001f06 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2222      	movs	r2, #34	; 0x22
 8001ec4:	701a      	strb	r2, [r3, #0]
                    break;
 8001ec6:	e01e      	b.n	8001f06 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2262      	movs	r2, #98	; 0x62
 8001ecc:	701a      	strb	r2, [r3, #0]
                    break;
 8001ece:	e01a      	b.n	8001f06 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2266      	movs	r2, #102	; 0x66
 8001ed4:	701a      	strb	r2, [r3, #0]
                    break;
 8001ed6:	e016      	b.n	8001f06 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	226e      	movs	r2, #110	; 0x6e
 8001edc:	701a      	strb	r2, [r3, #0]
                    break;
 8001ede:	e012      	b.n	8001f06 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2272      	movs	r2, #114	; 0x72
 8001ee4:	701a      	strb	r2, [r3, #0]
                    break;
 8001ee6:	e00e      	b.n	8001f06 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2274      	movs	r2, #116	; 0x74
 8001eec:	701a      	strb	r2, [r3, #0]
                    break;
 8001eee:	e00a      	b.n	8001f06 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4914      	ldr	r1, [pc, #80]	; (8001f48 <print_string_ptr+0x25c>)
 8001ef8:	69b8      	ldr	r0, [r7, #24]
 8001efa:	f025 f831 	bl	8026f60 <siprintf>
                    output_pointer += 4;
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	3304      	adds	r3, #4
 8001f02:	61bb      	str	r3, [r7, #24]
                    break;
 8001f04:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f47f af73 	bne.w	8001e02 <print_string_ptr+0x116>
            }
        }
    }
    output[output_length + 1] = '\"';
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4413      	add	r3, r2
 8001f24:	2222      	movs	r2, #34	; 0x22
 8001f26:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]

    return true;
 8001f34:	2301      	movs	r3, #1
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3720      	adds	r7, #32
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	0802b83c 	.word	0x0802b83c
 8001f44:	04000037 	.word	0x04000037
 8001f48:	0802b840 	.word	0x0802b840

08001f4c <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	6839      	ldr	r1, [r7, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fec5 	bl	8001cec <print_string_ptr>
 8001f62:	4603      	mov	r3, r0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <buffer_skip_whitespace+0x16>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e02c      	b.n	8001fe0 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <buffer_skip_whitespace+0x2c>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d306      	bcc.n	8001fa6 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	e021      	b.n	8001fe0 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00d      	beq.n	8001fc8 <buffer_skip_whitespace+0x5c>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d207      	bcs.n	8001fc8 <buffer_skip_whitespace+0x5c>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d9e9      	bls.n	8001f9c <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d104      	bne.n	8001fde <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	1e5a      	subs	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001fde:	687b      	ldr	r3, [r7, #4]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <skip_utf8_bom+0x1e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <skip_utf8_bom+0x1e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <skip_utf8_bom+0x22>
    {
        return NULL;
 800200a:	2300      	movs	r3, #0
 800200c:	e01c      	b.n	8002048 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d018      	beq.n	8002046 <skip_utf8_bom+0x5a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	1d1a      	adds	r2, r3, #4
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	429a      	cmp	r2, r3
 8002020:	d211      	bcs.n	8002046 <skip_utf8_bom+0x5a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	4413      	add	r3, r2
 800202c:	2203      	movs	r2, #3
 800202e:	4908      	ldr	r1, [pc, #32]	; (8002050 <skip_utf8_bom+0x64>)
 8002030:	4618      	mov	r0, r3
 8002032:	f025 fda7 	bl	8027b84 <strncmp>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d104      	bne.n	8002046 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	1cda      	adds	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8002046:	687b      	ldr	r3, [r7, #4]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	0802b848 	.word	0x0802b848

08002054 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8002066:	2300      	movs	r3, #0
 8002068:	e00c      	b.n	8002084 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f7fe f8ba 	bl	80001e4 <strlen>
 8002070:	4603      	mov	r3, r0
 8002072:	3301      	adds	r3, #1
 8002074:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	6979      	ldr	r1, [r7, #20]
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 f805 	bl	800208c <cJSON_ParseWithLengthOpts>
 8002082:	4603      	mov	r3, r0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08e      	sub	sp, #56	; 0x38
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800209a:	f107 0318 	add.w	r3, r7, #24
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
 80020a8:	611a      	str	r2, [r3, #16]
 80020aa:	615a      	str	r2, [r3, #20]
 80020ac:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 80020b2:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <cJSON_ParseWithLengthOpts+0x12c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80020b8:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <cJSON_ParseWithLengthOpts+0x12c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d042      	beq.n	800214a <cJSON_ParseWithLengthOpts+0xbe>
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d03f      	beq.n	800214a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80020d6:	4a39      	ldr	r2, [pc, #228]	; (80021bc <cJSON_ParseWithLengthOpts+0x130>)
 80020d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80020de:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80020e2:	4836      	ldr	r0, [pc, #216]	; (80021bc <cJSON_ParseWithLengthOpts+0x130>)
 80020e4:	f7ff f826 	bl	8001134 <cJSON_New_Item>
 80020e8:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 80020ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d02e      	beq.n	800214e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80020f0:	f107 0318 	add.w	r3, r7, #24
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff79 	bl	8001fec <skip_utf8_bom>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff35 	bl	8001f6c <buffer_skip_whitespace>
 8002102:	4603      	mov	r3, r0
 8002104:	4619      	mov	r1, r3
 8002106:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002108:	f000 f90c 	bl	8002324 <parse_value>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d01f      	beq.n	8002152 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00e      	beq.n	8002136 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8002118:	f107 0318 	add.w	r3, r7, #24
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff25 	bl	8001f6c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8002122:	6a3a      	ldr	r2, [r7, #32]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	429a      	cmp	r2, r3
 8002128:	d215      	bcs.n	8002156 <cJSON_ParseWithLengthOpts+0xca>
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	4413      	add	r3, r2
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d004      	beq.n	8002146 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	441a      	add	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	601a      	str	r2, [r3, #0]
    }

    return item;
 8002146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002148:	e031      	b.n	80021ae <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800214a:	bf00      	nop
 800214c:	e004      	b.n	8002158 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800214e:	bf00      	nop
 8002150:	e002      	b.n	8002158 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002152:	bf00      	nop
 8002154:	e000      	b.n	8002158 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8002156:	bf00      	nop

fail:
    if (item != NULL)
 8002158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800215e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002160:	f7fe fffe 	bl	8001160 <cJSON_Delete>
    }

    if (value != NULL)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d020      	beq.n	80021ac <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8002172:	6a3a      	ldr	r2, [r7, #32]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	429a      	cmp	r2, r3
 8002178:	d202      	bcs.n	8002180 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e005      	b.n	800218c <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3b01      	subs	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d004      	beq.n	800219c <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	441a      	add	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <cJSON_ParseWithLengthOpts+0x12c>)
 800219e:	461a      	mov	r2, r3
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021a8:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3738      	adds	r7, #56	; 0x38
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200002b4 	.word	0x200002b4
 80021bc:	20000000 	.word	0x20000000

080021c0 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2100      	movs	r1, #0
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff41 	bl	8002054 <cJSON_ParseWithOpts>
 80021d2:	4603      	mov	r3, r0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08e      	sub	sp, #56	; 0x38
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 80021ec:	f107 0310 	add.w	r3, r7, #16
 80021f0:	2224      	movs	r2, #36	; 0x24
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f024 f9ff 	bl	80265f8 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a38      	ldr	r2, [pc, #224]	; (80022e0 <print+0x104>)
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	4610      	mov	r0, r2
 8002204:	4798      	blx	r3
 8002206:	4603      	mov	r3, r0
 8002208:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800220a:	4b35      	ldr	r3, [pc, #212]	; (80022e0 <print+0x104>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800221a:	ca07      	ldmia	r2, {r0, r1, r2}
 800221c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d040      	beq.n	80022a8 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8002226:	f107 0310 	add.w	r3, r7, #16
 800222a:	4619      	mov	r1, r3
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f965 	bl	80024fc <print_value>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d039      	beq.n	80022ac <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff f96b 	bl	8001518 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00d      	beq.n	8002266 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	6938      	ldr	r0, [r7, #16]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	3201      	adds	r2, #1
 8002254:	4611      	mov	r1, r2
 8002256:	4798      	blx	r3
 8002258:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 800225a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225c:	2b00      	cmp	r3, #0
 800225e:	d027      	beq.n	80022b0 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	e01e      	b.n	80022a4 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	3201      	adds	r2, #1
 800226e:	4610      	mov	r0, r2
 8002270:	4798      	blx	r3
 8002272:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 8002274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002276:	2b00      	cmp	r3, #0
 8002278:	d01c      	beq.n	80022b4 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800227a:	6939      	ldr	r1, [r7, #16]
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	4293      	cmp	r3, r2
 8002284:	bf28      	it	cs
 8002286:	4613      	movcs	r3, r2
 8002288:	461a      	mov	r2, r3
 800228a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800228c:	f024 f98c 	bl	80265a8 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002294:	4413      	add	r3, r2
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4610      	mov	r0, r2
 80022a2:	4798      	blx	r3
    }

    return printed;
 80022a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a6:	e016      	b.n	80022d6 <print+0xfa>
        goto fail;
 80022a8:	bf00      	nop
 80022aa:	e004      	b.n	80022b6 <print+0xda>
        goto fail;
 80022ac:	bf00      	nop
 80022ae:	e002      	b.n	80022b6 <print+0xda>
            goto fail;
 80022b0:	bf00      	nop
 80022b2:	e000      	b.n	80022b6 <print+0xda>
            goto fail;
 80022b4:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d004      	beq.n	80022c6 <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4610      	mov	r0, r2
 80022c4:	4798      	blx	r3
    }

    if (printed != NULL)
 80022c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <print+0xf8>
    {
        hooks->deallocate(printed);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80022d2:	4798      	blx	r3
    }

    return NULL;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3738      	adds	r7, #56	; 0x38
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	080300ac 	.word	0x080300ac

080022e4 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 80022ec:	4a04      	ldr	r2, [pc, #16]	; (8002300 <cJSON_Print+0x1c>)
 80022ee:	2101      	movs	r1, #1
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ff73 	bl	80021dc <print>
 80022f6:	4603      	mov	r3, r0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000000 	.word	0x20000000

08002304 <cJSON_PrintUnformatted>:

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <cJSON_PrintUnformatted+0x1c>)
 800230e:	2100      	movs	r1, #0
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff63 	bl	80021dc <print>
 8002316:	4603      	mov	r3, r0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000000 	.word	0x20000000

08002324 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <parse_value+0x18>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <parse_value+0x1c>
    {
        return false; /* no input */
 800233c:	2300      	movs	r3, #0
 800233e:	e0d2      	b.n	80024e6 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d01d      	beq.n	8002382 <parse_value+0x5e>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	1d1a      	adds	r2, r3, #4
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	429a      	cmp	r2, r3
 8002352:	d816      	bhi.n	8002382 <parse_value+0x5e>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4413      	add	r3, r2
 800235e:	2204      	movs	r2, #4
 8002360:	4963      	ldr	r1, [pc, #396]	; (80024f0 <parse_value+0x1cc>)
 8002362:	4618      	mov	r0, r3
 8002364:	f025 fc0e 	bl	8027b84 <strncmp>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2204      	movs	r2, #4
 8002372:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	1d1a      	adds	r2, r3, #4
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	609a      	str	r2, [r3, #8]
        return true;
 800237e:	2301      	movs	r3, #1
 8002380:	e0b1      	b.n	80024e6 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d01d      	beq.n	80023c4 <parse_value+0xa0>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	1d5a      	adds	r2, r3, #5
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	429a      	cmp	r2, r3
 8002394:	d816      	bhi.n	80023c4 <parse_value+0xa0>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	4413      	add	r3, r2
 80023a0:	2205      	movs	r2, #5
 80023a2:	4954      	ldr	r1, [pc, #336]	; (80024f4 <parse_value+0x1d0>)
 80023a4:	4618      	mov	r0, r3
 80023a6:	f025 fbed 	bl	8027b84 <strncmp>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d109      	bne.n	80023c4 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	1d5a      	adds	r2, r3, #5
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	609a      	str	r2, [r3, #8]
        return true;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e090      	b.n	80024e6 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d020      	beq.n	800240c <parse_value+0xe8>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	1d1a      	adds	r2, r3, #4
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d819      	bhi.n	800240c <parse_value+0xe8>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4413      	add	r3, r2
 80023e2:	2204      	movs	r2, #4
 80023e4:	4944      	ldr	r1, [pc, #272]	; (80024f8 <parse_value+0x1d4>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f025 fbcc 	bl	8027b84 <strncmp>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10c      	bne.n	800240c <parse_value+0xe8>
    {
        item->type = cJSON_True;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2202      	movs	r2, #2
 80023f6:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	1d1a      	adds	r2, r3, #4
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	609a      	str	r2, [r3, #8]
        return true;
 8002408:	2301      	movs	r3, #1
 800240a:	e06c      	b.n	80024e6 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d013      	beq.n	800243a <parse_value+0x116>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	429a      	cmp	r2, r3
 800241c:	d20d      	bcs.n	800243a <parse_value+0x116>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	4413      	add	r3, r2
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b22      	cmp	r3, #34	; 0x22
 800242c:	d105      	bne.n	800243a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff fb15 	bl	8001a60 <parse_string>
 8002436:	4603      	mov	r3, r0
 8002438:	e055      	b.n	80024e6 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d023      	beq.n	8002488 <parse_value+0x164>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	429a      	cmp	r2, r3
 800244a:	d21d      	bcs.n	8002488 <parse_value+0x164>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4413      	add	r3, r2
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b2d      	cmp	r3, #45	; 0x2d
 800245a:	d00f      	beq.n	800247c <parse_value+0x158>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4413      	add	r3, r2
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b2f      	cmp	r3, #47	; 0x2f
 800246a:	d90d      	bls.n	8002488 <parse_value+0x164>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4413      	add	r3, r2
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b39      	cmp	r3, #57	; 0x39
 800247a:	d805      	bhi.n	8002488 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800247c:	6839      	ldr	r1, [r7, #0]
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe fec2 	bl	8001208 <parse_number>
 8002484:	4603      	mov	r3, r0
 8002486:	e02e      	b.n	80024e6 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d013      	beq.n	80024b6 <parse_value+0x192>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	429a      	cmp	r2, r3
 8002498:	d20d      	bcs.n	80024b6 <parse_value+0x192>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	4413      	add	r3, r2
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b5b      	cmp	r3, #91	; 0x5b
 80024a8:	d105      	bne.n	80024b6 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80024aa:	6839      	ldr	r1, [r7, #0]
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f909 	bl	80026c4 <parse_array>
 80024b2:	4603      	mov	r3, r0
 80024b4:	e017      	b.n	80024e6 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d013      	beq.n	80024e4 <parse_value+0x1c0>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d20d      	bcs.n	80024e4 <parse_value+0x1c0>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4413      	add	r3, r2
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b7b      	cmp	r3, #123	; 0x7b
 80024d6:	d105      	bne.n	80024e4 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80024d8:	6839      	ldr	r1, [r7, #0]
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fa3c 	bl	8002958 <parse_object>
 80024e0:	4603      	mov	r3, r0
 80024e2:	e000      	b.n	80024e6 <parse_value+0x1c2>
    }

    return false;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	0802b81c 	.word	0x0802b81c
 80024f4:	0802b84c 	.word	0x0802b84c
 80024f8:	0802b854 	.word	0x0802b854

080024fc <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <print_value+0x1a>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <print_value+0x1e>
    {
        return false;
 8002516:	2300      	movs	r3, #0
 8002518:	e0c9      	b.n	80026ae <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b80      	cmp	r3, #128	; 0x80
 8002522:	f000 808e 	beq.w	8002642 <print_value+0x146>
 8002526:	2b80      	cmp	r3, #128	; 0x80
 8002528:	f300 80c0 	bgt.w	80026ac <print_value+0x1b0>
 800252c:	2b20      	cmp	r3, #32
 800252e:	dc49      	bgt.n	80025c4 <print_value+0xc8>
 8002530:	2b00      	cmp	r3, #0
 8002532:	f340 80bb 	ble.w	80026ac <print_value+0x1b0>
 8002536:	3b01      	subs	r3, #1
 8002538:	2b1f      	cmp	r3, #31
 800253a:	f200 80b7 	bhi.w	80026ac <print_value+0x1b0>
 800253e:	a201      	add	r2, pc, #4	; (adr r2, 8002544 <print_value+0x48>)
 8002540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002544:	080025ef 	.word	0x080025ef
 8002548:	08002613 	.word	0x08002613
 800254c:	080026ad 	.word	0x080026ad
 8002550:	080025cb 	.word	0x080025cb
 8002554:	080026ad 	.word	0x080026ad
 8002558:	080026ad 	.word	0x080026ad
 800255c:	080026ad 	.word	0x080026ad
 8002560:	08002637 	.word	0x08002637
 8002564:	080026ad 	.word	0x080026ad
 8002568:	080026ad 	.word	0x080026ad
 800256c:	080026ad 	.word	0x080026ad
 8002570:	080026ad 	.word	0x080026ad
 8002574:	080026ad 	.word	0x080026ad
 8002578:	080026ad 	.word	0x080026ad
 800257c:	080026ad 	.word	0x080026ad
 8002580:	08002689 	.word	0x08002689
 8002584:	080026ad 	.word	0x080026ad
 8002588:	080026ad 	.word	0x080026ad
 800258c:	080026ad 	.word	0x080026ad
 8002590:	080026ad 	.word	0x080026ad
 8002594:	080026ad 	.word	0x080026ad
 8002598:	080026ad 	.word	0x080026ad
 800259c:	080026ad 	.word	0x080026ad
 80025a0:	080026ad 	.word	0x080026ad
 80025a4:	080026ad 	.word	0x080026ad
 80025a8:	080026ad 	.word	0x080026ad
 80025ac:	080026ad 	.word	0x080026ad
 80025b0:	080026ad 	.word	0x080026ad
 80025b4:	080026ad 	.word	0x080026ad
 80025b8:	080026ad 	.word	0x080026ad
 80025bc:	080026ad 	.word	0x080026ad
 80025c0:	08002695 	.word	0x08002695
 80025c4:	2b40      	cmp	r3, #64	; 0x40
 80025c6:	d06b      	beq.n	80026a0 <print_value+0x1a4>
 80025c8:	e070      	b.n	80026ac <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 80025ca:	2105      	movs	r1, #5
 80025cc:	6838      	ldr	r0, [r7, #0]
 80025ce:	f7fe ff09 	bl	80013e4 <ensure>
 80025d2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <print_value+0xe2>
            {
                return false;
 80025da:	2300      	movs	r3, #0
 80025dc:	e067      	b.n	80026ae <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4a35      	ldr	r2, [pc, #212]	; (80026b8 <print_value+0x1bc>)
 80025e2:	6810      	ldr	r0, [r2, #0]
 80025e4:	6018      	str	r0, [r3, #0]
 80025e6:	7912      	ldrb	r2, [r2, #4]
 80025e8:	711a      	strb	r2, [r3, #4]
            return true;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e05f      	b.n	80026ae <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 80025ee:	2106      	movs	r1, #6
 80025f0:	6838      	ldr	r0, [r7, #0]
 80025f2:	f7fe fef7 	bl	80013e4 <ensure>
 80025f6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <print_value+0x106>
            {
                return false;
 80025fe:	2300      	movs	r3, #0
 8002600:	e055      	b.n	80026ae <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4a2d      	ldr	r2, [pc, #180]	; (80026bc <print_value+0x1c0>)
 8002606:	6810      	ldr	r0, [r2, #0]
 8002608:	6018      	str	r0, [r3, #0]
 800260a:	8892      	ldrh	r2, [r2, #4]
 800260c:	809a      	strh	r2, [r3, #4]
            return true;
 800260e:	2301      	movs	r3, #1
 8002610:	e04d      	b.n	80026ae <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8002612:	2105      	movs	r1, #5
 8002614:	6838      	ldr	r0, [r7, #0]
 8002616:	f7fe fee5 	bl	80013e4 <ensure>
 800261a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <print_value+0x12a>
            {
                return false;
 8002622:	2300      	movs	r3, #0
 8002624:	e043      	b.n	80026ae <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4a25      	ldr	r2, [pc, #148]	; (80026c0 <print_value+0x1c4>)
 800262a:	6810      	ldr	r0, [r2, #0]
 800262c:	6018      	str	r0, [r3, #0]
 800262e:	7912      	ldrb	r2, [r2, #4]
 8002630:	711a      	strb	r2, [r3, #4]
            return true;
 8002632:	2301      	movs	r3, #1
 8002634:	e03b      	b.n	80026ae <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8002636:	6839      	ldr	r1, [r7, #0]
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7fe ffd7 	bl	80015ec <print_number>
 800263e:	4603      	mov	r3, r0
 8002640:	e035      	b.n	80026ae <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <print_value+0x156>
            {
                return false;
 800264e:	2300      	movs	r3, #0
 8002650:	e02d      	b.n	80026ae <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	4618      	mov	r0, r3
 8002658:	f7fd fdc4 	bl	80001e4 <strlen>
 800265c:	4603      	mov	r3, r0
 800265e:	3301      	adds	r3, #1
 8002660:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	6838      	ldr	r0, [r7, #0]
 8002666:	f7fe febd 	bl	80013e4 <ensure>
 800266a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <print_value+0x17a>
            {
                return false;
 8002672:	2300      	movs	r3, #0
 8002674:	e01b      	b.n	80026ae <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	4619      	mov	r1, r3
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f023 ff92 	bl	80265a8 <memcpy>
            return true;
 8002684:	2301      	movs	r3, #1
 8002686:	e012      	b.n	80026ae <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8002688:	6839      	ldr	r1, [r7, #0]
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff fc5e 	bl	8001f4c <print_string>
 8002690:	4603      	mov	r3, r0
 8002692:	e00c      	b.n	80026ae <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8002694:	6839      	ldr	r1, [r7, #0]
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f8d8 	bl	800284c <print_array>
 800269c:	4603      	mov	r3, r0
 800269e:	e006      	b.n	80026ae <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 80026a0:	6839      	ldr	r1, [r7, #0]
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fa57 	bl	8002b56 <print_object>
 80026a8:	4603      	mov	r3, r0
 80026aa:	e000      	b.n	80026ae <print_value+0x1b2>

        default:
            return false;
 80026ac:	2300      	movs	r3, #0
    }
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	0802b81c 	.word	0x0802b81c
 80026bc:	0802b84c 	.word	0x0802b84c
 80026c0:	0802b854 	.word	0x0802b854

080026c4 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026de:	d301      	bcc.n	80026e4 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 80026e0:	2300      	movs	r3, #0
 80026e2:	e0af      	b.n	8002844 <parse_array+0x180>
    }
    input_buffer->depth++;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	4413      	add	r3, r2
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b5b      	cmp	r3, #91	; 0x5b
 80026fc:	f040 8094 	bne.w	8002828 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800270a:	6838      	ldr	r0, [r7, #0]
 800270c:	f7ff fc2e 	bl	8001f6c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00d      	beq.n	8002732 <parse_array+0x6e>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	429a      	cmp	r2, r3
 8002720:	d207      	bcs.n	8002732 <parse_array+0x6e>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	4413      	add	r3, r2
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b5d      	cmp	r3, #93	; 0x5d
 8002730:	d061      	beq.n	80027f6 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <parse_array+0x80>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	429a      	cmp	r2, r3
 8002742:	d305      	bcc.n	8002750 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	1e5a      	subs	r2, r3, #1
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	609a      	str	r2, [r3, #8]
        goto fail;
 800274e:	e072      	b.n	8002836 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	1e5a      	subs	r2, r3, #1
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	3310      	adds	r3, #16
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fce8 	bl	8001134 <cJSON_New_Item>
 8002764:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d05f      	beq.n	800282c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d104      	bne.n	800277c <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	e007      	b.n	800278c <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002796:	6838      	ldr	r0, [r7, #0]
 8002798:	f7ff fbe8 	bl	8001f6c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800279c:	6839      	ldr	r1, [r7, #0]
 800279e:	6938      	ldr	r0, [r7, #16]
 80027a0:	f7ff fdc0 	bl	8002324 <parse_value>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d042      	beq.n	8002830 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80027aa:	6838      	ldr	r0, [r7, #0]
 80027ac:	f7ff fbde 	bl	8001f6c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00d      	beq.n	80027d2 <parse_array+0x10e>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d207      	bcs.n	80027d2 <parse_array+0x10e>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	4413      	add	r3, r2
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b2c      	cmp	r3, #44	; 0x2c
 80027d0:	d0c3      	beq.n	800275a <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d02d      	beq.n	8002834 <parse_array+0x170>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d227      	bcs.n	8002834 <parse_array+0x170>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4413      	add	r3, r2
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b5d      	cmp	r3, #93	; 0x5d
 80027f2:	d11f      	bne.n	8002834 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 80027f4:	e000      	b.n	80027f8 <parse_array+0x134>
        goto success;
 80027f6:	bf00      	nop
    input_buffer->depth--;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	1e5a      	subs	r2, r3, #1
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <parse_array+0x14a>
        head->prev = current_item;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2220      	movs	r2, #32
 8002812:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	609a      	str	r2, [r3, #8]

    return true;
 8002824:	2301      	movs	r3, #1
 8002826:	e00d      	b.n	8002844 <parse_array+0x180>
        goto fail;
 8002828:	bf00      	nop
 800282a:	e004      	b.n	8002836 <parse_array+0x172>
            goto fail; /* allocation failure */
 800282c:	bf00      	nop
 800282e:	e002      	b.n	8002836 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8002830:	bf00      	nop
 8002832:	e000      	b.n	8002836 <parse_array+0x172>
        goto fail; /* expected end of array */
 8002834:	bf00      	nop

fail:
    if (head != NULL)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800283c:	6978      	ldr	r0, [r7, #20]
 800283e:	f7fe fc8f 	bl	8001160 <cJSON_Delete>
    }

    return false;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <print_array+0x22>
    {
        return false;
 800286a:	2300      	movs	r3, #0
 800286c:	e070      	b.n	8002950 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800286e:	2101      	movs	r1, #1
 8002870:	6838      	ldr	r0, [r7, #0]
 8002872:	f7fe fdb7 	bl	80013e4 <ensure>
 8002876:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <print_array+0x36>
    {
        return false;
 800287e:	2300      	movs	r3, #0
 8002880:	e066      	b.n	8002950 <print_array+0x104>
    }

    *output_pointer = '[';
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	225b      	movs	r2, #91	; 0x5b
 8002886:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800289c:	e03d      	b.n	800291a <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800289e:	6839      	ldr	r1, [r7, #0]
 80028a0:	6938      	ldr	r0, [r7, #16]
 80028a2:	f7ff fe2b 	bl	80024fc <print_value>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <print_array+0x64>
        {
            return false;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e04f      	b.n	8002950 <print_array+0x104>
        }
        update_offset(output_buffer);
 80028b0:	6838      	ldr	r0, [r7, #0]
 80028b2:	f7fe fe31 	bl	8001518 <update_offset>
        if (current_element->next)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d02a      	beq.n	8002914 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <print_array+0x7e>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e000      	b.n	80028cc <print_array+0x80>
 80028ca:	2301      	movs	r3, #1
 80028cc:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3301      	adds	r3, #1
 80028d2:	4619      	mov	r1, r3
 80028d4:	6838      	ldr	r0, [r7, #0]
 80028d6:	f7fe fd85 	bl	80013e4 <ensure>
 80028da:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <print_array+0x9a>
            {
                return false;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e034      	b.n	8002950 <print_array+0x104>
            }
            *output_pointer++ = ',';
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	617a      	str	r2, [r7, #20]
 80028ec:	222c      	movs	r2, #44	; 0x2c
 80028ee:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d004      	beq.n	8002902 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	617a      	str	r2, [r7, #20]
 80028fe:	2220      	movs	r2, #32
 8002900:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	441a      	add	r2, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1be      	bne.n	800289e <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8002920:	2102      	movs	r1, #2
 8002922:	6838      	ldr	r0, [r7, #0]
 8002924:	f7fe fd5e 	bl	80013e4 <ensure>
 8002928:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <print_array+0xe8>
    {
        return false;
 8002930:	2300      	movs	r3, #0
 8002932:	e00d      	b.n	8002950 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	617a      	str	r2, [r7, #20]
 800293a:	225d      	movs	r2, #93	; 0x5d
 800293c:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	1e5a      	subs	r2, r3, #1
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	60da      	str	r2, [r3, #12]

    return true;
 800294e:	2301      	movs	r3, #1
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002972:	d301      	bcc.n	8002978 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002974:	2300      	movs	r3, #0
 8002976:	e0ea      	b.n	8002b4e <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80d0 	beq.w	8002b2a <parse_object+0x1d2>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	429a      	cmp	r2, r3
 8002994:	f080 80c9 	bcs.w	8002b2a <parse_object+0x1d2>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4413      	add	r3, r2
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b7b      	cmp	r3, #123	; 0x7b
 80029a6:	f040 80c0 	bne.w	8002b2a <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80029b4:	6838      	ldr	r0, [r7, #0]
 80029b6:	f7ff fad9 	bl	8001f6c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00e      	beq.n	80029de <parse_object+0x86>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d208      	bcs.n	80029de <parse_object+0x86>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4413      	add	r3, r2
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b7d      	cmp	r3, #125	; 0x7d
 80029da:	f000 808d 	beq.w	8002af8 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <parse_object+0x98>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d305      	bcc.n	80029fc <parse_object+0xa4>
    {
        input_buffer->offset--;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	1e5a      	subs	r2, r3, #1
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	609a      	str	r2, [r3, #8]
        goto fail;
 80029fa:	e0a1      	b.n	8002b40 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	1e5a      	subs	r2, r3, #1
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	3310      	adds	r3, #16
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fb92 	bl	8001134 <cJSON_New_Item>
 8002a10:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 808a 	beq.w	8002b2e <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d104      	bne.n	8002a2a <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	e007      	b.n	8002a3a <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002a44:	6838      	ldr	r0, [r7, #0]
 8002a46:	f7ff fa91 	bl	8001f6c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8002a4a:	6839      	ldr	r1, [r7, #0]
 8002a4c:	6938      	ldr	r0, [r7, #16]
 8002a4e:	f7ff f807 	bl	8001a60 <parse_string>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d06c      	beq.n	8002b32 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002a58:	6838      	ldr	r0, [r7, #0]
 8002a5a:	f7ff fa87 	bl	8001f6c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d061      	beq.n	8002b36 <parse_object+0x1de>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d25b      	bcs.n	8002b36 <parse_object+0x1de>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	4413      	add	r3, r2
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b3a      	cmp	r3, #58	; 0x3a
 8002a8c:	d153      	bne.n	8002b36 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002a98:	6838      	ldr	r0, [r7, #0]
 8002a9a:	f7ff fa67 	bl	8001f6c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002a9e:	6839      	ldr	r1, [r7, #0]
 8002aa0:	6938      	ldr	r0, [r7, #16]
 8002aa2:	f7ff fc3f 	bl	8002324 <parse_value>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d046      	beq.n	8002b3a <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002aac:	6838      	ldr	r0, [r7, #0]
 8002aae:	f7ff fa5d 	bl	8001f6c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00d      	beq.n	8002ad4 <parse_object+0x17c>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d207      	bcs.n	8002ad4 <parse_object+0x17c>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4413      	add	r3, r2
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b2c      	cmp	r3, #44	; 0x2c
 8002ad2:	d098      	beq.n	8002a06 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d031      	beq.n	8002b3e <parse_object+0x1e6>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d22b      	bcs.n	8002b3e <parse_object+0x1e6>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	4413      	add	r3, r2
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b7d      	cmp	r3, #125	; 0x7d
 8002af4:	d123      	bne.n	8002b3e <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8002af6:	e000      	b.n	8002afa <parse_object+0x1a2>
        goto success; /* empty object */
 8002af8:	bf00      	nop
    input_buffer->depth--;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	1e5a      	subs	r2, r3, #1
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <parse_object+0x1b8>
        head->prev = current_item;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2240      	movs	r2, #64	; 0x40
 8002b14:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	609a      	str	r2, [r3, #8]
    return true;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e011      	b.n	8002b4e <parse_object+0x1f6>
        goto fail; /* not an object */
 8002b2a:	bf00      	nop
 8002b2c:	e008      	b.n	8002b40 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8002b2e:	bf00      	nop
 8002b30:	e006      	b.n	8002b40 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8002b32:	bf00      	nop
 8002b34:	e004      	b.n	8002b40 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8002b36:	bf00      	nop
 8002b38:	e002      	b.n	8002b40 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8002b3a:	bf00      	nop
 8002b3c:	e000      	b.n	8002b40 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8002b3e:	bf00      	nop

fail:
    if (head != NULL)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8002b46:	6978      	ldr	r0, [r7, #20]
 8002b48:	f7fe fb0a 	bl	8001160 <cJSON_Delete>
    }

    return false;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b088      	sub	sp, #32
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <print_object+0x22>
    {
        return false;
 8002b74:	2300      	movs	r3, #0
 8002b76:	e108      	b.n	8002d8a <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <print_object+0x2e>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e000      	b.n	8002b86 <print_object+0x30>
 8002b84:	2301      	movs	r3, #1
 8002b86:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6838      	ldr	r0, [r7, #0]
 8002b90:	f7fe fc28 	bl	80013e4 <ensure>
 8002b94:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <print_object+0x4a>
    {
        return false;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e0f4      	b.n	8002d8a <print_object+0x234>
    }

    *output_pointer++ = '{';
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	61fa      	str	r2, [r7, #28]
 8002ba6:	227b      	movs	r2, #123	; 0x7b
 8002ba8:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d004      	beq.n	8002bc6 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	61fa      	str	r2, [r7, #28]
 8002bc2:	220a      	movs	r2, #10
 8002bc4:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	441a      	add	r2, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	609a      	str	r2, [r3, #8]

    while (current_item)
 8002bd2:	e0a0      	b.n	8002d16 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d022      	beq.n	8002c22 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4619      	mov	r1, r3
 8002be2:	6838      	ldr	r0, [r7, #0]
 8002be4:	f7fe fbfe 	bl	80013e4 <ensure>
 8002be8:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <print_object+0x9e>
            {
                return false;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e0ca      	b.n	8002d8a <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	e007      	b.n	8002c0a <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	61fa      	str	r2, [r7, #28]
 8002c00:	2209      	movs	r2, #9
 8002c02:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3301      	adds	r3, #1
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d3f2      	bcc.n	8002bfa <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	441a      	add	r2, r3
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	6839      	ldr	r1, [r7, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff f85f 	bl	8001cec <print_string_ptr>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <print_object+0xe2>
        {
            return false;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e0a8      	b.n	8002d8a <print_object+0x234>
        }
        update_offset(output_buffer);
 8002c38:	6838      	ldr	r0, [r7, #0]
 8002c3a:	f7fe fc6d 	bl	8001518 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <print_object+0xf4>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e000      	b.n	8002c4c <print_object+0xf6>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8002c4e:	68f9      	ldr	r1, [r7, #12]
 8002c50:	6838      	ldr	r0, [r7, #0]
 8002c52:	f7fe fbc7 	bl	80013e4 <ensure>
 8002c56:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <print_object+0x10c>
        {
            return false;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e093      	b.n	8002d8a <print_object+0x234>
        }
        *output_pointer++ = ':';
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	61fa      	str	r2, [r7, #28]
 8002c68:	223a      	movs	r2, #58	; 0x3a
 8002c6a:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d004      	beq.n	8002c7e <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	61fa      	str	r2, [r7, #28]
 8002c7a:	2209      	movs	r2, #9
 8002c7c:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	441a      	add	r2, r3
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8002c8a:	6839      	ldr	r1, [r7, #0]
 8002c8c:	69b8      	ldr	r0, [r7, #24]
 8002c8e:	f7ff fc35 	bl	80024fc <print_value>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <print_object+0x146>
        {
            return false;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e076      	b.n	8002d8a <print_object+0x234>
        }
        update_offset(output_buffer);
 8002c9c:	6838      	ldr	r0, [r7, #0]
 8002c9e:	f7fe fc3b 	bl	8001518 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <print_object+0x158>
 8002caa:	2201      	movs	r2, #1
 8002cac:	e000      	b.n	8002cb0 <print_object+0x15a>
 8002cae:	2200      	movs	r2, #0
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <print_object+0x166>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <print_object+0x168>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	4413      	add	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6838      	ldr	r0, [r7, #0]
 8002cca:	f7fe fb8b 	bl	80013e4 <ensure>
 8002cce:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <print_object+0x184>
        {
            return false;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e057      	b.n	8002d8a <print_object+0x234>
        }
        if (current_item->next)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d004      	beq.n	8002cec <print_object+0x196>
        {
            *output_pointer++ = ',';
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	61fa      	str	r2, [r7, #28]
 8002ce8:	222c      	movs	r2, #44	; 0x2c
 8002cea:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d004      	beq.n	8002cfe <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	61fa      	str	r2, [r7, #28]
 8002cfa:	220a      	movs	r2, #10
 8002cfc:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	441a      	add	r2, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f47f af5b 	bne.w	8002bd4 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <print_object+0x1d8>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	e000      	b.n	8002d30 <print_object+0x1da>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	4619      	mov	r1, r3
 8002d32:	6838      	ldr	r0, [r7, #0]
 8002d34:	f7fe fb56 	bl	80013e4 <ensure>
 8002d38:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <print_object+0x1ee>
    {
        return false;
 8002d40:	2300      	movs	r3, #0
 8002d42:	e022      	b.n	8002d8a <print_object+0x234>
    }
    if (output_buffer->format)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d010      	beq.n	8002d6e <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	e007      	b.n	8002d62 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	61fa      	str	r2, [r7, #28]
 8002d58:	2209      	movs	r2, #9
 8002d5a:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d3f1      	bcc.n	8002d52 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	61fa      	str	r2, [r7, #28]
 8002d74:	227d      	movs	r2, #125	; 0x7d
 8002d76:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	1e5a      	subs	r2, r3, #1
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	60da      	str	r2, [r3, #12]

    return true;
 8002d88:	2301      	movs	r3, #1
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <cJSON_GetArraySize>:

/* Get Array size/item / object item. */
CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
    cJSON *child = NULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
    size_t size = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]

    if (array == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <cJSON_GetArraySize+0x1a>
    {
        return 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	e00d      	b.n	8002dc8 <cJSON_GetArraySize+0x36>
    }

    child = array->child;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	60fb      	str	r3, [r7, #12]

    while(child != NULL)
 8002db2:	e005      	b.n	8002dc0 <cJSON_GetArraySize+0x2e>
    {
        size++;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	3301      	adds	r3, #1
 8002db8:	60bb      	str	r3, [r7, #8]
        child = child->next;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60fb      	str	r3, [r7, #12]
    while(child != NULL)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f6      	bne.n	8002db4 <cJSON_GetArraySize+0x22>
    }

    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */

    return (int)size;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <get_array_item+0x18>
    {
        return NULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	e010      	b.n	8002e0e <get_array_item+0x3a>
    }

    current_child = array->child;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8002df2:	e005      	b.n	8002e00 <get_array_item+0x2c>
    {
        index--;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <get_array_item+0x38>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f3      	bne.n	8002df4 <get_array_item+0x20>
    }

    return current_child;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]
    if (index < 0)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	da01      	bge.n	8002e2e <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e005      	b.n	8002e3a <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	4619      	mov	r1, r3
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ffce 	bl	8002dd4 <get_array_item>
 8002e38:	4603      	mov	r3, r0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <get_object_item+0x1c>
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <get_object_item+0x20>
    {
        return NULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e033      	b.n	8002eca <get_object_item+0x88>
    }

    current_element = object->child;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d017      	beq.n	8002e9e <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002e6e:	e002      	b.n	8002e76 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01c      	beq.n	8002eb6 <get_object_item+0x74>
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d018      	beq.n	8002eb6 <get_object_item+0x74>
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	4619      	mov	r1, r3
 8002e8a:	68b8      	ldr	r0, [r7, #8]
 8002e8c:	f7fd f9a0 	bl	80001d0 <strcmp>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1ec      	bne.n	8002e70 <get_object_item+0x2e>
 8002e96:	e00e      	b.n	8002eb6 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <get_object_item+0x74>
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	68b8      	ldr	r0, [r7, #8]
 8002eac:	f7fe f8ae 	bl	800100c <case_insensitive_strcmp>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <get_object_item+0x82>
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <get_object_item+0x86>
        return NULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e000      	b.n	8002eca <get_object_item+0x88>
    }

    return current_element;
 8002ec8:	697b      	ldr	r3, [r7, #20]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8002edc:	2200      	movs	r2, #0
 8002ede:	6839      	ldr	r1, [r7, #0]
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ffae 	bl	8002e42 <get_object_item>
 8002ee6:	4603      	mov	r3, r0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	605a      	str	r2, [r3, #4]
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d006      	beq.n	8002f34 <add_item_to_array+0x22>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <add_item_to_array+0x22>
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d101      	bne.n	8002f38 <add_item_to_array+0x26>
    {
        return false;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e01e      	b.n	8002f76 <add_item_to_array+0x64>
    }

    child = array->child;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d109      	bne.n	8002f58 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	e00d      	b.n	8002f74 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d009      	beq.n	8002f74 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	6839      	ldr	r1, [r7, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff ffc2 	bl	8002ef0 <suffix_object>
            array->child->prev = item;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8002f74:	2301      	movs	r3, #1
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <cJSON_AddItemToArray>:

/* Add item to array/object. */
CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	6039      	str	r1, [r7, #0]
    return add_item_to_array(array, item);
 8002f88:	6839      	ldr	r1, [r7, #0]
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff ffc1 	bl	8002f12 <add_item_to_array>
 8002f90:	4603      	mov	r3, r0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8002fa2:	687b      	ldr	r3, [r7, #4]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d009      	beq.n	8002fe0 <add_item_to_object+0x30>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d006      	beq.n	8002fe0 <add_item_to_object+0x30>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <add_item_to_object+0x30>
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d101      	bne.n	8002fe4 <add_item_to_object+0x34>
    {
        return false;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e036      	b.n	8003052 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d009      	beq.n	8002ffe <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8002fea:	68b8      	ldr	r0, [r7, #8]
 8002fec:	f7ff ffd5 	bl	8002f9a <cast_away_const>
 8002ff0:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	e00e      	b.n	800301c <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8002ffe:	6839      	ldr	r1, [r7, #0]
 8003000:	68b8      	ldr	r0, [r7, #8]
 8003002:	f7fe f86f 	bl	80010e4 <cJSON_strdup>
 8003006:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <add_item_to_object+0x62>
        {
            return false;
 800300e:	2300      	movs	r3, #0
 8003010:	e01f      	b.n	8003052 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800301a:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003024:	2b00      	cmp	r3, #0
 8003026:	d109      	bne.n	800303c <add_item_to_object+0x8c>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6a12      	ldr	r2, [r2, #32]
 8003038:	4610      	mov	r0, r2
 800303a:	4798      	blx	r3
    }

    item->string = new_key;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f7ff ff61 	bl	8002f12 <add_item_to_array>
 8003050:	4603      	mov	r3, r0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af02      	add	r7, sp, #8
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 8003068:	2300      	movs	r3, #0
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <cJSON_AddItemToObject+0x28>)
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f7ff ff9c 	bl	8002fb0 <add_item_to_object>
 8003078:	4603      	mov	r3, r0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000000 	.word	0x20000000

08003088 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af02      	add	r7, sp, #8
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8003096:	ed97 0b00 	vldr	d0, [r7]
 800309a:	f000 f83d 	bl	8003118 <cJSON_CreateNumber>
 800309e:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 80030a0:	2300      	movs	r3, #0
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <cJSON_AddNumberToObject+0x44>)
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f7ff ff80 	bl	8002fb0 <add_item_to_object>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	e003      	b.n	80030c2 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 80030ba:	6978      	ldr	r0, [r7, #20]
 80030bc:	f7fe f850 	bl	8001160 <cJSON_Delete>
    return NULL;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000000 	.word	0x20000000

080030d0 <cJSON_AddStringToObject>:

CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
    cJSON *string_item = cJSON_CreateString(string);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f863 	bl	80031a8 <cJSON_CreateString>
 80030e2:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 80030e4:	2300      	movs	r3, #0
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <cJSON_AddStringToObject+0x40>)
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f7ff ff5e 	bl	8002fb0 <add_item_to_object>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <cJSON_AddStringToObject+0x2e>
    {
        return string_item;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	e003      	b.n	8003106 <cJSON_AddStringToObject+0x36>
    }

    cJSON_Delete(string_item);
 80030fe:	6978      	ldr	r0, [r7, #20]
 8003100:	f7fe f82e 	bl	8001160 <cJSON_Delete>
    return NULL;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000000 	.word	0x20000000
 8003114:	00000000 	.word	0x00000000

08003118 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8003122:	481f      	ldr	r0, [pc, #124]	; (80031a0 <cJSON_CreateNumber+0x88>)
 8003124:	f7fe f806 	bl	8001134 <cJSON_New_Item>
 8003128:	60f8      	str	r0, [r7, #12]
    if(item)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d02c      	beq.n	800318a <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2208      	movs	r2, #8
 8003134:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8003136:	68f9      	ldr	r1, [r7, #12]
 8003138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800313c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8003140:	a315      	add	r3, pc, #84	; (adr r3, 8003198 <cJSON_CreateNumber+0x80>)
 8003142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003146:	e9d7 0100 	ldrd	r0, r1, [r7]
 800314a:	f7fd fceb 	bl	8000b24 <__aeabi_dcmpge>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d004      	beq.n	800315e <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800315a:	615a      	str	r2, [r3, #20]
 800315c:	e015      	b.n	800318a <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <cJSON_CreateNumber+0x8c>)
 8003164:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003168:	f7fd fcd2 	bl	8000b10 <__aeabi_dcmple>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d004      	beq.n	800317c <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003178:	615a      	str	r2, [r3, #20]
 800317a:	e006      	b.n	800318a <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 800317c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003180:	f7fd fcfa 	bl	8000b78 <__aeabi_d2iz>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 800318a:	68fb      	ldr	r3, [r7, #12]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	f3af 8000 	nop.w
 8003198:	ffc00000 	.word	0xffc00000
 800319c:	41dfffff 	.word	0x41dfffff
 80031a0:	20000000 	.word	0x20000000
 80031a4:	c1e00000 	.word	0xc1e00000

080031a8 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 80031b0:	480f      	ldr	r0, [pc, #60]	; (80031f0 <cJSON_CreateString+0x48>)
 80031b2:	f7fd ffbf 	bl	8001134 <cJSON_New_Item>
 80031b6:	60f8      	str	r0, [r7, #12]
    if(item)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d012      	beq.n	80031e4 <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2210      	movs	r2, #16
 80031c2:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 80031c4:	490a      	ldr	r1, [pc, #40]	; (80031f0 <cJSON_CreateString+0x48>)
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fd ff8c 	bl	80010e4 <cJSON_strdup>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d104      	bne.n	80031e4 <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7fd ffc0 	bl	8001160 <cJSON_Delete>
            return NULL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e000      	b.n	80031e6 <cJSON_CreateString+0x3e>
        }
    }

    return item;
 80031e4:	68fb      	ldr	r3, [r7, #12]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000000 	.word	0x20000000

080031f4 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 80031fa:	4807      	ldr	r0, [pc, #28]	; (8003218 <cJSON_CreateArray+0x24>)
 80031fc:	f7fd ff9a 	bl	8001134 <cJSON_New_Item>
 8003200:	6078      	str	r0, [r7, #4]
    if(item)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <cJSON_CreateArray+0x1a>
    {
        item->type=cJSON_Array;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2220      	movs	r2, #32
 800320c:	60da      	str	r2, [r3, #12]
    }

    return item;
 800320e:	687b      	ldr	r3, [r7, #4]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20000000 	.word	0x20000000

0800321c <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8003222:	4807      	ldr	r0, [pc, #28]	; (8003240 <cJSON_CreateObject+0x24>)
 8003224:	f7fd ff86 	bl	8001134 <cJSON_New_Item>
 8003228:	6078      	str	r0, [r7, #4]
    if (item)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2240      	movs	r2, #64	; 0x40
 8003234:	60da      	str	r2, [r3, #12]
    }

    return item;
 8003236:	687b      	ldr	r3, [r7, #4]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000000 	.word	0x20000000

08003244 <SELECT>:
#define SD_CS_GPIO_Port GPIOA // Укажи свой порт
#define SD_CS_Pin GPIO_PIN_4  // Укажи свой пин

/* SPI Chip Select */
static void SELECT(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8003248:	2200      	movs	r2, #0
 800324a:	2110      	movs	r1, #16
 800324c:	4802      	ldr	r0, [pc, #8]	; (8003258 <SELECT+0x14>)
 800324e:	f009 fe8b 	bl	800cf68 <HAL_GPIO_WritePin>
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40020000 	.word	0x40020000

0800325c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003260:	2201      	movs	r2, #1
 8003262:	2110      	movs	r1, #16
 8003264:	4802      	ldr	r0, [pc, #8]	; (8003270 <DESELECT+0x14>)
 8003266:	f009 fe7f 	bl	800cf68 <HAL_GPIO_WritePin>
}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40020000 	.word	0x40020000

08003274 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800327e:	bf00      	nop
 8003280:	4808      	ldr	r0, [pc, #32]	; (80032a4 <SPI_TxByte+0x30>)
 8003282:	f00b fac6 	bl	800e812 <HAL_SPI_GetState>
 8003286:	4603      	mov	r3, r0
 8003288:	2b01      	cmp	r3, #1
 800328a:	d1f9      	bne.n	8003280 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 800328c:	1df9      	adds	r1, r7, #7
 800328e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003292:	2201      	movs	r2, #1
 8003294:	4803      	ldr	r0, [pc, #12]	; (80032a4 <SPI_TxByte+0x30>)
 8003296:	f00a ffde 	bl	800e256 <HAL_SPI_Transmit>
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	2000cfd4 	.word	0x2000cfd4

080032a8 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80032ae:	23ff      	movs	r3, #255	; 0xff
 80032b0:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80032b6:	bf00      	nop
 80032b8:	4809      	ldr	r0, [pc, #36]	; (80032e0 <SPI_RxByte+0x38>)
 80032ba:	f00b faaa 	bl	800e812 <HAL_SPI_GetState>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d1f9      	bne.n	80032b8 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80032c4:	1dba      	adds	r2, r7, #6
 80032c6:	1df9      	adds	r1, r7, #7
 80032c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	2301      	movs	r3, #1
 80032d0:	4803      	ldr	r0, [pc, #12]	; (80032e0 <SPI_RxByte+0x38>)
 80032d2:	f00b f8fc 	bl	800e4ce <HAL_SPI_TransmitReceive>

  return data;
 80032d6:	79bb      	ldrb	r3, [r7, #6]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	2000cfd4 	.word	0x2000cfd4

080032e4 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80032ec:	f7ff ffdc 	bl	80032a8 <SPI_RxByte>
 80032f0:	4603      	mov	r3, r0
 80032f2:	461a      	mov	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	701a      	strb	r2, [r3, #0]
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8003306:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <SD_ReadyWait+0x34>)
 8003308:	2232      	movs	r2, #50	; 0x32
 800330a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 800330c:	f7ff ffcc 	bl	80032a8 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8003310:	f7ff ffca 	bl	80032a8 <SPI_RxByte>
 8003314:	4603      	mov	r3, r0
 8003316:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	2bff      	cmp	r3, #255	; 0xff
 800331c:	d004      	beq.n	8003328 <SD_ReadyWait+0x28>
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <SD_ReadyWait+0x34>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f3      	bne.n	8003310 <SD_ReadyWait+0x10>

  return res;
 8003328:	79fb      	ldrb	r3, [r7, #7]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	2000d1b8 	.word	0x2000d1b8

08003338 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800333e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8003342:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8003344:	f7ff ff8a 	bl	800325c <DESELECT>

  for(int i = 0; i < 10; i++)
 8003348:	2300      	movs	r3, #0
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	e005      	b.n	800335a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800334e:	20ff      	movs	r0, #255	; 0xff
 8003350:	f7ff ff90 	bl	8003274 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	3301      	adds	r3, #1
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b09      	cmp	r3, #9
 800335e:	ddf6      	ble.n	800334e <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8003360:	f7ff ff70 	bl	8003244 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8003364:	2340      	movs	r3, #64	; 0x40
 8003366:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8003378:	2395      	movs	r3, #149	; 0x95
 800337a:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	e009      	b.n	8003396 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8003382:	1d3a      	adds	r2, r7, #4
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff ff72 	bl	8003274 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	3301      	adds	r3, #1
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b05      	cmp	r3, #5
 800339a:	ddf2      	ble.n	8003382 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 800339c:	e002      	b.n	80033a4 <SD_PowerOn+0x6c>
  {
    Count--;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	3b01      	subs	r3, #1
 80033a2:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80033a4:	f7ff ff80 	bl	80032a8 <SPI_RxByte>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d002      	beq.n	80033b4 <SD_PowerOn+0x7c>
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f4      	bne.n	800339e <SD_PowerOn+0x66>
  }

  DESELECT();
 80033b4:	f7ff ff52 	bl	800325c <DESELECT>
  SPI_TxByte(0XFF);
 80033b8:	20ff      	movs	r0, #255	; 0xff
 80033ba:	f7ff ff5b 	bl	8003274 <SPI_TxByte>

  PowerFlag = 1;
 80033be:	4b03      	ldr	r3, [pc, #12]	; (80033cc <SD_PowerOn+0x94>)
 80033c0:	2201      	movs	r2, #1
 80033c2:	701a      	strb	r2, [r3, #0]
}
 80033c4:	bf00      	nop
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	200002bd 	.word	0x200002bd

080033d0 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <SD_PowerOff+0x14>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	200002bd 	.word	0x200002bd

080033e8 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <SD_CheckPower+0x14>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	200002bd 	.word	0x200002bd

08003400 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800340a:	4b17      	ldr	r3, [pc, #92]	; (8003468 <SD_RxDataBlock+0x68>)
 800340c:	220a      	movs	r2, #10
 800340e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8003410:	f7ff ff4a 	bl	80032a8 <SPI_RxByte>
 8003414:	4603      	mov	r3, r0
 8003416:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	2bff      	cmp	r3, #255	; 0xff
 800341c:	d104      	bne.n	8003428 <SD_RxDataBlock+0x28>
 800341e:	4b12      	ldr	r3, [pc, #72]	; (8003468 <SD_RxDataBlock+0x68>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f3      	bne.n	8003410 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2bfe      	cmp	r3, #254	; 0xfe
 800342c:	d001      	beq.n	8003432 <SD_RxDataBlock+0x32>
    return FALSE;
 800342e:	2300      	movs	r3, #0
 8003430:	e016      	b.n	8003460 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff53 	bl	80032e4 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff ff4d 	bl	80032e4 <SPI_RxBytePtr>
  } while(btr -= 2);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	3b02      	subs	r3, #2
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1ed      	bne.n	8003432 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8003456:	f7ff ff27 	bl	80032a8 <SPI_RxByte>
  SPI_RxByte();
 800345a:	f7ff ff25 	bl	80032a8 <SPI_RxByte>

  return TRUE;
 800345e:	2301      	movs	r3, #1
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	2000d1b9 	.word	0x2000d1b9

0800346c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 800347c:	f7ff ff40 	bl	8003300 <SD_ReadyWait>
 8003480:	4603      	mov	r3, r0
 8003482:	2bff      	cmp	r3, #255	; 0xff
 8003484:	d001      	beq.n	800348a <SD_TxDataBlock+0x1e>
    return FALSE;
 8003486:	2300      	movs	r3, #0
 8003488:	e040      	b.n	800350c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800348a:	78fb      	ldrb	r3, [r7, #3]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fef1 	bl	8003274 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	2bfd      	cmp	r3, #253	; 0xfd
 8003496:	d031      	beq.n	80034fc <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff fee5 	bl	8003274 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fede 	bl	8003274 <SPI_TxByte>
    } while (--wc);
 80034b8:	7bbb      	ldrb	r3, [r7, #14]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	73bb      	strb	r3, [r7, #14]
 80034be:	7bbb      	ldrb	r3, [r7, #14]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1eb      	bne.n	800349c <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80034c4:	f7ff fef0 	bl	80032a8 <SPI_RxByte>
    SPI_RxByte();
 80034c8:	f7ff feee 	bl	80032a8 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80034cc:	e00b      	b.n	80034e6 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80034ce:	f7ff feeb 	bl	80032a8 <SPI_RxByte>
 80034d2:	4603      	mov	r3, r0
 80034d4:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2b05      	cmp	r3, #5
 80034de:	d006      	beq.n	80034ee <SD_TxDataBlock+0x82>
        break;

      i++;
 80034e0:	7b7b      	ldrb	r3, [r7, #13]
 80034e2:	3301      	adds	r3, #1
 80034e4:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80034e6:	7b7b      	ldrb	r3, [r7, #13]
 80034e8:	2b40      	cmp	r3, #64	; 0x40
 80034ea:	d9f0      	bls.n	80034ce <SD_TxDataBlock+0x62>
 80034ec:	e000      	b.n	80034f0 <SD_TxDataBlock+0x84>
        break;
 80034ee:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80034f0:	bf00      	nop
 80034f2:	f7ff fed9 	bl	80032a8 <SPI_RxByte>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0fa      	beq.n	80034f2 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	2b05      	cmp	r3, #5
 8003504:	d101      	bne.n	800350a <SD_TxDataBlock+0x9e>
    return TRUE;
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	6039      	str	r1, [r7, #0]
 800351e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8003520:	f7ff feee 	bl	8003300 <SD_ReadyWait>
 8003524:	4603      	mov	r3, r0
 8003526:	2bff      	cmp	r3, #255	; 0xff
 8003528:	d001      	beq.n	800352e <SD_SendCmd+0x1a>
    return 0xFF;
 800352a:	23ff      	movs	r3, #255	; 0xff
 800352c:	e040      	b.n	80035b0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff fe9f 	bl	8003274 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	0e1b      	lsrs	r3, r3, #24
 800353a:	b2db      	uxtb	r3, r3
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fe99 	bl	8003274 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	0c1b      	lsrs	r3, r3, #16
 8003546:	b2db      	uxtb	r3, r3
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fe93 	bl	8003274 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	0a1b      	lsrs	r3, r3, #8
 8003552:	b2db      	uxtb	r3, r3
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fe8d 	bl	8003274 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff fe88 	bl	8003274 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	2b40      	cmp	r3, #64	; 0x40
 800356c:	d101      	bne.n	8003572 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800356e:	2395      	movs	r3, #149	; 0x95
 8003570:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	2b48      	cmp	r3, #72	; 0x48
 8003576:	d101      	bne.n	800357c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8003578:	2387      	movs	r3, #135	; 0x87
 800357a:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fe78 	bl	8003274 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	2b4c      	cmp	r3, #76	; 0x4c
 8003588:	d101      	bne.n	800358e <SD_SendCmd+0x7a>
    SPI_RxByte();
 800358a:	f7ff fe8d 	bl	80032a8 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 800358e:	230a      	movs	r3, #10
 8003590:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8003592:	f7ff fe89 	bl	80032a8 <SPI_RxByte>
 8003596:	4603      	mov	r3, r0
 8003598:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800359a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	da05      	bge.n	80035ae <SD_SendCmd+0x9a>
 80035a2:	7bbb      	ldrb	r3, [r7, #14]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	73bb      	strb	r3, [r7, #14]
 80035a8:	7bbb      	ldrb	r3, [r7, #14]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f1      	bne.n	8003592 <SD_SendCmd+0x7e>

  return res;
 80035ae:	7b7b      	ldrb	r3, [r7, #13]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80035b8:	b590      	push	{r4, r7, lr}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0d5      	b.n	8003778 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80035cc:	4b6c      	ldr	r3, [pc, #432]	; (8003780 <SD_disk_initialize+0x1c8>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <SD_disk_initialize+0x2a>
    return Stat;
 80035da:	4b69      	ldr	r3, [pc, #420]	; (8003780 <SD_disk_initialize+0x1c8>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	e0ca      	b.n	8003778 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 80035e2:	f7ff fea9 	bl	8003338 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80035e6:	f7ff fe2d 	bl	8003244 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 80035ee:	2100      	movs	r1, #0
 80035f0:	2040      	movs	r0, #64	; 0x40
 80035f2:	f7ff ff8f 	bl	8003514 <SD_SendCmd>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	f040 80a5 	bne.w	8003748 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80035fe:	4b61      	ldr	r3, [pc, #388]	; (8003784 <SD_disk_initialize+0x1cc>)
 8003600:	2264      	movs	r2, #100	; 0x64
 8003602:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003604:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003608:	2048      	movs	r0, #72	; 0x48
 800360a:	f7ff ff83 	bl	8003514 <SD_SendCmd>
 800360e:	4603      	mov	r3, r0
 8003610:	2b01      	cmp	r3, #1
 8003612:	d158      	bne.n	80036c6 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8003614:	2300      	movs	r3, #0
 8003616:	73fb      	strb	r3, [r7, #15]
 8003618:	e00c      	b.n	8003634 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800361a:	7bfc      	ldrb	r4, [r7, #15]
 800361c:	f7ff fe44 	bl	80032a8 <SPI_RxByte>
 8003620:	4603      	mov	r3, r0
 8003622:	461a      	mov	r2, r3
 8003624:	f107 0310 	add.w	r3, r7, #16
 8003628:	4423      	add	r3, r4
 800362a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	3301      	adds	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d9ef      	bls.n	800361a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800363a:	7abb      	ldrb	r3, [r7, #10]
 800363c:	2b01      	cmp	r3, #1
 800363e:	f040 8083 	bne.w	8003748 <SD_disk_initialize+0x190>
 8003642:	7afb      	ldrb	r3, [r7, #11]
 8003644:	2baa      	cmp	r3, #170	; 0xaa
 8003646:	d17f      	bne.n	8003748 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8003648:	2100      	movs	r1, #0
 800364a:	2077      	movs	r0, #119	; 0x77
 800364c:	f7ff ff62 	bl	8003514 <SD_SendCmd>
 8003650:	4603      	mov	r3, r0
 8003652:	2b01      	cmp	r3, #1
 8003654:	d807      	bhi.n	8003666 <SD_disk_initialize+0xae>
 8003656:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800365a:	2069      	movs	r0, #105	; 0x69
 800365c:	f7ff ff5a 	bl	8003514 <SD_SendCmd>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8003666:	4b47      	ldr	r3, [pc, #284]	; (8003784 <SD_disk_initialize+0x1cc>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1eb      	bne.n	8003648 <SD_disk_initialize+0x90>
 8003670:	e000      	b.n	8003674 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8003672:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003674:	4b43      	ldr	r3, [pc, #268]	; (8003784 <SD_disk_initialize+0x1cc>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d064      	beq.n	8003748 <SD_disk_initialize+0x190>
 800367e:	2100      	movs	r1, #0
 8003680:	207a      	movs	r0, #122	; 0x7a
 8003682:	f7ff ff47 	bl	8003514 <SD_SendCmd>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d15d      	bne.n	8003748 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800368c:	2300      	movs	r3, #0
 800368e:	73fb      	strb	r3, [r7, #15]
 8003690:	e00c      	b.n	80036ac <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8003692:	7bfc      	ldrb	r4, [r7, #15]
 8003694:	f7ff fe08 	bl	80032a8 <SPI_RxByte>
 8003698:	4603      	mov	r3, r0
 800369a:	461a      	mov	r2, r3
 800369c:	f107 0310 	add.w	r3, r7, #16
 80036a0:	4423      	add	r3, r4
 80036a2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	3301      	adds	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d9ef      	bls.n	8003692 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80036b2:	7a3b      	ldrb	r3, [r7, #8]
 80036b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <SD_disk_initialize+0x108>
 80036bc:	2306      	movs	r3, #6
 80036be:	e000      	b.n	80036c2 <SD_disk_initialize+0x10a>
 80036c0:	2302      	movs	r3, #2
 80036c2:	73bb      	strb	r3, [r7, #14]
 80036c4:	e040      	b.n	8003748 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80036c6:	2100      	movs	r1, #0
 80036c8:	2077      	movs	r0, #119	; 0x77
 80036ca:	f7ff ff23 	bl	8003514 <SD_SendCmd>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d808      	bhi.n	80036e6 <SD_disk_initialize+0x12e>
 80036d4:	2100      	movs	r1, #0
 80036d6:	2069      	movs	r0, #105	; 0x69
 80036d8:	f7ff ff1c 	bl	8003514 <SD_SendCmd>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d801      	bhi.n	80036e6 <SD_disk_initialize+0x12e>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e000      	b.n	80036e8 <SD_disk_initialize+0x130>
 80036e6:	2301      	movs	r3, #1
 80036e8:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80036ea:	7bbb      	ldrb	r3, [r7, #14]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d10e      	bne.n	800370e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80036f0:	2100      	movs	r1, #0
 80036f2:	2077      	movs	r0, #119	; 0x77
 80036f4:	f7ff ff0e 	bl	8003514 <SD_SendCmd>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d80e      	bhi.n	800371c <SD_disk_initialize+0x164>
 80036fe:	2100      	movs	r1, #0
 8003700:	2069      	movs	r0, #105	; 0x69
 8003702:	f7ff ff07 	bl	8003514 <SD_SendCmd>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d107      	bne.n	800371c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 800370c:	e00d      	b.n	800372a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800370e:	2100      	movs	r1, #0
 8003710:	2041      	movs	r0, #65	; 0x41
 8003712:	f7ff feff 	bl	8003514 <SD_SendCmd>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 800371c:	4b19      	ldr	r3, [pc, #100]	; (8003784 <SD_disk_initialize+0x1cc>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e1      	bne.n	80036ea <SD_disk_initialize+0x132>
 8003726:	e000      	b.n	800372a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8003728:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800372a:	4b16      	ldr	r3, [pc, #88]	; (8003784 <SD_disk_initialize+0x1cc>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d007      	beq.n	8003744 <SD_disk_initialize+0x18c>
 8003734:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003738:	2050      	movs	r0, #80	; 0x50
 800373a:	f7ff feeb 	bl	8003514 <SD_SendCmd>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8003748:	4a0f      	ldr	r2, [pc, #60]	; (8003788 <SD_disk_initialize+0x1d0>)
 800374a:	7bbb      	ldrb	r3, [r7, #14]
 800374c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800374e:	f7ff fd85 	bl	800325c <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8003752:	f7ff fda9 	bl	80032a8 <SPI_RxByte>

  if (type)
 8003756:	7bbb      	ldrb	r3, [r7, #14]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d008      	beq.n	800376e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 800375c:	4b08      	ldr	r3, [pc, #32]	; (8003780 <SD_disk_initialize+0x1c8>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	b2da      	uxtb	r2, r3
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <SD_disk_initialize+0x1c8>)
 800376a:	701a      	strb	r2, [r3, #0]
 800376c:	e001      	b.n	8003772 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800376e:	f7ff fe2f 	bl	80033d0 <SD_PowerOff>
  }

  return Stat;
 8003772:	4b03      	ldr	r3, [pc, #12]	; (8003780 <SD_disk_initialize+0x1c8>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	b2db      	uxtb	r3, r3
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	bd90      	pop	{r4, r7, pc}
 8003780:	2000000c 	.word	0x2000000c
 8003784:	2000d1b9 	.word	0x2000d1b9
 8003788:	200002bc 	.word	0x200002bc

0800378c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <SD_disk_status+0x14>
    return STA_NOINIT;
 800379c:	2301      	movs	r3, #1
 800379e:	e002      	b.n	80037a6 <SD_disk_status+0x1a>

  return Stat;
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <SD_disk_status+0x28>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	b2db      	uxtb	r3, r3
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	2000000c 	.word	0x2000000c

080037b8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	4603      	mov	r3, r0
 80037c6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <SD_disk_read+0x1c>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <SD_disk_read+0x20>
    return RES_PARERR;
 80037d4:	2304      	movs	r3, #4
 80037d6:	e051      	b.n	800387c <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 80037d8:	4b2a      	ldr	r3, [pc, #168]	; (8003884 <SD_disk_read+0xcc>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <SD_disk_read+0x32>
    return RES_NOTRDY;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e048      	b.n	800387c <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80037ea:	4b27      	ldr	r3, [pc, #156]	; (8003888 <SD_disk_read+0xd0>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	025b      	lsls	r3, r3, #9
 80037fa:	607b      	str	r3, [r7, #4]

  SELECT();
 80037fc:	f7ff fd22 	bl	8003244 <SELECT>

  if (count == 1)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d111      	bne.n	800382a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	2051      	movs	r0, #81	; 0x51
 800380a:	f7ff fe83 	bl	8003514 <SD_SendCmd>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d129      	bne.n	8003868 <SD_disk_read+0xb0>
 8003814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003818:	68b8      	ldr	r0, [r7, #8]
 800381a:	f7ff fdf1 	bl	8003400 <SD_RxDataBlock>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d021      	beq.n	8003868 <SD_disk_read+0xb0>
      count = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	e01e      	b.n	8003868 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	2052      	movs	r0, #82	; 0x52
 800382e:	f7ff fe71 	bl	8003514 <SD_SendCmd>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d117      	bne.n	8003868 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8003838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800383c:	68b8      	ldr	r0, [r7, #8]
 800383e:	f7ff fddf 	bl	8003400 <SD_RxDataBlock>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800384e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	3b01      	subs	r3, #1
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1ed      	bne.n	8003838 <SD_disk_read+0x80>
 800385c:	e000      	b.n	8003860 <SD_disk_read+0xa8>
          break;
 800385e:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8003860:	2100      	movs	r1, #0
 8003862:	204c      	movs	r0, #76	; 0x4c
 8003864:	f7ff fe56 	bl	8003514 <SD_SendCmd>
    }
  }

  DESELECT();
 8003868:	f7ff fcf8 	bl	800325c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 800386c:	f7ff fd1c 	bl	80032a8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	bf14      	ite	ne
 8003876:	2301      	movne	r3, #1
 8003878:	2300      	moveq	r3, #0
 800387a:	b2db      	uxtb	r3, r3
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	2000000c 	.word	0x2000000c
 8003888:	200002bc 	.word	0x200002bc

0800388c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	607a      	str	r2, [r7, #4]
 8003896:	603b      	str	r3, [r7, #0]
 8003898:	4603      	mov	r3, r0
 800389a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <SD_disk_write+0x1c>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <SD_disk_write+0x20>
    return RES_PARERR;
 80038a8:	2304      	movs	r3, #4
 80038aa:	e06b      	b.n	8003984 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80038ac:	4b37      	ldr	r3, [pc, #220]	; (800398c <SD_disk_write+0x100>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <SD_disk_write+0x32>
    return RES_NOTRDY;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e062      	b.n	8003984 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80038be:	4b33      	ldr	r3, [pc, #204]	; (800398c <SD_disk_write+0x100>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <SD_disk_write+0x44>
    return RES_WRPRT;
 80038cc:	2302      	movs	r3, #2
 80038ce:	e059      	b.n	8003984 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 80038d0:	4b2f      	ldr	r3, [pc, #188]	; (8003990 <SD_disk_write+0x104>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d102      	bne.n	80038e2 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	025b      	lsls	r3, r3, #9
 80038e0:	607b      	str	r3, [r7, #4]

  SELECT();
 80038e2:	f7ff fcaf 	bl	8003244 <SELECT>

  if (count == 1)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d110      	bne.n	800390e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	2058      	movs	r0, #88	; 0x58
 80038f0:	f7ff fe10 	bl	8003514 <SD_SendCmd>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d13a      	bne.n	8003970 <SD_disk_write+0xe4>
 80038fa:	21fe      	movs	r1, #254	; 0xfe
 80038fc:	68b8      	ldr	r0, [r7, #8]
 80038fe:	f7ff fdb5 	bl	800346c <SD_TxDataBlock>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d033      	beq.n	8003970 <SD_disk_write+0xe4>
      count = 0;
 8003908:	2300      	movs	r3, #0
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	e030      	b.n	8003970 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800390e:	4b20      	ldr	r3, [pc, #128]	; (8003990 <SD_disk_write+0x104>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800391a:	2100      	movs	r1, #0
 800391c:	2077      	movs	r0, #119	; 0x77
 800391e:	f7ff fdf9 	bl	8003514 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8003922:	6839      	ldr	r1, [r7, #0]
 8003924:	2057      	movs	r0, #87	; 0x57
 8003926:	f7ff fdf5 	bl	8003514 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	2059      	movs	r0, #89	; 0x59
 800392e:	f7ff fdf1 	bl	8003514 <SD_SendCmd>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d11b      	bne.n	8003970 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8003938:	21fc      	movs	r1, #252	; 0xfc
 800393a:	68b8      	ldr	r0, [r7, #8]
 800393c:	f7ff fd96 	bl	800346c <SD_TxDataBlock>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800394c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	3b01      	subs	r3, #1
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1ee      	bne.n	8003938 <SD_disk_write+0xac>
 800395a:	e000      	b.n	800395e <SD_disk_write+0xd2>
          break;
 800395c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800395e:	21fd      	movs	r1, #253	; 0xfd
 8003960:	2000      	movs	r0, #0
 8003962:	f7ff fd83 	bl	800346c <SD_TxDataBlock>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <SD_disk_write+0xe4>
      {
        count = 1;
 800396c:	2301      	movs	r3, #1
 800396e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8003970:	f7ff fc74 	bl	800325c <DESELECT>
  SPI_RxByte();
 8003974:	f7ff fc98 	bl	80032a8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	bf14      	ite	ne
 800397e:	2301      	movne	r3, #1
 8003980:	2300      	moveq	r3, #0
 8003982:	b2db      	uxtb	r3, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	2000000c 	.word	0x2000000c
 8003990:	200002bc 	.word	0x200002bc

08003994 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8003994:	b590      	push	{r4, r7, lr}
 8003996:	b08b      	sub	sp, #44	; 0x2c
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	603a      	str	r2, [r7, #0]
 800399e:	71fb      	strb	r3, [r7, #7]
 80039a0:	460b      	mov	r3, r1
 80039a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80039ae:	2304      	movs	r3, #4
 80039b0:	e11b      	b.n	8003bea <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80039b8:	79bb      	ldrb	r3, [r7, #6]
 80039ba:	2b05      	cmp	r3, #5
 80039bc:	d129      	bne.n	8003a12 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d017      	beq.n	80039f6 <SD_disk_ioctl+0x62>
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	dc1f      	bgt.n	8003a0a <SD_disk_ioctl+0x76>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <SD_disk_ioctl+0x40>
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d00b      	beq.n	80039ea <SD_disk_ioctl+0x56>
 80039d2:	e01a      	b.n	8003a0a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80039d4:	f7ff fd08 	bl	80033e8 <SD_CheckPower>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 80039de:	f7ff fcf7 	bl	80033d0 <SD_PowerOff>
      res = RES_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80039e8:	e0fd      	b.n	8003be6 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 80039ea:	f7ff fca5 	bl	8003338 <SD_PowerOn>
      res = RES_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80039f4:	e0f7      	b.n	8003be6 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	1c5c      	adds	r4, r3, #1
 80039fa:	f7ff fcf5 	bl	80033e8 <SD_CheckPower>
 80039fe:	4603      	mov	r3, r0
 8003a00:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8003a02:	2300      	movs	r3, #0
 8003a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003a08:	e0ed      	b.n	8003be6 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8003a0a:	2304      	movs	r3, #4
 8003a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a10:	e0e9      	b.n	8003be6 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8003a12:	4b78      	ldr	r3, [pc, #480]	; (8003bf4 <SD_disk_ioctl+0x260>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e0e2      	b.n	8003bea <SD_disk_ioctl+0x256>

    SELECT();
 8003a24:	f7ff fc0e 	bl	8003244 <SELECT>

    switch (ctrl)
 8003a28:	79bb      	ldrb	r3, [r7, #6]
 8003a2a:	2b0d      	cmp	r3, #13
 8003a2c:	f200 80cc 	bhi.w	8003bc8 <SD_disk_ioctl+0x234>
 8003a30:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <SD_disk_ioctl+0xa4>)
 8003a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a36:	bf00      	nop
 8003a38:	08003b33 	.word	0x08003b33
 8003a3c:	08003a71 	.word	0x08003a71
 8003a40:	08003b23 	.word	0x08003b23
 8003a44:	08003bc9 	.word	0x08003bc9
 8003a48:	08003bc9 	.word	0x08003bc9
 8003a4c:	08003bc9 	.word	0x08003bc9
 8003a50:	08003bc9 	.word	0x08003bc9
 8003a54:	08003bc9 	.word	0x08003bc9
 8003a58:	08003bc9 	.word	0x08003bc9
 8003a5c:	08003bc9 	.word	0x08003bc9
 8003a60:	08003bc9 	.word	0x08003bc9
 8003a64:	08003b45 	.word	0x08003b45
 8003a68:	08003b69 	.word	0x08003b69
 8003a6c:	08003b8d 	.word	0x08003b8d
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003a70:	2100      	movs	r1, #0
 8003a72:	2049      	movs	r0, #73	; 0x49
 8003a74:	f7ff fd4e 	bl	8003514 <SD_SendCmd>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f040 80a8 	bne.w	8003bd0 <SD_disk_ioctl+0x23c>
 8003a80:	f107 030c 	add.w	r3, r7, #12
 8003a84:	2110      	movs	r1, #16
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fcba 	bl	8003400 <SD_RxDataBlock>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 809e 	beq.w	8003bd0 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8003a94:	7b3b      	ldrb	r3, [r7, #12]
 8003a96:	099b      	lsrs	r3, r3, #6
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d10e      	bne.n	8003abc <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003a9e:	7d7b      	ldrb	r3, [r7, #21]
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	7d3b      	ldrb	r3, [r7, #20]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	021b      	lsls	r3, r3, #8
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	4413      	add	r3, r2
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3301      	adds	r3, #1
 8003ab0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8003ab2:	8bfb      	ldrh	r3, [r7, #30]
 8003ab4:	029a      	lsls	r2, r3, #10
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	e02e      	b.n	8003b1a <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003abc:	7c7b      	ldrb	r3, [r7, #17]
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	7dbb      	ldrb	r3, [r7, #22]
 8003ac6:	09db      	lsrs	r3, r3, #7
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	7d7b      	ldrb	r3, [r7, #21]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f003 0306 	and.w	r3, r3, #6
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	3302      	adds	r3, #2
 8003ae0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003ae4:	7d3b      	ldrb	r3, [r7, #20]
 8003ae6:	099b      	lsrs	r3, r3, #6
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	7cfb      	ldrb	r3, [r7, #19]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	4413      	add	r3, r2
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	7cbb      	ldrb	r3, [r7, #18]
 8003afa:	029b      	lsls	r3, r3, #10
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	4413      	add	r3, r2
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3301      	adds	r3, #1
 8003b0a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003b0c:	8bfa      	ldrh	r2, [r7, #30]
 8003b0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b12:	3b09      	subs	r3, #9
 8003b14:	409a      	lsls	r2, r3
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8003b20:	e056      	b.n	8003bd0 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b28:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003b30:	e055      	b.n	8003bde <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8003b32:	f7ff fbe5 	bl	8003300 <SD_ReadyWait>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2bff      	cmp	r3, #255	; 0xff
 8003b3a:	d14b      	bne.n	8003bd4 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003b42:	e047      	b.n	8003bd4 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8003b44:	2100      	movs	r1, #0
 8003b46:	2049      	movs	r0, #73	; 0x49
 8003b48:	f7ff fce4 	bl	8003514 <SD_SendCmd>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d142      	bne.n	8003bd8 <SD_disk_ioctl+0x244>
 8003b52:	2110      	movs	r1, #16
 8003b54:	6a38      	ldr	r0, [r7, #32]
 8003b56:	f7ff fc53 	bl	8003400 <SD_RxDataBlock>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d03b      	beq.n	8003bd8 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003b66:	e037      	b.n	8003bd8 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8003b68:	2100      	movs	r1, #0
 8003b6a:	204a      	movs	r0, #74	; 0x4a
 8003b6c:	f7ff fcd2 	bl	8003514 <SD_SendCmd>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d132      	bne.n	8003bdc <SD_disk_ioctl+0x248>
 8003b76:	2110      	movs	r1, #16
 8003b78:	6a38      	ldr	r0, [r7, #32]
 8003b7a:	f7ff fc41 	bl	8003400 <SD_RxDataBlock>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d02b      	beq.n	8003bdc <SD_disk_ioctl+0x248>
        res = RES_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003b8a:	e027      	b.n	8003bdc <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	207a      	movs	r0, #122	; 0x7a
 8003b90:	f7ff fcc0 	bl	8003514 <SD_SendCmd>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d116      	bne.n	8003bc8 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003ba0:	e00b      	b.n	8003bba <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8003ba2:	6a3c      	ldr	r4, [r7, #32]
 8003ba4:	1c63      	adds	r3, r4, #1
 8003ba6:	623b      	str	r3, [r7, #32]
 8003ba8:	f7ff fb7e 	bl	80032a8 <SPI_RxByte>
 8003bac:	4603      	mov	r3, r0
 8003bae:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8003bb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003bba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d9ef      	bls.n	8003ba2 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8003bc8:	2304      	movs	r3, #4
 8003bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003bce:	e006      	b.n	8003bde <SD_disk_ioctl+0x24a>
      break;
 8003bd0:	bf00      	nop
 8003bd2:	e004      	b.n	8003bde <SD_disk_ioctl+0x24a>
      break;
 8003bd4:	bf00      	nop
 8003bd6:	e002      	b.n	8003bde <SD_disk_ioctl+0x24a>
      break;
 8003bd8:	bf00      	nop
 8003bda:	e000      	b.n	8003bde <SD_disk_ioctl+0x24a>
      break;
 8003bdc:	bf00      	nop
    }

    DESELECT();
 8003bde:	f7ff fb3d 	bl	800325c <DESELECT>
    SPI_RxByte();
 8003be2:	f7ff fb61 	bl	80032a8 <SPI_RxByte>
  }

  return res;
 8003be6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	372c      	adds	r7, #44	; 0x2c
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd90      	pop	{r4, r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	2000000c 	.word	0x2000000c

08003bf8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4a07      	ldr	r2, [pc, #28]	; (8003c24 <vApplicationGetIdleTaskMemory+0x2c>)
 8003c08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	4a06      	ldr	r2, [pc, #24]	; (8003c28 <vApplicationGetIdleTaskMemory+0x30>)
 8003c0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2280      	movs	r2, #128	; 0x80
 8003c14:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003c16:	bf00      	nop
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	200002c0 	.word	0x200002c0
 8003c28:	20000374 	.word	0x20000374

08003c2c <prv_parse_num>:
 *                      as function will only add new value to existing one
 * \param[out]      out_num: Pointer to output number
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
static lwdtcr_t
prv_parse_num(const char* token, size_t max_len, size_t* index, size_t* out_num) {
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
    size_t cnt = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]

    ASSERT_TOKEN_VALID(CHAR_IS_NUM(*token));
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b2f      	cmp	r3, #47	; 0x2f
 8003c44:	d903      	bls.n	8003c4e <prv_parse_num+0x22>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b39      	cmp	r3, #57	; 0x39
 8003c4c:	d901      	bls.n	8003c52 <prv_parse_num+0x26>
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e02c      	b.n	8003cac <prv_parse_num+0x80>

    /* Parse number in decimal format */
    *out_num = 0;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
    while (max_len > 0 && CHAR_IS_NUM(token[cnt])) {
 8003c58:	e012      	b.n	8003c80 <prv_parse_num+0x54>
        *out_num = (*out_num) * 10 + CHAR_TO_NUM(token[cnt]);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	4619      	mov	r1, r3
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	440b      	add	r3, r1
 8003c72:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	601a      	str	r2, [r3, #0]
        ++cnt;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	617b      	str	r3, [r7, #20]
    while (max_len > 0 && CHAR_IS_NUM(token[cnt])) {
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00b      	beq.n	8003c9e <prv_parse_num+0x72>
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b2f      	cmp	r3, #47	; 0x2f
 8003c90:	d905      	bls.n	8003c9e <prv_parse_num+0x72>
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	4413      	add	r3, r2
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b39      	cmp	r3, #57	; 0x39
 8003c9c:	d9dd      	bls.n	8003c5a <prv_parse_num+0x2e>
    }
    *index += cnt;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	441a      	add	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	601a      	str	r2, [r3, #0]
    return lwdtcOK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <prv_get_next_token>:
 * \brief           Get start of next token from a list
 * \param[in,out]   parser: Parser structure with all input data
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
static lwdtcr_t
prv_get_next_token(prv_cron_parser_ctx_t* parser) {
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
    const char* s = parser->cron_str;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]
    size_t len = parser->cron_str_len;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	60bb      	str	r3, [r7, #8]

    /* Remove all leading spaces from the string */
    for (; len > 0 && s != NULL && *s == ' ' && *s != '\0'; ++s, --len) {}
 8003ccc:	e005      	b.n	8003cda <prv_get_next_token+0x22>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <prv_get_next_token+0x3e>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d007      	beq.n	8003cf6 <prv_get_next_token+0x3e>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d103      	bne.n	8003cf6 <prv_get_next_token+0x3e>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1eb      	bne.n	8003cce <prv_get_next_token+0x16>
    if (len == 0 || s == NULL || *s == '\0') {
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d006      	beq.n	8003d0a <prv_get_next_token+0x52>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <prv_get_next_token+0x52>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <prv_get_next_token+0x56>
        return lwdtcERRTOKEN;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e025      	b.n	8003d5a <prv_get_next_token+0xa2>
    }
    parser->new_token = s; /* Set start of the token */
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	60da      	str	r2, [r3, #12]

    /* Search for the end of token */
    for (; len > 0 && s != NULL && *s != ' ' && *s != '\0'; ++s, --len) {
 8003d14:	e005      	b.n	8003d22 <prv_get_next_token+0x6a>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <prv_get_next_token+0x86>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d007      	beq.n	8003d3e <prv_get_next_token+0x86>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d003      	beq.n	8003d3e <prv_get_next_token+0x86>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1eb      	bne.n	8003d16 <prv_get_next_token+0x5e>
        ;
    }
    parser->new_token_len = s - parser->new_token; /* Get token length */
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	611a      	str	r2, [r3, #16]

    parser->cron_str = s;       /* Set position where next token is about to start (with leading spaces) */
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	605a      	str	r2, [r3, #4]
    parser->cron_str_len = len; /* Set remaining length of the input string */
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	609a      	str	r2, [r3, #8]
    return lwdtcOK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <prv_get_and_parse_next_token>:
 * \param[in]       val_min: Minimum allowed value user can input
 * \param[in]       val_max: Maximum allowed value user can input
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
static lwdtcr_t
prv_get_and_parse_next_token(prv_cron_parser_ctx_t* parser, uint8_t* bit_map, size_t val_min, size_t val_max) {
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b08c      	sub	sp, #48	; 0x30
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	603b      	str	r3, [r7, #0]
    size_t i = 0, bit_start_pos, bit_end_pos, bit_step;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
    uint8_t is_range, is_opposite;

    /* Get next token from string */
    ASSERT_ACTION(prv_get_next_token(parser) == lwdtcOK);
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f7ff ff9d 	bl	8003cb8 <prv_get_next_token>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <prv_get_and_parse_next_token+0x22>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e139      	b.n	8003ffc <prv_get_and_parse_next_token+0x296>
     * Process token string in a while loop
     *
     * Use do-while loop to seamlessly process comma separations
     */
    do {
        bit_start_pos = 0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61bb      	str	r3, [r7, #24]
        bit_end_pos = SIZE_MAX;
 8003d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d90:	617b      	str	r3, [r7, #20]
        bit_step = 1;
 8003d92:	2301      	movs	r3, #1
 8003d94:	613b      	str	r3, [r7, #16]
        is_range = 0;
 8003d96:	2300      	movs	r3, #0
 8003d98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        is_opposite = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        ASSERT_ACTION(i < parser->new_token_len); /* Check token length */
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d801      	bhi.n	8003db0 <prv_get_and_parse_next_token+0x4a>
 8003dac:	2301      	movs	r3, #1
 8003dae:	e125      	b.n	8003ffc <prv_get_and_parse_next_token+0x296>
         *          step defined by number
         *          (space between * and / is used to be able to keep it as C comment for this example)
         */

        /* Find start character first */
        if (parser->new_token[i] == '*') {
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	4413      	add	r3, r2
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b2a      	cmp	r3, #42	; 0x2a
 8003dbc:	d107      	bne.n	8003dce <prv_get_and_parse_next_token+0x68>
            i++;
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	61fb      	str	r3, [r7, #28]
             * Star represents any value between minimum and maximum
             * for specific date & time field.
             *
             * Set start and end positions accordingly
             */
            bit_start_pos = val_min;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	61bb      	str	r3, [r7, #24]
            bit_end_pos = val_max;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	e014      	b.n	8003df8 <prv_get_and_parse_next_token+0x92>
             * eventually can even set maximum boundary later (when range is used)
             *
             * Since we don't know yet what is following after the number,
             * parse the number and set start and end bits to the same value
             */
            ASSERT_TOKEN_VALID(prv_parse_num(&parser->new_token[i], parser->new_token_len - i, &i, &bit_start_pos)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	18d0      	adds	r0, r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	691a      	ldr	r2, [r3, #16]
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	1ad1      	subs	r1, r2, r3
 8003dde:	f107 0318 	add.w	r3, r7, #24
 8003de2:	f107 021c 	add.w	r2, r7, #28
 8003de6:	f7ff ff21 	bl	8003c2c <prv_parse_num>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <prv_get_and_parse_next_token+0x8e>
 8003df0:	2303      	movs	r3, #3
 8003df2:	e103      	b.n	8003ffc <prv_get_and_parse_next_token+0x296>
                               == lwdtcOK);
            bit_end_pos = bit_start_pos;
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	617b      	str	r3, [r7, #20]
         * Character "-" defines range between min and max
         *
         * At this moment, step is still "1", indicating
         * every value between min and max is to be set
         */
        if (i < parser->new_token_len && parser->new_token[i] == '-') {
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d939      	bls.n	8003e76 <prv_get_and_parse_next_token+0x110>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	4413      	add	r3, r2
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b2d      	cmp	r3, #45	; 0x2d
 8003e0e:	d132      	bne.n	8003e76 <prv_get_and_parse_next_token+0x110>
            ++i;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	3301      	adds	r3, #1
 8003e14:	61fb      	str	r3, [r7, #28]

            /* Parse second part of range */
            ASSERT_ACTION(i < parser->new_token_len);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d801      	bhi.n	8003e24 <prv_get_and_parse_next_token+0xbe>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0eb      	b.n	8003ffc <prv_get_and_parse_next_token+0x296>
            ASSERT_TOKEN_VALID(prv_parse_num(&parser->new_token[i], parser->new_token_len - i, &i, &bit_end_pos)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	18d0      	adds	r0, r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	1ad1      	subs	r1, r2, r3
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	f107 021c 	add.w	r2, r7, #28
 8003e3c:	f7ff fef6 	bl	8003c2c <prv_parse_num>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <prv_get_and_parse_next_token+0xe4>
 8003e46:	2303      	movs	r3, #3
 8003e48:	e0d8      	b.n	8003ffc <prv_get_and_parse_next_token+0x296>
                               == lwdtcOK);

            /* Stop bit must be always higher or equal than start bit */
            if (bit_start_pos > bit_end_pos) {
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d908      	bls.n	8003e64 <prv_get_and_parse_next_token+0xfe>
                size_t tmp = bit_end_pos;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	623b      	str	r3, [r7, #32]

                /* Change start and stop values */
                bit_end_pos = bit_start_pos;
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	617b      	str	r3, [r7, #20]
                bit_start_pos = tmp;
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	61bb      	str	r3, [r7, #24]
                /* Mark it as opposite direction */
                is_opposite = 1;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
            ASSERT_TOKEN_VALID(bit_end_pos >= bit_start_pos);
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d201      	bcs.n	8003e70 <prv_get_and_parse_next_token+0x10a>
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e0c5      	b.n	8003ffc <prv_get_and_parse_next_token+0x296>
            is_range = 1;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
         *
         * A step_bit must be calculated according to input value and
         * end_position must be set to maximum, but only when range is not used,
         * indicating we want to use full range of available value
         */
        if (i < parser->new_token_len && parser->new_token[i] == '/') {
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d923      	bls.n	8003ec8 <prv_get_and_parse_next_token+0x162>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	4413      	add	r3, r2
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b2f      	cmp	r3, #47	; 0x2f
 8003e8c:	d11c      	bne.n	8003ec8 <prv_get_and_parse_next_token+0x162>
            ++i;
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	3301      	adds	r3, #1
 8003e92:	61fb      	str	r3, [r7, #28]
            ASSERT_TOKEN_VALID(prv_parse_num(&parser->new_token[i], parser->new_token_len - i, &i, &bit_step)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	18d0      	adds	r0, r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	1ad1      	subs	r1, r2, r3
 8003ea4:	f107 0310 	add.w	r3, r7, #16
 8003ea8:	f107 021c 	add.w	r2, r7, #28
 8003eac:	f7ff febe 	bl	8003c2c <prv_parse_num>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <prv_get_and_parse_next_token+0x154>
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e0a0      	b.n	8003ffc <prv_get_and_parse_next_token+0x296>
             * If user did not specify range (min-max) values,
             * then all bits to the end of value are valid.
             *
             * Indicate this by setting end position as being maximum
             */
            if (!is_range) {
 8003eba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <prv_get_and_parse_next_token+0x162>
                bit_end_pos = SIZE_MAX;
 8003ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ec6:	617b      	str	r3, [r7, #20]
            }
        }

        /* Verify valid user inputs, to make sure min value is lower than max one */
        if (bit_start_pos < val_min) {
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d901      	bls.n	8003ed4 <prv_get_and_parse_next_token+0x16e>
            LWDTC_DEBUG("bit_start_pos & is less than minimum: %d/%d\r\n", (int)bit_start_pos, (int)val_min);
            return lwdtcERRTOKEN;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e093      	b.n	8003ffc <prv_get_and_parse_next_token+0x296>
        }
        if (bit_end_pos > val_max) {
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d207      	bcs.n	8003eec <prv_get_and_parse_next_token+0x186>
            /* Full value indicates complete range, perform manual strip */
            if (bit_end_pos != (size_t)-1) {
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ee2:	d001      	beq.n	8003ee8 <prv_get_and_parse_next_token+0x182>
                LWDTC_DEBUG("bit_end_pos is greater than maximum: %d/%d\r\n", (int)bit_end_pos, (int)val_max);
                return lwdtcERRTOKEN;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e089      	b.n	8003ffc <prv_get_and_parse_next_token+0x296>
            }
            bit_end_pos = val_max;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	617b      	str	r3, [r7, #20]
        }

        LWDTC_DEBUG("bit_start_pos: %u, bit_end_pos: %u, bit_step: %u, is_opposite: %u\r\n", (unsigned)bit_start_pos,
                    (unsigned)bit_end_pos, (unsigned)bit_step, (unsigned)is_opposite);

        if (is_opposite) {
 8003eec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d048      	beq.n	8003f86 <prv_get_and_parse_next_token+0x220>
            size_t bit;

            /* Set bits in map from stop to the end value and from beginning to start value */
            for (bit = bit_end_pos; bit <= val_max; bit += bit_step) {
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ef8:	e018      	b.n	8003f2c <prv_get_and_parse_next_token+0x1c6>
                BIT_SET(bit_map, bit);
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	08db      	lsrs	r3, r3, #3
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	4413      	add	r3, r2
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	b25a      	sxtb	r2, r3
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f12:	b25b      	sxtb	r3, r3
 8003f14:	4313      	orrs	r3, r2
 8003f16:	b259      	sxtb	r1, r3
 8003f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1a:	08db      	lsrs	r3, r3, #3
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	4413      	add	r3, r2
 8003f20:	b2ca      	uxtb	r2, r1
 8003f22:	701a      	strb	r2, [r3, #0]
            for (bit = bit_end_pos; bit <= val_max; bit += bit_step) {
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f28:	4413      	add	r3, r2
 8003f2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d9e2      	bls.n	8003efa <prv_get_and_parse_next_token+0x194>
            }
            /* We start at the multiplier of bit_step value */
            for (bit = bit % bit_step + val_min; bit <= bit_start_pos; bit += bit_step) {
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f38:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f3c:	fb02 f201 	mul.w	r2, r2, r1
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f48:	e018      	b.n	8003f7c <prv_get_and_parse_next_token+0x216>
                BIT_SET(bit_map, bit);
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	08db      	lsrs	r3, r3, #3
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	4413      	add	r3, r2
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	b25a      	sxtb	r2, r3
 8003f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f62:	b25b      	sxtb	r3, r3
 8003f64:	4313      	orrs	r3, r2
 8003f66:	b259      	sxtb	r1, r3
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	08db      	lsrs	r3, r3, #3
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	4413      	add	r3, r2
 8003f70:	b2ca      	uxtb	r2, r1
 8003f72:	701a      	strb	r2, [r3, #0]
            for (bit = bit % bit_step + val_min; bit <= bit_start_pos; bit += bit_step) {
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f78:	4413      	add	r3, r2
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d9e2      	bls.n	8003f4a <prv_get_and_parse_next_token+0x1e4>
 8003f84:	e01f      	b.n	8003fc6 <prv_get_and_parse_next_token+0x260>
            }
        } else {
            /* Set bits in map from start to end */
            for (size_t bit = bit_start_pos; bit <= bit_end_pos; bit += bit_step) {
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8a:	e018      	b.n	8003fbe <prv_get_and_parse_next_token+0x258>
                BIT_SET(bit_map, bit);
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	08db      	lsrs	r3, r3, #3
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	4413      	add	r3, r2
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	b25a      	sxtb	r2, r3
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa4:	b25b      	sxtb	r3, r3
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	b259      	sxtb	r1, r3
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	08db      	lsrs	r3, r3, #3
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	b2ca      	uxtb	r2, r1
 8003fb4:	701a      	strb	r2, [r3, #0]
            for (size_t bit = bit_start_pos; bit <= bit_end_pos; bit += bit_step) {
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fba:	4413      	add	r3, r2
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d9e2      	bls.n	8003f8c <prv_get_and_parse_next_token+0x226>
            }
        }

        /* If we are not at the end, character must be comma */
        if (i == parser->new_token_len) {
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d013      	beq.n	8003ff8 <prv_get_and_parse_next_token+0x292>
            break;
        } else if (parser->new_token[i] != ',') {
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b2c      	cmp	r3, #44	; 0x2c
 8003fdc:	d001      	beq.n	8003fe2 <prv_get_and_parse_next_token+0x27c>
            return lwdtcERRTOKEN;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e00c      	b.n	8003ffc <prv_get_and_parse_next_token+0x296>
        }
    } while (parser->new_token[i++] == ','); /* Could be replaced by (1) */
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	1c59      	adds	r1, r3, #1
 8003fea:	61f9      	str	r1, [r7, #28]
 8003fec:	4413      	add	r3, r2
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b2c      	cmp	r3, #44	; 0x2c
 8003ff2:	f43f aec9 	beq.w	8003d88 <prv_get_and_parse_next_token+0x22>
 8003ff6:	e000      	b.n	8003ffa <prv_get_and_parse_next_token+0x294>
            break;
 8003ff8:	bf00      	nop
    return lwdtcOK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3730      	adds	r7, #48	; 0x30
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <lwdtc_cron_parse_with_len>:
 * \param[in]       cron_str_len: Length of input cron string,
 *                      not counting potential `NULL` termination character
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
lwdtcr_t
lwdtc_cron_parse_with_len(lwdtc_cron_ctx_t* ctx, const char* cron_str, size_t cron_str_len) {
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
    prv_cron_parser_ctx_t parser = {0};
 8004010:	f107 0310 	add.w	r3, r7, #16
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	60da      	str	r2, [r3, #12]
 800401e:	611a      	str	r2, [r3, #16]
    lwdtcr_t res;

    ASSERT_PARAM(ctx != NULL && cron_str != NULL && cron_str_len > 0);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <lwdtc_cron_parse_with_len+0x2e>
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <lwdtc_cron_parse_with_len+0x2e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <lwdtc_cron_parse_with_len+0x32>
 8004032:	2302      	movs	r3, #2
 8004034:	e090      	b.n	8004158 <lwdtc_cron_parse_with_len+0x154>
    memset(ctx, 0x00, sizeof(*ctx)); /* Reset structure */
 8004036:	222c      	movs	r2, #44	; 0x2c
 8004038:	2100      	movs	r1, #0
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f022 fadc 	bl	80265f8 <memset>

    /* Setup parser */
    parser.ctx = ctx;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	613b      	str	r3, [r7, #16]
    parser.cron_str = cron_str;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	617b      	str	r3, [r7, #20]
    parser.cron_str_len = cron_str_len;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	61bb      	str	r3, [r7, #24]
    if ((res = (func_call)) != lwdtcOK) {                                                                              \
        return res;                                                                                                    \
    }

    /* Parse seconds field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->sec, LWDTC_SEC_MIN, LWDTC_SEC_MAX));
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1d19      	adds	r1, r3, #4
 8004050:	f107 0010 	add.w	r0, r7, #16
 8004054:	233b      	movs	r3, #59	; 0x3b
 8004056:	2200      	movs	r2, #0
 8004058:	f7ff fe85 	bl	8003d66 <prv_get_and_parse_next_token>
 800405c:	4603      	mov	r3, r0
 800405e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <lwdtc_cron_parse_with_len+0x6c>
 800406a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800406e:	e073      	b.n	8004158 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Seconds token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse minutes field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->min, LWDTC_MIN_MIN, LWDTC_MIN_MAX));
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f103 010c 	add.w	r1, r3, #12
 8004076:	f107 0010 	add.w	r0, r7, #16
 800407a:	233b      	movs	r3, #59	; 0x3b
 800407c:	2200      	movs	r2, #0
 800407e:	f7ff fe72 	bl	8003d66 <prv_get_and_parse_next_token>
 8004082:	4603      	mov	r3, r0
 8004084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <lwdtc_cron_parse_with_len+0x92>
 8004090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004094:	e060      	b.n	8004158 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Minutes token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse hours field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->hour, LWDTC_HOUR_MIN, LWDTC_HOUR_MAX));
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f103 0114 	add.w	r1, r3, #20
 800409c:	f107 0010 	add.w	r0, r7, #16
 80040a0:	2317      	movs	r3, #23
 80040a2:	2200      	movs	r2, #0
 80040a4:	f7ff fe5f 	bl	8003d66 <prv_get_and_parse_next_token>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80040ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <lwdtc_cron_parse_with_len+0xb8>
 80040b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040ba:	e04d      	b.n	8004158 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Hours token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse day in month field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->mday, LWDTC_MDAY_MIN, LWDTC_MDAY_MAX));
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f103 0117 	add.w	r1, r3, #23
 80040c2:	f107 0010 	add.w	r0, r7, #16
 80040c6:	231f      	movs	r3, #31
 80040c8:	2201      	movs	r2, #1
 80040ca:	f7ff fe4c 	bl	8003d66 <prv_get_and_parse_next_token>
 80040ce:	4603      	mov	r3, r0
 80040d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80040d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <lwdtc_cron_parse_with_len+0xde>
 80040dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040e0:	e03a      	b.n	8004158 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Mday token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse month field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->mon, LWDTC_MON_MIN, LWDTC_MON_MAX));
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f103 011b 	add.w	r1, r3, #27
 80040e8:	f107 0010 	add.w	r0, r7, #16
 80040ec:	230c      	movs	r3, #12
 80040ee:	2201      	movs	r2, #1
 80040f0:	f7ff fe39 	bl	8003d66 <prv_get_and_parse_next_token>
 80040f4:	4603      	mov	r3, r0
 80040f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80040fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <lwdtc_cron_parse_with_len+0x104>
 8004102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004106:	e027      	b.n	8004158 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Month token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse day in a week field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->wday, LWDTC_WDAY_MIN, LWDTC_WDAY_MAX));
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f103 011d 	add.w	r1, r3, #29
 800410e:	f107 0010 	add.w	r0, r7, #16
 8004112:	2306      	movs	r3, #6
 8004114:	2200      	movs	r2, #0
 8004116:	f7ff fe26 	bl	8003d66 <prv_get_and_parse_next_token>
 800411a:	4603      	mov	r3, r0
 800411c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <lwdtc_cron_parse_with_len+0x12a>
 8004128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800412c:	e014      	b.n	8004158 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Weekday token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse year field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->year, LWDTC_YEAR_MIN, LWDTC_YEAR_MAX));
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f103 011e 	add.w	r1, r3, #30
 8004134:	f107 0010 	add.w	r0, r7, #16
 8004138:	2364      	movs	r3, #100	; 0x64
 800413a:	2200      	movs	r2, #0
 800413c:	f7ff fe13 	bl	8003d66 <prv_get_and_parse_next_token>
 8004140:	4603      	mov	r3, r0
 8004142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <lwdtc_cron_parse_with_len+0x150>
 800414e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004152:	e001      	b.n	8004158 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Year token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);
    return res;
 8004154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004158:	4618      	mov	r0, r3
 800415a:	3728      	adds	r7, #40	; 0x28
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <lwdtc_cron_parse_multi>:
 *                      Used only if function doesn't return \ref lwdtcOK,
 *                      otherwise pointer doesn't get modified
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
lwdtcr_t
lwdtc_cron_parse_multi(lwdtc_cron_ctx_t* cron_ctx, struct dbCron dbCrontxt[], size_t ctx_len, size_t* fail_index) {
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
    lwdtcr_t res = lwdtcERR;
 800416e:	2301      	movs	r3, #1
 8004170:	77fb      	strb	r3, [r7, #31]
    int x = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]

    ASSERT_PARAM(cron_ctx != NULL && ctx_len > 0);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <lwdtc_cron_parse_multi+0x22>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <lwdtc_cron_parse_multi+0x26>
 8004182:	2302      	movs	r3, #2
 8004184:	e036      	b.n	80041f4 <lwdtc_cron_parse_multi+0x94>
//

    /* Parse all input strings, each to its own cron context structure */
    for (size_t i = 0; i < ctx_len; ++i) {
 8004186:	2300      	movs	r3, #0
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	e02c      	b.n	80041e6 <lwdtc_cron_parse_multi+0x86>
    	x = strlen(dbCrontxt[i].cron);
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8004192:	fb02 f303 	mul.w	r3, r2, r3
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	4413      	add	r3, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f7fc f822 	bl	80001e4 <strlen>
 80041a0:	4603      	mov	r3, r0
 80041a2:	617b      	str	r3, [r7, #20]
        if ((res = lwdtc_cron_parse_with_len(&cron_ctx[i], dbCrontxt[i].cron, x)) != lwdtcOK) {
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	222c      	movs	r2, #44	; 0x2c
 80041a8:	fb02 f303 	mul.w	r3, r2, r3
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	18d0      	adds	r0, r2, r3
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	4413      	add	r3, r2
 80041be:	4619      	mov	r1, r3
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	461a      	mov	r2, r3
 80041c4:	f7ff ff1e 	bl	8004004 <lwdtc_cron_parse_with_len>
 80041c8:	4603      	mov	r3, r0
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	7ffb      	ldrb	r3, [r7, #31]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d006      	beq.n	80041e0 <lwdtc_cron_parse_multi+0x80>
            if (fail_index != NULL) {
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00b      	beq.n	80041f0 <lwdtc_cron_parse_multi+0x90>
                *fail_index = i;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	601a      	str	r2, [r3, #0]
            }
            break;
 80041de:	e007      	b.n	80041f0 <lwdtc_cron_parse_multi+0x90>
    for (size_t i = 0; i < ctx_len; ++i) {
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	3301      	adds	r3, #1
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d3ce      	bcc.n	800418c <lwdtc_cron_parse_multi+0x2c>
 80041ee:	e000      	b.n	80041f2 <lwdtc_cron_parse_multi+0x92>
            break;
 80041f0:	bf00      	nop
        }
    }
    return res;
 80041f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3720      	adds	r7, #32
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <lwdtc_cron_is_valid_for_time>:
 *                      and does not perform additional check
 * \param[in]       cron_ctx: Cron context object with valid structure
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
lwdtcr_t
lwdtc_cron_is_valid_for_time(const struct tm* tm_time, const lwdtc_cron_ctx_t* cron_ctx, int *idtask) {
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
    lwdtcr_t res = lwdtcOK;
 8004208:	2300      	movs	r3, #0
 800420a:	75fb      	strb	r3, [r7, #23]
    int i = *idtask;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	613b      	str	r3, [r7, #16]

    ASSERT_PARAM(tm_time != NULL && cron_ctx != NULL);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <lwdtc_cron_is_valid_for_time+0x22>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <lwdtc_cron_is_valid_for_time+0x26>
 800421e:	2302      	movs	r3, #2
 8004220:	e09f      	b.n	8004362 <lwdtc_cron_is_valid_for_time+0x166>
     * - When particular day in month occurs
     * - or when particular day in week occurs, effectively becoming OR operation.
     *
     * Our cron is a valid when bitwise AND-ed between all fields is a pass
     */
    if (!BIT_IS_SET(cron_ctx[i].sec, tm_time->tm_sec) || !BIT_IS_SET(cron_ctx[i].min, tm_time->tm_min)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	222c      	movs	r2, #44	; 0x2c
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	441a      	add	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	10db      	asrs	r3, r3, #3
 8004234:	4413      	add	r3, r2
 8004236:	791b      	ldrb	r3, [r3, #4]
 8004238:	461a      	mov	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	fa42 f303 	asr.w	r3, r2, r3
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 8086 	beq.w	800435c <lwdtc_cron_is_valid_for_time+0x160>
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	222c      	movs	r2, #44	; 0x2c
 8004254:	fb02 f303 	mul.w	r3, r2, r3
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	441a      	add	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	10db      	asrs	r3, r3, #3
 8004262:	4413      	add	r3, r2
 8004264:	7b1b      	ldrb	r3, [r3, #12]
 8004266:	461a      	mov	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	fa42 f303 	asr.w	r3, r2, r3
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d06f      	beq.n	800435c <lwdtc_cron_is_valid_for_time+0x160>
        || !BIT_IS_SET(cron_ctx[i].hour, tm_time->tm_hour) || !BIT_IS_SET(cron_ctx[i].mday, tm_time->tm_mday)
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	222c      	movs	r2, #44	; 0x2c
 8004280:	fb02 f303 	mul.w	r3, r2, r3
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	441a      	add	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	10db      	asrs	r3, r3, #3
 800428e:	4413      	add	r3, r2
 8004290:	7d1b      	ldrb	r3, [r3, #20]
 8004292:	461a      	mov	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	fa42 f303 	asr.w	r3, r2, r3
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d059      	beq.n	800435c <lwdtc_cron_is_valid_for_time+0x160>
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	222c      	movs	r2, #44	; 0x2c
 80042ac:	fb02 f303 	mul.w	r3, r2, r3
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	441a      	add	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	10db      	asrs	r3, r3, #3
 80042ba:	4413      	add	r3, r2
 80042bc:	7ddb      	ldrb	r3, [r3, #23]
 80042be:	461a      	mov	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	fa42 f303 	asr.w	r3, r2, r3
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d043      	beq.n	800435c <lwdtc_cron_is_valid_for_time+0x160>
        || !BIT_IS_SET(cron_ctx[i].mon, tm_time->tm_mon) || !BIT_IS_SET(cron_ctx[i].wday, tm_time->tm_wday)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	222c      	movs	r2, #44	; 0x2c
 80042d8:	fb02 f303 	mul.w	r3, r2, r3
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	441a      	add	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	10db      	asrs	r3, r3, #3
 80042e6:	4413      	add	r3, r2
 80042e8:	7edb      	ldrb	r3, [r3, #27]
 80042ea:	461a      	mov	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	fa42 f303 	asr.w	r3, r2, r3
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d02d      	beq.n	800435c <lwdtc_cron_is_valid_for_time+0x160>
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	222c      	movs	r2, #44	; 0x2c
 8004304:	fb02 f303 	mul.w	r3, r2, r3
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	441a      	add	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	10db      	asrs	r3, r3, #3
 8004312:	4413      	add	r3, r2
 8004314:	7f5b      	ldrb	r3, [r3, #29]
 8004316:	461a      	mov	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	fa42 f303 	asr.w	r3, r2, r3
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d017      	beq.n	800435c <lwdtc_cron_is_valid_for_time+0x160>
        || !BIT_IS_SET(cron_ctx[i].year, (tm_time->tm_year - 100))) {
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	222c      	movs	r2, #44	; 0x2c
 8004330:	fb02 f303 	mul.w	r3, r2, r3
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	441a      	add	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	3b64      	subs	r3, #100	; 0x64
 800433e:	10db      	asrs	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	7f9b      	ldrb	r3, [r3, #30]
 8004344:	461a      	mov	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	3b64      	subs	r3, #100	; 0x64
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	fa42 f303 	asr.w	r3, r2, r3
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <lwdtc_cron_is_valid_for_time+0x164>
        res = lwdtcERR;
 800435c:	2301      	movs	r3, #1
 800435e:	75fb      	strb	r3, [r7, #23]
    }
    return res;
 8004360:	7dfb      	ldrb	r3, [r7, #23]
}
 8004362:	4618      	mov	r0, r3
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
	...

08004370 <mqtt_incoming_publish_cb>:
 If RAM and CPU budget allows it, the easiest implementation might be to just take a copy of
 the topic string and use it in mqtt_incoming_data_cb
 */
static int inpub_id;
static void mqtt_incoming_publish_cb(void *arg, const char *topic,
		u32_t tot_len) {
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
	sprintf(buffer, "Incoming publish at topic %s with total length %u\n\r",
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	4914      	ldr	r1, [pc, #80]	; (80043d4 <mqtt_incoming_publish_cb+0x64>)
 8004382:	4815      	ldr	r0, [pc, #84]	; (80043d8 <mqtt_incoming_publish_cb+0x68>)
 8004384:	f022 fdec 	bl	8026f60 <siprintf>
			topic, (unsigned int) tot_len);
	HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), 1000);
 8004388:	4813      	ldr	r0, [pc, #76]	; (80043d8 <mqtt_incoming_publish_cb+0x68>)
 800438a:	f7fb ff2b 	bl	80001e4 <strlen>
 800438e:	4603      	mov	r3, r0
 8004390:	b29a      	uxth	r2, r3
 8004392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004396:	4910      	ldr	r1, [pc, #64]	; (80043d8 <mqtt_incoming_publish_cb+0x68>)
 8004398:	4810      	ldr	r0, [pc, #64]	; (80043dc <mqtt_incoming_publish_cb+0x6c>)
 800439a:	f00a fe0e 	bl	800efba <HAL_UART_Transmit>
	/* Decode topic string into a user defined reference */
	if (strcmp(topic, "test") == 0) {
 800439e:	4910      	ldr	r1, [pc, #64]	; (80043e0 <mqtt_incoming_publish_cb+0x70>)
 80043a0:	68b8      	ldr	r0, [r7, #8]
 80043a2:	f7fb ff15 	bl	80001d0 <strcmp>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d103      	bne.n	80043b4 <mqtt_incoming_publish_cb+0x44>
		inpub_id = 0;
 80043ac:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <mqtt_incoming_publish_cb+0x74>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
	} else {
		/* For all other topics */
		inpub_id = 9;
	}

}
 80043b2:	e00a      	b.n	80043ca <mqtt_incoming_publish_cb+0x5a>
	} else if (topic[0] == 'A') {
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b41      	cmp	r3, #65	; 0x41
 80043ba:	d103      	bne.n	80043c4 <mqtt_incoming_publish_cb+0x54>
		inpub_id = 1;
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <mqtt_incoming_publish_cb+0x74>)
 80043be:	2201      	movs	r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
}
 80043c2:	e002      	b.n	80043ca <mqtt_incoming_publish_cb+0x5a>
		inpub_id = 9;
 80043c4:	4b07      	ldr	r3, [pc, #28]	; (80043e4 <mqtt_incoming_publish_cb+0x74>)
 80043c6:	2209      	movs	r2, #9
 80043c8:	601a      	str	r2, [r3, #0]
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	0802b85c 	.word	0x0802b85c
 80043d8:	200072a4 	.word	0x200072a4
 80043dc:	2000878c 	.word	0x2000878c
 80043e0:	0802b890 	.word	0x0802b890
 80043e4:	20000574 	.word	0x20000574

080043e8 <mqtt_incoming_data_cb>:

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len,u8_t flags) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	4611      	mov	r1, r2
 80043f4:	461a      	mov	r2, r3
 80043f6:	460b      	mov	r3, r1
 80043f8:	80fb      	strh	r3, [r7, #6]
 80043fa:	4613      	mov	r3, r2
 80043fc:	717b      	strb	r3, [r7, #5]
	sprintf(buffer, "Incoming publish payload with length %d, flags %u\n\r",len, (unsigned int) flags);
 80043fe:	88fa      	ldrh	r2, [r7, #6]
 8004400:	797b      	ldrb	r3, [r7, #5]
 8004402:	491c      	ldr	r1, [pc, #112]	; (8004474 <mqtt_incoming_data_cb+0x8c>)
 8004404:	481c      	ldr	r0, [pc, #112]	; (8004478 <mqtt_incoming_data_cb+0x90>)
 8004406:	f022 fdab 	bl	8026f60 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), 1000);
 800440a:	481b      	ldr	r0, [pc, #108]	; (8004478 <mqtt_incoming_data_cb+0x90>)
 800440c:	f7fb feea 	bl	80001e4 <strlen>
 8004410:	4603      	mov	r3, r0
 8004412:	b29a      	uxth	r2, r3
 8004414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004418:	4917      	ldr	r1, [pc, #92]	; (8004478 <mqtt_incoming_data_cb+0x90>)
 800441a:	4818      	ldr	r0, [pc, #96]	; (800447c <mqtt_incoming_data_cb+0x94>)
 800441c:	f00a fdcd 	bl	800efba <HAL_UART_Transmit>

	if (flags & MQTT_DATA_FLAG_LAST) {
 8004420:	797b      	ldrb	r3, [r7, #5]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d010      	beq.n	800444c <mqtt_incoming_data_cb+0x64>

		/* Call function or do action depending on reference, in this case inpub_id */
		//if (inpub_id != 0) {
			/* Don't trust the publisher, check zero termination */
			//if (data[len - 1] != 0) {
				sprintf(buffer, "mqtt_incoming_data_cb: %s\n\r",(const char*) data);
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	4914      	ldr	r1, [pc, #80]	; (8004480 <mqtt_incoming_data_cb+0x98>)
 800442e:	4812      	ldr	r0, [pc, #72]	; (8004478 <mqtt_incoming_data_cb+0x90>)
 8004430:	f022 fd96 	bl	8026f60 <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer),1000);
 8004434:	4810      	ldr	r0, [pc, #64]	; (8004478 <mqtt_incoming_data_cb+0x90>)
 8004436:	f7fb fed5 	bl	80001e4 <strlen>
 800443a:	4603      	mov	r3, r0
 800443c:	b29a      	uxth	r2, r3
 800443e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004442:	490d      	ldr	r1, [pc, #52]	; (8004478 <mqtt_incoming_data_cb+0x90>)
 8004444:	480d      	ldr	r0, [pc, #52]	; (800447c <mqtt_incoming_data_cb+0x94>)
 8004446:	f00a fdb8 	bl	800efba <HAL_UART_Transmit>
			} else {
				sprintf(buffer,"mqtt_incoming_data_cb: Ignoring payload...\n\r");
				HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer),1000);
			}
		}
 800444a:	e00e      	b.n	800446a <mqtt_incoming_data_cb+0x82>
				sprintf(buffer,"mqtt_incoming_data_cb: Ignoring payload...\n\r");
 800444c:	490d      	ldr	r1, [pc, #52]	; (8004484 <mqtt_incoming_data_cb+0x9c>)
 800444e:	480a      	ldr	r0, [pc, #40]	; (8004478 <mqtt_incoming_data_cb+0x90>)
 8004450:	f022 fd86 	bl	8026f60 <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer),1000);
 8004454:	4808      	ldr	r0, [pc, #32]	; (8004478 <mqtt_incoming_data_cb+0x90>)
 8004456:	f7fb fec5 	bl	80001e4 <strlen>
 800445a:	4603      	mov	r3, r0
 800445c:	b29a      	uxth	r2, r3
 800445e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004462:	4905      	ldr	r1, [pc, #20]	; (8004478 <mqtt_incoming_data_cb+0x90>)
 8004464:	4805      	ldr	r0, [pc, #20]	; (800447c <mqtt_incoming_data_cb+0x94>)
 8004466:	f00a fda8 	bl	800efba <HAL_UART_Transmit>
		}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	0802b898 	.word	0x0802b898
 8004478:	200072a4 	.word	0x200072a4
 800447c:	2000878c 	.word	0x2000878c
 8004480:	0802b8cc 	.word	0x0802b8cc
 8004484:	0802b8e8 	.word	0x0802b8e8

08004488 <mqtt_sub_request_cb>:
//	}
//}

static void mqtt_sub_request_cb(void *arg, err_t result) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
	/* Just print the result code here for simplicity,
	 normal behaviour would be to take some action if subscribe fails like
	 notifying user, retry subscribe or disconnect from server */
	sprintf(buffer, "Subscribe result: %d\n\r", result);
 8004494:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004498:	461a      	mov	r2, r3
 800449a:	4909      	ldr	r1, [pc, #36]	; (80044c0 <mqtt_sub_request_cb+0x38>)
 800449c:	4809      	ldr	r0, [pc, #36]	; (80044c4 <mqtt_sub_request_cb+0x3c>)
 800449e:	f022 fd5f 	bl	8026f60 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), 1000);
 80044a2:	4808      	ldr	r0, [pc, #32]	; (80044c4 <mqtt_sub_request_cb+0x3c>)
 80044a4:	f7fb fe9e 	bl	80001e4 <strlen>
 80044a8:	4603      	mov	r3, r0
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044b0:	4904      	ldr	r1, [pc, #16]	; (80044c4 <mqtt_sub_request_cb+0x3c>)
 80044b2:	4805      	ldr	r0, [pc, #20]	; (80044c8 <mqtt_sub_request_cb+0x40>)
 80044b4:	f00a fd81 	bl	800efba <HAL_UART_Transmit>

}
 80044b8:	bf00      	nop
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	0802b918 	.word	0x0802b918
 80044c4:	200072a4 	.word	0x200072a4
 80044c8:	2000878c 	.word	0x2000878c

080044cc <mqtt_connection_cb>:

static void mqtt_connection_cb(mqtt_client_t *client, void *arg,mqtt_connection_status_t status) {
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	4613      	mov	r3, r2
 80044d8:	80fb      	strh	r3, [r7, #6]
	const char *topico = arg;
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	617b      	str	r3, [r7, #20]
	err_t err;
	if (status == MQTT_CONNECT_ACCEPTED) {
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d137      	bne.n	8004554 <mqtt_connection_cb+0x88>
		sprintf(buffer, "mqtt_connection_cb: Successfully connected\n");
 80044e4:	4927      	ldr	r1, [pc, #156]	; (8004584 <mqtt_connection_cb+0xb8>)
 80044e6:	4828      	ldr	r0, [pc, #160]	; (8004588 <mqtt_connection_cb+0xbc>)
 80044e8:	f022 fd3a 	bl	8026f60 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), 1000);
 80044ec:	4826      	ldr	r0, [pc, #152]	; (8004588 <mqtt_connection_cb+0xbc>)
 80044ee:	f7fb fe79 	bl	80001e4 <strlen>
 80044f2:	4603      	mov	r3, r0
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044fa:	4923      	ldr	r1, [pc, #140]	; (8004588 <mqtt_connection_cb+0xbc>)
 80044fc:	4823      	ldr	r0, [pc, #140]	; (800458c <mqtt_connection_cb+0xc0>)
 80044fe:	f00a fd5c 	bl	800efba <HAL_UART_Transmit>

		/* Setup callback for incoming publish requests */
		mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb,
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	4a22      	ldr	r2, [pc, #136]	; (8004590 <mqtt_connection_cb+0xc4>)
 8004506:	4923      	ldr	r1, [pc, #140]	; (8004594 <mqtt_connection_cb+0xc8>)
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f015 fe3b 	bl	801a184 <mqtt_set_inpub_callback>
				mqtt_incoming_data_cb, arg);

		/* Subscribe to a topic named "placa" with QoS level 0, call mqtt_sub_request_cb with result */
		err = mqtt_subscribe(client, "test", 0, mqtt_sub_request_cb, arg);
 800450e:	2301      	movs	r3, #1
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	4b20      	ldr	r3, [pc, #128]	; (8004598 <mqtt_connection_cb+0xcc>)
 8004518:	2200      	movs	r2, #0
 800451a:	4920      	ldr	r1, [pc, #128]	; (800459c <mqtt_connection_cb+0xd0>)
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f015 fd5b 	bl	8019fd8 <mqtt_sub_unsub>
 8004522:	4603      	mov	r3, r0
 8004524:	74fb      	strb	r3, [r7, #19]

		if (err != ERR_OK) {
 8004526:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d026      	beq.n	800457c <mqtt_connection_cb+0xb0>
			sprintf(buffer, "mqtt_subscribe return: %d\n", err);
 800452e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004532:	461a      	mov	r2, r3
 8004534:	491a      	ldr	r1, [pc, #104]	; (80045a0 <mqtt_connection_cb+0xd4>)
 8004536:	4814      	ldr	r0, [pc, #80]	; (8004588 <mqtt_connection_cb+0xbc>)
 8004538:	f022 fd12 	bl	8026f60 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), 1000);
 800453c:	4812      	ldr	r0, [pc, #72]	; (8004588 <mqtt_connection_cb+0xbc>)
 800453e:	f7fb fe51 	bl	80001e4 <strlen>
 8004542:	4603      	mov	r3, r0
 8004544:	b29a      	uxth	r2, r3
 8004546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800454a:	490f      	ldr	r1, [pc, #60]	; (8004588 <mqtt_connection_cb+0xbc>)
 800454c:	480f      	ldr	r0, [pc, #60]	; (800458c <mqtt_connection_cb+0xc0>)
 800454e:	f00a fd34 	bl	800efba <HAL_UART_Transmit>

		/* Its more nice to be connected, so try to reconnect */
		example_do_connect(client);
	}

}
 8004552:	e013      	b.n	800457c <mqtt_connection_cb+0xb0>
		sprintf(buffer, "mqtt_connection_cb: Disconnected, reason: %d\n",
 8004554:	88fb      	ldrh	r3, [r7, #6]
 8004556:	461a      	mov	r2, r3
 8004558:	4912      	ldr	r1, [pc, #72]	; (80045a4 <mqtt_connection_cb+0xd8>)
 800455a:	480b      	ldr	r0, [pc, #44]	; (8004588 <mqtt_connection_cb+0xbc>)
 800455c:	f022 fd00 	bl	8026f60 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), 1000);
 8004560:	4809      	ldr	r0, [pc, #36]	; (8004588 <mqtt_connection_cb+0xbc>)
 8004562:	f7fb fe3f 	bl	80001e4 <strlen>
 8004566:	4603      	mov	r3, r0
 8004568:	b29a      	uxth	r2, r3
 800456a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800456e:	4906      	ldr	r1, [pc, #24]	; (8004588 <mqtt_connection_cb+0xbc>)
 8004570:	4806      	ldr	r0, [pc, #24]	; (800458c <mqtt_connection_cb+0xc0>)
 8004572:	f00a fd22 	bl	800efba <HAL_UART_Transmit>
		example_do_connect(client);
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f816 	bl	80045a8 <example_do_connect>
}
 800457c:	bf00      	nop
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	0802b930 	.word	0x0802b930
 8004588:	200072a4 	.word	0x200072a4
 800458c:	2000878c 	.word	0x2000878c
 8004590:	080043e9 	.word	0x080043e9
 8004594:	08004371 	.word	0x08004371
 8004598:	08004489 	.word	0x08004489
 800459c:	0802b890 	.word	0x0802b890
 80045a0:	0802b95c 	.word	0x0802b95c
 80045a4:	0802b978 	.word	0x0802b978

080045a8 <example_do_connect>:

void example_do_connect(mqtt_client_t *client, const char *topic) {
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08e      	sub	sp, #56	; 0x38
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
	struct mqtt_connect_client_info_t ci;
	err_t err;

	/* Setup an empty client info structure */
	memset(&ci, 0, sizeof(ci));
 80045b2:	f107 0310 	add.w	r3, r7, #16
 80045b6:	221c      	movs	r2, #28
 80045b8:	2100      	movs	r1, #0
 80045ba:	4618      	mov	r0, r3
 80045bc:	f022 f81c 	bl	80265f8 <memset>

	/* Minimal amount of information required is client identifier, so set it here */
	ci.client_id = "Zerg";
 80045c0:	4b1b      	ldr	r3, [pc, #108]	; (8004630 <example_do_connect+0x88>)
 80045c2:	613b      	str	r3, [r7, #16]
	/* Initiate client and connect to server, if this fails immediately an error code is returned
	 otherwise mqtt_connection_cb will be called with connection result after attempting
	 to establish a connection with the server.
	 For now MQTT version 3.1.1 is always used */
	ip_addr_t mqttServerIP;
	IP4_ADDR(&mqttServerIP, 192, 168, 18, 100);
 80045c4:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <example_do_connect+0x8c>)
 80045c6:	60fb      	str	r3, [r7, #12]
//  err = mqtt_client_connect(client, &mqttServerIP, MQTT_PORT, mqtt_connection_cb, 0, &ci);
	err = mqtt_client_connect(client, &mqttServerIP, MQTT_PORT,mqtt_connection_cb, topic, &ci);
 80045c8:	f107 010c 	add.w	r1, r7, #12
 80045cc:	f107 0310 	add.w	r3, r7, #16
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	4b18      	ldr	r3, [pc, #96]	; (8004638 <example_do_connect+0x90>)
 80045d8:	f240 725b 	movw	r2, #1883	; 0x75b
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f015 fdff 	bl	801a1e0 <mqtt_client_connect>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	/* For now just print the result code if connection is ON. */
	if (err == ERR_ISCONN)
 80045e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80045ec:	f113 0f0a 	cmn.w	r3, #10
 80045f0:	d01a      	beq.n	8004628 <example_do_connect+0x80>
	{
		//sprintf(buffer, "MQTT connection already established. %d\n\r", err);
		//HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), 1000);
	} else if ((err != ERR_OK) && (err != ERR_ISCONN))
 80045f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d016      	beq.n	8004628 <example_do_connect+0x80>
 80045fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80045fe:	f113 0f0a 	cmn.w	r3, #10
 8004602:	d011      	beq.n	8004628 <example_do_connect+0x80>
	{/* For now just print the result code if something goes wrong */
		sprintf(buffer, "mqtt_connect return %d\n\r", err);
 8004604:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004608:	461a      	mov	r2, r3
 800460a:	490c      	ldr	r1, [pc, #48]	; (800463c <example_do_connect+0x94>)
 800460c:	480c      	ldr	r0, [pc, #48]	; (8004640 <example_do_connect+0x98>)
 800460e:	f022 fca7 	bl	8026f60 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), 1000);
 8004612:	480b      	ldr	r0, [pc, #44]	; (8004640 <example_do_connect+0x98>)
 8004614:	f7fb fde6 	bl	80001e4 <strlen>
 8004618:	4603      	mov	r3, r0
 800461a:	b29a      	uxth	r2, r3
 800461c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004620:	4907      	ldr	r1, [pc, #28]	; (8004640 <example_do_connect+0x98>)
 8004622:	4808      	ldr	r0, [pc, #32]	; (8004644 <example_do_connect+0x9c>)
 8004624:	f00a fcc9 	bl	800efba <HAL_UART_Transmit>
	} else {

	}
}
 8004628:	bf00      	nop
 800462a:	3730      	adds	r7, #48	; 0x30
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	0802b9a8 	.word	0x0802b9a8
 8004634:	6412a8c0 	.word	0x6412a8c0
 8004638:	080044cd 	.word	0x080044cd
 800463c:	0802b9b0 	.word	0x0802b9b0
 8004640:	200072a4 	.word	0x200072a4
 8004644:	2000878c 	.word	0x2000878c

08004648 <set_sntp_server_list>:
*        执行条件：无
*
* @retval: 无
*/
void set_sntp_server_list(void)
{
 8004648:	b5b0      	push	{r4, r5, r7, lr}
 800464a:	b08e      	sub	sp, #56	; 0x38
 800464c:	af00      	add	r7, sp, #0
	uint32_t server_list[SNTP_MAX_SERVERS] =	{
 800464e:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <set_sntp_server_list+0x58>)
 8004650:	f107 0408 	add.w	r4, r7, #8
 8004654:	461d      	mov	r5, r3
 8004656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800465a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800465c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800465e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
													0x820176CA,
													0x510176CA,
												};
	ip_addr_t sntp_server;

	for(int i = 0; i < SNTP_MAX_SERVERS; i++)
 8004666:	2300      	movs	r3, #0
 8004668:	637b      	str	r3, [r7, #52]	; 0x34
 800466a:	e011      	b.n	8004690 <set_sntp_server_list+0x48>
	{
		sntp_server.addr = server_list[i];
 800466c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004674:	4413      	add	r3, r2
 8004676:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800467a:	607b      	str	r3, [r7, #4]
		sntp_setserver(i, &sntp_server);  // 国家授时中心
 800467c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467e:	b2db      	uxtb	r3, r3
 8004680:	1d3a      	adds	r2, r7, #4
 8004682:	4611      	mov	r1, r2
 8004684:	4618      	mov	r0, r3
 8004686:	f016 fa61 	bl	801ab4c <sntp_setserver>
	for(int i = 0; i < SNTP_MAX_SERVERS; i++)
 800468a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468c:	3301      	adds	r3, #1
 800468e:	637b      	str	r3, [r7, #52]	; 0x34
 8004690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004692:	2b0a      	cmp	r3, #10
 8004694:	ddea      	ble.n	800466c <set_sntp_server_list+0x24>
	}
}
 8004696:	bf00      	nop
 8004698:	bf00      	nop
 800469a:	3738      	adds	r7, #56	; 0x38
 800469c:	46bd      	mov	sp, r7
 800469e:	bdb0      	pop	{r4, r5, r7, pc}
 80046a0:	0802ba00 	.word	0x0802ba00

080046a4 <bsp_sntp_init>:
*        执行条件：无
*
* @retval: 无
*/
void bsp_sntp_init(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
	//设置 SNTP 的获取方式 -> 使用向服务器获取方式
	sntp_setoperatingmode(SNTP_OPMODE_POLL);
 80046a8:	2000      	movs	r0, #0
 80046aa:	f016 fa21 	bl	801aaf0 <sntp_setoperatingmode>

	//SNTP 初始化
	sntp_init();
 80046ae:	f016 f9b7 	bl	801aa20 <sntp_init>

	//加入授时中心的IP信息
	set_sntp_server_list();
 80046b2:	f7ff ffc9 	bl	8004648 <set_sntp_server_list>
}
 80046b6:	bf00      	nop
 80046b8:	bd80      	pop	{r7, pc}

080046ba <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80046c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80046c6:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d013      	beq.n	80046fa <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80046d2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80046d6:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80046da:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00b      	beq.n	80046fa <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80046e2:	e000      	b.n	80046e6 <ITM_SendChar+0x2c>
    {
      __NOP();
 80046e4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80046e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f9      	beq.n	80046e4 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80046f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80046fa:	687b      	ldr	r3, [r7, #4]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <_write>:
void StartOutputTask(void const * argument);
void StartConfigTask(void const * argument);
void StartInputTask(void const * argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 50);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	b29a      	uxth	r2, r3
 8004718:	2332      	movs	r3, #50	; 0x32
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	480c      	ldr	r0, [pc, #48]	; (8004750 <_write+0x48>)
 800471e:	f00a fc4c 	bl	800efba <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	e009      	b.n	800473c <_write+0x34>
		ITM_SendChar(*ptr++);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	60ba      	str	r2, [r7, #8]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff ffc2 	bl	80046ba <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	3301      	adds	r3, #1
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	429a      	cmp	r2, r3
 8004742:	dbf1      	blt.n	8004728 <_write+0x20>
	}
	return len;
 8004744:	687b      	ldr	r3, [r7, #4]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	2000878c 	.word	0x2000878c

08004754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004754:	b5b0      	push	{r4, r5, r7, lr}
 8004756:	b0b2      	sub	sp, #200	; 0xc8
 8004758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800475a:	f006 fe67 	bl	800b42c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800475e:	f000 f8b9 	bl	80048d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004762:	f000 f9db 	bl	8004b1c <MX_GPIO_Init>
  MX_RTC_Init();
 8004766:	f000 f921 	bl	80049ac <MX_RTC_Init>
  MX_USART3_UART_Init();
 800476a:	f000 f9ad 	bl	8004ac8 <MX_USART3_UART_Init>
//  MX_FATFS_Init();
  MX_SPI1_Init();
 800476e:	f000 f975 	bl	8004a5c <MX_SPI1_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue */
  osMessageQStaticDef(myQueue, 16, struct data_pin_t, myQueueBuffer, &myQueueControlBlock);
 8004772:	4b48      	ldr	r3, [pc, #288]	; (8004894 <main+0x140>)
 8004774:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8004778:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800477a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueHandle = osMessageCreate(osMessageQ(myQueue), NULL);
 800477e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004782:	2100      	movs	r1, #0
 8004784:	4618      	mov	r0, r3
 8004786:	f00f fda8 	bl	80142da <osMessageCreate>
 800478a:	4603      	mov	r3, r0
 800478c:	4a42      	ldr	r2, [pc, #264]	; (8004898 <main+0x144>)
 800478e:	6013      	str	r3, [r2, #0]

  /* definition and creation of usbQueue */
  osMessageQStaticDef(usbQueue, 16, uint16_t, usbQueueBuffer, &usbQueueControlBlock);
 8004790:	4b42      	ldr	r3, [pc, #264]	; (800489c <main+0x148>)
 8004792:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8004796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  usbQueueHandle = osMessageCreate(osMessageQ(usbQueue), NULL);
 800479c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80047a0:	2100      	movs	r1, #0
 80047a2:	4618      	mov	r0, r3
 80047a4:	f00f fd99 	bl	80142da <osMessageCreate>
 80047a8:	4603      	mov	r3, r0
 80047aa:	4a3d      	ldr	r2, [pc, #244]	; (80048a0 <main+0x14c>)
 80047ac:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of WebServerTask */
  osThreadStaticDef(WebServerTask, StartWebServerTask, osPriorityNormal, 0, 2048, WebServerTaskBuffer, &WebServerTaskControlBlock);
 80047ae:	4b3d      	ldr	r3, [pc, #244]	; (80048a4 <main+0x150>)
 80047b0:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80047b4:	461d      	mov	r5, r3
 80047b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80047be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WebServerTaskHandle = osThreadCreate(osThread(WebServerTask), NULL);
 80047c2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80047c6:	2100      	movs	r1, #0
 80047c8:	4618      	mov	r0, r3
 80047ca:	f00f fbc0 	bl	8013f4e <osThreadCreate>
 80047ce:	4603      	mov	r3, r0
 80047d0:	4a35      	ldr	r2, [pc, #212]	; (80048a8 <main+0x154>)
 80047d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of SSIDTask */
  osThreadStaticDef(SSIDTask, StartSSIDTask, osPriorityNormal, 0, 256, SSIDTaskBuffer, &SSIDTaskControlBlock);
 80047d4:	4b35      	ldr	r3, [pc, #212]	; (80048ac <main+0x158>)
 80047d6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80047da:	461d      	mov	r5, r3
 80047dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80047e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SSIDTaskHandle = osThreadCreate(osThread(SSIDTask), NULL);
 80047e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80047ec:	2100      	movs	r1, #0
 80047ee:	4618      	mov	r0, r3
 80047f0:	f00f fbad 	bl	8013f4e <osThreadCreate>
 80047f4:	4603      	mov	r3, r0
 80047f6:	4a2e      	ldr	r2, [pc, #184]	; (80048b0 <main+0x15c>)
 80047f8:	6013      	str	r3, [r2, #0]

  /* definition and creation of CronTask */
  osThreadStaticDef(CronTask, StartCronTask, osPriorityNormal, 0, 512, CronTaskBuffer, &CronTaskControlBlock);
 80047fa:	4b2e      	ldr	r3, [pc, #184]	; (80048b4 <main+0x160>)
 80047fc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8004800:	461d      	mov	r5, r3
 8004802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004806:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800480a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CronTaskHandle = osThreadCreate(osThread(CronTask), NULL);
 800480e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004812:	2100      	movs	r1, #0
 8004814:	4618      	mov	r0, r3
 8004816:	f00f fb9a 	bl	8013f4e <osThreadCreate>
 800481a:	4603      	mov	r3, r0
 800481c:	4a26      	ldr	r2, [pc, #152]	; (80048b8 <main+0x164>)
 800481e:	6013      	str	r3, [r2, #0]

  /* definition and creation of OutputTask */
  osThreadStaticDef(OutputTask, StartOutputTask, osPriorityNormal, 0, 512, OutputTaskBuffer, &OutputTaskControlBlock);
 8004820:	4b26      	ldr	r3, [pc, #152]	; (80048bc <main+0x168>)
 8004822:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004826:	461d      	mov	r5, r3
 8004828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800482a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800482c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004830:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OutputTaskHandle = osThreadCreate(osThread(OutputTask), NULL);
 8004834:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004838:	2100      	movs	r1, #0
 800483a:	4618      	mov	r0, r3
 800483c:	f00f fb87 	bl	8013f4e <osThreadCreate>
 8004840:	4603      	mov	r3, r0
 8004842:	4a1f      	ldr	r2, [pc, #124]	; (80048c0 <main+0x16c>)
 8004844:	6013      	str	r3, [r2, #0]

  /* definition and creation of ConfigTask */
  osThreadStaticDef(ConfigTask, StartConfigTask, osPriorityNormal, 0, 512, ConfigTaskBuffer, &ConfigTaskControlBlock);
 8004846:	4b1f      	ldr	r3, [pc, #124]	; (80048c4 <main+0x170>)
 8004848:	f107 041c 	add.w	r4, r7, #28
 800484c:	461d      	mov	r5, r3
 800484e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004852:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004856:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ConfigTaskHandle = osThreadCreate(osThread(ConfigTask), NULL);
 800485a:	f107 031c 	add.w	r3, r7, #28
 800485e:	2100      	movs	r1, #0
 8004860:	4618      	mov	r0, r3
 8004862:	f00f fb74 	bl	8013f4e <osThreadCreate>
 8004866:	4603      	mov	r3, r0
 8004868:	4a17      	ldr	r2, [pc, #92]	; (80048c8 <main+0x174>)
 800486a:	6013      	str	r3, [r2, #0]

  /* definition and creation of InputTask */
  osThreadStaticDef(InputTask, StartInputTask, osPriorityNormal, 0, 512, InputTaskBuffer, &InputTaskControlBlock);
 800486c:	4b17      	ldr	r3, [pc, #92]	; (80048cc <main+0x178>)
 800486e:	463c      	mov	r4, r7
 8004870:	461d      	mov	r5, r3
 8004872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004876:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800487a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InputTaskHandle = osThreadCreate(osThread(InputTask), NULL);
 800487e:	463b      	mov	r3, r7
 8004880:	2100      	movs	r1, #0
 8004882:	4618      	mov	r0, r3
 8004884:	f00f fb63 	bl	8013f4e <osThreadCreate>
 8004888:	4603      	mov	r3, r0
 800488a:	4a11      	ldr	r2, [pc, #68]	; (80048d0 <main+0x17c>)
 800488c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800488e:	f00f fb47 	bl	8013f20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004892:	e7fe      	b.n	8004892 <main+0x13e>
 8004894:	0802ba78 	.word	0x0802ba78
 8004898:	2000c31c 	.word	0x2000c31c
 800489c:	0802ba88 	.word	0x0802ba88
 80048a0:	2000d154 	.word	0x2000d154
 80048a4:	0802ba98 	.word	0x0802ba98
 80048a8:	2000d160 	.word	0x2000d160
 80048ac:	0802bab4 	.word	0x0802bab4
 80048b0:	2000a0c4 	.word	0x2000a0c4
 80048b4:	0802bad0 	.word	0x0802bad0
 80048b8:	2000a0c8 	.word	0x2000a0c8
 80048bc:	0802baec 	.word	0x0802baec
 80048c0:	2000a238 	.word	0x2000a238
 80048c4:	0802bb08 	.word	0x0802bb08
 80048c8:	2000a234 	.word	0x2000a234
 80048cc:	0802bb24 	.word	0x0802bb24
 80048d0:	2000a240 	.word	0x2000a240

080048d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b094      	sub	sp, #80	; 0x50
 80048d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048da:	f107 0320 	add.w	r3, r7, #32
 80048de:	2230      	movs	r2, #48	; 0x30
 80048e0:	2100      	movs	r1, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f021 fe88 	bl	80265f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048e8:	f107 030c 	add.w	r3, r7, #12
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	605a      	str	r2, [r3, #4]
 80048f2:	609a      	str	r2, [r3, #8]
 80048f4:	60da      	str	r2, [r3, #12]
 80048f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048f8:	2300      	movs	r3, #0
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	4b29      	ldr	r3, [pc, #164]	; (80049a4 <SystemClock_Config+0xd0>)
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	4a28      	ldr	r2, [pc, #160]	; (80049a4 <SystemClock_Config+0xd0>)
 8004902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004906:	6413      	str	r3, [r2, #64]	; 0x40
 8004908:	4b26      	ldr	r3, [pc, #152]	; (80049a4 <SystemClock_Config+0xd0>)
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004914:	2300      	movs	r3, #0
 8004916:	607b      	str	r3, [r7, #4]
 8004918:	4b23      	ldr	r3, [pc, #140]	; (80049a8 <SystemClock_Config+0xd4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a22      	ldr	r2, [pc, #136]	; (80049a8 <SystemClock_Config+0xd4>)
 800491e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	4b20      	ldr	r3, [pc, #128]	; (80049a8 <SystemClock_Config+0xd4>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800492c:	607b      	str	r3, [r7, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004930:	2309      	movs	r3, #9
 8004932:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004934:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800493a:	2301      	movs	r3, #1
 800493c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800493e:	2302      	movs	r3, #2
 8004940:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004942:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004948:	2304      	movs	r3, #4
 800494a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800494c:	23a8      	movs	r3, #168	; 0xa8
 800494e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004950:	2302      	movs	r3, #2
 8004952:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004954:	2307      	movs	r3, #7
 8004956:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004958:	f107 0320 	add.w	r3, r7, #32
 800495c:	4618      	mov	r0, r3
 800495e:	f008 fb37 	bl	800cfd0 <HAL_RCC_OscConfig>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004968:	f000 fdda 	bl	8005520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800496c:	230f      	movs	r3, #15
 800496e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004970:	2302      	movs	r3, #2
 8004972:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004978:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800497c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800497e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004982:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004984:	f107 030c 	add.w	r3, r7, #12
 8004988:	2105      	movs	r1, #5
 800498a:	4618      	mov	r0, r3
 800498c:	f008 fd98 	bl	800d4c0 <HAL_RCC_ClockConfig>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004996:	f000 fdc3 	bl	8005520 <Error_Handler>
  }
}
 800499a:	bf00      	nop
 800499c:	3750      	adds	r7, #80	; 0x50
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40023800 	.word	0x40023800
 80049a8:	40007000 	.word	0x40007000

080049ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80049b0:	4b26      	ldr	r3, [pc, #152]	; (8004a4c <MX_RTC_Init+0xa0>)
 80049b2:	4a27      	ldr	r2, [pc, #156]	; (8004a50 <MX_RTC_Init+0xa4>)
 80049b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80049b6:	4b25      	ldr	r3, [pc, #148]	; (8004a4c <MX_RTC_Init+0xa0>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80049bc:	4b23      	ldr	r3, [pc, #140]	; (8004a4c <MX_RTC_Init+0xa0>)
 80049be:	227f      	movs	r2, #127	; 0x7f
 80049c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80049c2:	4b22      	ldr	r3, [pc, #136]	; (8004a4c <MX_RTC_Init+0xa0>)
 80049c4:	22ff      	movs	r2, #255	; 0xff
 80049c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80049c8:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <MX_RTC_Init+0xa0>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80049ce:	4b1f      	ldr	r3, [pc, #124]	; (8004a4c <MX_RTC_Init+0xa0>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80049d4:	4b1d      	ldr	r3, [pc, #116]	; (8004a4c <MX_RTC_Init+0xa0>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80049da:	481c      	ldr	r0, [pc, #112]	; (8004a4c <MX_RTC_Init+0xa0>)
 80049dc:	f009 f880 	bl	800dae0 <HAL_RTC_Init>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80049e6:	f000 fd9b 	bl	8005520 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80049ea:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <MX_RTC_Init+0xa8>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80049f0:	4b18      	ldr	r3, [pc, #96]	; (8004a54 <MX_RTC_Init+0xa8>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80049f6:	4b17      	ldr	r3, [pc, #92]	; (8004a54 <MX_RTC_Init+0xa8>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80049fc:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <MX_RTC_Init+0xa8>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004a02:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <MX_RTC_Init+0xa8>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004a08:	2201      	movs	r2, #1
 8004a0a:	4912      	ldr	r1, [pc, #72]	; (8004a54 <MX_RTC_Init+0xa8>)
 8004a0c:	480f      	ldr	r0, [pc, #60]	; (8004a4c <MX_RTC_Init+0xa0>)
 8004a0e:	f009 f8f8 	bl	800dc02 <HAL_RTC_SetTime>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <MX_RTC_Init+0x70>
  {
    Error_Handler();
 8004a18:	f000 fd82 	bl	8005520 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <MX_RTC_Init+0xac>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8004a22:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <MX_RTC_Init+0xac>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8004a28:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <MX_RTC_Init+0xac>)
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8004a2e:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <MX_RTC_Init+0xac>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004a34:	2201      	movs	r2, #1
 8004a36:	4908      	ldr	r1, [pc, #32]	; (8004a58 <MX_RTC_Init+0xac>)
 8004a38:	4804      	ldr	r0, [pc, #16]	; (8004a4c <MX_RTC_Init+0xa0>)
 8004a3a:	f009 f9fd 	bl	800de38 <HAL_RTC_SetDate>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <MX_RTC_Init+0x9c>
  {
    Error_Handler();
 8004a44:	f000 fd6c 	bl	8005520 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004a48:	bf00      	nop
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	2000a244 	.word	0x2000a244
 8004a50:	40002800 	.word	0x40002800
 8004a54:	200005a8 	.word	0x200005a8
 8004a58:	200005bc 	.word	0x200005bc

08004a5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004a60:	4b17      	ldr	r3, [pc, #92]	; (8004ac0 <MX_SPI1_Init+0x64>)
 8004a62:	4a18      	ldr	r2, [pc, #96]	; (8004ac4 <MX_SPI1_Init+0x68>)
 8004a64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004a66:	4b16      	ldr	r3, [pc, #88]	; (8004ac0 <MX_SPI1_Init+0x64>)
 8004a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004a6e:	4b14      	ldr	r3, [pc, #80]	; (8004ac0 <MX_SPI1_Init+0x64>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a74:	4b12      	ldr	r3, [pc, #72]	; (8004ac0 <MX_SPI1_Init+0x64>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a7a:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <MX_SPI1_Init+0x64>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a80:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <MX_SPI1_Init+0x64>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004a86:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <MX_SPI1_Init+0x64>)
 8004a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004a8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <MX_SPI1_Init+0x64>)
 8004a90:	2218      	movs	r2, #24
 8004a92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a94:	4b0a      	ldr	r3, [pc, #40]	; (8004ac0 <MX_SPI1_Init+0x64>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a9a:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <MX_SPI1_Init+0x64>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aa0:	4b07      	ldr	r3, [pc, #28]	; (8004ac0 <MX_SPI1_Init+0x64>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004aa6:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <MX_SPI1_Init+0x64>)
 8004aa8:	220a      	movs	r2, #10
 8004aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004aac:	4804      	ldr	r0, [pc, #16]	; (8004ac0 <MX_SPI1_Init+0x64>)
 8004aae:	f009 fb49 	bl	800e144 <HAL_SPI_Init>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004ab8:	f000 fd32 	bl	8005520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004abc:	bf00      	nop
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	2000cfd4 	.word	0x2000cfd4
 8004ac4:	40013000 	.word	0x40013000

08004ac8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004acc:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <MX_USART3_UART_Init+0x4c>)
 8004ace:	4a12      	ldr	r2, [pc, #72]	; (8004b18 <MX_USART3_UART_Init+0x50>)
 8004ad0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004ad2:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <MX_USART3_UART_Init+0x4c>)
 8004ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ad8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004ada:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <MX_USART3_UART_Init+0x4c>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004ae0:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <MX_USART3_UART_Init+0x4c>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <MX_USART3_UART_Init+0x4c>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004aec:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <MX_USART3_UART_Init+0x4c>)
 8004aee:	220c      	movs	r2, #12
 8004af0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004af2:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <MX_USART3_UART_Init+0x4c>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004af8:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <MX_USART3_UART_Init+0x4c>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004afe:	4805      	ldr	r0, [pc, #20]	; (8004b14 <MX_USART3_UART_Init+0x4c>)
 8004b00:	f00a fa0e 	bl	800ef20 <HAL_UART_Init>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004b0a:	f000 fd09 	bl	8005520 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004b0e:	bf00      	nop
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	2000878c 	.word	0x2000878c
 8004b18:	40004800 	.word	0x40004800

08004b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	; 0x28
 8004b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b22:	f107 0314 	add.w	r3, r7, #20
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	605a      	str	r2, [r3, #4]
 8004b2c:	609a      	str	r2, [r3, #8]
 8004b2e:	60da      	str	r2, [r3, #12]
 8004b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b32:	2300      	movs	r3, #0
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	4b2d      	ldr	r3, [pc, #180]	; (8004bec <MX_GPIO_Init+0xd0>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	4a2c      	ldr	r2, [pc, #176]	; (8004bec <MX_GPIO_Init+0xd0>)
 8004b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b40:	6313      	str	r3, [r2, #48]	; 0x30
 8004b42:	4b2a      	ldr	r3, [pc, #168]	; (8004bec <MX_GPIO_Init+0xd0>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	4b26      	ldr	r3, [pc, #152]	; (8004bec <MX_GPIO_Init+0xd0>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	4a25      	ldr	r2, [pc, #148]	; (8004bec <MX_GPIO_Init+0xd0>)
 8004b58:	f043 0304 	orr.w	r3, r3, #4
 8004b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b5e:	4b23      	ldr	r3, [pc, #140]	; (8004bec <MX_GPIO_Init+0xd0>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	4b1f      	ldr	r3, [pc, #124]	; (8004bec <MX_GPIO_Init+0xd0>)
 8004b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b72:	4a1e      	ldr	r2, [pc, #120]	; (8004bec <MX_GPIO_Init+0xd0>)
 8004b74:	f043 0301 	orr.w	r3, r3, #1
 8004b78:	6313      	str	r3, [r2, #48]	; 0x30
 8004b7a:	4b1c      	ldr	r3, [pc, #112]	; (8004bec <MX_GPIO_Init+0xd0>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	60bb      	str	r3, [r7, #8]
 8004b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b86:	2300      	movs	r3, #0
 8004b88:	607b      	str	r3, [r7, #4]
 8004b8a:	4b18      	ldr	r3, [pc, #96]	; (8004bec <MX_GPIO_Init+0xd0>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	4a17      	ldr	r2, [pc, #92]	; (8004bec <MX_GPIO_Init+0xd0>)
 8004b90:	f043 0302 	orr.w	r3, r3, #2
 8004b94:	6313      	str	r3, [r2, #48]	; 0x30
 8004b96:	4b15      	ldr	r3, [pc, #84]	; (8004bec <MX_GPIO_Init+0xd0>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	607b      	str	r3, [r7, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	603b      	str	r3, [r7, #0]
 8004ba6:	4b11      	ldr	r3, [pc, #68]	; (8004bec <MX_GPIO_Init+0xd0>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	4a10      	ldr	r2, [pc, #64]	; (8004bec <MX_GPIO_Init+0xd0>)
 8004bac:	f043 0308 	orr.w	r3, r3, #8
 8004bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <MX_GPIO_Init+0xd0>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	2110      	movs	r1, #16
 8004bc2:	480b      	ldr	r0, [pc, #44]	; (8004bf0 <MX_GPIO_Init+0xd4>)
 8004bc4:	f008 f9d0 	bl	800cf68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8004bc8:	2310      	movs	r3, #16
 8004bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8004bd8:	f107 0314 	add.w	r3, r7, #20
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4804      	ldr	r0, [pc, #16]	; (8004bf0 <MX_GPIO_Init+0xd4>)
 8004be0:	f007 ff12 	bl	800ca08 <HAL_GPIO_Init>

}
 8004be4:	bf00      	nop
 8004be6:	3728      	adds	r7, #40	; 0x28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	40020000 	.word	0x40020000

08004bf4 <sntp_set_time>:
 *
 * @param [in]: timestamp obtained by sntp
 *
 * @retval: None
 */
void sntp_set_time(uint32_t sntp_time) {
 8004bf4:	b5b0      	push	{r4, r5, r7, lr}
 8004bf6:	b09c      	sub	sp, #112	; 0x70
 8004bf8:	af04      	add	r7, sp, #16
 8004bfa:	6078      	str	r0, [r7, #4]
	char buf[80];

	if (sntp_time == 0) {
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d103      	bne.n	8004c0a <sntp_set_time+0x16>
		printf("sntp_set_time: wrong!\n");
 8004c02:	4842      	ldr	r0, [pc, #264]	; (8004d0c <sntp_set_time+0x118>)
 8004c04:	f022 f8ae 	bl	8026d64 <puts>
 8004c08:	e07d      	b.n	8004d06 <sntp_set_time+0x112>
		return;
	}
	time_t rawtime = sntp_time;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	e9c7 2302 	strd	r2, r3, [r7, #8]

//	sntp_time += (2 * 60 * 60); ///Beijing time is 8 hours in East 8 District
	timez = localtime(&rawtime);
 8004c16:	f107 0308 	add.w	r3, r7, #8
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f021 fb8c 	bl	8026338 <localtime>
 8004c20:	4603      	mov	r3, r0
 8004c22:	4a3b      	ldr	r2, [pc, #236]	; (8004d10 <sntp_set_time+0x11c>)
 8004c24:	6013      	str	r3, [r2, #0]

	strftime(buf, sizeof(buf), "%a %Y-%m-%d %H:%M:%S %Z", timez);
 8004c26:	4b3a      	ldr	r3, [pc, #232]	; (8004d10 <sntp_set_time+0x11c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f107 0010 	add.w	r0, r7, #16
 8004c2e:	4a39      	ldr	r2, [pc, #228]	; (8004d14 <sntp_set_time+0x120>)
 8004c30:	2150      	movs	r1, #80	; 0x50
 8004c32:	f022 ff9d 	bl	8027b70 <strftime>
	printf("%s \n", buf);
 8004c36:	f107 0310 	add.w	r3, r7, #16
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4836      	ldr	r0, [pc, #216]	; (8004d18 <sntp_set_time+0x124>)
 8004c3e:	f022 f80b 	bl	8026c58 <iprintf>
	/*
	 * Set the time of RTC
	 */
	sTime.Hours = timez->tm_hour;
 8004c42:	4b33      	ldr	r3, [pc, #204]	; (8004d10 <sntp_set_time+0x11c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	4b34      	ldr	r3, [pc, #208]	; (8004d1c <sntp_set_time+0x128>)
 8004c4c:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = timez->tm_min;
 8004c4e:	4b30      	ldr	r3, [pc, #192]	; (8004d10 <sntp_set_time+0x11c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	4b31      	ldr	r3, [pc, #196]	; (8004d1c <sntp_set_time+0x128>)
 8004c58:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = timez->tm_sec;
 8004c5a:	4b2d      	ldr	r3, [pc, #180]	; (8004d10 <sntp_set_time+0x11c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	4b2e      	ldr	r3, [pc, #184]	; (8004d1c <sntp_set_time+0x128>)
 8004c64:	709a      	strb	r2, [r3, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004c66:	4b2d      	ldr	r3, [pc, #180]	; (8004d1c <sntp_set_time+0x128>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004c6c:	4b2b      	ldr	r3, [pc, #172]	; (8004d1c <sntp_set_time+0x128>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8004c72:	2200      	movs	r2, #0
 8004c74:	4929      	ldr	r1, [pc, #164]	; (8004d1c <sntp_set_time+0x128>)
 8004c76:	482a      	ldr	r0, [pc, #168]	; (8004d20 <sntp_set_time+0x12c>)
 8004c78:	f008 ffc3 	bl	800dc02 <HAL_RTC_SetTime>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <sntp_set_time+0x92>
		Error_Handler();
 8004c82:	f000 fc4d 	bl	8005520 <Error_Handler>
	}

	/*
	 * Set the date of RTC
	 */
	sDate.WeekDay = timez->tm_wday;
 8004c86:	4b22      	ldr	r3, [pc, #136]	; (8004d10 <sntp_set_time+0x11c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	4b25      	ldr	r3, [pc, #148]	; (8004d24 <sntp_set_time+0x130>)
 8004c90:	701a      	strb	r2, [r3, #0]
	sDate.Month = (timez->tm_mon) + 1;
 8004c92:	4b1f      	ldr	r3, [pc, #124]	; (8004d10 <sntp_set_time+0x11c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	4b21      	ldr	r3, [pc, #132]	; (8004d24 <sntp_set_time+0x130>)
 8004ca0:	705a      	strb	r2, [r3, #1]
	sDate.Date = timez->tm_mday;
 8004ca2:	4b1b      	ldr	r3, [pc, #108]	; (8004d10 <sntp_set_time+0x11c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	4b1e      	ldr	r3, [pc, #120]	; (8004d24 <sntp_set_time+0x130>)
 8004cac:	709a      	strb	r2, [r3, #2]
	sDate.Year = (timez->tm_year) - 100;
 8004cae:	4b18      	ldr	r3, [pc, #96]	; (8004d10 <sntp_set_time+0x11c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	3b64      	subs	r3, #100	; 0x64
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	4b1a      	ldr	r3, [pc, #104]	; (8004d24 <sntp_set_time+0x130>)
 8004cbc:	70da      	strb	r2, [r3, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	4918      	ldr	r1, [pc, #96]	; (8004d24 <sntp_set_time+0x130>)
 8004cc2:	4817      	ldr	r0, [pc, #92]	; (8004d20 <sntp_set_time+0x12c>)
 8004cc4:	f009 f8b8 	bl	800de38 <HAL_RTC_SetDate>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <sntp_set_time+0xde>
		Error_Handler();
 8004cce:	f000 fc27 	bl	8005520 <Error_Handler>
	}

	printf("RTC time: 20%d-%02d-%02d %d:%d:%d\n", sDate.Year, sDate.Month,
 8004cd2:	4b14      	ldr	r3, [pc, #80]	; (8004d24 <sntp_set_time+0x130>)
 8004cd4:	78db      	ldrb	r3, [r3, #3]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	4b12      	ldr	r3, [pc, #72]	; (8004d24 <sntp_set_time+0x130>)
 8004cda:	785b      	ldrb	r3, [r3, #1]
 8004cdc:	461c      	mov	r4, r3
			sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8004cde:	4b11      	ldr	r3, [pc, #68]	; (8004d24 <sntp_set_time+0x130>)
 8004ce0:	789b      	ldrb	r3, [r3, #2]
	printf("RTC time: 20%d-%02d-%02d %d:%d:%d\n", sDate.Year, sDate.Month,
 8004ce2:	461d      	mov	r5, r3
			sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8004ce4:	4b0d      	ldr	r3, [pc, #52]	; (8004d1c <sntp_set_time+0x128>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
	printf("RTC time: 20%d-%02d-%02d %d:%d:%d\n", sDate.Year, sDate.Month,
 8004ce8:	461a      	mov	r2, r3
			sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8004cea:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <sntp_set_time+0x128>)
 8004cec:	785b      	ldrb	r3, [r3, #1]
	printf("RTC time: 20%d-%02d-%02d %d:%d:%d\n", sDate.Year, sDate.Month,
 8004cee:	4619      	mov	r1, r3
			sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <sntp_set_time+0x128>)
 8004cf2:	789b      	ldrb	r3, [r3, #2]
	printf("RTC time: 20%d-%02d-%02d %d:%d:%d\n", sDate.Year, sDate.Month,
 8004cf4:	9302      	str	r3, [sp, #8]
 8004cf6:	9101      	str	r1, [sp, #4]
 8004cf8:	9200      	str	r2, [sp, #0]
 8004cfa:	462b      	mov	r3, r5
 8004cfc:	4622      	mov	r2, r4
 8004cfe:	4601      	mov	r1, r0
 8004d00:	4809      	ldr	r0, [pc, #36]	; (8004d28 <sntp_set_time+0x134>)
 8004d02:	f021 ffa9 	bl	8026c58 <iprintf>

//	printf("rtc_get_time: c03, test get = %lu\n", get_timestamp());

}
 8004d06:	3760      	adds	r7, #96	; 0x60
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8004d0c:	0802bb40 	.word	0x0802bb40
 8004d10:	2000d150 	.word	0x2000d150
 8004d14:	0802bb58 	.word	0x0802bb58
 8004d18:	0802bb70 	.word	0x0802bb70
 8004d1c:	200005a8 	.word	0x200005a8
 8004d20:	2000a244 	.word	0x2000a244
 8004d24:	200005bc 	.word	0x200005bc
 8004d28:	0802bb78 	.word	0x0802bb78

08004d2c <parse_string>:

	return ch;
}

// int pause  0 - до паузы 1 - после паузы
void parse_string(char *str, time_t cronetime_olds, int i, int pause) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08e      	sub	sp, #56	; 0x38
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	e9c7 2300 	strd	r2, r3, [r7]
	char *token;
	char *saveptr;
	int flag = 0;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	633b      	str	r3, [r7, #48]	; 0x30
	int k = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int pin = 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
	char delim[] = ";";
 8004d44:	233b      	movs	r3, #59	; 0x3b
 8004d46:	833b      	strh	r3, [r7, #24]

	// Разбиваем строку на элементы, разделенные точкой с запятой
	token = strtok_r(str, delim, &saveptr);
 8004d48:	f107 021c 	add.w	r2, r7, #28
 8004d4c:	f107 0318 	add.w	r3, r7, #24
 8004d50:	4619      	mov	r1, r3
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f023 fd96 	bl	8028884 <strtok_r>
 8004d58:	6378      	str	r0, [r7, #52]	; 0x34
	while (token != NULL) {
 8004d5a:	e060      	b.n	8004e1e <parse_string+0xf2>
		char *end_token;
		// Если нашли элемент "p", устанавливаем флаг

		if (token[0] == 'p') {
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b70      	cmp	r3, #112	; 0x70
 8004d62:	d115      	bne.n	8004d90 <parse_string+0x64>
			char *newstring = token + 1;
 8004d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d66:	3301      	adds	r3, #1
 8004d68:	623b      	str	r3, [r7, #32]
			//printf("Pause %d seconds\n", atoi(newstring));
			dbCrontxt[i].ptime = cronetime_olds + atoi(newstring);
 8004d6a:	6a38      	ldr	r0, [r7, #32]
 8004d6c:	f021 f9c6 	bl	80260fc <atoi>
 8004d70:	4603      	mov	r3, r0
 8004d72:	461a      	mov	r2, r3
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	441a      	add	r2, r3
 8004d78:	492d      	ldr	r1, [pc, #180]	; (8004e30 <parse_string+0x104>)
 8004d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d7c:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8004d80:	fb00 f303 	mul.w	r3, r0, r3
 8004d84:	440b      	add	r3, r1
 8004d86:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004d8a:	601a      	str	r2, [r3, #0]
			flag = 1;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	633b      	str	r3, [r7, #48]	; 0x30
		}
		// в зависимости от флага отправляем в очередь до или после паузы
		if (flag == pause) {
 8004d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d139      	bne.n	8004e0c <parse_string+0xe0>
			//printf("%s\n", token);

			//strcpy(data_pin.message, pch);

			char *token2 = strtok_r(token, ":", &end_token);
 8004d98:	f107 0314 	add.w	r3, r7, #20
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4925      	ldr	r1, [pc, #148]	; (8004e34 <parse_string+0x108>)
 8004da0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004da2:	f023 fd6f 	bl	8028884 <strtok_r>
 8004da6:	62b8      	str	r0, [r7, #40]	; 0x28
			//printf("pin = %d\n", atoi(token2));

			while (token2 != NULL) {
 8004da8:	e021      	b.n	8004dee <parse_string+0xc2>
				// тут отправляем в очередь
				if (k == 0) {
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <parse_string+0x9a>
					pin = atoi(token2);
 8004db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004db2:	f021 f9a3 	bl	80260fc <atoi>
 8004db6:	6278      	str	r0, [r7, #36]	; 0x24
					if(pin != 0){
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <parse_string+0x9a>
						data_pin.pin = pin-1;
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	4a1d      	ldr	r2, [pc, #116]	; (8004e38 <parse_string+0x10c>)
 8004dc4:	6013      	str	r3, [r2, #0]
					}
					//printf("pin = %s\n", token2);
				}
				if (k == 1) {
 8004dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d105      	bne.n	8004dd8 <parse_string+0xac>
					data_pin.action = atoi(token2);
 8004dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dce:	f021 f995 	bl	80260fc <atoi>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	4a18      	ldr	r2, [pc, #96]	; (8004e38 <parse_string+0x10c>)
 8004dd6:	6053      	str	r3, [r2, #4]
					//printf("action = %s\n", token2);
				}

				token2 = strtok_r(NULL, ":", &end_token);
 8004dd8:	f107 0314 	add.w	r3, r7, #20
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4915      	ldr	r1, [pc, #84]	; (8004e34 <parse_string+0x108>)
 8004de0:	2000      	movs	r0, #0
 8004de2:	f023 fd4f 	bl	8028884 <strtok_r>
 8004de6:	62b8      	str	r0, [r7, #40]	; 0x28
				k++;
 8004de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dea:	3301      	adds	r3, #1
 8004dec:	62fb      	str	r3, [r7, #44]	; 0x2c
			while (token2 != NULL) {
 8004dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1da      	bne.n	8004daa <parse_string+0x7e>
				// printf("action = %d\n", atoi(token2));
			}

			if(k == 2) {
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d106      	bne.n	8004e08 <parse_string+0xdc>
				xQueueSend(myQueueHandle, (void* ) &data_pin, 0);
 8004dfa:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <parse_string+0x110>)
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2200      	movs	r2, #0
 8004e02:	490d      	ldr	r1, [pc, #52]	; (8004e38 <parse_string+0x10c>)
 8004e04:	f00f fd80 	bl	8014908 <xQueueGenericSend>
			}
			k = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		token = strtok_r(NULL, delim, &saveptr);
 8004e0c:	f107 021c 	add.w	r2, r7, #28
 8004e10:	f107 0318 	add.w	r3, r7, #24
 8004e14:	4619      	mov	r1, r3
 8004e16:	2000      	movs	r0, #0
 8004e18:	f023 fd34 	bl	8028884 <strtok_r>
 8004e1c:	6378      	str	r0, [r7, #52]	; 0x34
	while (token != NULL) {
 8004e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d19b      	bne.n	8004d5c <parse_string+0x30>
	}
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop
 8004e28:	3738      	adds	r7, #56	; 0x38
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20005f6c 	.word	0x20005f6c
 8004e34:	0802bb9c 	.word	0x0802bb9c
 8004e38:	2000d02c 	.word	0x2000d02c
 8004e3c:	2000c31c 	.word	0x2000c31c

08004e40 <StartWebServerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartWebServerTask */
void StartWebServerTask(void const * argument)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
	ulTaskNotifyTake(0, portMAX_DELAY);  //
 8004e48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f011 fb31 	bl	80164b4 <ulTaskNotifyTake>
  MX_LWIP_Init();
 8004e52:	f00a fbeb 	bl	800f62c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
	http_server_init();
 8004e56:	f006 faa7 	bl	800b3a8 <http_server_init>
	osDelay(1000);
 8004e5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e5e:	f00f f8c2 	bl	8013fe6 <osDelay>

	client = mqtt_client_new();
 8004e62:	f015 f9b3 	bl	801a1cc <mqtt_client_new>
 8004e66:	4603      	mov	r3, r0
 8004e68:	4a08      	ldr	r2, [pc, #32]	; (8004e8c <StartWebServerTask+0x4c>)
 8004e6a:	6013      	str	r3, [r2, #0]
	example_do_connect(client, "Zagotovka"); // Подписались на топик"Zagotovka"
 8004e6c:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <StartWebServerTask+0x4c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4907      	ldr	r1, [pc, #28]	; (8004e90 <StartWebServerTask+0x50>)
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff fb98 	bl	80045a8 <example_do_connect>
	//sprintf(pacote, "Cool, MQTT-client is working!"); // Cобщение на 'MQTT' сервер.
	//example_publish(client, pacote); // Публикуем сообщение.

	osDelay(1000);
 8004e78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e7c:	f00f f8b3 	bl	8013fe6 <osDelay>
	bsp_sntp_init();
 8004e80:	f7ff fc10 	bl	80046a4 <bsp_sntp_init>

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8004e84:	2001      	movs	r0, #1
 8004e86:	f00f f8ae 	bl	8013fe6 <osDelay>
 8004e8a:	e7fb      	b.n	8004e84 <StartWebServerTask+0x44>
 8004e8c:	2000a23c 	.word	0x2000a23c
 8004e90:	0802bba0 	.word	0x0802bba0

08004e94 <StartSSIDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSSIDTask */
void StartSSIDTask(void const * argument)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSSIDTask */
	ulTaskNotifyTake(0, portMAX_DELAY);
 8004e9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	f011 fb07 	bl	80164b4 <ulTaskNotifyTake>
		//
		/* Infinite loop */
		for (;;) {
			if (strlen(randomSSID) != 0) {
 8004ea6:	4b0d      	ldr	r3, [pc, #52]	; (8004edc <StartSSIDTask+0x48>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d012      	beq.n	8004ed4 <StartSSIDTask+0x40>
				if (HAL_GetTick() - Ti >= 500000) {
 8004eae:	f006 faf3 	bl	800b498 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <StartSSIDTask+0x4c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	4a0a      	ldr	r2, [pc, #40]	; (8004ee4 <StartSSIDTask+0x50>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d909      	bls.n	8004ed4 <StartSSIDTask+0x40>
					Ti = HAL_GetTick();
 8004ec0:	f006 faea 	bl	800b498 <HAL_GetTick>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	4a06      	ldr	r2, [pc, #24]	; (8004ee0 <StartSSIDTask+0x4c>)
 8004ec8:	6013      	str	r3, [r2, #0]
					memset(&randomSSID, '\0', sizeof(randomSSID));
 8004eca:	221b      	movs	r2, #27
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4803      	ldr	r0, [pc, #12]	; (8004edc <StartSSIDTask+0x48>)
 8004ed0:	f021 fb92 	bl	80265f8 <memset>
				}
			}
			osDelay(1);
 8004ed4:	2001      	movs	r0, #1
 8004ed6:	f00f f886 	bl	8013fe6 <osDelay>
			if (strlen(randomSSID) != 0) {
 8004eda:	e7e4      	b.n	8004ea6 <StartSSIDTask+0x12>
 8004edc:	2000134c 	.word	0x2000134c
 8004ee0:	2000c318 	.word	0x2000c318
 8004ee4:	0007a11f 	.word	0x0007a11f

08004ee8 <StartCronTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCronTask */
void StartCronTask(void const * argument)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08e      	sub	sp, #56	; 0x38
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCronTask */
	ulTaskNotifyTake(0, portMAX_DELAY);
 8004ef0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	f011 fadd 	bl	80164b4 <ulTaskNotifyTake>

	static lwdtc_cron_ctx_t cron_ctxs[MAXSIZE];

	/* Define context for CRON, used to parse data to */
	size_t fail_index;
	printf("Count task %d\r\n", LWDTC_ARRAYSIZE(dbCrontxt));
 8004efa:	210a      	movs	r1, #10
 8004efc:	486f      	ldr	r0, [pc, #444]	; (80050bc <StartCronTask+0x1d4>)
 8004efe:	f021 feab 	bl	8026c58 <iprintf>
	/* Parse all cron strings */
	if (lwdtc_cron_parse_multi(cron_ctxs, dbCrontxt, MAXSIZE, &fail_index)
 8004f02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f06:	220a      	movs	r2, #10
 8004f08:	496d      	ldr	r1, [pc, #436]	; (80050c0 <StartCronTask+0x1d8>)
 8004f0a:	486e      	ldr	r0, [pc, #440]	; (80050c4 <StartCronTask+0x1dc>)
 8004f0c:	f7ff f928 	bl	8004160 <lwdtc_cron_parse_multi>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d004      	beq.n	8004f20 <StartCronTask+0x38>
			!= lwdtcOK) {
		printf("Failed to parse cron at index %d\r\n", (int) fail_index);
 8004f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f18:	4619      	mov	r1, r3
 8004f1a:	486b      	ldr	r0, [pc, #428]	; (80050c8 <StartCronTask+0x1e0>)
 8004f1c:	f021 fe9c 	bl	8026c58 <iprintf>
	}
	printf("CRONs parsed and ready to go\r\n");
 8004f20:	486a      	ldr	r0, [pc, #424]	; (80050cc <StartCronTask+0x1e4>)
 8004f22:	f021 ff1f 	bl	8026d64 <puts>

	struct tm stm;
	/* Infinite loop */
	for (;;) {
		if (stm.tm_year != 0) {
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0fc      	beq.n	8004f26 <StartCronTask+0x3e>

			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	4968      	ldr	r1, [pc, #416]	; (80050d0 <StartCronTask+0x1e8>)
 8004f30:	4868      	ldr	r0, [pc, #416]	; (80050d4 <StartCronTask+0x1ec>)
 8004f32:	f008 ff23 	bl	800dd7c <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004f36:	2200      	movs	r2, #0
 8004f38:	4967      	ldr	r1, [pc, #412]	; (80050d8 <StartCronTask+0x1f0>)
 8004f3a:	4866      	ldr	r0, [pc, #408]	; (80050d4 <StartCronTask+0x1ec>)
 8004f3c:	f009 f823 	bl	800df86 <HAL_RTC_GetDate>

			stm.tm_year = sDate.Year + 100; //RTC_Year rang 0-99,but tm_year since 1900
 8004f40:	4b65      	ldr	r3, [pc, #404]	; (80050d8 <StartCronTask+0x1f0>)
 8004f42:	78db      	ldrb	r3, [r3, #3]
 8004f44:	3364      	adds	r3, #100	; 0x64
 8004f46:	61fb      	str	r3, [r7, #28]
			stm.tm_mon = sDate.Month - 1; //RTC_Month rang 1-12,but tm_mon rang 0-11
 8004f48:	4b63      	ldr	r3, [pc, #396]	; (80050d8 <StartCronTask+0x1f0>)
 8004f4a:	785b      	ldrb	r3, [r3, #1]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	61bb      	str	r3, [r7, #24]
			stm.tm_mday = sDate.Date; //RTC_Date rang 1-31 and tm_mday rang 1-31
 8004f50:	4b61      	ldr	r3, [pc, #388]	; (80050d8 <StartCronTask+0x1f0>)
 8004f52:	789b      	ldrb	r3, [r3, #2]
 8004f54:	617b      	str	r3, [r7, #20]
			stm.tm_hour = sTime.Hours; //RTC_Hours rang 0-23 and tm_hour rang 0-23
 8004f56:	4b5e      	ldr	r3, [pc, #376]	; (80050d0 <StartCronTask+0x1e8>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	613b      	str	r3, [r7, #16]
			stm.tm_min = sTime.Minutes; //RTC_Minutes rang 0-59 and tm_min rang 0-59
 8004f5c:	4b5c      	ldr	r3, [pc, #368]	; (80050d0 <StartCronTask+0x1e8>)
 8004f5e:	785b      	ldrb	r3, [r3, #1]
 8004f60:	60fb      	str	r3, [r7, #12]
			stm.tm_sec = sTime.Seconds;
 8004f62:	4b5b      	ldr	r3, [pc, #364]	; (80050d0 <StartCronTask+0x1e8>)
 8004f64:	789b      	ldrb	r3, [r3, #2]
 8004f66:	60bb      	str	r3, [r7, #8]

			cronetime = mktime(&stm);
 8004f68:	f107 0308 	add.w	r3, r7, #8
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f021 fc23 	bl	80267b8 <mktime>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4959      	ldr	r1, [pc, #356]	; (80050dc <StartCronTask+0x1f4>)
 8004f78:	e9c1 2300 	strd	r2, r3, [r1]

			if (cronetime != cronetime_old) {
 8004f7c:	4b57      	ldr	r3, [pc, #348]	; (80050dc <StartCronTask+0x1f4>)
 8004f7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f82:	4b57      	ldr	r3, [pc, #348]	; (80050e0 <StartCronTask+0x1f8>)
 8004f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f88:	4299      	cmp	r1, r3
 8004f8a:	bf08      	it	eq
 8004f8c:	4290      	cmpeq	r0, r2
 8004f8e:	f000 8090 	beq.w	80050b2 <StartCronTask+0x1ca>
				cronetime_old = cronetime;
 8004f92:	4b52      	ldr	r3, [pc, #328]	; (80050dc <StartCronTask+0x1f4>)
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	4951      	ldr	r1, [pc, #324]	; (80050e0 <StartCronTask+0x1f8>)
 8004f9a:	e9c1 2300 	strd	r2, r3, [r1]
				timez = localtime(&cronetime);
 8004f9e:	484f      	ldr	r0, [pc, #316]	; (80050dc <StartCronTask+0x1f4>)
 8004fa0:	f021 f9ca 	bl	8026338 <localtime>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	4a4f      	ldr	r2, [pc, #316]	; (80050e4 <StartCronTask+0x1fc>)
 8004fa8:	6013      	str	r3, [r2, #0]
				i = 0;
 8004faa:	4b4f      	ldr	r3, [pc, #316]	; (80050e8 <StartCronTask+0x200>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]

				while (i < LWDTC_ARRAYSIZE(dbCrontxt)) {
 8004fb0:	e04b      	b.n	800504a <StartCronTask+0x162>
					if (cronetime >= dbCrontxt[i].ptime
 8004fb2:	4b4d      	ldr	r3, [pc, #308]	; (80050e8 <StartCronTask+0x200>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a42      	ldr	r2, [pc, #264]	; (80050c0 <StartCronTask+0x1d8>)
 8004fb8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004fbc:	fb01 f303 	mul.w	r3, r1, r3
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	4943      	ldr	r1, [pc, #268]	; (80050dc <StartCronTask+0x1f4>)
 8004fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fd4:	4290      	cmp	r0, r2
 8004fd6:	eb71 0303 	sbcs.w	r3, r1, r3
 8004fda:	db31      	blt.n	8005040 <StartCronTask+0x158>
							&& dbCrontxt[i].ptime != 0) {
 8004fdc:	4b42      	ldr	r3, [pc, #264]	; (80050e8 <StartCronTask+0x200>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a37      	ldr	r2, [pc, #220]	; (80050c0 <StartCronTask+0x1d8>)
 8004fe2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004fe6:	fb01 f303 	mul.w	r3, r1, r3
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d024      	beq.n	8005040 <StartCronTask+0x158>

						strcpy(str, dbCrontxt[i].activ);
 8004ff6:	4b3c      	ldr	r3, [pc, #240]	; (80050e8 <StartCronTask+0x200>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8004ffe:	fb02 f303 	mul.w	r3, r2, r3
 8005002:	3320      	adds	r3, #32
 8005004:	4a2e      	ldr	r2, [pc, #184]	; (80050c0 <StartCronTask+0x1d8>)
 8005006:	4413      	add	r3, r2
 8005008:	3303      	adds	r3, #3
 800500a:	4619      	mov	r1, r3
 800500c:	4837      	ldr	r0, [pc, #220]	; (80050ec <StartCronTask+0x204>)
 800500e:	f022 f854 	bl	80270ba <strcpy>
						parse_string(str, cronetime_old, i, 1);
 8005012:	4b33      	ldr	r3, [pc, #204]	; (80050e0 <StartCronTask+0x1f8>)
 8005014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005018:	4933      	ldr	r1, [pc, #204]	; (80050e8 <StartCronTask+0x200>)
 800501a:	6809      	ldr	r1, [r1, #0]
 800501c:	2001      	movs	r0, #1
 800501e:	9001      	str	r0, [sp, #4]
 8005020:	9100      	str	r1, [sp, #0]
 8005022:	4832      	ldr	r0, [pc, #200]	; (80050ec <StartCronTask+0x204>)
 8005024:	f7ff fe82 	bl	8004d2c <parse_string>
						dbCrontxt[i].ptime = 0;
 8005028:	4b2f      	ldr	r3, [pc, #188]	; (80050e8 <StartCronTask+0x200>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a24      	ldr	r2, [pc, #144]	; (80050c0 <StartCronTask+0x1d8>)
 800502e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005032:	fb01 f303 	mul.w	r3, r1, r3
 8005036:	4413      	add	r3, r2
 8005038:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
					}
					i++;
 8005040:	4b29      	ldr	r3, [pc, #164]	; (80050e8 <StartCronTask+0x200>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3301      	adds	r3, #1
 8005046:	4a28      	ldr	r2, [pc, #160]	; (80050e8 <StartCronTask+0x200>)
 8005048:	6013      	str	r3, [r2, #0]
				while (i < LWDTC_ARRAYSIZE(dbCrontxt)) {
 800504a:	4b27      	ldr	r3, [pc, #156]	; (80050e8 <StartCronTask+0x200>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b09      	cmp	r3, #9
 8005050:	d9af      	bls.n	8004fb2 <StartCronTask+0xca>
				}
				i = 0;
 8005052:	4b25      	ldr	r3, [pc, #148]	; (80050e8 <StartCronTask+0x200>)
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]

				/* Check if CRON should execute */
				while (i < LWDTC_ARRAYSIZE(cron_ctxs)) {
 8005058:	e027      	b.n	80050aa <StartCronTask+0x1c2>
					if (lwdtc_cron_is_valid_for_time(timez, cron_ctxs, &i)
 800505a:	4b22      	ldr	r3, [pc, #136]	; (80050e4 <StartCronTask+0x1fc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a22      	ldr	r2, [pc, #136]	; (80050e8 <StartCronTask+0x200>)
 8005060:	4918      	ldr	r1, [pc, #96]	; (80050c4 <StartCronTask+0x1dc>)
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff f8ca 	bl	80041fc <lwdtc_cron_is_valid_for_time>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d118      	bne.n	80050a0 <StartCronTask+0x1b8>
							== lwdtcOK) {

						strcpy(str, dbCrontxt[i].activ);
 800506e:	4b1e      	ldr	r3, [pc, #120]	; (80050e8 <StartCronTask+0x200>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	3320      	adds	r3, #32
 800507c:	4a10      	ldr	r2, [pc, #64]	; (80050c0 <StartCronTask+0x1d8>)
 800507e:	4413      	add	r3, r2
 8005080:	3303      	adds	r3, #3
 8005082:	4619      	mov	r1, r3
 8005084:	4819      	ldr	r0, [pc, #100]	; (80050ec <StartCronTask+0x204>)
 8005086:	f022 f818 	bl	80270ba <strcpy>
						parse_string(str, cronetime_old, i, 0);
 800508a:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <StartCronTask+0x1f8>)
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	4915      	ldr	r1, [pc, #84]	; (80050e8 <StartCronTask+0x200>)
 8005092:	6809      	ldr	r1, [r1, #0]
 8005094:	2000      	movs	r0, #0
 8005096:	9001      	str	r0, [sp, #4]
 8005098:	9100      	str	r1, [sp, #0]
 800509a:	4814      	ldr	r0, [pc, #80]	; (80050ec <StartCronTask+0x204>)
 800509c:	f7ff fe46 	bl	8004d2c <parse_string>
						//xQueueSend(myQueueHandle, &i, 0);
					}
					i++;
 80050a0:	4b11      	ldr	r3, [pc, #68]	; (80050e8 <StartCronTask+0x200>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3301      	adds	r3, #1
 80050a6:	4a10      	ldr	r2, [pc, #64]	; (80050e8 <StartCronTask+0x200>)
 80050a8:	6013      	str	r3, [r2, #0]
				while (i < LWDTC_ARRAYSIZE(cron_ctxs)) {
 80050aa:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <StartCronTask+0x200>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b09      	cmp	r3, #9
 80050b0:	d9d3      	bls.n	800505a <StartCronTask+0x172>
				}
			}
			osDelay(1);
 80050b2:	2001      	movs	r0, #1
 80050b4:	f00e ff97 	bl	8013fe6 <osDelay>
		if (stm.tm_year != 0) {
 80050b8:	e735      	b.n	8004f26 <StartCronTask+0x3e>
 80050ba:	bf00      	nop
 80050bc:	0802bbac 	.word	0x0802bbac
 80050c0:	20005f6c 	.word	0x20005f6c
 80050c4:	200005c0 	.word	0x200005c0
 80050c8:	0802bbbc 	.word	0x0802bbbc
 80050cc:	0802bbe0 	.word	0x0802bbe0
 80050d0:	200005a8 	.word	0x200005a8
 80050d4:	2000a244 	.word	0x2000a244
 80050d8:	200005bc 	.word	0x200005bc
 80050dc:	2000d168 	.word	0x2000d168
 80050e0:	2000d158 	.word	0x2000d158
 80050e4:	2000d150 	.word	0x2000d150
 80050e8:	2000057c 	.word	0x2000057c
 80050ec:	20000580 	.word	0x20000580

080050f0 <StartOutputTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOutputTask */
void StartOutputTask(void const * argument)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOutputTask */
	ulTaskNotifyTake(0, portMAX_DELAY);
 80050f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050fc:	2000      	movs	r0, #0
 80050fe:	f011 f9d9 	bl	80164b4 <ulTaskNotifyTake>
  /* Infinite loop */
  for(;;)
  {
		if (xQueueReceive(myQueueHandle, &data_pin, portMAX_DELAY) == pdTRUE) {
 8005102:	4b31      	ldr	r3, [pc, #196]	; (80051c8 <StartOutputTask+0xd8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800510a:	4930      	ldr	r1, [pc, #192]	; (80051cc <StartOutputTask+0xdc>)
 800510c:	4618      	mov	r0, r3
 800510e:	f00f fe21 	bl	8014d54 <xQueueReceive>
 8005112:	4603      	mov	r3, r0
 8005114:	2b01      	cmp	r3, #1
 8005116:	d152      	bne.n	80051be <StartOutputTask+0xce>
			if (data_pin.action == 0) {
 8005118:	4b2c      	ldr	r3, [pc, #176]	; (80051cc <StartOutputTask+0xdc>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d117      	bne.n	8005150 <StartOutputTask+0x60>
				//@todo  проверить что data_pin.pin число
				HAL_GPIO_WritePin(PinsInfo[data_pin.pin].gpio_name, PinsInfo[data_pin.pin].hal_pin, GPIO_PIN_RESET);
 8005120:	4b2a      	ldr	r3, [pc, #168]	; (80051cc <StartOutputTask+0xdc>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	492a      	ldr	r1, [pc, #168]	; (80051d0 <StartOutputTask+0xe0>)
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	3310      	adds	r3, #16
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	4b25      	ldr	r3, [pc, #148]	; (80051cc <StartOutputTask+0xdc>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	4925      	ldr	r1, [pc, #148]	; (80051d0 <StartOutputTask+0xe0>)
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	330c      	adds	r3, #12
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	2200      	movs	r2, #0
 800514a:	4619      	mov	r1, r3
 800514c:	f007 ff0c 	bl	800cf68 <HAL_GPIO_WritePin>
				//printf("%d-%d  \r\n", (int) data_pin.pin, (int) data_pin.action);
			}
			if (data_pin.action == 1) {
 8005150:	4b1e      	ldr	r3, [pc, #120]	; (80051cc <StartOutputTask+0xdc>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d117      	bne.n	8005188 <StartOutputTask+0x98>
				//@todo  проверить что data_pin.pin число
				HAL_GPIO_WritePin(PinsInfo[data_pin.pin].gpio_name, PinsInfo[data_pin.pin].hal_pin, GPIO_PIN_SET);
 8005158:	4b1c      	ldr	r3, [pc, #112]	; (80051cc <StartOutputTask+0xdc>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	491c      	ldr	r1, [pc, #112]	; (80051d0 <StartOutputTask+0xe0>)
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	440b      	add	r3, r1
 8005168:	3310      	adds	r3, #16
 800516a:	6818      	ldr	r0, [r3, #0]
 800516c:	4b17      	ldr	r3, [pc, #92]	; (80051cc <StartOutputTask+0xdc>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	4917      	ldr	r1, [pc, #92]	; (80051d0 <StartOutputTask+0xe0>)
 8005172:	4613      	mov	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	440b      	add	r3, r1
 800517c:	330c      	adds	r3, #12
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	2201      	movs	r2, #1
 8005182:	4619      	mov	r1, r3
 8005184:	f007 fef0 	bl	800cf68 <HAL_GPIO_WritePin>
				//printf("%d-%d  \r\n", (int) data_pin.pin, (int) data_pin.action);
			}
			if (data_pin.action == 2) {
 8005188:	4b10      	ldr	r3, [pc, #64]	; (80051cc <StartOutputTask+0xdc>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2b02      	cmp	r3, #2
 800518e:	d116      	bne.n	80051be <StartOutputTask+0xce>
				//@todo  проверить что data_pin.pin число
				HAL_GPIO_TogglePin(PinsInfo[data_pin.pin].gpio_name, PinsInfo[data_pin.pin].hal_pin);
 8005190:	4b0e      	ldr	r3, [pc, #56]	; (80051cc <StartOutputTask+0xdc>)
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	490e      	ldr	r1, [pc, #56]	; (80051d0 <StartOutputTask+0xe0>)
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	440b      	add	r3, r1
 80051a0:	3310      	adds	r3, #16
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	4b09      	ldr	r3, [pc, #36]	; (80051cc <StartOutputTask+0xdc>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	4909      	ldr	r1, [pc, #36]	; (80051d0 <StartOutputTask+0xe0>)
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	330c      	adds	r3, #12
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	4619      	mov	r1, r3
 80051ba:	f007 feee 	bl	800cf9a <HAL_GPIO_TogglePin>
				//printf("%d-%d  \r\n", (int) data_pin.pin, (int) data_pin.action);
			}
		}
    osDelay(1);
 80051be:	2001      	movs	r0, #1
 80051c0:	f00e ff11 	bl	8013fe6 <osDelay>
		if (xQueueReceive(myQueueHandle, &data_pin, portMAX_DELAY) == pdTRUE) {
 80051c4:	e79d      	b.n	8005102 <StartOutputTask+0x12>
 80051c6:	bf00      	nop
 80051c8:	2000c31c 	.word	0x2000c31c
 80051cc:	2000d02c 	.word	0x2000d02c
 80051d0:	080300b0 	.word	0x080300b0

080051d4 <StartConfigTask>:
* @brief Function implementing the ConfigTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConfigTask */
void StartConfigTask(void const *argument) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b0ca      	sub	sp, #296	; 0x128
 80051d8:	af00      	add	r7, sp, #0
 80051da:	1d3b      	adds	r3, r7, #4
 80051dc:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN StartConfigTask */
	int cdflag = 0;
 80051de:	2300      	movs	r3, #0
 80051e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	FRESULT fresult;
	FILINFO finfo;
	//UINT Byteswritten; // File read/write count

	MX_FATFS_Init();
 80051e4:	f00a f9b2 	bl	800f54c <MX_FATFS_Init>

	/*------------------- SD ----------------------*/
	fresult = f_mount(&fs, "/", 1);
 80051e8:	2201      	movs	r2, #1
 80051ea:	495e      	ldr	r1, [pc, #376]	; (8005364 <StartConfigTask+0x190>)
 80051ec:	485e      	ldr	r0, [pc, #376]	; (8005368 <StartConfigTask+0x194>)
 80051ee:	f00d fb4b 	bl	8012888 <f_mount>
 80051f2:	4603      	mov	r3, r0
 80051f4:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	if (fresult != FR_OK) {
 80051f8:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d006      	beq.n	800520e <StartConfigTask+0x3a>
		printf("ERROR!!! in mounting SD CARD...\n\n");
 8005200:	485a      	ldr	r0, [pc, #360]	; (800536c <StartConfigTask+0x198>)
 8005202:	f021 fdaf 	bl	8026d64 <puts>
		cdflag = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800520c:	e005      	b.n	800521a <StartConfigTask+0x46>
	} else {
		printf("SD CARD mounted successfully...\n\n");
 800520e:	4858      	ldr	r0, [pc, #352]	; (8005370 <StartConfigTask+0x19c>)
 8005210:	f021 fda8 	bl	8026d64 <puts>
		cdflag = 1;
 8005214:	2301      	movs	r3, #1
 8005216:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	}
	/* Infinite loop */
	for (;;) {
		if (cdflag == 1) {
 800521a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800521e:	2b01      	cmp	r3, #1
 8005220:	d109      	bne.n	8005236 <StartConfigTask+0x62>
			osDelay(1000);
 8005222:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005226:	f00e fede 	bl	8013fe6 <osDelay>
			printf("SD is mounted & READY! \r\n");
 800522a:	4852      	ldr	r0, [pc, #328]	; (8005374 <StartConfigTask+0x1a0>)
 800522c:	f021 fd9a 	bl	8026d64 <puts>
			cdflag = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}
	/********************* END SD ***************************/

		FRESULT fresult = f_stat("setings.ini", &finfo);
 8005236:	f107 0308 	add.w	r3, r7, #8
 800523a:	4619      	mov	r1, r3
 800523c:	484e      	ldr	r0, [pc, #312]	; (8005378 <StartConfigTask+0x1a4>)
 800523e:	f00e f9f3 	bl	8013628 <f_stat>
 8005242:	4603      	mov	r3, r0
 8005244:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
		if (fresult == FR_OK) {
 8005248:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 800524c:	2b00      	cmp	r3, #0
 800524e:	d130      	bne.n	80052b2 <StartConfigTask+0xde>
			printf("File 'setings.ini' EXIST! \r\n");
 8005250:	484a      	ldr	r0, [pc, #296]	; (800537c <StartConfigTask+0x1a8>)
 8005252:	f021 fd87 	bl	8026d64 <puts>
			GetSetingsConfig();
 8005256:	f001 f8bd 	bl	80063d4 <GetSetingsConfig>
			GetCronConfig();
 800525a:	f001 fc4f 	bl	8006afc <GetCronConfig>
			GetPinConfig();
 800525e:	f001 fe75 	bl	8006f4c <GetPinConfig>
			GetPinToPin();
 8005262:	f002 fb33 	bl	80078cc <GetPinToPin>

			InitPin();
 8005266:	f002 fd11 	bl	8007c8c <InitPin>

			xTaskNotifyGive(WebServerTaskHandle); // ТО ВКЛЮЧАЕМ ЗАДАЧУ WebServerTask
 800526a:	4b45      	ldr	r3, [pc, #276]	; (8005380 <StartConfigTask+0x1ac>)
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	2300      	movs	r3, #0
 8005270:	2202      	movs	r2, #2
 8005272:	2100      	movs	r1, #0
 8005274:	f011 f96a 	bl	801654c <xTaskGenericNotify>
			xTaskNotifyGive(SSIDTaskHandle); // И ВКЛЮЧАЕМ ЗАДАЧУ SSIDTask
 8005278:	4b42      	ldr	r3, [pc, #264]	; (8005384 <StartConfigTask+0x1b0>)
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	2300      	movs	r3, #0
 800527e:	2202      	movs	r2, #2
 8005280:	2100      	movs	r1, #0
 8005282:	f011 f963 	bl	801654c <xTaskGenericNotify>
			xTaskNotifyGive(CronTaskHandle); // И ВКЛЮЧАЕМ ЗАДАЧУ CronTask
 8005286:	4b40      	ldr	r3, [pc, #256]	; (8005388 <StartConfigTask+0x1b4>)
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	2300      	movs	r3, #0
 800528c:	2202      	movs	r2, #2
 800528e:	2100      	movs	r1, #0
 8005290:	f011 f95c 	bl	801654c <xTaskGenericNotify>
			xTaskNotifyGive(OutputTaskHandle); // И ВКЛЮЧАЕМ ЗАДАЧУ OutputTask
 8005294:	4b3d      	ldr	r3, [pc, #244]	; (800538c <StartConfigTask+0x1b8>)
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	2300      	movs	r3, #0
 800529a:	2202      	movs	r2, #2
 800529c:	2100      	movs	r1, #0
 800529e:	f011 f955 	bl	801654c <xTaskGenericNotify>
			xTaskNotifyGive(InputTaskHandle); // И ВКЛЮЧАЕМ ЗАДАЧУ InputTask
 80052a2:	4b3b      	ldr	r3, [pc, #236]	; (8005390 <StartConfigTask+0x1bc>)
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	2300      	movs	r3, #0
 80052a8:	2202      	movs	r2, #2
 80052aa:	2100      	movs	r1, #0
 80052ac:	f011 f94e 	bl	801654c <xTaskGenericNotify>
 80052b0:	e024      	b.n	80052fc <StartConfigTask+0x128>

		} else {
			StartSetingsConfig();
 80052b2:	f000 fd39 	bl	8005d28 <StartSetingsConfig>
			xTaskNotifyGive(WebServerTaskHandle); // ТО ВКЛЮЧАЕМ ЗАДАЧУ WebServerTask
 80052b6:	4b32      	ldr	r3, [pc, #200]	; (8005380 <StartConfigTask+0x1ac>)
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	2300      	movs	r3, #0
 80052bc:	2202      	movs	r2, #2
 80052be:	2100      	movs	r1, #0
 80052c0:	f011 f944 	bl	801654c <xTaskGenericNotify>
			xTaskNotifyGive(SSIDTaskHandle); // И ВКЛЮЧАЕМ ЗАДАЧУ SSIDTask
 80052c4:	4b2f      	ldr	r3, [pc, #188]	; (8005384 <StartConfigTask+0x1b0>)
 80052c6:	6818      	ldr	r0, [r3, #0]
 80052c8:	2300      	movs	r3, #0
 80052ca:	2202      	movs	r2, #2
 80052cc:	2100      	movs	r1, #0
 80052ce:	f011 f93d 	bl	801654c <xTaskGenericNotify>
			xTaskNotifyGive(CronTaskHandle); // И ВКЛЮЧАЕМ ЗАДАЧУ CronTask
 80052d2:	4b2d      	ldr	r3, [pc, #180]	; (8005388 <StartConfigTask+0x1b4>)
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	2300      	movs	r3, #0
 80052d8:	2202      	movs	r2, #2
 80052da:	2100      	movs	r1, #0
 80052dc:	f011 f936 	bl	801654c <xTaskGenericNotify>
			xTaskNotifyGive(OutputTaskHandle); // И ВКЛЮЧАЕМ ЗАДАЧУ OutputTask
 80052e0:	4b2a      	ldr	r3, [pc, #168]	; (800538c <StartConfigTask+0x1b8>)
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	2300      	movs	r3, #0
 80052e6:	2202      	movs	r2, #2
 80052e8:	2100      	movs	r1, #0
 80052ea:	f011 f92f 	bl	801654c <xTaskGenericNotify>
			xTaskNotifyGive(InputTaskHandle); // И ВКЛЮЧАЕМ ЗАДАЧУ InputTask
 80052ee:	4b28      	ldr	r3, [pc, #160]	; (8005390 <StartConfigTask+0x1bc>)
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	2300      	movs	r3, #0
 80052f4:	2202      	movs	r2, #2
 80052f6:	2100      	movs	r1, #0
 80052f8:	f011 f928 	bl	801654c <xTaskGenericNotify>
		}

		/******************************************************************************************/
		// Функция для чтения целых чисел из очереди
		if (xQueueReceive(usbQueueHandle, &usbnum, portMAX_DELAY) == pdTRUE) {
 80052fc:	4b25      	ldr	r3, [pc, #148]	; (8005394 <StartConfigTask+0x1c0>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005304:	4924      	ldr	r1, [pc, #144]	; (8005398 <StartConfigTask+0x1c4>)
 8005306:	4618      	mov	r0, r3
 8005308:	f00f fd24 	bl	8014d54 <xQueueReceive>
 800530c:	4603      	mov	r3, r0
 800530e:	2b01      	cmp	r3, #1
 8005310:	d183      	bne.n	800521a <StartConfigTask+0x46>
			switch (usbnum) {
 8005312:	4b21      	ldr	r3, [pc, #132]	; (8005398 <StartConfigTask+0x1c4>)
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	3b01      	subs	r3, #1
 8005318:	2b03      	cmp	r3, #3
 800531a:	d817      	bhi.n	800534c <StartConfigTask+0x178>
 800531c:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <StartConfigTask+0x150>)
 800531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005322:	bf00      	nop
 8005324:	08005335 	.word	0x08005335
 8005328:	0800533b 	.word	0x0800533b
 800532c:	08005341 	.word	0x08005341
 8005330:	08005347 	.word	0x08005347
			case 1:
				SetPinConfig();
 8005334:	f002 f8b4 	bl	80074a0 <SetPinConfig>
				break;
 8005338:	e009      	b.n	800534e <StartConfigTask+0x17a>
			case 2:
				SetSetingsConfig();
 800533a:	f000 f8f7 	bl	800552c <SetSetingsConfig>
				break;
 800533e:	e006      	b.n	800534e <StartConfigTask+0x17a>
			case 3:
				SetCronConfig();
 8005340:	f001 fcea 	bl	8006d18 <SetCronConfig>
				break;
 8005344:	e003      	b.n	800534e <StartConfigTask+0x17a>
			case 4:
				SetPinToPin();
 8005346:	f002 fba1 	bl	8007a8c <SetPinToPin>
				break;
 800534a:	e000      	b.n	800534e <StartConfigTask+0x17a>
			default:
				//printf("Wrong data! \r\n");
				break;
 800534c:	bf00      	nop
			}
			printf("+++ Received number: %u\n", usbnum);
 800534e:	4b12      	ldr	r3, [pc, #72]	; (8005398 <StartConfigTask+0x1c4>)
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	4619      	mov	r1, r3
 8005354:	4811      	ldr	r0, [pc, #68]	; (800539c <StartConfigTask+0x1c8>)
 8005356:	f021 fc7f 	bl	8026c58 <iprintf>
			/******************************************************************************************/
			osDelay(1);
 800535a:	2001      	movs	r0, #1
 800535c:	f00e fe43 	bl	8013fe6 <osDelay>
	for (;;) {
 8005360:	e75b      	b.n	800521a <StartConfigTask+0x46>
 8005362:	bf00      	nop
 8005364:	0802bc00 	.word	0x0802bc00
 8005368:	20008884 	.word	0x20008884
 800536c:	0802bc04 	.word	0x0802bc04
 8005370:	0802bc28 	.word	0x0802bc28
 8005374:	0802bc4c 	.word	0x0802bc4c
 8005378:	0802bc68 	.word	0x0802bc68
 800537c:	0802bc74 	.word	0x0802bc74
 8005380:	2000d160 	.word	0x2000d160
 8005384:	2000a0c4 	.word	0x2000a0c4
 8005388:	2000a0c8 	.word	0x2000a0c8
 800538c:	2000a238 	.word	0x2000a238
 8005390:	2000a240 	.word	0x2000a240
 8005394:	2000d154 	.word	0x2000d154
 8005398:	20000578 	.word	0x20000578
 800539c:	0802bc90 	.word	0x0802bc90

080053a0 <StartInputTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInputTask */
void StartInputTask(void const * argument)
{
 80053a0:	b590      	push	{r4, r7, lr}
 80053a2:	b08d      	sub	sp, #52	; 0x34
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInputTask */
	  ulTaskNotifyTake(0, portMAX_DELAY);
 80053a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80053ac:	2000      	movs	r0, #0
 80053ae:	f011 f881 	bl	80164b4 <ulTaskNotifyTake>

	  uint8_t pinStates[NUMPIN] = {0};
 80053b2:	2300      	movs	r3, #0
 80053b4:	623b      	str	r3, [r7, #32]
 80053b6:	2300      	movs	r3, #0
 80053b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  uint32_t pinTimes[NUMPIN] = {0};
 80053bc:	f107 030c 	add.w	r3, r7, #12
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	605a      	str	r2, [r3, #4]
 80053c6:	609a      	str	r2, [r3, #8]
 80053c8:	60da      	str	r2, [r3, #12]
 80053ca:	611a      	str	r2, [r3, #16]
	  uint32_t millis;

	  /* Infinite loop */
	  for(;;)
	  {
		millis = HAL_GetTick();
 80053cc:	f006 f864 	bl	800b498 <HAL_GetTick>
 80053d0:	62b8      	str	r0, [r7, #40]	; 0x28
		for (uint8_t i = 0; i < NUMPIN; i++) {
 80053d2:	2300      	movs	r3, #0
 80053d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80053d8:	e07d      	b.n	80054d6 <StartInputTask+0x136>
			if(PinsConf[i].topin == 1){
 80053da:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80053de:	4942      	ldr	r1, [pc, #264]	; (80054e8 <StartInputTask+0x148>)
 80053e0:	4613      	mov	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4413      	add	r3, r2
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	440b      	add	r3, r1
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d16d      	bne.n	80054cc <StartInputTask+0x12c>
				pinStates[i] = HAL_GPIO_ReadPin(PinsInfo[i].gpio_name, PinsInfo[i].hal_pin);
 80053f0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80053f4:	493d      	ldr	r1, [pc, #244]	; (80054ec <StartInputTask+0x14c>)
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	440b      	add	r3, r1
 8005400:	3310      	adds	r3, #16
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005408:	4938      	ldr	r1, [pc, #224]	; (80054ec <StartInputTask+0x14c>)
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	440b      	add	r3, r1
 8005414:	330c      	adds	r3, #12
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800541c:	4619      	mov	r1, r3
 800541e:	f007 fd8b 	bl	800cf38 <HAL_GPIO_ReadPin>
 8005422:	4603      	mov	r3, r0
 8005424:	461a      	mov	r2, r3
 8005426:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800542a:	4423      	add	r3, r4
 800542c:	f803 2c10 	strb.w	r2, [r3, #-16]
				//printf(" STpin %d \r\n", pinStates[i]);
				if(pinStates[i] == 1 && (millis - pinTimes[i]) >= 200){
 8005430:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005434:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005438:	4413      	add	r3, r2
 800543a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d144      	bne.n	80054cc <StartInputTask+0x12c>
 8005442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800544c:	4413      	add	r3, r2
 800544e:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8005452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2bc7      	cmp	r3, #199	; 0xc7
 8005458:	d938      	bls.n	80054cc <StartInputTask+0x12c>
					pinTimes[i] = millis;
 800545a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005464:	4413      	add	r3, r2
 8005466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005468:	f843 2c24 	str.w	r2, [r3, #-36]
					//printf(" clicks 1 %lu pin %d \r\n", (unsigned long)pinTimes[i], i);

					for(uint8_t a = 0; a < NUMPINLINKS; a++){
 800546c:	2300      	movs	r3, #0
 800546e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005472:	e027      	b.n	80054c4 <StartInputTask+0x124>
						//printf(" IN %d OUT %d \r\n", PinsLinks[a].idin, PinsLinks[a].idout);
						if(PinsLinks[a].idin == i){
 8005474:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8005478:	491d      	ldr	r1, [pc, #116]	; (80054f0 <StartInputTask+0x150>)
 800547a:	4613      	mov	r3, r2
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	440b      	add	r3, r1
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800548a:	429a      	cmp	r2, r3
 800548c:	d115      	bne.n	80054ba <StartInputTask+0x11a>
							data_pin.pin = PinsLinks[a].idout;
 800548e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8005492:	4917      	ldr	r1, [pc, #92]	; (80054f0 <StartInputTask+0x150>)
 8005494:	4613      	mov	r3, r2
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	440b      	add	r3, r1
 800549e:	3304      	adds	r3, #4
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a14      	ldr	r2, [pc, #80]	; (80054f4 <StartInputTask+0x154>)
 80054a4:	6013      	str	r3, [r2, #0]
							data_pin.action = 2;
 80054a6:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <StartInputTask+0x154>)
 80054a8:	2202      	movs	r2, #2
 80054aa:	605a      	str	r2, [r3, #4]
							xQueueSend(myQueueHandle, (void* ) &data_pin, 0);
 80054ac:	4b12      	ldr	r3, [pc, #72]	; (80054f8 <StartInputTask+0x158>)
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	2300      	movs	r3, #0
 80054b2:	2200      	movs	r2, #0
 80054b4:	490f      	ldr	r1, [pc, #60]	; (80054f4 <StartInputTask+0x154>)
 80054b6:	f00f fa27 	bl	8014908 <xQueueGenericSend>
					for(uint8_t a = 0; a < NUMPINLINKS; a++){
 80054ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80054be:	3301      	adds	r3, #1
 80054c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80054c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d9d3      	bls.n	8005474 <StartInputTask+0xd4>
		for (uint8_t i = 0; i < NUMPIN; i++) {
 80054cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054d0:	3301      	adds	r3, #1
 80054d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80054d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054da:	2b04      	cmp	r3, #4
 80054dc:	f67f af7d 	bls.w	80053da <StartInputTask+0x3a>

				}

			}
		}
	    osDelay(1);
 80054e0:	2001      	movs	r0, #1
 80054e2:	f00e fd80 	bl	8013fe6 <osDelay>
		millis = HAL_GetTick();
 80054e6:	e771      	b.n	80053cc <StartInputTask+0x2c>
 80054e8:	20005c9c 	.word	0x20005c9c
 80054ec:	080300b0 	.word	0x080300b0
 80054f0:	20005c60 	.word	0x20005c60
 80054f4:	2000d02c 	.word	0x2000d02c
 80054f8:	2000c31c 	.word	0x2000c31c

080054fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a04      	ldr	r2, [pc, #16]	; (800551c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d101      	bne.n	8005512 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800550e:	f005 ffaf 	bl	800b470 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005512:	bf00      	nop
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40002000 	.word	0x40002000

08005520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005524:	b672      	cpsid	i
}
 8005526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005528:	e7fe      	b.n	8005528 <Error_Handler+0x8>
	...

0800552c <SetSetingsConfig>:
//    }
//}
/**************************************************************************/

// Когда форму сохраняем
void SetSetingsConfig() {
 800552c:	b580      	push	{r7, lr}
 800552e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8005532:	af00      	add	r7, sp, #0
	cJSON *root_obj = NULL;
 8005534:	2300      	movs	r3, #0
 8005536:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800553a:	f102 021c 	add.w	r2, r2, #28
 800553e:	6013      	str	r3, [r2, #0]
	char *out_str = NULL;
 8005540:	2300      	movs	r3, #0
 8005542:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005546:	f102 0218 	add.w	r2, r2, #24
 800554a:	6013      	str	r3, [r2, #0]
	FRESULT fresult;
	UINT Byteswritten; // File read/write count
	FIL fil; // File
	if (f_open(&fil, (const TCHAR*) "setings.ini", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 800554c:	463b      	mov	r3, r7
 800554e:	220a      	movs	r2, #10
 8005550:	49d3      	ldr	r1, [pc, #844]	; (80058a0 <SetSetingsConfig+0x374>)
 8005552:	4618      	mov	r0, r3
 8005554:	f00d f9fc 	bl	8012950 <f_open>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	f040 83da 	bne.w	8005d14 <SetSetingsConfig+0x7e8>

		root_obj = cJSON_CreateObject();
 8005560:	f7fd fe5c 	bl	800321c <cJSON_CreateObject>
 8005564:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005568:	f103 031c 	add.w	r3, r3, #28
 800556c:	6018      	str	r0, [r3, #0]
		cJSON_AddStringToObject(root_obj, "adm_name", SetSettings.adm_name);
 800556e:	4acd      	ldr	r2, [pc, #820]	; (80058a4 <SetSetingsConfig+0x378>)
 8005570:	49cd      	ldr	r1, [pc, #820]	; (80058a8 <SetSetingsConfig+0x37c>)
 8005572:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005576:	f103 031c 	add.w	r3, r3, #28
 800557a:	6818      	ldr	r0, [r3, #0]
 800557c:	f7fd fda8 	bl	80030d0 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "adm_pswd", SetSettings.adm_pswd);
 8005580:	4aca      	ldr	r2, [pc, #808]	; (80058ac <SetSetingsConfig+0x380>)
 8005582:	49cb      	ldr	r1, [pc, #812]	; (80058b0 <SetSetingsConfig+0x384>)
 8005584:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005588:	f103 031c 	add.w	r3, r3, #28
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	f7fd fd9f 	bl	80030d0 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "token", SetSettings.token);
 8005592:	4ac8      	ldr	r2, [pc, #800]	; (80058b4 <SetSetingsConfig+0x388>)
 8005594:	49c8      	ldr	r1, [pc, #800]	; (80058b8 <SetSetingsConfig+0x38c>)
 8005596:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800559a:	f103 031c 	add.w	r3, r3, #28
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	f7fd fd96 	bl	80030d0 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "lang", SetSettings.lang);
 80055a4:	4ac5      	ldr	r2, [pc, #788]	; (80058bc <SetSetingsConfig+0x390>)
 80055a6:	49c6      	ldr	r1, [pc, #792]	; (80058c0 <SetSetingsConfig+0x394>)
 80055a8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80055ac:	f103 031c 	add.w	r3, r3, #28
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	f7fd fd8d 	bl	80030d0 <cJSON_AddStringToObject>
		cJSON_AddNumberToObject(root_obj, "timezone", SetSettings.timezone);
 80055b6:	4bbb      	ldr	r3, [pc, #748]	; (80058a4 <SetSetingsConfig+0x378>)
 80055b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fa ffc2 	bl	8000544 <__aeabi_i2d>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	ec43 2b10 	vmov	d0, r2, r3
 80055c8:	49be      	ldr	r1, [pc, #760]	; (80058c4 <SetSetingsConfig+0x398>)
 80055ca:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80055ce:	f103 031c 	add.w	r3, r3, #28
 80055d2:	6818      	ldr	r0, [r3, #0]
 80055d4:	f7fd fd58 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "lon_de", SetSettings.lon_de);
 80055d8:	4bb2      	ldr	r3, [pc, #712]	; (80058a4 <SetSetingsConfig+0x378>)
 80055da:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80055de:	eeb0 0a47 	vmov.f32	s0, s14
 80055e2:	eef0 0a67 	vmov.f32	s1, s15
 80055e6:	49b8      	ldr	r1, [pc, #736]	; (80058c8 <SetSetingsConfig+0x39c>)
 80055e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80055ec:	f103 031c 	add.w	r3, r3, #28
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	f7fd fd49 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "lat_de", SetSettings.lat_de);
 80055f6:	4bab      	ldr	r3, [pc, #684]	; (80058a4 <SetSetingsConfig+0x378>)
 80055f8:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80055fc:	eeb0 0a47 	vmov.f32	s0, s14
 8005600:	eef0 0a67 	vmov.f32	s1, s15
 8005604:	49b1      	ldr	r1, [pc, #708]	; (80058cc <SetSetingsConfig+0x3a0>)
 8005606:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800560a:	f103 031c 	add.w	r3, r3, #28
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	f7fd fd3a 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip1_sntp0", SetSettings.ip1_sntp0);
 8005614:	4ba3      	ldr	r3, [pc, #652]	; (80058a4 <SetSetingsConfig+0x378>)
 8005616:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800561a:	4618      	mov	r0, r3
 800561c:	f7fa ff92 	bl	8000544 <__aeabi_i2d>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	ec43 2b10 	vmov	d0, r2, r3
 8005628:	49a9      	ldr	r1, [pc, #676]	; (80058d0 <SetSetingsConfig+0x3a4>)
 800562a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800562e:	f103 031c 	add.w	r3, r3, #28
 8005632:	6818      	ldr	r0, [r3, #0]
 8005634:	f7fd fd28 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip1_sntp1", SetSettings.ip1_sntp1);
 8005638:	4b9a      	ldr	r3, [pc, #616]	; (80058a4 <SetSetingsConfig+0x378>)
 800563a:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800563e:	4618      	mov	r0, r3
 8005640:	f7fa ff80 	bl	8000544 <__aeabi_i2d>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	ec43 2b10 	vmov	d0, r2, r3
 800564c:	49a1      	ldr	r1, [pc, #644]	; (80058d4 <SetSetingsConfig+0x3a8>)
 800564e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005652:	f103 031c 	add.w	r3, r3, #28
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	f7fd fd16 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip1_sntp2", SetSettings.ip1_sntp2);
 800565c:	4b91      	ldr	r3, [pc, #580]	; (80058a4 <SetSetingsConfig+0x378>)
 800565e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005662:	4618      	mov	r0, r3
 8005664:	f7fa ff6e 	bl	8000544 <__aeabi_i2d>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	ec43 2b10 	vmov	d0, r2, r3
 8005670:	4999      	ldr	r1, [pc, #612]	; (80058d8 <SetSetingsConfig+0x3ac>)
 8005672:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005676:	f103 031c 	add.w	r3, r3, #28
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	f7fd fd04 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip1_sntp3", SetSettings.ip1_sntp3);
 8005680:	4b88      	ldr	r3, [pc, #544]	; (80058a4 <SetSetingsConfig+0x378>)
 8005682:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005686:	4618      	mov	r0, r3
 8005688:	f7fa ff5c 	bl	8000544 <__aeabi_i2d>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	ec43 2b10 	vmov	d0, r2, r3
 8005694:	4991      	ldr	r1, [pc, #580]	; (80058dc <SetSetingsConfig+0x3b0>)
 8005696:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800569a:	f103 031c 	add.w	r3, r3, #28
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	f7fd fcf2 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip2_sntp0", SetSettings.ip2_sntp0);
 80056a4:	4b7f      	ldr	r3, [pc, #508]	; (80058a4 <SetSetingsConfig+0x378>)
 80056a6:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fa ff4a 	bl	8000544 <__aeabi_i2d>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	ec43 2b10 	vmov	d0, r2, r3
 80056b8:	4989      	ldr	r1, [pc, #548]	; (80058e0 <SetSetingsConfig+0x3b4>)
 80056ba:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80056be:	f103 031c 	add.w	r3, r3, #28
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	f7fd fce0 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip2_sntp1", SetSettings.ip2_sntp1);
 80056c8:	4b76      	ldr	r3, [pc, #472]	; (80058a4 <SetSetingsConfig+0x378>)
 80056ca:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fa ff38 	bl	8000544 <__aeabi_i2d>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	ec43 2b10 	vmov	d0, r2, r3
 80056dc:	4981      	ldr	r1, [pc, #516]	; (80058e4 <SetSetingsConfig+0x3b8>)
 80056de:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80056e2:	f103 031c 	add.w	r3, r3, #28
 80056e6:	6818      	ldr	r0, [r3, #0]
 80056e8:	f7fd fcce 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip2_sntp2", SetSettings.ip2_sntp2);
 80056ec:	4b6d      	ldr	r3, [pc, #436]	; (80058a4 <SetSetingsConfig+0x378>)
 80056ee:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fa ff26 	bl	8000544 <__aeabi_i2d>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	ec43 2b10 	vmov	d0, r2, r3
 8005700:	4979      	ldr	r1, [pc, #484]	; (80058e8 <SetSetingsConfig+0x3bc>)
 8005702:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005706:	f103 031c 	add.w	r3, r3, #28
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	f7fd fcbc 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip2_sntp3", SetSettings.ip2_sntp3);
 8005710:	4b64      	ldr	r3, [pc, #400]	; (80058a4 <SetSetingsConfig+0x378>)
 8005712:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 8005716:	4618      	mov	r0, r3
 8005718:	f7fa ff14 	bl	8000544 <__aeabi_i2d>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	ec43 2b10 	vmov	d0, r2, r3
 8005724:	4971      	ldr	r1, [pc, #452]	; (80058ec <SetSetingsConfig+0x3c0>)
 8005726:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800572a:	f103 031c 	add.w	r3, r3, #28
 800572e:	6818      	ldr	r0, [r3, #0]
 8005730:	f7fd fcaa 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip3_sntp0", SetSettings.ip3_sntp0);
 8005734:	4b5b      	ldr	r3, [pc, #364]	; (80058a4 <SetSetingsConfig+0x378>)
 8005736:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800573a:	4618      	mov	r0, r3
 800573c:	f7fa ff02 	bl	8000544 <__aeabi_i2d>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	ec43 2b10 	vmov	d0, r2, r3
 8005748:	4969      	ldr	r1, [pc, #420]	; (80058f0 <SetSetingsConfig+0x3c4>)
 800574a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800574e:	f103 031c 	add.w	r3, r3, #28
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	f7fd fc98 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip3_sntp1", SetSettings.ip3_sntp1);
 8005758:	4b52      	ldr	r3, [pc, #328]	; (80058a4 <SetSetingsConfig+0x378>)
 800575a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800575e:	4618      	mov	r0, r3
 8005760:	f7fa fef0 	bl	8000544 <__aeabi_i2d>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	ec43 2b10 	vmov	d0, r2, r3
 800576c:	4961      	ldr	r1, [pc, #388]	; (80058f4 <SetSetingsConfig+0x3c8>)
 800576e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005772:	f103 031c 	add.w	r3, r3, #28
 8005776:	6818      	ldr	r0, [r3, #0]
 8005778:	f7fd fc86 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip3_sntp2", SetSettings.ip3_sntp2);
 800577c:	4b49      	ldr	r3, [pc, #292]	; (80058a4 <SetSetingsConfig+0x378>)
 800577e:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8005782:	4618      	mov	r0, r3
 8005784:	f7fa fede 	bl	8000544 <__aeabi_i2d>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	ec43 2b10 	vmov	d0, r2, r3
 8005790:	4959      	ldr	r1, [pc, #356]	; (80058f8 <SetSetingsConfig+0x3cc>)
 8005792:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005796:	f103 031c 	add.w	r3, r3, #28
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	f7fd fc74 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip3_sntp3", SetSettings.ip3_sntp3);
 80057a0:	4b40      	ldr	r3, [pc, #256]	; (80058a4 <SetSetingsConfig+0x378>)
 80057a2:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fa fecc 	bl	8000544 <__aeabi_i2d>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	ec43 2b10 	vmov	d0, r2, r3
 80057b4:	4951      	ldr	r1, [pc, #324]	; (80058fc <SetSetingsConfig+0x3d0>)
 80057b6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80057ba:	f103 031c 	add.w	r3, r3, #28
 80057be:	6818      	ldr	r0, [r3, #0]
 80057c0:	f7fd fc62 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "check_mqtt", SetSettings.check_mqtt);
 80057c4:	4b37      	ldr	r3, [pc, #220]	; (80058a4 <SetSetingsConfig+0x378>)
 80057c6:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fa feba 	bl	8000544 <__aeabi_i2d>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	ec43 2b10 	vmov	d0, r2, r3
 80057d8:	4949      	ldr	r1, [pc, #292]	; (8005900 <SetSetingsConfig+0x3d4>)
 80057da:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80057de:	f103 031c 	add.w	r3, r3, #28
 80057e2:	6818      	ldr	r0, [r3, #0]
 80057e4:	f7fd fc50 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_prt", SetSettings.mqtt_prt);
 80057e8:	4b2e      	ldr	r3, [pc, #184]	; (80058a4 <SetSetingsConfig+0x378>)
 80057ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fa fea9 	bl	8000544 <__aeabi_i2d>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	ec43 2b10 	vmov	d0, r2, r3
 80057fa:	4942      	ldr	r1, [pc, #264]	; (8005904 <SetSetingsConfig+0x3d8>)
 80057fc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005800:	f103 031c 	add.w	r3, r3, #28
 8005804:	6818      	ldr	r0, [r3, #0]
 8005806:	f7fd fc3f 	bl	8003088 <cJSON_AddNumberToObject>
		//cJSON_AddNumberToObject(root_obj, "mqtt_qos", SetSettings.mqtt_qos);  // (QOS)
		cJSON_AddStringToObject(root_obj, "mqtt_clt", SetSettings.mqtt_clt);
 800580a:	4a3f      	ldr	r2, [pc, #252]	; (8005908 <SetSetingsConfig+0x3dc>)
 800580c:	493f      	ldr	r1, [pc, #252]	; (800590c <SetSetingsConfig+0x3e0>)
 800580e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005812:	f103 031c 	add.w	r3, r3, #28
 8005816:	6818      	ldr	r0, [r3, #0]
 8005818:	f7fd fc5a 	bl	80030d0 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "mqtt_usr", SetSettings.mqtt_usr);
 800581c:	4a3c      	ldr	r2, [pc, #240]	; (8005910 <SetSetingsConfig+0x3e4>)
 800581e:	493d      	ldr	r1, [pc, #244]	; (8005914 <SetSetingsConfig+0x3e8>)
 8005820:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005824:	f103 031c 	add.w	r3, r3, #28
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	f7fd fc51 	bl	80030d0 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "mqtt_pswd", SetSettings.mqtt_pswd);
 800582e:	4a3a      	ldr	r2, [pc, #232]	; (8005918 <SetSetingsConfig+0x3ec>)
 8005830:	493a      	ldr	r1, [pc, #232]	; (800591c <SetSetingsConfig+0x3f0>)
 8005832:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005836:	f103 031c 	add.w	r3, r3, #28
 800583a:	6818      	ldr	r0, [r3, #0]
 800583c:	f7fd fc48 	bl	80030d0 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "mqtt_tpc", SetSettings.mqtt_tpc);
 8005840:	4a37      	ldr	r2, [pc, #220]	; (8005920 <SetSetingsConfig+0x3f4>)
 8005842:	4938      	ldr	r1, [pc, #224]	; (8005924 <SetSetingsConfig+0x3f8>)
 8005844:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005848:	f103 031c 	add.w	r3, r3, #28
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	f7fd fc3f 	bl	80030d0 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "mqtt_ftpc", SetSettings.mqtt_ftpc);
 8005852:	4a35      	ldr	r2, [pc, #212]	; (8005928 <SetSetingsConfig+0x3fc>)
 8005854:	4935      	ldr	r1, [pc, #212]	; (800592c <SetSetingsConfig+0x400>)
 8005856:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800585a:	f103 031c 	add.w	r3, r3, #28
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	f7fd fc36 	bl	80030d0 <cJSON_AddStringToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_hst0", SetSettings.mqtt_hst0);
 8005864:	4b0f      	ldr	r3, [pc, #60]	; (80058a4 <SetSetingsConfig+0x378>)
 8005866:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 800586a:	4618      	mov	r0, r3
 800586c:	f7fa fe6a 	bl	8000544 <__aeabi_i2d>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	ec43 2b10 	vmov	d0, r2, r3
 8005878:	492d      	ldr	r1, [pc, #180]	; (8005930 <SetSetingsConfig+0x404>)
 800587a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800587e:	f103 031c 	add.w	r3, r3, #28
 8005882:	6818      	ldr	r0, [r3, #0]
 8005884:	f7fd fc00 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_hst1", SetSettings.mqtt_hst1);
 8005888:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <SetSetingsConfig+0x378>)
 800588a:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 800588e:	4618      	mov	r0, r3
 8005890:	f7fa fe58 	bl	8000544 <__aeabi_i2d>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	ec43 2b10 	vmov	d0, r2, r3
 800589c:	e04a      	b.n	8005934 <SetSetingsConfig+0x408>
 800589e:	bf00      	nop
 80058a0:	0802bcc0 	.word	0x0802bcc0
 80058a4:	20005b90 	.word	0x20005b90
 80058a8:	0802bccc 	.word	0x0802bccc
 80058ac:	20005b9a 	.word	0x20005b9a
 80058b0:	0802bcd8 	.word	0x0802bcd8
 80058b4:	20005ba9 	.word	0x20005ba9
 80058b8:	0802bce4 	.word	0x0802bce4
 80058bc:	20005bb4 	.word	0x20005bb4
 80058c0:	0802bcec 	.word	0x0802bcec
 80058c4:	0802bcf4 	.word	0x0802bcf4
 80058c8:	0802bd00 	.word	0x0802bd00
 80058cc:	0802bd08 	.word	0x0802bd08
 80058d0:	0802bd10 	.word	0x0802bd10
 80058d4:	0802bd1c 	.word	0x0802bd1c
 80058d8:	0802bd28 	.word	0x0802bd28
 80058dc:	0802bd34 	.word	0x0802bd34
 80058e0:	0802bd40 	.word	0x0802bd40
 80058e4:	0802bd4c 	.word	0x0802bd4c
 80058e8:	0802bd58 	.word	0x0802bd58
 80058ec:	0802bd64 	.word	0x0802bd64
 80058f0:	0802bd70 	.word	0x0802bd70
 80058f4:	0802bd7c 	.word	0x0802bd7c
 80058f8:	0802bd88 	.word	0x0802bd88
 80058fc:	0802bd94 	.word	0x0802bd94
 8005900:	0802bda0 	.word	0x0802bda0
 8005904:	0802bdac 	.word	0x0802bdac
 8005908:	20005bf0 	.word	0x20005bf0
 800590c:	0802bdb8 	.word	0x0802bdb8
 8005910:	20005bfa 	.word	0x20005bfa
 8005914:	0802bdc4 	.word	0x0802bdc4
 8005918:	20005c04 	.word	0x20005c04
 800591c:	0802bdd0 	.word	0x0802bdd0
 8005920:	20005c13 	.word	0x20005c13
 8005924:	0802bddc 	.word	0x0802bddc
 8005928:	20005c22 	.word	0x20005c22
 800592c:	0802bde8 	.word	0x0802bde8
 8005930:	0802bdf4 	.word	0x0802bdf4
 8005934:	49da      	ldr	r1, [pc, #872]	; (8005ca0 <SetSetingsConfig+0x774>)
 8005936:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800593a:	f103 031c 	add.w	r3, r3, #28
 800593e:	6818      	ldr	r0, [r3, #0]
 8005940:	f7fd fba2 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_hst2", SetSettings.mqtt_hst2);
 8005944:	4bd7      	ldr	r3, [pc, #860]	; (8005ca4 <SetSetingsConfig+0x778>)
 8005946:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	; 0xa6
 800594a:	4618      	mov	r0, r3
 800594c:	f7fa fdfa 	bl	8000544 <__aeabi_i2d>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	ec43 2b10 	vmov	d0, r2, r3
 8005958:	49d3      	ldr	r1, [pc, #844]	; (8005ca8 <SetSetingsConfig+0x77c>)
 800595a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800595e:	f103 031c 	add.w	r3, r3, #28
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	f7fd fb90 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_hst3", SetSettings.mqtt_hst3);
 8005968:	4bce      	ldr	r3, [pc, #824]	; (8005ca4 <SetSetingsConfig+0x778>)
 800596a:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	; 0xa8
 800596e:	4618      	mov	r0, r3
 8005970:	f7fa fde8 	bl	8000544 <__aeabi_i2d>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	ec43 2b10 	vmov	d0, r2, r3
 800597c:	49cb      	ldr	r1, [pc, #812]	; (8005cac <SetSetingsConfig+0x780>)
 800597e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005982:	f103 031c 	add.w	r3, r3, #28
 8005986:	6818      	ldr	r0, [r3, #0]
 8005988:	f7fd fb7e 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "check_ip", SetSettings.check_ip);
 800598c:	4bc5      	ldr	r3, [pc, #788]	; (8005ca4 <SetSetingsConfig+0x778>)
 800598e:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	; 0xaa
 8005992:	4618      	mov	r0, r3
 8005994:	f7fa fdd6 	bl	8000544 <__aeabi_i2d>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	ec43 2b10 	vmov	d0, r2, r3
 80059a0:	49c3      	ldr	r1, [pc, #780]	; (8005cb0 <SetSetingsConfig+0x784>)
 80059a2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80059a6:	f103 031c 	add.w	r3, r3, #28
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	f7fd fb6c 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip_addr0", SetSettings.ip_addr0);
 80059b0:	4bbc      	ldr	r3, [pc, #752]	; (8005ca4 <SetSetingsConfig+0x778>)
 80059b2:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fa fdc4 	bl	8000544 <__aeabi_i2d>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	ec43 2b10 	vmov	d0, r2, r3
 80059c4:	49bb      	ldr	r1, [pc, #748]	; (8005cb4 <SetSetingsConfig+0x788>)
 80059c6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80059ca:	f103 031c 	add.w	r3, r3, #28
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	f7fd fb5a 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip_addr1", SetSettings.ip_addr1);
 80059d4:	4bb3      	ldr	r3, [pc, #716]	; (8005ca4 <SetSetingsConfig+0x778>)
 80059d6:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	; 0xae
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fa fdb2 	bl	8000544 <__aeabi_i2d>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	ec43 2b10 	vmov	d0, r2, r3
 80059e8:	49b3      	ldr	r1, [pc, #716]	; (8005cb8 <SetSetingsConfig+0x78c>)
 80059ea:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80059ee:	f103 031c 	add.w	r3, r3, #28
 80059f2:	6818      	ldr	r0, [r3, #0]
 80059f4:	f7fd fb48 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip_addr2", SetSettings.ip_addr2);
 80059f8:	4baa      	ldr	r3, [pc, #680]	; (8005ca4 <SetSetingsConfig+0x778>)
 80059fa:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fa fda0 	bl	8000544 <__aeabi_i2d>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	ec43 2b10 	vmov	d0, r2, r3
 8005a0c:	49ab      	ldr	r1, [pc, #684]	; (8005cbc <SetSetingsConfig+0x790>)
 8005a0e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005a12:	f103 031c 	add.w	r3, r3, #28
 8005a16:	6818      	ldr	r0, [r3, #0]
 8005a18:	f7fd fb36 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip_addr3", SetSettings.ip_addr3);
 8005a1c:	4ba1      	ldr	r3, [pc, #644]	; (8005ca4 <SetSetingsConfig+0x778>)
 8005a1e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fa fd8e 	bl	8000544 <__aeabi_i2d>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	ec43 2b10 	vmov	d0, r2, r3
 8005a30:	49a3      	ldr	r1, [pc, #652]	; (8005cc0 <SetSetingsConfig+0x794>)
 8005a32:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005a36:	f103 031c 	add.w	r3, r3, #28
 8005a3a:	6818      	ldr	r0, [r3, #0]
 8005a3c:	f7fd fb24 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "sb_mask0", SetSettings.sb_mask0);
 8005a40:	4b98      	ldr	r3, [pc, #608]	; (8005ca4 <SetSetingsConfig+0x778>)
 8005a42:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fa fd7c 	bl	8000544 <__aeabi_i2d>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	ec43 2b10 	vmov	d0, r2, r3
 8005a54:	499b      	ldr	r1, [pc, #620]	; (8005cc4 <SetSetingsConfig+0x798>)
 8005a56:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005a5a:	f103 031c 	add.w	r3, r3, #28
 8005a5e:	6818      	ldr	r0, [r3, #0]
 8005a60:	f7fd fb12 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "sb_mask1", SetSettings.sb_mask1);
 8005a64:	4b8f      	ldr	r3, [pc, #572]	; (8005ca4 <SetSetingsConfig+0x778>)
 8005a66:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fa fd6a 	bl	8000544 <__aeabi_i2d>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	ec43 2b10 	vmov	d0, r2, r3
 8005a78:	4993      	ldr	r1, [pc, #588]	; (8005cc8 <SetSetingsConfig+0x79c>)
 8005a7a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005a7e:	f103 031c 	add.w	r3, r3, #28
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	f7fd fb00 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "sb_mask2", SetSettings.sb_mask2);
 8005a88:	4b86      	ldr	r3, [pc, #536]	; (8005ca4 <SetSetingsConfig+0x778>)
 8005a8a:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fa fd58 	bl	8000544 <__aeabi_i2d>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	ec43 2b10 	vmov	d0, r2, r3
 8005a9c:	498b      	ldr	r1, [pc, #556]	; (8005ccc <SetSetingsConfig+0x7a0>)
 8005a9e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005aa2:	f103 031c 	add.w	r3, r3, #28
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	f7fd faee 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "sb_mask3", SetSettings.sb_mask3);
 8005aac:	4b7d      	ldr	r3, [pc, #500]	; (8005ca4 <SetSetingsConfig+0x778>)
 8005aae:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fa fd46 	bl	8000544 <__aeabi_i2d>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	ec43 2b10 	vmov	d0, r2, r3
 8005ac0:	4983      	ldr	r1, [pc, #524]	; (8005cd0 <SetSetingsConfig+0x7a4>)
 8005ac2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005ac6:	f103 031c 	add.w	r3, r3, #28
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	f7fd fadc 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "gateway0", SetSettings.gateway0);
 8005ad0:	4b74      	ldr	r3, [pc, #464]	; (8005ca4 <SetSetingsConfig+0x778>)
 8005ad2:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fa fd34 	bl	8000544 <__aeabi_i2d>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	ec43 2b10 	vmov	d0, r2, r3
 8005ae4:	497b      	ldr	r1, [pc, #492]	; (8005cd4 <SetSetingsConfig+0x7a8>)
 8005ae6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005aea:	f103 031c 	add.w	r3, r3, #28
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	f7fd faca 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "gateway1", SetSettings.gateway1);
 8005af4:	4b6b      	ldr	r3, [pc, #428]	; (8005ca4 <SetSetingsConfig+0x778>)
 8005af6:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fa fd22 	bl	8000544 <__aeabi_i2d>
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	ec43 2b10 	vmov	d0, r2, r3
 8005b08:	4973      	ldr	r1, [pc, #460]	; (8005cd8 <SetSetingsConfig+0x7ac>)
 8005b0a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005b0e:	f103 031c 	add.w	r3, r3, #28
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	f7fd fab8 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "gateway2", SetSettings.gateway2);
 8005b18:	4b62      	ldr	r3, [pc, #392]	; (8005ca4 <SetSetingsConfig+0x778>)
 8005b1a:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fa fd10 	bl	8000544 <__aeabi_i2d>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	ec43 2b10 	vmov	d0, r2, r3
 8005b2c:	496b      	ldr	r1, [pc, #428]	; (8005cdc <SetSetingsConfig+0x7b0>)
 8005b2e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005b32:	f103 031c 	add.w	r3, r3, #28
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	f7fd faa6 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "gateway3", SetSettings.gateway3);
 8005b3c:	4b59      	ldr	r3, [pc, #356]	; (8005ca4 <SetSetingsConfig+0x778>)
 8005b3e:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fa fcfe 	bl	8000544 <__aeabi_i2d>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	ec43 2b10 	vmov	d0, r2, r3
 8005b50:	4963      	ldr	r1, [pc, #396]	; (8005ce0 <SetSetingsConfig+0x7b4>)
 8005b52:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005b56:	f103 031c 	add.w	r3, r3, #28
 8005b5a:	6818      	ldr	r0, [r3, #0]
 8005b5c:	f7fd fa94 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr0", SetSettings.macaddr0);
 8005b60:	4b50      	ldr	r3, [pc, #320]	; (8005ca4 <SetSetingsConfig+0x778>)
 8005b62:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fa fcdc 	bl	8000524 <__aeabi_ui2d>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	ec43 2b10 	vmov	d0, r2, r3
 8005b74:	495b      	ldr	r1, [pc, #364]	; (8005ce4 <SetSetingsConfig+0x7b8>)
 8005b76:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005b7a:	f103 031c 	add.w	r3, r3, #28
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	f7fd fa82 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr1", SetSettings.macaddr1);
 8005b84:	4b47      	ldr	r3, [pc, #284]	; (8005ca4 <SetSetingsConfig+0x778>)
 8005b86:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fa fcca 	bl	8000524 <__aeabi_ui2d>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	ec43 2b10 	vmov	d0, r2, r3
 8005b98:	4953      	ldr	r1, [pc, #332]	; (8005ce8 <SetSetingsConfig+0x7bc>)
 8005b9a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005b9e:	f103 031c 	add.w	r3, r3, #28
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	f7fd fa70 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr2", SetSettings.macaddr2);
 8005ba8:	4b3e      	ldr	r3, [pc, #248]	; (8005ca4 <SetSetingsConfig+0x778>)
 8005baa:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fa fcb8 	bl	8000524 <__aeabi_ui2d>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	ec43 2b10 	vmov	d0, r2, r3
 8005bbc:	494b      	ldr	r1, [pc, #300]	; (8005cec <SetSetingsConfig+0x7c0>)
 8005bbe:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005bc2:	f103 031c 	add.w	r3, r3, #28
 8005bc6:	6818      	ldr	r0, [r3, #0]
 8005bc8:	f7fd fa5e 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr3", SetSettings.macaddr3);
 8005bcc:	4b35      	ldr	r3, [pc, #212]	; (8005ca4 <SetSetingsConfig+0x778>)
 8005bce:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fa fca6 	bl	8000524 <__aeabi_ui2d>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	ec43 2b10 	vmov	d0, r2, r3
 8005be0:	4943      	ldr	r1, [pc, #268]	; (8005cf0 <SetSetingsConfig+0x7c4>)
 8005be2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005be6:	f103 031c 	add.w	r3, r3, #28
 8005bea:	6818      	ldr	r0, [r3, #0]
 8005bec:	f7fd fa4c 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr4", SetSettings.macaddr4);
 8005bf0:	4b2c      	ldr	r3, [pc, #176]	; (8005ca4 <SetSetingsConfig+0x778>)
 8005bf2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fa fc94 	bl	8000524 <__aeabi_ui2d>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	ec43 2b10 	vmov	d0, r2, r3
 8005c04:	493b      	ldr	r1, [pc, #236]	; (8005cf4 <SetSetingsConfig+0x7c8>)
 8005c06:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005c0a:	f103 031c 	add.w	r3, r3, #28
 8005c0e:	6818      	ldr	r0, [r3, #0]
 8005c10:	f7fd fa3a 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr5", SetSettings.macaddr5);
 8005c14:	4b23      	ldr	r3, [pc, #140]	; (8005ca4 <SetSetingsConfig+0x778>)
 8005c16:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fa fc82 	bl	8000524 <__aeabi_ui2d>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	ec43 2b10 	vmov	d0, r2, r3
 8005c28:	4933      	ldr	r1, [pc, #204]	; (8005cf8 <SetSetingsConfig+0x7cc>)
 8005c2a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005c2e:	f103 031c 	add.w	r3, r3, #28
 8005c32:	6818      	ldr	r0, [r3, #0]
 8005c34:	f7fd fa28 	bl	8003088 <cJSON_AddNumberToObject>

		out_str = cJSON_PrintUnformatted(root_obj);
 8005c38:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005c3c:	f103 031c 	add.w	r3, r3, #28
 8005c40:	6818      	ldr	r0, [r3, #0]
 8005c42:	f7fc fb5f 	bl	8002304 <cJSON_PrintUnformatted>
 8005c46:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005c4a:	f103 0318 	add.w	r3, r3, #24
 8005c4e:	6018      	str	r0, [r3, #0]
		fresult = f_write(&fil, (const void*) out_str, strlen(out_str), &Byteswritten);
 8005c50:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005c54:	f103 0318 	add.w	r3, r3, #24
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	f7fa fac3 	bl	80001e4 <strlen>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005c64:	f103 0310 	add.w	r3, r3, #16
 8005c68:	4638      	mov	r0, r7
 8005c6a:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8005c6e:	f101 0118 	add.w	r1, r1, #24
 8005c72:	6809      	ldr	r1, [r1, #0]
 8005c74:	f00d fa5d 	bl	8013132 <f_write>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005c7e:	f102 0217 	add.w	r2, r2, #23
 8005c82:	7013      	strb	r3, [r2, #0]
		free(out_str);
 8005c84:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005c88:	f103 0318 	add.w	r3, r3, #24
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	f020 fc75 	bl	802657c <free>

		if(fresult == FR_OK){

		}

		cJSON_Delete(root_obj);
 8005c92:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005c96:	f103 031c 	add.w	r3, r3, #28
 8005c9a:	6818      	ldr	r0, [r3, #0]
 8005c9c:	e02e      	b.n	8005cfc <SetSetingsConfig+0x7d0>
 8005c9e:	bf00      	nop
 8005ca0:	0802be00 	.word	0x0802be00
 8005ca4:	20005b90 	.word	0x20005b90
 8005ca8:	0802be0c 	.word	0x0802be0c
 8005cac:	0802be18 	.word	0x0802be18
 8005cb0:	0802be24 	.word	0x0802be24
 8005cb4:	0802be30 	.word	0x0802be30
 8005cb8:	0802be3c 	.word	0x0802be3c
 8005cbc:	0802be48 	.word	0x0802be48
 8005cc0:	0802be54 	.word	0x0802be54
 8005cc4:	0802be60 	.word	0x0802be60
 8005cc8:	0802be6c 	.word	0x0802be6c
 8005ccc:	0802be78 	.word	0x0802be78
 8005cd0:	0802be84 	.word	0x0802be84
 8005cd4:	0802be90 	.word	0x0802be90
 8005cd8:	0802be9c 	.word	0x0802be9c
 8005cdc:	0802bea8 	.word	0x0802bea8
 8005ce0:	0802beb4 	.word	0x0802beb4
 8005ce4:	0802bec0 	.word	0x0802bec0
 8005ce8:	0802becc 	.word	0x0802becc
 8005cec:	0802bed8 	.word	0x0802bed8
 8005cf0:	0802bee4 	.word	0x0802bee4
 8005cf4:	0802bef0 	.word	0x0802bef0
 8005cf8:	0802befc 	.word	0x0802befc
 8005cfc:	f7fb fa30 	bl	8001160 <cJSON_Delete>
		memset(fsbuffer, '\0', sizeof(fsbuffer));
 8005d00:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005d04:	2100      	movs	r1, #0
 8005d06:	4806      	ldr	r0, [pc, #24]	; (8005d20 <SetSetingsConfig+0x7f4>)
 8005d08:	f020 fc76 	bl	80265f8 <memset>
		f_close(&fil);
 8005d0c:	463b      	mov	r3, r7
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f00d fc5b 	bl	80135ca <f_close>
	}
}
 8005d14:	bf00      	nop
 8005d16:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	20000778 	.word	0x20000778
 8005d24:	00000000 	.word	0x00000000

08005d28 <StartSetingsConfig>:

// Первый запуск
void StartSetingsConfig() {
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8005d2e:	af00      	add	r7, sp, #0
	cJSON *root_obj = NULL;
 8005d30:	2300      	movs	r3, #0
 8005d32:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005d36:	f102 021c 	add.w	r2, r2, #28
 8005d3a:	6013      	str	r3, [r2, #0]
	char *out_str = NULL;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005d42:	f102 0218 	add.w	r2, r2, #24
 8005d46:	6013      	str	r3, [r2, #0]
	FRESULT fresult;
	UINT Byteswritten; // File read/write count
	FIL fil; // File
	if (f_open(&fil, (const TCHAR*) "setings.ini", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 8005d48:	463b      	mov	r3, r7
 8005d4a:	220a      	movs	r2, #10
 8005d4c:	49d0      	ldr	r1, [pc, #832]	; (8006090 <StartSetingsConfig+0x368>)
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f00c fdfe 	bl	8012950 <f_open>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f040 82f9 	bne.w	800634e <StartSetingsConfig+0x626>
		printf("f_open! create setings.ini \r\n");
 8005d5c:	48cd      	ldr	r0, [pc, #820]	; (8006094 <StartSetingsConfig+0x36c>)
 8005d5e:	f021 f801 	bl	8026d64 <puts>
		root_obj = cJSON_CreateObject();
 8005d62:	f7fd fa5b 	bl	800321c <cJSON_CreateObject>
 8005d66:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005d6a:	f103 031c 	add.w	r3, r3, #28
 8005d6e:	6018      	str	r0, [r3, #0]

		cJSON_AddStringToObject(root_obj, "adm_name", ADM_NAME);
 8005d70:	4ac9      	ldr	r2, [pc, #804]	; (8006098 <StartSetingsConfig+0x370>)
 8005d72:	49ca      	ldr	r1, [pc, #808]	; (800609c <StartSetingsConfig+0x374>)
 8005d74:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005d78:	f103 031c 	add.w	r3, r3, #28
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	f7fd f9a7 	bl	80030d0 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "adm_pswd", ADM_PASS); // Пароль для авторизации
 8005d82:	4ac7      	ldr	r2, [pc, #796]	; (80060a0 <StartSetingsConfig+0x378>)
 8005d84:	49c7      	ldr	r1, [pc, #796]	; (80060a4 <StartSetingsConfig+0x37c>)
 8005d86:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005d8a:	f103 031c 	add.w	r3, r3, #28
 8005d8e:	6818      	ldr	r0, [r3, #0]
 8005d90:	f7fd f99e 	bl	80030d0 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "token", "");
 8005d94:	4ac4      	ldr	r2, [pc, #784]	; (80060a8 <StartSetingsConfig+0x380>)
 8005d96:	49c5      	ldr	r1, [pc, #788]	; (80060ac <StartSetingsConfig+0x384>)
 8005d98:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005d9c:	f103 031c 	add.w	r3, r3, #28
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	f7fd f995 	bl	80030d0 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "lang", LANG); //
 8005da6:	4ac2      	ldr	r2, [pc, #776]	; (80060b0 <StartSetingsConfig+0x388>)
 8005da8:	49c2      	ldr	r1, [pc, #776]	; (80060b4 <StartSetingsConfig+0x38c>)
 8005daa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005dae:	f103 031c 	add.w	r3, r3, #28
 8005db2:	6818      	ldr	r0, [r3, #0]
 8005db4:	f7fd f98c 	bl	80030d0 <cJSON_AddStringToObject>
		cJSON_AddNumberToObject(root_obj, "timezone", 0); // UTC
 8005db8:	ed9f 0ba7 	vldr	d0, [pc, #668]	; 8006058 <StartSetingsConfig+0x330>
 8005dbc:	49be      	ldr	r1, [pc, #760]	; (80060b8 <StartSetingsConfig+0x390>)
 8005dbe:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005dc2:	f103 031c 	add.w	r3, r3, #28
 8005dc6:	6818      	ldr	r0, [r3, #0]
 8005dc8:	f7fd f95e 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "lon_de", 0); // Longitude / Долгота
 8005dcc:	ed9f 0ba2 	vldr	d0, [pc, #648]	; 8006058 <StartSetingsConfig+0x330>
 8005dd0:	49ba      	ldr	r1, [pc, #744]	; (80060bc <StartSetingsConfig+0x394>)
 8005dd2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005dd6:	f103 031c 	add.w	r3, r3, #28
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	f7fd f954 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "lat_de", 0); // Latitude / Широта
 8005de0:	ed9f 0b9d 	vldr	d0, [pc, #628]	; 8006058 <StartSetingsConfig+0x330>
 8005de4:	49b6      	ldr	r1, [pc, #728]	; (80060c0 <StartSetingsConfig+0x398>)
 8005de6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005dea:	f103 031c 	add.w	r3, r3, #28
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	f7fd f94a 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip1_sntp0", 0); // SMTP Server primary
 8005df4:	ed9f 0b98 	vldr	d0, [pc, #608]	; 8006058 <StartSetingsConfig+0x330>
 8005df8:	49b2      	ldr	r1, [pc, #712]	; (80060c4 <StartSetingsConfig+0x39c>)
 8005dfa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005dfe:	f103 031c 	add.w	r3, r3, #28
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	f7fd f940 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip1_sntp1", 0); // SMTP Server primary
 8005e08:	ed9f 0b93 	vldr	d0, [pc, #588]	; 8006058 <StartSetingsConfig+0x330>
 8005e0c:	49ae      	ldr	r1, [pc, #696]	; (80060c8 <StartSetingsConfig+0x3a0>)
 8005e0e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005e12:	f103 031c 	add.w	r3, r3, #28
 8005e16:	6818      	ldr	r0, [r3, #0]
 8005e18:	f7fd f936 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip1_sntp2", 0); // SMTP Server primary
 8005e1c:	ed9f 0b8e 	vldr	d0, [pc, #568]	; 8006058 <StartSetingsConfig+0x330>
 8005e20:	49aa      	ldr	r1, [pc, #680]	; (80060cc <StartSetingsConfig+0x3a4>)
 8005e22:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005e26:	f103 031c 	add.w	r3, r3, #28
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	f7fd f92c 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip1_sntp3", 0); // SMTP Server primary
 8005e30:	ed9f 0b89 	vldr	d0, [pc, #548]	; 8006058 <StartSetingsConfig+0x330>
 8005e34:	49a6      	ldr	r1, [pc, #664]	; (80060d0 <StartSetingsConfig+0x3a8>)
 8005e36:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005e3a:	f103 031c 	add.w	r3, r3, #28
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	f7fd f922 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip2_sntp0", 0); // SMTP Server secondary
 8005e44:	ed9f 0b84 	vldr	d0, [pc, #528]	; 8006058 <StartSetingsConfig+0x330>
 8005e48:	49a2      	ldr	r1, [pc, #648]	; (80060d4 <StartSetingsConfig+0x3ac>)
 8005e4a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005e4e:	f103 031c 	add.w	r3, r3, #28
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	f7fd f918 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip2_sntp1", 0); // SMTP Server secondary
 8005e58:	ed9f 0b7f 	vldr	d0, [pc, #508]	; 8006058 <StartSetingsConfig+0x330>
 8005e5c:	499e      	ldr	r1, [pc, #632]	; (80060d8 <StartSetingsConfig+0x3b0>)
 8005e5e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005e62:	f103 031c 	add.w	r3, r3, #28
 8005e66:	6818      	ldr	r0, [r3, #0]
 8005e68:	f7fd f90e 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip2_sntp2", 0); // SMTP Server secondary
 8005e6c:	ed9f 0b7a 	vldr	d0, [pc, #488]	; 8006058 <StartSetingsConfig+0x330>
 8005e70:	499a      	ldr	r1, [pc, #616]	; (80060dc <StartSetingsConfig+0x3b4>)
 8005e72:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005e76:	f103 031c 	add.w	r3, r3, #28
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	f7fd f904 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip2_sntp3", 0); // SMTP Server secondary
 8005e80:	ed9f 0b75 	vldr	d0, [pc, #468]	; 8006058 <StartSetingsConfig+0x330>
 8005e84:	4996      	ldr	r1, [pc, #600]	; (80060e0 <StartSetingsConfig+0x3b8>)
 8005e86:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005e8a:	f103 031c 	add.w	r3, r3, #28
 8005e8e:	6818      	ldr	r0, [r3, #0]
 8005e90:	f7fd f8fa 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip3_sntp0", 0); // SMTP Server teriary
 8005e94:	ed9f 0b70 	vldr	d0, [pc, #448]	; 8006058 <StartSetingsConfig+0x330>
 8005e98:	4992      	ldr	r1, [pc, #584]	; (80060e4 <StartSetingsConfig+0x3bc>)
 8005e9a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005e9e:	f103 031c 	add.w	r3, r3, #28
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	f7fd f8f0 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip3_sntp1", 0); // SMTP Server teriary
 8005ea8:	ed9f 0b6b 	vldr	d0, [pc, #428]	; 8006058 <StartSetingsConfig+0x330>
 8005eac:	498e      	ldr	r1, [pc, #568]	; (80060e8 <StartSetingsConfig+0x3c0>)
 8005eae:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005eb2:	f103 031c 	add.w	r3, r3, #28
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	f7fd f8e6 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip3_sntp2", 0); // SMTP Server teriary
 8005ebc:	ed9f 0b66 	vldr	d0, [pc, #408]	; 8006058 <StartSetingsConfig+0x330>
 8005ec0:	498a      	ldr	r1, [pc, #552]	; (80060ec <StartSetingsConfig+0x3c4>)
 8005ec2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005ec6:	f103 031c 	add.w	r3, r3, #28
 8005eca:	6818      	ldr	r0, [r3, #0]
 8005ecc:	f7fd f8dc 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip3_sntp3", 0); // SMTP Server teriary
 8005ed0:	ed9f 0b61 	vldr	d0, [pc, #388]	; 8006058 <StartSetingsConfig+0x330>
 8005ed4:	4986      	ldr	r1, [pc, #536]	; (80060f0 <StartSetingsConfig+0x3c8>)
 8005ed6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005eda:	f103 031c 	add.w	r3, r3, #28
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	f7fd f8d2 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "check_mqtt", 0); // check MQTT on/off
 8005ee4:	ed9f 0b5c 	vldr	d0, [pc, #368]	; 8006058 <StartSetingsConfig+0x330>
 8005ee8:	4982      	ldr	r1, [pc, #520]	; (80060f4 <StartSetingsConfig+0x3cc>)
 8005eea:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005eee:	f103 031c 	add.w	r3, r3, #28
 8005ef2:	6818      	ldr	r0, [r3, #0]
 8005ef4:	f7fd f8c8 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_prt", MQTT_PRT); // Your MQTT broker port (default port is set to 1883)
 8005ef8:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8006060 <StartSetingsConfig+0x338>
 8005efc:	497e      	ldr	r1, [pc, #504]	; (80060f8 <StartSetingsConfig+0x3d0>)
 8005efe:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005f02:	f103 031c 	add.w	r3, r3, #28
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	f7fd f8be 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_qos", MQTT_QOS); // Your MQTT QOS (default QOS is set to 0)
 8005f0c:	ed9f 0b52 	vldr	d0, [pc, #328]	; 8006058 <StartSetingsConfig+0x330>
 8005f10:	497a      	ldr	r1, [pc, #488]	; (80060fc <StartSetingsConfig+0x3d4>)
 8005f12:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005f16:	f103 031c 	add.w	r3, r3, #28
 8005f1a:	6818      	ldr	r0, [r3, #0]
 8005f1c:	f7fd f8b4 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddStringToObject(root_obj, "mqtt_clt", ""); // Device's unique identifier.
 8005f20:	4a61      	ldr	r2, [pc, #388]	; (80060a8 <StartSetingsConfig+0x380>)
 8005f22:	4977      	ldr	r1, [pc, #476]	; (8006100 <StartSetingsConfig+0x3d8>)
 8005f24:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005f28:	f103 031c 	add.w	r3, r3, #28
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	f7fd f8cf 	bl	80030d0 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "mqtt_usr", ""); // MQTT Имя пользователя для авторизации
 8005f32:	4a5d      	ldr	r2, [pc, #372]	; (80060a8 <StartSetingsConfig+0x380>)
 8005f34:	4973      	ldr	r1, [pc, #460]	; (8006104 <StartSetingsConfig+0x3dc>)
 8005f36:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005f3a:	f103 031c 	add.w	r3, r3, #28
 8005f3e:	6818      	ldr	r0, [r3, #0]
 8005f40:	f7fd f8c6 	bl	80030d0 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "mqtt_pswd", ""); // MQTT Пароль для авторизации
 8005f44:	4a58      	ldr	r2, [pc, #352]	; (80060a8 <StartSetingsConfig+0x380>)
 8005f46:	4970      	ldr	r1, [pc, #448]	; (8006108 <StartSetingsConfig+0x3e0>)
 8005f48:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005f4c:	f103 031c 	add.w	r3, r3, #28
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	f7fd f8bd 	bl	80030d0 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "mqtt_tpc", ""); // Unique identifying topic for your device (kitchen-light) It is recommended to use a single word for the topic.
 8005f56:	4a54      	ldr	r2, [pc, #336]	; (80060a8 <StartSetingsConfig+0x380>)
 8005f58:	496c      	ldr	r1, [pc, #432]	; (800610c <StartSetingsConfig+0x3e4>)
 8005f5a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005f5e:	f103 031c 	add.w	r3, r3, #28
 8005f62:	6818      	ldr	r0, [r3, #0]
 8005f64:	f7fd f8b4 	bl	80030d0 <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root_obj, "mqtt_ftpc", ""); // Полный топик for example lights/%prefix%/%topic%/
 8005f68:	4a4f      	ldr	r2, [pc, #316]	; (80060a8 <StartSetingsConfig+0x380>)
 8005f6a:	4969      	ldr	r1, [pc, #420]	; (8006110 <StartSetingsConfig+0x3e8>)
 8005f6c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005f70:	f103 031c 	add.w	r3, r3, #28
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	f7fd f8ab 	bl	80030d0 <cJSON_AddStringToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_hst0", 0); // Your MQTT broker address or IP
 8005f7a:	ed9f 0b37 	vldr	d0, [pc, #220]	; 8006058 <StartSetingsConfig+0x330>
 8005f7e:	4965      	ldr	r1, [pc, #404]	; (8006114 <StartSetingsConfig+0x3ec>)
 8005f80:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005f84:	f103 031c 	add.w	r3, r3, #28
 8005f88:	6818      	ldr	r0, [r3, #0]
 8005f8a:	f7fd f87d 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_hst1", 0); // Your MQTT broker address or IP
 8005f8e:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8006058 <StartSetingsConfig+0x330>
 8005f92:	4961      	ldr	r1, [pc, #388]	; (8006118 <StartSetingsConfig+0x3f0>)
 8005f94:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005f98:	f103 031c 	add.w	r3, r3, #28
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	f7fd f873 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_hst2", 0); // Your MQTT broker address or IP
 8005fa2:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 8006058 <StartSetingsConfig+0x330>
 8005fa6:	495d      	ldr	r1, [pc, #372]	; (800611c <StartSetingsConfig+0x3f4>)
 8005fa8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005fac:	f103 031c 	add.w	r3, r3, #28
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	f7fd f869 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "mqtt_hst3", 0); // Your MQTT broker address or IP
 8005fb6:	ed9f 0b28 	vldr	d0, [pc, #160]	; 8006058 <StartSetingsConfig+0x330>
 8005fba:	4959      	ldr	r1, [pc, #356]	; (8006120 <StartSetingsConfig+0x3f8>)
 8005fbc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005fc0:	f103 031c 	add.w	r3, r3, #28
 8005fc4:	6818      	ldr	r0, [r3, #0]
 8005fc6:	f7fd f85f 	bl	8003088 <cJSON_AddNumberToObject>
		// Настройки IP адреса
		cJSON_AddNumberToObject(root_obj, "check_ip", 0); // check DHCP on/off
 8005fca:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8006058 <StartSetingsConfig+0x330>
 8005fce:	4955      	ldr	r1, [pc, #340]	; (8006124 <StartSetingsConfig+0x3fc>)
 8005fd0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005fd4:	f103 031c 	add.w	r3, r3, #28
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	f7fd f855 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip_addr0", IP_ADDR0); // IP адрес
 8005fde:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006068 <StartSetingsConfig+0x340>
 8005fe2:	4951      	ldr	r1, [pc, #324]	; (8006128 <StartSetingsConfig+0x400>)
 8005fe4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005fe8:	f103 031c 	add.w	r3, r3, #28
 8005fec:	6818      	ldr	r0, [r3, #0]
 8005fee:	f7fd f84b 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip_addr1", IP_ADDR1); // IP адрес
 8005ff2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8006070 <StartSetingsConfig+0x348>
 8005ff6:	494d      	ldr	r1, [pc, #308]	; (800612c <StartSetingsConfig+0x404>)
 8005ff8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005ffc:	f103 031c 	add.w	r3, r3, #28
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	f7fd f841 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip_addr2", IP_ADDR2); // IP адрес
 8006006:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006078 <StartSetingsConfig+0x350>
 800600a:	4949      	ldr	r1, [pc, #292]	; (8006130 <StartSetingsConfig+0x408>)
 800600c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006010:	f103 031c 	add.w	r3, r3, #28
 8006014:	6818      	ldr	r0, [r3, #0]
 8006016:	f7fd f837 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "ip_addr3", IP_ADDR3); // IP адрес
 800601a:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8006080 <StartSetingsConfig+0x358>
 800601e:	4945      	ldr	r1, [pc, #276]	; (8006134 <StartSetingsConfig+0x40c>)
 8006020:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006024:	f103 031c 	add.w	r3, r3, #28
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	f7fd f82d 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "sb_mask0", SB_MASK0);	// Маска сети
 800602e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8006088 <StartSetingsConfig+0x360>
 8006032:	4941      	ldr	r1, [pc, #260]	; (8006138 <StartSetingsConfig+0x410>)
 8006034:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006038:	f103 031c 	add.w	r3, r3, #28
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	f7fd f823 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "sb_mask1", SB_MASK1);	// Маска сети
 8006042:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8006088 <StartSetingsConfig+0x360>
 8006046:	493d      	ldr	r1, [pc, #244]	; (800613c <StartSetingsConfig+0x414>)
 8006048:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800604c:	f103 031c 	add.w	r3, r3, #28
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	f7fd f819 	bl	8003088 <cJSON_AddNumberToObject>
 8006056:	e073      	b.n	8006140 <StartSetingsConfig+0x418>
	...
 8006064:	409d6c00 	.word	0x409d6c00
 8006068:	00000000 	.word	0x00000000
 800606c:	40680000 	.word	0x40680000
 8006070:	00000000 	.word	0x00000000
 8006074:	40650000 	.word	0x40650000
 8006078:	00000000 	.word	0x00000000
 800607c:	40320000 	.word	0x40320000
 8006080:	00000000 	.word	0x00000000
 8006084:	403b0000 	.word	0x403b0000
 8006088:	00000000 	.word	0x00000000
 800608c:	406fe000 	.word	0x406fe000
 8006090:	0802bcc0 	.word	0x0802bcc0
 8006094:	0802bf08 	.word	0x0802bf08
 8006098:	0802bf28 	.word	0x0802bf28
 800609c:	0802bccc 	.word	0x0802bccc
 80060a0:	0802bf30 	.word	0x0802bf30
 80060a4:	0802bcd8 	.word	0x0802bcd8
 80060a8:	0802bf3c 	.word	0x0802bf3c
 80060ac:	0802bce4 	.word	0x0802bce4
 80060b0:	0802bf40 	.word	0x0802bf40
 80060b4:	0802bcec 	.word	0x0802bcec
 80060b8:	0802bcf4 	.word	0x0802bcf4
 80060bc:	0802bd00 	.word	0x0802bd00
 80060c0:	0802bd08 	.word	0x0802bd08
 80060c4:	0802bd10 	.word	0x0802bd10
 80060c8:	0802bd1c 	.word	0x0802bd1c
 80060cc:	0802bd28 	.word	0x0802bd28
 80060d0:	0802bd34 	.word	0x0802bd34
 80060d4:	0802bd40 	.word	0x0802bd40
 80060d8:	0802bd4c 	.word	0x0802bd4c
 80060dc:	0802bd58 	.word	0x0802bd58
 80060e0:	0802bd64 	.word	0x0802bd64
 80060e4:	0802bd70 	.word	0x0802bd70
 80060e8:	0802bd7c 	.word	0x0802bd7c
 80060ec:	0802bd88 	.word	0x0802bd88
 80060f0:	0802bd94 	.word	0x0802bd94
 80060f4:	0802bda0 	.word	0x0802bda0
 80060f8:	0802bdac 	.word	0x0802bdac
 80060fc:	0802bf44 	.word	0x0802bf44
 8006100:	0802bdb8 	.word	0x0802bdb8
 8006104:	0802bdc4 	.word	0x0802bdc4
 8006108:	0802bdd0 	.word	0x0802bdd0
 800610c:	0802bddc 	.word	0x0802bddc
 8006110:	0802bde8 	.word	0x0802bde8
 8006114:	0802bdf4 	.word	0x0802bdf4
 8006118:	0802be00 	.word	0x0802be00
 800611c:	0802be0c 	.word	0x0802be0c
 8006120:	0802be18 	.word	0x0802be18
 8006124:	0802be24 	.word	0x0802be24
 8006128:	0802be30 	.word	0x0802be30
 800612c:	0802be3c 	.word	0x0802be3c
 8006130:	0802be48 	.word	0x0802be48
 8006134:	0802be54 	.word	0x0802be54
 8006138:	0802be60 	.word	0x0802be60
 800613c:	0802be6c 	.word	0x0802be6c
		cJSON_AddNumberToObject(root_obj, "sb_mask2", SB_MASK2);	// Маска сети
 8006140:	ed9f 0b85 	vldr	d0, [pc, #532]	; 8006358 <StartSetingsConfig+0x630>
 8006144:	4990      	ldr	r1, [pc, #576]	; (8006388 <StartSetingsConfig+0x660>)
 8006146:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800614a:	f103 031c 	add.w	r3, r3, #28
 800614e:	6818      	ldr	r0, [r3, #0]
 8006150:	f7fc ff9a 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "sb_mask3", SB_MASK3);	// Маска сети
 8006154:	ed9f 0b82 	vldr	d0, [pc, #520]	; 8006360 <StartSetingsConfig+0x638>
 8006158:	498c      	ldr	r1, [pc, #560]	; (800638c <StartSetingsConfig+0x664>)
 800615a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800615e:	f103 031c 	add.w	r3, r3, #28
 8006162:	6818      	ldr	r0, [r3, #0]
 8006164:	f7fc ff90 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "gateway0", GATEWAY0); // Шлюз
 8006168:	ed9f 0b7f 	vldr	d0, [pc, #508]	; 8006368 <StartSetingsConfig+0x640>
 800616c:	4988      	ldr	r1, [pc, #544]	; (8006390 <StartSetingsConfig+0x668>)
 800616e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006172:	f103 031c 	add.w	r3, r3, #28
 8006176:	6818      	ldr	r0, [r3, #0]
 8006178:	f7fc ff86 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "gateway1", GATEWAY1); // Шлюз
 800617c:	ed9f 0b7c 	vldr	d0, [pc, #496]	; 8006370 <StartSetingsConfig+0x648>
 8006180:	4984      	ldr	r1, [pc, #528]	; (8006394 <StartSetingsConfig+0x66c>)
 8006182:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006186:	f103 031c 	add.w	r3, r3, #28
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	f7fc ff7c 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "gateway2", GATEWAY2); // Шлюз
 8006190:	ed9f 0b79 	vldr	d0, [pc, #484]	; 8006378 <StartSetingsConfig+0x650>
 8006194:	4980      	ldr	r1, [pc, #512]	; (8006398 <StartSetingsConfig+0x670>)
 8006196:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800619a:	f103 031c 	add.w	r3, r3, #28
 800619e:	6818      	ldr	r0, [r3, #0]
 80061a0:	f7fc ff72 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "gateway3", GATEWAY3); // Шлюз
 80061a4:	ed9f 0b76 	vldr	d0, [pc, #472]	; 8006380 <StartSetingsConfig+0x658>
 80061a8:	497c      	ldr	r1, [pc, #496]	; (800639c <StartSetingsConfig+0x674>)
 80061aa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80061ae:	f103 031c 	add.w	r3, r3, #28
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	f7fc ff68 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr0", 0); // MAC address
 80061b8:	ed9f 0b69 	vldr	d0, [pc, #420]	; 8006360 <StartSetingsConfig+0x638>
 80061bc:	4978      	ldr	r1, [pc, #480]	; (80063a0 <StartSetingsConfig+0x678>)
 80061be:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80061c2:	f103 031c 	add.w	r3, r3, #28
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	f7fc ff5e 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr1", 0); // MAC address
 80061cc:	ed9f 0b64 	vldr	d0, [pc, #400]	; 8006360 <StartSetingsConfig+0x638>
 80061d0:	4974      	ldr	r1, [pc, #464]	; (80063a4 <StartSetingsConfig+0x67c>)
 80061d2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80061d6:	f103 031c 	add.w	r3, r3, #28
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	f7fc ff54 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr2", 0); // MAC address
 80061e0:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8006360 <StartSetingsConfig+0x638>
 80061e4:	4970      	ldr	r1, [pc, #448]	; (80063a8 <StartSetingsConfig+0x680>)
 80061e6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80061ea:	f103 031c 	add.w	r3, r3, #28
 80061ee:	6818      	ldr	r0, [r3, #0]
 80061f0:	f7fc ff4a 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr3", 0); // MAC address
 80061f4:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 8006360 <StartSetingsConfig+0x638>
 80061f8:	496c      	ldr	r1, [pc, #432]	; (80063ac <StartSetingsConfig+0x684>)
 80061fa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80061fe:	f103 031c 	add.w	r3, r3, #28
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	f7fc ff40 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr4", 0); // MAC address
 8006208:	ed9f 0b55 	vldr	d0, [pc, #340]	; 8006360 <StartSetingsConfig+0x638>
 800620c:	4968      	ldr	r1, [pc, #416]	; (80063b0 <StartSetingsConfig+0x688>)
 800620e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006212:	f103 031c 	add.w	r3, r3, #28
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	f7fc ff36 	bl	8003088 <cJSON_AddNumberToObject>
		cJSON_AddNumberToObject(root_obj, "macaddr5", 0); // MAC address
 800621c:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006360 <StartSetingsConfig+0x638>
 8006220:	4964      	ldr	r1, [pc, #400]	; (80063b4 <StartSetingsConfig+0x68c>)
 8006222:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006226:	f103 031c 	add.w	r3, r3, #28
 800622a:	6818      	ldr	r0, [r3, #0]
 800622c:	f7fc ff2c 	bl	8003088 <cJSON_AddNumberToObject>

		out_str = cJSON_PrintUnformatted(root_obj);
 8006230:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006234:	f103 031c 	add.w	r3, r3, #28
 8006238:	6818      	ldr	r0, [r3, #0]
 800623a:	f7fc f863 	bl	8002304 <cJSON_PrintUnformatted>
 800623e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006242:	f103 0318 	add.w	r3, r3, #24
 8006246:	6018      	str	r0, [r3, #0]
		fresult = f_write(&fil, (const void*) out_str, strlen(out_str), &Byteswritten);
 8006248:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800624c:	f103 0318 	add.w	r3, r3, #24
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	f7f9 ffc7 	bl	80001e4 <strlen>
 8006256:	4602      	mov	r2, r0
 8006258:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800625c:	f103 0310 	add.w	r3, r3, #16
 8006260:	4638      	mov	r0, r7
 8006262:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8006266:	f101 0118 	add.w	r1, r1, #24
 800626a:	6809      	ldr	r1, [r1, #0]
 800626c:	f00c ff61 	bl	8013132 <f_write>
 8006270:	4603      	mov	r3, r0
 8006272:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006276:	f102 0217 	add.w	r2, r2, #23
 800627a:	7013      	strb	r3, [r2, #0]
		free(out_str);
 800627c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006280:	f103 0318 	add.w	r3, r3, #24
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	f020 f979 	bl	802657c <free>

		if(fresult == FR_OK){

		}

		printf("f_open! setings.ini \r\n");
 800628a:	484b      	ldr	r0, [pc, #300]	; (80063b8 <StartSetingsConfig+0x690>)
 800628c:	f020 fd6a 	bl	8026d64 <puts>

		cJSON_Delete(root_obj);
 8006290:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006294:	f103 031c 	add.w	r3, r3, #28
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	f7fa ff61 	bl	8001160 <cJSON_Delete>
		memset(fsbuffer, '\0', sizeof(fsbuffer));
 800629e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80062a2:	2100      	movs	r1, #0
 80062a4:	4845      	ldr	r0, [pc, #276]	; (80063bc <StartSetingsConfig+0x694>)
 80062a6:	f020 f9a7 	bl	80265f8 <memset>
		f_close(&fil);
 80062aa:	463b      	mov	r3, r7
 80062ac:	4618      	mov	r0, r3
 80062ae:	f00d f98c 	bl	80135ca <f_close>

		strcpy(SetSettings.lang, LANG);
 80062b2:	4b43      	ldr	r3, [pc, #268]	; (80063c0 <StartSetingsConfig+0x698>)
 80062b4:	4a43      	ldr	r2, [pc, #268]	; (80063c4 <StartSetingsConfig+0x69c>)
 80062b6:	3324      	adds	r3, #36	; 0x24
 80062b8:	6812      	ldr	r2, [r2, #0]
 80062ba:	4611      	mov	r1, r2
 80062bc:	8019      	strh	r1, [r3, #0]
 80062be:	3302      	adds	r3, #2
 80062c0:	0c12      	lsrs	r2, r2, #16
 80062c2:	701a      	strb	r2, [r3, #0]
		strcpy(SetSettings.adm_name, ADM_NAME);
 80062c4:	4b3e      	ldr	r3, [pc, #248]	; (80063c0 <StartSetingsConfig+0x698>)
 80062c6:	4a40      	ldr	r2, [pc, #256]	; (80063c8 <StartSetingsConfig+0x6a0>)
 80062c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062cc:	6018      	str	r0, [r3, #0]
 80062ce:	3304      	adds	r3, #4
 80062d0:	8019      	strh	r1, [r3, #0]
		strcpy(SetSettings.adm_pswd, ADM_PASS);
 80062d2:	4a3e      	ldr	r2, [pc, #248]	; (80063cc <StartSetingsConfig+0x6a4>)
 80062d4:	4b3e      	ldr	r3, [pc, #248]	; (80063d0 <StartSetingsConfig+0x6a8>)
 80062d6:	cb03      	ldmia	r3!, {r0, r1}
 80062d8:	6010      	str	r0, [r2, #0]
 80062da:	6051      	str	r1, [r2, #4]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	7213      	strb	r3, [r2, #8]
		SetSettings.ip_addr0 = IP_ADDR0;
 80062e0:	4b37      	ldr	r3, [pc, #220]	; (80063c0 <StartSetingsConfig+0x698>)
 80062e2:	22c0      	movs	r2, #192	; 0xc0
 80062e4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		SetSettings.ip_addr1 = IP_ADDR1;
 80062e8:	4b35      	ldr	r3, [pc, #212]	; (80063c0 <StartSetingsConfig+0x698>)
 80062ea:	22a8      	movs	r2, #168	; 0xa8
 80062ec:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		SetSettings.ip_addr2 = IP_ADDR2;
 80062f0:	4b33      	ldr	r3, [pc, #204]	; (80063c0 <StartSetingsConfig+0x698>)
 80062f2:	2212      	movs	r2, #18
 80062f4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		SetSettings.ip_addr3 = IP_ADDR3;
 80062f8:	4b31      	ldr	r3, [pc, #196]	; (80063c0 <StartSetingsConfig+0x698>)
 80062fa:	221b      	movs	r2, #27
 80062fc:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		SetSettings.sb_mask0 = SB_MASK0;
 8006300:	4b2f      	ldr	r3, [pc, #188]	; (80063c0 <StartSetingsConfig+0x698>)
 8006302:	22ff      	movs	r2, #255	; 0xff
 8006304:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		SetSettings.sb_mask1 = SB_MASK1;
 8006308:	4b2d      	ldr	r3, [pc, #180]	; (80063c0 <StartSetingsConfig+0x698>)
 800630a:	22ff      	movs	r2, #255	; 0xff
 800630c:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		SetSettings.sb_mask2 = SB_MASK2;
 8006310:	4b2b      	ldr	r3, [pc, #172]	; (80063c0 <StartSetingsConfig+0x698>)
 8006312:	22ff      	movs	r2, #255	; 0xff
 8006314:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		SetSettings.sb_mask3 = SB_MASK3;
 8006318:	4b29      	ldr	r3, [pc, #164]	; (80063c0 <StartSetingsConfig+0x698>)
 800631a:	2200      	movs	r2, #0
 800631c:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		SetSettings.gateway0 = GATEWAY0;
 8006320:	4b27      	ldr	r3, [pc, #156]	; (80063c0 <StartSetingsConfig+0x698>)
 8006322:	22c0      	movs	r2, #192	; 0xc0
 8006324:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		SetSettings.gateway1 = GATEWAY1;
 8006328:	4b25      	ldr	r3, [pc, #148]	; (80063c0 <StartSetingsConfig+0x698>)
 800632a:	22a8      	movs	r2, #168	; 0xa8
 800632c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		SetSettings.gateway2 = GATEWAY2;
 8006330:	4b23      	ldr	r3, [pc, #140]	; (80063c0 <StartSetingsConfig+0x698>)
 8006332:	2212      	movs	r2, #18
 8006334:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		SetSettings.gateway3 = GATEWAY3;
 8006338:	4b21      	ldr	r3, [pc, #132]	; (80063c0 <StartSetingsConfig+0x698>)
 800633a:	2201      	movs	r2, #1
 800633c:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		SetSettings.mqtt_prt = MQTT_PRT;
 8006340:	4b1f      	ldr	r3, [pc, #124]	; (80063c0 <StartSetingsConfig+0x698>)
 8006342:	f240 725b 	movw	r2, #1883	; 0x75b
 8006346:	65da      	str	r2, [r3, #92]	; 0x5c
		SetSettings.mqtt_prt = MQTT_QOS;
 8006348:	4b1d      	ldr	r3, [pc, #116]	; (80063c0 <StartSetingsConfig+0x698>)
 800634a:	2200      	movs	r2, #0
 800634c:	65da      	str	r2, [r3, #92]	; 0x5c

	}
}
 800634e:	bf00      	nop
 8006350:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	00000000 	.word	0x00000000
 800635c:	406fe000 	.word	0x406fe000
	...
 800636c:	40680000 	.word	0x40680000
 8006370:	00000000 	.word	0x00000000
 8006374:	40650000 	.word	0x40650000
 8006378:	00000000 	.word	0x00000000
 800637c:	40320000 	.word	0x40320000
 8006380:	00000000 	.word	0x00000000
 8006384:	3ff00000 	.word	0x3ff00000
 8006388:	0802be78 	.word	0x0802be78
 800638c:	0802be84 	.word	0x0802be84
 8006390:	0802be90 	.word	0x0802be90
 8006394:	0802be9c 	.word	0x0802be9c
 8006398:	0802bea8 	.word	0x0802bea8
 800639c:	0802beb4 	.word	0x0802beb4
 80063a0:	0802bec0 	.word	0x0802bec0
 80063a4:	0802becc 	.word	0x0802becc
 80063a8:	0802bed8 	.word	0x0802bed8
 80063ac:	0802bee4 	.word	0x0802bee4
 80063b0:	0802bef0 	.word	0x0802bef0
 80063b4:	0802befc 	.word	0x0802befc
 80063b8:	0802bf50 	.word	0x0802bf50
 80063bc:	20000778 	.word	0x20000778
 80063c0:	20005b90 	.word	0x20005b90
 80063c4:	0802bf40 	.word	0x0802bf40
 80063c8:	0802bf28 	.word	0x0802bf28
 80063cc:	20005b9a 	.word	0x20005b9a
 80063d0:	0802bf30 	.word	0x0802bf30

080063d4 <GetSetingsConfig>:

// если файл существует, открываем его и перезаписываем
void GetSetingsConfig() {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	f5ad 5daa 	sub.w	sp, sp, #5440	; 0x1540
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
	FILINFO finfo;
	FRESULT fresult = f_stat("setings.ini", &finfo);
 80063de:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80063e2:	f103 0318 	add.w	r3, r3, #24
 80063e6:	4619      	mov	r1, r3
 80063e8:	48c3      	ldr	r0, [pc, #780]	; (80066f8 <GetSetingsConfig+0x324>)
 80063ea:	f00d f91d 	bl	8013628 <f_stat>
 80063ee:	4603      	mov	r3, r0
 80063f0:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 80063f4:	f102 0217 	add.w	r2, r2, #23
 80063f8:	7013      	strb	r3, [r2, #0]
	FIL fil; // File
	if (fresult == FR_OK) {
 80063fa:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80063fe:	f103 0317 	add.w	r3, r3, #23
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	f040 8373 	bne.w	8006af0 <GetSetingsConfig+0x71c>
		if (f_open(&fil, (const TCHAR*) "setings.ini", FA_READ) == FR_OK) {
 800640a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800640e:	3b10      	subs	r3, #16
 8006410:	2201      	movs	r2, #1
 8006412:	49b9      	ldr	r1, [pc, #740]	; (80066f8 <GetSetingsConfig+0x324>)
 8006414:	4618      	mov	r0, r3
 8006416:	f00c fa9b 	bl	8012950 <f_open>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	f040 8367 	bne.w	8006af0 <GetSetingsConfig+0x71c>
			char fsbuffer[1024];
			UINT Byteswritten = 0;
 8006422:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8006426:	3b14      	subs	r3, #20
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
			fresult = f_read(&fil, fsbuffer, sizeof(fsbuffer), &Byteswritten);
 800642c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8006430:	3b14      	subs	r3, #20
 8006432:	f107 0118 	add.w	r1, r7, #24
 8006436:	3914      	subs	r1, #20
 8006438:	f507 6083 	add.w	r0, r7, #1048	; 0x418
 800643c:	3810      	subs	r0, #16
 800643e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006442:	f00c fce8 	bl	8012e16 <f_read>
 8006446:	4603      	mov	r3, r0
 8006448:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 800644c:	f102 0217 	add.w	r2, r2, #23
 8006450:	7013      	strb	r3, [r2, #0]

			cJSON *root_obj = cJSON_Parse(fsbuffer);
 8006452:	f107 0318 	add.w	r3, r7, #24
 8006456:	3b14      	subs	r3, #20
 8006458:	4618      	mov	r0, r3
 800645a:	f7fb feb1 	bl	80021c0 <cJSON_Parse>
 800645e:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8006462:	f103 0310 	add.w	r3, r3, #16
 8006466:	6018      	str	r0, [r3, #0]

			strcpy(SetSettings.adm_name, cJSON_GetObjectItem(root_obj, "adm_name")->valuestring);
 8006468:	49a4      	ldr	r1, [pc, #656]	; (80066fc <GetSetingsConfig+0x328>)
 800646a:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800646e:	f103 0310 	add.w	r3, r3, #16
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	f7fc fd2d 	bl	8002ed2 <cJSON_GetObjectItem>
 8006478:	4603      	mov	r3, r0
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	4619      	mov	r1, r3
 800647e:	48a0      	ldr	r0, [pc, #640]	; (8006700 <GetSetingsConfig+0x32c>)
 8006480:	f020 fe1b 	bl	80270ba <strcpy>
			strcpy(SetSettings.adm_pswd, cJSON_GetObjectItem(root_obj, "adm_pswd")->valuestring);
 8006484:	499f      	ldr	r1, [pc, #636]	; (8006704 <GetSetingsConfig+0x330>)
 8006486:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800648a:	f103 0310 	add.w	r3, r3, #16
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	f7fc fd1f 	bl	8002ed2 <cJSON_GetObjectItem>
 8006494:	4603      	mov	r3, r0
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	4619      	mov	r1, r3
 800649a:	489b      	ldr	r0, [pc, #620]	; (8006708 <GetSetingsConfig+0x334>)
 800649c:	f020 fe0d 	bl	80270ba <strcpy>
			strcpy(SetSettings.token, cJSON_GetObjectItem(root_obj, "token")->valuestring);
 80064a0:	499a      	ldr	r1, [pc, #616]	; (800670c <GetSetingsConfig+0x338>)
 80064a2:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80064a6:	f103 0310 	add.w	r3, r3, #16
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	f7fc fd11 	bl	8002ed2 <cJSON_GetObjectItem>
 80064b0:	4603      	mov	r3, r0
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	4619      	mov	r1, r3
 80064b6:	4896      	ldr	r0, [pc, #600]	; (8006710 <GetSetingsConfig+0x33c>)
 80064b8:	f020 fdff 	bl	80270ba <strcpy>
			strcpy(SetSettings.lang, cJSON_GetObjectItem(root_obj, "lang")->valuestring);
 80064bc:	4995      	ldr	r1, [pc, #596]	; (8006714 <GetSetingsConfig+0x340>)
 80064be:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80064c2:	f103 0310 	add.w	r3, r3, #16
 80064c6:	6818      	ldr	r0, [r3, #0]
 80064c8:	f7fc fd03 	bl	8002ed2 <cJSON_GetObjectItem>
 80064cc:	4603      	mov	r3, r0
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	4619      	mov	r1, r3
 80064d2:	4891      	ldr	r0, [pc, #580]	; (8006718 <GetSetingsConfig+0x344>)
 80064d4:	f020 fdf1 	bl	80270ba <strcpy>
			SetSettings.timezone = cJSON_GetObjectItem(root_obj, "timezone")->valueint;
 80064d8:	4990      	ldr	r1, [pc, #576]	; (800671c <GetSetingsConfig+0x348>)
 80064da:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80064de:	f103 0310 	add.w	r3, r3, #16
 80064e2:	6818      	ldr	r0, [r3, #0]
 80064e4:	f7fc fcf5 	bl	8002ed2 <cJSON_GetObjectItem>
 80064e8:	4603      	mov	r3, r0
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	4a84      	ldr	r2, [pc, #528]	; (8006700 <GetSetingsConfig+0x32c>)
 80064ee:	6293      	str	r3, [r2, #40]	; 0x28
			SetSettings.lon_de = cJSON_GetObjectItem(root_obj, "lon_de")->valueint;
 80064f0:	498b      	ldr	r1, [pc, #556]	; (8006720 <GetSetingsConfig+0x34c>)
 80064f2:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80064f6:	f103 0310 	add.w	r3, r3, #16
 80064fa:	6818      	ldr	r0, [r3, #0]
 80064fc:	f7fc fce9 	bl	8002ed2 <cJSON_GetObjectItem>
 8006500:	4603      	mov	r3, r0
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	4618      	mov	r0, r3
 8006506:	f7fa f81d 	bl	8000544 <__aeabi_i2d>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	497c      	ldr	r1, [pc, #496]	; (8006700 <GetSetingsConfig+0x32c>)
 8006510:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			SetSettings.lat_de = cJSON_GetObjectItem(root_obj, "lat_de")->valueint;
 8006514:	4983      	ldr	r1, [pc, #524]	; (8006724 <GetSetingsConfig+0x350>)
 8006516:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800651a:	f103 0310 	add.w	r3, r3, #16
 800651e:	6818      	ldr	r0, [r3, #0]
 8006520:	f7fc fcd7 	bl	8002ed2 <cJSON_GetObjectItem>
 8006524:	4603      	mov	r3, r0
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	4618      	mov	r0, r3
 800652a:	f7fa f80b 	bl	8000544 <__aeabi_i2d>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4973      	ldr	r1, [pc, #460]	; (8006700 <GetSetingsConfig+0x32c>)
 8006534:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			SetSettings.ip1_sntp0 = cJSON_GetObjectItem(root_obj, "ip1_sntp0")->valueint;
 8006538:	497b      	ldr	r1, [pc, #492]	; (8006728 <GetSetingsConfig+0x354>)
 800653a:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800653e:	f103 0310 	add.w	r3, r3, #16
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	f7fc fcc5 	bl	8002ed2 <cJSON_GetObjectItem>
 8006548:	4603      	mov	r3, r0
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	b21a      	sxth	r2, r3
 800654e:	4b6c      	ldr	r3, [pc, #432]	; (8006700 <GetSetingsConfig+0x32c>)
 8006550:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			SetSettings.ip1_sntp1 = cJSON_GetObjectItem(root_obj, "ip1_sntp1")->valueint;
 8006554:	4975      	ldr	r1, [pc, #468]	; (800672c <GetSetingsConfig+0x358>)
 8006556:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800655a:	f103 0310 	add.w	r3, r3, #16
 800655e:	6818      	ldr	r0, [r3, #0]
 8006560:	f7fc fcb7 	bl	8002ed2 <cJSON_GetObjectItem>
 8006564:	4603      	mov	r3, r0
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	b21a      	sxth	r2, r3
 800656a:	4b65      	ldr	r3, [pc, #404]	; (8006700 <GetSetingsConfig+0x32c>)
 800656c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			SetSettings.ip1_sntp2 = cJSON_GetObjectItem(root_obj, "ip1_sntp2")->valueint;
 8006570:	496f      	ldr	r1, [pc, #444]	; (8006730 <GetSetingsConfig+0x35c>)
 8006572:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8006576:	f103 0310 	add.w	r3, r3, #16
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	f7fc fca9 	bl	8002ed2 <cJSON_GetObjectItem>
 8006580:	4603      	mov	r3, r0
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	b21a      	sxth	r2, r3
 8006586:	4b5e      	ldr	r3, [pc, #376]	; (8006700 <GetSetingsConfig+0x32c>)
 8006588:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			SetSettings.ip1_sntp3 = cJSON_GetObjectItem(root_obj, "ip1_sntp3")->valueint;
 800658c:	4969      	ldr	r1, [pc, #420]	; (8006734 <GetSetingsConfig+0x360>)
 800658e:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8006592:	f103 0310 	add.w	r3, r3, #16
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	f7fc fc9b 	bl	8002ed2 <cJSON_GetObjectItem>
 800659c:	4603      	mov	r3, r0
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	b21a      	sxth	r2, r3
 80065a2:	4b57      	ldr	r3, [pc, #348]	; (8006700 <GetSetingsConfig+0x32c>)
 80065a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			SetSettings.ip2_sntp0 = cJSON_GetObjectItem(root_obj, "ip2_sntp0")->valueint;
 80065a8:	4963      	ldr	r1, [pc, #396]	; (8006738 <GetSetingsConfig+0x364>)
 80065aa:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80065ae:	f103 0310 	add.w	r3, r3, #16
 80065b2:	6818      	ldr	r0, [r3, #0]
 80065b4:	f7fc fc8d 	bl	8002ed2 <cJSON_GetObjectItem>
 80065b8:	4603      	mov	r3, r0
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	b21a      	sxth	r2, r3
 80065be:	4b50      	ldr	r3, [pc, #320]	; (8006700 <GetSetingsConfig+0x32c>)
 80065c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			SetSettings.ip2_sntp1 = cJSON_GetObjectItem(root_obj, "ip2_sntp1")->valueint;
 80065c4:	495d      	ldr	r1, [pc, #372]	; (800673c <GetSetingsConfig+0x368>)
 80065c6:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80065ca:	f103 0310 	add.w	r3, r3, #16
 80065ce:	6818      	ldr	r0, [r3, #0]
 80065d0:	f7fc fc7f 	bl	8002ed2 <cJSON_GetObjectItem>
 80065d4:	4603      	mov	r3, r0
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	b21a      	sxth	r2, r3
 80065da:	4b49      	ldr	r3, [pc, #292]	; (8006700 <GetSetingsConfig+0x32c>)
 80065dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			SetSettings.ip2_sntp2 = cJSON_GetObjectItem(root_obj, "ip2_sntp2")->valueint;
 80065e0:	4957      	ldr	r1, [pc, #348]	; (8006740 <GetSetingsConfig+0x36c>)
 80065e2:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80065e6:	f103 0310 	add.w	r3, r3, #16
 80065ea:	6818      	ldr	r0, [r3, #0]
 80065ec:	f7fc fc71 	bl	8002ed2 <cJSON_GetObjectItem>
 80065f0:	4603      	mov	r3, r0
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	b21a      	sxth	r2, r3
 80065f6:	4b42      	ldr	r3, [pc, #264]	; (8006700 <GetSetingsConfig+0x32c>)
 80065f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			SetSettings.ip2_sntp3 = cJSON_GetObjectItem(root_obj, "ip2_sntp3")->valueint;
 80065fc:	4951      	ldr	r1, [pc, #324]	; (8006744 <GetSetingsConfig+0x370>)
 80065fe:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8006602:	f103 0310 	add.w	r3, r3, #16
 8006606:	6818      	ldr	r0, [r3, #0]
 8006608:	f7fc fc63 	bl	8002ed2 <cJSON_GetObjectItem>
 800660c:	4603      	mov	r3, r0
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	b21a      	sxth	r2, r3
 8006612:	4b3b      	ldr	r3, [pc, #236]	; (8006700 <GetSetingsConfig+0x32c>)
 8006614:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			SetSettings.ip3_sntp0 = cJSON_GetObjectItem(root_obj, "ip3_sntp0")->valueint;
 8006618:	494b      	ldr	r1, [pc, #300]	; (8006748 <GetSetingsConfig+0x374>)
 800661a:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800661e:	f103 0310 	add.w	r3, r3, #16
 8006622:	6818      	ldr	r0, [r3, #0]
 8006624:	f7fc fc55 	bl	8002ed2 <cJSON_GetObjectItem>
 8006628:	4603      	mov	r3, r0
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	b21a      	sxth	r2, r3
 800662e:	4b34      	ldr	r3, [pc, #208]	; (8006700 <GetSetingsConfig+0x32c>)
 8006630:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			SetSettings.ip3_sntp1 = cJSON_GetObjectItem(root_obj, "ip3_sntp1")->valueint;
 8006634:	4945      	ldr	r1, [pc, #276]	; (800674c <GetSetingsConfig+0x378>)
 8006636:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800663a:	f103 0310 	add.w	r3, r3, #16
 800663e:	6818      	ldr	r0, [r3, #0]
 8006640:	f7fc fc47 	bl	8002ed2 <cJSON_GetObjectItem>
 8006644:	4603      	mov	r3, r0
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	b21a      	sxth	r2, r3
 800664a:	4b2d      	ldr	r3, [pc, #180]	; (8006700 <GetSetingsConfig+0x32c>)
 800664c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			SetSettings.ip3_sntp2 = cJSON_GetObjectItem(root_obj, "ip3_sntp2")->valueint;
 8006650:	493f      	ldr	r1, [pc, #252]	; (8006750 <GetSetingsConfig+0x37c>)
 8006652:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8006656:	f103 0310 	add.w	r3, r3, #16
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	f7fc fc39 	bl	8002ed2 <cJSON_GetObjectItem>
 8006660:	4603      	mov	r3, r0
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	b21a      	sxth	r2, r3
 8006666:	4b26      	ldr	r3, [pc, #152]	; (8006700 <GetSetingsConfig+0x32c>)
 8006668:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			SetSettings.ip3_sntp3 = cJSON_GetObjectItem(root_obj, "ip3_sntp3")->valueint;
 800666c:	4939      	ldr	r1, [pc, #228]	; (8006754 <GetSetingsConfig+0x380>)
 800666e:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8006672:	f103 0310 	add.w	r3, r3, #16
 8006676:	6818      	ldr	r0, [r3, #0]
 8006678:	f7fc fc2b 	bl	8002ed2 <cJSON_GetObjectItem>
 800667c:	4603      	mov	r3, r0
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	b21a      	sxth	r2, r3
 8006682:	4b1f      	ldr	r3, [pc, #124]	; (8006700 <GetSetingsConfig+0x32c>)
 8006684:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			// Настройки MQTT
			SetSettings.check_mqtt = cJSON_GetObjectItem(root_obj, "check_mqtt")->valueint;
 8006688:	4933      	ldr	r1, [pc, #204]	; (8006758 <GetSetingsConfig+0x384>)
 800668a:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800668e:	f103 0310 	add.w	r3, r3, #16
 8006692:	6818      	ldr	r0, [r3, #0]
 8006694:	f7fc fc1d 	bl	8002ed2 <cJSON_GetObjectItem>
 8006698:	4603      	mov	r3, r0
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	b21a      	sxth	r2, r3
 800669e:	4b18      	ldr	r3, [pc, #96]	; (8006700 <GetSetingsConfig+0x32c>)
 80066a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			SetSettings.mqtt_prt = cJSON_GetObjectItem(root_obj, "mqtt_prt")->valueint;
 80066a4:	492d      	ldr	r1, [pc, #180]	; (800675c <GetSetingsConfig+0x388>)
 80066a6:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80066aa:	f103 0310 	add.w	r3, r3, #16
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	f7fc fc0f 	bl	8002ed2 <cJSON_GetObjectItem>
 80066b4:	4603      	mov	r3, r0
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	4a11      	ldr	r2, [pc, #68]	; (8006700 <GetSetingsConfig+0x32c>)
 80066ba:	65d3      	str	r3, [r2, #92]	; 0x5c
			//SetSettings.mqtt_qos = cJSON_GetObjectItem(root_obj, "mqtt_qos")->valueint;
			strcpy(SetSettings.mqtt_clt, cJSON_GetObjectItem(root_obj, "mqtt_clt")->valuestring);
 80066bc:	4928      	ldr	r1, [pc, #160]	; (8006760 <GetSetingsConfig+0x38c>)
 80066be:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80066c2:	f103 0310 	add.w	r3, r3, #16
 80066c6:	6818      	ldr	r0, [r3, #0]
 80066c8:	f7fc fc03 	bl	8002ed2 <cJSON_GetObjectItem>
 80066cc:	4603      	mov	r3, r0
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	4619      	mov	r1, r3
 80066d2:	4824      	ldr	r0, [pc, #144]	; (8006764 <GetSetingsConfig+0x390>)
 80066d4:	f020 fcf1 	bl	80270ba <strcpy>
			strcpy(SetSettings.mqtt_usr, cJSON_GetObjectItem(root_obj, "mqtt_usr")->valuestring);
 80066d8:	4923      	ldr	r1, [pc, #140]	; (8006768 <GetSetingsConfig+0x394>)
 80066da:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80066de:	f103 0310 	add.w	r3, r3, #16
 80066e2:	6818      	ldr	r0, [r3, #0]
 80066e4:	f7fc fbf5 	bl	8002ed2 <cJSON_GetObjectItem>
 80066e8:	4603      	mov	r3, r0
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	4619      	mov	r1, r3
 80066ee:	481f      	ldr	r0, [pc, #124]	; (800676c <GetSetingsConfig+0x398>)
 80066f0:	f020 fce3 	bl	80270ba <strcpy>
 80066f4:	e03c      	b.n	8006770 <GetSetingsConfig+0x39c>
 80066f6:	bf00      	nop
 80066f8:	0802bcc0 	.word	0x0802bcc0
 80066fc:	0802bccc 	.word	0x0802bccc
 8006700:	20005b90 	.word	0x20005b90
 8006704:	0802bcd8 	.word	0x0802bcd8
 8006708:	20005b9a 	.word	0x20005b9a
 800670c:	0802bce4 	.word	0x0802bce4
 8006710:	20005ba9 	.word	0x20005ba9
 8006714:	0802bcec 	.word	0x0802bcec
 8006718:	20005bb4 	.word	0x20005bb4
 800671c:	0802bcf4 	.word	0x0802bcf4
 8006720:	0802bd00 	.word	0x0802bd00
 8006724:	0802bd08 	.word	0x0802bd08
 8006728:	0802bd10 	.word	0x0802bd10
 800672c:	0802bd1c 	.word	0x0802bd1c
 8006730:	0802bd28 	.word	0x0802bd28
 8006734:	0802bd34 	.word	0x0802bd34
 8006738:	0802bd40 	.word	0x0802bd40
 800673c:	0802bd4c 	.word	0x0802bd4c
 8006740:	0802bd58 	.word	0x0802bd58
 8006744:	0802bd64 	.word	0x0802bd64
 8006748:	0802bd70 	.word	0x0802bd70
 800674c:	0802bd7c 	.word	0x0802bd7c
 8006750:	0802bd88 	.word	0x0802bd88
 8006754:	0802bd94 	.word	0x0802bd94
 8006758:	0802bda0 	.word	0x0802bda0
 800675c:	0802bdac 	.word	0x0802bdac
 8006760:	0802bdb8 	.word	0x0802bdb8
 8006764:	20005bf0 	.word	0x20005bf0
 8006768:	0802bdc4 	.word	0x0802bdc4
 800676c:	20005bfa 	.word	0x20005bfa
			strcpy(SetSettings.mqtt_pswd, cJSON_GetObjectItem(root_obj, "mqtt_pswd")->valuestring);
 8006770:	49be      	ldr	r1, [pc, #760]	; (8006a6c <GetSetingsConfig+0x698>)
 8006772:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8006776:	f103 0310 	add.w	r3, r3, #16
 800677a:	6818      	ldr	r0, [r3, #0]
 800677c:	f7fc fba9 	bl	8002ed2 <cJSON_GetObjectItem>
 8006780:	4603      	mov	r3, r0
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	4619      	mov	r1, r3
 8006786:	48ba      	ldr	r0, [pc, #744]	; (8006a70 <GetSetingsConfig+0x69c>)
 8006788:	f020 fc97 	bl	80270ba <strcpy>
			strcpy(SetSettings.mqtt_tpc, cJSON_GetObjectItem(root_obj, "mqtt_tpc")->valuestring);
 800678c:	49b9      	ldr	r1, [pc, #740]	; (8006a74 <GetSetingsConfig+0x6a0>)
 800678e:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8006792:	f103 0310 	add.w	r3, r3, #16
 8006796:	6818      	ldr	r0, [r3, #0]
 8006798:	f7fc fb9b 	bl	8002ed2 <cJSON_GetObjectItem>
 800679c:	4603      	mov	r3, r0
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	4619      	mov	r1, r3
 80067a2:	48b5      	ldr	r0, [pc, #724]	; (8006a78 <GetSetingsConfig+0x6a4>)
 80067a4:	f020 fc89 	bl	80270ba <strcpy>
			strcpy(SetSettings.mqtt_ftpc, cJSON_GetObjectItem(root_obj, "mqtt_ftpc")->valuestring);
 80067a8:	49b4      	ldr	r1, [pc, #720]	; (8006a7c <GetSetingsConfig+0x6a8>)
 80067aa:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80067ae:	f103 0310 	add.w	r3, r3, #16
 80067b2:	6818      	ldr	r0, [r3, #0]
 80067b4:	f7fc fb8d 	bl	8002ed2 <cJSON_GetObjectItem>
 80067b8:	4603      	mov	r3, r0
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	4619      	mov	r1, r3
 80067be:	48b0      	ldr	r0, [pc, #704]	; (8006a80 <GetSetingsConfig+0x6ac>)
 80067c0:	f020 fc7b 	bl	80270ba <strcpy>
			SetSettings.mqtt_hst0 = cJSON_GetObjectItem(root_obj, "mqtt_hst0")->valueint;
 80067c4:	49af      	ldr	r1, [pc, #700]	; (8006a84 <GetSetingsConfig+0x6b0>)
 80067c6:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80067ca:	f103 0310 	add.w	r3, r3, #16
 80067ce:	6818      	ldr	r0, [r3, #0]
 80067d0:	f7fc fb7f 	bl	8002ed2 <cJSON_GetObjectItem>
 80067d4:	4603      	mov	r3, r0
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	b21a      	sxth	r2, r3
 80067da:	4bab      	ldr	r3, [pc, #684]	; (8006a88 <GetSetingsConfig+0x6b4>)
 80067dc:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
			SetSettings.mqtt_hst1 = cJSON_GetObjectItem(root_obj, "mqtt_hst1")->valueint;
 80067e0:	49aa      	ldr	r1, [pc, #680]	; (8006a8c <GetSetingsConfig+0x6b8>)
 80067e2:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80067e6:	f103 0310 	add.w	r3, r3, #16
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	f7fc fb71 	bl	8002ed2 <cJSON_GetObjectItem>
 80067f0:	4603      	mov	r3, r0
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	b21a      	sxth	r2, r3
 80067f6:	4ba4      	ldr	r3, [pc, #656]	; (8006a88 <GetSetingsConfig+0x6b4>)
 80067f8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			SetSettings.mqtt_hst2 = cJSON_GetObjectItem(root_obj, "mqtt_hst2")->valueint;
 80067fc:	49a4      	ldr	r1, [pc, #656]	; (8006a90 <GetSetingsConfig+0x6bc>)
 80067fe:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8006802:	f103 0310 	add.w	r3, r3, #16
 8006806:	6818      	ldr	r0, [r3, #0]
 8006808:	f7fc fb63 	bl	8002ed2 <cJSON_GetObjectItem>
 800680c:	4603      	mov	r3, r0
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	b21a      	sxth	r2, r3
 8006812:	4b9d      	ldr	r3, [pc, #628]	; (8006a88 <GetSetingsConfig+0x6b4>)
 8006814:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			SetSettings.mqtt_hst3 = cJSON_GetObjectItem(root_obj, "mqtt_hst3")->valueint;
 8006818:	499e      	ldr	r1, [pc, #632]	; (8006a94 <GetSetingsConfig+0x6c0>)
 800681a:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800681e:	f103 0310 	add.w	r3, r3, #16
 8006822:	6818      	ldr	r0, [r3, #0]
 8006824:	f7fc fb55 	bl	8002ed2 <cJSON_GetObjectItem>
 8006828:	4603      	mov	r3, r0
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	b21a      	sxth	r2, r3
 800682e:	4b96      	ldr	r3, [pc, #600]	; (8006a88 <GetSetingsConfig+0x6b4>)
 8006830:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

			// Настройки IP адреса
			SetSettings.check_ip = cJSON_GetObjectItem(root_obj, "check_ip")->valueint;
 8006834:	4998      	ldr	r1, [pc, #608]	; (8006a98 <GetSetingsConfig+0x6c4>)
 8006836:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800683a:	f103 0310 	add.w	r3, r3, #16
 800683e:	6818      	ldr	r0, [r3, #0]
 8006840:	f7fc fb47 	bl	8002ed2 <cJSON_GetObjectItem>
 8006844:	4603      	mov	r3, r0
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	b21a      	sxth	r2, r3
 800684a:	4b8f      	ldr	r3, [pc, #572]	; (8006a88 <GetSetingsConfig+0x6b4>)
 800684c:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			SetSettings.ip_addr0 = cJSON_GetObjectItem(root_obj, "ip_addr0")->valueint;
 8006850:	4992      	ldr	r1, [pc, #584]	; (8006a9c <GetSetingsConfig+0x6c8>)
 8006852:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8006856:	f103 0310 	add.w	r3, r3, #16
 800685a:	6818      	ldr	r0, [r3, #0]
 800685c:	f7fc fb39 	bl	8002ed2 <cJSON_GetObjectItem>
 8006860:	4603      	mov	r3, r0
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	b21a      	sxth	r2, r3
 8006866:	4b88      	ldr	r3, [pc, #544]	; (8006a88 <GetSetingsConfig+0x6b4>)
 8006868:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
			SetSettings.ip_addr1 = cJSON_GetObjectItem(root_obj, "ip_addr1")->valueint;
 800686c:	498c      	ldr	r1, [pc, #560]	; (8006aa0 <GetSetingsConfig+0x6cc>)
 800686e:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8006872:	f103 0310 	add.w	r3, r3, #16
 8006876:	6818      	ldr	r0, [r3, #0]
 8006878:	f7fc fb2b 	bl	8002ed2 <cJSON_GetObjectItem>
 800687c:	4603      	mov	r3, r0
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	b21a      	sxth	r2, r3
 8006882:	4b81      	ldr	r3, [pc, #516]	; (8006a88 <GetSetingsConfig+0x6b4>)
 8006884:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
			SetSettings.ip_addr2 = cJSON_GetObjectItem(root_obj, "ip_addr2")->valueint;
 8006888:	4986      	ldr	r1, [pc, #536]	; (8006aa4 <GetSetingsConfig+0x6d0>)
 800688a:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800688e:	f103 0310 	add.w	r3, r3, #16
 8006892:	6818      	ldr	r0, [r3, #0]
 8006894:	f7fc fb1d 	bl	8002ed2 <cJSON_GetObjectItem>
 8006898:	4603      	mov	r3, r0
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	b21a      	sxth	r2, r3
 800689e:	4b7a      	ldr	r3, [pc, #488]	; (8006a88 <GetSetingsConfig+0x6b4>)
 80068a0:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
			SetSettings.ip_addr3 = cJSON_GetObjectItem(root_obj, "ip_addr3")->valueint;
 80068a4:	4980      	ldr	r1, [pc, #512]	; (8006aa8 <GetSetingsConfig+0x6d4>)
 80068a6:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80068aa:	f103 0310 	add.w	r3, r3, #16
 80068ae:	6818      	ldr	r0, [r3, #0]
 80068b0:	f7fc fb0f 	bl	8002ed2 <cJSON_GetObjectItem>
 80068b4:	4603      	mov	r3, r0
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	b21a      	sxth	r2, r3
 80068ba:	4b73      	ldr	r3, [pc, #460]	; (8006a88 <GetSetingsConfig+0x6b4>)
 80068bc:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
			SetSettings.sb_mask0 = cJSON_GetObjectItem(root_obj, "sb_mask0")->valueint;
 80068c0:	497a      	ldr	r1, [pc, #488]	; (8006aac <GetSetingsConfig+0x6d8>)
 80068c2:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80068c6:	f103 0310 	add.w	r3, r3, #16
 80068ca:	6818      	ldr	r0, [r3, #0]
 80068cc:	f7fc fb01 	bl	8002ed2 <cJSON_GetObjectItem>
 80068d0:	4603      	mov	r3, r0
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	b21a      	sxth	r2, r3
 80068d6:	4b6c      	ldr	r3, [pc, #432]	; (8006a88 <GetSetingsConfig+0x6b4>)
 80068d8:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
			SetSettings.sb_mask1 = cJSON_GetObjectItem(root_obj, "sb_mask1")->valueint;
 80068dc:	4974      	ldr	r1, [pc, #464]	; (8006ab0 <GetSetingsConfig+0x6dc>)
 80068de:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80068e2:	f103 0310 	add.w	r3, r3, #16
 80068e6:	6818      	ldr	r0, [r3, #0]
 80068e8:	f7fc faf3 	bl	8002ed2 <cJSON_GetObjectItem>
 80068ec:	4603      	mov	r3, r0
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	b21a      	sxth	r2, r3
 80068f2:	4b65      	ldr	r3, [pc, #404]	; (8006a88 <GetSetingsConfig+0x6b4>)
 80068f4:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
			SetSettings.sb_mask2 = cJSON_GetObjectItem(root_obj, "sb_mask2")->valueint;
 80068f8:	496e      	ldr	r1, [pc, #440]	; (8006ab4 <GetSetingsConfig+0x6e0>)
 80068fa:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80068fe:	f103 0310 	add.w	r3, r3, #16
 8006902:	6818      	ldr	r0, [r3, #0]
 8006904:	f7fc fae5 	bl	8002ed2 <cJSON_GetObjectItem>
 8006908:	4603      	mov	r3, r0
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	b21a      	sxth	r2, r3
 800690e:	4b5e      	ldr	r3, [pc, #376]	; (8006a88 <GetSetingsConfig+0x6b4>)
 8006910:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			SetSettings.sb_mask3 = cJSON_GetObjectItem(root_obj, "sb_mask3")->valueint;
 8006914:	4968      	ldr	r1, [pc, #416]	; (8006ab8 <GetSetingsConfig+0x6e4>)
 8006916:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800691a:	f103 0310 	add.w	r3, r3, #16
 800691e:	6818      	ldr	r0, [r3, #0]
 8006920:	f7fc fad7 	bl	8002ed2 <cJSON_GetObjectItem>
 8006924:	4603      	mov	r3, r0
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	b21a      	sxth	r2, r3
 800692a:	4b57      	ldr	r3, [pc, #348]	; (8006a88 <GetSetingsConfig+0x6b4>)
 800692c:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			SetSettings.gateway0 = cJSON_GetObjectItem(root_obj, "gateway0")->valueint;
 8006930:	4962      	ldr	r1, [pc, #392]	; (8006abc <GetSetingsConfig+0x6e8>)
 8006932:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8006936:	f103 0310 	add.w	r3, r3, #16
 800693a:	6818      	ldr	r0, [r3, #0]
 800693c:	f7fc fac9 	bl	8002ed2 <cJSON_GetObjectItem>
 8006940:	4603      	mov	r3, r0
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	b21a      	sxth	r2, r3
 8006946:	4b50      	ldr	r3, [pc, #320]	; (8006a88 <GetSetingsConfig+0x6b4>)
 8006948:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
			SetSettings.gateway1 = cJSON_GetObjectItem(root_obj, "gateway1")->valueint;
 800694c:	495c      	ldr	r1, [pc, #368]	; (8006ac0 <GetSetingsConfig+0x6ec>)
 800694e:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8006952:	f103 0310 	add.w	r3, r3, #16
 8006956:	6818      	ldr	r0, [r3, #0]
 8006958:	f7fc fabb 	bl	8002ed2 <cJSON_GetObjectItem>
 800695c:	4603      	mov	r3, r0
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	b21a      	sxth	r2, r3
 8006962:	4b49      	ldr	r3, [pc, #292]	; (8006a88 <GetSetingsConfig+0x6b4>)
 8006964:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
			SetSettings.gateway2 = cJSON_GetObjectItem(root_obj, "gateway2")->valueint;
 8006968:	4956      	ldr	r1, [pc, #344]	; (8006ac4 <GetSetingsConfig+0x6f0>)
 800696a:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800696e:	f103 0310 	add.w	r3, r3, #16
 8006972:	6818      	ldr	r0, [r3, #0]
 8006974:	f7fc faad 	bl	8002ed2 <cJSON_GetObjectItem>
 8006978:	4603      	mov	r3, r0
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	b21a      	sxth	r2, r3
 800697e:	4b42      	ldr	r3, [pc, #264]	; (8006a88 <GetSetingsConfig+0x6b4>)
 8006980:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			SetSettings.gateway3 = cJSON_GetObjectItem(root_obj, "gateway3")->valueint;
 8006984:	4950      	ldr	r1, [pc, #320]	; (8006ac8 <GetSetingsConfig+0x6f4>)
 8006986:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800698a:	f103 0310 	add.w	r3, r3, #16
 800698e:	6818      	ldr	r0, [r3, #0]
 8006990:	f7fc fa9f 	bl	8002ed2 <cJSON_GetObjectItem>
 8006994:	4603      	mov	r3, r0
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	b21a      	sxth	r2, r3
 800699a:	4b3b      	ldr	r3, [pc, #236]	; (8006a88 <GetSetingsConfig+0x6b4>)
 800699c:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			SetSettings.macaddr0 = cJSON_GetObjectItem(root_obj, "macaddr0")->valueint;
 80069a0:	494a      	ldr	r1, [pc, #296]	; (8006acc <GetSetingsConfig+0x6f8>)
 80069a2:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80069a6:	f103 0310 	add.w	r3, r3, #16
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	f7fc fa91 	bl	8002ed2 <cJSON_GetObjectItem>
 80069b0:	4603      	mov	r3, r0
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	4b34      	ldr	r3, [pc, #208]	; (8006a88 <GetSetingsConfig+0x6b4>)
 80069b8:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			SetSettings.macaddr1 = cJSON_GetObjectItem(root_obj, "macaddr1")->valueint;
 80069bc:	4944      	ldr	r1, [pc, #272]	; (8006ad0 <GetSetingsConfig+0x6fc>)
 80069be:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80069c2:	f103 0310 	add.w	r3, r3, #16
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	f7fc fa83 	bl	8002ed2 <cJSON_GetObjectItem>
 80069cc:	4603      	mov	r3, r0
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	4b2d      	ldr	r3, [pc, #180]	; (8006a88 <GetSetingsConfig+0x6b4>)
 80069d4:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
			SetSettings.macaddr2 = cJSON_GetObjectItem(root_obj, "macaddr2")->valueint;
 80069d8:	493e      	ldr	r1, [pc, #248]	; (8006ad4 <GetSetingsConfig+0x700>)
 80069da:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80069de:	f103 0310 	add.w	r3, r3, #16
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	f7fc fa75 	bl	8002ed2 <cJSON_GetObjectItem>
 80069e8:	4603      	mov	r3, r0
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	4b26      	ldr	r3, [pc, #152]	; (8006a88 <GetSetingsConfig+0x6b4>)
 80069f0:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
			SetSettings.macaddr3 = cJSON_GetObjectItem(root_obj, "macaddr3")->valueint;
 80069f4:	4938      	ldr	r1, [pc, #224]	; (8006ad8 <GetSetingsConfig+0x704>)
 80069f6:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80069fa:	f103 0310 	add.w	r3, r3, #16
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	f7fc fa67 	bl	8002ed2 <cJSON_GetObjectItem>
 8006a04:	4603      	mov	r3, r0
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	4b1f      	ldr	r3, [pc, #124]	; (8006a88 <GetSetingsConfig+0x6b4>)
 8006a0c:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
			SetSettings.macaddr4 = cJSON_GetObjectItem(root_obj, "macaddr4")->valueint;
 8006a10:	4932      	ldr	r1, [pc, #200]	; (8006adc <GetSetingsConfig+0x708>)
 8006a12:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8006a16:	f103 0310 	add.w	r3, r3, #16
 8006a1a:	6818      	ldr	r0, [r3, #0]
 8006a1c:	f7fc fa59 	bl	8002ed2 <cJSON_GetObjectItem>
 8006a20:	4603      	mov	r3, r0
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	4b18      	ldr	r3, [pc, #96]	; (8006a88 <GetSetingsConfig+0x6b4>)
 8006a28:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			SetSettings.macaddr5 = cJSON_GetObjectItem(root_obj, "macaddr5")->valueint;
 8006a2c:	492c      	ldr	r1, [pc, #176]	; (8006ae0 <GetSetingsConfig+0x70c>)
 8006a2e:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8006a32:	f103 0310 	add.w	r3, r3, #16
 8006a36:	6818      	ldr	r0, [r3, #0]
 8006a38:	f7fc fa4b 	bl	8002ed2 <cJSON_GetObjectItem>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	4b11      	ldr	r3, [pc, #68]	; (8006a88 <GetSetingsConfig+0x6b4>)
 8006a44:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

			cJSON_Delete(root_obj);
 8006a48:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8006a4c:	f103 0310 	add.w	r3, r3, #16
 8006a50:	6818      	ldr	r0, [r3, #0]
 8006a52:	f7fa fb85 	bl	8001160 <cJSON_Delete>
			memset(fsbuffer, '\0', sizeof(fsbuffer));
 8006a56:	f107 0318 	add.w	r3, r7, #24
 8006a5a:	3b14      	subs	r3, #20
 8006a5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a60:	2100      	movs	r1, #0
 8006a62:	4618      	mov	r0, r3
 8006a64:	f01f fdc8 	bl	80265f8 <memset>
 8006a68:	e03c      	b.n	8006ae4 <GetSetingsConfig+0x710>
 8006a6a:	bf00      	nop
 8006a6c:	0802bdd0 	.word	0x0802bdd0
 8006a70:	20005c04 	.word	0x20005c04
 8006a74:	0802bddc 	.word	0x0802bddc
 8006a78:	20005c13 	.word	0x20005c13
 8006a7c:	0802bde8 	.word	0x0802bde8
 8006a80:	20005c22 	.word	0x20005c22
 8006a84:	0802bdf4 	.word	0x0802bdf4
 8006a88:	20005b90 	.word	0x20005b90
 8006a8c:	0802be00 	.word	0x0802be00
 8006a90:	0802be0c 	.word	0x0802be0c
 8006a94:	0802be18 	.word	0x0802be18
 8006a98:	0802be24 	.word	0x0802be24
 8006a9c:	0802be30 	.word	0x0802be30
 8006aa0:	0802be3c 	.word	0x0802be3c
 8006aa4:	0802be48 	.word	0x0802be48
 8006aa8:	0802be54 	.word	0x0802be54
 8006aac:	0802be60 	.word	0x0802be60
 8006ab0:	0802be6c 	.word	0x0802be6c
 8006ab4:	0802be78 	.word	0x0802be78
 8006ab8:	0802be84 	.word	0x0802be84
 8006abc:	0802be90 	.word	0x0802be90
 8006ac0:	0802be9c 	.word	0x0802be9c
 8006ac4:	0802bea8 	.word	0x0802bea8
 8006ac8:	0802beb4 	.word	0x0802beb4
 8006acc:	0802bec0 	.word	0x0802bec0
 8006ad0:	0802becc 	.word	0x0802becc
 8006ad4:	0802bed8 	.word	0x0802bed8
 8006ad8:	0802bee4 	.word	0x0802bee4
 8006adc:	0802bef0 	.word	0x0802bef0
 8006ae0:	0802befc 	.word	0x0802befc
			f_close(&fil);
 8006ae4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8006ae8:	3b10      	subs	r3, #16
 8006aea:	4618      	mov	r0, r3
 8006aec:	f00c fd6d 	bl	80135ca <f_close>
		}
	}
}
 8006af0:	bf00      	nop
 8006af2:	f507 57aa 	add.w	r7, r7, #5440	; 0x1540
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <GetCronConfig>:
// если файл существует, открываем для чтения.
void GetCronConfig() {
 8006afc:	b590      	push	{r4, r7, lr}
 8006afe:	f5ad 5d8b 	sub.w	sp, sp, #4448	; 0x1160
 8006b02:	b081      	sub	sp, #4
 8006b04:	af00      	add	r7, sp, #0
	FILINFO finfo;
	cJSON *root_obj = NULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8006b0c:	f102 0218 	add.w	r2, r2, #24
 8006b10:	6013      	str	r3, [r2, #0]
	FRESULT fresult;
	UINT Byteswritten; // File read/write count
	FIL fil; // File
	fresult = f_stat("cron.ini", &finfo);
 8006b12:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006b16:	f103 0318 	add.w	r3, r3, #24
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	4876      	ldr	r0, [pc, #472]	; (8006cf8 <GetCronConfig+0x1fc>)
 8006b1e:	f00c fd83 	bl	8013628 <f_stat>
 8006b22:	4603      	mov	r3, r0
 8006b24:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8006b28:	f102 0217 	add.w	r2, r2, #23
 8006b2c:	7013      	strb	r3, [r2, #0]
	if (fresult == FR_OK) {
 8006b2e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006b32:	f103 0317 	add.w	r3, r3, #23
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f040 80d7 	bne.w	8006cec <GetCronConfig+0x1f0>
		// если файл существует, открываем его
		if (f_open(&fil, (const TCHAR*) "cron.ini", FA_READ) == FR_OK) {
 8006b3e:	f107 0320 	add.w	r3, r7, #32
 8006b42:	3b1c      	subs	r3, #28
 8006b44:	2201      	movs	r2, #1
 8006b46:	496c      	ldr	r1, [pc, #432]	; (8006cf8 <GetCronConfig+0x1fc>)
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f00b ff01 	bl	8012950 <f_open>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f040 80cb 	bne.w	8006cec <GetCronConfig+0x1f0>

			fresult = f_read(&fil, fsbuffer, sizeof(fsbuffer), &Byteswritten);
 8006b56:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006b5a:	f103 0314 	add.w	r3, r3, #20
 8006b5e:	f107 0020 	add.w	r0, r7, #32
 8006b62:	381c      	subs	r0, #28
 8006b64:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006b68:	4964      	ldr	r1, [pc, #400]	; (8006cfc <GetCronConfig+0x200>)
 8006b6a:	f00c f954 	bl	8012e16 <f_read>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8006b74:	f102 0217 	add.w	r2, r2, #23
 8006b78:	7013      	strb	r3, [r2, #0]
			printf("CRON file EXISTS! \r\n");
 8006b7a:	4861      	ldr	r0, [pc, #388]	; (8006d00 <GetCronConfig+0x204>)
 8006b7c:	f020 f8f2 	bl	8026d64 <puts>
			root_obj = cJSON_Parse(fsbuffer);
 8006b80:	485e      	ldr	r0, [pc, #376]	; (8006cfc <GetCronConfig+0x200>)
 8006b82:	f7fb fb1d 	bl	80021c0 <cJSON_Parse>
 8006b86:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006b8a:	f103 0318 	add.w	r3, r3, #24
 8006b8e:	6018      	str	r0, [r3, #0]

			for (int i = 0; i < cJSON_GetArraySize(root_obj); i++) {
 8006b90:	2300      	movs	r3, #0
 8006b92:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8006b96:	f102 021c 	add.w	r2, r2, #28
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	e083      	b.n	8006ca6 <GetCronConfig+0x1aa>
				cJSON *cron_item = cJSON_GetArrayItem(root_obj, i);
 8006b9e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006ba2:	f103 031c 	add.w	r3, r3, #28
 8006ba6:	6819      	ldr	r1, [r3, #0]
 8006ba8:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006bac:	f103 0318 	add.w	r3, r3, #24
 8006bb0:	6818      	ldr	r0, [r3, #0]
 8006bb2:	f7fc f932 	bl	8002e1a <cJSON_GetArrayItem>
 8006bb6:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006bba:	f103 0310 	add.w	r3, r3, #16
 8006bbe:	6018      	str	r0, [r3, #0]

				strcpy(dbCrontxt[i].cron, cJSON_GetObjectItem(cron_item, "cron")->valuestring);
 8006bc0:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006bc4:	f103 031c 	add.w	r3, r3, #28
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8006bce:	fb02 f303 	mul.w	r3, r2, r3
 8006bd2:	4a4c      	ldr	r2, [pc, #304]	; (8006d04 <GetCronConfig+0x208>)
 8006bd4:	189c      	adds	r4, r3, r2
 8006bd6:	494c      	ldr	r1, [pc, #304]	; (8006d08 <GetCronConfig+0x20c>)
 8006bd8:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006bdc:	f103 0310 	add.w	r3, r3, #16
 8006be0:	6818      	ldr	r0, [r3, #0]
 8006be2:	f7fc f976 	bl	8002ed2 <cJSON_GetObjectItem>
 8006be6:	4603      	mov	r3, r0
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	4619      	mov	r1, r3
 8006bec:	4620      	mov	r0, r4
 8006bee:	f020 fa64 	bl	80270ba <strcpy>
				strcpy(dbCrontxt[i].activ, cJSON_GetObjectItem(cron_item, "activ")->valuestring);
 8006bf2:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006bf6:	f103 031c 	add.w	r3, r3, #28
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8006c00:	fb02 f303 	mul.w	r3, r2, r3
 8006c04:	3320      	adds	r3, #32
 8006c06:	4a3f      	ldr	r2, [pc, #252]	; (8006d04 <GetCronConfig+0x208>)
 8006c08:	4413      	add	r3, r2
 8006c0a:	1cdc      	adds	r4, r3, #3
 8006c0c:	493f      	ldr	r1, [pc, #252]	; (8006d0c <GetCronConfig+0x210>)
 8006c0e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006c12:	f103 0310 	add.w	r3, r3, #16
 8006c16:	6818      	ldr	r0, [r3, #0]
 8006c18:	f7fc f95b 	bl	8002ed2 <cJSON_GetObjectItem>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	4619      	mov	r1, r3
 8006c22:	4620      	mov	r0, r4
 8006c24:	f020 fa49 	bl	80270ba <strcpy>
				dbCrontxt[i].ptime = cJSON_GetObjectItem(cron_item, "ptime")->valueint;
 8006c28:	4939      	ldr	r1, [pc, #228]	; (8006d10 <GetCronConfig+0x214>)
 8006c2a:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006c2e:	f103 0310 	add.w	r3, r3, #16
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	f7fc f94d 	bl	8002ed2 <cJSON_GetObjectItem>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	4a31      	ldr	r2, [pc, #196]	; (8006d04 <GetCronConfig+0x208>)
 8006c40:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006c44:	f103 031c 	add.w	r3, r3, #28
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006c4e:	fb01 f303 	mul.w	r3, r1, r3
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006c58:	6018      	str	r0, [r3, #0]
				strcpy(dbCrontxt[i].info, cJSON_GetObjectItem(cron_item, "info")->valuestring);
 8006c5a:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006c5e:	f103 031c 	add.w	r3, r3, #28
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8006c68:	fb02 f303 	mul.w	r3, r2, r3
 8006c6c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006c70:	4a24      	ldr	r2, [pc, #144]	; (8006d04 <GetCronConfig+0x208>)
 8006c72:	189c      	adds	r4, r3, r2
 8006c74:	4927      	ldr	r1, [pc, #156]	; (8006d14 <GetCronConfig+0x218>)
 8006c76:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006c7a:	f103 0310 	add.w	r3, r3, #16
 8006c7e:	6818      	ldr	r0, [r3, #0]
 8006c80:	f7fc f927 	bl	8002ed2 <cJSON_GetObjectItem>
 8006c84:	4603      	mov	r3, r0
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f020 fa15 	bl	80270ba <strcpy>
			for (int i = 0; i < cJSON_GetArraySize(root_obj); i++) {
 8006c90:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006c94:	f103 031c 	add.w	r3, r3, #28
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8006ca0:	f102 021c 	add.w	r2, r2, #28
 8006ca4:	6013      	str	r3, [r2, #0]
 8006ca6:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006caa:	f103 0318 	add.w	r3, r3, #24
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	f7fc f86f 	bl	8002d92 <cJSON_GetArraySize>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006cba:	f103 031c 	add.w	r3, r3, #28
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	f6ff af6c 	blt.w	8006b9e <GetCronConfig+0xa2>

				//SetSettings.check_mqtt = cJSON_GetObjectItem(root_obj, "check_mqtt")->valueint;

			}
			cJSON_Delete(root_obj);
 8006cc6:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006cca:	f103 0318 	add.w	r3, r3, #24
 8006cce:	6818      	ldr	r0, [r3, #0]
 8006cd0:	f7fa fa46 	bl	8001160 <cJSON_Delete>
			memset(fsbuffer, '\0', sizeof(fsbuffer));
 8006cd4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006cd8:	2100      	movs	r1, #0
 8006cda:	4808      	ldr	r0, [pc, #32]	; (8006cfc <GetCronConfig+0x200>)
 8006cdc:	f01f fc8c 	bl	80265f8 <memset>
			f_close(&fil);
 8006ce0:	f107 0320 	add.w	r3, r7, #32
 8006ce4:	3b1c      	subs	r3, #28
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f00c fc6f 	bl	80135ca <f_close>
		}
	}
}
 8006cec:	bf00      	nop
 8006cee:	f507 578b 	add.w	r7, r7, #4448	; 0x1160
 8006cf2:	3704      	adds	r7, #4
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd90      	pop	{r4, r7, pc}
 8006cf8:	0802bf68 	.word	0x0802bf68
 8006cfc:	20000778 	.word	0x20000778
 8006d00:	0802bf74 	.word	0x0802bf74
 8006d04:	20005f6c 	.word	0x20005f6c
 8006d08:	0802bf88 	.word	0x0802bf88
 8006d0c:	0802bf90 	.word	0x0802bf90
 8006d10:	0802bf98 	.word	0x0802bf98
 8006d14:	0802bfa0 	.word	0x0802bfa0

08006d18 <SetCronConfig>:

// Если файл не существует, создаем его и записываем данные
void SetCronConfig() {
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	f5ad 5d8b 	sub.w	sp, sp, #4448	; 0x1160
 8006d1e:	af00      	add	r7, sp, #0
	FILINFO finfo;
	cJSON *root_obj = NULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8006d26:	f102 0218 	add.w	r2, r2, #24
 8006d2a:	6013      	str	r3, [r2, #0]
	cJSON *fld = NULL;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8006d32:	f102 0214 	add.w	r2, r2, #20
 8006d36:	6013      	str	r3, [r2, #0]
	UINT Byteswritten; // File read/write count
	FRESULT fresult;
	FIL fil; // File
	fresult = f_stat("cron.ini", &finfo);
 8006d38:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006d3c:	f103 0314 	add.w	r3, r3, #20
 8006d40:	4619      	mov	r1, r3
 8006d42:	4879      	ldr	r0, [pc, #484]	; (8006f28 <SetCronConfig+0x210>)
 8006d44:	f00c fc70 	bl	8013628 <f_stat>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8006d4e:	f102 0213 	add.w	r2, r2, #19
 8006d52:	7013      	strb	r3, [r2, #0]
	char *out_str = NULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8006d5a:	f102 020c 	add.w	r2, r2, #12
 8006d5e:	6013      	str	r3, [r2, #0]
	int i = 0;
 8006d60:	2300      	movs	r3, #0
 8006d62:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8006d66:	f102 021c 	add.w	r2, r2, #28
 8006d6a:	6013      	str	r3, [r2, #0]
	if (f_open(&fil, (const TCHAR*) "cron.ini",
 8006d6c:	463b      	mov	r3, r7
 8006d6e:	220a      	movs	r2, #10
 8006d70:	496d      	ldr	r1, [pc, #436]	; (8006f28 <SetCronConfig+0x210>)
 8006d72:	4618      	mov	r0, r3
 8006d74:	f00b fdec 	bl	8012950 <f_open>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f040 80c8 	bne.w	8006f10 <SetCronConfig+0x1f8>
	FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
		// Запись JSON в файл
		printf("Write CRON in to file. \r\n");
 8006d80:	486a      	ldr	r0, [pc, #424]	; (8006f2c <SetCronConfig+0x214>)
 8006d82:	f01f ffef 	bl	8026d64 <puts>

		root_obj = cJSON_CreateArray();
 8006d86:	f7fc fa35 	bl	80031f4 <cJSON_CreateArray>
 8006d8a:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006d8e:	f103 0318 	add.w	r3, r3, #24
 8006d92:	6018      	str	r0, [r3, #0]
		fld = cJSON_CreateObject();
 8006d94:	f7fc fa42 	bl	800321c <cJSON_CreateObject>
 8006d98:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006d9c:	f103 0314 	add.w	r3, r3, #20
 8006da0:	6018      	str	r0, [r3, #0]

		for (i = 0; i < MAXSIZE; i++) {
 8006da2:	2300      	movs	r3, #0
 8006da4:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8006da8:	f102 021c 	add.w	r2, r2, #28
 8006dac:	6013      	str	r3, [r2, #0]
 8006dae:	e067      	b.n	8006e80 <SetCronConfig+0x168>
			cJSON_AddItemToArray(root_obj, fld = cJSON_CreateObject());
 8006db0:	f7fc fa34 	bl	800321c <cJSON_CreateObject>
 8006db4:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006db8:	f103 0314 	add.w	r3, r3, #20
 8006dbc:	6018      	str	r0, [r3, #0]
 8006dbe:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006dc2:	f103 0314 	add.w	r3, r3, #20
 8006dc6:	6819      	ldr	r1, [r3, #0]
 8006dc8:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006dcc:	f103 0318 	add.w	r3, r3, #24
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	f7fc f8d4 	bl	8002f7e <cJSON_AddItemToArray>

			cJSON_AddStringToObject(fld, "cron", dbCrontxt[i].cron);
 8006dd6:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006dda:	f103 031c 	add.w	r3, r3, #28
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8006de4:	fb02 f303 	mul.w	r3, r2, r3
 8006de8:	4a51      	ldr	r2, [pc, #324]	; (8006f30 <SetCronConfig+0x218>)
 8006dea:	4413      	add	r3, r2
 8006dec:	461a      	mov	r2, r3
 8006dee:	4951      	ldr	r1, [pc, #324]	; (8006f34 <SetCronConfig+0x21c>)
 8006df0:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006df4:	f103 0314 	add.w	r3, r3, #20
 8006df8:	6818      	ldr	r0, [r3, #0]
 8006dfa:	f7fc f969 	bl	80030d0 <cJSON_AddStringToObject>
			cJSON_AddStringToObject(fld, "activ", dbCrontxt[i].activ);
 8006dfe:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006e02:	f103 031c 	add.w	r3, r3, #28
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8006e0c:	fb02 f303 	mul.w	r3, r2, r3
 8006e10:	3320      	adds	r3, #32
 8006e12:	4a47      	ldr	r2, [pc, #284]	; (8006f30 <SetCronConfig+0x218>)
 8006e14:	4413      	add	r3, r2
 8006e16:	3303      	adds	r3, #3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	4947      	ldr	r1, [pc, #284]	; (8006f38 <SetCronConfig+0x220>)
 8006e1c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006e20:	f103 0314 	add.w	r3, r3, #20
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	f7fc f953 	bl	80030d0 <cJSON_AddStringToObject>
			cJSON_AddNumberToObject(fld, "ptime", 0); //????????????????????????????????
 8006e2a:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 8006f20 <SetCronConfig+0x208>
 8006e2e:	4943      	ldr	r1, [pc, #268]	; (8006f3c <SetCronConfig+0x224>)
 8006e30:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006e34:	f103 0314 	add.w	r3, r3, #20
 8006e38:	6818      	ldr	r0, [r3, #0]
 8006e3a:	f7fc f925 	bl	8003088 <cJSON_AddNumberToObject>
			cJSON_AddStringToObject(fld, "info", dbCrontxt[i].info);
 8006e3e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006e42:	f103 031c 	add.w	r3, r3, #28
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8006e4c:	fb02 f303 	mul.w	r3, r2, r3
 8006e50:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006e54:	4a36      	ldr	r2, [pc, #216]	; (8006f30 <SetCronConfig+0x218>)
 8006e56:	4413      	add	r3, r2
 8006e58:	461a      	mov	r2, r3
 8006e5a:	4939      	ldr	r1, [pc, #228]	; (8006f40 <SetCronConfig+0x228>)
 8006e5c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006e60:	f103 0314 	add.w	r3, r3, #20
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	f7fc f933 	bl	80030d0 <cJSON_AddStringToObject>
		for (i = 0; i < MAXSIZE; i++) {
 8006e6a:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006e6e:	f103 031c 	add.w	r3, r3, #28
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3301      	adds	r3, #1
 8006e76:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8006e7a:	f102 021c 	add.w	r2, r2, #28
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006e84:	f103 031c 	add.w	r3, r3, #28
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b09      	cmp	r3, #9
 8006e8c:	dd90      	ble.n	8006db0 <SetCronConfig+0x98>

		}
		out_str = cJSON_PrintUnformatted(root_obj);
 8006e8e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006e92:	f103 0318 	add.w	r3, r3, #24
 8006e96:	6818      	ldr	r0, [r3, #0]
 8006e98:	f7fb fa34 	bl	8002304 <cJSON_PrintUnformatted>
 8006e9c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006ea0:	f103 030c 	add.w	r3, r3, #12
 8006ea4:	6018      	str	r0, [r3, #0]
		fresult = f_write(&fil, (const void*) out_str, strlen(out_str), &Byteswritten);
 8006ea6:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006eaa:	f103 030c 	add.w	r3, r3, #12
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	f7f9 f998 	bl	80001e4 <strlen>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006eba:	f103 0310 	add.w	r3, r3, #16
 8006ebe:	4638      	mov	r0, r7
 8006ec0:	f507 518a 	add.w	r1, r7, #4416	; 0x1140
 8006ec4:	f101 010c 	add.w	r1, r1, #12
 8006ec8:	6809      	ldr	r1, [r1, #0]
 8006eca:	f00c f932 	bl	8013132 <f_write>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8006ed4:	f102 0213 	add.w	r2, r2, #19
 8006ed8:	7013      	strb	r3, [r2, #0]
		free(out_str);
 8006eda:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006ede:	f103 030c 	add.w	r3, r3, #12
 8006ee2:	6818      	ldr	r0, [r3, #0]
 8006ee4:	f01f fb4a 	bl	802657c <free>

		if(fresult == FR_OK){

		}
		printf("f_open! cron.ini \r\n");
 8006ee8:	4816      	ldr	r0, [pc, #88]	; (8006f44 <SetCronConfig+0x22c>)
 8006eea:	f01f ff3b 	bl	8026d64 <puts>

		cJSON_Delete(root_obj);
 8006eee:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006ef2:	f103 0318 	add.w	r3, r3, #24
 8006ef6:	6818      	ldr	r0, [r3, #0]
 8006ef8:	f7fa f932 	bl	8001160 <cJSON_Delete>
		memset(fsbuffer, '\0', sizeof(fsbuffer));
 8006efc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006f00:	2100      	movs	r1, #0
 8006f02:	4811      	ldr	r0, [pc, #68]	; (8006f48 <SetCronConfig+0x230>)
 8006f04:	f01f fb78 	bl	80265f8 <memset>
		f_close(&fil);
 8006f08:	463b      	mov	r3, r7
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f00c fb5d 	bl	80135ca <f_close>
	}
}
 8006f10:	bf00      	nop
 8006f12:	f507 578b 	add.w	r7, r7, #4448	; 0x1160
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	f3af 8000 	nop.w
	...
 8006f28:	0802bf68 	.word	0x0802bf68
 8006f2c:	0802bfa8 	.word	0x0802bfa8
 8006f30:	20005f6c 	.word	0x20005f6c
 8006f34:	0802bf88 	.word	0x0802bf88
 8006f38:	0802bf90 	.word	0x0802bf90
 8006f3c:	0802bf98 	.word	0x0802bf98
 8006f40:	0802bfa0 	.word	0x0802bfa0
 8006f44:	0802bfc4 	.word	0x0802bfc4
 8006f48:	20000778 	.word	0x20000778

08006f4c <GetPinConfig>:
// если файл "pins.ini" существует, открываем для чтения.
void GetPinConfig() {
 8006f4c:	b590      	push	{r4, r7, lr}
 8006f4e:	f5ad 5d8b 	sub.w	sp, sp, #4448	; 0x1160
 8006f52:	b081      	sub	sp, #4
 8006f54:	af00      	add	r7, sp, #0

	FILINFO finfo;
	cJSON *root_obj = NULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8006f5c:	f102 0218 	add.w	r2, r2, #24
 8006f60:	6013      	str	r3, [r2, #0]
	FRESULT fresult;
	UINT Byteswritten; // File read/write count
	FIL fil; // File
	fresult = f_stat("pins.ini", &finfo);
 8006f62:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006f66:	f103 0314 	add.w	r3, r3, #20
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	481e      	ldr	r0, [pc, #120]	; (8006fe8 <GetPinConfig+0x9c>)
 8006f6e:	f00c fb5b 	bl	8013628 <f_stat>
 8006f72:	4603      	mov	r3, r0
 8006f74:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8006f78:	f102 0217 	add.w	r2, r2, #23
 8006f7c:	7013      	strb	r3, [r2, #0]
	if (fresult == FR_OK) {
 8006f7e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006f82:	f103 0317 	add.w	r3, r3, #23
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f040 8279 	bne.w	8007480 <GetPinConfig+0x534>
		// если файл существует, открываем его
		if (f_open(&fil, (const TCHAR*) "pins.ini", FA_READ) == FR_OK) {
 8006f8e:	463b      	mov	r3, r7
 8006f90:	2201      	movs	r2, #1
 8006f92:	4915      	ldr	r1, [pc, #84]	; (8006fe8 <GetPinConfig+0x9c>)
 8006f94:	4618      	mov	r0, r3
 8006f96:	f00b fcdb 	bl	8012950 <f_open>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f040 826f 	bne.w	8007480 <GetPinConfig+0x534>

			fresult = f_read(&fil, fsbuffer, sizeof(fsbuffer), &Byteswritten);
 8006fa2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006fa6:	f103 0310 	add.w	r3, r3, #16
 8006faa:	4638      	mov	r0, r7
 8006fac:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006fb0:	490e      	ldr	r1, [pc, #56]	; (8006fec <GetPinConfig+0xa0>)
 8006fb2:	f00b ff30 	bl	8012e16 <f_read>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8006fbc:	f102 0217 	add.w	r2, r2, #23
 8006fc0:	7013      	strb	r3, [r2, #0]
			printf("PINS file EXISTS! \r\n");
 8006fc2:	480b      	ldr	r0, [pc, #44]	; (8006ff0 <GetPinConfig+0xa4>)
 8006fc4:	f01f fece 	bl	8026d64 <puts>
			root_obj = cJSON_Parse(fsbuffer);
 8006fc8:	4808      	ldr	r0, [pc, #32]	; (8006fec <GetPinConfig+0xa0>)
 8006fca:	f7fb f8f9 	bl	80021c0 <cJSON_Parse>
 8006fce:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006fd2:	f103 0318 	add.w	r3, r3, #24
 8006fd6:	6018      	str	r0, [r3, #0]

			for (int i = 0; i < cJSON_GetArraySize(root_obj); i++) {
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8006fde:	f102 021c 	add.w	r2, r2, #28
 8006fe2:	6013      	str	r3, [r2, #0]
 8006fe4:	e22b      	b.n	800743e <GetPinConfig+0x4f2>
 8006fe6:	bf00      	nop
 8006fe8:	0802bfd8 	.word	0x0802bfd8
 8006fec:	20000778 	.word	0x20000778
 8006ff0:	0802bfe4 	.word	0x0802bfe4
				cJSON *pins_item = cJSON_GetArrayItem(root_obj, i);
 8006ff4:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8006ff8:	f103 031c 	add.w	r3, r3, #28
 8006ffc:	6819      	ldr	r1, [r3, #0]
 8006ffe:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007002:	f103 0318 	add.w	r3, r3, #24
 8007006:	6818      	ldr	r0, [r3, #0]
 8007008:	f7fb ff07 	bl	8002e1a <cJSON_GetArrayItem>
 800700c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007010:	f103 0310 	add.w	r3, r3, #16
 8007014:	6018      	str	r0, [r3, #0]

				cJSON *topin = cJSON_GetObjectItem(pins_item, "topin");
 8007016:	49cb      	ldr	r1, [pc, #812]	; (8007344 <GetPinConfig+0x3f8>)
 8007018:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800701c:	f103 0310 	add.w	r3, r3, #16
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	f7fb ff56 	bl	8002ed2 <cJSON_GetObjectItem>
 8007026:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800702a:	f103 030c 	add.w	r3, r3, #12
 800702e:	6018      	str	r0, [r3, #0]
				PinsConf[i].topin = topin->valueint;
 8007030:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007034:	f103 030c 	add.w	r3, r3, #12
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6959      	ldr	r1, [r3, #20]
 800703c:	48c2      	ldr	r0, [pc, #776]	; (8007348 <GetPinConfig+0x3fc>)
 800703e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007042:	f103 031c 	add.w	r3, r3, #28
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	4613      	mov	r3, r2
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	4413      	add	r3, r2
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	4403      	add	r3, r0
 8007052:	6019      	str	r1, [r3, #0]

				PinsConf[i].pwm = cJSON_GetObjectItem(pins_item, "pwm")->valueint;
 8007054:	49bd      	ldr	r1, [pc, #756]	; (800734c <GetPinConfig+0x400>)
 8007056:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800705a:	f103 0310 	add.w	r3, r3, #16
 800705e:	6818      	ldr	r0, [r3, #0]
 8007060:	f7fb ff37 	bl	8002ed2 <cJSON_GetObjectItem>
 8007064:	4603      	mov	r3, r0
 8007066:	6959      	ldr	r1, [r3, #20]
 8007068:	48b7      	ldr	r0, [pc, #732]	; (8007348 <GetPinConfig+0x3fc>)
 800706a:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800706e:	f103 031c 	add.w	r3, r3, #28
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	4613      	mov	r3, r2
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	4413      	add	r3, r2
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	4403      	add	r3, r0
 800707e:	3304      	adds	r3, #4
 8007080:	6019      	str	r1, [r3, #0]
				PinsConf[i].on = cJSON_GetObjectItem(pins_item, "on")->valueint;
 8007082:	49b3      	ldr	r1, [pc, #716]	; (8007350 <GetPinConfig+0x404>)
 8007084:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007088:	f103 0310 	add.w	r3, r3, #16
 800708c:	6818      	ldr	r0, [r3, #0]
 800708e:	f7fb ff20 	bl	8002ed2 <cJSON_GetObjectItem>
 8007092:	4603      	mov	r3, r0
 8007094:	6959      	ldr	r1, [r3, #20]
 8007096:	48ac      	ldr	r0, [pc, #688]	; (8007348 <GetPinConfig+0x3fc>)
 8007098:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800709c:	f103 031c 	add.w	r3, r3, #28
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	4613      	mov	r3, r2
 80070a4:	00db      	lsls	r3, r3, #3
 80070a6:	4413      	add	r3, r2
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	4403      	add	r3, r0
 80070ac:	3308      	adds	r3, #8
 80070ae:	6019      	str	r1, [r3, #0]
				PinsConf[i].istate = cJSON_GetObjectItem(pins_item, "istate")->valueint;
 80070b0:	49a8      	ldr	r1, [pc, #672]	; (8007354 <GetPinConfig+0x408>)
 80070b2:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80070b6:	f103 0310 	add.w	r3, r3, #16
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	f7fb ff09 	bl	8002ed2 <cJSON_GetObjectItem>
 80070c0:	4603      	mov	r3, r0
 80070c2:	6959      	ldr	r1, [r3, #20]
 80070c4:	48a0      	ldr	r0, [pc, #640]	; (8007348 <GetPinConfig+0x3fc>)
 80070c6:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80070ca:	f103 031c 	add.w	r3, r3, #28
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	4613      	mov	r3, r2
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	4413      	add	r3, r2
 80070d6:	011b      	lsls	r3, r3, #4
 80070d8:	4403      	add	r3, r0
 80070da:	330c      	adds	r3, #12
 80070dc:	6019      	str	r1, [r3, #0]
				PinsConf[i].dvalue = cJSON_GetObjectItem(pins_item, "dvalue")->valueint;
 80070de:	499e      	ldr	r1, [pc, #632]	; (8007358 <GetPinConfig+0x40c>)
 80070e0:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80070e4:	f103 0310 	add.w	r3, r3, #16
 80070e8:	6818      	ldr	r0, [r3, #0]
 80070ea:	f7fb fef2 	bl	8002ed2 <cJSON_GetObjectItem>
 80070ee:	4603      	mov	r3, r0
 80070f0:	6959      	ldr	r1, [r3, #20]
 80070f2:	4895      	ldr	r0, [pc, #596]	; (8007348 <GetPinConfig+0x3fc>)
 80070f4:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80070f8:	f103 031c 	add.w	r3, r3, #28
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	4613      	mov	r3, r2
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	4413      	add	r3, r2
 8007104:	011b      	lsls	r3, r3, #4
 8007106:	4403      	add	r3, r0
 8007108:	3310      	adds	r3, #16
 800710a:	6019      	str	r1, [r3, #0]
				PinsConf[i].ponr = cJSON_GetObjectItem(pins_item, "ponr")->valueint;
 800710c:	4993      	ldr	r1, [pc, #588]	; (800735c <GetPinConfig+0x410>)
 800710e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007112:	f103 0310 	add.w	r3, r3, #16
 8007116:	6818      	ldr	r0, [r3, #0]
 8007118:	f7fb fedb 	bl	8002ed2 <cJSON_GetObjectItem>
 800711c:	4603      	mov	r3, r0
 800711e:	6959      	ldr	r1, [r3, #20]
 8007120:	4889      	ldr	r0, [pc, #548]	; (8007348 <GetPinConfig+0x3fc>)
 8007122:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007126:	f103 031c 	add.w	r3, r3, #28
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	4613      	mov	r3, r2
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	4413      	add	r3, r2
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	4403      	add	r3, r0
 8007136:	3314      	adds	r3, #20
 8007138:	6019      	str	r1, [r3, #0]
				strcpy(PinsConf[i].ptype, cJSON_GetObjectItem(pins_item, "ptype")->valuestring);
 800713a:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800713e:	f103 031c 	add.w	r3, r3, #28
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	4613      	mov	r3, r2
 8007146:	00db      	lsls	r3, r3, #3
 8007148:	4413      	add	r3, r2
 800714a:	011b      	lsls	r3, r3, #4
 800714c:	3318      	adds	r3, #24
 800714e:	4a7e      	ldr	r2, [pc, #504]	; (8007348 <GetPinConfig+0x3fc>)
 8007150:	189c      	adds	r4, r3, r2
 8007152:	4983      	ldr	r1, [pc, #524]	; (8007360 <GetPinConfig+0x414>)
 8007154:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007158:	f103 0310 	add.w	r3, r3, #16
 800715c:	6818      	ldr	r0, [r3, #0]
 800715e:	f7fb feb8 	bl	8002ed2 <cJSON_GetObjectItem>
 8007162:	4603      	mov	r3, r0
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	4619      	mov	r1, r3
 8007168:	4620      	mov	r0, r4
 800716a:	f01f ffa6 	bl	80270ba <strcpy>
				PinsConf[i].binter = cJSON_GetObjectItem(pins_item, "binter")->valueint;
 800716e:	497d      	ldr	r1, [pc, #500]	; (8007364 <GetPinConfig+0x418>)
 8007170:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007174:	f103 0310 	add.w	r3, r3, #16
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	f7fb feaa 	bl	8002ed2 <cJSON_GetObjectItem>
 800717e:	4603      	mov	r3, r0
 8007180:	6959      	ldr	r1, [r3, #20]
 8007182:	4871      	ldr	r0, [pc, #452]	; (8007348 <GetPinConfig+0x3fc>)
 8007184:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007188:	f103 031c 	add.w	r3, r3, #28
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	4613      	mov	r3, r2
 8007190:	00db      	lsls	r3, r3, #3
 8007192:	4413      	add	r3, r2
 8007194:	011b      	lsls	r3, r3, #4
 8007196:	4403      	add	r3, r0
 8007198:	3328      	adds	r3, #40	; 0x28
 800719a:	6019      	str	r1, [r3, #0]
				PinsConf[i].hinter = cJSON_GetObjectItem(pins_item, "hinter")->valueint;
 800719c:	4972      	ldr	r1, [pc, #456]	; (8007368 <GetPinConfig+0x41c>)
 800719e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80071a2:	f103 0310 	add.w	r3, r3, #16
 80071a6:	6818      	ldr	r0, [r3, #0]
 80071a8:	f7fb fe93 	bl	8002ed2 <cJSON_GetObjectItem>
 80071ac:	4603      	mov	r3, r0
 80071ae:	6959      	ldr	r1, [r3, #20]
 80071b0:	4865      	ldr	r0, [pc, #404]	; (8007348 <GetPinConfig+0x3fc>)
 80071b2:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80071b6:	f103 031c 	add.w	r3, r3, #28
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	4613      	mov	r3, r2
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	4413      	add	r3, r2
 80071c2:	011b      	lsls	r3, r3, #4
 80071c4:	4403      	add	r3, r0
 80071c6:	332c      	adds	r3, #44	; 0x2c
 80071c8:	6019      	str	r1, [r3, #0]
				PinsConf[i].repeat = cJSON_GetObjectItem(pins_item, "repeat")->valueint;
 80071ca:	4968      	ldr	r1, [pc, #416]	; (800736c <GetPinConfig+0x420>)
 80071cc:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80071d0:	f103 0310 	add.w	r3, r3, #16
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	f7fb fe7c 	bl	8002ed2 <cJSON_GetObjectItem>
 80071da:	4603      	mov	r3, r0
 80071dc:	6959      	ldr	r1, [r3, #20]
 80071de:	485a      	ldr	r0, [pc, #360]	; (8007348 <GetPinConfig+0x3fc>)
 80071e0:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80071e4:	f103 031c 	add.w	r3, r3, #28
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	4613      	mov	r3, r2
 80071ec:	00db      	lsls	r3, r3, #3
 80071ee:	4413      	add	r3, r2
 80071f0:	011b      	lsls	r3, r3, #4
 80071f2:	4403      	add	r3, r0
 80071f4:	3330      	adds	r3, #48	; 0x30
 80071f6:	6019      	str	r1, [r3, #0]
				PinsConf[i].rinter = cJSON_GetObjectItem(pins_item, "rinter")->valueint;
 80071f8:	495d      	ldr	r1, [pc, #372]	; (8007370 <GetPinConfig+0x424>)
 80071fa:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80071fe:	f103 0310 	add.w	r3, r3, #16
 8007202:	6818      	ldr	r0, [r3, #0]
 8007204:	f7fb fe65 	bl	8002ed2 <cJSON_GetObjectItem>
 8007208:	4603      	mov	r3, r0
 800720a:	6959      	ldr	r1, [r3, #20]
 800720c:	484e      	ldr	r0, [pc, #312]	; (8007348 <GetPinConfig+0x3fc>)
 800720e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007212:	f103 031c 	add.w	r3, r3, #28
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	4613      	mov	r3, r2
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	4413      	add	r3, r2
 800721e:	011b      	lsls	r3, r3, #4
 8007220:	4403      	add	r3, r0
 8007222:	3334      	adds	r3, #52	; 0x34
 8007224:	6019      	str	r1, [r3, #0]
				PinsConf[i].dcinter = cJSON_GetObjectItem(pins_item, "dcinter")->valueint;
 8007226:	4953      	ldr	r1, [pc, #332]	; (8007374 <GetPinConfig+0x428>)
 8007228:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800722c:	f103 0310 	add.w	r3, r3, #16
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	f7fb fe4e 	bl	8002ed2 <cJSON_GetObjectItem>
 8007236:	4603      	mov	r3, r0
 8007238:	6959      	ldr	r1, [r3, #20]
 800723a:	4843      	ldr	r0, [pc, #268]	; (8007348 <GetPinConfig+0x3fc>)
 800723c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007240:	f103 031c 	add.w	r3, r3, #28
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	4613      	mov	r3, r2
 8007248:	00db      	lsls	r3, r3, #3
 800724a:	4413      	add	r3, r2
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	4403      	add	r3, r0
 8007250:	3338      	adds	r3, #56	; 0x38
 8007252:	6019      	str	r1, [r3, #0]
				PinsConf[i].pclick = cJSON_GetObjectItem(pins_item, "pclick")->valueint;
 8007254:	4948      	ldr	r1, [pc, #288]	; (8007378 <GetPinConfig+0x42c>)
 8007256:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800725a:	f103 0310 	add.w	r3, r3, #16
 800725e:	6818      	ldr	r0, [r3, #0]
 8007260:	f7fb fe37 	bl	8002ed2 <cJSON_GetObjectItem>
 8007264:	4603      	mov	r3, r0
 8007266:	6959      	ldr	r1, [r3, #20]
 8007268:	4837      	ldr	r0, [pc, #220]	; (8007348 <GetPinConfig+0x3fc>)
 800726a:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800726e:	f103 031c 	add.w	r3, r3, #28
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	4613      	mov	r3, r2
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	4413      	add	r3, r2
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	4403      	add	r3, r0
 800727e:	333c      	adds	r3, #60	; 0x3c
 8007280:	6019      	str	r1, [r3, #0]
				strcpy(PinsConf[i].info, cJSON_GetObjectItem(pins_item, "info")->valuestring);
 8007282:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007286:	f103 031c 	add.w	r3, r3, #28
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	4613      	mov	r3, r2
 800728e:	00db      	lsls	r3, r3, #3
 8007290:	4413      	add	r3, r2
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	3340      	adds	r3, #64	; 0x40
 8007296:	4a2c      	ldr	r2, [pc, #176]	; (8007348 <GetPinConfig+0x3fc>)
 8007298:	189c      	adds	r4, r3, r2
 800729a:	4938      	ldr	r1, [pc, #224]	; (800737c <GetPinConfig+0x430>)
 800729c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80072a0:	f103 0310 	add.w	r3, r3, #16
 80072a4:	6818      	ldr	r0, [r3, #0]
 80072a6:	f7fb fe14 	bl	8002ed2 <cJSON_GetObjectItem>
 80072aa:	4603      	mov	r3, r0
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	4619      	mov	r1, r3
 80072b0:	4620      	mov	r0, r4
 80072b2:	f01f ff02 	bl	80270ba <strcpy>
				PinsConf[i].onoff = cJSON_GetObjectItem(pins_item, "onoff")->valueint;
 80072b6:	4932      	ldr	r1, [pc, #200]	; (8007380 <GetPinConfig+0x434>)
 80072b8:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80072bc:	f103 0310 	add.w	r3, r3, #16
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	f7fb fe06 	bl	8002ed2 <cJSON_GetObjectItem>
 80072c6:	4603      	mov	r3, r0
 80072c8:	6959      	ldr	r1, [r3, #20]
 80072ca:	481f      	ldr	r0, [pc, #124]	; (8007348 <GetPinConfig+0x3fc>)
 80072cc:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80072d0:	f103 031c 	add.w	r3, r3, #28
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	4613      	mov	r3, r2
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	4413      	add	r3, r2
 80072dc:	011b      	lsls	r3, r3, #4
 80072de:	4403      	add	r3, r0
 80072e0:	3360      	adds	r3, #96	; 0x60
 80072e2:	6019      	str	r1, [r3, #0]
				PinsConf[i].event = cJSON_GetObjectItem(pins_item, "event")->valueint;
 80072e4:	4927      	ldr	r1, [pc, #156]	; (8007384 <GetPinConfig+0x438>)
 80072e6:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80072ea:	f103 0310 	add.w	r3, r3, #16
 80072ee:	6818      	ldr	r0, [r3, #0]
 80072f0:	f7fb fdef 	bl	8002ed2 <cJSON_GetObjectItem>
 80072f4:	4603      	mov	r3, r0
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	b218      	sxth	r0, r3
 80072fa:	4913      	ldr	r1, [pc, #76]	; (8007348 <GetPinConfig+0x3fc>)
 80072fc:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007300:	f103 031c 	add.w	r3, r3, #28
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4613      	mov	r3, r2
 8007308:	00db      	lsls	r3, r3, #3
 800730a:	4413      	add	r3, r2
 800730c:	011b      	lsls	r3, r3, #4
 800730e:	440b      	add	r3, r1
 8007310:	3364      	adds	r3, #100	; 0x64
 8007312:	4602      	mov	r2, r0
 8007314:	801a      	strh	r2, [r3, #0]
				PinsConf[i].act = cJSON_GetObjectItem(pins_item, "act")->valueint;
 8007316:	491c      	ldr	r1, [pc, #112]	; (8007388 <GetPinConfig+0x43c>)
 8007318:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800731c:	f103 0310 	add.w	r3, r3, #16
 8007320:	6818      	ldr	r0, [r3, #0]
 8007322:	f7fb fdd6 	bl	8002ed2 <cJSON_GetObjectItem>
 8007326:	4603      	mov	r3, r0
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	b218      	sxth	r0, r3
 800732c:	4906      	ldr	r1, [pc, #24]	; (8007348 <GetPinConfig+0x3fc>)
 800732e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007332:	f103 031c 	add.w	r3, r3, #28
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	4613      	mov	r3, r2
 800733a:	00db      	lsls	r3, r3, #3
 800733c:	4413      	add	r3, r2
 800733e:	011b      	lsls	r3, r3, #4
 8007340:	e024      	b.n	800738c <GetPinConfig+0x440>
 8007342:	bf00      	nop
 8007344:	0802bff8 	.word	0x0802bff8
 8007348:	20005c9c 	.word	0x20005c9c
 800734c:	0802c000 	.word	0x0802c000
 8007350:	0802c004 	.word	0x0802c004
 8007354:	0802c008 	.word	0x0802c008
 8007358:	0802c010 	.word	0x0802c010
 800735c:	0802c018 	.word	0x0802c018
 8007360:	0802c020 	.word	0x0802c020
 8007364:	0802c028 	.word	0x0802c028
 8007368:	0802c030 	.word	0x0802c030
 800736c:	0802c038 	.word	0x0802c038
 8007370:	0802c040 	.word	0x0802c040
 8007374:	0802c048 	.word	0x0802c048
 8007378:	0802c050 	.word	0x0802c050
 800737c:	0802bfa0 	.word	0x0802bfa0
 8007380:	0802c058 	.word	0x0802c058
 8007384:	0802c060 	.word	0x0802c060
 8007388:	0802c068 	.word	0x0802c068
 800738c:	440b      	add	r3, r1
 800738e:	3366      	adds	r3, #102	; 0x66
 8007390:	4602      	mov	r2, r0
 8007392:	801a      	strh	r2, [r3, #0]
				PinsConf[i].parametr = cJSON_GetObjectItem(pins_item, "parametr")->valueint;
 8007394:	493d      	ldr	r1, [pc, #244]	; (800748c <GetPinConfig+0x540>)
 8007396:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800739a:	f103 0310 	add.w	r3, r3, #16
 800739e:	6818      	ldr	r0, [r3, #0]
 80073a0:	f7fb fd97 	bl	8002ed2 <cJSON_GetObjectItem>
 80073a4:	4603      	mov	r3, r0
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	b218      	sxth	r0, r3
 80073aa:	4939      	ldr	r1, [pc, #228]	; (8007490 <GetPinConfig+0x544>)
 80073ac:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80073b0:	f103 031c 	add.w	r3, r3, #28
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	4613      	mov	r3, r2
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	4413      	add	r3, r2
 80073bc:	011b      	lsls	r3, r3, #4
 80073be:	440b      	add	r3, r1
 80073c0:	3368      	adds	r3, #104	; 0x68
 80073c2:	4602      	mov	r2, r0
 80073c4:	801a      	strh	r2, [r3, #0]
				PinsConf[i].timeout = cJSON_GetObjectItem(pins_item, "timeout")->valueint;
 80073c6:	4933      	ldr	r1, [pc, #204]	; (8007494 <GetPinConfig+0x548>)
 80073c8:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80073cc:	f103 0310 	add.w	r3, r3, #16
 80073d0:	6818      	ldr	r0, [r3, #0]
 80073d2:	f7fb fd7e 	bl	8002ed2 <cJSON_GetObjectItem>
 80073d6:	4603      	mov	r3, r0
 80073d8:	6959      	ldr	r1, [r3, #20]
 80073da:	482d      	ldr	r0, [pc, #180]	; (8007490 <GetPinConfig+0x544>)
 80073dc:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80073e0:	f103 031c 	add.w	r3, r3, #28
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	4613      	mov	r3, r2
 80073e8:	00db      	lsls	r3, r3, #3
 80073ea:	4413      	add	r3, r2
 80073ec:	011b      	lsls	r3, r3, #4
 80073ee:	4403      	add	r3, r0
 80073f0:	336c      	adds	r3, #108	; 0x6c
 80073f2:	6019      	str	r1, [r3, #0]
				strcpy(PinsConf[i].condit, cJSON_GetObjectItem(pins_item, "condit")->valuestring);
 80073f4:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80073f8:	f103 031c 	add.w	r3, r3, #28
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	4613      	mov	r3, r2
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	4413      	add	r3, r2
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	3370      	adds	r3, #112	; 0x70
 8007408:	4a21      	ldr	r2, [pc, #132]	; (8007490 <GetPinConfig+0x544>)
 800740a:	189c      	adds	r4, r3, r2
 800740c:	4922      	ldr	r1, [pc, #136]	; (8007498 <GetPinConfig+0x54c>)
 800740e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007412:	f103 0310 	add.w	r3, r3, #16
 8007416:	6818      	ldr	r0, [r3, #0]
 8007418:	f7fb fd5b 	bl	8002ed2 <cJSON_GetObjectItem>
 800741c:	4603      	mov	r3, r0
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	4619      	mov	r1, r3
 8007422:	4620      	mov	r0, r4
 8007424:	f01f fe49 	bl	80270ba <strcpy>
			for (int i = 0; i < cJSON_GetArraySize(root_obj); i++) {
 8007428:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800742c:	f103 031c 	add.w	r3, r3, #28
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3301      	adds	r3, #1
 8007434:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8007438:	f102 021c 	add.w	r2, r2, #28
 800743c:	6013      	str	r3, [r2, #0]
 800743e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007442:	f103 0318 	add.w	r3, r3, #24
 8007446:	6818      	ldr	r0, [r3, #0]
 8007448:	f7fb fca3 	bl	8002d92 <cJSON_GetArraySize>
 800744c:	4602      	mov	r2, r0
 800744e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007452:	f103 031c 	add.w	r3, r3, #28
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4293      	cmp	r3, r2
 800745a:	f6ff adcb 	blt.w	8006ff4 <GetPinConfig+0xa8>
			}

			cJSON_Delete(root_obj);
 800745e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007462:	f103 0318 	add.w	r3, r3, #24
 8007466:	6818      	ldr	r0, [r3, #0]
 8007468:	f7f9 fe7a 	bl	8001160 <cJSON_Delete>
			memset(fsbuffer, '\0', sizeof(fsbuffer));
 800746c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007470:	2100      	movs	r1, #0
 8007472:	480a      	ldr	r0, [pc, #40]	; (800749c <GetPinConfig+0x550>)
 8007474:	f01f f8c0 	bl	80265f8 <memset>
			f_close(&fil);
 8007478:	463b      	mov	r3, r7
 800747a:	4618      	mov	r0, r3
 800747c:	f00c f8a5 	bl	80135ca <f_close>
		}
	}
}
 8007480:	bf00      	nop
 8007482:	f507 578b 	add.w	r7, r7, #4448	; 0x1160
 8007486:	3704      	adds	r7, #4
 8007488:	46bd      	mov	sp, r7
 800748a:	bd90      	pop	{r4, r7, pc}
 800748c:	0802c06c 	.word	0x0802c06c
 8007490:	20005c9c 	.word	0x20005c9c
 8007494:	0802c078 	.word	0x0802c078
 8007498:	0802c080 	.word	0x0802c080
 800749c:	20000778 	.word	0x20000778

080074a0 <SetPinConfig>:
//	} else {
//		printf("Error creating file! \r\n");
//	}
//}

void SetPinConfig() {
 80074a0:	b580      	push	{r7, lr}
 80074a2:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
  FIL fil; // File
  FRESULT fresult;

  fresult = f_open(&fil, (const TCHAR*) "pins.ini", FA_CREATE_ALWAYS | FA_WRITE);
 80074aa:	f107 0318 	add.w	r3, r7, #24
 80074ae:	3b18      	subs	r3, #24
 80074b0:	220a      	movs	r2, #10
 80074b2:	490c      	ldr	r1, [pc, #48]	; (80074e4 <SetPinConfig+0x44>)
 80074b4:	4618      	mov	r0, r3
 80074b6:	f00b fa4b 	bl	8012950 <f_open>
 80074ba:	4603      	mov	r3, r0
 80074bc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80074c0:	f102 0213 	add.w	r2, r2, #19
 80074c4:	7013      	strb	r3, [r2, #0]

  if (fresult == FR_OK) {
 80074c6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80074ca:	f103 0313 	add.w	r3, r3, #19
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f040 81ed 	bne.w	80078b0 <SetPinConfig+0x410>
    for (int i = 0; i < NUMPIN; i++) {
 80074d6:	2300      	movs	r3, #0
 80074d8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80074dc:	f102 0214 	add.w	r2, r2, #20
 80074e0:	6013      	str	r3, [r2, #0]
 80074e2:	e1d3      	b.n	800788c <SetPinConfig+0x3ec>
 80074e4:	0802bfd8 	.word	0x0802bfd8

      f_printf(&fil, "topin\t\"%d\"\n", PinsConf[i].topin);
 80074e8:	49d2      	ldr	r1, [pc, #840]	; (8007834 <SetPinConfig+0x394>)
 80074ea:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80074ee:	f103 0314 	add.w	r3, r3, #20
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	4613      	mov	r3, r2
 80074f6:	00db      	lsls	r3, r3, #3
 80074f8:	4413      	add	r3, r2
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	440b      	add	r3, r1
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	f107 0318 	add.w	r3, r7, #24
 8007504:	3b18      	subs	r3, #24
 8007506:	49cc      	ldr	r1, [pc, #816]	; (8007838 <SetPinConfig+0x398>)
 8007508:	4618      	mov	r0, r3
 800750a:	f00c f951 	bl	80137b0 <f_printf>
      f_printf(&fil, "pwm\t\"%d\"\n", PinsConf[i].pwm);
 800750e:	49c9      	ldr	r1, [pc, #804]	; (8007834 <SetPinConfig+0x394>)
 8007510:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007514:	f103 0314 	add.w	r3, r3, #20
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	4613      	mov	r3, r2
 800751c:	00db      	lsls	r3, r3, #3
 800751e:	4413      	add	r3, r2
 8007520:	011b      	lsls	r3, r3, #4
 8007522:	440b      	add	r3, r1
 8007524:	3304      	adds	r3, #4
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	f107 0318 	add.w	r3, r7, #24
 800752c:	3b18      	subs	r3, #24
 800752e:	49c3      	ldr	r1, [pc, #780]	; (800783c <SetPinConfig+0x39c>)
 8007530:	4618      	mov	r0, r3
 8007532:	f00c f93d 	bl	80137b0 <f_printf>
      f_printf(&fil, "on\t\"%d\"\n", PinsConf[i].on);
 8007536:	49bf      	ldr	r1, [pc, #764]	; (8007834 <SetPinConfig+0x394>)
 8007538:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800753c:	f103 0314 	add.w	r3, r3, #20
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	4613      	mov	r3, r2
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	4413      	add	r3, r2
 8007548:	011b      	lsls	r3, r3, #4
 800754a:	440b      	add	r3, r1
 800754c:	3308      	adds	r3, #8
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	f107 0318 	add.w	r3, r7, #24
 8007554:	3b18      	subs	r3, #24
 8007556:	49ba      	ldr	r1, [pc, #744]	; (8007840 <SetPinConfig+0x3a0>)
 8007558:	4618      	mov	r0, r3
 800755a:	f00c f929 	bl	80137b0 <f_printf>
      f_printf(&fil, "istate\t\"%d\"\n", PinsConf[i].istate);
 800755e:	49b5      	ldr	r1, [pc, #724]	; (8007834 <SetPinConfig+0x394>)
 8007560:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007564:	f103 0314 	add.w	r3, r3, #20
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	4613      	mov	r3, r2
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	4413      	add	r3, r2
 8007570:	011b      	lsls	r3, r3, #4
 8007572:	440b      	add	r3, r1
 8007574:	330c      	adds	r3, #12
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	f107 0318 	add.w	r3, r7, #24
 800757c:	3b18      	subs	r3, #24
 800757e:	49b1      	ldr	r1, [pc, #708]	; (8007844 <SetPinConfig+0x3a4>)
 8007580:	4618      	mov	r0, r3
 8007582:	f00c f915 	bl	80137b0 <f_printf>
      f_printf(&fil, "dvalue\t\"%d\"\n", PinsConf[i].dvalue);
 8007586:	49ab      	ldr	r1, [pc, #684]	; (8007834 <SetPinConfig+0x394>)
 8007588:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800758c:	f103 0314 	add.w	r3, r3, #20
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	4613      	mov	r3, r2
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	4413      	add	r3, r2
 8007598:	011b      	lsls	r3, r3, #4
 800759a:	440b      	add	r3, r1
 800759c:	3310      	adds	r3, #16
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	f107 0318 	add.w	r3, r7, #24
 80075a4:	3b18      	subs	r3, #24
 80075a6:	49a8      	ldr	r1, [pc, #672]	; (8007848 <SetPinConfig+0x3a8>)
 80075a8:	4618      	mov	r0, r3
 80075aa:	f00c f901 	bl	80137b0 <f_printf>
      f_printf(&fil, "ponr\t\"%d\"\n", PinsConf[i].ponr);
 80075ae:	49a1      	ldr	r1, [pc, #644]	; (8007834 <SetPinConfig+0x394>)
 80075b0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80075b4:	f103 0314 	add.w	r3, r3, #20
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	4613      	mov	r3, r2
 80075bc:	00db      	lsls	r3, r3, #3
 80075be:	4413      	add	r3, r2
 80075c0:	011b      	lsls	r3, r3, #4
 80075c2:	440b      	add	r3, r1
 80075c4:	3314      	adds	r3, #20
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	f107 0318 	add.w	r3, r7, #24
 80075cc:	3b18      	subs	r3, #24
 80075ce:	499f      	ldr	r1, [pc, #636]	; (800784c <SetPinConfig+0x3ac>)
 80075d0:	4618      	mov	r0, r3
 80075d2:	f00c f8ed 	bl	80137b0 <f_printf>
      f_printf(&fil, "ptype\t\"%s\"\n", PinsConf[i].ptype);
 80075d6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80075da:	f103 0314 	add.w	r3, r3, #20
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	4613      	mov	r3, r2
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	4413      	add	r3, r2
 80075e6:	011b      	lsls	r3, r3, #4
 80075e8:	3318      	adds	r3, #24
 80075ea:	4a92      	ldr	r2, [pc, #584]	; (8007834 <SetPinConfig+0x394>)
 80075ec:	441a      	add	r2, r3
 80075ee:	f107 0318 	add.w	r3, r7, #24
 80075f2:	3b18      	subs	r3, #24
 80075f4:	4996      	ldr	r1, [pc, #600]	; (8007850 <SetPinConfig+0x3b0>)
 80075f6:	4618      	mov	r0, r3
 80075f8:	f00c f8da 	bl	80137b0 <f_printf>
      f_printf(&fil, "binter\t\"%d\"\n", PinsConf[i].binter);
 80075fc:	498d      	ldr	r1, [pc, #564]	; (8007834 <SetPinConfig+0x394>)
 80075fe:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007602:	f103 0314 	add.w	r3, r3, #20
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	4613      	mov	r3, r2
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	4413      	add	r3, r2
 800760e:	011b      	lsls	r3, r3, #4
 8007610:	440b      	add	r3, r1
 8007612:	3328      	adds	r3, #40	; 0x28
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	f107 0318 	add.w	r3, r7, #24
 800761a:	3b18      	subs	r3, #24
 800761c:	498d      	ldr	r1, [pc, #564]	; (8007854 <SetPinConfig+0x3b4>)
 800761e:	4618      	mov	r0, r3
 8007620:	f00c f8c6 	bl	80137b0 <f_printf>
      f_printf(&fil, "hinter\t\"%d\"\n", PinsConf[i].hinter);
 8007624:	4983      	ldr	r1, [pc, #524]	; (8007834 <SetPinConfig+0x394>)
 8007626:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800762a:	f103 0314 	add.w	r3, r3, #20
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	4613      	mov	r3, r2
 8007632:	00db      	lsls	r3, r3, #3
 8007634:	4413      	add	r3, r2
 8007636:	011b      	lsls	r3, r3, #4
 8007638:	440b      	add	r3, r1
 800763a:	332c      	adds	r3, #44	; 0x2c
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	f107 0318 	add.w	r3, r7, #24
 8007642:	3b18      	subs	r3, #24
 8007644:	4984      	ldr	r1, [pc, #528]	; (8007858 <SetPinConfig+0x3b8>)
 8007646:	4618      	mov	r0, r3
 8007648:	f00c f8b2 	bl	80137b0 <f_printf>
      f_printf(&fil, "repeat\t\"%d\"\n", PinsConf[i].repeat);
 800764c:	4979      	ldr	r1, [pc, #484]	; (8007834 <SetPinConfig+0x394>)
 800764e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007652:	f103 0314 	add.w	r3, r3, #20
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	4613      	mov	r3, r2
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	4413      	add	r3, r2
 800765e:	011b      	lsls	r3, r3, #4
 8007660:	440b      	add	r3, r1
 8007662:	3330      	adds	r3, #48	; 0x30
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	f107 0318 	add.w	r3, r7, #24
 800766a:	3b18      	subs	r3, #24
 800766c:	497b      	ldr	r1, [pc, #492]	; (800785c <SetPinConfig+0x3bc>)
 800766e:	4618      	mov	r0, r3
 8007670:	f00c f89e 	bl	80137b0 <f_printf>
      f_printf(&fil, "rinter\t\"%d\"\n", PinsConf[i].rinter);
 8007674:	496f      	ldr	r1, [pc, #444]	; (8007834 <SetPinConfig+0x394>)
 8007676:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800767a:	f103 0314 	add.w	r3, r3, #20
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	4613      	mov	r3, r2
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	4413      	add	r3, r2
 8007686:	011b      	lsls	r3, r3, #4
 8007688:	440b      	add	r3, r1
 800768a:	3334      	adds	r3, #52	; 0x34
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	f107 0318 	add.w	r3, r7, #24
 8007692:	3b18      	subs	r3, #24
 8007694:	4972      	ldr	r1, [pc, #456]	; (8007860 <SetPinConfig+0x3c0>)
 8007696:	4618      	mov	r0, r3
 8007698:	f00c f88a 	bl	80137b0 <f_printf>
      f_printf(&fil, "dcinter\t\"%d\"\n", PinsConf[i].dcinter);
 800769c:	4965      	ldr	r1, [pc, #404]	; (8007834 <SetPinConfig+0x394>)
 800769e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80076a2:	f103 0314 	add.w	r3, r3, #20
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	4613      	mov	r3, r2
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	4413      	add	r3, r2
 80076ae:	011b      	lsls	r3, r3, #4
 80076b0:	440b      	add	r3, r1
 80076b2:	3338      	adds	r3, #56	; 0x38
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	f107 0318 	add.w	r3, r7, #24
 80076ba:	3b18      	subs	r3, #24
 80076bc:	4969      	ldr	r1, [pc, #420]	; (8007864 <SetPinConfig+0x3c4>)
 80076be:	4618      	mov	r0, r3
 80076c0:	f00c f876 	bl	80137b0 <f_printf>
      f_printf(&fil, "pclick\t\"%d\"\n", PinsConf[i].pclick);
 80076c4:	495b      	ldr	r1, [pc, #364]	; (8007834 <SetPinConfig+0x394>)
 80076c6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80076ca:	f103 0314 	add.w	r3, r3, #20
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	4613      	mov	r3, r2
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	4413      	add	r3, r2
 80076d6:	011b      	lsls	r3, r3, #4
 80076d8:	440b      	add	r3, r1
 80076da:	333c      	adds	r3, #60	; 0x3c
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	f107 0318 	add.w	r3, r7, #24
 80076e2:	3b18      	subs	r3, #24
 80076e4:	4960      	ldr	r1, [pc, #384]	; (8007868 <SetPinConfig+0x3c8>)
 80076e6:	4618      	mov	r0, r3
 80076e8:	f00c f862 	bl	80137b0 <f_printf>
      f_printf(&fil, "info\t\"%s\"\n", PinsConf[i].info);
 80076ec:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80076f0:	f103 0314 	add.w	r3, r3, #20
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	4613      	mov	r3, r2
 80076f8:	00db      	lsls	r3, r3, #3
 80076fa:	4413      	add	r3, r2
 80076fc:	011b      	lsls	r3, r3, #4
 80076fe:	3340      	adds	r3, #64	; 0x40
 8007700:	4a4c      	ldr	r2, [pc, #304]	; (8007834 <SetPinConfig+0x394>)
 8007702:	441a      	add	r2, r3
 8007704:	f107 0318 	add.w	r3, r7, #24
 8007708:	3b18      	subs	r3, #24
 800770a:	4958      	ldr	r1, [pc, #352]	; (800786c <SetPinConfig+0x3cc>)
 800770c:	4618      	mov	r0, r3
 800770e:	f00c f84f 	bl	80137b0 <f_printf>
      f_printf(&fil, "onoff\t\"%d\"\n", PinsConf[i].onoff);
 8007712:	4948      	ldr	r1, [pc, #288]	; (8007834 <SetPinConfig+0x394>)
 8007714:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007718:	f103 0314 	add.w	r3, r3, #20
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	4613      	mov	r3, r2
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	4413      	add	r3, r2
 8007724:	011b      	lsls	r3, r3, #4
 8007726:	440b      	add	r3, r1
 8007728:	3360      	adds	r3, #96	; 0x60
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	f107 0318 	add.w	r3, r7, #24
 8007730:	3b18      	subs	r3, #24
 8007732:	494f      	ldr	r1, [pc, #316]	; (8007870 <SetPinConfig+0x3d0>)
 8007734:	4618      	mov	r0, r3
 8007736:	f00c f83b 	bl	80137b0 <f_printf>
      f_printf(&fil, "event\t\"%d\"\n", PinsConf[i].event);
 800773a:	493e      	ldr	r1, [pc, #248]	; (8007834 <SetPinConfig+0x394>)
 800773c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007740:	f103 0314 	add.w	r3, r3, #20
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	4613      	mov	r3, r2
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	4413      	add	r3, r2
 800774c:	011b      	lsls	r3, r3, #4
 800774e:	440b      	add	r3, r1
 8007750:	3364      	adds	r3, #100	; 0x64
 8007752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007756:	461a      	mov	r2, r3
 8007758:	f107 0318 	add.w	r3, r7, #24
 800775c:	3b18      	subs	r3, #24
 800775e:	4945      	ldr	r1, [pc, #276]	; (8007874 <SetPinConfig+0x3d4>)
 8007760:	4618      	mov	r0, r3
 8007762:	f00c f825 	bl	80137b0 <f_printf>
      f_printf(&fil, "act\t\"%d\"\n", PinsConf[i].act);
 8007766:	4933      	ldr	r1, [pc, #204]	; (8007834 <SetPinConfig+0x394>)
 8007768:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800776c:	f103 0314 	add.w	r3, r3, #20
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	4613      	mov	r3, r2
 8007774:	00db      	lsls	r3, r3, #3
 8007776:	4413      	add	r3, r2
 8007778:	011b      	lsls	r3, r3, #4
 800777a:	440b      	add	r3, r1
 800777c:	3366      	adds	r3, #102	; 0x66
 800777e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007782:	461a      	mov	r2, r3
 8007784:	f107 0318 	add.w	r3, r7, #24
 8007788:	3b18      	subs	r3, #24
 800778a:	493b      	ldr	r1, [pc, #236]	; (8007878 <SetPinConfig+0x3d8>)
 800778c:	4618      	mov	r0, r3
 800778e:	f00c f80f 	bl	80137b0 <f_printf>
      f_printf(&fil, "parametr\t\"%d\"\n", PinsConf[i].parametr);
 8007792:	4928      	ldr	r1, [pc, #160]	; (8007834 <SetPinConfig+0x394>)
 8007794:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007798:	f103 0314 	add.w	r3, r3, #20
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	4613      	mov	r3, r2
 80077a0:	00db      	lsls	r3, r3, #3
 80077a2:	4413      	add	r3, r2
 80077a4:	011b      	lsls	r3, r3, #4
 80077a6:	440b      	add	r3, r1
 80077a8:	3368      	adds	r3, #104	; 0x68
 80077aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077ae:	461a      	mov	r2, r3
 80077b0:	f107 0318 	add.w	r3, r7, #24
 80077b4:	3b18      	subs	r3, #24
 80077b6:	4931      	ldr	r1, [pc, #196]	; (800787c <SetPinConfig+0x3dc>)
 80077b8:	4618      	mov	r0, r3
 80077ba:	f00b fff9 	bl	80137b0 <f_printf>
      f_printf(&fil, "timeout\t\"%d\"\n", PinsConf[i].timeout);
 80077be:	491d      	ldr	r1, [pc, #116]	; (8007834 <SetPinConfig+0x394>)
 80077c0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80077c4:	f103 0314 	add.w	r3, r3, #20
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	4613      	mov	r3, r2
 80077cc:	00db      	lsls	r3, r3, #3
 80077ce:	4413      	add	r3, r2
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	440b      	add	r3, r1
 80077d4:	336c      	adds	r3, #108	; 0x6c
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	f107 0318 	add.w	r3, r7, #24
 80077dc:	3b18      	subs	r3, #24
 80077de:	4928      	ldr	r1, [pc, #160]	; (8007880 <SetPinConfig+0x3e0>)
 80077e0:	4618      	mov	r0, r3
 80077e2:	f00b ffe5 	bl	80137b0 <f_printf>
      f_printf(&fil, "condit\t\"%s\"\n", PinsConf[i].condit);
 80077e6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80077ea:	f103 0314 	add.w	r3, r3, #20
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	4613      	mov	r3, r2
 80077f2:	00db      	lsls	r3, r3, #3
 80077f4:	4413      	add	r3, r2
 80077f6:	011b      	lsls	r3, r3, #4
 80077f8:	3370      	adds	r3, #112	; 0x70
 80077fa:	4a0e      	ldr	r2, [pc, #56]	; (8007834 <SetPinConfig+0x394>)
 80077fc:	441a      	add	r2, r3
 80077fe:	f107 0318 	add.w	r3, r7, #24
 8007802:	3b18      	subs	r3, #24
 8007804:	491f      	ldr	r1, [pc, #124]	; (8007884 <SetPinConfig+0x3e4>)
 8007806:	4618      	mov	r0, r3
 8007808:	f00b ffd2 	bl	80137b0 <f_printf>
      f_printf(&fil, "\n");
 800780c:	f107 0318 	add.w	r3, r7, #24
 8007810:	3b18      	subs	r3, #24
 8007812:	491d      	ldr	r1, [pc, #116]	; (8007888 <SetPinConfig+0x3e8>)
 8007814:	4618      	mov	r0, r3
 8007816:	f00b ffcb 	bl	80137b0 <f_printf>
    for (int i = 0; i < NUMPIN; i++) {
 800781a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800781e:	f103 0314 	add.w	r3, r3, #20
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3301      	adds	r3, #1
 8007826:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800782a:	f102 0214 	add.w	r2, r2, #20
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	e02c      	b.n	800788c <SetPinConfig+0x3ec>
 8007832:	bf00      	nop
 8007834:	20005c9c 	.word	0x20005c9c
 8007838:	0802c088 	.word	0x0802c088
 800783c:	0802c094 	.word	0x0802c094
 8007840:	0802c0a0 	.word	0x0802c0a0
 8007844:	0802c0ac 	.word	0x0802c0ac
 8007848:	0802c0bc 	.word	0x0802c0bc
 800784c:	0802c0cc 	.word	0x0802c0cc
 8007850:	0802c0d8 	.word	0x0802c0d8
 8007854:	0802c0e4 	.word	0x0802c0e4
 8007858:	0802c0f4 	.word	0x0802c0f4
 800785c:	0802c104 	.word	0x0802c104
 8007860:	0802c114 	.word	0x0802c114
 8007864:	0802c124 	.word	0x0802c124
 8007868:	0802c134 	.word	0x0802c134
 800786c:	0802c144 	.word	0x0802c144
 8007870:	0802c150 	.word	0x0802c150
 8007874:	0802c15c 	.word	0x0802c15c
 8007878:	0802c168 	.word	0x0802c168
 800787c:	0802c174 	.word	0x0802c174
 8007880:	0802c184 	.word	0x0802c184
 8007884:	0802c194 	.word	0x0802c194
 8007888:	0802c1a4 	.word	0x0802c1a4
 800788c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007890:	f103 0314 	add.w	r3, r3, #20
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b04      	cmp	r3, #4
 8007898:	f77f ae26 	ble.w	80074e8 <SetPinConfig+0x48>

    }

    f_close(&fil);
 800789c:	f107 0318 	add.w	r3, r7, #24
 80078a0:	3b18      	subs	r3, #24
 80078a2:	4618      	mov	r0, r3
 80078a4:	f00b fe91 	bl	80135ca <f_close>
    printf("File created successfully! \r\n");
 80078a8:	4806      	ldr	r0, [pc, #24]	; (80078c4 <SetPinConfig+0x424>)
 80078aa:	f01f fa5b 	bl	8026d64 <puts>
  } else {
    printf("Error creating file! \r\n");
  }
}
 80078ae:	e002      	b.n	80078b6 <SetPinConfig+0x416>
    printf("Error creating file! \r\n");
 80078b0:	4805      	ldr	r0, [pc, #20]	; (80078c8 <SetPinConfig+0x428>)
 80078b2:	f01f fa57 	bl	8026d64 <puts>
}
 80078b6:	bf00      	nop
 80078b8:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	0802c1a8 	.word	0x0802c1a8
 80078c8:	0802c1c8 	.word	0x0802c1c8

080078cc <GetPinToPin>:


void GetPinToPin() {
 80078cc:	b580      	push	{r7, lr}
 80078ce:	f5ad 5d8b 	sub.w	sp, sp, #4448	; 0x1160
 80078d2:	af00      	add	r7, sp, #0
	FILINFO finfo;
	cJSON *root_obj = NULL;
 80078d4:	2300      	movs	r3, #0
 80078d6:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 80078da:	f102 0218 	add.w	r2, r2, #24
 80078de:	6013      	str	r3, [r2, #0]
	FRESULT fresult;
	UINT Byteswritten; // File read/write count
	FIL fil; // File
	fresult = f_stat("pintopin.ini", &finfo);
 80078e0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80078e4:	f103 0318 	add.w	r3, r3, #24
 80078e8:	4619      	mov	r1, r3
 80078ea:	4862      	ldr	r0, [pc, #392]	; (8007a74 <GetPinToPin+0x1a8>)
 80078ec:	f00b fe9c 	bl	8013628 <f_stat>
 80078f0:	4603      	mov	r3, r0
 80078f2:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 80078f6:	f102 0217 	add.w	r2, r2, #23
 80078fa:	7013      	strb	r3, [r2, #0]
	if (fresult == FR_OK) {
 80078fc:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007900:	f103 0317 	add.w	r3, r3, #23
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	f040 80af 	bne.w	8007a6a <GetPinToPin+0x19e>
		// если файл существует, открываем его
		if (f_open(&fil, (const TCHAR*) "pintopin.ini", FA_READ) == FR_OK) {
 800790c:	f107 0320 	add.w	r3, r7, #32
 8007910:	3b1c      	subs	r3, #28
 8007912:	2201      	movs	r2, #1
 8007914:	4957      	ldr	r1, [pc, #348]	; (8007a74 <GetPinToPin+0x1a8>)
 8007916:	4618      	mov	r0, r3
 8007918:	f00b f81a 	bl	8012950 <f_open>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	f040 80a3 	bne.w	8007a6a <GetPinToPin+0x19e>

			fresult = f_read(&fil, fsbuffer, sizeof(fsbuffer), &Byteswritten);
 8007924:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007928:	f103 0314 	add.w	r3, r3, #20
 800792c:	f107 0020 	add.w	r0, r7, #32
 8007930:	381c      	subs	r0, #28
 8007932:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007936:	4950      	ldr	r1, [pc, #320]	; (8007a78 <GetPinToPin+0x1ac>)
 8007938:	f00b fa6d 	bl	8012e16 <f_read>
 800793c:	4603      	mov	r3, r0
 800793e:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8007942:	f102 0217 	add.w	r2, r2, #23
 8007946:	7013      	strb	r3, [r2, #0]

			root_obj = cJSON_Parse(fsbuffer);
 8007948:	484b      	ldr	r0, [pc, #300]	; (8007a78 <GetPinToPin+0x1ac>)
 800794a:	f7fa fc39 	bl	80021c0 <cJSON_Parse>
 800794e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007952:	f103 0318 	add.w	r3, r3, #24
 8007956:	6018      	str	r0, [r3, #0]

			for (int i = 0; i < cJSON_GetArraySize(root_obj); i++) {
 8007958:	2300      	movs	r3, #0
 800795a:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 800795e:	f102 021c 	add.w	r2, r2, #28
 8007962:	6013      	str	r3, [r2, #0]
 8007964:	e05f      	b.n	8007a26 <GetPinToPin+0x15a>
				cJSON *pins_item = cJSON_GetArrayItem(root_obj, i);
 8007966:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800796a:	f103 031c 	add.w	r3, r3, #28
 800796e:	6819      	ldr	r1, [r3, #0]
 8007970:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007974:	f103 0318 	add.w	r3, r3, #24
 8007978:	6818      	ldr	r0, [r3, #0]
 800797a:	f7fb fa4e 	bl	8002e1a <cJSON_GetArrayItem>
 800797e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007982:	f103 0310 	add.w	r3, r3, #16
 8007986:	6018      	str	r0, [r3, #0]

				PinsLinks[i].idin = cJSON_GetObjectItem(pins_item, "idin")->valueint;
 8007988:	493c      	ldr	r1, [pc, #240]	; (8007a7c <GetPinToPin+0x1b0>)
 800798a:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800798e:	f103 0310 	add.w	r3, r3, #16
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	f7fb fa9d 	bl	8002ed2 <cJSON_GetObjectItem>
 8007998:	4603      	mov	r3, r0
 800799a:	6959      	ldr	r1, [r3, #20]
 800799c:	4838      	ldr	r0, [pc, #224]	; (8007a80 <GetPinToPin+0x1b4>)
 800799e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80079a2:	f103 031c 	add.w	r3, r3, #28
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	4613      	mov	r3, r2
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4403      	add	r3, r0
 80079b2:	6019      	str	r1, [r3, #0]
				PinsLinks[i].idout = cJSON_GetObjectItem(pins_item, "idout")->valueint;
 80079b4:	4933      	ldr	r1, [pc, #204]	; (8007a84 <GetPinToPin+0x1b8>)
 80079b6:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80079ba:	f103 0310 	add.w	r3, r3, #16
 80079be:	6818      	ldr	r0, [r3, #0]
 80079c0:	f7fb fa87 	bl	8002ed2 <cJSON_GetObjectItem>
 80079c4:	4603      	mov	r3, r0
 80079c6:	6959      	ldr	r1, [r3, #20]
 80079c8:	482d      	ldr	r0, [pc, #180]	; (8007a80 <GetPinToPin+0x1b4>)
 80079ca:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80079ce:	f103 031c 	add.w	r3, r3, #28
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	4613      	mov	r3, r2
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	4413      	add	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4403      	add	r3, r0
 80079de:	3304      	adds	r3, #4
 80079e0:	6019      	str	r1, [r3, #0]
				PinsLinks[i].flag = cJSON_GetObjectItem(pins_item, "flag")->valueint;
 80079e2:	4929      	ldr	r1, [pc, #164]	; (8007a88 <GetPinToPin+0x1bc>)
 80079e4:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80079e8:	f103 0310 	add.w	r3, r3, #16
 80079ec:	6818      	ldr	r0, [r3, #0]
 80079ee:	f7fb fa70 	bl	8002ed2 <cJSON_GetObjectItem>
 80079f2:	4603      	mov	r3, r0
 80079f4:	6959      	ldr	r1, [r3, #20]
 80079f6:	4822      	ldr	r0, [pc, #136]	; (8007a80 <GetPinToPin+0x1b4>)
 80079f8:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80079fc:	f103 031c 	add.w	r3, r3, #28
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	4613      	mov	r3, r2
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4403      	add	r3, r0
 8007a0c:	3308      	adds	r3, #8
 8007a0e:	6019      	str	r1, [r3, #0]
			for (int i = 0; i < cJSON_GetArraySize(root_obj); i++) {
 8007a10:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007a14:	f103 031c 	add.w	r3, r3, #28
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8007a20:	f102 021c 	add.w	r2, r2, #28
 8007a24:	6013      	str	r3, [r2, #0]
 8007a26:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007a2a:	f103 0318 	add.w	r3, r3, #24
 8007a2e:	6818      	ldr	r0, [r3, #0]
 8007a30:	f7fb f9af 	bl	8002d92 <cJSON_GetArraySize>
 8007a34:	4602      	mov	r2, r0
 8007a36:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007a3a:	f103 031c 	add.w	r3, r3, #28
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4293      	cmp	r3, r2
 8007a42:	db90      	blt.n	8007966 <GetPinToPin+0x9a>

			}

			cJSON_Delete(root_obj);
 8007a44:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8007a48:	f103 0318 	add.w	r3, r3, #24
 8007a4c:	6818      	ldr	r0, [r3, #0]
 8007a4e:	f7f9 fb87 	bl	8001160 <cJSON_Delete>
			memset(fsbuffer, '\0', sizeof(fsbuffer));
 8007a52:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007a56:	2100      	movs	r1, #0
 8007a58:	4807      	ldr	r0, [pc, #28]	; (8007a78 <GetPinToPin+0x1ac>)
 8007a5a:	f01e fdcd 	bl	80265f8 <memset>
			f_close(&fil);
 8007a5e:	f107 0320 	add.w	r3, r7, #32
 8007a62:	3b1c      	subs	r3, #28
 8007a64:	4618      	mov	r0, r3
 8007a66:	f00b fdb0 	bl	80135ca <f_close>
		}
	}
}
 8007a6a:	bf00      	nop
 8007a6c:	f507 578b 	add.w	r7, r7, #4448	; 0x1160
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	0802c1e0 	.word	0x0802c1e0
 8007a78:	20000778 	.word	0x20000778
 8007a7c:	0802c1f0 	.word	0x0802c1f0
 8007a80:	20005c60 	.word	0x20005c60
 8007a84:	0802c1f8 	.word	0x0802c1f8
 8007a88:	0802c200 	.word	0x0802c200

08007a8c <SetPinToPin>:

// Если файл "pintopin.ini" не существует, создаем его и записываем данные
void SetPinToPin() {
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
	cJSON *root_obj = NULL;
 8007a96:	2300      	movs	r3, #0
 8007a98:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007a9c:	6013      	str	r3, [r2, #0]
	cJSON *fld = NULL;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007aa4:	f102 021c 	add.w	r2, r2, #28
 8007aa8:	6013      	str	r3, [r2, #0]
	UINT Byteswritten; // File read/write count
	FRESULT fresult;
	char *out_str = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007ab0:	f102 0218 	add.w	r2, r2, #24
 8007ab4:	6013      	str	r3, [r2, #0]
	int i = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007abc:	f102 0204 	add.w	r2, r2, #4
 8007ac0:	6013      	str	r3, [r2, #0]
	FIL fil; // File
	if (f_open(&fil, (const TCHAR*) "pintopin.ini",FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 8007ac2:	f107 0308 	add.w	r3, r7, #8
 8007ac6:	3b08      	subs	r3, #8
 8007ac8:	220a      	movs	r2, #10
 8007aca:	496a      	ldr	r1, [pc, #424]	; (8007c74 <SetPinToPin+0x1e8>)
 8007acc:	4618      	mov	r0, r3
 8007ace:	f00a ff3f 	bl	8012950 <f_open>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f040 80c7 	bne.w	8007c68 <SetPinToPin+0x1dc>
		// Запись JSON в файл

		root_obj = cJSON_CreateArray();
 8007ada:	f7fb fb8b 	bl	80031f4 <cJSON_CreateArray>
 8007ade:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ae2:	6018      	str	r0, [r3, #0]
		fld = cJSON_CreateObject();
 8007ae4:	f7fb fb9a 	bl	800321c <cJSON_CreateObject>
 8007ae8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007aec:	f103 031c 	add.w	r3, r3, #28
 8007af0:	6018      	str	r0, [r3, #0]
		for (i = 0; i < NUMPINLINKS; i++)
 8007af2:	2300      	movs	r3, #0
 8007af4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007af8:	f102 0204 	add.w	r2, r2, #4
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	e06e      	b.n	8007bde <SetPinToPin+0x152>
		{
			cJSON_AddItemToArray(root_obj, fld = cJSON_CreateObject());
 8007b00:	f7fb fb8c 	bl	800321c <cJSON_CreateObject>
 8007b04:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007b08:	f103 031c 	add.w	r3, r3, #28
 8007b0c:	6018      	str	r0, [r3, #0]
 8007b0e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007b12:	f103 031c 	add.w	r3, r3, #28
 8007b16:	6819      	ldr	r1, [r3, #0]
 8007b18:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b1c:	6818      	ldr	r0, [r3, #0]
 8007b1e:	f7fb fa2e 	bl	8002f7e <cJSON_AddItemToArray>

			cJSON_AddNumberToObject(fld, "idin", PinsLinks[i].idin);
 8007b22:	4955      	ldr	r1, [pc, #340]	; (8007c78 <SetPinToPin+0x1ec>)
 8007b24:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b28:	f103 0304 	add.w	r3, r3, #4
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	005b      	lsls	r3, r3, #1
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	440b      	add	r3, r1
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7f8 fd02 	bl	8000544 <__aeabi_i2d>
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	ec43 2b10 	vmov	d0, r2, r3
 8007b48:	494c      	ldr	r1, [pc, #304]	; (8007c7c <SetPinToPin+0x1f0>)
 8007b4a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007b4e:	f103 031c 	add.w	r3, r3, #28
 8007b52:	6818      	ldr	r0, [r3, #0]
 8007b54:	f7fb fa98 	bl	8003088 <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "idout", PinsLinks[i].idout);
 8007b58:	4947      	ldr	r1, [pc, #284]	; (8007c78 <SetPinToPin+0x1ec>)
 8007b5a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b5e:	f103 0304 	add.w	r3, r3, #4
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	4613      	mov	r3, r2
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	4413      	add	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	440b      	add	r3, r1
 8007b6e:	3304      	adds	r3, #4
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7f8 fce6 	bl	8000544 <__aeabi_i2d>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	ec43 2b10 	vmov	d0, r2, r3
 8007b80:	493f      	ldr	r1, [pc, #252]	; (8007c80 <SetPinToPin+0x1f4>)
 8007b82:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007b86:	f103 031c 	add.w	r3, r3, #28
 8007b8a:	6818      	ldr	r0, [r3, #0]
 8007b8c:	f7fb fa7c 	bl	8003088 <cJSON_AddNumberToObject>
			cJSON_AddNumberToObject(fld, "flag", PinsLinks[i].flag);
 8007b90:	4939      	ldr	r1, [pc, #228]	; (8007c78 <SetPinToPin+0x1ec>)
 8007b92:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b96:	f103 0304 	add.w	r3, r3, #4
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	4413      	add	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	440b      	add	r3, r1
 8007ba6:	3308      	adds	r3, #8
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7f8 fcca 	bl	8000544 <__aeabi_i2d>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	ec43 2b10 	vmov	d0, r2, r3
 8007bb8:	4932      	ldr	r1, [pc, #200]	; (8007c84 <SetPinToPin+0x1f8>)
 8007bba:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007bbe:	f103 031c 	add.w	r3, r3, #28
 8007bc2:	6818      	ldr	r0, [r3, #0]
 8007bc4:	f7fb fa60 	bl	8003088 <cJSON_AddNumberToObject>
		for (i = 0; i < NUMPINLINKS; i++)
 8007bc8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bcc:	f103 0304 	add.w	r3, r3, #4
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007bd8:	f102 0204 	add.w	r2, r2, #4
 8007bdc:	6013      	str	r3, [r2, #0]
 8007bde:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007be2:	f103 0304 	add.w	r3, r3, #4
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b04      	cmp	r3, #4
 8007bea:	dd89      	ble.n	8007b00 <SetPinToPin+0x74>

		}
		out_str = cJSON_PrintUnformatted(root_obj);
 8007bec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	f7fa fb87 	bl	8002304 <cJSON_PrintUnformatted>
 8007bf6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007bfa:	f103 0318 	add.w	r3, r3, #24
 8007bfe:	6018      	str	r0, [r3, #0]
		fresult = f_write(&fil, (const void*) out_str, strlen(out_str), &Byteswritten);
 8007c00:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007c04:	f103 0318 	add.w	r3, r3, #24
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	f7f8 faeb 	bl	80001e4 <strlen>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007c14:	f103 0310 	add.w	r3, r3, #16
 8007c18:	f107 0008 	add.w	r0, r7, #8
 8007c1c:	3808      	subs	r0, #8
 8007c1e:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8007c22:	f101 0118 	add.w	r1, r1, #24
 8007c26:	6809      	ldr	r1, [r1, #0]
 8007c28:	f00b fa83 	bl	8013132 <f_write>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007c32:	f102 0217 	add.w	r2, r2, #23
 8007c36:	7013      	strb	r3, [r2, #0]
		free(out_str);
 8007c38:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007c3c:	f103 0318 	add.w	r3, r3, #24
 8007c40:	6818      	ldr	r0, [r3, #0]
 8007c42:	f01e fc9b 	bl	802657c <free>

		if(fresult == FR_OK){

		}
		cJSON_Delete(root_obj);
 8007c46:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c4a:	6818      	ldr	r0, [r3, #0]
 8007c4c:	f7f9 fa88 	bl	8001160 <cJSON_Delete>
		memset(fsbuffer, '\0', sizeof(fsbuffer));
 8007c50:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007c54:	2100      	movs	r1, #0
 8007c56:	480c      	ldr	r0, [pc, #48]	; (8007c88 <SetPinToPin+0x1fc>)
 8007c58:	f01e fcce 	bl	80265f8 <memset>
		f_close(&fil);
 8007c5c:	f107 0308 	add.w	r3, r7, #8
 8007c60:	3b08      	subs	r3, #8
 8007c62:	4618      	mov	r0, r3
 8007c64:	f00b fcb1 	bl	80135ca <f_close>
	}
}
 8007c68:	bf00      	nop
 8007c6a:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	0802c1e0 	.word	0x0802c1e0
 8007c78:	20005c60 	.word	0x20005c60
 8007c7c:	0802c1f0 	.word	0x0802c1f0
 8007c80:	0802c1f8 	.word	0x0802c1f8
 8007c84:	0802c200 	.word	0x0802c200
 8007c88:	20000778 	.word	0x20000778

08007c8c <InitPin>:




void InitPin() {
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
	int i = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	617b      	str	r3, [r7, #20]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c96:	463b      	mov	r3, r7
 8007c98:	2200      	movs	r2, #0
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	605a      	str	r2, [r3, #4]
 8007c9e:	609a      	str	r2, [r3, #8]
 8007ca0:	60da      	str	r2, [r3, #12]
 8007ca2:	611a      	str	r2, [r3, #16]

    for (i = 0; i < NUMPIN; i++){
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	617b      	str	r3, [r7, #20]
 8007ca8:	e0b0      	b.n	8007e0c <InitPin+0x180>
    	if(PinsConf[i].topin == 2){
 8007caa:	495d      	ldr	r1, [pc, #372]	; (8007e20 <InitPin+0x194>)
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	00db      	lsls	r3, r3, #3
 8007cb2:	4413      	add	r3, r2
 8007cb4:	011b      	lsls	r3, r3, #4
 8007cb6:	440b      	add	r3, r1
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d130      	bne.n	8007d20 <InitPin+0x94>

    		// проверяем тактирование порта
			//checkPortClockStatus(PinsInfo[i].port, __HAL_RCC_GPIOA_IS_CLK_ENABLED());
    		HAL_GPIO_DeInit(PinsInfo[i].gpio_name, PinsInfo[i].hal_pin);
 8007cbe:	4959      	ldr	r1, [pc, #356]	; (8007e24 <InitPin+0x198>)
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	440b      	add	r3, r1
 8007ccc:	3310      	adds	r3, #16
 8007cce:	6818      	ldr	r0, [r3, #0]
 8007cd0:	4954      	ldr	r1, [pc, #336]	; (8007e24 <InitPin+0x198>)
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	440b      	add	r3, r1
 8007cde:	330c      	adds	r3, #12
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	f005 f82c 	bl	800cd40 <HAL_GPIO_DeInit>

			// инициализация пина OUTPUT
    		GPIO_InitStruct.Pin = PinsInfo[i].hal_pin; // вывод
 8007ce8:	494e      	ldr	r1, [pc, #312]	; (8007e24 <InitPin+0x198>)
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	4613      	mov	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	440b      	add	r3, r1
 8007cf6:	330c      	adds	r3, #12
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	603b      	str	r3, [r7, #0]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // режим – выход
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	607b      	str	r3, [r7, #4]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW ; //
 8007d00:	2300      	movs	r3, #0
 8007d02:	60fb      	str	r3, [r7, #12]
    		HAL_GPIO_Init(PinsInfo[i].gpio_name, &GPIO_InitStruct);
 8007d04:	4947      	ldr	r1, [pc, #284]	; (8007e24 <InitPin+0x198>)
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	440b      	add	r3, r1
 8007d12:	3310      	adds	r3, #16
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	463a      	mov	r2, r7
 8007d18:	4611      	mov	r1, r2
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f004 fe74 	bl	800ca08 <HAL_GPIO_Init>
    	}
    	if(PinsConf[i].topin == 1){
 8007d20:	493f      	ldr	r1, [pc, #252]	; (8007e20 <InitPin+0x194>)
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	4613      	mov	r3, r2
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	4413      	add	r3, r2
 8007d2a:	011b      	lsls	r3, r3, #4
 8007d2c:	440b      	add	r3, r1
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d168      	bne.n	8007e06 <InitPin+0x17a>

    		// проверяем тактирование порта
			//checkPortClockStatus(PinsInfo[i].port, __HAL_RCC_GPIOA_IS_CLK_ENABLED());

            // сбрасываем биты для данного пина
            HAL_GPIO_DeInit(PinsInfo[i].gpio_name, PinsInfo[i].hal_pin);
 8007d34:	493b      	ldr	r1, [pc, #236]	; (8007e24 <InitPin+0x198>)
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	440b      	add	r3, r1
 8007d42:	3310      	adds	r3, #16
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	4937      	ldr	r1, [pc, #220]	; (8007e24 <InitPin+0x198>)
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	440b      	add	r3, r1
 8007d54:	330c      	adds	r3, #12
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	f004 fff1 	bl	800cd40 <HAL_GPIO_DeInit>


			// инициализация пина  INPUT
    	    GPIO_InitStruct.Pin = PinsInfo[i].hal_pin; // вход
 8007d5e:	4931      	ldr	r1, [pc, #196]	; (8007e24 <InitPin+0x198>)
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	4613      	mov	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4413      	add	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	440b      	add	r3, r1
 8007d6c:	330c      	adds	r3, #12
 8007d6e:	881b      	ldrh	r3, [r3, #0]
 8007d70:	603b      	str	r3, [r7, #0]
    	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // устанавливаем режим работы порта на вход
 8007d72:	2300      	movs	r3, #0
 8007d74:	607b      	str	r3, [r7, #4]

    	    // @todo поменять на int
    	    if (strcmp(PinsConf[i].ptype, "GPIO_PULLUP") == 0) {
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	4413      	add	r3, r2
 8007d7e:	011b      	lsls	r3, r3, #4
 8007d80:	3318      	adds	r3, #24
 8007d82:	4a27      	ldr	r2, [pc, #156]	; (8007e20 <InitPin+0x194>)
 8007d84:	4413      	add	r3, r2
 8007d86:	4928      	ldr	r1, [pc, #160]	; (8007e28 <InitPin+0x19c>)
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7f8 fa21 	bl	80001d0 <strcmp>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d102      	bne.n	8007d9a <InitPin+0x10e>
    	    	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d94:	2301      	movs	r3, #1
 8007d96:	60bb      	str	r3, [r7, #8]
 8007d98:	e025      	b.n	8007de6 <InitPin+0x15a>
    	    }
    	    else if (strcmp(PinsConf[i].ptype, "GPIO_PULLDOWN") == 0) {
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	4413      	add	r3, r2
 8007da2:	011b      	lsls	r3, r3, #4
 8007da4:	3318      	adds	r3, #24
 8007da6:	4a1e      	ldr	r2, [pc, #120]	; (8007e20 <InitPin+0x194>)
 8007da8:	4413      	add	r3, r2
 8007daa:	4920      	ldr	r1, [pc, #128]	; (8007e2c <InitPin+0x1a0>)
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7f8 fa0f 	bl	80001d0 <strcmp>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d102      	bne.n	8007dbe <InitPin+0x132>
    	    	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007db8:	2302      	movs	r3, #2
 8007dba:	60bb      	str	r3, [r7, #8]
 8007dbc:	e013      	b.n	8007de6 <InitPin+0x15a>
    	    }
    	    else if (strcmp(PinsConf[i].ptype, "None") == 0) {
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	00db      	lsls	r3, r3, #3
 8007dc4:	4413      	add	r3, r2
 8007dc6:	011b      	lsls	r3, r3, #4
 8007dc8:	3318      	adds	r3, #24
 8007dca:	4a15      	ldr	r2, [pc, #84]	; (8007e20 <InitPin+0x194>)
 8007dcc:	4413      	add	r3, r2
 8007dce:	4918      	ldr	r1, [pc, #96]	; (8007e30 <InitPin+0x1a4>)
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7f8 f9fd 	bl	80001d0 <strcmp>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d102      	bne.n	8007de2 <InitPin+0x156>
    	    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60bb      	str	r3, [r7, #8]
 8007de0:	e001      	b.n	8007de6 <InitPin+0x15a>
    	    } else {
    	    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007de2:	2300      	movs	r3, #0
 8007de4:	60bb      	str	r3, [r7, #8]
    	    }


    	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; // устанавливаем максимальную скорость порта
 8007de6:	2302      	movs	r3, #2
 8007de8:	60fb      	str	r3, [r7, #12]
    	    HAL_GPIO_Init(PinsInfo[i].gpio_name, &GPIO_InitStruct); // инициализируем порт B
 8007dea:	490e      	ldr	r1, [pc, #56]	; (8007e24 <InitPin+0x198>)
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	4613      	mov	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	440b      	add	r3, r1
 8007df8:	3310      	adds	r3, #16
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	463a      	mov	r2, r7
 8007dfe:	4611      	mov	r1, r2
 8007e00:	4618      	mov	r0, r3
 8007e02:	f004 fe01 	bl	800ca08 <HAL_GPIO_Init>
    for (i = 0; i < NUMPIN; i++){
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	617b      	str	r3, [r7, #20]
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	2b04      	cmp	r3, #4
 8007e10:	f77f af4b 	ble.w	8007caa <InitPin+0x1e>
    	}
    }
	//PinsInfo[i].hal_pin
	//PinsInfo[i].gpio_name

}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20005c9c 	.word	0x20005c9c
 8007e24:	080300b0 	.word	0x080300b0
 8007e28:	0802c208 	.word	0x0802c208
 8007e2c:	0802c214 	.word	0x0802c214
 8007e30:	0802c224 	.word	0x0802c224

08007e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	607b      	str	r3, [r7, #4]
 8007e3e:	4b12      	ldr	r3, [pc, #72]	; (8007e88 <HAL_MspInit+0x54>)
 8007e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e42:	4a11      	ldr	r2, [pc, #68]	; (8007e88 <HAL_MspInit+0x54>)
 8007e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e48:	6453      	str	r3, [r2, #68]	; 0x44
 8007e4a:	4b0f      	ldr	r3, [pc, #60]	; (8007e88 <HAL_MspInit+0x54>)
 8007e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e52:	607b      	str	r3, [r7, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007e56:	2300      	movs	r3, #0
 8007e58:	603b      	str	r3, [r7, #0]
 8007e5a:	4b0b      	ldr	r3, [pc, #44]	; (8007e88 <HAL_MspInit+0x54>)
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	4a0a      	ldr	r2, [pc, #40]	; (8007e88 <HAL_MspInit+0x54>)
 8007e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e64:	6413      	str	r3, [r2, #64]	; 0x40
 8007e66:	4b08      	ldr	r3, [pc, #32]	; (8007e88 <HAL_MspInit+0x54>)
 8007e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e6e:	603b      	str	r3, [r7, #0]
 8007e70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007e72:	2200      	movs	r2, #0
 8007e74:	210f      	movs	r1, #15
 8007e76:	f06f 0001 	mvn.w	r0, #1
 8007e7a:	f003 fbf5 	bl	800b668 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	40023800 	.word	0x40023800

08007e8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007e94:	f107 0308 	add.w	r3, r7, #8
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	605a      	str	r2, [r3, #4]
 8007e9e:	609a      	str	r2, [r3, #8]
 8007ea0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a0c      	ldr	r2, [pc, #48]	; (8007ed8 <HAL_RTC_MspInit+0x4c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d111      	bne.n	8007ed0 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007eac:	2302      	movs	r3, #2
 8007eae:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eb4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007eb6:	f107 0308 	add.w	r3, r7, #8
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f005 fd2e 	bl	800d91c <HAL_RCCEx_PeriphCLKConfig>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8007ec6:	f7fd fb2b 	bl	8005520 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007eca:	4b04      	ldr	r3, [pc, #16]	; (8007edc <HAL_RTC_MspInit+0x50>)
 8007ecc:	2201      	movs	r2, #1
 8007ece:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007ed0:	bf00      	nop
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	40002800 	.word	0x40002800
 8007edc:	42470e3c 	.word	0x42470e3c

08007ee0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b08a      	sub	sp, #40	; 0x28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ee8:	f107 0314 	add.w	r3, r7, #20
 8007eec:	2200      	movs	r2, #0
 8007eee:	601a      	str	r2, [r3, #0]
 8007ef0:	605a      	str	r2, [r3, #4]
 8007ef2:	609a      	str	r2, [r3, #8]
 8007ef4:	60da      	str	r2, [r3, #12]
 8007ef6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a28      	ldr	r2, [pc, #160]	; (8007fa0 <HAL_SPI_MspInit+0xc0>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d149      	bne.n	8007f96 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007f02:	2300      	movs	r3, #0
 8007f04:	613b      	str	r3, [r7, #16]
 8007f06:	4b27      	ldr	r3, [pc, #156]	; (8007fa4 <HAL_SPI_MspInit+0xc4>)
 8007f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0a:	4a26      	ldr	r2, [pc, #152]	; (8007fa4 <HAL_SPI_MspInit+0xc4>)
 8007f0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f10:	6453      	str	r3, [r2, #68]	; 0x44
 8007f12:	4b24      	ldr	r3, [pc, #144]	; (8007fa4 <HAL_SPI_MspInit+0xc4>)
 8007f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f1a:	613b      	str	r3, [r7, #16]
 8007f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60fb      	str	r3, [r7, #12]
 8007f22:	4b20      	ldr	r3, [pc, #128]	; (8007fa4 <HAL_SPI_MspInit+0xc4>)
 8007f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f26:	4a1f      	ldr	r2, [pc, #124]	; (8007fa4 <HAL_SPI_MspInit+0xc4>)
 8007f28:	f043 0301 	orr.w	r3, r3, #1
 8007f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8007f2e:	4b1d      	ldr	r3, [pc, #116]	; (8007fa4 <HAL_SPI_MspInit+0xc4>)
 8007f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	60fb      	str	r3, [r7, #12]
 8007f38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	60bb      	str	r3, [r7, #8]
 8007f3e:	4b19      	ldr	r3, [pc, #100]	; (8007fa4 <HAL_SPI_MspInit+0xc4>)
 8007f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f42:	4a18      	ldr	r2, [pc, #96]	; (8007fa4 <HAL_SPI_MspInit+0xc4>)
 8007f44:	f043 0302 	orr.w	r3, r3, #2
 8007f48:	6313      	str	r3, [r2, #48]	; 0x30
 8007f4a:	4b16      	ldr	r3, [pc, #88]	; (8007fa4 <HAL_SPI_MspInit+0xc4>)
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	60bb      	str	r3, [r7, #8]
 8007f54:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007f56:	2360      	movs	r3, #96	; 0x60
 8007f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f5a:	2302      	movs	r3, #2
 8007f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f62:	2303      	movs	r3, #3
 8007f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007f66:	2305      	movs	r3, #5
 8007f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f6a:	f107 0314 	add.w	r3, r7, #20
 8007f6e:	4619      	mov	r1, r3
 8007f70:	480d      	ldr	r0, [pc, #52]	; (8007fa8 <HAL_SPI_MspInit+0xc8>)
 8007f72:	f004 fd49 	bl	800ca08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007f76:	2320      	movs	r3, #32
 8007f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f82:	2303      	movs	r3, #3
 8007f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007f86:	2305      	movs	r3, #5
 8007f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f8a:	f107 0314 	add.w	r3, r7, #20
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4806      	ldr	r0, [pc, #24]	; (8007fac <HAL_SPI_MspInit+0xcc>)
 8007f92:	f004 fd39 	bl	800ca08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007f96:	bf00      	nop
 8007f98:	3728      	adds	r7, #40	; 0x28
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	40013000 	.word	0x40013000
 8007fa4:	40023800 	.word	0x40023800
 8007fa8:	40020000 	.word	0x40020000
 8007fac:	40020400 	.word	0x40020400

08007fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b08a      	sub	sp, #40	; 0x28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fb8:	f107 0314 	add.w	r3, r7, #20
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	605a      	str	r2, [r3, #4]
 8007fc2:	609a      	str	r2, [r3, #8]
 8007fc4:	60da      	str	r2, [r3, #12]
 8007fc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a29      	ldr	r2, [pc, #164]	; (8008074 <HAL_UART_MspInit+0xc4>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d14b      	bne.n	800806a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	613b      	str	r3, [r7, #16]
 8007fd6:	4b28      	ldr	r3, [pc, #160]	; (8008078 <HAL_UART_MspInit+0xc8>)
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fda:	4a27      	ldr	r2, [pc, #156]	; (8008078 <HAL_UART_MspInit+0xc8>)
 8007fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8007fe2:	4b25      	ldr	r3, [pc, #148]	; (8008078 <HAL_UART_MspInit+0xc8>)
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fea:	613b      	str	r3, [r7, #16]
 8007fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60fb      	str	r3, [r7, #12]
 8007ff2:	4b21      	ldr	r3, [pc, #132]	; (8008078 <HAL_UART_MspInit+0xc8>)
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff6:	4a20      	ldr	r2, [pc, #128]	; (8008078 <HAL_UART_MspInit+0xc8>)
 8007ff8:	f043 0302 	orr.w	r3, r3, #2
 8007ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8007ffe:	4b1e      	ldr	r3, [pc, #120]	; (8008078 <HAL_UART_MspInit+0xc8>)
 8008000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800800a:	2300      	movs	r3, #0
 800800c:	60bb      	str	r3, [r7, #8]
 800800e:	4b1a      	ldr	r3, [pc, #104]	; (8008078 <HAL_UART_MspInit+0xc8>)
 8008010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008012:	4a19      	ldr	r2, [pc, #100]	; (8008078 <HAL_UART_MspInit+0xc8>)
 8008014:	f043 0308 	orr.w	r3, r3, #8
 8008018:	6313      	str	r3, [r2, #48]	; 0x30
 800801a:	4b17      	ldr	r3, [pc, #92]	; (8008078 <HAL_UART_MspInit+0xc8>)
 800801c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801e:	f003 0308 	and.w	r3, r3, #8
 8008022:	60bb      	str	r3, [r7, #8]
 8008024:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800802a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800802c:	2302      	movs	r3, #2
 800802e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008030:	2300      	movs	r3, #0
 8008032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008034:	2303      	movs	r3, #3
 8008036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008038:	2307      	movs	r3, #7
 800803a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800803c:	f107 0314 	add.w	r3, r7, #20
 8008040:	4619      	mov	r1, r3
 8008042:	480e      	ldr	r0, [pc, #56]	; (800807c <HAL_UART_MspInit+0xcc>)
 8008044:	f004 fce0 	bl	800ca08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800804c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800804e:	2302      	movs	r3, #2
 8008050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008052:	2300      	movs	r3, #0
 8008054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008056:	2303      	movs	r3, #3
 8008058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800805a:	2307      	movs	r3, #7
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800805e:	f107 0314 	add.w	r3, r7, #20
 8008062:	4619      	mov	r1, r3
 8008064:	4806      	ldr	r0, [pc, #24]	; (8008080 <HAL_UART_MspInit+0xd0>)
 8008066:	f004 fccf 	bl	800ca08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800806a:	bf00      	nop
 800806c:	3728      	adds	r7, #40	; 0x28
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	40004800 	.word	0x40004800
 8008078:	40023800 	.word	0x40023800
 800807c:	40020400 	.word	0x40020400
 8008080:	40020c00 	.word	0x40020c00

08008084 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b08c      	sub	sp, #48	; 0x30
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8008094:	2200      	movs	r2, #0
 8008096:	6879      	ldr	r1, [r7, #4]
 8008098:	202d      	movs	r0, #45	; 0x2d
 800809a:	f003 fae5 	bl	800b668 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800809e:	202d      	movs	r0, #45	; 0x2d
 80080a0:	f003 fafe 	bl	800b6a0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80080a4:	2300      	movs	r3, #0
 80080a6:	60fb      	str	r3, [r7, #12]
 80080a8:	4b1f      	ldr	r3, [pc, #124]	; (8008128 <HAL_InitTick+0xa4>)
 80080aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ac:	4a1e      	ldr	r2, [pc, #120]	; (8008128 <HAL_InitTick+0xa4>)
 80080ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080b2:	6413      	str	r3, [r2, #64]	; 0x40
 80080b4:	4b1c      	ldr	r3, [pc, #112]	; (8008128 <HAL_InitTick+0xa4>)
 80080b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080bc:	60fb      	str	r3, [r7, #12]
 80080be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80080c0:	f107 0210 	add.w	r2, r7, #16
 80080c4:	f107 0314 	add.w	r3, r7, #20
 80080c8:	4611      	mov	r1, r2
 80080ca:	4618      	mov	r0, r3
 80080cc:	f005 fbf4 	bl	800d8b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80080d0:	f005 fbca 	bl	800d868 <HAL_RCC_GetPCLK1Freq>
 80080d4:	4603      	mov	r3, r0
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80080da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080dc:	4a13      	ldr	r2, [pc, #76]	; (800812c <HAL_InitTick+0xa8>)
 80080de:	fba2 2303 	umull	r2, r3, r2, r3
 80080e2:	0c9b      	lsrs	r3, r3, #18
 80080e4:	3b01      	subs	r3, #1
 80080e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80080e8:	4b11      	ldr	r3, [pc, #68]	; (8008130 <HAL_InitTick+0xac>)
 80080ea:	4a12      	ldr	r2, [pc, #72]	; (8008134 <HAL_InitTick+0xb0>)
 80080ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80080ee:	4b10      	ldr	r3, [pc, #64]	; (8008130 <HAL_InitTick+0xac>)
 80080f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80080f4:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80080f6:	4a0e      	ldr	r2, [pc, #56]	; (8008130 <HAL_InitTick+0xac>)
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80080fc:	4b0c      	ldr	r3, [pc, #48]	; (8008130 <HAL_InitTick+0xac>)
 80080fe:	2200      	movs	r2, #0
 8008100:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008102:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <HAL_InitTick+0xac>)
 8008104:	2200      	movs	r2, #0
 8008106:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8008108:	4809      	ldr	r0, [pc, #36]	; (8008130 <HAL_InitTick+0xac>)
 800810a:	f006 fc5b 	bl	800e9c4 <HAL_TIM_Base_Init>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d104      	bne.n	800811e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8008114:	4806      	ldr	r0, [pc, #24]	; (8008130 <HAL_InitTick+0xac>)
 8008116:	f006 fcaf 	bl	800ea78 <HAL_TIM_Base_Start_IT>
 800811a:	4603      	mov	r3, r0
 800811c:	e000      	b.n	8008120 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
}
 8008120:	4618      	mov	r0, r3
 8008122:	3730      	adds	r7, #48	; 0x30
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	40023800 	.word	0x40023800
 800812c:	431bde83 	.word	0x431bde83
 8008130:	2000d170 	.word	0x2000d170
 8008134:	40002000 	.word	0x40002000

08008138 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8008138:	b480      	push	{r7}
 800813a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800813c:	4b0e      	ldr	r3, [pc, #56]	; (8008178 <SDTimer_Handler+0x40>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d006      	beq.n	8008154 <SDTimer_Handler+0x1c>
    Timer1--;
 8008146:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <SDTimer_Handler+0x40>)
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	b2db      	uxtb	r3, r3
 800814c:	3b01      	subs	r3, #1
 800814e:	b2da      	uxtb	r2, r3
 8008150:	4b09      	ldr	r3, [pc, #36]	; (8008178 <SDTimer_Handler+0x40>)
 8008152:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8008154:	4b09      	ldr	r3, [pc, #36]	; (800817c <SDTimer_Handler+0x44>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d006      	beq.n	800816c <SDTimer_Handler+0x34>
    Timer2--;
 800815e:	4b07      	ldr	r3, [pc, #28]	; (800817c <SDTimer_Handler+0x44>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	b2db      	uxtb	r3, r3
 8008164:	3b01      	subs	r3, #1
 8008166:	b2da      	uxtb	r2, r3
 8008168:	4b04      	ldr	r3, [pc, #16]	; (800817c <SDTimer_Handler+0x44>)
 800816a:	701a      	strb	r2, [r3, #0]
}
 800816c:	bf00      	nop
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	2000d1b9 	.word	0x2000d1b9
 800817c:	2000d1b8 	.word	0x2000d1b8

08008180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008180:	b480      	push	{r7}
 8008182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008184:	e7fe      	b.n	8008184 <NMI_Handler+0x4>

08008186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008186:	b480      	push	{r7}
 8008188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800818a:	e7fe      	b.n	800818a <HardFault_Handler+0x4>

0800818c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008190:	e7fe      	b.n	8008190 <MemManage_Handler+0x4>

08008192 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008192:	b480      	push	{r7}
 8008194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008196:	e7fe      	b.n	8008196 <BusFault_Handler+0x4>

08008198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008198:	b480      	push	{r7}
 800819a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800819c:	e7fe      	b.n	800819c <UsageFault_Handler+0x4>

0800819e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800819e:	b480      	push	{r7}
 80081a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80081a2:	bf00      	nop
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */
	FatFsCnt++;
 80081b0:	4b0a      	ldr	r3, [pc, #40]	; (80081dc <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	3301      	adds	r3, #1
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	4b08      	ldr	r3, [pc, #32]	; (80081dc <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 80081bc:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 80081be:	4b07      	ldr	r3, [pc, #28]	; (80081dc <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b09      	cmp	r3, #9
 80081c6:	d904      	bls.n	80081d2 <TIM8_TRG_COM_TIM14_IRQHandler+0x26>
  {
    FatFsCnt = 0;
 80081c8:	4b04      	ldr	r3, [pc, #16]	; (80081dc <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	701a      	strb	r2, [r3, #0]
    SDTimer_Handler();
 80081ce:	f7ff ffb3 	bl	8008138 <SDTimer_Handler>
  }
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80081d2:	4803      	ldr	r0, [pc, #12]	; (80081e0 <TIM8_TRG_COM_TIM14_IRQHandler+0x34>)
 80081d4:	f006 fcc0 	bl	800eb58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80081d8:	bf00      	nop
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	20001330 	.word	0x20001330
 80081e0:	2000d170 	.word	0x2000d170

080081e4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80081e8:	4802      	ldr	r0, [pc, #8]	; (80081f4 <ETH_IRQHandler+0x10>)
 80081ea:	f003 fe4b 	bl	800be84 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80081ee:	bf00      	nop
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	2001137c 	.word	0x2001137c

080081f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80081f8:	b480      	push	{r7}
 80081fa:	af00      	add	r7, sp, #0
	return 1;
 80081fc:	2301      	movs	r3, #1
}
 80081fe:	4618      	mov	r0, r3
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <_kill>:

int _kill(int pid, int sig)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008212:	4b05      	ldr	r3, [pc, #20]	; (8008228 <_kill+0x20>)
 8008214:	2216      	movs	r2, #22
 8008216:	601a      	str	r2, [r3, #0]
	return -1;
 8008218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	2001d538 	.word	0x2001d538

0800822c <_exit>:

void _exit (int status)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008234:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f7ff ffe5 	bl	8008208 <_kill>
	while (1) {}		/* Make sure we hang here */
 800823e:	e7fe      	b.n	800823e <_exit+0x12>

08008240 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800824c:	2300      	movs	r3, #0
 800824e:	617b      	str	r3, [r7, #20]
 8008250:	e00a      	b.n	8008268 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008252:	f3af 8000 	nop.w
 8008256:	4601      	mov	r1, r0
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	60ba      	str	r2, [r7, #8]
 800825e:	b2ca      	uxtb	r2, r1
 8008260:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	3301      	adds	r3, #1
 8008266:	617b      	str	r3, [r7, #20]
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	429a      	cmp	r2, r3
 800826e:	dbf0      	blt.n	8008252 <_read+0x12>
	}

return len;
 8008270:	687b      	ldr	r3, [r7, #4]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <_close>:
	}
	return len;
}

int _close(int file)
{
 800827a:	b480      	push	{r7}
 800827c:	b083      	sub	sp, #12
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
	return -1;
 8008282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008286:	4618      	mov	r0, r3
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008292:	b480      	push	{r7}
 8008294:	b083      	sub	sp, #12
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80082a2:	605a      	str	r2, [r3, #4]
	return 0;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <_isatty>:

int _isatty(int file)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b083      	sub	sp, #12
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
	return 1;
 80082ba:	2301      	movs	r3, #1
}
 80082bc:	4618      	mov	r0, r3
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
	return 0;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3714      	adds	r7, #20
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
	...

080082e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b087      	sub	sp, #28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80082ec:	4a14      	ldr	r2, [pc, #80]	; (8008340 <_sbrk+0x5c>)
 80082ee:	4b15      	ldr	r3, [pc, #84]	; (8008344 <_sbrk+0x60>)
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80082f8:	4b13      	ldr	r3, [pc, #76]	; (8008348 <_sbrk+0x64>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d102      	bne.n	8008306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008300:	4b11      	ldr	r3, [pc, #68]	; (8008348 <_sbrk+0x64>)
 8008302:	4a12      	ldr	r2, [pc, #72]	; (800834c <_sbrk+0x68>)
 8008304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008306:	4b10      	ldr	r3, [pc, #64]	; (8008348 <_sbrk+0x64>)
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4413      	add	r3, r2
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	429a      	cmp	r2, r3
 8008312:	d205      	bcs.n	8008320 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8008314:	4b0e      	ldr	r3, [pc, #56]	; (8008350 <_sbrk+0x6c>)
 8008316:	220c      	movs	r2, #12
 8008318:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800831a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800831e:	e009      	b.n	8008334 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8008320:	4b09      	ldr	r3, [pc, #36]	; (8008348 <_sbrk+0x64>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008326:	4b08      	ldr	r3, [pc, #32]	; (8008348 <_sbrk+0x64>)
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4413      	add	r3, r2
 800832e:	4a06      	ldr	r2, [pc, #24]	; (8008348 <_sbrk+0x64>)
 8008330:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008332:	68fb      	ldr	r3, [r7, #12]
}
 8008334:	4618      	mov	r0, r3
 8008336:	371c      	adds	r7, #28
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	20020000 	.word	0x20020000
 8008344:	00000400 	.word	0x00000400
 8008348:	20001338 	.word	0x20001338
 800834c:	2001d550 	.word	0x2001d550
 8008350:	2001d538 	.word	0x2001d538

08008354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008354:	b480      	push	{r7}
 8008356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008358:	4b06      	ldr	r3, [pc, #24]	; (8008374 <SystemInit+0x20>)
 800835a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800835e:	4a05      	ldr	r2, [pc, #20]	; (8008374 <SystemInit+0x20>)
 8008360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008368:	bf00      	nop
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	e000ed00 	.word	0xe000ed00

08008378 <__NVIC_SystemReset>:
{
 8008378:	b480      	push	{r7}
 800837a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800837c:	f3bf 8f4f 	dsb	sy
}
 8008380:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008382:	4b06      	ldr	r3, [pc, #24]	; (800839c <__NVIC_SystemReset+0x24>)
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800838a:	4904      	ldr	r1, [pc, #16]	; (800839c <__NVIC_SystemReset+0x24>)
 800838c:	4b04      	ldr	r3, [pc, #16]	; (80083a0 <__NVIC_SystemReset+0x28>)
 800838e:	4313      	orrs	r3, r2
 8008390:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008392:	f3bf 8f4f 	dsb	sy
}
 8008396:	bf00      	nop
    __NOP();
 8008398:	bf00      	nop
 800839a:	e7fd      	b.n	8008398 <__NVIC_SystemReset+0x20>
 800839c:	e000ed00 	.word	0xe000ed00
 80083a0:	05fa0004 	.word	0x05fa0004

080083a4 <randomSSIDGeneration>:
extern osMessageQId myQueueHandle;
extern data_pin_t data_pin;

// Generation SSID
char *randomSSIDGeneration(char *rSSID, int num)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
    // Initialize counter
    int i = 0;
 80083ae:	2300      	movs	r3, #0
 80083b0:	60fb      	str	r3, [r7, #12]

    // Array of symbols
    static const char symbols[] = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789";

    //  the random SSID
    for (i = 0; i < num; i++) {
 80083b2:	2300      	movs	r3, #0
 80083b4:	60fb      	str	r3, [r7, #12]
 80083b6:	e017      	b.n	80083e8 <randomSSIDGeneration+0x44>
      rSSID[i] = symbols[rand() % 61];
 80083b8:	f01e fcdc 	bl	8026d74 <rand>
 80083bc:	4601      	mov	r1, r0
 80083be:	4b11      	ldr	r3, [pc, #68]	; (8008404 <randomSSIDGeneration+0x60>)
 80083c0:	fb83 2301 	smull	r2, r3, r3, r1
 80083c4:	111a      	asrs	r2, r3, #4
 80083c6:	17cb      	asrs	r3, r1, #31
 80083c8:	1ad2      	subs	r2, r2, r3
 80083ca:	4613      	mov	r3, r2
 80083cc:	011b      	lsls	r3, r3, #4
 80083ce:	1a9b      	subs	r3, r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	1aca      	subs	r2, r1, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	440b      	add	r3, r1
 80083dc:	490a      	ldr	r1, [pc, #40]	; (8008408 <randomSSIDGeneration+0x64>)
 80083de:	5c8a      	ldrb	r2, [r1, r2]
 80083e0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num; i++) {
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3301      	adds	r3, #1
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	dbe3      	blt.n	80083b8 <randomSSIDGeneration+0x14>
    }
    rSSID[num]='\0';
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	4413      	add	r3, r2
 80083f6:	2200      	movs	r2, #0
 80083f8:	701a      	strb	r2, [r3, #0]

    return rSSID;
 80083fa:	687b      	ldr	r3, [r7, #4]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	4325c53f 	.word	0x4325c53f
 8008408:	080301cc 	.word	0x080301cc

0800840c <restartSSID>:


// Restart SSID
void restartSSID(void){
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
		Ti = HAL_GetTick();
 8008410:	f003 f842 	bl	800b498 <HAL_GetTick>
 8008414:	4603      	mov	r3, r0
 8008416:	4a02      	ldr	r2, [pc, #8]	; (8008420 <restartSSID+0x14>)
 8008418:	6013      	str	r3, [r2, #0]
}
 800841a:	bf00      	nop
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	2000c318 	.word	0x2000c318

08008424 <MultiPartTabCount>:
//////////////////////////////  SSI MULTIPART Function  ///////////////////////


// Counting the number of lines JSON
int MultiPartTabCount(int num, int pinnum, int count)
{
 8008424:	b480      	push	{r7}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
	count = 0;
 8008430:	2300      	movs	r3, #0
 8008432:	607b      	str	r3, [r7, #4]
	for (int i = 0; i <= pinnum; i++){
 8008434:	2300      	movs	r3, #0
 8008436:	617b      	str	r3, [r7, #20]
 8008438:	e024      	b.n	8008484 <MultiPartTabCount+0x60>
		if(num == PinsConf[i].topin && num == 1){
 800843a:	4918      	ldr	r1, [pc, #96]	; (800849c <MultiPartTabCount+0x78>)
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	4613      	mov	r3, r2
 8008440:	00db      	lsls	r3, r3, #3
 8008442:	4413      	add	r3, r2
 8008444:	011b      	lsls	r3, r3, #4
 8008446:	440b      	add	r3, r1
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	429a      	cmp	r2, r3
 800844e:	d105      	bne.n	800845c <MultiPartTabCount+0x38>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d102      	bne.n	800845c <MultiPartTabCount+0x38>
			count++;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	3301      	adds	r3, #1
 800845a:	607b      	str	r3, [r7, #4]
		}
		if(num == PinsConf[i].topin && num == 2){
 800845c:	490f      	ldr	r1, [pc, #60]	; (800849c <MultiPartTabCount+0x78>)
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	4613      	mov	r3, r2
 8008462:	00db      	lsls	r3, r3, #3
 8008464:	4413      	add	r3, r2
 8008466:	011b      	lsls	r3, r3, #4
 8008468:	440b      	add	r3, r1
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	429a      	cmp	r2, r3
 8008470:	d105      	bne.n	800847e <MultiPartTabCount+0x5a>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b02      	cmp	r3, #2
 8008476:	d102      	bne.n	800847e <MultiPartTabCount+0x5a>
			count++;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3301      	adds	r3, #1
 800847c:	607b      	str	r3, [r7, #4]
	for (int i = 0; i <= pinnum; i++){
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	3301      	adds	r3, #1
 8008482:	617b      	str	r3, [r7, #20]
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	429a      	cmp	r2, r3
 800848a:	ddd6      	ble.n	800843a <MultiPartTabCount+0x16>
		}
	}
	return count;
 800848c:	687b      	ldr	r3, [r7, #4]
}
 800848e:	4618      	mov	r0, r3
 8008490:	371c      	adds	r7, #28
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	20005c9c 	.word	0x20005c9c

080084a0 <ssi_handler>:


const uint8_t SSI_TAG_NUM = (sizeof(TAGCHAR) / sizeof(TAGCHAR[0]));

static u16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen,
		u16_t current_tag_part, u16_t *next_tag_part) {
 80084a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084a2:	b0a5      	sub	sp, #148	; 0x94
 80084a4:	af0c      	add	r7, sp, #48	; 0x30
 80084a6:	6278      	str	r0, [r7, #36]	; 0x24
 80084a8:	6239      	str	r1, [r7, #32]
 80084aa:	61fa      	str	r2, [r7, #28]
 80084ac:	837b      	strh	r3, [r7, #26]

	char* str = NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	65fb      	str	r3, [r7, #92]	; 0x5c
	char macStr[34] = {0};
 80084b2:	2300      	movs	r3, #0
 80084b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80084b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80084ba:	221e      	movs	r2, #30
 80084bc:	2100      	movs	r1, #0
 80084be:	4618      	mov	r0, r3
 80084c0:	f01e f89a 	bl	80265f8 <memset>
	cJSON *root = NULL;
 80084c4:	2300      	movs	r3, #0
 80084c6:	657b      	str	r3, [r7, #84]	; 0x54
	cJSON *fld = NULL;
 80084c8:	2300      	movs	r3, #0
 80084ca:	653b      	str	r3, [r7, #80]	; 0x50
	int idplus = 0;
 80084cc:	2300      	movs	r3, #0
 80084ce:	64fb      	str	r3, [r7, #76]	; 0x4c
	int i = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	2b06      	cmp	r3, #6
 80084d8:	f200 87d6 	bhi.w	8009488 <ssi_handler+0xfe8>
 80084dc:	a201      	add	r2, pc, #4	; (adr r2, 80084e4 <ssi_handler+0x44>)
 80084de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e2:	bf00      	nop
 80084e4:	08008501 	.word	0x08008501
 80084e8:	0800891b 	.word	0x0800891b
 80084ec:	08008933 	.word	0x08008933
 80084f0:	080089c9 	.word	0x080089c9
 80084f4:	080089f3 	.word	0x080089f3
 80084f8:	08008a65 	.word	0x08008a65
 80084fc:	080093cd 	.word	0x080093cd

	switch (iIndex) {
	// ssi tag <!--#tabjson-->
	case 0:
	#if LWIP_HTTPD_SSI_MULTIPART
		if (variable == NUMPIN) {
 8008500:	4b9c      	ldr	r3, [pc, #624]	; (8008774 <ssi_handler+0x2d4>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b05      	cmp	r3, #5
 8008506:	d107      	bne.n	8008518 <ssi_handler+0x78>
			variable = 0;
 8008508:	4b9a      	ldr	r3, [pc, #616]	; (8008774 <ssi_handler+0x2d4>)
 800850a:	2200      	movs	r2, #0
 800850c:	601a      	str	r2, [r3, #0]
			countJson = 0;
 800850e:	4b9a      	ldr	r3, [pc, #616]	; (8008778 <ssi_handler+0x2d8>)
 8008510:	2200      	movs	r2, #0
 8008512:	701a      	strb	r2, [r3, #0]
			break;
 8008514:	f000 bfb9 	b.w	800948a <ssi_handler+0xfea>
		} else {
			///////
			if(tab == 1){
 8008518:	4b98      	ldr	r3, [pc, #608]	; (800877c <ssi_handler+0x2dc>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d126      	bne.n	800856e <ssi_handler+0xce>
				sprintf(pcInsert,"{\"id\":%d,\"pins\":\"%s\",\"topin\":%d},",
 8008520:	4b94      	ldr	r3, [pc, #592]	; (8008774 <ssi_handler+0x2d4>)
 8008522:	6819      	ldr	r1, [r3, #0]
						variable, PinsInfo[variable].pins, PinsConf[variable].topin);
 8008524:	4b93      	ldr	r3, [pc, #588]	; (8008774 <ssi_handler+0x2d4>)
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	4613      	mov	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4a93      	ldr	r2, [pc, #588]	; (8008780 <ssi_handler+0x2e0>)
 8008532:	1898      	adds	r0, r3, r2
				sprintf(pcInsert,"{\"id\":%d,\"pins\":\"%s\",\"topin\":%d},",
 8008534:	4b8f      	ldr	r3, [pc, #572]	; (8008774 <ssi_handler+0x2d4>)
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	4c92      	ldr	r4, [pc, #584]	; (8008784 <ssi_handler+0x2e4>)
 800853a:	4613      	mov	r3, r2
 800853c:	00db      	lsls	r3, r3, #3
 800853e:	4413      	add	r3, r2
 8008540:	011b      	lsls	r3, r3, #4
 8008542:	4423      	add	r3, r4
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	4603      	mov	r3, r0
 800854a:	460a      	mov	r2, r1
 800854c:	498e      	ldr	r1, [pc, #568]	; (8008788 <ssi_handler+0x2e8>)
 800854e:	6a38      	ldr	r0, [r7, #32]
 8008550:	f01e fd06 	bl	8026f60 <siprintf>

				if(variable == (NUMPIN-1)){
 8008554:	4b87      	ldr	r3, [pc, #540]	; (8008774 <ssi_handler+0x2d4>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b04      	cmp	r3, #4
 800855a:	d108      	bne.n	800856e <ssi_handler+0xce>
					pcInsert[strlen(pcInsert) - 1] = '\0'; // Удаляем "," из JSON
 800855c:	6a38      	ldr	r0, [r7, #32]
 800855e:	f7f7 fe41 	bl	80001e4 <strlen>
 8008562:	4603      	mov	r3, r0
 8008564:	3b01      	subs	r3, #1
 8008566:	6a3a      	ldr	r2, [r7, #32]
 8008568:	4413      	add	r3, r2
 800856a:	2200      	movs	r2, #0
 800856c:	701a      	strb	r2, [r3, #0]
				}
			}
			if(tab == 2){
 800856e:	4b83      	ldr	r3, [pc, #524]	; (800877c <ssi_handler+0x2dc>)
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	2b02      	cmp	r3, #2
 8008574:	f040 8114 	bne.w	80087a0 <ssi_handler+0x300>
				if(PinsConf[variable].topin == 1){
 8008578:	4b7e      	ldr	r3, [pc, #504]	; (8008774 <ssi_handler+0x2d4>)
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	4981      	ldr	r1, [pc, #516]	; (8008784 <ssi_handler+0x2e4>)
 800857e:	4613      	mov	r3, r2
 8008580:	00db      	lsls	r3, r3, #3
 8008582:	4413      	add	r3, r2
 8008584:	011b      	lsls	r3, r3, #4
 8008586:	440b      	add	r3, r1
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b01      	cmp	r3, #1
 800858c:	f040 8106 	bne.w	800879c <ssi_handler+0x2fc>
					// buttoms json
					idplus = variable + 1;
 8008590:	4b78      	ldr	r3, [pc, #480]	; (8008774 <ssi_handler+0x2d4>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3301      	adds	r3, #1
 8008596:	64fb      	str	r3, [r7, #76]	; 0x4c

				    root = cJSON_CreateObject();
 8008598:	f7fa fe40 	bl	800321c <cJSON_CreateObject>
 800859c:	6578      	str	r0, [r7, #84]	; 0x54
				    while (i <= NUMPINLINKS - 1) {
 800859e:	e035      	b.n	800860c <ssi_handler+0x16c>
				    	if(PinsLinks[i].idin == variable && PinsLinks[i].flag == 1){
 80085a0:	497a      	ldr	r1, [pc, #488]	; (800878c <ssi_handler+0x2ec>)
 80085a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085a4:	4613      	mov	r3, r2
 80085a6:	005b      	lsls	r3, r3, #1
 80085a8:	4413      	add	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	440b      	add	r3, r1
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	4b70      	ldr	r3, [pc, #448]	; (8008774 <ssi_handler+0x2d4>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d126      	bne.n	8008606 <ssi_handler+0x166>
 80085b8:	4974      	ldr	r1, [pc, #464]	; (800878c <ssi_handler+0x2ec>)
 80085ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085bc:	4613      	mov	r3, r2
 80085be:	005b      	lsls	r3, r3, #1
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	440b      	add	r3, r1
 80085c6:	3308      	adds	r3, #8
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d11b      	bne.n	8008606 <ssi_handler+0x166>
				    		cJSON_AddNumberToObject(root, PinsInfo[PinsLinks[i].idout].pins,i + 1);
 80085ce:	496f      	ldr	r1, [pc, #444]	; (800878c <ssi_handler+0x2ec>)
 80085d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085d2:	4613      	mov	r3, r2
 80085d4:	005b      	lsls	r3, r3, #1
 80085d6:	4413      	add	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	440b      	add	r3, r1
 80085dc:	3304      	adds	r3, #4
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	4613      	mov	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4a65      	ldr	r2, [pc, #404]	; (8008780 <ssi_handler+0x2e0>)
 80085ea:	189c      	adds	r4, r3, r2
 80085ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085ee:	3301      	adds	r3, #1
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7f7 ffa7 	bl	8000544 <__aeabi_i2d>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	ec43 2b10 	vmov	d0, r2, r3
 80085fe:	4621      	mov	r1, r4
 8008600:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008602:	f7fa fd41 	bl	8003088 <cJSON_AddNumberToObject>
				    	}
				    	i++;
 8008606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008608:	3301      	adds	r3, #1
 800860a:	65bb      	str	r3, [r7, #88]	; 0x58
				    while (i <= NUMPINLINKS - 1) {
 800860c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800860e:	2b04      	cmp	r3, #4
 8008610:	ddc6      	ble.n	80085a0 <ssi_handler+0x100>
				    }

					str = cJSON_Print(root);
 8008612:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008614:	f7f9 fe66 	bl	80022e4 <cJSON_Print>
 8008618:	65f8      	str	r0, [r7, #92]	; 0x5c
					cJSON_Delete(root);
 800861a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800861c:	f7f8 fda0 	bl	8001160 <cJSON_Delete>

					sprintf(pcInsert,
 8008620:	4b54      	ldr	r3, [pc, #336]	; (8008774 <ssi_handler+0x2d4>)
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	4957      	ldr	r1, [pc, #348]	; (8008784 <ssi_handler+0x2e4>)
 8008626:	4613      	mov	r3, r2
 8008628:	00db      	lsls	r3, r3, #3
 800862a:	4413      	add	r3, r2
 800862c:	011b      	lsls	r3, r3, #4
 800862e:	440b      	add	r3, r1
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	617b      	str	r3, [r7, #20]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"pinact\":%s,\"info\":\"%s\",\"onoff\":%d},",
							PinsConf[variable].topin, idplus, PinsInfo[variable].pins,
 8008634:	4b4f      	ldr	r3, [pc, #316]	; (8008774 <ssi_handler+0x2d4>)
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	4613      	mov	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4a4f      	ldr	r2, [pc, #316]	; (8008780 <ssi_handler+0x2e0>)
 8008642:	1899      	adds	r1, r3, r2
							PinsConf[variable].ptype, PinsConf[variable].binter,
 8008644:	4b4b      	ldr	r3, [pc, #300]	; (8008774 <ssi_handler+0x2d4>)
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	4613      	mov	r3, r2
 800864a:	00db      	lsls	r3, r3, #3
 800864c:	4413      	add	r3, r2
 800864e:	011b      	lsls	r3, r3, #4
 8008650:	3318      	adds	r3, #24
 8008652:	4a4c      	ldr	r2, [pc, #304]	; (8008784 <ssi_handler+0x2e4>)
 8008654:	1898      	adds	r0, r3, r2
					sprintf(pcInsert,
 8008656:	4b47      	ldr	r3, [pc, #284]	; (8008774 <ssi_handler+0x2d4>)
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	4c4a      	ldr	r4, [pc, #296]	; (8008784 <ssi_handler+0x2e4>)
 800865c:	4613      	mov	r3, r2
 800865e:	00db      	lsls	r3, r3, #3
 8008660:	4413      	add	r3, r2
 8008662:	011b      	lsls	r3, r3, #4
 8008664:	4423      	add	r3, r4
 8008666:	3328      	adds	r3, #40	; 0x28
 8008668:	681c      	ldr	r4, [r3, #0]
 800866a:	4b42      	ldr	r3, [pc, #264]	; (8008774 <ssi_handler+0x2d4>)
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	4d45      	ldr	r5, [pc, #276]	; (8008784 <ssi_handler+0x2e4>)
 8008670:	4613      	mov	r3, r2
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	4413      	add	r3, r2
 8008676:	011b      	lsls	r3, r3, #4
 8008678:	442b      	add	r3, r5
 800867a:	332c      	adds	r3, #44	; 0x2c
 800867c:	681d      	ldr	r5, [r3, #0]
 800867e:	4b3d      	ldr	r3, [pc, #244]	; (8008774 <ssi_handler+0x2d4>)
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	4e40      	ldr	r6, [pc, #256]	; (8008784 <ssi_handler+0x2e4>)
 8008684:	4613      	mov	r3, r2
 8008686:	00db      	lsls	r3, r3, #3
 8008688:	4413      	add	r3, r2
 800868a:	011b      	lsls	r3, r3, #4
 800868c:	4433      	add	r3, r6
 800868e:	3330      	adds	r3, #48	; 0x30
 8008690:	681e      	ldr	r6, [r3, #0]
 8008692:	4b38      	ldr	r3, [pc, #224]	; (8008774 <ssi_handler+0x2d4>)
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	4b3b      	ldr	r3, [pc, #236]	; (8008784 <ssi_handler+0x2e4>)
 8008698:	613b      	str	r3, [r7, #16]
 800869a:	4613      	mov	r3, r2
 800869c:	00db      	lsls	r3, r3, #3
 800869e:	4413      	add	r3, r2
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	4413      	add	r3, r2
 80086a6:	3334      	adds	r3, #52	; 0x34
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	613b      	str	r3, [r7, #16]
 80086ac:	4b31      	ldr	r3, [pc, #196]	; (8008774 <ssi_handler+0x2d4>)
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	4b34      	ldr	r3, [pc, #208]	; (8008784 <ssi_handler+0x2e4>)
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	4613      	mov	r3, r2
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	4413      	add	r3, r2
 80086ba:	011b      	lsls	r3, r3, #4
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	4413      	add	r3, r2
 80086c0:	3338      	adds	r3, #56	; 0x38
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	60fa      	str	r2, [r7, #12]
 80086c6:	4b2b      	ldr	r3, [pc, #172]	; (8008774 <ssi_handler+0x2d4>)
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	4b2e      	ldr	r3, [pc, #184]	; (8008784 <ssi_handler+0x2e4>)
 80086cc:	60bb      	str	r3, [r7, #8]
 80086ce:	4613      	mov	r3, r2
 80086d0:	00db      	lsls	r3, r3, #3
 80086d2:	4413      	add	r3, r2
 80086d4:	011b      	lsls	r3, r3, #4
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	4694      	mov	ip, r2
 80086da:	4463      	add	r3, ip
 80086dc:	333c      	adds	r3, #60	; 0x3c
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	60bb      	str	r3, [r7, #8]
							PinsConf[variable].hinter, PinsConf[variable].repeat,
							PinsConf[variable].rinter, PinsConf[variable].dcinter,
							PinsConf[variable].pclick, str, PinsConf[variable].info,
 80086e2:	4b24      	ldr	r3, [pc, #144]	; (8008774 <ssi_handler+0x2d4>)
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	4613      	mov	r3, r2
 80086e8:	00db      	lsls	r3, r3, #3
 80086ea:	4413      	add	r3, r2
 80086ec:	011b      	lsls	r3, r3, #4
 80086ee:	3340      	adds	r3, #64	; 0x40
 80086f0:	4a24      	ldr	r2, [pc, #144]	; (8008784 <ssi_handler+0x2e4>)
 80086f2:	189a      	adds	r2, r3, r2
 80086f4:	607a      	str	r2, [r7, #4]
					sprintf(pcInsert,
 80086f6:	4b1f      	ldr	r3, [pc, #124]	; (8008774 <ssi_handler+0x2d4>)
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	4b22      	ldr	r3, [pc, #136]	; (8008784 <ssi_handler+0x2e4>)
 80086fc:	603b      	str	r3, [r7, #0]
 80086fe:	4613      	mov	r3, r2
 8008700:	00db      	lsls	r3, r3, #3
 8008702:	4413      	add	r3, r2
 8008704:	011b      	lsls	r3, r3, #4
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	4694      	mov	ip, r2
 800870a:	4463      	add	r3, ip
 800870c:	3360      	adds	r3, #96	; 0x60
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	930a      	str	r3, [sp, #40]	; 0x28
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	9209      	str	r2, [sp, #36]	; 0x24
 8008716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008718:	9308      	str	r3, [sp, #32]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	9307      	str	r3, [sp, #28]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	9206      	str	r2, [sp, #24]
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	9305      	str	r3, [sp, #20]
 8008726:	9604      	str	r6, [sp, #16]
 8008728:	9503      	str	r5, [sp, #12]
 800872a:	9402      	str	r4, [sp, #8]
 800872c:	9001      	str	r0, [sp, #4]
 800872e:	9100      	str	r1, [sp, #0]
 8008730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	4916      	ldr	r1, [pc, #88]	; (8008790 <ssi_handler+0x2f0>)
 8008736:	6a38      	ldr	r0, [r7, #32]
 8008738:	f01e fc12 	bl	8026f60 <siprintf>
							PinsConf[variable].onoff);

					free(str);
 800873c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800873e:	f01d ff1d 	bl	802657c <free>

					////////////////
					countJson++;
 8008742:	4b0d      	ldr	r3, [pc, #52]	; (8008778 <ssi_handler+0x2d8>)
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	3301      	adds	r3, #1
 8008748:	b2da      	uxtb	r2, r3
 800874a:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <ssi_handler+0x2d8>)
 800874c:	701a      	strb	r2, [r3, #0]

					if(countJson == numTabLine){
 800874e:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <ssi_handler+0x2d8>)
 8008750:	781a      	ldrb	r2, [r3, #0]
 8008752:	4b10      	ldr	r3, [pc, #64]	; (8008794 <ssi_handler+0x2f4>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	429a      	cmp	r2, r3
 8008758:	d122      	bne.n	80087a0 <ssi_handler+0x300>
						printf("DELLL \n");
 800875a:	480f      	ldr	r0, [pc, #60]	; (8008798 <ssi_handler+0x2f8>)
 800875c:	f01e fb02 	bl	8026d64 <puts>
						pcInsert[strlen(pcInsert) - 1] = '\0'; // Удаляем "," из JSON в конце
 8008760:	6a38      	ldr	r0, [r7, #32]
 8008762:	f7f7 fd3f 	bl	80001e4 <strlen>
 8008766:	4603      	mov	r3, r0
 8008768:	3b01      	subs	r3, #1
 800876a:	6a3a      	ldr	r2, [r7, #32]
 800876c:	4413      	add	r3, r2
 800876e:	2200      	movs	r2, #0
 8008770:	701a      	strb	r2, [r3, #0]
 8008772:	e015      	b.n	80087a0 <ssi_handler+0x300>
 8008774:	20001340 	.word	0x20001340
 8008778:	20001348 	.word	0x20001348
 800877c:	20001345 	.word	0x20001345
 8008780:	080300b0 	.word	0x080300b0
 8008784:	20005c9c 	.word	0x20005c9c
 8008788:	0802c26c 	.word	0x0802c26c
 800878c:	20005c60 	.word	0x20005c60
 8008790:	0802c290 	.word	0x0802c290
 8008794:	20001347 	.word	0x20001347
 8008798:	0802c32c 	.word	0x0802c32c
					}

				} else {
					pcInsert = "";
 800879c:	4ba0      	ldr	r3, [pc, #640]	; (8008a20 <ssi_handler+0x580>)
 800879e:	623b      	str	r3, [r7, #32]
				}

			}
			if(tab == 3){
 80087a0:	4ba0      	ldr	r3, [pc, #640]	; (8008a24 <ssi_handler+0x584>)
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	2b03      	cmp	r3, #3
 80087a6:	f040 80a7 	bne.w	80088f8 <ssi_handler+0x458>
				if(PinsConf[variable].topin == 2){
 80087aa:	4b9f      	ldr	r3, [pc, #636]	; (8008a28 <ssi_handler+0x588>)
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	499f      	ldr	r1, [pc, #636]	; (8008a2c <ssi_handler+0x58c>)
 80087b0:	4613      	mov	r3, r2
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	4413      	add	r3, r2
 80087b6:	011b      	lsls	r3, r3, #4
 80087b8:	440b      	add	r3, r1
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	f040 8099 	bne.w	80088f4 <ssi_handler+0x454>
					// relay json
					idplus = variable + 1;
 80087c2:	4b99      	ldr	r3, [pc, #612]	; (8008a28 <ssi_handler+0x588>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3301      	adds	r3, #1
 80087c8:	64fb      	str	r3, [r7, #76]	; 0x4c

					sprintf(pcInsert,
 80087ca:	4b97      	ldr	r3, [pc, #604]	; (8008a28 <ssi_handler+0x588>)
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	4997      	ldr	r1, [pc, #604]	; (8008a2c <ssi_handler+0x58c>)
 80087d0:	4613      	mov	r3, r2
 80087d2:	00db      	lsls	r3, r3, #3
 80087d4:	4413      	add	r3, r2
 80087d6:	011b      	lsls	r3, r3, #4
 80087d8:	440b      	add	r3, r1
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	617b      	str	r3, [r7, #20]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d},",
							PinsConf[variable].topin, idplus, PinsInfo[variable].pins,
 80087de:	4b92      	ldr	r3, [pc, #584]	; (8008a28 <ssi_handler+0x588>)
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	4613      	mov	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4a91      	ldr	r2, [pc, #580]	; (8008a30 <ssi_handler+0x590>)
 80087ec:	1899      	adds	r1, r3, r2
							PinsConf[variable].ptype, PinsConf[variable].pwm, PinsConf[variable].on,
 80087ee:	4b8e      	ldr	r3, [pc, #568]	; (8008a28 <ssi_handler+0x588>)
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	4613      	mov	r3, r2
 80087f4:	00db      	lsls	r3, r3, #3
 80087f6:	4413      	add	r3, r2
 80087f8:	011b      	lsls	r3, r3, #4
 80087fa:	3318      	adds	r3, #24
 80087fc:	4a8b      	ldr	r2, [pc, #556]	; (8008a2c <ssi_handler+0x58c>)
 80087fe:	1898      	adds	r0, r3, r2
					sprintf(pcInsert,
 8008800:	4b89      	ldr	r3, [pc, #548]	; (8008a28 <ssi_handler+0x588>)
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	4c89      	ldr	r4, [pc, #548]	; (8008a2c <ssi_handler+0x58c>)
 8008806:	4613      	mov	r3, r2
 8008808:	00db      	lsls	r3, r3, #3
 800880a:	4413      	add	r3, r2
 800880c:	011b      	lsls	r3, r3, #4
 800880e:	4423      	add	r3, r4
 8008810:	3304      	adds	r3, #4
 8008812:	681c      	ldr	r4, [r3, #0]
 8008814:	4b84      	ldr	r3, [pc, #528]	; (8008a28 <ssi_handler+0x588>)
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	4d84      	ldr	r5, [pc, #528]	; (8008a2c <ssi_handler+0x58c>)
 800881a:	4613      	mov	r3, r2
 800881c:	00db      	lsls	r3, r3, #3
 800881e:	4413      	add	r3, r2
 8008820:	011b      	lsls	r3, r3, #4
 8008822:	442b      	add	r3, r5
 8008824:	3308      	adds	r3, #8
 8008826:	681d      	ldr	r5, [r3, #0]
 8008828:	4b7f      	ldr	r3, [pc, #508]	; (8008a28 <ssi_handler+0x588>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	4e7f      	ldr	r6, [pc, #508]	; (8008a2c <ssi_handler+0x58c>)
 800882e:	4613      	mov	r3, r2
 8008830:	00db      	lsls	r3, r3, #3
 8008832:	4413      	add	r3, r2
 8008834:	011b      	lsls	r3, r3, #4
 8008836:	4433      	add	r3, r6
 8008838:	330c      	adds	r3, #12
 800883a:	681e      	ldr	r6, [r3, #0]
 800883c:	4b7a      	ldr	r3, [pc, #488]	; (8008a28 <ssi_handler+0x588>)
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	4b7a      	ldr	r3, [pc, #488]	; (8008a2c <ssi_handler+0x58c>)
 8008842:	613b      	str	r3, [r7, #16]
 8008844:	4613      	mov	r3, r2
 8008846:	00db      	lsls	r3, r3, #3
 8008848:	4413      	add	r3, r2
 800884a:	011b      	lsls	r3, r3, #4
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	4413      	add	r3, r2
 8008850:	3310      	adds	r3, #16
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	613b      	str	r3, [r7, #16]
 8008856:	4b74      	ldr	r3, [pc, #464]	; (8008a28 <ssi_handler+0x588>)
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	4b74      	ldr	r3, [pc, #464]	; (8008a2c <ssi_handler+0x58c>)
 800885c:	60fb      	str	r3, [r7, #12]
 800885e:	4613      	mov	r3, r2
 8008860:	00db      	lsls	r3, r3, #3
 8008862:	4413      	add	r3, r2
 8008864:	011b      	lsls	r3, r3, #4
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	4413      	add	r3, r2
 800886a:	3314      	adds	r3, #20
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	60fa      	str	r2, [r7, #12]
							PinsConf[variable].istate, PinsConf[variable].dvalue,
							PinsConf[variable].ponr, PinsConf[variable].info,
 8008870:	4b6d      	ldr	r3, [pc, #436]	; (8008a28 <ssi_handler+0x588>)
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	4613      	mov	r3, r2
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	4413      	add	r3, r2
 800887a:	011b      	lsls	r3, r3, #4
 800887c:	3340      	adds	r3, #64	; 0x40
 800887e:	4a6b      	ldr	r2, [pc, #428]	; (8008a2c <ssi_handler+0x58c>)
 8008880:	4413      	add	r3, r2
 8008882:	60bb      	str	r3, [r7, #8]
					sprintf(pcInsert,
 8008884:	4b68      	ldr	r3, [pc, #416]	; (8008a28 <ssi_handler+0x588>)
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	4b68      	ldr	r3, [pc, #416]	; (8008a2c <ssi_handler+0x58c>)
 800888a:	607b      	str	r3, [r7, #4]
 800888c:	4613      	mov	r3, r2
 800888e:	00db      	lsls	r3, r3, #3
 8008890:	4413      	add	r3, r2
 8008892:	011b      	lsls	r3, r3, #4
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	4694      	mov	ip, r2
 8008898:	4463      	add	r3, ip
 800889a:	3360      	adds	r3, #96	; 0x60
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	9308      	str	r3, [sp, #32]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	9307      	str	r3, [sp, #28]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	9206      	str	r2, [sp, #24]
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	9305      	str	r3, [sp, #20]
 80088ac:	9604      	str	r6, [sp, #16]
 80088ae:	9503      	str	r5, [sp, #12]
 80088b0:	9402      	str	r4, [sp, #8]
 80088b2:	9001      	str	r0, [sp, #4]
 80088b4:	9100      	str	r1, [sp, #0]
 80088b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	495e      	ldr	r1, [pc, #376]	; (8008a34 <ssi_handler+0x594>)
 80088bc:	6a38      	ldr	r0, [r7, #32]
 80088be:	f01e fb4f 	bl	8026f60 <siprintf>
							PinsConf[variable].onoff);
					////////////////

					countJson++;
 80088c2:	4b5d      	ldr	r3, [pc, #372]	; (8008a38 <ssi_handler+0x598>)
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	3301      	adds	r3, #1
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	4b5b      	ldr	r3, [pc, #364]	; (8008a38 <ssi_handler+0x598>)
 80088cc:	701a      	strb	r2, [r3, #0]

					if(countJson == numTabLine){
 80088ce:	4b5a      	ldr	r3, [pc, #360]	; (8008a38 <ssi_handler+0x598>)
 80088d0:	781a      	ldrb	r2, [r3, #0]
 80088d2:	4b5a      	ldr	r3, [pc, #360]	; (8008a3c <ssi_handler+0x59c>)
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d10e      	bne.n	80088f8 <ssi_handler+0x458>
						printf("DELLL \n");
 80088da:	4859      	ldr	r0, [pc, #356]	; (8008a40 <ssi_handler+0x5a0>)
 80088dc:	f01e fa42 	bl	8026d64 <puts>
						pcInsert[strlen(pcInsert) - 1] = '\0'; // Удаляем "," из JSON в конце
 80088e0:	6a38      	ldr	r0, [r7, #32]
 80088e2:	f7f7 fc7f 	bl	80001e4 <strlen>
 80088e6:	4603      	mov	r3, r0
 80088e8:	3b01      	subs	r3, #1
 80088ea:	6a3a      	ldr	r2, [r7, #32]
 80088ec:	4413      	add	r3, r2
 80088ee:	2200      	movs	r2, #0
 80088f0:	701a      	strb	r2, [r3, #0]
 80088f2:	e001      	b.n	80088f8 <ssi_handler+0x458>
					}

				} else {
					pcInsert = "";
 80088f4:	4b4a      	ldr	r3, [pc, #296]	; (8008a20 <ssi_handler+0x580>)
 80088f6:	623b      	str	r3, [r7, #32]
				}


			}

			*next_tag_part = variable;
 80088f8:	4b4b      	ldr	r3, [pc, #300]	; (8008a28 <ssi_handler+0x588>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008900:	801a      	strh	r2, [r3, #0]
			variable++;
 8008902:	4b49      	ldr	r3, [pc, #292]	; (8008a28 <ssi_handler+0x588>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3301      	adds	r3, #1
 8008908:	4a47      	ldr	r2, [pc, #284]	; (8008a28 <ssi_handler+0x588>)
 800890a:	6013      	str	r3, [r2, #0]
			return strlen(pcInsert);
 800890c:	6a38      	ldr	r0, [r7, #32]
 800890e:	f7f7 fc69 	bl	80001e4 <strlen>
 8008912:	4603      	mov	r3, r0
 8008914:	b29b      	uxth	r3, r3
 8008916:	f000 bdb9 	b.w	800948c <ssi_handler+0xfec>
		printf("LWIP_HTTPD_SSI_MULTIPART disabled /n");
	#endif
		break;
		// ssi tag  <!--#ssid-->
		case 1:
			sprintf(pcInsert, "%s", randomSSID);
 800891a:	4a4a      	ldr	r2, [pc, #296]	; (8008a44 <ssi_handler+0x5a4>)
 800891c:	494a      	ldr	r1, [pc, #296]	; (8008a48 <ssi_handler+0x5a8>)
 800891e:	6a38      	ldr	r0, [r7, #32]
 8008920:	f01e fb1e 	bl	8026f60 <siprintf>
			return strlen(pcInsert);
 8008924:	6a38      	ldr	r0, [r7, #32]
 8008926:	f7f7 fc5d 	bl	80001e4 <strlen>
 800892a:	4603      	mov	r3, r0
 800892c:	b29b      	uxth	r3, r3
 800892e:	f000 bdad 	b.w	800948c <ssi_handler+0xfec>
			break;

		// ssi tag <!--#check-->
		case 2:
			root = cJSON_CreateArray();
 8008932:	f7fa fc5f 	bl	80031f4 <cJSON_CreateArray>
 8008936:	6578      	str	r0, [r7, #84]	; 0x54
			fld = cJSON_CreateObject();
 8008938:	f7fa fc70 	bl	800321c <cJSON_CreateObject>
 800893c:	6538      	str	r0, [r7, #80]	; 0x50
			cJSON_AddItemToArray(root, fld = cJSON_CreateObject());
 800893e:	f7fa fc6d 	bl	800321c <cJSON_CreateObject>
 8008942:	6538      	str	r0, [r7, #80]	; 0x50
 8008944:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008946:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008948:	f7fa fb19 	bl	8002f7e <cJSON_AddItemToArray>

			if(verifyNum == 2){
 800894c:	4b3f      	ldr	r3, [pc, #252]	; (8008a4c <ssi_handler+0x5ac>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	2b02      	cmp	r3, #2
 8008952:	d115      	bne.n	8008980 <ssi_handler+0x4e0>
				memset(randomSSID, '\0', sizeof(randomSSID));
 8008954:	221b      	movs	r2, #27
 8008956:	2100      	movs	r1, #0
 8008958:	483a      	ldr	r0, [pc, #232]	; (8008a44 <ssi_handler+0x5a4>)
 800895a:	f01d fe4d 	bl	80265f8 <memset>
				cJSON_AddNumberToObject(fld, "login", 1);
 800895e:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8008a10 <ssi_handler+0x570>
 8008962:	493b      	ldr	r1, [pc, #236]	; (8008a50 <ssi_handler+0x5b0>)
 8008964:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008966:	f7fa fb8f 	bl	8003088 <cJSON_AddNumberToObject>
				cJSON_AddStringToObject(fld, "ssid", randomSSIDGeneration(randomSSID, 27));
 800896a:	211b      	movs	r1, #27
 800896c:	4835      	ldr	r0, [pc, #212]	; (8008a44 <ssi_handler+0x5a4>)
 800896e:	f7ff fd19 	bl	80083a4 <randomSSIDGeneration>
 8008972:	4603      	mov	r3, r0
 8008974:	461a      	mov	r2, r3
 8008976:	4937      	ldr	r1, [pc, #220]	; (8008a54 <ssi_handler+0x5b4>)
 8008978:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800897a:	f7fa fba9 	bl	80030d0 <cJSON_AddStringToObject>
 800897e:	e00a      	b.n	8008996 <ssi_handler+0x4f6>
			} else {
				cJSON_AddNumberToObject(fld, "login", 0);
 8008980:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8008a18 <ssi_handler+0x578>
 8008984:	4932      	ldr	r1, [pc, #200]	; (8008a50 <ssi_handler+0x5b0>)
 8008986:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008988:	f7fa fb7e 	bl	8003088 <cJSON_AddNumberToObject>
				cJSON_AddStringToObject(fld, "ssid", "");
 800898c:	4a24      	ldr	r2, [pc, #144]	; (8008a20 <ssi_handler+0x580>)
 800898e:	4931      	ldr	r1, [pc, #196]	; (8008a54 <ssi_handler+0x5b4>)
 8008990:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008992:	f7fa fb9d 	bl	80030d0 <cJSON_AddStringToObject>
			}

			str = cJSON_Print(root);
 8008996:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008998:	f7f9 fca4 	bl	80022e4 <cJSON_Print>
 800899c:	65f8      	str	r0, [r7, #92]	; 0x5c
			cJSON_Delete(root);
 800899e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80089a0:	f7f8 fbde 	bl	8001160 <cJSON_Delete>
			sprintf(pcInsert, "%s", str);
 80089a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089a6:	4928      	ldr	r1, [pc, #160]	; (8008a48 <ssi_handler+0x5a8>)
 80089a8:	6a38      	ldr	r0, [r7, #32]
 80089aa:	f01e fad9 	bl	8026f60 <siprintf>
			free(str);
 80089ae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80089b0:	f01d fde4 	bl	802657c <free>
			verifyNum = 0;
 80089b4:	4b25      	ldr	r3, [pc, #148]	; (8008a4c <ssi_handler+0x5ac>)
 80089b6:	2200      	movs	r2, #0
 80089b8:	701a      	strb	r2, [r3, #0]

			return strlen(pcInsert);
 80089ba:	6a38      	ldr	r0, [r7, #32]
 80089bc:	f7f7 fc12 	bl	80001e4 <strlen>
 80089c0:	4603      	mov	r3, r0
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	f000 bd62 	b.w	800948c <ssi_handler+0xfec>
			break;

		// ssi tag <!--#menu-->
		case 3:
			sprintf(pcInsert,"<a href=\"index.shtml?ssid=%s\">Home</a> | <a href=\"select.shtml?ssid=%s\">Select pin</a> | <a href=\"tabbuttom.shtml?ssid=%s\">Buttom pin</a> | <a href=\"tabrelay.shtml?ssid=%s\">Relay pin</a> | <a href=\"tabcron.shtml?ssid=%s\">Timers (crone)</a> | <a href=\"settings.shtml?ssid=%s\">Settings</a> | <a href=\"logout.shtml\">Logout</a> ", randomSSID,randomSSID,randomSSID,randomSSID,randomSSID,randomSSID);
 80089c8:	4b1e      	ldr	r3, [pc, #120]	; (8008a44 <ssi_handler+0x5a4>)
 80089ca:	9303      	str	r3, [sp, #12]
 80089cc:	4b1d      	ldr	r3, [pc, #116]	; (8008a44 <ssi_handler+0x5a4>)
 80089ce:	9302      	str	r3, [sp, #8]
 80089d0:	4b1c      	ldr	r3, [pc, #112]	; (8008a44 <ssi_handler+0x5a4>)
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	4b1b      	ldr	r3, [pc, #108]	; (8008a44 <ssi_handler+0x5a4>)
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	4b1a      	ldr	r3, [pc, #104]	; (8008a44 <ssi_handler+0x5a4>)
 80089da:	4a1a      	ldr	r2, [pc, #104]	; (8008a44 <ssi_handler+0x5a4>)
 80089dc:	491e      	ldr	r1, [pc, #120]	; (8008a58 <ssi_handler+0x5b8>)
 80089de:	6a38      	ldr	r0, [r7, #32]
 80089e0:	f01e fabe 	bl	8026f60 <siprintf>
			return strlen(pcInsert);
 80089e4:	6a38      	ldr	r0, [r7, #32]
 80089e6:	f7f7 fbfd 	bl	80001e4 <strlen>
 80089ea:	4603      	mov	r3, r0
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	f000 bd4d 	b.w	800948c <ssi_handler+0xfec>
			break;

		// ssi tag <!--#lang-->
		case 4:
			sprintf(pcInsert,"/js/%slang.js", SetSettings.lang);
 80089f2:	4a1a      	ldr	r2, [pc, #104]	; (8008a5c <ssi_handler+0x5bc>)
 80089f4:	491a      	ldr	r1, [pc, #104]	; (8008a60 <ssi_handler+0x5c0>)
 80089f6:	6a38      	ldr	r0, [r7, #32]
 80089f8:	f01e fab2 	bl	8026f60 <siprintf>
			return strlen(pcInsert);
 80089fc:	6a38      	ldr	r0, [r7, #32]
 80089fe:	f7f7 fbf1 	bl	80001e4 <strlen>
 8008a02:	4603      	mov	r3, r0
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	f000 bd41 	b.w	800948c <ssi_handler+0xfec>
 8008a0a:	bf00      	nop
 8008a0c:	f3af 8000 	nop.w
 8008a10:	00000000 	.word	0x00000000
 8008a14:	3ff00000 	.word	0x3ff00000
	...
 8008a20:	0802c334 	.word	0x0802c334
 8008a24:	20001345 	.word	0x20001345
 8008a28:	20001340 	.word	0x20001340
 8008a2c:	20005c9c 	.word	0x20005c9c
 8008a30:	080300b0 	.word	0x080300b0
 8008a34:	0802c338 	.word	0x0802c338
 8008a38:	20001348 	.word	0x20001348
 8008a3c:	20001347 	.word	0x20001347
 8008a40:	0802c32c 	.word	0x0802c32c
 8008a44:	2000134c 	.word	0x2000134c
 8008a48:	0802c3b4 	.word	0x0802c3b4
 8008a4c:	20001344 	.word	0x20001344
 8008a50:	0802c3b8 	.word	0x0802c3b8
 8008a54:	0802c234 	.word	0x0802c234
 8008a58:	0802c3c0 	.word	0x0802c3c0
 8008a5c:	20005bb4 	.word	0x20005bb4
 8008a60:	0802c508 	.word	0x0802c508
			break;

		// ssi tag <!--#formjson-->
		case 5:
			if(tab != 0){
 8008a64:	4bc2      	ldr	r3, [pc, #776]	; (8008d70 <ssi_handler+0x8d0>)
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 84a1 	beq.w	80093b0 <ssi_handler+0xf10>
				//root = cJSON_CreateArray();
				//root = cJSON_CreateObject();
				//cJSON_AddItemToArray(root, fld = cJSON_CreateObject());

				if(tab == 1){
 8008a6e:	4bc0      	ldr	r3, [pc, #768]	; (8008d70 <ssi_handler+0x8d0>)
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	f040 80f3 	bne.w	8008c5e <ssi_handler+0x7be>
					root = cJSON_CreateObject();
 8008a78:	f7fa fbd0 	bl	800321c <cJSON_CreateObject>
 8008a7c:	6578      	str	r0, [r7, #84]	; 0x54
					cJSON_AddNumberToObject(root, "topin", PinsConf[id].topin);
 8008a7e:	4bbd      	ldr	r3, [pc, #756]	; (8008d74 <ssi_handler+0x8d4>)
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	4619      	mov	r1, r3
 8008a84:	4abc      	ldr	r2, [pc, #752]	; (8008d78 <ssi_handler+0x8d8>)
 8008a86:	460b      	mov	r3, r1
 8008a88:	00db      	lsls	r3, r3, #3
 8008a8a:	440b      	add	r3, r1
 8008a8c:	011b      	lsls	r3, r3, #4
 8008a8e:	4413      	add	r3, r2
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7f7 fd56 	bl	8000544 <__aeabi_i2d>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	ec43 2b10 	vmov	d0, r2, r3
 8008aa0:	49b6      	ldr	r1, [pc, #728]	; (8008d7c <ssi_handler+0x8dc>)
 8008aa2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008aa4:	f7fa faf0 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "id", id + 1); // id numbering from 1
 8008aa8:	4bb2      	ldr	r3, [pc, #712]	; (8008d74 <ssi_handler+0x8d4>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	3301      	adds	r3, #1
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7f7 fd48 	bl	8000544 <__aeabi_i2d>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	ec43 2b10 	vmov	d0, r2, r3
 8008abc:	49b0      	ldr	r1, [pc, #704]	; (8008d80 <ssi_handler+0x8e0>)
 8008abe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008ac0:	f7fa fae2 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddStringToObject(root, "pins", PinsInfo[id].pins);
 8008ac4:	4bab      	ldr	r3, [pc, #684]	; (8008d74 <ssi_handler+0x8d4>)
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	4613      	mov	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	4413      	add	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4aac      	ldr	r2, [pc, #688]	; (8008d84 <ssi_handler+0x8e4>)
 8008ad4:	4413      	add	r3, r2
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	49ab      	ldr	r1, [pc, #684]	; (8008d88 <ssi_handler+0x8e8>)
 8008ada:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008adc:	f7fa faf8 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddStringToObject(root, "ptype", PinsConf[id].ptype);
 8008ae0:	4ba4      	ldr	r3, [pc, #656]	; (8008d74 <ssi_handler+0x8d4>)
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	00db      	lsls	r3, r3, #3
 8008aea:	4413      	add	r3, r2
 8008aec:	011b      	lsls	r3, r3, #4
 8008aee:	3318      	adds	r3, #24
 8008af0:	4aa1      	ldr	r2, [pc, #644]	; (8008d78 <ssi_handler+0x8d8>)
 8008af2:	4413      	add	r3, r2
 8008af4:	461a      	mov	r2, r3
 8008af6:	49a5      	ldr	r1, [pc, #660]	; (8008d8c <ssi_handler+0x8ec>)
 8008af8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008afa:	f7fa fae9 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddNumberToObject(root, "binter", PinsConf[id].binter);
 8008afe:	4b9d      	ldr	r3, [pc, #628]	; (8008d74 <ssi_handler+0x8d4>)
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	4619      	mov	r1, r3
 8008b04:	4a9c      	ldr	r2, [pc, #624]	; (8008d78 <ssi_handler+0x8d8>)
 8008b06:	460b      	mov	r3, r1
 8008b08:	00db      	lsls	r3, r3, #3
 8008b0a:	440b      	add	r3, r1
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	4413      	add	r3, r2
 8008b10:	3328      	adds	r3, #40	; 0x28
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7f7 fd15 	bl	8000544 <__aeabi_i2d>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	ec43 2b10 	vmov	d0, r2, r3
 8008b22:	499b      	ldr	r1, [pc, #620]	; (8008d90 <ssi_handler+0x8f0>)
 8008b24:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008b26:	f7fa faaf 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "hinter", PinsConf[id].hinter);
 8008b2a:	4b92      	ldr	r3, [pc, #584]	; (8008d74 <ssi_handler+0x8d4>)
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	4619      	mov	r1, r3
 8008b30:	4a91      	ldr	r2, [pc, #580]	; (8008d78 <ssi_handler+0x8d8>)
 8008b32:	460b      	mov	r3, r1
 8008b34:	00db      	lsls	r3, r3, #3
 8008b36:	440b      	add	r3, r1
 8008b38:	011b      	lsls	r3, r3, #4
 8008b3a:	4413      	add	r3, r2
 8008b3c:	332c      	adds	r3, #44	; 0x2c
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7f7 fcff 	bl	8000544 <__aeabi_i2d>
 8008b46:	4602      	mov	r2, r0
 8008b48:	460b      	mov	r3, r1
 8008b4a:	ec43 2b10 	vmov	d0, r2, r3
 8008b4e:	4991      	ldr	r1, [pc, #580]	; (8008d94 <ssi_handler+0x8f4>)
 8008b50:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008b52:	f7fa fa99 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "repeat", PinsConf[id].repeat);
 8008b56:	4b87      	ldr	r3, [pc, #540]	; (8008d74 <ssi_handler+0x8d4>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	4a86      	ldr	r2, [pc, #536]	; (8008d78 <ssi_handler+0x8d8>)
 8008b5e:	460b      	mov	r3, r1
 8008b60:	00db      	lsls	r3, r3, #3
 8008b62:	440b      	add	r3, r1
 8008b64:	011b      	lsls	r3, r3, #4
 8008b66:	4413      	add	r3, r2
 8008b68:	3330      	adds	r3, #48	; 0x30
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7f7 fce9 	bl	8000544 <__aeabi_i2d>
 8008b72:	4602      	mov	r2, r0
 8008b74:	460b      	mov	r3, r1
 8008b76:	ec43 2b10 	vmov	d0, r2, r3
 8008b7a:	4987      	ldr	r1, [pc, #540]	; (8008d98 <ssi_handler+0x8f8>)
 8008b7c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008b7e:	f7fa fa83 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "rinter", PinsConf[id].rinter);
 8008b82:	4b7c      	ldr	r3, [pc, #496]	; (8008d74 <ssi_handler+0x8d4>)
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	4619      	mov	r1, r3
 8008b88:	4a7b      	ldr	r2, [pc, #492]	; (8008d78 <ssi_handler+0x8d8>)
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	00db      	lsls	r3, r3, #3
 8008b8e:	440b      	add	r3, r1
 8008b90:	011b      	lsls	r3, r3, #4
 8008b92:	4413      	add	r3, r2
 8008b94:	3334      	adds	r3, #52	; 0x34
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7f7 fcd3 	bl	8000544 <__aeabi_i2d>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	ec43 2b10 	vmov	d0, r2, r3
 8008ba6:	497d      	ldr	r1, [pc, #500]	; (8008d9c <ssi_handler+0x8fc>)
 8008ba8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008baa:	f7fa fa6d 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "dcinter", PinsConf[id].dcinter);
 8008bae:	4b71      	ldr	r3, [pc, #452]	; (8008d74 <ssi_handler+0x8d4>)
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	4a70      	ldr	r2, [pc, #448]	; (8008d78 <ssi_handler+0x8d8>)
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	00db      	lsls	r3, r3, #3
 8008bba:	440b      	add	r3, r1
 8008bbc:	011b      	lsls	r3, r3, #4
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3338      	adds	r3, #56	; 0x38
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7f7 fcbd 	bl	8000544 <__aeabi_i2d>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	ec43 2b10 	vmov	d0, r2, r3
 8008bd2:	4973      	ldr	r1, [pc, #460]	; (8008da0 <ssi_handler+0x900>)
 8008bd4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008bd6:	f7fa fa57 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "pclick", PinsConf[id].pclick);
 8008bda:	4b66      	ldr	r3, [pc, #408]	; (8008d74 <ssi_handler+0x8d4>)
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	4619      	mov	r1, r3
 8008be0:	4a65      	ldr	r2, [pc, #404]	; (8008d78 <ssi_handler+0x8d8>)
 8008be2:	460b      	mov	r3, r1
 8008be4:	00db      	lsls	r3, r3, #3
 8008be6:	440b      	add	r3, r1
 8008be8:	011b      	lsls	r3, r3, #4
 8008bea:	4413      	add	r3, r2
 8008bec:	333c      	adds	r3, #60	; 0x3c
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7f7 fca7 	bl	8000544 <__aeabi_i2d>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	ec43 2b10 	vmov	d0, r2, r3
 8008bfe:	4969      	ldr	r1, [pc, #420]	; (8008da4 <ssi_handler+0x904>)
 8008c00:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008c02:	f7fa fa41 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddStringToObject(root, "info", PinsConf[id].info);
 8008c06:	4b5b      	ldr	r3, [pc, #364]	; (8008d74 <ssi_handler+0x8d4>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	00db      	lsls	r3, r3, #3
 8008c10:	4413      	add	r3, r2
 8008c12:	011b      	lsls	r3, r3, #4
 8008c14:	3340      	adds	r3, #64	; 0x40
 8008c16:	4a58      	ldr	r2, [pc, #352]	; (8008d78 <ssi_handler+0x8d8>)
 8008c18:	4413      	add	r3, r2
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	4962      	ldr	r1, [pc, #392]	; (8008da8 <ssi_handler+0x908>)
 8008c1e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008c20:	f7fa fa56 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddNumberToObject(root, "onoff", PinsConf[id].onoff);
 8008c24:	4b53      	ldr	r3, [pc, #332]	; (8008d74 <ssi_handler+0x8d4>)
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	4a53      	ldr	r2, [pc, #332]	; (8008d78 <ssi_handler+0x8d8>)
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	00db      	lsls	r3, r3, #3
 8008c30:	440b      	add	r3, r1
 8008c32:	011b      	lsls	r3, r3, #4
 8008c34:	4413      	add	r3, r2
 8008c36:	3360      	adds	r3, #96	; 0x60
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7f7 fc82 	bl	8000544 <__aeabi_i2d>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	ec43 2b10 	vmov	d0, r2, r3
 8008c48:	4958      	ldr	r1, [pc, #352]	; (8008dac <ssi_handler+0x90c>)
 8008c4a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008c4c:	f7fa fa1c 	bl	8003088 <cJSON_AddNumberToObject>
					str = cJSON_PrintUnformatted(root);
 8008c50:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008c52:	f7f9 fb57 	bl	8002304 <cJSON_PrintUnformatted>
 8008c56:	65f8      	str	r0, [r7, #92]	; 0x5c
					cJSON_Delete(root);
 8008c58:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008c5a:	f7f8 fa81 	bl	8001160 <cJSON_Delete>
				}

				if(tab == 2){
 8008c5e:	4b44      	ldr	r3, [pc, #272]	; (8008d70 <ssi_handler+0x8d0>)
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	f040 8104 	bne.w	8008e70 <ssi_handler+0x9d0>
					root = cJSON_CreateObject();
 8008c68:	f7fa fad8 	bl	800321c <cJSON_CreateObject>
 8008c6c:	6578      	str	r0, [r7, #84]	; 0x54
					cJSON_AddNumberToObject(root, "topin", PinsConf[id].topin);
 8008c6e:	4b41      	ldr	r3, [pc, #260]	; (8008d74 <ssi_handler+0x8d4>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	4619      	mov	r1, r3
 8008c74:	4a40      	ldr	r2, [pc, #256]	; (8008d78 <ssi_handler+0x8d8>)
 8008c76:	460b      	mov	r3, r1
 8008c78:	00db      	lsls	r3, r3, #3
 8008c7a:	440b      	add	r3, r1
 8008c7c:	011b      	lsls	r3, r3, #4
 8008c7e:	4413      	add	r3, r2
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7f7 fc5e 	bl	8000544 <__aeabi_i2d>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	ec43 2b10 	vmov	d0, r2, r3
 8008c90:	493a      	ldr	r1, [pc, #232]	; (8008d7c <ssi_handler+0x8dc>)
 8008c92:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008c94:	f7fa f9f8 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "id", id + 1);  // id numbering from 1
 8008c98:	4b36      	ldr	r3, [pc, #216]	; (8008d74 <ssi_handler+0x8d4>)
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7f7 fc50 	bl	8000544 <__aeabi_i2d>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	ec43 2b10 	vmov	d0, r2, r3
 8008cac:	4934      	ldr	r1, [pc, #208]	; (8008d80 <ssi_handler+0x8e0>)
 8008cae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008cb0:	f7fa f9ea 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddStringToObject(root, "pins", PinsInfo[id].pins);
 8008cb4:	4b2f      	ldr	r3, [pc, #188]	; (8008d74 <ssi_handler+0x8d4>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	4613      	mov	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	4413      	add	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4a30      	ldr	r2, [pc, #192]	; (8008d84 <ssi_handler+0x8e4>)
 8008cc4:	4413      	add	r3, r2
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	492f      	ldr	r1, [pc, #188]	; (8008d88 <ssi_handler+0x8e8>)
 8008cca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008ccc:	f7fa fa00 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddStringToObject(root, "ptype", PinsConf[id].ptype);
 8008cd0:	4b28      	ldr	r3, [pc, #160]	; (8008d74 <ssi_handler+0x8d4>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	00db      	lsls	r3, r3, #3
 8008cda:	4413      	add	r3, r2
 8008cdc:	011b      	lsls	r3, r3, #4
 8008cde:	3318      	adds	r3, #24
 8008ce0:	4a25      	ldr	r2, [pc, #148]	; (8008d78 <ssi_handler+0x8d8>)
 8008ce2:	4413      	add	r3, r2
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	4929      	ldr	r1, [pc, #164]	; (8008d8c <ssi_handler+0x8ec>)
 8008ce8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008cea:	f7fa f9f1 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddNumberToObject(root, "pwm", PinsConf[id].pwm);
 8008cee:	4b21      	ldr	r3, [pc, #132]	; (8008d74 <ssi_handler+0x8d4>)
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	4a20      	ldr	r2, [pc, #128]	; (8008d78 <ssi_handler+0x8d8>)
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	00db      	lsls	r3, r3, #3
 8008cfa:	440b      	add	r3, r1
 8008cfc:	011b      	lsls	r3, r3, #4
 8008cfe:	4413      	add	r3, r2
 8008d00:	3304      	adds	r3, #4
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7f7 fc1d 	bl	8000544 <__aeabi_i2d>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	ec43 2b10 	vmov	d0, r2, r3
 8008d12:	4927      	ldr	r1, [pc, #156]	; (8008db0 <ssi_handler+0x910>)
 8008d14:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008d16:	f7fa f9b7 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "on", PinsConf[id].on);
 8008d1a:	4b16      	ldr	r3, [pc, #88]	; (8008d74 <ssi_handler+0x8d4>)
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4a15      	ldr	r2, [pc, #84]	; (8008d78 <ssi_handler+0x8d8>)
 8008d22:	460b      	mov	r3, r1
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	440b      	add	r3, r1
 8008d28:	011b      	lsls	r3, r3, #4
 8008d2a:	4413      	add	r3, r2
 8008d2c:	3308      	adds	r3, #8
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7f7 fc07 	bl	8000544 <__aeabi_i2d>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	ec43 2b10 	vmov	d0, r2, r3
 8008d3e:	491d      	ldr	r1, [pc, #116]	; (8008db4 <ssi_handler+0x914>)
 8008d40:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008d42:	f7fa f9a1 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "istate", PinsConf[id].istate);
 8008d46:	4b0b      	ldr	r3, [pc, #44]	; (8008d74 <ssi_handler+0x8d4>)
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	4a0a      	ldr	r2, [pc, #40]	; (8008d78 <ssi_handler+0x8d8>)
 8008d4e:	460b      	mov	r3, r1
 8008d50:	00db      	lsls	r3, r3, #3
 8008d52:	440b      	add	r3, r1
 8008d54:	011b      	lsls	r3, r3, #4
 8008d56:	4413      	add	r3, r2
 8008d58:	330c      	adds	r3, #12
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7f7 fbf1 	bl	8000544 <__aeabi_i2d>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	ec43 2b10 	vmov	d0, r2, r3
 8008d6a:	4913      	ldr	r1, [pc, #76]	; (8008db8 <ssi_handler+0x918>)
 8008d6c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008d6e:	e025      	b.n	8008dbc <ssi_handler+0x91c>
 8008d70:	20001345 	.word	0x20001345
 8008d74:	20001346 	.word	0x20001346
 8008d78:	20005c9c 	.word	0x20005c9c
 8008d7c:	0802c518 	.word	0x0802c518
 8008d80:	0802c520 	.word	0x0802c520
 8008d84:	080300b0 	.word	0x080300b0
 8008d88:	0802c524 	.word	0x0802c524
 8008d8c:	0802c52c 	.word	0x0802c52c
 8008d90:	0802c534 	.word	0x0802c534
 8008d94:	0802c53c 	.word	0x0802c53c
 8008d98:	0802c544 	.word	0x0802c544
 8008d9c:	0802c54c 	.word	0x0802c54c
 8008da0:	0802c554 	.word	0x0802c554
 8008da4:	0802c55c 	.word	0x0802c55c
 8008da8:	0802c564 	.word	0x0802c564
 8008dac:	0802c56c 	.word	0x0802c56c
 8008db0:	0802c574 	.word	0x0802c574
 8008db4:	0802c578 	.word	0x0802c578
 8008db8:	0802c57c 	.word	0x0802c57c
 8008dbc:	f7fa f964 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "dvalue", PinsConf[id].dvalue);
 8008dc0:	4b3f      	ldr	r3, [pc, #252]	; (8008ec0 <ssi_handler+0xa20>)
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4a3f      	ldr	r2, [pc, #252]	; (8008ec4 <ssi_handler+0xa24>)
 8008dc8:	460b      	mov	r3, r1
 8008dca:	00db      	lsls	r3, r3, #3
 8008dcc:	440b      	add	r3, r1
 8008dce:	011b      	lsls	r3, r3, #4
 8008dd0:	4413      	add	r3, r2
 8008dd2:	3310      	adds	r3, #16
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7f7 fbb4 	bl	8000544 <__aeabi_i2d>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	460b      	mov	r3, r1
 8008de0:	ec43 2b10 	vmov	d0, r2, r3
 8008de4:	4938      	ldr	r1, [pc, #224]	; (8008ec8 <ssi_handler+0xa28>)
 8008de6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008de8:	f7fa f94e 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "ponr", PinsConf[id].ponr);
 8008dec:	4b34      	ldr	r3, [pc, #208]	; (8008ec0 <ssi_handler+0xa20>)
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	4619      	mov	r1, r3
 8008df2:	4a34      	ldr	r2, [pc, #208]	; (8008ec4 <ssi_handler+0xa24>)
 8008df4:	460b      	mov	r3, r1
 8008df6:	00db      	lsls	r3, r3, #3
 8008df8:	440b      	add	r3, r1
 8008dfa:	011b      	lsls	r3, r3, #4
 8008dfc:	4413      	add	r3, r2
 8008dfe:	3314      	adds	r3, #20
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7f7 fb9e 	bl	8000544 <__aeabi_i2d>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	ec43 2b10 	vmov	d0, r2, r3
 8008e10:	492e      	ldr	r1, [pc, #184]	; (8008ecc <ssi_handler+0xa2c>)
 8008e12:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008e14:	f7fa f938 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddStringToObject(root, "info", PinsConf[id].info);
 8008e18:	4b29      	ldr	r3, [pc, #164]	; (8008ec0 <ssi_handler+0xa20>)
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	4613      	mov	r3, r2
 8008e20:	00db      	lsls	r3, r3, #3
 8008e22:	4413      	add	r3, r2
 8008e24:	011b      	lsls	r3, r3, #4
 8008e26:	3340      	adds	r3, #64	; 0x40
 8008e28:	4a26      	ldr	r2, [pc, #152]	; (8008ec4 <ssi_handler+0xa24>)
 8008e2a:	4413      	add	r3, r2
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4928      	ldr	r1, [pc, #160]	; (8008ed0 <ssi_handler+0xa30>)
 8008e30:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008e32:	f7fa f94d 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddNumberToObject(root, "onoff", PinsConf[id].onoff);
 8008e36:	4b22      	ldr	r3, [pc, #136]	; (8008ec0 <ssi_handler+0xa20>)
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	4a21      	ldr	r2, [pc, #132]	; (8008ec4 <ssi_handler+0xa24>)
 8008e3e:	460b      	mov	r3, r1
 8008e40:	00db      	lsls	r3, r3, #3
 8008e42:	440b      	add	r3, r1
 8008e44:	011b      	lsls	r3, r3, #4
 8008e46:	4413      	add	r3, r2
 8008e48:	3360      	adds	r3, #96	; 0x60
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7f7 fb79 	bl	8000544 <__aeabi_i2d>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	ec43 2b10 	vmov	d0, r2, r3
 8008e5a:	491e      	ldr	r1, [pc, #120]	; (8008ed4 <ssi_handler+0xa34>)
 8008e5c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008e5e:	f7fa f913 	bl	8003088 <cJSON_AddNumberToObject>
					str = cJSON_PrintUnformatted(root);
 8008e62:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008e64:	f7f9 fa4e 	bl	8002304 <cJSON_PrintUnformatted>
 8008e68:	65f8      	str	r0, [r7, #92]	; 0x5c
					cJSON_Delete(root);
 8008e6a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008e6c:	f7f8 f978 	bl	8001160 <cJSON_Delete>
				}

				if(tab == 3){
 8008e70:	4b19      	ldr	r3, [pc, #100]	; (8008ed8 <ssi_handler+0xa38>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b03      	cmp	r3, #3
 8008e76:	d170      	bne.n	8008f5a <ssi_handler+0xaba>
					root = cJSON_CreateObject();
 8008e78:	f7fa f9d0 	bl	800321c <cJSON_CreateObject>
 8008e7c:	6578      	str	r0, [r7, #84]	; 0x54

					cJSON_AddNumberToObject(root, "id",id + 1);
 8008e7e:	4b10      	ldr	r3, [pc, #64]	; (8008ec0 <ssi_handler+0xa20>)
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	3301      	adds	r3, #1
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7f7 fb5d 	bl	8000544 <__aeabi_i2d>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	ec43 2b10 	vmov	d0, r2, r3
 8008e92:	4912      	ldr	r1, [pc, #72]	; (8008edc <ssi_handler+0xa3c>)
 8008e94:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008e96:	f7fa f8f7 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddStringToObject(root, "pins", PinsInfo[id].pins);
 8008e9a:	4b09      	ldr	r3, [pc, #36]	; (8008ec0 <ssi_handler+0xa20>)
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4a0d      	ldr	r2, [pc, #52]	; (8008ee0 <ssi_handler+0xa40>)
 8008eaa:	4413      	add	r3, r2
 8008eac:	461a      	mov	r2, r3
 8008eae:	490d      	ldr	r1, [pc, #52]	; (8008ee4 <ssi_handler+0xa44>)
 8008eb0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008eb2:	f7fa f90d 	bl	80030d0 <cJSON_AddStringToObject>
					fld = cJSON_CreateObject();
 8008eb6:	f7fa f9b1 	bl	800321c <cJSON_CreateObject>
 8008eba:	6538      	str	r0, [r7, #80]	; 0x50

					while (variable <=  NUMPIN - 1) {
 8008ebc:	e03a      	b.n	8008f34 <ssi_handler+0xa94>
 8008ebe:	bf00      	nop
 8008ec0:	20001346 	.word	0x20001346
 8008ec4:	20005c9c 	.word	0x20005c9c
 8008ec8:	0802c584 	.word	0x0802c584
 8008ecc:	0802c58c 	.word	0x0802c58c
 8008ed0:	0802c564 	.word	0x0802c564
 8008ed4:	0802c56c 	.word	0x0802c56c
 8008ed8:	20001345 	.word	0x20001345
 8008edc:	0802c520 	.word	0x0802c520
 8008ee0:	080300b0 	.word	0x080300b0
 8008ee4:	0802c524 	.word	0x0802c524
						if (PinsConf[variable].topin == 2) {
 8008ee8:	4bc3      	ldr	r3, [pc, #780]	; (80091f8 <ssi_handler+0xd58>)
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	49c3      	ldr	r1, [pc, #780]	; (80091fc <ssi_handler+0xd5c>)
 8008eee:	4613      	mov	r3, r2
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	4413      	add	r3, r2
 8008ef4:	011b      	lsls	r3, r3, #4
 8008ef6:	440b      	add	r3, r1
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d115      	bne.n	8008f2a <ssi_handler+0xa8a>
							cJSON_AddNumberToObject(fld, PinsInfo[variable].pins, variable + 1);
 8008efe:	4bbe      	ldr	r3, [pc, #760]	; (80091f8 <ssi_handler+0xd58>)
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	4613      	mov	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4abd      	ldr	r2, [pc, #756]	; (8009200 <ssi_handler+0xd60>)
 8008f0c:	189c      	adds	r4, r3, r2
 8008f0e:	4bba      	ldr	r3, [pc, #744]	; (80091f8 <ssi_handler+0xd58>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	3301      	adds	r3, #1
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7f7 fb15 	bl	8000544 <__aeabi_i2d>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	ec43 2b10 	vmov	d0, r2, r3
 8008f22:	4621      	mov	r1, r4
 8008f24:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008f26:	f7fa f8af 	bl	8003088 <cJSON_AddNumberToObject>
						}
						variable++;
 8008f2a:	4bb3      	ldr	r3, [pc, #716]	; (80091f8 <ssi_handler+0xd58>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	4ab1      	ldr	r2, [pc, #708]	; (80091f8 <ssi_handler+0xd58>)
 8008f32:	6013      	str	r3, [r2, #0]
					while (variable <=  NUMPIN - 1) {
 8008f34:	4bb0      	ldr	r3, [pc, #704]	; (80091f8 <ssi_handler+0xd58>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2b04      	cmp	r3, #4
 8008f3a:	ddd5      	ble.n	8008ee8 <ssi_handler+0xa48>
					}
					variable = 0;
 8008f3c:	4bae      	ldr	r3, [pc, #696]	; (80091f8 <ssi_handler+0xd58>)
 8008f3e:	2200      	movs	r2, #0
 8008f40:	601a      	str	r2, [r3, #0]

					cJSON_AddItemToObject(root, "rpins", fld);
 8008f42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f44:	49af      	ldr	r1, [pc, #700]	; (8009204 <ssi_handler+0xd64>)
 8008f46:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008f48:	f7fa f888 	bl	800305c <cJSON_AddItemToObject>

					str = cJSON_PrintUnformatted(root);
 8008f4c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008f4e:	f7f9 f9d9 	bl	8002304 <cJSON_PrintUnformatted>
 8008f52:	65f8      	str	r0, [r7, #92]	; 0x5c
					cJSON_Delete(root);
 8008f54:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008f56:	f7f8 f903 	bl	8001160 <cJSON_Delete>
				}
				if(tab == 4){
 8008f5a:	4bab      	ldr	r3, [pc, #684]	; (8009208 <ssi_handler+0xd68>)
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	2b04      	cmp	r3, #4
 8008f60:	f040 81dd 	bne.w	800931e <ssi_handler+0xe7e>
					root = cJSON_CreateObject();
 8008f64:	f7fa f95a 	bl	800321c <cJSON_CreateObject>
 8008f68:	6578      	str	r0, [r7, #84]	; 0x54
					cJSON_AddStringToObject(root, "lang", SetSettings.lang);
 8008f6a:	4aa8      	ldr	r2, [pc, #672]	; (800920c <ssi_handler+0xd6c>)
 8008f6c:	49a8      	ldr	r1, [pc, #672]	; (8009210 <ssi_handler+0xd70>)
 8008f6e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008f70:	f7fa f8ae 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddNumberToObject(root, "lon_de", SetSettings.lon_de);
 8008f74:	4ba7      	ldr	r3, [pc, #668]	; (8009214 <ssi_handler+0xd74>)
 8008f76:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8008f7a:	eeb0 0a47 	vmov.f32	s0, s14
 8008f7e:	eef0 0a67 	vmov.f32	s1, s15
 8008f82:	49a5      	ldr	r1, [pc, #660]	; (8009218 <ssi_handler+0xd78>)
 8008f84:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008f86:	f7fa f87f 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "lat_de", SetSettings.lat_de);
 8008f8a:	4ba2      	ldr	r3, [pc, #648]	; (8009214 <ssi_handler+0xd74>)
 8008f8c:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8008f90:	eeb0 0a47 	vmov.f32	s0, s14
 8008f94:	eef0 0a67 	vmov.f32	s1, s15
 8008f98:	49a0      	ldr	r1, [pc, #640]	; (800921c <ssi_handler+0xd7c>)
 8008f9a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008f9c:	f7fa f874 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "check_mqtt", SetSettings.check_mqtt);
 8008fa0:	4b9c      	ldr	r3, [pc, #624]	; (8009214 <ssi_handler+0xd74>)
 8008fa2:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7f7 facc 	bl	8000544 <__aeabi_i2d>
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	ec43 2b10 	vmov	d0, r2, r3
 8008fb4:	499a      	ldr	r1, [pc, #616]	; (8009220 <ssi_handler+0xd80>)
 8008fb6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008fb8:	f7fa f866 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "mqtt_prt", SetSettings.mqtt_prt);
 8008fbc:	4b95      	ldr	r3, [pc, #596]	; (8009214 <ssi_handler+0xd74>)
 8008fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7f7 fabf 	bl	8000544 <__aeabi_i2d>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	ec43 2b10 	vmov	d0, r2, r3
 8008fce:	4995      	ldr	r1, [pc, #596]	; (8009224 <ssi_handler+0xd84>)
 8008fd0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008fd2:	f7fa f859 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddStringToObject(root, "mqtt_clt", SetSettings.mqtt_clt);
 8008fd6:	4a94      	ldr	r2, [pc, #592]	; (8009228 <ssi_handler+0xd88>)
 8008fd8:	4994      	ldr	r1, [pc, #592]	; (800922c <ssi_handler+0xd8c>)
 8008fda:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008fdc:	f7fa f878 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddStringToObject(root, "mqtt_usr", SetSettings.mqtt_usr);
 8008fe0:	4a93      	ldr	r2, [pc, #588]	; (8009230 <ssi_handler+0xd90>)
 8008fe2:	4994      	ldr	r1, [pc, #592]	; (8009234 <ssi_handler+0xd94>)
 8008fe4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008fe6:	f7fa f873 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddStringToObject(root, "mqtt_pswd", SetSettings.mqtt_pswd);
 8008fea:	4a93      	ldr	r2, [pc, #588]	; (8009238 <ssi_handler+0xd98>)
 8008fec:	4993      	ldr	r1, [pc, #588]	; (800923c <ssi_handler+0xd9c>)
 8008fee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008ff0:	f7fa f86e 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddStringToObject(root, "mqtt_tpc", SetSettings.mqtt_tpc);
 8008ff4:	4a92      	ldr	r2, [pc, #584]	; (8009240 <ssi_handler+0xda0>)
 8008ff6:	4993      	ldr	r1, [pc, #588]	; (8009244 <ssi_handler+0xda4>)
 8008ff8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008ffa:	f7fa f869 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddStringToObject(root, "mqtt_ftpc", SetSettings.mqtt_ftpc);
 8008ffe:	4a92      	ldr	r2, [pc, #584]	; (8009248 <ssi_handler+0xda8>)
 8009000:	4992      	ldr	r1, [pc, #584]	; (800924c <ssi_handler+0xdac>)
 8009002:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009004:	f7fa f864 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddNumberToObject(root, "mqtt_hst0", SetSettings.mqtt_hst0);
 8009008:	4b82      	ldr	r3, [pc, #520]	; (8009214 <ssi_handler+0xd74>)
 800900a:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 800900e:	4618      	mov	r0, r3
 8009010:	f7f7 fa98 	bl	8000544 <__aeabi_i2d>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	ec43 2b10 	vmov	d0, r2, r3
 800901c:	498c      	ldr	r1, [pc, #560]	; (8009250 <ssi_handler+0xdb0>)
 800901e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009020:	f7fa f832 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "mqtt_hst1", SetSettings.mqtt_hst1);
 8009024:	4b7b      	ldr	r3, [pc, #492]	; (8009214 <ssi_handler+0xd74>)
 8009026:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 800902a:	4618      	mov	r0, r3
 800902c:	f7f7 fa8a 	bl	8000544 <__aeabi_i2d>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	ec43 2b10 	vmov	d0, r2, r3
 8009038:	4986      	ldr	r1, [pc, #536]	; (8009254 <ssi_handler+0xdb4>)
 800903a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800903c:	f7fa f824 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "mqtt_hst2", SetSettings.mqtt_hst2);
 8009040:	4b74      	ldr	r3, [pc, #464]	; (8009214 <ssi_handler+0xd74>)
 8009042:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	; 0xa6
 8009046:	4618      	mov	r0, r3
 8009048:	f7f7 fa7c 	bl	8000544 <__aeabi_i2d>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	ec43 2b10 	vmov	d0, r2, r3
 8009054:	4980      	ldr	r1, [pc, #512]	; (8009258 <ssi_handler+0xdb8>)
 8009056:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009058:	f7fa f816 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "mqtt_hst3", SetSettings.mqtt_hst3);
 800905c:	4b6d      	ldr	r3, [pc, #436]	; (8009214 <ssi_handler+0xd74>)
 800905e:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	; 0xa8
 8009062:	4618      	mov	r0, r3
 8009064:	f7f7 fa6e 	bl	8000544 <__aeabi_i2d>
 8009068:	4602      	mov	r2, r0
 800906a:	460b      	mov	r3, r1
 800906c:	ec43 2b10 	vmov	d0, r2, r3
 8009070:	497a      	ldr	r1, [pc, #488]	; (800925c <ssi_handler+0xdbc>)
 8009072:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009074:	f7fa f808 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "check_ip", SetSettings.check_ip);
 8009078:	4b66      	ldr	r3, [pc, #408]	; (8009214 <ssi_handler+0xd74>)
 800907a:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	; 0xaa
 800907e:	4618      	mov	r0, r3
 8009080:	f7f7 fa60 	bl	8000544 <__aeabi_i2d>
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	ec43 2b10 	vmov	d0, r2, r3
 800908c:	4974      	ldr	r1, [pc, #464]	; (8009260 <ssi_handler+0xdc0>)
 800908e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009090:	f7f9 fffa 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "ip_addr0", SetSettings.ip_addr0);
 8009094:	4b5f      	ldr	r3, [pc, #380]	; (8009214 <ssi_handler+0xd74>)
 8009096:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 800909a:	4618      	mov	r0, r3
 800909c:	f7f7 fa52 	bl	8000544 <__aeabi_i2d>
 80090a0:	4602      	mov	r2, r0
 80090a2:	460b      	mov	r3, r1
 80090a4:	ec43 2b10 	vmov	d0, r2, r3
 80090a8:	496e      	ldr	r1, [pc, #440]	; (8009264 <ssi_handler+0xdc4>)
 80090aa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80090ac:	f7f9 ffec 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "ip_addr1", SetSettings.ip_addr1);
 80090b0:	4b58      	ldr	r3, [pc, #352]	; (8009214 <ssi_handler+0xd74>)
 80090b2:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	; 0xae
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7f7 fa44 	bl	8000544 <__aeabi_i2d>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	ec43 2b10 	vmov	d0, r2, r3
 80090c4:	4968      	ldr	r1, [pc, #416]	; (8009268 <ssi_handler+0xdc8>)
 80090c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80090c8:	f7f9 ffde 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "ip_addr2", SetSettings.ip_addr2);
 80090cc:	4b51      	ldr	r3, [pc, #324]	; (8009214 <ssi_handler+0xd74>)
 80090ce:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7f7 fa36 	bl	8000544 <__aeabi_i2d>
 80090d8:	4602      	mov	r2, r0
 80090da:	460b      	mov	r3, r1
 80090dc:	ec43 2b10 	vmov	d0, r2, r3
 80090e0:	4962      	ldr	r1, [pc, #392]	; (800926c <ssi_handler+0xdcc>)
 80090e2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80090e4:	f7f9 ffd0 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "ip_addr3", SetSettings.ip_addr3);
 80090e8:	4b4a      	ldr	r3, [pc, #296]	; (8009214 <ssi_handler+0xd74>)
 80090ea:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7f7 fa28 	bl	8000544 <__aeabi_i2d>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	ec43 2b10 	vmov	d0, r2, r3
 80090fc:	495c      	ldr	r1, [pc, #368]	; (8009270 <ssi_handler+0xdd0>)
 80090fe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009100:	f7f9 ffc2 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "sb_mask0", SetSettings.sb_mask0);
 8009104:	4b43      	ldr	r3, [pc, #268]	; (8009214 <ssi_handler+0xd74>)
 8009106:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 800910a:	4618      	mov	r0, r3
 800910c:	f7f7 fa1a 	bl	8000544 <__aeabi_i2d>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	ec43 2b10 	vmov	d0, r2, r3
 8009118:	4956      	ldr	r1, [pc, #344]	; (8009274 <ssi_handler+0xdd4>)
 800911a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800911c:	f7f9 ffb4 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "sb_mask1", SetSettings.sb_mask1);
 8009120:	4b3c      	ldr	r3, [pc, #240]	; (8009214 <ssi_handler+0xd74>)
 8009122:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8009126:	4618      	mov	r0, r3
 8009128:	f7f7 fa0c 	bl	8000544 <__aeabi_i2d>
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	ec43 2b10 	vmov	d0, r2, r3
 8009134:	4950      	ldr	r1, [pc, #320]	; (8009278 <ssi_handler+0xdd8>)
 8009136:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009138:	f7f9 ffa6 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "sb_mask2", SetSettings.sb_mask2);
 800913c:	4b35      	ldr	r3, [pc, #212]	; (8009214 <ssi_handler+0xd74>)
 800913e:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8009142:	4618      	mov	r0, r3
 8009144:	f7f7 f9fe 	bl	8000544 <__aeabi_i2d>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	ec43 2b10 	vmov	d0, r2, r3
 8009150:	494a      	ldr	r1, [pc, #296]	; (800927c <ssi_handler+0xddc>)
 8009152:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009154:	f7f9 ff98 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "sb_mask3", SetSettings.sb_mask3);
 8009158:	4b2e      	ldr	r3, [pc, #184]	; (8009214 <ssi_handler+0xd74>)
 800915a:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800915e:	4618      	mov	r0, r3
 8009160:	f7f7 f9f0 	bl	8000544 <__aeabi_i2d>
 8009164:	4602      	mov	r2, r0
 8009166:	460b      	mov	r3, r1
 8009168:	ec43 2b10 	vmov	d0, r2, r3
 800916c:	4944      	ldr	r1, [pc, #272]	; (8009280 <ssi_handler+0xde0>)
 800916e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009170:	f7f9 ff8a 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "gateway0", SetSettings.gateway0);
 8009174:	4b27      	ldr	r3, [pc, #156]	; (8009214 <ssi_handler+0xd74>)
 8009176:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 800917a:	4618      	mov	r0, r3
 800917c:	f7f7 f9e2 	bl	8000544 <__aeabi_i2d>
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	ec43 2b10 	vmov	d0, r2, r3
 8009188:	493e      	ldr	r1, [pc, #248]	; (8009284 <ssi_handler+0xde4>)
 800918a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800918c:	f7f9 ff7c 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "gateway1", SetSettings.gateway1);
 8009190:	4b20      	ldr	r3, [pc, #128]	; (8009214 <ssi_handler+0xd74>)
 8009192:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8009196:	4618      	mov	r0, r3
 8009198:	f7f7 f9d4 	bl	8000544 <__aeabi_i2d>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	ec43 2b10 	vmov	d0, r2, r3
 80091a4:	4938      	ldr	r1, [pc, #224]	; (8009288 <ssi_handler+0xde8>)
 80091a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80091a8:	f7f9 ff6e 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "gateway2", SetSettings.gateway2);
 80091ac:	4b19      	ldr	r3, [pc, #100]	; (8009214 <ssi_handler+0xd74>)
 80091ae:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7f7 f9c6 	bl	8000544 <__aeabi_i2d>
 80091b8:	4602      	mov	r2, r0
 80091ba:	460b      	mov	r3, r1
 80091bc:	ec43 2b10 	vmov	d0, r2, r3
 80091c0:	4932      	ldr	r1, [pc, #200]	; (800928c <ssi_handler+0xdec>)
 80091c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80091c4:	f7f9 ff60 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddNumberToObject(root, "gateway3", SetSettings.gateway3);
 80091c8:	4b12      	ldr	r3, [pc, #72]	; (8009214 <ssi_handler+0xd74>)
 80091ca:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7f7 f9b8 	bl	8000544 <__aeabi_i2d>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	ec43 2b10 	vmov	d0, r2, r3
 80091dc:	492c      	ldr	r1, [pc, #176]	; (8009290 <ssi_handler+0xdf0>)
 80091de:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80091e0:	f7f9 ff52 	bl	8003088 <cJSON_AddNumberToObject>
					snprintf(macStr, sizeof(macStr), "%02X-%02X-%02X-%02X-%02X-%02X",
							SetSettings.macaddr0, SetSettings.macaddr1, SetSettings.macaddr2, SetSettings.macaddr3, SetSettings.macaddr4, SetSettings.macaddr5);
 80091e4:	4b0b      	ldr	r3, [pc, #44]	; (8009214 <ssi_handler+0xd74>)
 80091e6:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
					snprintf(macStr, sizeof(macStr), "%02X-%02X-%02X-%02X-%02X-%02X",
 80091ea:	461e      	mov	r6, r3
							SetSettings.macaddr0, SetSettings.macaddr1, SetSettings.macaddr2, SetSettings.macaddr3, SetSettings.macaddr4, SetSettings.macaddr5);
 80091ec:	4b09      	ldr	r3, [pc, #36]	; (8009214 <ssi_handler+0xd74>)
 80091ee:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
					snprintf(macStr, sizeof(macStr), "%02X-%02X-%02X-%02X-%02X-%02X",
 80091f2:	461a      	mov	r2, r3
 80091f4:	e04e      	b.n	8009294 <ssi_handler+0xdf4>
 80091f6:	bf00      	nop
 80091f8:	20001340 	.word	0x20001340
 80091fc:	20005c9c 	.word	0x20005c9c
 8009200:	080300b0 	.word	0x080300b0
 8009204:	0802c594 	.word	0x0802c594
 8009208:	20001345 	.word	0x20001345
 800920c:	20005bb4 	.word	0x20005bb4
 8009210:	0802c24c 	.word	0x0802c24c
 8009214:	20005b90 	.word	0x20005b90
 8009218:	0802c59c 	.word	0x0802c59c
 800921c:	0802c5a4 	.word	0x0802c5a4
 8009220:	0802c5ac 	.word	0x0802c5ac
 8009224:	0802c5b8 	.word	0x0802c5b8
 8009228:	20005bf0 	.word	0x20005bf0
 800922c:	0802c5c4 	.word	0x0802c5c4
 8009230:	20005bfa 	.word	0x20005bfa
 8009234:	0802c5d0 	.word	0x0802c5d0
 8009238:	20005c04 	.word	0x20005c04
 800923c:	0802c5dc 	.word	0x0802c5dc
 8009240:	20005c13 	.word	0x20005c13
 8009244:	0802c5e8 	.word	0x0802c5e8
 8009248:	20005c22 	.word	0x20005c22
 800924c:	0802c5f4 	.word	0x0802c5f4
 8009250:	0802c600 	.word	0x0802c600
 8009254:	0802c60c 	.word	0x0802c60c
 8009258:	0802c618 	.word	0x0802c618
 800925c:	0802c624 	.word	0x0802c624
 8009260:	0802c630 	.word	0x0802c630
 8009264:	0802c63c 	.word	0x0802c63c
 8009268:	0802c648 	.word	0x0802c648
 800926c:	0802c654 	.word	0x0802c654
 8009270:	0802c660 	.word	0x0802c660
 8009274:	0802c66c 	.word	0x0802c66c
 8009278:	0802c678 	.word	0x0802c678
 800927c:	0802c684 	.word	0x0802c684
 8009280:	0802c690 	.word	0x0802c690
 8009284:	0802c69c 	.word	0x0802c69c
 8009288:	0802c6a8 	.word	0x0802c6a8
 800928c:	0802c6b4 	.word	0x0802c6b4
 8009290:	0802c6c0 	.word	0x0802c6c0
							SetSettings.macaddr0, SetSettings.macaddr1, SetSettings.macaddr2, SetSettings.macaddr3, SetSettings.macaddr4, SetSettings.macaddr5);
 8009294:	4b7f      	ldr	r3, [pc, #508]	; (8009494 <ssi_handler+0xff4>)
 8009296:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
					snprintf(macStr, sizeof(macStr), "%02X-%02X-%02X-%02X-%02X-%02X",
 800929a:	4619      	mov	r1, r3
							SetSettings.macaddr0, SetSettings.macaddr1, SetSettings.macaddr2, SetSettings.macaddr3, SetSettings.macaddr4, SetSettings.macaddr5);
 800929c:	4b7d      	ldr	r3, [pc, #500]	; (8009494 <ssi_handler+0xff4>)
 800929e:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
					snprintf(macStr, sizeof(macStr), "%02X-%02X-%02X-%02X-%02X-%02X",
 80092a2:	461c      	mov	r4, r3
							SetSettings.macaddr0, SetSettings.macaddr1, SetSettings.macaddr2, SetSettings.macaddr3, SetSettings.macaddr4, SetSettings.macaddr5);
 80092a4:	4b7b      	ldr	r3, [pc, #492]	; (8009494 <ssi_handler+0xff4>)
 80092a6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
					snprintf(macStr, sizeof(macStr), "%02X-%02X-%02X-%02X-%02X-%02X",
 80092aa:	461d      	mov	r5, r3
							SetSettings.macaddr0, SetSettings.macaddr1, SetSettings.macaddr2, SetSettings.macaddr3, SetSettings.macaddr4, SetSettings.macaddr5);
 80092ac:	4b79      	ldr	r3, [pc, #484]	; (8009494 <ssi_handler+0xff4>)
 80092ae:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
					snprintf(macStr, sizeof(macStr), "%02X-%02X-%02X-%02X-%02X-%02X",
 80092b2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80092b6:	9304      	str	r3, [sp, #16]
 80092b8:	9503      	str	r5, [sp, #12]
 80092ba:	9402      	str	r4, [sp, #8]
 80092bc:	9101      	str	r1, [sp, #4]
 80092be:	9200      	str	r2, [sp, #0]
 80092c0:	4633      	mov	r3, r6
 80092c2:	4a75      	ldr	r2, [pc, #468]	; (8009498 <ssi_handler+0xff8>)
 80092c4:	2122      	movs	r1, #34	; 0x22
 80092c6:	f01d fe17 	bl	8026ef8 <sniprintf>
					cJSON_AddStringToObject(root, "macaddr", macStr);
 80092ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80092ce:	461a      	mov	r2, r3
 80092d0:	4972      	ldr	r1, [pc, #456]	; (800949c <ssi_handler+0xffc>)
 80092d2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80092d4:	f7f9 fefc 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddStringToObject(root, "adm_name", SetSettings.adm_name);
 80092d8:	4a6e      	ldr	r2, [pc, #440]	; (8009494 <ssi_handler+0xff4>)
 80092da:	4971      	ldr	r1, [pc, #452]	; (80094a0 <ssi_handler+0x1000>)
 80092dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80092de:	f7f9 fef7 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddStringToObject(root, "adm_pswd", SetSettings.adm_pswd);
 80092e2:	4a70      	ldr	r2, [pc, #448]	; (80094a4 <ssi_handler+0x1004>)
 80092e4:	4970      	ldr	r1, [pc, #448]	; (80094a8 <ssi_handler+0x1008>)
 80092e6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80092e8:	f7f9 fef2 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddStringToObject(root, "token", SetSettings.token);
 80092ec:	4a6f      	ldr	r2, [pc, #444]	; (80094ac <ssi_handler+0x100c>)
 80092ee:	4970      	ldr	r1, [pc, #448]	; (80094b0 <ssi_handler+0x1010>)
 80092f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80092f2:	f7f9 feed 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddNumberToObject(root, "timezone", SetSettings.timezone);
 80092f6:	4b67      	ldr	r3, [pc, #412]	; (8009494 <ssi_handler+0xff4>)
 80092f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7f7 f922 	bl	8000544 <__aeabi_i2d>
 8009300:	4602      	mov	r2, r0
 8009302:	460b      	mov	r3, r1
 8009304:	ec43 2b10 	vmov	d0, r2, r3
 8009308:	496a      	ldr	r1, [pc, #424]	; (80094b4 <ssi_handler+0x1014>)
 800930a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800930c:	f7f9 febc 	bl	8003088 <cJSON_AddNumberToObject>


					str = cJSON_PrintUnformatted(root);
 8009310:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009312:	f7f8 fff7 	bl	8002304 <cJSON_PrintUnformatted>
 8009316:	65f8      	str	r0, [r7, #92]	; 0x5c
					cJSON_Delete(root);
 8009318:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800931a:	f7f7 ff21 	bl	8001160 <cJSON_Delete>
				}
				if(tab == 5){
 800931e:	4b66      	ldr	r3, [pc, #408]	; (80094b8 <ssi_handler+0x1018>)
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	2b05      	cmp	r3, #5
 8009324:	d144      	bne.n	80093b0 <ssi_handler+0xf10>
					root = cJSON_CreateObject();
 8009326:	f7f9 ff79 	bl	800321c <cJSON_CreateObject>
 800932a:	6578      	str	r0, [r7, #84]	; 0x54

					cJSON_AddNumberToObject(root, "id", id); // в JS доваляеме +1
 800932c:	4b63      	ldr	r3, [pc, #396]	; (80094bc <ssi_handler+0x101c>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	4618      	mov	r0, r3
 8009332:	f7f7 f8f7 	bl	8000524 <__aeabi_ui2d>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	ec43 2b10 	vmov	d0, r2, r3
 800933e:	4960      	ldr	r1, [pc, #384]	; (80094c0 <ssi_handler+0x1020>)
 8009340:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009342:	f7f9 fea1 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddStringToObject(root, "cron", dbCrontxt[id].cron);
 8009346:	4b5d      	ldr	r3, [pc, #372]	; (80094bc <ssi_handler+0x101c>)
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8009350:	fb03 f302 	mul.w	r3, r3, r2
 8009354:	4a5b      	ldr	r2, [pc, #364]	; (80094c4 <ssi_handler+0x1024>)
 8009356:	4413      	add	r3, r2
 8009358:	461a      	mov	r2, r3
 800935a:	495b      	ldr	r1, [pc, #364]	; (80094c8 <ssi_handler+0x1028>)
 800935c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800935e:	f7f9 feb7 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddStringToObject(root, "activ", dbCrontxt[id].activ);
 8009362:	4b56      	ldr	r3, [pc, #344]	; (80094bc <ssi_handler+0x101c>)
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	461a      	mov	r2, r3
 8009368:	f44f 73a4 	mov.w	r3, #328	; 0x148
 800936c:	fb03 f302 	mul.w	r3, r3, r2
 8009370:	3320      	adds	r3, #32
 8009372:	4a54      	ldr	r2, [pc, #336]	; (80094c4 <ssi_handler+0x1024>)
 8009374:	4413      	add	r3, r2
 8009376:	3303      	adds	r3, #3
 8009378:	461a      	mov	r2, r3
 800937a:	4954      	ldr	r1, [pc, #336]	; (80094cc <ssi_handler+0x102c>)
 800937c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800937e:	f7f9 fea7 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddStringToObject(root, "info", dbCrontxt[id].info);
 8009382:	4b4e      	ldr	r3, [pc, #312]	; (80094bc <ssi_handler+0x101c>)
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	461a      	mov	r2, r3
 8009388:	f44f 73a4 	mov.w	r3, #328	; 0x148
 800938c:	fb03 f302 	mul.w	r3, r3, r2
 8009390:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009394:	4a4b      	ldr	r2, [pc, #300]	; (80094c4 <ssi_handler+0x1024>)
 8009396:	4413      	add	r3, r2
 8009398:	461a      	mov	r2, r3
 800939a:	494d      	ldr	r1, [pc, #308]	; (80094d0 <ssi_handler+0x1030>)
 800939c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800939e:	f7f9 fe97 	bl	80030d0 <cJSON_AddStringToObject>
					str = cJSON_PrintUnformatted(root);
 80093a2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80093a4:	f7f8 ffae 	bl	8002304 <cJSON_PrintUnformatted>
 80093a8:	65f8      	str	r0, [r7, #92]	; 0x5c
					cJSON_Delete(root);
 80093aa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80093ac:	f7f7 fed8 	bl	8001160 <cJSON_Delete>
				}
			}

			sprintf(pcInsert, "%s", str);
 80093b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80093b2:	4948      	ldr	r1, [pc, #288]	; (80094d4 <ssi_handler+0x1034>)
 80093b4:	6a38      	ldr	r0, [r7, #32]
 80093b6:	f01d fdd3 	bl	8026f60 <siprintf>
			free(str);
 80093ba:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80093bc:	f01d f8de 	bl	802657c <free>
			return strlen(pcInsert);
 80093c0:	6a38      	ldr	r0, [r7, #32]
 80093c2:	f7f6 ff0f 	bl	80001e4 <strlen>
 80093c6:	4603      	mov	r3, r0
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	e05f      	b.n	800948c <ssi_handler+0xfec>
			break;
			// ssi tag <!--#cronjson-->
			case 6:

				root = cJSON_CreateArray();
 80093cc:	f7f9 ff12 	bl	80031f4 <cJSON_CreateArray>
 80093d0:	6578      	str	r0, [r7, #84]	; 0x54
				i = 0;
 80093d2:	2300      	movs	r3, #0
 80093d4:	65bb      	str	r3, [r7, #88]	; 0x58
				fld = cJSON_CreateObject();
 80093d6:	f7f9 ff21 	bl	800321c <cJSON_CreateObject>
 80093da:	6538      	str	r0, [r7, #80]	; 0x50
				while (i <= MAXSIZE - 1) {
 80093dc:	e03c      	b.n	8009458 <ssi_handler+0xfb8>
					cJSON_AddItemToArray(root, fld = cJSON_CreateObject());
 80093de:	f7f9 ff1d 	bl	800321c <cJSON_CreateObject>
 80093e2:	6538      	str	r0, [r7, #80]	; 0x50
 80093e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80093e6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80093e8:	f7f9 fdc9 	bl	8002f7e <cJSON_AddItemToArray>
					cJSON_AddNumberToObject(fld, "id", i);
 80093ec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80093ee:	f7f7 f8a9 	bl	8000544 <__aeabi_i2d>
 80093f2:	4602      	mov	r2, r0
 80093f4:	460b      	mov	r3, r1
 80093f6:	ec43 2b10 	vmov	d0, r2, r3
 80093fa:	4931      	ldr	r1, [pc, #196]	; (80094c0 <ssi_handler+0x1020>)
 80093fc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80093fe:	f7f9 fe43 	bl	8003088 <cJSON_AddNumberToObject>
					cJSON_AddStringToObject(fld, "cron", dbCrontxt[i].cron);
 8009402:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009404:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8009408:	fb02 f303 	mul.w	r3, r2, r3
 800940c:	4a2d      	ldr	r2, [pc, #180]	; (80094c4 <ssi_handler+0x1024>)
 800940e:	4413      	add	r3, r2
 8009410:	461a      	mov	r2, r3
 8009412:	492d      	ldr	r1, [pc, #180]	; (80094c8 <ssi_handler+0x1028>)
 8009414:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009416:	f7f9 fe5b 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddStringToObject(fld, "activ", dbCrontxt[i].activ);
 800941a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800941c:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8009420:	fb02 f303 	mul.w	r3, r2, r3
 8009424:	3320      	adds	r3, #32
 8009426:	4a27      	ldr	r2, [pc, #156]	; (80094c4 <ssi_handler+0x1024>)
 8009428:	4413      	add	r3, r2
 800942a:	3303      	adds	r3, #3
 800942c:	461a      	mov	r2, r3
 800942e:	4927      	ldr	r1, [pc, #156]	; (80094cc <ssi_handler+0x102c>)
 8009430:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009432:	f7f9 fe4d 	bl	80030d0 <cJSON_AddStringToObject>
					cJSON_AddStringToObject(fld, "info", dbCrontxt[i].info);
 8009436:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009438:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800943c:	fb02 f303 	mul.w	r3, r2, r3
 8009440:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009444:	4a1f      	ldr	r2, [pc, #124]	; (80094c4 <ssi_handler+0x1024>)
 8009446:	4413      	add	r3, r2
 8009448:	461a      	mov	r2, r3
 800944a:	4921      	ldr	r1, [pc, #132]	; (80094d0 <ssi_handler+0x1030>)
 800944c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800944e:	f7f9 fe3f 	bl	80030d0 <cJSON_AddStringToObject>

					i++;
 8009452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009454:	3301      	adds	r3, #1
 8009456:	65bb      	str	r3, [r7, #88]	; 0x58
				while (i <= MAXSIZE - 1) {
 8009458:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800945a:	2b09      	cmp	r3, #9
 800945c:	ddbf      	ble.n	80093de <ssi_handler+0xf3e>
				}

				str = cJSON_Print(root);
 800945e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009460:	f7f8 ff40 	bl	80022e4 <cJSON_Print>
 8009464:	65f8      	str	r0, [r7, #92]	; 0x5c

				cJSON_Delete(root);
 8009466:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009468:	f7f7 fe7a 	bl	8001160 <cJSON_Delete>
				sprintf(pcInsert, "%s", str);
 800946c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800946e:	4919      	ldr	r1, [pc, #100]	; (80094d4 <ssi_handler+0x1034>)
 8009470:	6a38      	ldr	r0, [r7, #32]
 8009472:	f01d fd75 	bl	8026f60 <siprintf>
				free(str);
 8009476:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009478:	f01d f880 	bl	802657c <free>

				return strlen(pcInsert);
 800947c:	6a38      	ldr	r0, [r7, #32]
 800947e:	f7f6 feb1 	bl	80001e4 <strlen>
 8009482:	4603      	mov	r3, r0
 8009484:	b29b      	uxth	r3, r3
 8009486:	e001      	b.n	800948c <ssi_handler+0xfec>
				break;
		default:
			break;
 8009488:	bf00      	nop
	}
	return 0;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3764      	adds	r7, #100	; 0x64
 8009490:	46bd      	mov	sp, r7
 8009492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009494:	20005b90 	.word	0x20005b90
 8009498:	0802c6cc 	.word	0x0802c6cc
 800949c:	0802c6ec 	.word	0x0802c6ec
 80094a0:	0802c6f4 	.word	0x0802c6f4
 80094a4:	20005b9a 	.word	0x20005b9a
 80094a8:	0802c700 	.word	0x0802c700
 80094ac:	20005ba9 	.word	0x20005ba9
 80094b0:	0802c70c 	.word	0x0802c70c
 80094b4:	0802c714 	.word	0x0802c714
 80094b8:	20001345 	.word	0x20001345
 80094bc:	20001346 	.word	0x20001346
 80094c0:	0802c520 	.word	0x0802c520
 80094c4:	20005f6c 	.word	0x20005f6c
 80094c8:	0802c720 	.word	0x0802c720
 80094cc:	0802c728 	.word	0x0802c728
 80094d0:	0802c564 	.word	0x0802c564
 80094d4:	0802c3b4 	.word	0x0802c3b4

080094d8 <FormCGI_Handler>:
const uint8_t CGI_URL_NUM = (sizeof(URL_TABLES) / sizeof(tCGI));


// index.shtml Handler (Index 0)
const char* FormCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
 80094e4:	603b      	str	r3, [r7, #0]

	if (iIndex == 0) {
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d123      	bne.n	8009534 <FormCGI_Handler+0x5c>
		for (int i = 0; i < iNumParams; i++) {
 80094ec:	2300      	movs	r3, #0
 80094ee:	617b      	str	r3, [r7, #20]
 80094f0:	e01c      	b.n	800952c <FormCGI_Handler+0x54>
			if (strcmp(pcParam[i], "ssid") == 0)
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	4413      	add	r3, r2
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	491d      	ldr	r1, [pc, #116]	; (8009574 <FormCGI_Handler+0x9c>)
 80094fe:	4618      	mov	r0, r3
 8009500:	f7f6 fe66 	bl	80001d0 <strcmp>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10d      	bne.n	8009526 <FormCGI_Handler+0x4e>
			{
				memset(ssid, '\0', sizeof(ssid));
 800950a:	221b      	movs	r2, #27
 800950c:	2100      	movs	r1, #0
 800950e:	481a      	ldr	r0, [pc, #104]	; (8009578 <FormCGI_Handler+0xa0>)
 8009510:	f01d f872 	bl	80265f8 <memset>
				strcpy(ssid, pcValue[i]);
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	4413      	add	r3, r2
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4619      	mov	r1, r3
 8009520:	4815      	ldr	r0, [pc, #84]	; (8009578 <FormCGI_Handler+0xa0>)
 8009522:	f01d fdca 	bl	80270ba <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	3301      	adds	r3, #1
 800952a:	617b      	str	r3, [r7, #20]
 800952c:	697a      	ldr	r2, [r7, #20]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	429a      	cmp	r2, r3
 8009532:	dbde      	blt.n	80094f2 <FormCGI_Handler+0x1a>
		}	}

	//printf("URL %s \n", URL_TABLES[iIndex].pcCGIName);

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 8009534:	4911      	ldr	r1, [pc, #68]	; (800957c <FormCGI_Handler+0xa4>)
 8009536:	4810      	ldr	r0, [pc, #64]	; (8009578 <FormCGI_Handler+0xa0>)
 8009538:	f7f6 fe4a 	bl	80001d0 <strcmp>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10a      	bne.n	8009558 <FormCGI_Handler+0x80>
 8009542:	4b0e      	ldr	r3, [pc, #56]	; (800957c <FormCGI_Handler+0xa4>)
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d006      	beq.n	8009558 <FormCGI_Handler+0x80>
		//printf("SSID OK \n");
		restartSSID();
 800954a:	f7fe ff5f 	bl	800840c <restartSSID>
		return URL_TABLES[iIndex].pcCGIName;
 800954e:	4a0c      	ldr	r2, [pc, #48]	; (8009580 <FormCGI_Handler+0xa8>)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009556:	e008      	b.n	800956a <FormCGI_Handler+0x92>
	} else {
		printf("SSID Failed \n");
 8009558:	480a      	ldr	r0, [pc, #40]	; (8009584 <FormCGI_Handler+0xac>)
 800955a:	f01d fc03 	bl	8026d64 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 800955e:	221b      	movs	r2, #27
 8009560:	2100      	movs	r1, #0
 8009562:	4806      	ldr	r0, [pc, #24]	; (800957c <FormCGI_Handler+0xa4>)
 8009564:	f01d f848 	bl	80265f8 <memset>
		return "/login.shtml";
 8009568:	4b07      	ldr	r3, [pc, #28]	; (8009588 <FormCGI_Handler+0xb0>)
	}

}
 800956a:	4618      	mov	r0, r3
 800956c:	3718      	adds	r7, #24
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	0802c234 	.word	0x0802c234
 8009578:	20001368 	.word	0x20001368
 800957c:	2000134c 	.word	0x2000134c
 8009580:	0803012c 	.word	0x0803012c
 8009584:	0802c870 	.word	0x0802c870
 8009588:	0802c880 	.word	0x0802c880

0800958c <LoginCGI_Handler>:


// Login Handler (Index 1)
const char* LoginCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
 8009598:	603b      	str	r3, [r7, #0]

	if (iIndex == 1) {
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d14c      	bne.n	800963a <LoginCGI_Handler+0xae>
		for (int i = 0; i < iNumParams; i++) {
 80095a0:	2300      	movs	r3, #0
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	e045      	b.n	8009632 <LoginCGI_Handler+0xa6>
			if(strcmp(pcParam[i], "username") == 0){
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	4413      	add	r3, r2
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4924      	ldr	r1, [pc, #144]	; (8009644 <LoginCGI_Handler+0xb8>)
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7f6 fe0c 	bl	80001d0 <strcmp>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d115      	bne.n	80095ea <LoginCGI_Handler+0x5e>
				printf("OK Get 1 \n");
 80095be:	4822      	ldr	r0, [pc, #136]	; (8009648 <LoginCGI_Handler+0xbc>)
 80095c0:	f01d fbd0 	bl	8026d64 <puts>
				if(strcmp(pcValue[i], SetSettings.adm_name) == 0){
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	683a      	ldr	r2, [r7, #0]
 80095ca:	4413      	add	r3, r2
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	491f      	ldr	r1, [pc, #124]	; (800964c <LoginCGI_Handler+0xc0>)
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7f6 fdfd 	bl	80001d0 <strcmp>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d127      	bne.n	800962c <LoginCGI_Handler+0xa0>
					verifyNum++;
 80095dc:	4b1c      	ldr	r3, [pc, #112]	; (8009650 <LoginCGI_Handler+0xc4>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	3301      	adds	r3, #1
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	4b1a      	ldr	r3, [pc, #104]	; (8009650 <LoginCGI_Handler+0xc4>)
 80095e6:	701a      	strb	r2, [r3, #0]
 80095e8:	e020      	b.n	800962c <LoginCGI_Handler+0xa0>
					//printf("username OK! \n");
				}

			} else if(strcmp(pcParam[i], "password") == 0) {
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	4413      	add	r3, r2
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4917      	ldr	r1, [pc, #92]	; (8009654 <LoginCGI_Handler+0xc8>)
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7f6 fdea 	bl	80001d0 <strcmp>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d114      	bne.n	800962c <LoginCGI_Handler+0xa0>
				printf("OK Get 2 \n");
 8009602:	4815      	ldr	r0, [pc, #84]	; (8009658 <LoginCGI_Handler+0xcc>)
 8009604:	f01d fbae 	bl	8026d64 <puts>
				if(strcmp(pcValue[i], SetSettings.adm_pswd) == 0){
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	683a      	ldr	r2, [r7, #0]
 800960e:	4413      	add	r3, r2
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4912      	ldr	r1, [pc, #72]	; (800965c <LoginCGI_Handler+0xd0>)
 8009614:	4618      	mov	r0, r3
 8009616:	f7f6 fddb 	bl	80001d0 <strcmp>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d105      	bne.n	800962c <LoginCGI_Handler+0xa0>
					verifyNum++;
 8009620:	4b0b      	ldr	r3, [pc, #44]	; (8009650 <LoginCGI_Handler+0xc4>)
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	3301      	adds	r3, #1
 8009626:	b2da      	uxtb	r2, r3
 8009628:	4b09      	ldr	r3, [pc, #36]	; (8009650 <LoginCGI_Handler+0xc4>)
 800962a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < iNumParams; i++) {
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	3301      	adds	r3, #1
 8009630:	617b      	str	r3, [r7, #20]
 8009632:	697a      	ldr	r2, [r7, #20]
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	429a      	cmp	r2, r3
 8009638:	dbb5      	blt.n	80095a6 <LoginCGI_Handler+0x1a>
				}
			}
		}
	}

	return "/logon.shtml";
 800963a:	4b09      	ldr	r3, [pc, #36]	; (8009660 <LoginCGI_Handler+0xd4>)
}
 800963c:	4618      	mov	r0, r3
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	0802c890 	.word	0x0802c890
 8009648:	0802c89c 	.word	0x0802c89c
 800964c:	20005b90 	.word	0x20005b90
 8009650:	20001344 	.word	0x20001344
 8009654:	0802c8a8 	.word	0x0802c8a8
 8009658:	0802c8b4 	.word	0x0802c8b4
 800965c:	20005b9a 	.word	0x20005b9a
 8009660:	0802c740 	.word	0x0802c740

08009664 <SelectCGI_Handler>:


// select.shtml Handler (Index 2)
const char* SelectCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	603b      	str	r3, [r7, #0]


	if (iIndex == 2) {
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2b02      	cmp	r3, #2
 8009676:	d123      	bne.n	80096c0 <SelectCGI_Handler+0x5c>
		for (int i = 0; i < iNumParams; i++) {
 8009678:	2300      	movs	r3, #0
 800967a:	617b      	str	r3, [r7, #20]
 800967c:	e01c      	b.n	80096b8 <SelectCGI_Handler+0x54>
			if (strcmp(pcParam[i], "ssid") == 0)
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	4413      	add	r3, r2
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	491d      	ldr	r1, [pc, #116]	; (8009700 <SelectCGI_Handler+0x9c>)
 800968a:	4618      	mov	r0, r3
 800968c:	f7f6 fda0 	bl	80001d0 <strcmp>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10d      	bne.n	80096b2 <SelectCGI_Handler+0x4e>
			{
				memset(ssid, '\0', sizeof(ssid));
 8009696:	221b      	movs	r2, #27
 8009698:	2100      	movs	r1, #0
 800969a:	481a      	ldr	r0, [pc, #104]	; (8009704 <SelectCGI_Handler+0xa0>)
 800969c:	f01c ffac 	bl	80265f8 <memset>
				strcpy(ssid, pcValue[i]);
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	4413      	add	r3, r2
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4619      	mov	r1, r3
 80096ac:	4815      	ldr	r0, [pc, #84]	; (8009704 <SelectCGI_Handler+0xa0>)
 80096ae:	f01d fd04 	bl	80270ba <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	3301      	adds	r3, #1
 80096b6:	617b      	str	r3, [r7, #20]
 80096b8:	697a      	ldr	r2, [r7, #20]
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	429a      	cmp	r2, r3
 80096be:	dbde      	blt.n	800967e <SelectCGI_Handler+0x1a>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 80096c0:	4911      	ldr	r1, [pc, #68]	; (8009708 <SelectCGI_Handler+0xa4>)
 80096c2:	4810      	ldr	r0, [pc, #64]	; (8009704 <SelectCGI_Handler+0xa0>)
 80096c4:	f7f6 fd84 	bl	80001d0 <strcmp>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d10a      	bne.n	80096e4 <SelectCGI_Handler+0x80>
 80096ce:	4b0e      	ldr	r3, [pc, #56]	; (8009708 <SelectCGI_Handler+0xa4>)
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d006      	beq.n	80096e4 <SelectCGI_Handler+0x80>
		//printf("SSID OK \n");
		restartSSID();
 80096d6:	f7fe fe99 	bl	800840c <restartSSID>
		return URL_TABLES[iIndex].pcCGIName;  //
 80096da:	4a0c      	ldr	r2, [pc, #48]	; (800970c <SelectCGI_Handler+0xa8>)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096e2:	e008      	b.n	80096f6 <SelectCGI_Handler+0x92>
	} else {
		printf("SSID Failed \n");
 80096e4:	480a      	ldr	r0, [pc, #40]	; (8009710 <SelectCGI_Handler+0xac>)
 80096e6:	f01d fb3d 	bl	8026d64 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 80096ea:	221b      	movs	r2, #27
 80096ec:	2100      	movs	r1, #0
 80096ee:	4806      	ldr	r0, [pc, #24]	; (8009708 <SelectCGI_Handler+0xa4>)
 80096f0:	f01c ff82 	bl	80265f8 <memset>
		return "/login.shtml";
 80096f4:	4b07      	ldr	r3, [pc, #28]	; (8009714 <SelectCGI_Handler+0xb0>)
	}
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	0802c234 	.word	0x0802c234
 8009704:	20001368 	.word	0x20001368
 8009708:	2000134c 	.word	0x2000134c
 800970c:	0803012c 	.word	0x0803012c
 8009710:	0802c870 	.word	0x0802c870
 8009714:	0802c880 	.word	0x0802c880

08009718 <RelayCGI_Handler>:


// tabrelay.shtml Handler (Index 3)
const char* RelayCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
 8009724:	603b      	str	r3, [r7, #0]


	if (iIndex == 3) {
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2b03      	cmp	r3, #3
 800972a:	d123      	bne.n	8009774 <RelayCGI_Handler+0x5c>
		for (int i = 0; i < iNumParams; i++) {
 800972c:	2300      	movs	r3, #0
 800972e:	617b      	str	r3, [r7, #20]
 8009730:	e01c      	b.n	800976c <RelayCGI_Handler+0x54>
			if (strcmp(pcParam[i], "ssid") == 0)
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	4413      	add	r3, r2
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4911      	ldr	r1, [pc, #68]	; (8009784 <RelayCGI_Handler+0x6c>)
 800973e:	4618      	mov	r0, r3
 8009740:	f7f6 fd46 	bl	80001d0 <strcmp>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10d      	bne.n	8009766 <RelayCGI_Handler+0x4e>
			{
				memset(ssid, '\0', sizeof(ssid));
 800974a:	221b      	movs	r2, #27
 800974c:	2100      	movs	r1, #0
 800974e:	480e      	ldr	r0, [pc, #56]	; (8009788 <RelayCGI_Handler+0x70>)
 8009750:	f01c ff52 	bl	80265f8 <memset>
				strcpy(ssid, pcValue[i]);
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	683a      	ldr	r2, [r7, #0]
 800975a:	4413      	add	r3, r2
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4619      	mov	r1, r3
 8009760:	4809      	ldr	r0, [pc, #36]	; (8009788 <RelayCGI_Handler+0x70>)
 8009762:	f01d fcaa 	bl	80270ba <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	3301      	adds	r3, #1
 800976a:	617b      	str	r3, [r7, #20]
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	429a      	cmp	r2, r3
 8009772:	dbde      	blt.n	8009732 <RelayCGI_Handler+0x1a>
	}

	/* login succeeded */
	if(1){
		//printf("SSID OK \n");
		restartSSID();
 8009774:	f7fe fe4a 	bl	800840c <restartSSID>
		return "/tabrelay.shtml"; //
 8009778:	4b04      	ldr	r3, [pc, #16]	; (800978c <RelayCGI_Handler+0x74>)
	} else {
		printf("SSID Failed \n");
		memset(randomSSID, '\0', sizeof(randomSSID));
		return "/login.shtml";
	}
}
 800977a:	4618      	mov	r0, r3
 800977c:	3718      	adds	r7, #24
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	0802c234 	.word	0x0802c234
 8009788:	20001368 	.word	0x20001368
 800978c:	0802c760 	.word	0x0802c760

08009790 <ButtonCGI_Handler>:

// tabbuttom.shtml Handler (Index 4)
const char* ButtonCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8009790:	b580      	push	{r7, lr}
 8009792:	b08a      	sub	sp, #40	; 0x28
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
 800979c:	603b      	str	r3, [r7, #0]

	int idin = 0;
 800979e:	2300      	movs	r3, #0
 80097a0:	627b      	str	r3, [r7, #36]	; 0x24
	int idout = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	623b      	str	r3, [r7, #32]
	int i = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	61fb      	str	r3, [r7, #28]
	int del = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	61bb      	str	r3, [r7, #24]
	uint16_t usbdata = 0;
 80097ae:	2300      	movs	r3, #0
 80097b0:	827b      	strh	r3, [r7, #18]

	if (iIndex == 4) {
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2b04      	cmp	r3, #4
 80097b6:	f040 80d0 	bne.w	800995a <ButtonCGI_Handler+0x1ca>
		for (int i = 0; i < iNumParams; i++) {
 80097ba:	2300      	movs	r3, #0
 80097bc:	617b      	str	r3, [r7, #20]
 80097be:	e05b      	b.n	8009878 <ButtonCGI_Handler+0xe8>
			if (strcmp(pcParam[i], "ssid") == 0)
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	4413      	add	r3, r2
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4967      	ldr	r1, [pc, #412]	; (8009968 <ButtonCGI_Handler+0x1d8>)
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7f6 fcff 	bl	80001d0 <strcmp>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d10d      	bne.n	80097f4 <ButtonCGI_Handler+0x64>
			{
				memset(ssid, '\0', sizeof(ssid));
 80097d8:	221b      	movs	r2, #27
 80097da:	2100      	movs	r1, #0
 80097dc:	4863      	ldr	r0, [pc, #396]	; (800996c <ButtonCGI_Handler+0x1dc>)
 80097de:	f01c ff0b 	bl	80265f8 <memset>
				strcpy(ssid, pcValue[i]);
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	4413      	add	r3, r2
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4619      	mov	r1, r3
 80097ee:	485f      	ldr	r0, [pc, #380]	; (800996c <ButtonCGI_Handler+0x1dc>)
 80097f0:	f01d fc63 	bl	80270ba <strcpy>
			}
			if (strcmp(pcParam[i], "idin") == 0)
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	4413      	add	r3, r2
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	495c      	ldr	r1, [pc, #368]	; (8009970 <ButtonCGI_Handler+0x1e0>)
 8009800:	4618      	mov	r0, r3
 8009802:	f7f6 fce5 	bl	80001d0 <strcmp>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d108      	bne.n	800981e <ButtonCGI_Handler+0x8e>
			{
				idin = atoi(pcValue[i]);
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	4413      	add	r3, r2
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4618      	mov	r0, r3
 8009818:	f01c fc70 	bl	80260fc <atoi>
 800981c:	6278      	str	r0, [r7, #36]	; 0x24
			}
			if (strcmp(pcParam[i], "idout") == 0)
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	4413      	add	r3, r2
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4952      	ldr	r1, [pc, #328]	; (8009974 <ButtonCGI_Handler+0x1e4>)
 800982a:	4618      	mov	r0, r3
 800982c:	f7f6 fcd0 	bl	80001d0 <strcmp>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d108      	bne.n	8009848 <ButtonCGI_Handler+0xb8>
			{
				idout = atoi(pcValue[i]);
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	683a      	ldr	r2, [r7, #0]
 800983c:	4413      	add	r3, r2
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4618      	mov	r0, r3
 8009842:	f01c fc5b 	bl	80260fc <atoi>
 8009846:	6238      	str	r0, [r7, #32]
			}
			if (strcmp(pcParam[i], "del") == 0)
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	4413      	add	r3, r2
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4949      	ldr	r1, [pc, #292]	; (8009978 <ButtonCGI_Handler+0x1e8>)
 8009854:	4618      	mov	r0, r3
 8009856:	f7f6 fcbb 	bl	80001d0 <strcmp>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d108      	bne.n	8009872 <ButtonCGI_Handler+0xe2>
			{
				del = atoi(pcValue[i]);
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	4413      	add	r3, r2
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4618      	mov	r0, r3
 800986c:	f01c fc46 	bl	80260fc <atoi>
 8009870:	61b8      	str	r0, [r7, #24]
		for (int i = 0; i < iNumParams; i++) {
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	3301      	adds	r3, #1
 8009876:	617b      	str	r3, [r7, #20]
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	429a      	cmp	r2, r3
 800987e:	db9f      	blt.n	80097c0 <ButtonCGI_Handler+0x30>
			}
		}
		if(idin != 0 && idout != 0){
 8009880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009882:	2b00      	cmp	r3, #0
 8009884:	d046      	beq.n	8009914 <ButtonCGI_Handler+0x184>
 8009886:	6a3b      	ldr	r3, [r7, #32]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d043      	beq.n	8009914 <ButtonCGI_Handler+0x184>
			// @todo проверка передзаписью превязан ли этот пин уже или нет
			while (i <= NUMPINLINKS - 1) {
 800988c:	e02f      	b.n	80098ee <ButtonCGI_Handler+0x15e>
				if (PinsLinks[i].flag == 0) {
 800988e:	493b      	ldr	r1, [pc, #236]	; (800997c <ButtonCGI_Handler+0x1ec>)
 8009890:	69fa      	ldr	r2, [r7, #28]
 8009892:	4613      	mov	r3, r2
 8009894:	005b      	lsls	r3, r3, #1
 8009896:	4413      	add	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	440b      	add	r3, r1
 800989c:	3308      	adds	r3, #8
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d121      	bne.n	80098e8 <ButtonCGI_Handler+0x158>
					//printf("flag %d \n", i);
					PinsLinks[i].idin = idin - 1;
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	1e59      	subs	r1, r3, #1
 80098a8:	4834      	ldr	r0, [pc, #208]	; (800997c <ButtonCGI_Handler+0x1ec>)
 80098aa:	69fa      	ldr	r2, [r7, #28]
 80098ac:	4613      	mov	r3, r2
 80098ae:	005b      	lsls	r3, r3, #1
 80098b0:	4413      	add	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4403      	add	r3, r0
 80098b6:	6019      	str	r1, [r3, #0]
					PinsLinks[i].idout = idout - 1;
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	1e59      	subs	r1, r3, #1
 80098bc:	482f      	ldr	r0, [pc, #188]	; (800997c <ButtonCGI_Handler+0x1ec>)
 80098be:	69fa      	ldr	r2, [r7, #28]
 80098c0:	4613      	mov	r3, r2
 80098c2:	005b      	lsls	r3, r3, #1
 80098c4:	4413      	add	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4403      	add	r3, r0
 80098ca:	3304      	adds	r3, #4
 80098cc:	6019      	str	r1, [r3, #0]
					PinsLinks[i].flag = 1;
 80098ce:	492b      	ldr	r1, [pc, #172]	; (800997c <ButtonCGI_Handler+0x1ec>)
 80098d0:	69fa      	ldr	r2, [r7, #28]
 80098d2:	4613      	mov	r3, r2
 80098d4:	005b      	lsls	r3, r3, #1
 80098d6:	4413      	add	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	440b      	add	r3, r1
 80098dc:	3308      	adds	r3, #8
 80098de:	2201      	movs	r2, #1
 80098e0:	601a      	str	r2, [r3, #0]
					usbdata = 4;
 80098e2:	2304      	movs	r3, #4
 80098e4:	827b      	strh	r3, [r7, #18]
					break;
 80098e6:	e005      	b.n	80098f4 <ButtonCGI_Handler+0x164>
				}
				i++;
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	3301      	adds	r3, #1
 80098ec:	61fb      	str	r3, [r7, #28]
			while (i <= NUMPINLINKS - 1) {
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	2b04      	cmp	r3, #4
 80098f2:	ddcc      	ble.n	800988e <ButtonCGI_Handler+0xfe>
			}
			if(usbdata != 0){
 80098f4:	8a7b      	ldrh	r3, [r7, #18]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00a      	beq.n	8009910 <ButtonCGI_Handler+0x180>
				xQueueSend(usbQueueHandle, &usbdata, 0);
 80098fa:	4b21      	ldr	r3, [pc, #132]	; (8009980 <ButtonCGI_Handler+0x1f0>)
 80098fc:	6818      	ldr	r0, [r3, #0]
 80098fe:	f107 0112 	add.w	r1, r7, #18
 8009902:	2300      	movs	r3, #0
 8009904:	2200      	movs	r2, #0
 8009906:	f00a ffff 	bl	8014908 <xQueueGenericSend>
				printf("usbdata = 4 \n");
 800990a:	481e      	ldr	r0, [pc, #120]	; (8009984 <ButtonCGI_Handler+0x1f4>)
 800990c:	f01d fa2a 	bl	8026d64 <puts>
			}
			usbdata = 0;
 8009910:	2300      	movs	r3, #0
 8009912:	827b      	strh	r3, [r7, #18]

		}
		if(del != 0){
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d01f      	beq.n	800995a <ButtonCGI_Handler+0x1ca>
			PinsLinks[del-1].idin = 0;
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	1e5a      	subs	r2, r3, #1
 800991e:	4917      	ldr	r1, [pc, #92]	; (800997c <ButtonCGI_Handler+0x1ec>)
 8009920:	4613      	mov	r3, r2
 8009922:	005b      	lsls	r3, r3, #1
 8009924:	4413      	add	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	440b      	add	r3, r1
 800992a:	2200      	movs	r2, #0
 800992c:	601a      	str	r2, [r3, #0]
			PinsLinks[del-1].idout = 0;
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	1e5a      	subs	r2, r3, #1
 8009932:	4912      	ldr	r1, [pc, #72]	; (800997c <ButtonCGI_Handler+0x1ec>)
 8009934:	4613      	mov	r3, r2
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	4413      	add	r3, r2
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	440b      	add	r3, r1
 800993e:	3304      	adds	r3, #4
 8009940:	2200      	movs	r2, #0
 8009942:	601a      	str	r2, [r3, #0]
			PinsLinks[del-1].flag = 0;
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	1e5a      	subs	r2, r3, #1
 8009948:	490c      	ldr	r1, [pc, #48]	; (800997c <ButtonCGI_Handler+0x1ec>)
 800994a:	4613      	mov	r3, r2
 800994c:	005b      	lsls	r3, r3, #1
 800994e:	4413      	add	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	440b      	add	r3, r1
 8009954:	3308      	adds	r3, #8
 8009956:	2200      	movs	r2, #0
 8009958:	601a      	str	r2, [r3, #0]
	}

	/* login succeeded */
	if(1){
		//printf("SSID OK \n");
		restartSSID();
 800995a:	f7fe fd57 	bl	800840c <restartSSID>
		return "/tabbuttom.shtml"; //
 800995e:	4b0a      	ldr	r3, [pc, #40]	; (8009988 <ButtonCGI_Handler+0x1f8>)
	} else {
		printf("SSID Failed \n");
		memset(randomSSID, '\0', sizeof(randomSSID));
		return "/login.shtml";
	}
}
 8009960:	4618      	mov	r0, r3
 8009962:	3728      	adds	r7, #40	; 0x28
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	0802c234 	.word	0x0802c234
 800996c:	20001368 	.word	0x20001368
 8009970:	0802c8c0 	.word	0x0802c8c0
 8009974:	0802c8c8 	.word	0x0802c8c8
 8009978:	0802c8d0 	.word	0x0802c8d0
 800997c:	20005c60 	.word	0x20005c60
 8009980:	2000d154 	.word	0x2000d154
 8009984:	0802c8d4 	.word	0x0802c8d4
 8009988:	0802c770 	.word	0x0802c770

0800998c <SettingCGI_Handler>:

// settings.shtml Handler (Index 5)
const char* SettingCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
 8009998:	603b      	str	r3, [r7, #0]


	if (iIndex == 5) {
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2b05      	cmp	r3, #5
 800999e:	d123      	bne.n	80099e8 <SettingCGI_Handler+0x5c>
		for (int i = 0; i < iNumParams; i++) {
 80099a0:	2300      	movs	r3, #0
 80099a2:	617b      	str	r3, [r7, #20]
 80099a4:	e01c      	b.n	80099e0 <SettingCGI_Handler+0x54>
			if (strcmp(pcParam[i], "ssid") == 0)
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	4413      	add	r3, r2
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4915      	ldr	r1, [pc, #84]	; (8009a08 <SettingCGI_Handler+0x7c>)
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7f6 fc0c 	bl	80001d0 <strcmp>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10d      	bne.n	80099da <SettingCGI_Handler+0x4e>
			{
				memset(ssid, '\0', sizeof(ssid));
 80099be:	221b      	movs	r2, #27
 80099c0:	2100      	movs	r1, #0
 80099c2:	4812      	ldr	r0, [pc, #72]	; (8009a0c <SettingCGI_Handler+0x80>)
 80099c4:	f01c fe18 	bl	80265f8 <memset>
				strcpy(ssid, pcValue[i]);
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	4413      	add	r3, r2
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4619      	mov	r1, r3
 80099d4:	480d      	ldr	r0, [pc, #52]	; (8009a0c <SettingCGI_Handler+0x80>)
 80099d6:	f01d fb70 	bl	80270ba <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	3301      	adds	r3, #1
 80099de:	617b      	str	r3, [r7, #20]
 80099e0:	697a      	ldr	r2, [r7, #20]
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	dbde      	blt.n	80099a6 <SettingCGI_Handler+0x1a>
		}
	}

	/* login succeeded */
	if(1){
		printf("SSID OK \n");
 80099e8:	4809      	ldr	r0, [pc, #36]	; (8009a10 <SettingCGI_Handler+0x84>)
 80099ea:	f01d f9bb 	bl	8026d64 <puts>
		restartSSID();
 80099ee:	f7fe fd0d 	bl	800840c <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 80099f2:	221b      	movs	r2, #27
 80099f4:	2100      	movs	r1, #0
 80099f6:	4805      	ldr	r0, [pc, #20]	; (8009a0c <SettingCGI_Handler+0x80>)
 80099f8:	f01c fdfe 	bl	80265f8 <memset>
		return "/settings.shtml"; //
 80099fc:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <SettingCGI_Handler+0x88>)
		printf("SSID Failed \n");
		memset(randomSSID, '\0', sizeof(randomSSID));
		return "/login.shtml";
	}

}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3718      	adds	r7, #24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	0802c234 	.word	0x0802c234
 8009a0c:	20001368 	.word	0x20001368
 8009a10:	0802c8e4 	.word	0x0802c8e4
 8009a14:	0802c784 	.word	0x0802c784

08009a18 <TimerCGI_Handler>:

// timers.shtml Handler (Index 6)
const char* TimerCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
 8009a24:	603b      	str	r3, [r7, #0]


	if (iIndex == 6) {
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2b06      	cmp	r3, #6
 8009a2a:	d123      	bne.n	8009a74 <TimerCGI_Handler+0x5c>
		for (int i = 0; i < iNumParams; i++) {
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	617b      	str	r3, [r7, #20]
 8009a30:	e01c      	b.n	8009a6c <TimerCGI_Handler+0x54>
			if (strcmp(pcParam[i], "ssid") == 0)
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	4413      	add	r3, r2
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4911      	ldr	r1, [pc, #68]	; (8009a84 <TimerCGI_Handler+0x6c>)
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7f6 fbc6 	bl	80001d0 <strcmp>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d10d      	bne.n	8009a66 <TimerCGI_Handler+0x4e>
			{
				memset(ssid, '\0', sizeof(ssid));
 8009a4a:	221b      	movs	r2, #27
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	480e      	ldr	r0, [pc, #56]	; (8009a88 <TimerCGI_Handler+0x70>)
 8009a50:	f01c fdd2 	bl	80265f8 <memset>
				strcpy(ssid, pcValue[i]);
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	683a      	ldr	r2, [r7, #0]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4619      	mov	r1, r3
 8009a60:	4809      	ldr	r0, [pc, #36]	; (8009a88 <TimerCGI_Handler+0x70>)
 8009a62:	f01d fb2a 	bl	80270ba <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	617b      	str	r3, [r7, #20]
 8009a6c:	697a      	ldr	r2, [r7, #20]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	dbde      	blt.n	8009a32 <TimerCGI_Handler+0x1a>
	}

	/* login succeeded */
	if(1){
		//printf("SSID OK \n");
		restartSSID();
 8009a74:	f7fe fcca 	bl	800840c <restartSSID>
		return "/timers.shtml"; //
 8009a78:	4b04      	ldr	r3, [pc, #16]	; (8009a8c <TimerCGI_Handler+0x74>)
	} else {
		printf("SSID Failed \n");
		memset(randomSSID, '\0', sizeof(randomSSID));
		return "/login.shtml";
	}
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	0802c234 	.word	0x0802c234
 8009a88:	20001368 	.word	0x20001368
 8009a8c:	0802c794 	.word	0x0802c794

08009a90 <LogoutCGI_Handler>:

// logout.shtml Handler logout (Index 7)
const char* LogoutCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	603b      	str	r3, [r7, #0]

	if (iIndex == 7) {
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2b07      	cmp	r3, #7
 8009aa2:	d104      	bne.n	8009aae <LogoutCGI_Handler+0x1e>
		memset(randomSSID, '\0', sizeof(randomSSID));
 8009aa4:	221b      	movs	r2, #27
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	4803      	ldr	r0, [pc, #12]	; (8009ab8 <LogoutCGI_Handler+0x28>)
 8009aaa:	f01c fda5 	bl	80265f8 <memset>
	}

	return "/login.shtml";
 8009aae:	4b03      	ldr	r3, [pc, #12]	; (8009abc <LogoutCGI_Handler+0x2c>)
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	2000134c 	.word	0x2000134c
 8009abc:	0802c880 	.word	0x0802c880

08009ac0 <TabjsonCGI_Handler>:


// tabjson.shtml Handler table json (Index 8)
const char* TabjsonCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b086      	sub	sp, #24
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
 8009acc:	603b      	str	r3, [r7, #0]

	if (iIndex == 8) {
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2b08      	cmp	r3, #8
 8009ad2:	d159      	bne.n	8009b88 <TabjsonCGI_Handler+0xc8>
		for (int i = 0; i < iNumParams; i++) {
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	617b      	str	r3, [r7, #20]
 8009ad8:	e052      	b.n	8009b80 <TabjsonCGI_Handler+0xc0>
			if (strcmp(pcParam[i], "ssid") == 0)
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	492c      	ldr	r1, [pc, #176]	; (8009b98 <TabjsonCGI_Handler+0xd8>)
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7f6 fb72 	bl	80001d0 <strcmp>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10d      	bne.n	8009b0e <TabjsonCGI_Handler+0x4e>
			{
				memset(ssid, '\0', sizeof(ssid));
 8009af2:	221b      	movs	r2, #27
 8009af4:	2100      	movs	r1, #0
 8009af6:	4829      	ldr	r0, [pc, #164]	; (8009b9c <TabjsonCGI_Handler+0xdc>)
 8009af8:	f01c fd7e 	bl	80265f8 <memset>
				strcpy(ssid, pcValue[i]);
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	683a      	ldr	r2, [r7, #0]
 8009b02:	4413      	add	r3, r2
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4619      	mov	r1, r3
 8009b08:	4824      	ldr	r0, [pc, #144]	; (8009b9c <TabjsonCGI_Handler+0xdc>)
 8009b0a:	f01d fad6 	bl	80270ba <strcpy>
			}
			if (strcmp(pcParam[i], "tab") == 0)
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	4413      	add	r3, r2
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4921      	ldr	r1, [pc, #132]	; (8009ba0 <TabjsonCGI_Handler+0xe0>)
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7f6 fb58 	bl	80001d0 <strcmp>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d129      	bne.n	8009b7a <TabjsonCGI_Handler+0xba>
			{
				tab = atoi(pcValue[i]);
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f01c fae3 	bl	80260fc <atoi>
 8009b36:	4603      	mov	r3, r0
 8009b38:	b2da      	uxtb	r2, r3
 8009b3a:	4b1a      	ldr	r3, [pc, #104]	; (8009ba4 <TabjsonCGI_Handler+0xe4>)
 8009b3c:	701a      	strb	r2, [r3, #0]
				if(tab == 2)
 8009b3e:	4b19      	ldr	r3, [pc, #100]	; (8009ba4 <TabjsonCGI_Handler+0xe4>)
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d10a      	bne.n	8009b5c <TabjsonCGI_Handler+0x9c>
				{
					numTabLine = MultiPartTabCount(1,NUMPIN-1, numTabLine);
 8009b46:	4b18      	ldr	r3, [pc, #96]	; (8009ba8 <TabjsonCGI_Handler+0xe8>)
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	2104      	movs	r1, #4
 8009b4e:	2001      	movs	r0, #1
 8009b50:	f7fe fc68 	bl	8008424 <MultiPartTabCount>
 8009b54:	4603      	mov	r3, r0
 8009b56:	b2da      	uxtb	r2, r3
 8009b58:	4b13      	ldr	r3, [pc, #76]	; (8009ba8 <TabjsonCGI_Handler+0xe8>)
 8009b5a:	701a      	strb	r2, [r3, #0]
				}
				if(tab == 3)
 8009b5c:	4b11      	ldr	r3, [pc, #68]	; (8009ba4 <TabjsonCGI_Handler+0xe4>)
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	2b03      	cmp	r3, #3
 8009b62:	d10a      	bne.n	8009b7a <TabjsonCGI_Handler+0xba>
				{
					numTabLine = MultiPartTabCount(2,NUMPIN-1, numTabLine);
 8009b64:	4b10      	ldr	r3, [pc, #64]	; (8009ba8 <TabjsonCGI_Handler+0xe8>)
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	2104      	movs	r1, #4
 8009b6c:	2002      	movs	r0, #2
 8009b6e:	f7fe fc59 	bl	8008424 <MultiPartTabCount>
 8009b72:	4603      	mov	r3, r0
 8009b74:	b2da      	uxtb	r2, r3
 8009b76:	4b0c      	ldr	r3, [pc, #48]	; (8009ba8 <TabjsonCGI_Handler+0xe8>)
 8009b78:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < iNumParams; i++) {
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	617b      	str	r3, [r7, #20]
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	dba8      	blt.n	8009ada <TabjsonCGI_Handler+0x1a>
	}

	/* login succeeded */
	if(1){
		//printf("SSID OK \n");
		restartSSID();
 8009b88:	f7fe fc40 	bl	800840c <restartSSID>
		return "/tabjson.shtml"; //
 8009b8c:	4b07      	ldr	r3, [pc, #28]	; (8009bac <TabjsonCGI_Handler+0xec>)
	} else {
		printf("SSID Failed \n");
		memset(randomSSID, '\0', sizeof(randomSSID));
		return "/login.shtml";
	}
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3718      	adds	r7, #24
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	0802c234 	.word	0x0802c234
 8009b9c:	20001368 	.word	0x20001368
 8009ba0:	0802c8f0 	.word	0x0802c8f0
 8009ba4:	20001345 	.word	0x20001345
 8009ba8:	20001347 	.word	0x20001347
 8009bac:	0802c7b4 	.word	0x0802c7b4

08009bb0 <SelectSetCGI_Handler>:


// selectset.shtml Handler (Index 9)
const char* SelectSetCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b088      	sub	sp, #32
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
 8009bbc:	603b      	str	r3, [r7, #0]

	int varid;
	int val;

	if (iIndex == 9) {
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2b09      	cmp	r3, #9
 8009bc2:	d171      	bne.n	8009ca8 <SelectSetCGI_Handler+0xf8>
		for (int i = 0; i < iNumParams; i++) {
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	617b      	str	r3, [r7, #20]
 8009bc8:	e046      	b.n	8009c58 <SelectSetCGI_Handler+0xa8>
			if (strcmp(pcParam[i], "ssid") == 0)
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4942      	ldr	r1, [pc, #264]	; (8009ce0 <SelectSetCGI_Handler+0x130>)
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7f6 fafa 	bl	80001d0 <strcmp>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10d      	bne.n	8009bfe <SelectSetCGI_Handler+0x4e>
			{
				memset(ssid, '\0', sizeof(ssid));
 8009be2:	221b      	movs	r2, #27
 8009be4:	2100      	movs	r1, #0
 8009be6:	483f      	ldr	r0, [pc, #252]	; (8009ce4 <SelectSetCGI_Handler+0x134>)
 8009be8:	f01c fd06 	bl	80265f8 <memset>
				strcpy(ssid, pcValue[i]);
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	483a      	ldr	r0, [pc, #232]	; (8009ce4 <SelectSetCGI_Handler+0x134>)
 8009bfa:	f01d fa5e 	bl	80270ba <strcpy>
			}
			if (strcmp(pcParam[i], "id") == 0)
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	4413      	add	r3, r2
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4937      	ldr	r1, [pc, #220]	; (8009ce8 <SelectSetCGI_Handler+0x138>)
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7f6 fae0 	bl	80001d0 <strcmp>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d108      	bne.n	8009c28 <SelectSetCGI_Handler+0x78>
			{
				varid = atoi(pcValue[i]);
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4618      	mov	r0, r3
 8009c22:	f01c fa6b 	bl	80260fc <atoi>
 8009c26:	61f8      	str	r0, [r7, #28]
			}
			if (strcmp(pcParam[i], "val") == 0)
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	4413      	add	r3, r2
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	492e      	ldr	r1, [pc, #184]	; (8009cec <SelectSetCGI_Handler+0x13c>)
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7f6 facb 	bl	80001d0 <strcmp>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d108      	bne.n	8009c52 <SelectSetCGI_Handler+0xa2>
			{
				val = atoi(pcValue[i]);
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	683a      	ldr	r2, [r7, #0]
 8009c46:	4413      	add	r3, r2
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f01c fa56 	bl	80260fc <atoi>
 8009c50:	61b8      	str	r0, [r7, #24]
		for (int i = 0; i < iNumParams; i++) {
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	3301      	adds	r3, #1
 8009c56:	617b      	str	r3, [r7, #20]
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	dbb4      	blt.n	8009bca <SelectSetCGI_Handler+0x1a>
			}
		}
		PinsConf[varid].topin = val;
 8009c60:	4923      	ldr	r1, [pc, #140]	; (8009cf0 <SelectSetCGI_Handler+0x140>)
 8009c62:	69fa      	ldr	r2, [r7, #28]
 8009c64:	4613      	mov	r3, r2
 8009c66:	00db      	lsls	r3, r3, #3
 8009c68:	4413      	add	r3, r2
 8009c6a:	011b      	lsls	r3, r3, #4
 8009c6c:	440b      	add	r3, r1
 8009c6e:	69ba      	ldr	r2, [r7, #24]
 8009c70:	601a      	str	r2, [r3, #0]
		if (val == 1 || val == 2){
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d002      	beq.n	8009c7e <SelectSetCGI_Handler+0xce>
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d10a      	bne.n	8009c94 <SelectSetCGI_Handler+0xe4>
			PinsConf[varid].onoff = 1;
 8009c7e:	491c      	ldr	r1, [pc, #112]	; (8009cf0 <SelectSetCGI_Handler+0x140>)
 8009c80:	69fa      	ldr	r2, [r7, #28]
 8009c82:	4613      	mov	r3, r2
 8009c84:	00db      	lsls	r3, r3, #3
 8009c86:	4413      	add	r3, r2
 8009c88:	011b      	lsls	r3, r3, #4
 8009c8a:	440b      	add	r3, r1
 8009c8c:	3360      	adds	r3, #96	; 0x60
 8009c8e:	2201      	movs	r2, #1
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	e009      	b.n	8009ca8 <SelectSetCGI_Handler+0xf8>
		}else{
			PinsConf[varid].onoff = 0;
 8009c94:	4916      	ldr	r1, [pc, #88]	; (8009cf0 <SelectSetCGI_Handler+0x140>)
 8009c96:	69fa      	ldr	r2, [r7, #28]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	00db      	lsls	r3, r3, #3
 8009c9c:	4413      	add	r3, r2
 8009c9e:	011b      	lsls	r3, r3, #4
 8009ca0:	440b      	add	r3, r1
 8009ca2:	3360      	adds	r3, #96	; 0x60
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	601a      	str	r2, [r3, #0]
			//@todo Обнулить PinsConf
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 8009ca8:	4912      	ldr	r1, [pc, #72]	; (8009cf4 <SelectSetCGI_Handler+0x144>)
 8009caa:	480e      	ldr	r0, [pc, #56]	; (8009ce4 <SelectSetCGI_Handler+0x134>)
 8009cac:	f7f6 fa90 	bl	80001d0 <strcmp>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d107      	bne.n	8009cc6 <SelectSetCGI_Handler+0x116>
 8009cb6:	4b0f      	ldr	r3, [pc, #60]	; (8009cf4 <SelectSetCGI_Handler+0x144>)
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <SelectSetCGI_Handler+0x116>
		//printf("SSID OK \n");
		restartSSID();
 8009cbe:	f7fe fba5 	bl	800840c <restartSSID>
		return "/selectset.shtml"; //
 8009cc2:	4b0d      	ldr	r3, [pc, #52]	; (8009cf8 <SelectSetCGI_Handler+0x148>)
 8009cc4:	e008      	b.n	8009cd8 <SelectSetCGI_Handler+0x128>
	} else {
		printf("SSID Failed \n");
 8009cc6:	480d      	ldr	r0, [pc, #52]	; (8009cfc <SelectSetCGI_Handler+0x14c>)
 8009cc8:	f01d f84c 	bl	8026d64 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 8009ccc:	221b      	movs	r2, #27
 8009cce:	2100      	movs	r1, #0
 8009cd0:	4808      	ldr	r0, [pc, #32]	; (8009cf4 <SelectSetCGI_Handler+0x144>)
 8009cd2:	f01c fc91 	bl	80265f8 <memset>
		return "/login.shtml";
 8009cd6:	4b0a      	ldr	r3, [pc, #40]	; (8009d00 <SelectSetCGI_Handler+0x150>)
	}

}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3720      	adds	r7, #32
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	0802c234 	.word	0x0802c234
 8009ce4:	20001368 	.word	0x20001368
 8009ce8:	0802c520 	.word	0x0802c520
 8009cec:	0802c8f4 	.word	0x0802c8f4
 8009cf0:	20005c9c 	.word	0x20005c9c
 8009cf4:	2000134c 	.word	0x2000134c
 8009cf8:	0802c7c4 	.word	0x0802c7c4
 8009cfc:	0802c870 	.word	0x0802c870
 8009d00:	0802c880 	.word	0x0802c880

08009d04 <FormRelayCGI_Handler>:


// formbuttom.shtml Handler (Index 10)
const char* FormRelayCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
 8009d10:	603b      	str	r3, [r7, #0]

	id = 0;
 8009d12:	4b3d      	ldr	r3, [pc, #244]	; (8009e08 <FormRelayCGI_Handler+0x104>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	701a      	strb	r2, [r3, #0]
	tab = 0;
 8009d18:	4b3c      	ldr	r3, [pc, #240]	; (8009e0c <FormRelayCGI_Handler+0x108>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	701a      	strb	r2, [r3, #0]

	if (iIndex == 10) {
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2b0a      	cmp	r3, #10
 8009d22:	d155      	bne.n	8009dd0 <FormRelayCGI_Handler+0xcc>
		for (int i = 0; i < iNumParams; i++) {
 8009d24:	2300      	movs	r3, #0
 8009d26:	617b      	str	r3, [r7, #20]
 8009d28:	e04e      	b.n	8009dc8 <FormRelayCGI_Handler+0xc4>
			if (strcmp(pcParam[i], "ssid") == 0)
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	4413      	add	r3, r2
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4936      	ldr	r1, [pc, #216]	; (8009e10 <FormRelayCGI_Handler+0x10c>)
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7f6 fa4a 	bl	80001d0 <strcmp>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10d      	bne.n	8009d5e <FormRelayCGI_Handler+0x5a>
			{
				memset(ssid, '\0', sizeof(ssid));
 8009d42:	221b      	movs	r2, #27
 8009d44:	2100      	movs	r1, #0
 8009d46:	4833      	ldr	r0, [pc, #204]	; (8009e14 <FormRelayCGI_Handler+0x110>)
 8009d48:	f01c fc56 	bl	80265f8 <memset>
				strcpy(ssid, pcValue[i]);
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	683a      	ldr	r2, [r7, #0]
 8009d52:	4413      	add	r3, r2
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4619      	mov	r1, r3
 8009d58:	482e      	ldr	r0, [pc, #184]	; (8009e14 <FormRelayCGI_Handler+0x110>)
 8009d5a:	f01d f9ae 	bl	80270ba <strcpy>
			}
			if (strcmp(pcParam[i], "id") == 0)
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	4413      	add	r3, r2
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	492b      	ldr	r1, [pc, #172]	; (8009e18 <FormRelayCGI_Handler+0x114>)
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7f6 fa30 	bl	80001d0 <strcmp>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10d      	bne.n	8009d92 <FormRelayCGI_Handler+0x8e>
			{
				id = atoi(pcValue[i]) - 1;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f01c f9bb 	bl	80260fc <atoi>
 8009d86:	4603      	mov	r3, r0
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	b2da      	uxtb	r2, r3
 8009d8e:	4b1e      	ldr	r3, [pc, #120]	; (8009e08 <FormRelayCGI_Handler+0x104>)
 8009d90:	701a      	strb	r2, [r3, #0]
			}
			if (strcmp(pcParam[i], "tab") == 0)
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	4413      	add	r3, r2
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	491f      	ldr	r1, [pc, #124]	; (8009e1c <FormRelayCGI_Handler+0x118>)
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7f6 fa16 	bl	80001d0 <strcmp>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10b      	bne.n	8009dc2 <FormRelayCGI_Handler+0xbe>
			{
				tab = atoi(pcValue[i]);
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	4413      	add	r3, r2
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f01c f9a1 	bl	80260fc <atoi>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	b2da      	uxtb	r2, r3
 8009dbe:	4b13      	ldr	r3, [pc, #76]	; (8009e0c <FormRelayCGI_Handler+0x108>)
 8009dc0:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < iNumParams; i++) {
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	617b      	str	r3, [r7, #20]
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	dbac      	blt.n	8009d2a <FormRelayCGI_Handler+0x26>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 8009dd0:	4913      	ldr	r1, [pc, #76]	; (8009e20 <FormRelayCGI_Handler+0x11c>)
 8009dd2:	4810      	ldr	r0, [pc, #64]	; (8009e14 <FormRelayCGI_Handler+0x110>)
 8009dd4:	f7f6 f9fc 	bl	80001d0 <strcmp>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d107      	bne.n	8009dee <FormRelayCGI_Handler+0xea>
 8009dde:	4b10      	ldr	r3, [pc, #64]	; (8009e20 <FormRelayCGI_Handler+0x11c>)
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d003      	beq.n	8009dee <FormRelayCGI_Handler+0xea>
		//printf("SSID OK \n");
		restartSSID();
 8009de6:	f7fe fb11 	bl	800840c <restartSSID>
		return "/formrelay.shtml"; //
 8009dea:	4b0e      	ldr	r3, [pc, #56]	; (8009e24 <FormRelayCGI_Handler+0x120>)
 8009dec:	e008      	b.n	8009e00 <FormRelayCGI_Handler+0xfc>
	} else {
		printf("SSID Failed \n");
 8009dee:	480e      	ldr	r0, [pc, #56]	; (8009e28 <FormRelayCGI_Handler+0x124>)
 8009df0:	f01c ffb8 	bl	8026d64 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 8009df4:	221b      	movs	r2, #27
 8009df6:	2100      	movs	r1, #0
 8009df8:	4809      	ldr	r0, [pc, #36]	; (8009e20 <FormRelayCGI_Handler+0x11c>)
 8009dfa:	f01c fbfd 	bl	80265f8 <memset>
		return "/login.shtml";
 8009dfe:	4b0b      	ldr	r3, [pc, #44]	; (8009e2c <FormRelayCGI_Handler+0x128>)
	}
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3718      	adds	r7, #24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	20001346 	.word	0x20001346
 8009e0c:	20001345 	.word	0x20001345
 8009e10:	0802c234 	.word	0x0802c234
 8009e14:	20001368 	.word	0x20001368
 8009e18:	0802c520 	.word	0x0802c520
 8009e1c:	0802c8f0 	.word	0x0802c8f0
 8009e20:	2000134c 	.word	0x2000134c
 8009e24:	0802c7d8 	.word	0x0802c7d8
 8009e28:	0802c870 	.word	0x0802c870
 8009e2c:	0802c880 	.word	0x0802c880

08009e30 <FormButtonCGI_Handler>:

// formbuttom.shtml Handler (Index 11)
const char* FormButtonCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	607a      	str	r2, [r7, #4]
 8009e3c:	603b      	str	r3, [r7, #0]

	id = 0;
 8009e3e:	4b3d      	ldr	r3, [pc, #244]	; (8009f34 <FormButtonCGI_Handler+0x104>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	701a      	strb	r2, [r3, #0]
	tab = 0;
 8009e44:	4b3c      	ldr	r3, [pc, #240]	; (8009f38 <FormButtonCGI_Handler+0x108>)
 8009e46:	2200      	movs	r2, #0
 8009e48:	701a      	strb	r2, [r3, #0]

	if (iIndex == 11) {
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2b0b      	cmp	r3, #11
 8009e4e:	d155      	bne.n	8009efc <FormButtonCGI_Handler+0xcc>
		for (int i = 0; i < iNumParams; i++) {
 8009e50:	2300      	movs	r3, #0
 8009e52:	617b      	str	r3, [r7, #20]
 8009e54:	e04e      	b.n	8009ef4 <FormButtonCGI_Handler+0xc4>
			if (strcmp(pcParam[i], "ssid") == 0)
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4936      	ldr	r1, [pc, #216]	; (8009f3c <FormButtonCGI_Handler+0x10c>)
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7f6 f9b4 	bl	80001d0 <strcmp>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10d      	bne.n	8009e8a <FormButtonCGI_Handler+0x5a>
			{
				memset(ssid, '\0', sizeof(ssid));
 8009e6e:	221b      	movs	r2, #27
 8009e70:	2100      	movs	r1, #0
 8009e72:	4833      	ldr	r0, [pc, #204]	; (8009f40 <FormButtonCGI_Handler+0x110>)
 8009e74:	f01c fbc0 	bl	80265f8 <memset>
				strcpy(ssid, pcValue[i]);
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	683a      	ldr	r2, [r7, #0]
 8009e7e:	4413      	add	r3, r2
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4619      	mov	r1, r3
 8009e84:	482e      	ldr	r0, [pc, #184]	; (8009f40 <FormButtonCGI_Handler+0x110>)
 8009e86:	f01d f918 	bl	80270ba <strcpy>
			}
			if (strcmp(pcParam[i], "id") == 0)
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	4413      	add	r3, r2
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	492b      	ldr	r1, [pc, #172]	; (8009f44 <FormButtonCGI_Handler+0x114>)
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7f6 f99a 	bl	80001d0 <strcmp>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10d      	bne.n	8009ebe <FormButtonCGI_Handler+0x8e>
			{
				id = atoi(pcValue[i]) - 1;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4618      	mov	r0, r3
 8009eae:	f01c f925 	bl	80260fc <atoi>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	b2da      	uxtb	r2, r3
 8009eba:	4b1e      	ldr	r3, [pc, #120]	; (8009f34 <FormButtonCGI_Handler+0x104>)
 8009ebc:	701a      	strb	r2, [r3, #0]
			}
			if (strcmp(pcParam[i], "tab") == 0)
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	491f      	ldr	r1, [pc, #124]	; (8009f48 <FormButtonCGI_Handler+0x118>)
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7f6 f980 	bl	80001d0 <strcmp>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d10b      	bne.n	8009eee <FormButtonCGI_Handler+0xbe>
			{
				tab = atoi(pcValue[i]);
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	4413      	add	r3, r2
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f01c f90b 	bl	80260fc <atoi>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	4b13      	ldr	r3, [pc, #76]	; (8009f38 <FormButtonCGI_Handler+0x108>)
 8009eec:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < iNumParams; i++) {
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	617b      	str	r3, [r7, #20]
 8009ef4:	697a      	ldr	r2, [r7, #20]
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	dbac      	blt.n	8009e56 <FormButtonCGI_Handler+0x26>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 8009efc:	4913      	ldr	r1, [pc, #76]	; (8009f4c <FormButtonCGI_Handler+0x11c>)
 8009efe:	4810      	ldr	r0, [pc, #64]	; (8009f40 <FormButtonCGI_Handler+0x110>)
 8009f00:	f7f6 f966 	bl	80001d0 <strcmp>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d107      	bne.n	8009f1a <FormButtonCGI_Handler+0xea>
 8009f0a:	4b10      	ldr	r3, [pc, #64]	; (8009f4c <FormButtonCGI_Handler+0x11c>)
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d003      	beq.n	8009f1a <FormButtonCGI_Handler+0xea>
		//printf("SSID OK \n");
		restartSSID();
 8009f12:	f7fe fa7b 	bl	800840c <restartSSID>
		return "/formbuttom.shtml"; //
 8009f16:	4b0e      	ldr	r3, [pc, #56]	; (8009f50 <FormButtonCGI_Handler+0x120>)
 8009f18:	e008      	b.n	8009f2c <FormButtonCGI_Handler+0xfc>
	} else {
		printf("SSID Failed \n");
 8009f1a:	480e      	ldr	r0, [pc, #56]	; (8009f54 <FormButtonCGI_Handler+0x124>)
 8009f1c:	f01c ff22 	bl	8026d64 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 8009f20:	221b      	movs	r2, #27
 8009f22:	2100      	movs	r1, #0
 8009f24:	4809      	ldr	r0, [pc, #36]	; (8009f4c <FormButtonCGI_Handler+0x11c>)
 8009f26:	f01c fb67 	bl	80265f8 <memset>
		return "/login.shtml";
 8009f2a:	4b0b      	ldr	r3, [pc, #44]	; (8009f58 <FormButtonCGI_Handler+0x128>)
	}
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3718      	adds	r7, #24
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	20001346 	.word	0x20001346
 8009f38:	20001345 	.word	0x20001345
 8009f3c:	0802c234 	.word	0x0802c234
 8009f40:	20001368 	.word	0x20001368
 8009f44:	0802c520 	.word	0x0802c520
 8009f48:	0802c8f0 	.word	0x0802c8f0
 8009f4c:	2000134c 	.word	0x2000134c
 8009f50:	0802c7ec 	.word	0x0802c7ec
 8009f54:	0802c870 	.word	0x0802c870
 8009f58:	0802c880 	.word	0x0802c880

08009f5c <FormPinToPinCGI_Handler>:

// formtopin.shtml Handler (Index 12)
const char* FormPinToPinCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
 8009f68:	603b      	str	r3, [r7, #0]


	if (iIndex == 12) {
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2b0c      	cmp	r3, #12
 8009f6e:	d155      	bne.n	800a01c <FormPinToPinCGI_Handler+0xc0>
		for (int i = 0; i < iNumParams; i++) {
 8009f70:	2300      	movs	r3, #0
 8009f72:	617b      	str	r3, [r7, #20]
 8009f74:	e04e      	b.n	800a014 <FormPinToPinCGI_Handler+0xb8>
			if (strcmp(pcParam[i], "ssid") == 0)
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4934      	ldr	r1, [pc, #208]	; (800a054 <FormPinToPinCGI_Handler+0xf8>)
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7f6 f924 	bl	80001d0 <strcmp>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10d      	bne.n	8009faa <FormPinToPinCGI_Handler+0x4e>
			{
				memset(ssid, '\0', sizeof(ssid));
 8009f8e:	221b      	movs	r2, #27
 8009f90:	2100      	movs	r1, #0
 8009f92:	4831      	ldr	r0, [pc, #196]	; (800a058 <FormPinToPinCGI_Handler+0xfc>)
 8009f94:	f01c fb30 	bl	80265f8 <memset>
				strcpy(ssid, pcValue[i]);
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	482c      	ldr	r0, [pc, #176]	; (800a058 <FormPinToPinCGI_Handler+0xfc>)
 8009fa6:	f01d f888 	bl	80270ba <strcpy>
			}
			if (strcmp(pcParam[i], "id") == 0)
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4929      	ldr	r1, [pc, #164]	; (800a05c <FormPinToPinCGI_Handler+0x100>)
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7f6 f90a 	bl	80001d0 <strcmp>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10d      	bne.n	8009fde <FormPinToPinCGI_Handler+0x82>
			{
				id = atoi(pcValue[i]) - 1;
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	683a      	ldr	r2, [r7, #0]
 8009fc8:	4413      	add	r3, r2
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f01c f895 	bl	80260fc <atoi>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	4b21      	ldr	r3, [pc, #132]	; (800a060 <FormPinToPinCGI_Handler+0x104>)
 8009fdc:	701a      	strb	r2, [r3, #0]
			}
			if (strcmp(pcParam[i], "tab") == 0)
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	491e      	ldr	r1, [pc, #120]	; (800a064 <FormPinToPinCGI_Handler+0x108>)
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7f6 f8f0 	bl	80001d0 <strcmp>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10b      	bne.n	800a00e <FormPinToPinCGI_Handler+0xb2>
			{
				tab = atoi(pcValue[i]);
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4618      	mov	r0, r3
 800a002:	f01c f87b 	bl	80260fc <atoi>
 800a006:	4603      	mov	r3, r0
 800a008:	b2da      	uxtb	r2, r3
 800a00a:	4b17      	ldr	r3, [pc, #92]	; (800a068 <FormPinToPinCGI_Handler+0x10c>)
 800a00c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < iNumParams; i++) {
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	3301      	adds	r3, #1
 800a012:	617b      	str	r3, [r7, #20]
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	429a      	cmp	r2, r3
 800a01a:	dbac      	blt.n	8009f76 <FormPinToPinCGI_Handler+0x1a>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 800a01c:	4913      	ldr	r1, [pc, #76]	; (800a06c <FormPinToPinCGI_Handler+0x110>)
 800a01e:	480e      	ldr	r0, [pc, #56]	; (800a058 <FormPinToPinCGI_Handler+0xfc>)
 800a020:	f7f6 f8d6 	bl	80001d0 <strcmp>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d107      	bne.n	800a03a <FormPinToPinCGI_Handler+0xde>
 800a02a:	4b10      	ldr	r3, [pc, #64]	; (800a06c <FormPinToPinCGI_Handler+0x110>)
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d003      	beq.n	800a03a <FormPinToPinCGI_Handler+0xde>
		//printf("SSID OK \n");
		restartSSID();
 800a032:	f7fe f9eb 	bl	800840c <restartSSID>
		return "/formtopin.shtml"; //
 800a036:	4b0e      	ldr	r3, [pc, #56]	; (800a070 <FormPinToPinCGI_Handler+0x114>)
 800a038:	e008      	b.n	800a04c <FormPinToPinCGI_Handler+0xf0>
	} else {
		printf("SSID Failed \n");
 800a03a:	480e      	ldr	r0, [pc, #56]	; (800a074 <FormPinToPinCGI_Handler+0x118>)
 800a03c:	f01c fe92 	bl	8026d64 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 800a040:	221b      	movs	r2, #27
 800a042:	2100      	movs	r1, #0
 800a044:	4809      	ldr	r0, [pc, #36]	; (800a06c <FormPinToPinCGI_Handler+0x110>)
 800a046:	f01c fad7 	bl	80265f8 <memset>
		return "/login.shtml";
 800a04a:	4b0b      	ldr	r3, [pc, #44]	; (800a078 <FormPinToPinCGI_Handler+0x11c>)
	}
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	0802c234 	.word	0x0802c234
 800a058:	20001368 	.word	0x20001368
 800a05c:	0802c520 	.word	0x0802c520
 800a060:	20001346 	.word	0x20001346
 800a064:	0802c8f0 	.word	0x0802c8f0
 800a068:	20001345 	.word	0x20001345
 800a06c:	2000134c 	.word	0x2000134c
 800a070:	0802c800 	.word	0x0802c800
 800a074:	0802c870 	.word	0x0802c870
 800a078:	0802c880 	.word	0x0802c880

0800a07c <OnOffSetCGI_Handler>:


// onoffset.shtml Handler (Index 13)
const char* OnOffSetCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b088      	sub	sp, #32
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
 800a088:	603b      	str	r3, [r7, #0]

	int varid;
	int val;

	if (iIndex == 13) {
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2b0d      	cmp	r3, #13
 800a08e:	d158      	bne.n	800a142 <OnOffSetCGI_Handler+0xc6>
		for (int i = 0; i < iNumParams; i++) {
 800a090:	2300      	movs	r3, #0
 800a092:	617b      	str	r3, [r7, #20]
 800a094:	e046      	b.n	800a124 <OnOffSetCGI_Handler+0xa8>
			if (strcmp(pcParam[i], "ssid") == 0)
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	4413      	add	r3, r2
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4936      	ldr	r1, [pc, #216]	; (800a17c <OnOffSetCGI_Handler+0x100>)
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7f6 f894 	bl	80001d0 <strcmp>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10d      	bne.n	800a0ca <OnOffSetCGI_Handler+0x4e>
			{
				memset(ssid, '\0', sizeof(ssid));
 800a0ae:	221b      	movs	r2, #27
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	4833      	ldr	r0, [pc, #204]	; (800a180 <OnOffSetCGI_Handler+0x104>)
 800a0b4:	f01c faa0 	bl	80265f8 <memset>
				strcpy(ssid, pcValue[i]);
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	683a      	ldr	r2, [r7, #0]
 800a0be:	4413      	add	r3, r2
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	482e      	ldr	r0, [pc, #184]	; (800a180 <OnOffSetCGI_Handler+0x104>)
 800a0c6:	f01c fff8 	bl	80270ba <strcpy>
			}
			if (strcmp(pcParam[i], "id") == 0)
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	492b      	ldr	r1, [pc, #172]	; (800a184 <OnOffSetCGI_Handler+0x108>)
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7f6 f87a 	bl	80001d0 <strcmp>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d108      	bne.n	800a0f4 <OnOffSetCGI_Handler+0x78>
			{
				varid = atoi(pcValue[i]);
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	683a      	ldr	r2, [r7, #0]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f01c f805 	bl	80260fc <atoi>
 800a0f2:	61f8      	str	r0, [r7, #28]
			}
			if (strcmp(pcParam[i], "val") == 0)
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4922      	ldr	r1, [pc, #136]	; (800a188 <OnOffSetCGI_Handler+0x10c>)
 800a100:	4618      	mov	r0, r3
 800a102:	f7f6 f865 	bl	80001d0 <strcmp>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d108      	bne.n	800a11e <OnOffSetCGI_Handler+0xa2>
			{
				val = atoi(pcValue[i]);
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	4413      	add	r3, r2
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4618      	mov	r0, r3
 800a118:	f01b fff0 	bl	80260fc <atoi>
 800a11c:	61b8      	str	r0, [r7, #24]
		for (int i = 0; i < iNumParams; i++) {
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	3301      	adds	r3, #1
 800a122:	617b      	str	r3, [r7, #20]
 800a124:	697a      	ldr	r2, [r7, #20]
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	429a      	cmp	r2, r3
 800a12a:	dbb4      	blt.n	800a096 <OnOffSetCGI_Handler+0x1a>
			}
		}
		PinsConf[varid-1].onoff = val;
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	1e5a      	subs	r2, r3, #1
 800a130:	4916      	ldr	r1, [pc, #88]	; (800a18c <OnOffSetCGI_Handler+0x110>)
 800a132:	4613      	mov	r3, r2
 800a134:	00db      	lsls	r3, r3, #3
 800a136:	4413      	add	r3, r2
 800a138:	011b      	lsls	r3, r3, #4
 800a13a:	440b      	add	r3, r1
 800a13c:	3360      	adds	r3, #96	; 0x60
 800a13e:	69ba      	ldr	r2, [r7, #24]
 800a140:	601a      	str	r2, [r3, #0]
//			//@todo Обнулить PinsConf
//		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 800a142:	4913      	ldr	r1, [pc, #76]	; (800a190 <OnOffSetCGI_Handler+0x114>)
 800a144:	480e      	ldr	r0, [pc, #56]	; (800a180 <OnOffSetCGI_Handler+0x104>)
 800a146:	f7f6 f843 	bl	80001d0 <strcmp>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d107      	bne.n	800a160 <OnOffSetCGI_Handler+0xe4>
 800a150:	4b0f      	ldr	r3, [pc, #60]	; (800a190 <OnOffSetCGI_Handler+0x114>)
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d003      	beq.n	800a160 <OnOffSetCGI_Handler+0xe4>
		//printf("SSID OK \n");
		restartSSID();
 800a158:	f7fe f958 	bl	800840c <restartSSID>
		return "/selectset.shtml"; //
 800a15c:	4b0d      	ldr	r3, [pc, #52]	; (800a194 <OnOffSetCGI_Handler+0x118>)
 800a15e:	e008      	b.n	800a172 <OnOffSetCGI_Handler+0xf6>
	} else {
		printf("SSID Failed \n");
 800a160:	480d      	ldr	r0, [pc, #52]	; (800a198 <OnOffSetCGI_Handler+0x11c>)
 800a162:	f01c fdff 	bl	8026d64 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 800a166:	221b      	movs	r2, #27
 800a168:	2100      	movs	r1, #0
 800a16a:	4809      	ldr	r0, [pc, #36]	; (800a190 <OnOffSetCGI_Handler+0x114>)
 800a16c:	f01c fa44 	bl	80265f8 <memset>
		return "/login.shtml";
 800a170:	4b0a      	ldr	r3, [pc, #40]	; (800a19c <OnOffSetCGI_Handler+0x120>)
	}

}
 800a172:	4618      	mov	r0, r3
 800a174:	3720      	adds	r7, #32
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	0802c234 	.word	0x0802c234
 800a180:	20001368 	.word	0x20001368
 800a184:	0802c520 	.word	0x0802c520
 800a188:	0802c8f4 	.word	0x0802c8f4
 800a18c:	20005c9c 	.word	0x20005c9c
 800a190:	2000134c 	.word	0x2000134c
 800a194:	0802c7c4 	.word	0x0802c7c4
 800a198:	0802c870 	.word	0x0802c870
 800a19c:	0802c880 	.word	0x0802c880

0800a1a0 <FormjsonCGI_Handler>:


// formjson.shtml Handler table json (Index 14)
const char*  FormjsonCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
 800a1ac:	603b      	str	r3, [r7, #0]

	if (iIndex == 14) {
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2b0e      	cmp	r3, #14
 800a1b2:	d13b      	bne.n	800a22c <FormjsonCGI_Handler+0x8c>
		for (int i = 0; i < iNumParams; i++) {
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	617b      	str	r3, [r7, #20]
 800a1b8:	e034      	b.n	800a224 <FormjsonCGI_Handler+0x84>
			if (strcmp(pcParam[i], "ssid") == 0)
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4927      	ldr	r1, [pc, #156]	; (800a264 <FormjsonCGI_Handler+0xc4>)
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7f6 f802 	bl	80001d0 <strcmp>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10d      	bne.n	800a1ee <FormjsonCGI_Handler+0x4e>
			{
				memset(ssid, '\0', sizeof(ssid));
 800a1d2:	221b      	movs	r2, #27
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	4824      	ldr	r0, [pc, #144]	; (800a268 <FormjsonCGI_Handler+0xc8>)
 800a1d8:	f01c fa0e 	bl	80265f8 <memset>
				strcpy(ssid, pcValue[i]);
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	683a      	ldr	r2, [r7, #0]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	481f      	ldr	r0, [pc, #124]	; (800a268 <FormjsonCGI_Handler+0xc8>)
 800a1ea:	f01c ff66 	bl	80270ba <strcpy>
			}
			if (strcmp(pcParam[i], "tab") == 0)
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	491c      	ldr	r1, [pc, #112]	; (800a26c <FormjsonCGI_Handler+0xcc>)
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7f5 ffe8 	bl	80001d0 <strcmp>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10b      	bne.n	800a21e <FormjsonCGI_Handler+0x7e>
			{
				tab = atoi(pcValue[i]);
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	683a      	ldr	r2, [r7, #0]
 800a20c:	4413      	add	r3, r2
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4618      	mov	r0, r3
 800a212:	f01b ff73 	bl	80260fc <atoi>
 800a216:	4603      	mov	r3, r0
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	4b15      	ldr	r3, [pc, #84]	; (800a270 <FormjsonCGI_Handler+0xd0>)
 800a21c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < iNumParams; i++) {
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	3301      	adds	r3, #1
 800a222:	617b      	str	r3, [r7, #20]
 800a224:	697a      	ldr	r2, [r7, #20]
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	429a      	cmp	r2, r3
 800a22a:	dbc6      	blt.n	800a1ba <FormjsonCGI_Handler+0x1a>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 800a22c:	4911      	ldr	r1, [pc, #68]	; (800a274 <FormjsonCGI_Handler+0xd4>)
 800a22e:	480e      	ldr	r0, [pc, #56]	; (800a268 <FormjsonCGI_Handler+0xc8>)
 800a230:	f7f5 ffce 	bl	80001d0 <strcmp>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d107      	bne.n	800a24a <FormjsonCGI_Handler+0xaa>
 800a23a:	4b0e      	ldr	r3, [pc, #56]	; (800a274 <FormjsonCGI_Handler+0xd4>)
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <FormjsonCGI_Handler+0xaa>
		//printf("SSID OK \n");
		restartSSID();
 800a242:	f7fe f8e3 	bl	800840c <restartSSID>
		return "/formjson.shtml"; //
 800a246:	4b0c      	ldr	r3, [pc, #48]	; (800a278 <FormjsonCGI_Handler+0xd8>)
 800a248:	e008      	b.n	800a25c <FormjsonCGI_Handler+0xbc>
	} else {
		printf("SSID Failed \n");
 800a24a:	480c      	ldr	r0, [pc, #48]	; (800a27c <FormjsonCGI_Handler+0xdc>)
 800a24c:	f01c fd8a 	bl	8026d64 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 800a250:	221b      	movs	r2, #27
 800a252:	2100      	movs	r1, #0
 800a254:	4807      	ldr	r0, [pc, #28]	; (800a274 <FormjsonCGI_Handler+0xd4>)
 800a256:	f01c f9cf 	bl	80265f8 <memset>
		return "/login.shtml";
 800a25a:	4b09      	ldr	r3, [pc, #36]	; (800a280 <FormjsonCGI_Handler+0xe0>)
	}
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3718      	adds	r7, #24
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	0802c234 	.word	0x0802c234
 800a268:	20001368 	.word	0x20001368
 800a26c:	0802c8f0 	.word	0x0802c8f0
 800a270:	20001345 	.word	0x20001345
 800a274:	2000134c 	.word	0x2000134c
 800a278:	0802c824 	.word	0x0802c824
 800a27c:	0802c870 	.word	0x0802c870
 800a280:	0802c880 	.word	0x0802c880

0800a284 <SettingsCGI_Handler>:

// settings.shtml Handler table json (Index 15)
const char*  SettingsCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 800a284:	b580      	push	{r7, lr}
 800a286:	b086      	sub	sp, #24
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
 800a290:	603b      	str	r3, [r7, #0]

	if (iIndex == 15) {
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2b0f      	cmp	r3, #15
 800a296:	d123      	bne.n	800a2e0 <SettingsCGI_Handler+0x5c>
		for (int i = 0; i < iNumParams; i++) {
 800a298:	2300      	movs	r3, #0
 800a29a:	617b      	str	r3, [r7, #20]
 800a29c:	e01c      	b.n	800a2d8 <SettingsCGI_Handler+0x54>
			if (strcmp(pcParam[i], "ssid") == 0)
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	491b      	ldr	r1, [pc, #108]	; (800a318 <SettingsCGI_Handler+0x94>)
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7f5 ff90 	bl	80001d0 <strcmp>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10d      	bne.n	800a2d2 <SettingsCGI_Handler+0x4e>
			{
				memset(ssid, '\0', sizeof(ssid));
 800a2b6:	221b      	movs	r2, #27
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4818      	ldr	r0, [pc, #96]	; (800a31c <SettingsCGI_Handler+0x98>)
 800a2bc:	f01c f99c 	bl	80265f8 <memset>
				strcpy(ssid, pcValue[i]);
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	4813      	ldr	r0, [pc, #76]	; (800a31c <SettingsCGI_Handler+0x98>)
 800a2ce:	f01c fef4 	bl	80270ba <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	617b      	str	r3, [r7, #20]
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	dbde      	blt.n	800a29e <SettingsCGI_Handler+0x1a>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 800a2e0:	490f      	ldr	r1, [pc, #60]	; (800a320 <SettingsCGI_Handler+0x9c>)
 800a2e2:	480e      	ldr	r0, [pc, #56]	; (800a31c <SettingsCGI_Handler+0x98>)
 800a2e4:	f7f5 ff74 	bl	80001d0 <strcmp>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d107      	bne.n	800a2fe <SettingsCGI_Handler+0x7a>
 800a2ee:	4b0c      	ldr	r3, [pc, #48]	; (800a320 <SettingsCGI_Handler+0x9c>)
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d003      	beq.n	800a2fe <SettingsCGI_Handler+0x7a>
		//printf("SSID OK \n");
		restartSSID();
 800a2f6:	f7fe f889 	bl	800840c <restartSSID>
		return "/settings.shtml"; //
 800a2fa:	4b0a      	ldr	r3, [pc, #40]	; (800a324 <SettingsCGI_Handler+0xa0>)
 800a2fc:	e008      	b.n	800a310 <SettingsCGI_Handler+0x8c>
	} else {
		printf("SSID Failed \n");
 800a2fe:	480a      	ldr	r0, [pc, #40]	; (800a328 <SettingsCGI_Handler+0xa4>)
 800a300:	f01c fd30 	bl	8026d64 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 800a304:	221b      	movs	r2, #27
 800a306:	2100      	movs	r1, #0
 800a308:	4805      	ldr	r0, [pc, #20]	; (800a320 <SettingsCGI_Handler+0x9c>)
 800a30a:	f01c f975 	bl	80265f8 <memset>
		return "/login.shtml";
 800a30e:	4b07      	ldr	r3, [pc, #28]	; (800a32c <SettingsCGI_Handler+0xa8>)
	}
}
 800a310:	4618      	mov	r0, r3
 800a312:	3718      	adds	r7, #24
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	0802c234 	.word	0x0802c234
 800a31c:	20001368 	.word	0x20001368
 800a320:	2000134c 	.word	0x2000134c
 800a324:	0802c784 	.word	0x0802c784
 800a328:	0802c870 	.word	0x0802c870
 800a32c:	0802c880 	.word	0x0802c880

0800a330 <FormcronCGI_Handler>:


// formcron.shtml Handler table json (Index 16)
const char*  FormcronCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
 800a33c:	603b      	str	r3, [r7, #0]

	if (iIndex == 16) {
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2b10      	cmp	r3, #16
 800a342:	d155      	bne.n	800a3f0 <FormcronCGI_Handler+0xc0>
		for (int i = 0; i < iNumParams; i++) {
 800a344:	2300      	movs	r3, #0
 800a346:	617b      	str	r3, [r7, #20]
 800a348:	e04e      	b.n	800a3e8 <FormcronCGI_Handler+0xb8>
			if (strcmp(pcParam[i], "ssid") == 0)
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	4413      	add	r3, r2
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4934      	ldr	r1, [pc, #208]	; (800a428 <FormcronCGI_Handler+0xf8>)
 800a356:	4618      	mov	r0, r3
 800a358:	f7f5 ff3a 	bl	80001d0 <strcmp>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d10d      	bne.n	800a37e <FormcronCGI_Handler+0x4e>
			{
				memset(ssid, '\0', sizeof(ssid));
 800a362:	221b      	movs	r2, #27
 800a364:	2100      	movs	r1, #0
 800a366:	4831      	ldr	r0, [pc, #196]	; (800a42c <FormcronCGI_Handler+0xfc>)
 800a368:	f01c f946 	bl	80265f8 <memset>
				strcpy(ssid, pcValue[i]);
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	4413      	add	r3, r2
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4619      	mov	r1, r3
 800a378:	482c      	ldr	r0, [pc, #176]	; (800a42c <FormcronCGI_Handler+0xfc>)
 800a37a:	f01c fe9e 	bl	80270ba <strcpy>
			}
			if (strcmp(pcParam[i], "id") == 0)
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	4413      	add	r3, r2
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4929      	ldr	r1, [pc, #164]	; (800a430 <FormcronCGI_Handler+0x100>)
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7f5 ff20 	bl	80001d0 <strcmp>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10d      	bne.n	800a3b2 <FormcronCGI_Handler+0x82>
			{
				id = atoi(pcValue[i]) - 1;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	4413      	add	r3, r2
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f01b feab 	bl	80260fc <atoi>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	b2da      	uxtb	r2, r3
 800a3ae:	4b21      	ldr	r3, [pc, #132]	; (800a434 <FormcronCGI_Handler+0x104>)
 800a3b0:	701a      	strb	r2, [r3, #0]
			}
			if (strcmp(pcParam[i], "tab") == 0)
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	491e      	ldr	r1, [pc, #120]	; (800a438 <FormcronCGI_Handler+0x108>)
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7f5 ff06 	bl	80001d0 <strcmp>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10b      	bne.n	800a3e2 <FormcronCGI_Handler+0xb2>
			{
				tab = atoi(pcValue[i]);
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f01b fe91 	bl	80260fc <atoi>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	b2da      	uxtb	r2, r3
 800a3de:	4b17      	ldr	r3, [pc, #92]	; (800a43c <FormcronCGI_Handler+0x10c>)
 800a3e0:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < iNumParams; i++) {
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	617b      	str	r3, [r7, #20]
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	dbac      	blt.n	800a34a <FormcronCGI_Handler+0x1a>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 800a3f0:	4913      	ldr	r1, [pc, #76]	; (800a440 <FormcronCGI_Handler+0x110>)
 800a3f2:	480e      	ldr	r0, [pc, #56]	; (800a42c <FormcronCGI_Handler+0xfc>)
 800a3f4:	f7f5 feec 	bl	80001d0 <strcmp>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d107      	bne.n	800a40e <FormcronCGI_Handler+0xde>
 800a3fe:	4b10      	ldr	r3, [pc, #64]	; (800a440 <FormcronCGI_Handler+0x110>)
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d003      	beq.n	800a40e <FormcronCGI_Handler+0xde>
		//printf("SSID OK \n");
		restartSSID();
 800a406:	f7fe f801 	bl	800840c <restartSSID>
		return "/formcron.shtml"; //
 800a40a:	4b0e      	ldr	r3, [pc, #56]	; (800a444 <FormcronCGI_Handler+0x114>)
 800a40c:	e008      	b.n	800a420 <FormcronCGI_Handler+0xf0>
	} else {
		printf("SSID Failed \n");
 800a40e:	480e      	ldr	r0, [pc, #56]	; (800a448 <FormcronCGI_Handler+0x118>)
 800a410:	f01c fca8 	bl	8026d64 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 800a414:	221b      	movs	r2, #27
 800a416:	2100      	movs	r1, #0
 800a418:	4809      	ldr	r0, [pc, #36]	; (800a440 <FormcronCGI_Handler+0x110>)
 800a41a:	f01c f8ed 	bl	80265f8 <memset>
		return "/login.shtml";
 800a41e:	4b0b      	ldr	r3, [pc, #44]	; (800a44c <FormcronCGI_Handler+0x11c>)
	}
}
 800a420:	4618      	mov	r0, r3
 800a422:	3718      	adds	r7, #24
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	0802c234 	.word	0x0802c234
 800a42c:	20001368 	.word	0x20001368
 800a430:	0802c520 	.word	0x0802c520
 800a434:	20001346 	.word	0x20001346
 800a438:	0802c8f0 	.word	0x0802c8f0
 800a43c:	20001345 	.word	0x20001345
 800a440:	2000134c 	.word	0x2000134c
 800a444:	0802c834 	.word	0x0802c834
 800a448:	0802c870 	.word	0x0802c870
 800a44c:	0802c880 	.word	0x0802c880

0800a450 <CronCGI_Handler>:

// tabcron.shtml Handler (Index 17)
const char* CronCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 800a450:	b580      	push	{r7, lr}
 800a452:	b088      	sub	sp, #32
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]
 800a45c:	603b      	str	r3, [r7, #0]
	int del = 0;
 800a45e:	2300      	movs	r3, #0
 800a460:	61bb      	str	r3, [r7, #24]
	uint16_t usbdata = 3;
 800a462:	2303      	movs	r3, #3
 800a464:	82fb      	strh	r3, [r7, #22]

	if (iIndex == 17) {
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2b11      	cmp	r3, #17
 800a46a:	d16a      	bne.n	800a542 <CronCGI_Handler+0xf2>
		for (int i = 0; i < iNumParams; i++) {
 800a46c:	2300      	movs	r3, #0
 800a46e:	61fb      	str	r3, [r7, #28]
 800a470:	e063      	b.n	800a53a <CronCGI_Handler+0xea>
			if (strcmp(pcParam[i], "ssid") == 0) {
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	4413      	add	r3, r2
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	493f      	ldr	r1, [pc, #252]	; (800a57c <CronCGI_Handler+0x12c>)
 800a47e:	4618      	mov	r0, r3
 800a480:	f7f5 fea6 	bl	80001d0 <strcmp>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10d      	bne.n	800a4a6 <CronCGI_Handler+0x56>
				memset(ssid, '\0', sizeof(ssid));
 800a48a:	221b      	movs	r2, #27
 800a48c:	2100      	movs	r1, #0
 800a48e:	483c      	ldr	r0, [pc, #240]	; (800a580 <CronCGI_Handler+0x130>)
 800a490:	f01c f8b2 	bl	80265f8 <memset>
				strcpy(ssid, pcValue[i]);
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	4413      	add	r3, r2
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4619      	mov	r1, r3
 800a4a0:	4837      	ldr	r0, [pc, #220]	; (800a580 <CronCGI_Handler+0x130>)
 800a4a2:	f01c fe0a 	bl	80270ba <strcpy>
			}
			if (strcmp(pcParam[i], "del") == 0) {
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4934      	ldr	r1, [pc, #208]	; (800a584 <CronCGI_Handler+0x134>)
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7f5 fe8c 	bl	80001d0 <strcmp>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d13a      	bne.n	800a534 <CronCGI_Handler+0xe4>
				del = atoi(pcValue[i])-1;
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f01b fe17 	bl	80260fc <atoi>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	61bb      	str	r3, [r7, #24]
				memset(dbCrontxt[del].cron, '\0', sizeof(dbCrontxt[del].cron));
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800a4da:	fb02 f303 	mul.w	r3, r2, r3
 800a4de:	4a2a      	ldr	r2, [pc, #168]	; (800a588 <CronCGI_Handler+0x138>)
 800a4e0:	4413      	add	r3, r2
 800a4e2:	2223      	movs	r2, #35	; 0x23
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f01c f886 	bl	80265f8 <memset>
				memset(dbCrontxt[del].activ, '\0', sizeof(dbCrontxt[del].activ));
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800a4f2:	fb02 f303 	mul.w	r3, r2, r3
 800a4f6:	3320      	adds	r3, #32
 800a4f8:	4a23      	ldr	r2, [pc, #140]	; (800a588 <CronCGI_Handler+0x138>)
 800a4fa:	4413      	add	r3, r2
 800a4fc:	3303      	adds	r3, #3
 800a4fe:	22ff      	movs	r2, #255	; 0xff
 800a500:	2100      	movs	r1, #0
 800a502:	4618      	mov	r0, r3
 800a504:	f01c f878 	bl	80265f8 <memset>
				memset(dbCrontxt[del].info, '\0', sizeof(dbCrontxt[del].info));
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800a50e:	fb02 f303 	mul.w	r3, r2, r3
 800a512:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a516:	4a1c      	ldr	r2, [pc, #112]	; (800a588 <CronCGI_Handler+0x138>)
 800a518:	4413      	add	r3, r2
 800a51a:	221e      	movs	r2, #30
 800a51c:	2100      	movs	r1, #0
 800a51e:	4618      	mov	r0, r3
 800a520:	f01c f86a 	bl	80265f8 <memset>

				xQueueSend(usbQueueHandle, &usbdata, 0);
 800a524:	4b19      	ldr	r3, [pc, #100]	; (800a58c <CronCGI_Handler+0x13c>)
 800a526:	6818      	ldr	r0, [r3, #0]
 800a528:	f107 0116 	add.w	r1, r7, #22
 800a52c:	2300      	movs	r3, #0
 800a52e:	2200      	movs	r2, #0
 800a530:	f00a f9ea 	bl	8014908 <xQueueGenericSend>
		for (int i = 0; i < iNumParams; i++) {
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	3301      	adds	r3, #1
 800a538:	61fb      	str	r3, [r7, #28]
 800a53a:	69fa      	ldr	r2, [r7, #28]
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	429a      	cmp	r2, r3
 800a540:	db97      	blt.n	800a472 <CronCGI_Handler+0x22>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 800a542:	4913      	ldr	r1, [pc, #76]	; (800a590 <CronCGI_Handler+0x140>)
 800a544:	480e      	ldr	r0, [pc, #56]	; (800a580 <CronCGI_Handler+0x130>)
 800a546:	f7f5 fe43 	bl	80001d0 <strcmp>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d107      	bne.n	800a560 <CronCGI_Handler+0x110>
 800a550:	4b0f      	ldr	r3, [pc, #60]	; (800a590 <CronCGI_Handler+0x140>)
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d003      	beq.n	800a560 <CronCGI_Handler+0x110>
		//printf("SSID OK \n");
		restartSSID();
 800a558:	f7fd ff58 	bl	800840c <restartSSID>
		return "/tabcron.shtml"; //
 800a55c:	4b0d      	ldr	r3, [pc, #52]	; (800a594 <CronCGI_Handler+0x144>)
 800a55e:	e008      	b.n	800a572 <CronCGI_Handler+0x122>
	} else {
		printf("SSID Failed \n");
 800a560:	480d      	ldr	r0, [pc, #52]	; (800a598 <CronCGI_Handler+0x148>)
 800a562:	f01c fbff 	bl	8026d64 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 800a566:	221b      	movs	r2, #27
 800a568:	2100      	movs	r1, #0
 800a56a:	4809      	ldr	r0, [pc, #36]	; (800a590 <CronCGI_Handler+0x140>)
 800a56c:	f01c f844 	bl	80265f8 <memset>
		return "/login.shtml";
 800a570:	4b0a      	ldr	r3, [pc, #40]	; (800a59c <CronCGI_Handler+0x14c>)
	}
}
 800a572:	4618      	mov	r0, r3
 800a574:	3720      	adds	r7, #32
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	0802c234 	.word	0x0802c234
 800a580:	20001368 	.word	0x20001368
 800a584:	0802c8d0 	.word	0x0802c8d0
 800a588:	20005f6c 	.word	0x20005f6c
 800a58c:	2000d154 	.word	0x2000d154
 800a590:	2000134c 	.word	0x2000134c
 800a594:	0802c844 	.word	0x0802c844
 800a598:	0802c870 	.word	0x0802c870
 800a59c:	0802c880 	.word	0x0802c880

0800a5a0 <RebootCGI_Handler>:

// Reboot.shtml Handler (Index 18)
const char* RebootCGI_Handler(int iIndex, int iNumParams, char *pcParam[],char *pcValue[]) {
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
 800a5ac:	603b      	str	r3, [r7, #0]
	int rb = 0;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	613b      	str	r3, [r7, #16]

	if (iIndex == 18) {
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2b12      	cmp	r3, #18
 800a5b6:	d13d      	bne.n	800a634 <RebootCGI_Handler+0x94>
		for (int i = 0; i < iNumParams; i++) {
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	617b      	str	r3, [r7, #20]
 800a5bc:	e036      	b.n	800a62c <RebootCGI_Handler+0x8c>
			if (strcmp(pcParam[i], "ssid") == 0)
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4928      	ldr	r1, [pc, #160]	; (800a66c <RebootCGI_Handler+0xcc>)
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7f5 fe00 	bl	80001d0 <strcmp>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10d      	bne.n	800a5f2 <RebootCGI_Handler+0x52>
			{
				memset(ssid, '\0', sizeof(ssid));
 800a5d6:	221b      	movs	r2, #27
 800a5d8:	2100      	movs	r1, #0
 800a5da:	4825      	ldr	r0, [pc, #148]	; (800a670 <RebootCGI_Handler+0xd0>)
 800a5dc:	f01c f80c 	bl	80265f8 <memset>
				strcpy(ssid, pcValue[i]);
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	4820      	ldr	r0, [pc, #128]	; (800a670 <RebootCGI_Handler+0xd0>)
 800a5ee:	f01c fd64 	bl	80270ba <strcpy>
			}
			if (strcmp(pcParam[i], "rb") == 0)
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	491d      	ldr	r1, [pc, #116]	; (800a674 <RebootCGI_Handler+0xd4>)
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7f5 fde6 	bl	80001d0 <strcmp>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d10d      	bne.n	800a626 <RebootCGI_Handler+0x86>
			{
				rb = atoi(pcValue[i]);
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	683a      	ldr	r2, [r7, #0]
 800a610:	4413      	add	r3, r2
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4618      	mov	r0, r3
 800a616:	f01b fd71 	bl	80260fc <atoi>
 800a61a:	6138      	str	r0, [r7, #16]
				if(rb == 1){
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d101      	bne.n	800a626 <RebootCGI_Handler+0x86>
					NVIC_SystemReset(); // REBOOT
 800a622:	f7fd fea9 	bl	8008378 <__NVIC_SystemReset>
		for (int i = 0; i < iNumParams; i++) {
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	3301      	adds	r3, #1
 800a62a:	617b      	str	r3, [r7, #20]
 800a62c:	697a      	ldr	r2, [r7, #20]
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	429a      	cmp	r2, r3
 800a632:	dbc4      	blt.n	800a5be <RebootCGI_Handler+0x1e>
		}
	}


	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 800a634:	4910      	ldr	r1, [pc, #64]	; (800a678 <RebootCGI_Handler+0xd8>)
 800a636:	480e      	ldr	r0, [pc, #56]	; (800a670 <RebootCGI_Handler+0xd0>)
 800a638:	f7f5 fdca 	bl	80001d0 <strcmp>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d107      	bne.n	800a652 <RebootCGI_Handler+0xb2>
 800a642:	4b0d      	ldr	r3, [pc, #52]	; (800a678 <RebootCGI_Handler+0xd8>)
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d003      	beq.n	800a652 <RebootCGI_Handler+0xb2>
		//printf("SSID OK \n");
		restartSSID();
 800a64a:	f7fd fedf 	bl	800840c <restartSSID>
		return "/reboot.shtml";
 800a64e:	4b0b      	ldr	r3, [pc, #44]	; (800a67c <RebootCGI_Handler+0xdc>)
 800a650:	e008      	b.n	800a664 <RebootCGI_Handler+0xc4>
	} else {
		printf("SSID Failed \n");
 800a652:	480b      	ldr	r0, [pc, #44]	; (800a680 <RebootCGI_Handler+0xe0>)
 800a654:	f01c fb86 	bl	8026d64 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 800a658:	221b      	movs	r2, #27
 800a65a:	2100      	movs	r1, #0
 800a65c:	4806      	ldr	r0, [pc, #24]	; (800a678 <RebootCGI_Handler+0xd8>)
 800a65e:	f01b ffcb 	bl	80265f8 <memset>
		return "/login.shtml";
 800a662:	4b08      	ldr	r3, [pc, #32]	; (800a684 <RebootCGI_Handler+0xe4>)
	}

}
 800a664:	4618      	mov	r0, r3
 800a666:	3718      	adds	r7, #24
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	0802c234 	.word	0x0802c234
 800a670:	20001368 	.word	0x20001368
 800a674:	0802c8f8 	.word	0x0802c8f8
 800a678:	2000134c 	.word	0x2000134c
 800a67c:	0802c854 	.word	0x0802c854
 800a680:	0802c870 	.word	0x0802c870
 800a684:	0802c880 	.word	0x0802c880

0800a688 <ApiCGI_Handler>:

// api.shtml Handler (Index 19)
const char* ApiCGI_Handler(int iIndex, int iNumParams, char *pcParam[],char *pcValue[]) {
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08a      	sub	sp, #40	; 0x28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
 800a694:	603b      	str	r3, [r7, #0]
	int pinid = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	627b      	str	r3, [r7, #36]	; 0x24
	int action = 0;
 800a69a:	2300      	movs	r3, #0
 800a69c:	623b      	str	r3, [r7, #32]
	char token[11] = {0};
 800a69e:	2300      	movs	r3, #0
 800a6a0:	613b      	str	r3, [r7, #16]
 800a6a2:	f107 0314 	add.w	r3, r7, #20
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	601a      	str	r2, [r3, #0]
 800a6aa:	f8c3 2003 	str.w	r2, [r3, #3]



	if (iIndex == 19) {
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2b13      	cmp	r3, #19
 800a6b2:	d151      	bne.n	800a758 <ApiCGI_Handler+0xd0>
		for (int i = 0; i < iNumParams; i++) {
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	61fb      	str	r3, [r7, #28]
 800a6b8:	e04a      	b.n	800a750 <ApiCGI_Handler+0xc8>
			if (strcmp(pcParam[i], "token") == 0)
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	493c      	ldr	r1, [pc, #240]	; (800a7b8 <ApiCGI_Handler+0x130>)
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7f5 fd82 	bl	80001d0 <strcmp>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d111      	bne.n	800a6f6 <ApiCGI_Handler+0x6e>
			{
				memset(token, '\0', sizeof(token));
 800a6d2:	f107 0310 	add.w	r3, r7, #16
 800a6d6:	220b      	movs	r2, #11
 800a6d8:	2100      	movs	r1, #0
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f01b ff8c 	bl	80265f8 <memset>
				strcpy(token, pcValue[i]);
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	f107 0310 	add.w	r3, r7, #16
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f01c fce2 	bl	80270ba <strcpy>

			}
			if (strcmp(pcParam[i], "pinid") == 0)
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	492e      	ldr	r1, [pc, #184]	; (800a7bc <ApiCGI_Handler+0x134>)
 800a702:	4618      	mov	r0, r3
 800a704:	f7f5 fd64 	bl	80001d0 <strcmp>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d108      	bne.n	800a720 <ApiCGI_Handler+0x98>
			{
				pinid = atoi(pcValue[i]);
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	4413      	add	r3, r2
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4618      	mov	r0, r3
 800a71a:	f01b fcef 	bl	80260fc <atoi>
 800a71e:	6278      	str	r0, [r7, #36]	; 0x24

			}
			if (strcmp(pcParam[i], "action") == 0)
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	4413      	add	r3, r2
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4925      	ldr	r1, [pc, #148]	; (800a7c0 <ApiCGI_Handler+0x138>)
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7f5 fd4f 	bl	80001d0 <strcmp>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d108      	bne.n	800a74a <ApiCGI_Handler+0xc2>
			{
				action = atoi(pcValue[i]);
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	683a      	ldr	r2, [r7, #0]
 800a73e:	4413      	add	r3, r2
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4618      	mov	r0, r3
 800a744:	f01b fcda 	bl	80260fc <atoi>
 800a748:	6238      	str	r0, [r7, #32]
		for (int i = 0; i < iNumParams; i++) {
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	3301      	adds	r3, #1
 800a74e:	61fb      	str	r3, [r7, #28]
 800a750:	69fa      	ldr	r2, [r7, #28]
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	429a      	cmp	r2, r3
 800a756:	dbb0      	blt.n	800a6ba <ApiCGI_Handler+0x32>

			}
		}
	}
	if(strcmp(token, SetSettings.token) == 0 && pinid != 0){
 800a758:	f107 0310 	add.w	r3, r7, #16
 800a75c:	4919      	ldr	r1, [pc, #100]	; (800a7c4 <ApiCGI_Handler+0x13c>)
 800a75e:	4618      	mov	r0, r3
 800a760:	f7f5 fd36 	bl	80001d0 <strcmp>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d121      	bne.n	800a7ae <ApiCGI_Handler+0x126>
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d01e      	beq.n	800a7ae <ApiCGI_Handler+0x126>
		printf("token OK \n");
 800a770:	4815      	ldr	r0, [pc, #84]	; (800a7c8 <ApiCGI_Handler+0x140>)
 800a772:	f01c faf7 	bl	8026d64 <puts>
		if(PinsConf[pinid-1].topin == 2){
 800a776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a778:	1e5a      	subs	r2, r3, #1
 800a77a:	4914      	ldr	r1, [pc, #80]	; (800a7cc <ApiCGI_Handler+0x144>)
 800a77c:	4613      	mov	r3, r2
 800a77e:	00db      	lsls	r3, r3, #3
 800a780:	4413      	add	r3, r2
 800a782:	011b      	lsls	r3, r3, #4
 800a784:	440b      	add	r3, r1
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d110      	bne.n	800a7ae <ApiCGI_Handler+0x126>
			printf("relay OK \n");
 800a78c:	4810      	ldr	r0, [pc, #64]	; (800a7d0 <ApiCGI_Handler+0x148>)
 800a78e:	f01c fae9 	bl	8026d64 <puts>
			data_pin.pin = pinid-1;
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	3b01      	subs	r3, #1
 800a796:	4a0f      	ldr	r2, [pc, #60]	; (800a7d4 <ApiCGI_Handler+0x14c>)
 800a798:	6013      	str	r3, [r2, #0]
			data_pin.action = action;
 800a79a:	4a0e      	ldr	r2, [pc, #56]	; (800a7d4 <ApiCGI_Handler+0x14c>)
 800a79c:	6a3b      	ldr	r3, [r7, #32]
 800a79e:	6053      	str	r3, [r2, #4]
			xQueueSend(myQueueHandle, (void* ) &data_pin, 0);
 800a7a0:	4b0d      	ldr	r3, [pc, #52]	; (800a7d8 <ApiCGI_Handler+0x150>)
 800a7a2:	6818      	ldr	r0, [r3, #0]
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	490a      	ldr	r1, [pc, #40]	; (800a7d4 <ApiCGI_Handler+0x14c>)
 800a7aa:	f00a f8ad 	bl	8014908 <xQueueGenericSend>
		}
	}


	return "/api.shtml";
 800a7ae:	4b0b      	ldr	r3, [pc, #44]	; (800a7dc <ApiCGI_Handler+0x154>)

}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3728      	adds	r7, #40	; 0x28
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	0802c70c 	.word	0x0802c70c
 800a7bc:	0802c8fc 	.word	0x0802c8fc
 800a7c0:	0802c904 	.word	0x0802c904
 800a7c4:	20005ba9 	.word	0x20005ba9
 800a7c8:	0802c90c 	.word	0x0802c90c
 800a7cc:	20005c9c 	.word	0x20005c9c
 800a7d0:	0802c918 	.word	0x0802c918
 800a7d4:	2000d02c 	.word	0x2000d02c
 800a7d8:	2000c31c 	.word	0x2000c31c
 800a7dc:	0802c864 	.word	0x0802c864

0800a7e0 <setPinRelay>:
PostBufer_t v_PostBufer;
static void *current_connection;


// POST request Relay
void setPinRelay(int idpin, char *name, char *token) {
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]

	idpin = idpin - 1;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	60fb      	str	r3, [r7, #12]
	if (strcmp(name, "pwm") == 0) {
 800a7f2:	494a      	ldr	r1, [pc, #296]	; (800a91c <setPinRelay+0x13c>)
 800a7f4:	68b8      	ldr	r0, [r7, #8]
 800a7f6:	f7f5 fceb 	bl	80001d0 <strcmp>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d10d      	bne.n	800a81c <setPinRelay+0x3c>
		PinsConf[idpin].pwm = atoi(token);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f01b fc7b 	bl	80260fc <atoi>
 800a806:	4601      	mov	r1, r0
 800a808:	4845      	ldr	r0, [pc, #276]	; (800a920 <setPinRelay+0x140>)
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	4613      	mov	r3, r2
 800a80e:	00db      	lsls	r3, r3, #3
 800a810:	4413      	add	r3, r2
 800a812:	011b      	lsls	r3, r3, #4
 800a814:	4403      	add	r3, r0
 800a816:	3304      	adds	r3, #4
 800a818:	6019      	str	r1, [r3, #0]
	} else if (strcmp(name, "onoff") == 0) {
		PinsConf[idpin].onoff = atoi(token);
	} else {

	}
}
 800a81a:	e07b      	b.n	800a914 <setPinRelay+0x134>
	} else if (strcmp(name, "on") == 0) {
 800a81c:	4941      	ldr	r1, [pc, #260]	; (800a924 <setPinRelay+0x144>)
 800a81e:	68b8      	ldr	r0, [r7, #8]
 800a820:	f7f5 fcd6 	bl	80001d0 <strcmp>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10d      	bne.n	800a846 <setPinRelay+0x66>
		PinsConf[idpin].on = atoi(token);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f01b fc66 	bl	80260fc <atoi>
 800a830:	4601      	mov	r1, r0
 800a832:	483b      	ldr	r0, [pc, #236]	; (800a920 <setPinRelay+0x140>)
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	4613      	mov	r3, r2
 800a838:	00db      	lsls	r3, r3, #3
 800a83a:	4413      	add	r3, r2
 800a83c:	011b      	lsls	r3, r3, #4
 800a83e:	4403      	add	r3, r0
 800a840:	3308      	adds	r3, #8
 800a842:	6019      	str	r1, [r3, #0]
}
 800a844:	e066      	b.n	800a914 <setPinRelay+0x134>
	} else if (strcmp(name, "istate") == 0) {
 800a846:	4938      	ldr	r1, [pc, #224]	; (800a928 <setPinRelay+0x148>)
 800a848:	68b8      	ldr	r0, [r7, #8]
 800a84a:	f7f5 fcc1 	bl	80001d0 <strcmp>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10d      	bne.n	800a870 <setPinRelay+0x90>
		PinsConf[idpin].istate = atoi(token);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f01b fc51 	bl	80260fc <atoi>
 800a85a:	4601      	mov	r1, r0
 800a85c:	4830      	ldr	r0, [pc, #192]	; (800a920 <setPinRelay+0x140>)
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	4613      	mov	r3, r2
 800a862:	00db      	lsls	r3, r3, #3
 800a864:	4413      	add	r3, r2
 800a866:	011b      	lsls	r3, r3, #4
 800a868:	4403      	add	r3, r0
 800a86a:	330c      	adds	r3, #12
 800a86c:	6019      	str	r1, [r3, #0]
}
 800a86e:	e051      	b.n	800a914 <setPinRelay+0x134>
	} else if (strcmp(name, "dvalue") == 0) {
 800a870:	492e      	ldr	r1, [pc, #184]	; (800a92c <setPinRelay+0x14c>)
 800a872:	68b8      	ldr	r0, [r7, #8]
 800a874:	f7f5 fcac 	bl	80001d0 <strcmp>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10d      	bne.n	800a89a <setPinRelay+0xba>
		PinsConf[idpin].dvalue = atoi(token);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f01b fc3c 	bl	80260fc <atoi>
 800a884:	4601      	mov	r1, r0
 800a886:	4826      	ldr	r0, [pc, #152]	; (800a920 <setPinRelay+0x140>)
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	4613      	mov	r3, r2
 800a88c:	00db      	lsls	r3, r3, #3
 800a88e:	4413      	add	r3, r2
 800a890:	011b      	lsls	r3, r3, #4
 800a892:	4403      	add	r3, r0
 800a894:	3310      	adds	r3, #16
 800a896:	6019      	str	r1, [r3, #0]
}
 800a898:	e03c      	b.n	800a914 <setPinRelay+0x134>
	} else if (strcmp(name, "ponr") == 0) {
 800a89a:	4925      	ldr	r1, [pc, #148]	; (800a930 <setPinRelay+0x150>)
 800a89c:	68b8      	ldr	r0, [r7, #8]
 800a89e:	f7f5 fc97 	bl	80001d0 <strcmp>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d10d      	bne.n	800a8c4 <setPinRelay+0xe4>
		PinsConf[idpin].ponr = atoi(token);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f01b fc27 	bl	80260fc <atoi>
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	481b      	ldr	r0, [pc, #108]	; (800a920 <setPinRelay+0x140>)
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	00db      	lsls	r3, r3, #3
 800a8b8:	4413      	add	r3, r2
 800a8ba:	011b      	lsls	r3, r3, #4
 800a8bc:	4403      	add	r3, r0
 800a8be:	3314      	adds	r3, #20
 800a8c0:	6019      	str	r1, [r3, #0]
}
 800a8c2:	e027      	b.n	800a914 <setPinRelay+0x134>
	} else if (strcmp(name, "info") == 0) {
 800a8c4:	491b      	ldr	r1, [pc, #108]	; (800a934 <setPinRelay+0x154>)
 800a8c6:	68b8      	ldr	r0, [r7, #8]
 800a8c8:	f7f5 fc82 	bl	80001d0 <strcmp>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d10c      	bne.n	800a8ec <setPinRelay+0x10c>
		strcpy(PinsConf[idpin].info, token);
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	00db      	lsls	r3, r3, #3
 800a8d8:	4413      	add	r3, r2
 800a8da:	011b      	lsls	r3, r3, #4
 800a8dc:	3340      	adds	r3, #64	; 0x40
 800a8de:	4a10      	ldr	r2, [pc, #64]	; (800a920 <setPinRelay+0x140>)
 800a8e0:	4413      	add	r3, r2
 800a8e2:	6879      	ldr	r1, [r7, #4]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f01c fbe8 	bl	80270ba <strcpy>
}
 800a8ea:	e013      	b.n	800a914 <setPinRelay+0x134>
	} else if (strcmp(name, "onoff") == 0) {
 800a8ec:	4912      	ldr	r1, [pc, #72]	; (800a938 <setPinRelay+0x158>)
 800a8ee:	68b8      	ldr	r0, [r7, #8]
 800a8f0:	f7f5 fc6e 	bl	80001d0 <strcmp>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10c      	bne.n	800a914 <setPinRelay+0x134>
		PinsConf[idpin].onoff = atoi(token);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f01b fbfe 	bl	80260fc <atoi>
 800a900:	4601      	mov	r1, r0
 800a902:	4807      	ldr	r0, [pc, #28]	; (800a920 <setPinRelay+0x140>)
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	4613      	mov	r3, r2
 800a908:	00db      	lsls	r3, r3, #3
 800a90a:	4413      	add	r3, r2
 800a90c:	011b      	lsls	r3, r3, #4
 800a90e:	4403      	add	r3, r0
 800a910:	3360      	adds	r3, #96	; 0x60
 800a912:	6019      	str	r1, [r3, #0]
}
 800a914:	bf00      	nop
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	0802c574 	.word	0x0802c574
 800a920:	20005c9c 	.word	0x20005c9c
 800a924:	0802c578 	.word	0x0802c578
 800a928:	0802c57c 	.word	0x0802c57c
 800a92c:	0802c584 	.word	0x0802c584
 800a930:	0802c58c 	.word	0x0802c58c
 800a934:	0802c564 	.word	0x0802c564
 800a938:	0802c56c 	.word	0x0802c56c

0800a93c <setPinButtom>:


// POST request Buttom
void setPinButtom(int idpin, char *name, char *token) {
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]

	idpin = idpin - 1;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	3b01      	subs	r3, #1
 800a94c:	60fb      	str	r3, [r7, #12]
	if (strcmp(name, "ptype") == 0) {
 800a94e:	495f      	ldr	r1, [pc, #380]	; (800aacc <setPinButtom+0x190>)
 800a950:	68b8      	ldr	r0, [r7, #8]
 800a952:	f7f5 fc3d 	bl	80001d0 <strcmp>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10c      	bne.n	800a976 <setPinButtom+0x3a>
		strcpy(PinsConf[idpin].ptype, token);
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	4613      	mov	r3, r2
 800a960:	00db      	lsls	r3, r3, #3
 800a962:	4413      	add	r3, r2
 800a964:	011b      	lsls	r3, r3, #4
 800a966:	3318      	adds	r3, #24
 800a968:	4a59      	ldr	r2, [pc, #356]	; (800aad0 <setPinButtom+0x194>)
 800a96a:	4413      	add	r3, r2
 800a96c:	6879      	ldr	r1, [r7, #4]
 800a96e:	4618      	mov	r0, r3
 800a970:	f01c fba3 	bl	80270ba <strcpy>
	} else if (strcmp(name, "onoff") == 0) {
		PinsConf[idpin].onoff = atoi(token);
	} else {

	}
}
 800a974:	e0a5      	b.n	800aac2 <setPinButtom+0x186>
	} else if (strcmp(name, "binter") == 0) {
 800a976:	4957      	ldr	r1, [pc, #348]	; (800aad4 <setPinButtom+0x198>)
 800a978:	68b8      	ldr	r0, [r7, #8]
 800a97a:	f7f5 fc29 	bl	80001d0 <strcmp>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10d      	bne.n	800a9a0 <setPinButtom+0x64>
		PinsConf[idpin].binter = atoi(token);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f01b fbb9 	bl	80260fc <atoi>
 800a98a:	4601      	mov	r1, r0
 800a98c:	4850      	ldr	r0, [pc, #320]	; (800aad0 <setPinButtom+0x194>)
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	4613      	mov	r3, r2
 800a992:	00db      	lsls	r3, r3, #3
 800a994:	4413      	add	r3, r2
 800a996:	011b      	lsls	r3, r3, #4
 800a998:	4403      	add	r3, r0
 800a99a:	3328      	adds	r3, #40	; 0x28
 800a99c:	6019      	str	r1, [r3, #0]
}
 800a99e:	e090      	b.n	800aac2 <setPinButtom+0x186>
	} else if (strcmp(name, "hinter") == 0) {
 800a9a0:	494d      	ldr	r1, [pc, #308]	; (800aad8 <setPinButtom+0x19c>)
 800a9a2:	68b8      	ldr	r0, [r7, #8]
 800a9a4:	f7f5 fc14 	bl	80001d0 <strcmp>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d10d      	bne.n	800a9ca <setPinButtom+0x8e>
		PinsConf[idpin].hinter = atoi(token);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f01b fba4 	bl	80260fc <atoi>
 800a9b4:	4601      	mov	r1, r0
 800a9b6:	4846      	ldr	r0, [pc, #280]	; (800aad0 <setPinButtom+0x194>)
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	00db      	lsls	r3, r3, #3
 800a9be:	4413      	add	r3, r2
 800a9c0:	011b      	lsls	r3, r3, #4
 800a9c2:	4403      	add	r3, r0
 800a9c4:	332c      	adds	r3, #44	; 0x2c
 800a9c6:	6019      	str	r1, [r3, #0]
}
 800a9c8:	e07b      	b.n	800aac2 <setPinButtom+0x186>
	} else if (strcmp(name, "repeat") == 0) {
 800a9ca:	4944      	ldr	r1, [pc, #272]	; (800aadc <setPinButtom+0x1a0>)
 800a9cc:	68b8      	ldr	r0, [r7, #8]
 800a9ce:	f7f5 fbff 	bl	80001d0 <strcmp>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10d      	bne.n	800a9f4 <setPinButtom+0xb8>
		PinsConf[idpin].repeat = atoi(token);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f01b fb8f 	bl	80260fc <atoi>
 800a9de:	4601      	mov	r1, r0
 800a9e0:	483b      	ldr	r0, [pc, #236]	; (800aad0 <setPinButtom+0x194>)
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	00db      	lsls	r3, r3, #3
 800a9e8:	4413      	add	r3, r2
 800a9ea:	011b      	lsls	r3, r3, #4
 800a9ec:	4403      	add	r3, r0
 800a9ee:	3330      	adds	r3, #48	; 0x30
 800a9f0:	6019      	str	r1, [r3, #0]
}
 800a9f2:	e066      	b.n	800aac2 <setPinButtom+0x186>
	} else if (strcmp(name, "rinter") == 0) {
 800a9f4:	493a      	ldr	r1, [pc, #232]	; (800aae0 <setPinButtom+0x1a4>)
 800a9f6:	68b8      	ldr	r0, [r7, #8]
 800a9f8:	f7f5 fbea 	bl	80001d0 <strcmp>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10d      	bne.n	800aa1e <setPinButtom+0xe2>
		PinsConf[idpin].rinter = atoi(token);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f01b fb7a 	bl	80260fc <atoi>
 800aa08:	4601      	mov	r1, r0
 800aa0a:	4831      	ldr	r0, [pc, #196]	; (800aad0 <setPinButtom+0x194>)
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	4613      	mov	r3, r2
 800aa10:	00db      	lsls	r3, r3, #3
 800aa12:	4413      	add	r3, r2
 800aa14:	011b      	lsls	r3, r3, #4
 800aa16:	4403      	add	r3, r0
 800aa18:	3334      	adds	r3, #52	; 0x34
 800aa1a:	6019      	str	r1, [r3, #0]
}
 800aa1c:	e051      	b.n	800aac2 <setPinButtom+0x186>
	} else if (strcmp(name, "dcinter") == 0) {
 800aa1e:	4931      	ldr	r1, [pc, #196]	; (800aae4 <setPinButtom+0x1a8>)
 800aa20:	68b8      	ldr	r0, [r7, #8]
 800aa22:	f7f5 fbd5 	bl	80001d0 <strcmp>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d10d      	bne.n	800aa48 <setPinButtom+0x10c>
		PinsConf[idpin].dcinter = atoi(token);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f01b fb65 	bl	80260fc <atoi>
 800aa32:	4601      	mov	r1, r0
 800aa34:	4826      	ldr	r0, [pc, #152]	; (800aad0 <setPinButtom+0x194>)
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	4613      	mov	r3, r2
 800aa3a:	00db      	lsls	r3, r3, #3
 800aa3c:	4413      	add	r3, r2
 800aa3e:	011b      	lsls	r3, r3, #4
 800aa40:	4403      	add	r3, r0
 800aa42:	3338      	adds	r3, #56	; 0x38
 800aa44:	6019      	str	r1, [r3, #0]
}
 800aa46:	e03c      	b.n	800aac2 <setPinButtom+0x186>
	} else if (strcmp(name, "pclick") == 0) {
 800aa48:	4927      	ldr	r1, [pc, #156]	; (800aae8 <setPinButtom+0x1ac>)
 800aa4a:	68b8      	ldr	r0, [r7, #8]
 800aa4c:	f7f5 fbc0 	bl	80001d0 <strcmp>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10d      	bne.n	800aa72 <setPinButtom+0x136>
		PinsConf[idpin].pclick = atoi(token);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f01b fb50 	bl	80260fc <atoi>
 800aa5c:	4601      	mov	r1, r0
 800aa5e:	481c      	ldr	r0, [pc, #112]	; (800aad0 <setPinButtom+0x194>)
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	4613      	mov	r3, r2
 800aa64:	00db      	lsls	r3, r3, #3
 800aa66:	4413      	add	r3, r2
 800aa68:	011b      	lsls	r3, r3, #4
 800aa6a:	4403      	add	r3, r0
 800aa6c:	333c      	adds	r3, #60	; 0x3c
 800aa6e:	6019      	str	r1, [r3, #0]
}
 800aa70:	e027      	b.n	800aac2 <setPinButtom+0x186>
	} else if (strcmp(name, "info") == 0) {
 800aa72:	491e      	ldr	r1, [pc, #120]	; (800aaec <setPinButtom+0x1b0>)
 800aa74:	68b8      	ldr	r0, [r7, #8]
 800aa76:	f7f5 fbab 	bl	80001d0 <strcmp>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d10c      	bne.n	800aa9a <setPinButtom+0x15e>
		strcpy(PinsConf[idpin].info, token);
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	4613      	mov	r3, r2
 800aa84:	00db      	lsls	r3, r3, #3
 800aa86:	4413      	add	r3, r2
 800aa88:	011b      	lsls	r3, r3, #4
 800aa8a:	3340      	adds	r3, #64	; 0x40
 800aa8c:	4a10      	ldr	r2, [pc, #64]	; (800aad0 <setPinButtom+0x194>)
 800aa8e:	4413      	add	r3, r2
 800aa90:	6879      	ldr	r1, [r7, #4]
 800aa92:	4618      	mov	r0, r3
 800aa94:	f01c fb11 	bl	80270ba <strcpy>
}
 800aa98:	e013      	b.n	800aac2 <setPinButtom+0x186>
	} else if (strcmp(name, "onoff") == 0) {
 800aa9a:	4915      	ldr	r1, [pc, #84]	; (800aaf0 <setPinButtom+0x1b4>)
 800aa9c:	68b8      	ldr	r0, [r7, #8]
 800aa9e:	f7f5 fb97 	bl	80001d0 <strcmp>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d10c      	bne.n	800aac2 <setPinButtom+0x186>
		PinsConf[idpin].onoff = atoi(token);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f01b fb27 	bl	80260fc <atoi>
 800aaae:	4601      	mov	r1, r0
 800aab0:	4807      	ldr	r0, [pc, #28]	; (800aad0 <setPinButtom+0x194>)
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	4613      	mov	r3, r2
 800aab6:	00db      	lsls	r3, r3, #3
 800aab8:	4413      	add	r3, r2
 800aaba:	011b      	lsls	r3, r3, #4
 800aabc:	4403      	add	r3, r0
 800aabe:	3360      	adds	r3, #96	; 0x60
 800aac0:	6019      	str	r1, [r3, #0]
}
 800aac2:	bf00      	nop
 800aac4:	3710      	adds	r7, #16
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	0802c52c 	.word	0x0802c52c
 800aad0:	20005c9c 	.word	0x20005c9c
 800aad4:	0802c534 	.word	0x0802c534
 800aad8:	0802c53c 	.word	0x0802c53c
 800aadc:	0802c544 	.word	0x0802c544
 800aae0:	0802c54c 	.word	0x0802c54c
 800aae4:	0802c554 	.word	0x0802c554
 800aae8:	0802c55c 	.word	0x0802c55c
 800aaec:	0802c564 	.word	0x0802c564
 800aaf0:	0802c56c 	.word	0x0802c56c

0800aaf4 <setCron>:

// POST request Cron
void setCron(int idpin, char *name, char *token) {
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b092      	sub	sp, #72	; 0x48
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]

    char decoded_url[50] = {0};
 800ab00:	2300      	movs	r3, #0
 800ab02:	617b      	str	r3, [r7, #20]
 800ab04:	f107 0318 	add.w	r3, r7, #24
 800ab08:	222e      	movs	r2, #46	; 0x2e
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f01b fd73 	bl	80265f8 <memset>

	idpin = idpin - 1;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	3b01      	subs	r3, #1
 800ab16:	60fb      	str	r3, [r7, #12]
	if (strcmp(name, "cron") == 0) {
 800ab18:	4927      	ldr	r1, [pc, #156]	; (800abb8 <setCron+0xc4>)
 800ab1a:	68b8      	ldr	r0, [r7, #8]
 800ab1c:	f7f5 fb58 	bl	80001d0 <strcmp>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d113      	bne.n	800ab4e <setCron+0x5a>
		url_decode(token, decoded_url);
 800ab26:	f107 0314 	add.w	r3, r7, #20
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 f84b 	bl	800abc8 <url_decode>
		strcpy(dbCrontxt[idpin].cron, decoded_url);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800ab38:	fb02 f303 	mul.w	r3, r2, r3
 800ab3c:	4a1f      	ldr	r2, [pc, #124]	; (800abbc <setCron+0xc8>)
 800ab3e:	4413      	add	r3, r2
 800ab40:	f107 0214 	add.w	r2, r7, #20
 800ab44:	4611      	mov	r1, r2
 800ab46:	4618      	mov	r0, r3
 800ab48:	f01c fab7 	bl	80270ba <strcpy>
	} else if (strcmp(name, "info") == 0) {
		strcpy(dbCrontxt[idpin].info, token);
	}  else {

	}
}
 800ab4c:	e030      	b.n	800abb0 <setCron+0xbc>
	} else if (strcmp(name, "activ") == 0) {
 800ab4e:	491c      	ldr	r1, [pc, #112]	; (800abc0 <setCron+0xcc>)
 800ab50:	68b8      	ldr	r0, [r7, #8]
 800ab52:	f7f5 fb3d 	bl	80001d0 <strcmp>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d115      	bne.n	800ab88 <setCron+0x94>
		url_decode(token, decoded_url);
 800ab5c:	f107 0314 	add.w	r3, r7, #20
 800ab60:	4619      	mov	r1, r3
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 f830 	bl	800abc8 <url_decode>
		strcpy(dbCrontxt[idpin].activ, decoded_url);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800ab6e:	fb02 f303 	mul.w	r3, r2, r3
 800ab72:	3320      	adds	r3, #32
 800ab74:	4a11      	ldr	r2, [pc, #68]	; (800abbc <setCron+0xc8>)
 800ab76:	4413      	add	r3, r2
 800ab78:	3303      	adds	r3, #3
 800ab7a:	f107 0214 	add.w	r2, r7, #20
 800ab7e:	4611      	mov	r1, r2
 800ab80:	4618      	mov	r0, r3
 800ab82:	f01c fa9a 	bl	80270ba <strcpy>
}
 800ab86:	e013      	b.n	800abb0 <setCron+0xbc>
	} else if (strcmp(name, "info") == 0) {
 800ab88:	490e      	ldr	r1, [pc, #56]	; (800abc4 <setCron+0xd0>)
 800ab8a:	68b8      	ldr	r0, [r7, #8]
 800ab8c:	f7f5 fb20 	bl	80001d0 <strcmp>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d10c      	bne.n	800abb0 <setCron+0xbc>
		strcpy(dbCrontxt[idpin].info, token);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800ab9c:	fb02 f303 	mul.w	r3, r2, r3
 800aba0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aba4:	4a05      	ldr	r2, [pc, #20]	; (800abbc <setCron+0xc8>)
 800aba6:	4413      	add	r3, r2
 800aba8:	6879      	ldr	r1, [r7, #4]
 800abaa:	4618      	mov	r0, r3
 800abac:	f01c fa85 	bl	80270ba <strcpy>
}
 800abb0:	bf00      	nop
 800abb2:	3748      	adds	r7, #72	; 0x48
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	0802c720 	.word	0x0802c720
 800abbc:	20005f6c 	.word	0x20005f6c
 800abc0:	0802c728 	.word	0x0802c728
 800abc4:	0802c564 	.word	0x0802c564

0800abc8 <url_decode>:
// Функция декодирования URL
void url_decode(char* url, char* decoded)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
    int i = 0, j = 0;
 800abd2:	2300      	movs	r3, #0
 800abd4:	617b      	str	r3, [r7, #20]
 800abd6:	2300      	movs	r3, #0
 800abd8:	613b      	str	r3, [r7, #16]
    while (url[i] != '\0') {
 800abda:	e036      	b.n	800ac4a <url_decode+0x82>
        if (url[i] == '%') {
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	4413      	add	r3, r2
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	2b25      	cmp	r3, #37	; 0x25
 800abe6:	d113      	bne.n	800ac10 <url_decode+0x48>
            int num;
            sscanf(&url[i+1], "%2x", &num);
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	3301      	adds	r3, #1
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	4413      	add	r3, r2
 800abf0:	f107 020c 	add.w	r2, r7, #12
 800abf4:	491c      	ldr	r1, [pc, #112]	; (800ac68 <url_decode+0xa0>)
 800abf6:	4618      	mov	r0, r3
 800abf8:	f01c f9d2 	bl	8026fa0 <siscanf>
            decoded[j] = (char)num;
 800abfc:	68f9      	ldr	r1, [r7, #12]
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	4413      	add	r3, r2
 800ac04:	b2ca      	uxtb	r2, r1
 800ac06:	701a      	strb	r2, [r3, #0]
            i += 3;  // Пропускаем 3 символа: %XY
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	3303      	adds	r3, #3
 800ac0c:	617b      	str	r3, [r7, #20]
 800ac0e:	e019      	b.n	800ac44 <url_decode+0x7c>
        } else if (url[i] == '+') {
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	4413      	add	r3, r2
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	2b2b      	cmp	r3, #43	; 0x2b
 800ac1a:	d108      	bne.n	800ac2e <url_decode+0x66>
            decoded[j] = ' ';
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	4413      	add	r3, r2
 800ac22:	2220      	movs	r2, #32
 800ac24:	701a      	strb	r2, [r3, #0]
            i++;
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	617b      	str	r3, [r7, #20]
 800ac2c:	e00a      	b.n	800ac44 <url_decode+0x7c>
        } else {
            decoded[j] = url[i];
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	441a      	add	r2, r3
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	6839      	ldr	r1, [r7, #0]
 800ac38:	440b      	add	r3, r1
 800ac3a:	7812      	ldrb	r2, [r2, #0]
 800ac3c:	701a      	strb	r2, [r3, #0]
            i++;
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	3301      	adds	r3, #1
 800ac42:	617b      	str	r3, [r7, #20]
        }
        j++;
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	3301      	adds	r3, #1
 800ac48:	613b      	str	r3, [r7, #16]
    while (url[i] != '\0') {
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	4413      	add	r3, r2
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1c2      	bne.n	800abdc <url_decode+0x14>
    }
    decoded[j] = '\0';
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	683a      	ldr	r2, [r7, #0]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	701a      	strb	r2, [r3, #0]
}
 800ac60:	bf00      	nop
 800ac62:	3718      	adds	r7, #24
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	0802c924 	.word	0x0802c924

0800ac6c <parserIP>:

// Parser IP address
void parserIP(char *data, unsigned char *value)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
    int index = 0;
 800ac76:	2300      	movs	r3, #0
 800ac78:	60fb      	str	r3, [r7, #12]
        while (*data) {
 800ac7a:	e02c      	b.n	800acd6 <parserIP+0x6a>
        if (isdigit((unsigned char)*data)) {
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	3301      	adds	r3, #1
 800ac82:	4a1a      	ldr	r2, [pc, #104]	; (800acec <parserIP+0x80>)
 800ac84:	4413      	add	r3, r2
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	f003 0304 	and.w	r3, r3, #4
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d01c      	beq.n	800acca <parserIP+0x5e>
            value[index] *= 10;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	4413      	add	r3, r2
 800ac96:	7819      	ldrb	r1, [r3, #0]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	460a      	mov	r2, r1
 800aca0:	4611      	mov	r1, r2
 800aca2:	0089      	lsls	r1, r1, #2
 800aca4:	440a      	add	r2, r1
 800aca6:	0052      	lsls	r2, r2, #1
 800aca8:	b2d2      	uxtb	r2, r2
 800acaa:	701a      	strb	r2, [r3, #0]
            value[index] += *data - '0';
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	683a      	ldr	r2, [r7, #0]
 800acb0:	4413      	add	r3, r2
 800acb2:	781a      	ldrb	r2, [r3, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	4413      	add	r3, r2
 800acba:	b2da      	uxtb	r2, r3
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6839      	ldr	r1, [r7, #0]
 800acc0:	440b      	add	r3, r1
 800acc2:	3a30      	subs	r2, #48	; 0x30
 800acc4:	b2d2      	uxtb	r2, r2
 800acc6:	701a      	strb	r2, [r3, #0]
 800acc8:	e002      	b.n	800acd0 <parserIP+0x64>
        } else {
            index++;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	3301      	adds	r3, #1
 800acce:	60fb      	str	r3, [r7, #12]
        }
        data++;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	3301      	adds	r3, #1
 800acd4:	607b      	str	r3, [r7, #4]
        while (*data) {
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d1ce      	bne.n	800ac7c <parserIP+0x10>
    }
}
 800acde:	bf00      	nop
 800ace0:	bf00      	nop
 800ace2:	3714      	adds	r7, #20
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr
 800acec:	08060900 	.word	0x08060900

0800acf0 <setSettings>:


// POST request Settings
void setSettings(char *name, char *token) {
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b096      	sub	sp, #88	; 0x58
 800acf4:	af04      	add	r7, sp, #16
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
	char ipstr[34] = {0};
 800acfa:	2300      	movs	r3, #0
 800acfc:	627b      	str	r3, [r7, #36]	; 0x24
 800acfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad02:	221e      	movs	r2, #30
 800ad04:	2100      	movs	r1, #0
 800ad06:	4618      	mov	r0, r3
 800ad08:	f01b fc76 	bl	80265f8 <memset>
	unsigned char value[4] = {0};
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	623b      	str	r3, [r7, #32]
	int values[6];

	if (strcmp(name, "check_mqtt") == 0) {
 800ad10:	49b6      	ldr	r1, [pc, #728]	; (800afec <setSettings+0x2fc>)
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f7f5 fa5c 	bl	80001d0 <strcmp>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d108      	bne.n	800ad30 <setSettings+0x40>
		SetSettings.check_mqtt = atoi(token);
 800ad1e:	6838      	ldr	r0, [r7, #0]
 800ad20:	f01b f9ec 	bl	80260fc <atoi>
 800ad24:	4603      	mov	r3, r0
 800ad26:	b21a      	sxth	r2, r3
 800ad28:	4bb1      	ldr	r3, [pc, #708]	; (800aff0 <setSettings+0x300>)
 800ad2a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	} else if (strcmp(name, "token") == 0) {
		strcpy(SetSettings.token, token);
	} else {

	}
}
 800ad2e:	e1c2      	b.n	800b0b6 <setSettings+0x3c6>
	} else if (strcmp(name, "check_ip") == 0) {
 800ad30:	49b0      	ldr	r1, [pc, #704]	; (800aff4 <setSettings+0x304>)
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7f5 fa4c 	bl	80001d0 <strcmp>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d108      	bne.n	800ad50 <setSettings+0x60>
		SetSettings.check_ip = atoi(token);
 800ad3e:	6838      	ldr	r0, [r7, #0]
 800ad40:	f01b f9dc 	bl	80260fc <atoi>
 800ad44:	4603      	mov	r3, r0
 800ad46:	b21a      	sxth	r2, r3
 800ad48:	4ba9      	ldr	r3, [pc, #676]	; (800aff0 <setSettings+0x300>)
 800ad4a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
}
 800ad4e:	e1b2      	b.n	800b0b6 <setSettings+0x3c6>
	} else if (strcmp(name, "ip_addr") == 0) {
 800ad50:	49a9      	ldr	r1, [pc, #676]	; (800aff8 <setSettings+0x308>)
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7f5 fa3c 	bl	80001d0 <strcmp>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d126      	bne.n	800adac <setSettings+0xbc>
		strcpy(ipstr, token);
 800ad5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad62:	6839      	ldr	r1, [r7, #0]
 800ad64:	4618      	mov	r0, r3
 800ad66:	f01c f9a8 	bl	80270ba <strcpy>
		parserIP(ipstr, value);
 800ad6a:	f107 0220 	add.w	r2, r7, #32
 800ad6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad72:	4611      	mov	r1, r2
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7ff ff79 	bl	800ac6c <parserIP>
		SetSettings.ip_addr0 = value[0];
 800ad7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad7e:	b21a      	sxth	r2, r3
 800ad80:	4b9b      	ldr	r3, [pc, #620]	; (800aff0 <setSettings+0x300>)
 800ad82:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		SetSettings.ip_addr1 = value[1];
 800ad86:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ad8a:	b21a      	sxth	r2, r3
 800ad8c:	4b98      	ldr	r3, [pc, #608]	; (800aff0 <setSettings+0x300>)
 800ad8e:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		SetSettings.ip_addr2 = value[2];
 800ad92:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ad96:	b21a      	sxth	r2, r3
 800ad98:	4b95      	ldr	r3, [pc, #596]	; (800aff0 <setSettings+0x300>)
 800ad9a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		SetSettings.ip_addr3 = value[3];
 800ad9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ada2:	b21a      	sxth	r2, r3
 800ada4:	4b92      	ldr	r3, [pc, #584]	; (800aff0 <setSettings+0x300>)
 800ada6:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
}
 800adaa:	e184      	b.n	800b0b6 <setSettings+0x3c6>
	} else if (strcmp(name, "sb_mask") == 0) {
 800adac:	4993      	ldr	r1, [pc, #588]	; (800affc <setSettings+0x30c>)
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f7f5 fa0e 	bl	80001d0 <strcmp>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d126      	bne.n	800ae08 <setSettings+0x118>
		strcpy(ipstr, token);
 800adba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adbe:	6839      	ldr	r1, [r7, #0]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f01c f97a 	bl	80270ba <strcpy>
		parserIP(ipstr, value);
 800adc6:	f107 0220 	add.w	r2, r7, #32
 800adca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adce:	4611      	mov	r1, r2
 800add0:	4618      	mov	r0, r3
 800add2:	f7ff ff4b 	bl	800ac6c <parserIP>
		SetSettings.sb_mask0 = value[0];
 800add6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800adda:	b21a      	sxth	r2, r3
 800addc:	4b84      	ldr	r3, [pc, #528]	; (800aff0 <setSettings+0x300>)
 800adde:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		SetSettings.sb_mask1 = value[1];
 800ade2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ade6:	b21a      	sxth	r2, r3
 800ade8:	4b81      	ldr	r3, [pc, #516]	; (800aff0 <setSettings+0x300>)
 800adea:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		SetSettings.sb_mask2 = value[2];
 800adee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800adf2:	b21a      	sxth	r2, r3
 800adf4:	4b7e      	ldr	r3, [pc, #504]	; (800aff0 <setSettings+0x300>)
 800adf6:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		SetSettings.sb_mask3 = value[3];
 800adfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800adfe:	b21a      	sxth	r2, r3
 800ae00:	4b7b      	ldr	r3, [pc, #492]	; (800aff0 <setSettings+0x300>)
 800ae02:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
}
 800ae06:	e156      	b.n	800b0b6 <setSettings+0x3c6>
	} else if (strcmp(name, "gateway") == 0) {
 800ae08:	497d      	ldr	r1, [pc, #500]	; (800b000 <setSettings+0x310>)
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7f5 f9e0 	bl	80001d0 <strcmp>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d126      	bne.n	800ae64 <setSettings+0x174>
		strcpy(ipstr, token);
 800ae16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae1a:	6839      	ldr	r1, [r7, #0]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f01c f94c 	bl	80270ba <strcpy>
		parserIP(ipstr, value);
 800ae22:	f107 0220 	add.w	r2, r7, #32
 800ae26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae2a:	4611      	mov	r1, r2
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7ff ff1d 	bl	800ac6c <parserIP>
		SetSettings.gateway0 = value[0];
 800ae32:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae36:	b21a      	sxth	r2, r3
 800ae38:	4b6d      	ldr	r3, [pc, #436]	; (800aff0 <setSettings+0x300>)
 800ae3a:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		SetSettings.gateway1 = value[1];
 800ae3e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ae42:	b21a      	sxth	r2, r3
 800ae44:	4b6a      	ldr	r3, [pc, #424]	; (800aff0 <setSettings+0x300>)
 800ae46:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		SetSettings.gateway2 = value[2];
 800ae4a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ae4e:	b21a      	sxth	r2, r3
 800ae50:	4b67      	ldr	r3, [pc, #412]	; (800aff0 <setSettings+0x300>)
 800ae52:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		SetSettings.gateway3 = value[3];
 800ae56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ae5a:	b21a      	sxth	r2, r3
 800ae5c:	4b64      	ldr	r3, [pc, #400]	; (800aff0 <setSettings+0x300>)
 800ae5e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
}
 800ae62:	e128      	b.n	800b0b6 <setSettings+0x3c6>
	} else if (strcmp(name, "macaddr") == 0) {
 800ae64:	4967      	ldr	r1, [pc, #412]	; (800b004 <setSettings+0x314>)
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7f5 f9b2 	bl	80001d0 <strcmp>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d143      	bne.n	800aefa <setSettings+0x20a>
		strcpy(ipstr, token);
 800ae72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae76:	6839      	ldr	r1, [r7, #0]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f01c f91e 	bl	80270ba <strcpy>
		if( 6 == sscanf(ipstr, "%x-%x-%x-%x-%x-%x%*c", &values[0], &values[1], &values[2], &values[3], &values[4], &values[5])){
 800ae7e:	f107 0308 	add.w	r3, r7, #8
 800ae82:	1d19      	adds	r1, r3, #4
 800ae84:	f107 0208 	add.w	r2, r7, #8
 800ae88:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ae8c:	f107 0308 	add.w	r3, r7, #8
 800ae90:	3314      	adds	r3, #20
 800ae92:	9303      	str	r3, [sp, #12]
 800ae94:	f107 0308 	add.w	r3, r7, #8
 800ae98:	3310      	adds	r3, #16
 800ae9a:	9302      	str	r3, [sp, #8]
 800ae9c:	f107 0308 	add.w	r3, r7, #8
 800aea0:	330c      	adds	r3, #12
 800aea2:	9301      	str	r3, [sp, #4]
 800aea4:	f107 0308 	add.w	r3, r7, #8
 800aea8:	3308      	adds	r3, #8
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	460b      	mov	r3, r1
 800aeae:	4956      	ldr	r1, [pc, #344]	; (800b008 <setSettings+0x318>)
 800aeb0:	f01c f876 	bl	8026fa0 <siscanf>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b06      	cmp	r3, #6
 800aeb8:	f040 80fd 	bne.w	800b0b6 <setSettings+0x3c6>
		    SetSettings.macaddr0 = (uint8_t) values[0];
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	4b4b      	ldr	r3, [pc, #300]	; (800aff0 <setSettings+0x300>)
 800aec2:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		    SetSettings.macaddr1 = (uint8_t) values[1];
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	b2da      	uxtb	r2, r3
 800aeca:	4b49      	ldr	r3, [pc, #292]	; (800aff0 <setSettings+0x300>)
 800aecc:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		    SetSettings.macaddr2 = (uint8_t) values[2];
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	4b46      	ldr	r3, [pc, #280]	; (800aff0 <setSettings+0x300>)
 800aed6:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		    SetSettings.macaddr3 = (uint8_t) values[3];
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	b2da      	uxtb	r2, r3
 800aede:	4b44      	ldr	r3, [pc, #272]	; (800aff0 <setSettings+0x300>)
 800aee0:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		    SetSettings.macaddr4 = (uint8_t) values[4];
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	b2da      	uxtb	r2, r3
 800aee8:	4b41      	ldr	r3, [pc, #260]	; (800aff0 <setSettings+0x300>)
 800aeea:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		    SetSettings.macaddr5 = (uint8_t) values[5];
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	4b3f      	ldr	r3, [pc, #252]	; (800aff0 <setSettings+0x300>)
 800aef4:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
}
 800aef8:	e0dd      	b.n	800b0b6 <setSettings+0x3c6>
	} else if (strcmp(name, "mqtt_hst") == 0) {
 800aefa:	4944      	ldr	r1, [pc, #272]	; (800b00c <setSettings+0x31c>)
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7f5 f967 	bl	80001d0 <strcmp>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d126      	bne.n	800af56 <setSettings+0x266>
		strcpy(ipstr, token);
 800af08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af0c:	6839      	ldr	r1, [r7, #0]
 800af0e:	4618      	mov	r0, r3
 800af10:	f01c f8d3 	bl	80270ba <strcpy>
		parserIP(ipstr, value);
 800af14:	f107 0220 	add.w	r2, r7, #32
 800af18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af1c:	4611      	mov	r1, r2
 800af1e:	4618      	mov	r0, r3
 800af20:	f7ff fea4 	bl	800ac6c <parserIP>
		SetSettings.mqtt_hst0 = value[0];
 800af24:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af28:	b21a      	sxth	r2, r3
 800af2a:	4b31      	ldr	r3, [pc, #196]	; (800aff0 <setSettings+0x300>)
 800af2c:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		SetSettings.mqtt_hst1 = value[1];
 800af30:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800af34:	b21a      	sxth	r2, r3
 800af36:	4b2e      	ldr	r3, [pc, #184]	; (800aff0 <setSettings+0x300>)
 800af38:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		SetSettings.mqtt_hst2 = value[2];
 800af3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800af40:	b21a      	sxth	r2, r3
 800af42:	4b2b      	ldr	r3, [pc, #172]	; (800aff0 <setSettings+0x300>)
 800af44:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		SetSettings.mqtt_hst3 = value[3];
 800af48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800af4c:	b21a      	sxth	r2, r3
 800af4e:	4b28      	ldr	r3, [pc, #160]	; (800aff0 <setSettings+0x300>)
 800af50:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 800af54:	e0af      	b.n	800b0b6 <setSettings+0x3c6>
	} else if (strcmp(name, "mqtt_prt") == 0) {
 800af56:	492e      	ldr	r1, [pc, #184]	; (800b010 <setSettings+0x320>)
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f7f5 f939 	bl	80001d0 <strcmp>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d106      	bne.n	800af72 <setSettings+0x282>
		SetSettings.mqtt_prt = atoi(token);
 800af64:	6838      	ldr	r0, [r7, #0]
 800af66:	f01b f8c9 	bl	80260fc <atoi>
 800af6a:	4603      	mov	r3, r0
 800af6c:	4a20      	ldr	r2, [pc, #128]	; (800aff0 <setSettings+0x300>)
 800af6e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800af70:	e0a1      	b.n	800b0b6 <setSettings+0x3c6>
	} else if (strcmp(name, "mqtt_clt") == 0) {
 800af72:	4928      	ldr	r1, [pc, #160]	; (800b014 <setSettings+0x324>)
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f7f5 f92b 	bl	80001d0 <strcmp>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d104      	bne.n	800af8a <setSettings+0x29a>
		strcpy(SetSettings.mqtt_clt, token);
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	4825      	ldr	r0, [pc, #148]	; (800b018 <setSettings+0x328>)
 800af84:	f01c f899 	bl	80270ba <strcpy>
}
 800af88:	e095      	b.n	800b0b6 <setSettings+0x3c6>
	} else if (strcmp(name, "mqtt_usr") == 0) {
 800af8a:	4924      	ldr	r1, [pc, #144]	; (800b01c <setSettings+0x32c>)
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f7f5 f91f 	bl	80001d0 <strcmp>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d104      	bne.n	800afa2 <setSettings+0x2b2>
		strcpy(SetSettings.mqtt_usr, token);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	4821      	ldr	r0, [pc, #132]	; (800b020 <setSettings+0x330>)
 800af9c:	f01c f88d 	bl	80270ba <strcpy>
}
 800afa0:	e089      	b.n	800b0b6 <setSettings+0x3c6>
	} else if (strcmp(name, "mqtt_pswd") == 0) {
 800afa2:	4920      	ldr	r1, [pc, #128]	; (800b024 <setSettings+0x334>)
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7f5 f913 	bl	80001d0 <strcmp>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d104      	bne.n	800afba <setSettings+0x2ca>
		strcpy(SetSettings.mqtt_pswd, token);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	481d      	ldr	r0, [pc, #116]	; (800b028 <setSettings+0x338>)
 800afb4:	f01c f881 	bl	80270ba <strcpy>
}
 800afb8:	e07d      	b.n	800b0b6 <setSettings+0x3c6>
	} else if (strcmp(name, "mqtt_tpc") == 0) {
 800afba:	491c      	ldr	r1, [pc, #112]	; (800b02c <setSettings+0x33c>)
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f7f5 f907 	bl	80001d0 <strcmp>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d104      	bne.n	800afd2 <setSettings+0x2e2>
		strcpy(SetSettings.mqtt_tpc, token);
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	4819      	ldr	r0, [pc, #100]	; (800b030 <setSettings+0x340>)
 800afcc:	f01c f875 	bl	80270ba <strcpy>
}
 800afd0:	e071      	b.n	800b0b6 <setSettings+0x3c6>
	} else if (strcmp(name, "mqtt_ftpc") == 0) {
 800afd2:	4918      	ldr	r1, [pc, #96]	; (800b034 <setSettings+0x344>)
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f7f5 f8fb 	bl	80001d0 <strcmp>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d12d      	bne.n	800b03c <setSettings+0x34c>
		strcpy(SetSettings.mqtt_ftpc, token);
 800afe0:	6839      	ldr	r1, [r7, #0]
 800afe2:	4815      	ldr	r0, [pc, #84]	; (800b038 <setSettings+0x348>)
 800afe4:	f01c f869 	bl	80270ba <strcpy>
}
 800afe8:	e065      	b.n	800b0b6 <setSettings+0x3c6>
 800afea:	bf00      	nop
 800afec:	0802c5ac 	.word	0x0802c5ac
 800aff0:	20005b90 	.word	0x20005b90
 800aff4:	0802c630 	.word	0x0802c630
 800aff8:	0802c928 	.word	0x0802c928
 800affc:	0802c930 	.word	0x0802c930
 800b000:	0802c938 	.word	0x0802c938
 800b004:	0802c6ec 	.word	0x0802c6ec
 800b008:	0802c940 	.word	0x0802c940
 800b00c:	0802c958 	.word	0x0802c958
 800b010:	0802c5b8 	.word	0x0802c5b8
 800b014:	0802c5c4 	.word	0x0802c5c4
 800b018:	20005bf0 	.word	0x20005bf0
 800b01c:	0802c5d0 	.word	0x0802c5d0
 800b020:	20005bfa 	.word	0x20005bfa
 800b024:	0802c5dc 	.word	0x0802c5dc
 800b028:	20005c04 	.word	0x20005c04
 800b02c:	0802c5e8 	.word	0x0802c5e8
 800b030:	20005c13 	.word	0x20005c13
 800b034:	0802c5f4 	.word	0x0802c5f4
 800b038:	20005c22 	.word	0x20005c22
	} else if (strcmp(name, "lang") == 0) {
 800b03c:	4920      	ldr	r1, [pc, #128]	; (800b0c0 <setSettings+0x3d0>)
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7f5 f8c6 	bl	80001d0 <strcmp>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d104      	bne.n	800b054 <setSettings+0x364>
		strcpy(SetSettings.lang, token);
 800b04a:	6839      	ldr	r1, [r7, #0]
 800b04c:	481d      	ldr	r0, [pc, #116]	; (800b0c4 <setSettings+0x3d4>)
 800b04e:	f01c f834 	bl	80270ba <strcpy>
}
 800b052:	e030      	b.n	800b0b6 <setSettings+0x3c6>
	} else if (strcmp(name, "timezone") == 0) {
 800b054:	491c      	ldr	r1, [pc, #112]	; (800b0c8 <setSettings+0x3d8>)
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f7f5 f8ba 	bl	80001d0 <strcmp>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d106      	bne.n	800b070 <setSettings+0x380>
		SetSettings.timezone = atoi(token);
 800b062:	6838      	ldr	r0, [r7, #0]
 800b064:	f01b f84a 	bl	80260fc <atoi>
 800b068:	4603      	mov	r3, r0
 800b06a:	4a18      	ldr	r2, [pc, #96]	; (800b0cc <setSettings+0x3dc>)
 800b06c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800b06e:	e022      	b.n	800b0b6 <setSettings+0x3c6>
	} else if (strcmp(name, "adm_name") == 0) {
 800b070:	4917      	ldr	r1, [pc, #92]	; (800b0d0 <setSettings+0x3e0>)
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7f5 f8ac 	bl	80001d0 <strcmp>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d104      	bne.n	800b088 <setSettings+0x398>
		strcpy(SetSettings.adm_name, token);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	4812      	ldr	r0, [pc, #72]	; (800b0cc <setSettings+0x3dc>)
 800b082:	f01c f81a 	bl	80270ba <strcpy>
}
 800b086:	e016      	b.n	800b0b6 <setSettings+0x3c6>
	} else if (strcmp(name, "adm_pswd") == 0) {
 800b088:	4912      	ldr	r1, [pc, #72]	; (800b0d4 <setSettings+0x3e4>)
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7f5 f8a0 	bl	80001d0 <strcmp>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d104      	bne.n	800b0a0 <setSettings+0x3b0>
		strcpy(SetSettings.adm_pswd, token);
 800b096:	6839      	ldr	r1, [r7, #0]
 800b098:	480f      	ldr	r0, [pc, #60]	; (800b0d8 <setSettings+0x3e8>)
 800b09a:	f01c f80e 	bl	80270ba <strcpy>
}
 800b09e:	e00a      	b.n	800b0b6 <setSettings+0x3c6>
	} else if (strcmp(name, "token") == 0) {
 800b0a0:	490e      	ldr	r1, [pc, #56]	; (800b0dc <setSettings+0x3ec>)
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f7f5 f894 	bl	80001d0 <strcmp>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d103      	bne.n	800b0b6 <setSettings+0x3c6>
		strcpy(SetSettings.token, token);
 800b0ae:	6839      	ldr	r1, [r7, #0]
 800b0b0:	480b      	ldr	r0, [pc, #44]	; (800b0e0 <setSettings+0x3f0>)
 800b0b2:	f01c f802 	bl	80270ba <strcpy>
}
 800b0b6:	bf00      	nop
 800b0b8:	3748      	adds	r7, #72	; 0x48
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	0802c24c 	.word	0x0802c24c
 800b0c4:	20005bb4 	.word	0x20005bb4
 800b0c8:	0802c714 	.word	0x0802c714
 800b0cc:	20005b90 	.word	0x20005b90
 800b0d0:	0802c6f4 	.word	0x0802c6f4
 800b0d4:	0802c700 	.word	0x0802c700
 800b0d8:	20005b9a 	.word	0x20005b9a
 800b0dc:	0802c70c 	.word	0x0802c70c
 800b0e0:	20005ba9 	.word	0x20005ba9

0800b0e4 <httpd_post_begin>:



err_t httpd_post_begin(void *connection, const char *uri,
		const char *http_request, uint16_t http_request_len, int content_len,
		char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b086      	sub	sp, #24
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
 800b0f0:	807b      	strh	r3, [r7, #2]
	  LWIP_UNUSED_ARG(http_request_len);
	  LWIP_UNUSED_ARG(content_len);
	  LWIP_UNUSED_ARG(post_auto_wnd);


		printf("response_uri: %s \n", response_uri);
 800b0f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0f4:	481c      	ldr	r0, [pc, #112]	; (800b168 <httpd_post_begin+0x84>)
 800b0f6:	f01b fdaf 	bl	8026c58 <iprintf>

	  v_PostBufer.len = 0;
 800b0fa:	4b1c      	ldr	r3, [pc, #112]	; (800b16c <httpd_post_begin+0x88>)
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	601a      	str	r2, [r3, #0]
	  memset(v_PostBufer.buf, '\0', sizeof(v_PostBufer.buf));
 800b100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b104:	2100      	movs	r1, #0
 800b106:	481a      	ldr	r0, [pc, #104]	; (800b170 <httpd_post_begin+0x8c>)
 800b108:	f01b fa76 	bl	80265f8 <memset>
	  memset(v_PostBufer.uri, '\0', sizeof(v_PostBufer.uri));
 800b10c:	2219      	movs	r2, #25
 800b10e:	2100      	movs	r1, #0
 800b110:	4818      	ldr	r0, [pc, #96]	; (800b174 <httpd_post_begin+0x90>)
 800b112:	f01b fa71 	bl	80265f8 <memset>

	  // parse URI to "?"
	  int c = strchr(uri, '?') - uri;
 800b116:	213f      	movs	r1, #63	; 0x3f
 800b118:	68b8      	ldr	r0, [r7, #8]
 800b11a:	f01b ffc1 	bl	80270a0 <strchr>
 800b11e:	4602      	mov	r2, r0
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	617b      	str	r3, [r7, #20]
	  strncpy(v_PostBufer.uri, uri, c);
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	461a      	mov	r2, r3
 800b12a:	68b9      	ldr	r1, [r7, #8]
 800b12c:	4811      	ldr	r0, [pc, #68]	; (800b174 <httpd_post_begin+0x90>)
 800b12e:	f01c fd3b 	bl	8027ba8 <strncpy>
	  v_PostBufer.uri[c] = '\0';
 800b132:	4a0e      	ldr	r2, [pc, #56]	; (800b16c <httpd_post_begin+0x88>)
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	4413      	add	r3, r2
 800b138:	f603 0304 	addw	r3, r3, #2052	; 0x804
 800b13c:	2200      	movs	r2, #0
 800b13e:	701a      	strb	r2, [r3, #0]


	  if (current_connection != connection) {
 800b140:	4b0d      	ldr	r3, [pc, #52]	; (800b178 <httpd_post_begin+0x94>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68fa      	ldr	r2, [r7, #12]
 800b146:	429a      	cmp	r2, r3
 800b148:	d007      	beq.n	800b15a <httpd_post_begin+0x76>
	      current_connection = connection;
 800b14a:	4a0b      	ldr	r2, [pc, #44]	; (800b178 <httpd_post_begin+0x94>)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	6013      	str	r3, [r2, #0]
	      *post_auto_wnd = 1;
 800b150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b152:	2201      	movs	r2, #1
 800b154:	701a      	strb	r2, [r3, #0]

	      return ERR_OK;
 800b156:	2300      	movs	r3, #0
 800b158:	e001      	b.n	800b15e <httpd_post_begin+0x7a>
	  }
	  return ERR_VAL;
 800b15a:	f06f 0305 	mvn.w	r3, #5
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3718      	adds	r7, #24
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	0802c964 	.word	0x0802c964
 800b16c:	2000d1bc 	.word	0x2000d1bc
 800b170:	2000d1c0 	.word	0x2000d1c0
 800b174:	2000d9c0 	.word	0x2000d9c0
 800b178:	2000133c 	.word	0x2000133c

0800b17c <httpd_post_receive_data>:



err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b082      	sub	sp, #8
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]

	memset(tempbufer, '\0', sizeof(tempbufer));
 800b186:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b18a:	2100      	movs	r1, #0
 800b18c:	4819      	ldr	r0, [pc, #100]	; (800b1f4 <httpd_post_receive_data+0x78>)
 800b18e:	f01b fa33 	bl	80265f8 <memset>

	if (current_connection == connection && p != NULL) {
 800b192:	4b19      	ldr	r3, [pc, #100]	; (800b1f8 <httpd_post_receive_data+0x7c>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d11f      	bne.n	800b1dc <httpd_post_receive_data+0x60>
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d01c      	beq.n	800b1dc <httpd_post_receive_data+0x60>
	  if(strcmp("upgrade.shtml", v_PostBufer.uri) == 0){
 800b1a2:	4916      	ldr	r1, [pc, #88]	; (800b1fc <httpd_post_receive_data+0x80>)
 800b1a4:	4816      	ldr	r0, [pc, #88]	; (800b200 <httpd_post_receive_data+0x84>)
 800b1a6:	f7f5 f813 	bl	80001d0 <strcmp>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d101      	bne.n	800b1b4 <httpd_post_receive_data+0x38>

		  // @todo  Firmware update in flash

		  return ERR_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	e01b      	b.n	800b1ec <httpd_post_receive_data+0x70>
	  } else {
		  strncpy(tempbufer, p->payload, p->len);
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	6859      	ldr	r1, [r3, #4]
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	895b      	ldrh	r3, [r3, #10]
 800b1bc:	461a      	mov	r2, r3
 800b1be:	480d      	ldr	r0, [pc, #52]	; (800b1f4 <httpd_post_receive_data+0x78>)
 800b1c0:	f01c fcf2 	bl	8027ba8 <strncpy>
		  strcat(v_PostBufer.buf, tempbufer);
 800b1c4:	490b      	ldr	r1, [pc, #44]	; (800b1f4 <httpd_post_receive_data+0x78>)
 800b1c6:	480f      	ldr	r0, [pc, #60]	; (800b204 <httpd_post_receive_data+0x88>)
 800b1c8:	f01b ff5b 	bl	8027082 <strcat>
		  pbuf_free(p);
 800b1cc:	6838      	ldr	r0, [r7, #0]
 800b1ce:	f011 f91b 	bl	801c408 <pbuf_free>
		  printf("POST 1 \n");
 800b1d2:	480d      	ldr	r0, [pc, #52]	; (800b208 <httpd_post_receive_data+0x8c>)
 800b1d4:	f01b fdc6 	bl	8026d64 <puts>

		  return ERR_OK;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	e007      	b.n	800b1ec <httpd_post_receive_data+0x70>
	        pbuf_free(p);
	    }
		return ERR_OK;
	}

	if (p != NULL) {
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d002      	beq.n	800b1e8 <httpd_post_receive_data+0x6c>
		pbuf_free(p);
 800b1e2:	6838      	ldr	r0, [r7, #0]
 800b1e4:	f011 f910 	bl	801c408 <pbuf_free>
	}
	return ERR_VAL;
 800b1e8:	f06f 0305 	mvn.w	r3, #5
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	20001384 	.word	0x20001384
 800b1f8:	2000133c 	.word	0x2000133c
 800b1fc:	2000d9c0 	.word	0x2000d9c0
 800b200:	0802c978 	.word	0x0802c978
 800b204:	2000d1c0 	.word	0x2000d1c0
 800b208:	0802c988 	.word	0x0802c988

0800b20c <httpd_post_finished>:


void httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len) {
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b08c      	sub	sp, #48	; 0x30
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	4613      	mov	r3, r2
 800b218:	80fb      	strh	r3, [r7, #6]

    int count = 0;
 800b21a:	2300      	movs	r3, #0
 800b21c:	62fb      	str	r3, [r7, #44]	; 0x2c
    int id = 0;
 800b21e:	2300      	movs	r3, #0
 800b220:	62bb      	str	r3, [r7, #40]	; 0x28
	char *end_str;
	char *name;
	uint16_t usbdata = 0;
 800b222:	2300      	movs	r3, #0
 800b224:	82fb      	strh	r3, [r7, #22]
	//printf("POST %s \n", v_PostBufer.buf);

    char *token = strtok_r(v_PostBufer.buf, "&", &end_str);
 800b226:	f107 0318 	add.w	r3, r7, #24
 800b22a:	461a      	mov	r2, r3
 800b22c:	4953      	ldr	r1, [pc, #332]	; (800b37c <httpd_post_finished+0x170>)
 800b22e:	4854      	ldr	r0, [pc, #336]	; (800b380 <httpd_post_finished+0x174>)
 800b230:	f01d fb28 	bl	8028884 <strtok_r>
 800b234:	6238      	str	r0, [r7, #32]
    while (token != NULL)
 800b236:	e07c      	b.n	800b332 <httpd_post_finished+0x126>
    {
        char *end_token;
        //printf("---- %s \n", token);
        char *token2 = strtok_r(token, "=", &end_token);
 800b238:	f107 0310 	add.w	r3, r7, #16
 800b23c:	461a      	mov	r2, r3
 800b23e:	4951      	ldr	r1, [pc, #324]	; (800b384 <httpd_post_finished+0x178>)
 800b240:	6a38      	ldr	r0, [r7, #32]
 800b242:	f01d fb1f 	bl	8028884 <strtok_r>
 800b246:	61f8      	str	r0, [r7, #28]
        while (token2 != NULL)
 800b248:	e066      	b.n	800b318 <httpd_post_finished+0x10c>
        {
        	count++;
 800b24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24c:	3301      	adds	r3, #1
 800b24e:	62fb      	str	r3, [r7, #44]	; 0x2c
        	if(count == 1){
 800b250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b252:	2b01      	cmp	r3, #1
 800b254:	d101      	bne.n	800b25a <httpd_post_finished+0x4e>
        	    name = token2;
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	627b      	str	r3, [r7, #36]	; 0x24
        	}
        	if(count == 2){
 800b25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25c:	2b02      	cmp	r3, #2
 800b25e:	d153      	bne.n	800b308 <httpd_post_finished+0xfc>
        		// SET id
        		if (strcmp(name, "id") == 0){
 800b260:	4949      	ldr	r1, [pc, #292]	; (800b388 <httpd_post_finished+0x17c>)
 800b262:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b264:	f7f4 ffb4 	bl	80001d0 <strcmp>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d103      	bne.n	800b276 <httpd_post_finished+0x6a>
        			id = atoi(token2);
 800b26e:	69f8      	ldr	r0, [r7, #28]
 800b270:	f01a ff44 	bl	80260fc <atoi>
 800b274:	62b8      	str	r0, [r7, #40]	; 0x28
        		}
        		// POST request Relay
        		if (strcmp(v_PostBufer.uri, "/tabrelay.shtml") == 0 && id != 0){
 800b276:	4945      	ldr	r1, [pc, #276]	; (800b38c <httpd_post_finished+0x180>)
 800b278:	4845      	ldr	r0, [pc, #276]	; (800b390 <httpd_post_finished+0x184>)
 800b27a:	f7f4 ffa9 	bl	80001d0 <strcmp>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d10c      	bne.n	800b29e <httpd_post_finished+0x92>
 800b284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b286:	2b00      	cmp	r3, #0
 800b288:	d009      	beq.n	800b29e <httpd_post_finished+0x92>
        			if(token2 != NULL){
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d006      	beq.n	800b29e <httpd_post_finished+0x92>
        				setPinRelay(id, name, token2);
 800b290:	69fa      	ldr	r2, [r7, #28]
 800b292:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b296:	f7ff faa3 	bl	800a7e0 <setPinRelay>
        				usbdata = 1;
 800b29a:	2301      	movs	r3, #1
 800b29c:	82fb      	strh	r3, [r7, #22]
        			}
        		}
        		// POST request Buttom
        		if (strcmp(v_PostBufer.uri, "/tabbuttom.shtml") == 0 && id != 0){
 800b29e:	493d      	ldr	r1, [pc, #244]	; (800b394 <httpd_post_finished+0x188>)
 800b2a0:	483b      	ldr	r0, [pc, #236]	; (800b390 <httpd_post_finished+0x184>)
 800b2a2:	f7f4 ff95 	bl	80001d0 <strcmp>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d10c      	bne.n	800b2c6 <httpd_post_finished+0xba>
 800b2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d009      	beq.n	800b2c6 <httpd_post_finished+0xba>
        			if(token2 != NULL){
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d006      	beq.n	800b2c6 <httpd_post_finished+0xba>
        				setPinButtom(id, name, token2);
 800b2b8:	69fa      	ldr	r2, [r7, #28]
 800b2ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2be:	f7ff fb3d 	bl	800a93c <setPinButtom>
        				usbdata = 1;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	82fb      	strh	r3, [r7, #22]
        			}
        		}
        		// POST request Settings
        		if (strcmp(v_PostBufer.uri, "/settings.shtml") == 0){
 800b2c6:	4934      	ldr	r1, [pc, #208]	; (800b398 <httpd_post_finished+0x18c>)
 800b2c8:	4831      	ldr	r0, [pc, #196]	; (800b390 <httpd_post_finished+0x184>)
 800b2ca:	f7f4 ff81 	bl	80001d0 <strcmp>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d108      	bne.n	800b2e6 <httpd_post_finished+0xda>
        			if(token2 != NULL){
 800b2d4:	69fb      	ldr	r3, [r7, #28]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d005      	beq.n	800b2e6 <httpd_post_finished+0xda>
        				setSettings(name, token2);
 800b2da:	69f9      	ldr	r1, [r7, #28]
 800b2dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2de:	f7ff fd07 	bl	800acf0 <setSettings>
        				usbdata = 2;
 800b2e2:	2302      	movs	r3, #2
 800b2e4:	82fb      	strh	r3, [r7, #22]
        			}
        		}
        		// POST request Cron
				if (strcmp(v_PostBufer.uri, "/tabcron.shtml") == 0){
 800b2e6:	492d      	ldr	r1, [pc, #180]	; (800b39c <httpd_post_finished+0x190>)
 800b2e8:	4829      	ldr	r0, [pc, #164]	; (800b390 <httpd_post_finished+0x184>)
 800b2ea:	f7f4 ff71 	bl	80001d0 <strcmp>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d109      	bne.n	800b308 <httpd_post_finished+0xfc>
					if(token2 != NULL){
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d006      	beq.n	800b308 <httpd_post_finished+0xfc>
						setCron(id, name, token2);
 800b2fa:	69fa      	ldr	r2, [r7, #28]
 800b2fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b300:	f7ff fbf8 	bl	800aaf4 <setCron>
						usbdata = 3;
 800b304:	2303      	movs	r3, #3
 800b306:	82fb      	strh	r3, [r7, #22]
					}
				}

        	}
            token2 = strtok_r(NULL, "=", &end_token);
 800b308:	f107 0310 	add.w	r3, r7, #16
 800b30c:	461a      	mov	r2, r3
 800b30e:	491d      	ldr	r1, [pc, #116]	; (800b384 <httpd_post_finished+0x178>)
 800b310:	2000      	movs	r0, #0
 800b312:	f01d fab7 	bl	8028884 <strtok_r>
 800b316:	61f8      	str	r0, [r7, #28]
        while (token2 != NULL)
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d195      	bne.n	800b24a <httpd_post_finished+0x3e>
        }
        token = strtok_r(NULL, "&", &end_str);
 800b31e:	f107 0318 	add.w	r3, r7, #24
 800b322:	461a      	mov	r2, r3
 800b324:	4915      	ldr	r1, [pc, #84]	; (800b37c <httpd_post_finished+0x170>)
 800b326:	2000      	movs	r0, #0
 800b328:	f01d faac 	bl	8028884 <strtok_r>
 800b32c:	6238      	str	r0, [r7, #32]
        count = 0;
 800b32e:	2300      	movs	r3, #0
 800b330:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (token != NULL)
 800b332:	6a3b      	ldr	r3, [r7, #32]
 800b334:	2b00      	cmp	r3, #0
 800b336:	f47f af7f 	bne.w	800b238 <httpd_post_finished+0x2c>
    }


	if (current_connection == connection) {
 800b33a:	4b19      	ldr	r3, [pc, #100]	; (800b3a0 <httpd_post_finished+0x194>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	429a      	cmp	r2, r3
 800b342:	d117      	bne.n	800b374 <httpd_post_finished+0x168>

		//printf("URL %s \n", v_PostBufer.uri);

/******************************************************************************************/
		// Отправка числа в очередь
		if(usbdata != 0){
 800b344:	8afb      	ldrh	r3, [r7, #22]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d007      	beq.n	800b35a <httpd_post_finished+0x14e>
			xQueueSend(usbQueueHandle, &usbdata, 0);
 800b34a:	4b16      	ldr	r3, [pc, #88]	; (800b3a4 <httpd_post_finished+0x198>)
 800b34c:	6818      	ldr	r0, [r3, #0]
 800b34e:	f107 0116 	add.w	r1, r7, #22
 800b352:	2300      	movs	r3, #0
 800b354:	2200      	movs	r2, #0
 800b356:	f009 fad7 	bl	8014908 <xQueueGenericSend>
		}
		usbdata = 0;
 800b35a:	2300      	movs	r3, #0
 800b35c:	82fb      	strh	r3, [r7, #22]

/******************************************************************************************/

		restartSSID();
 800b35e:	f7fd f855 	bl	800840c <restartSSID>
		snprintf(response_uri, response_uri_len, v_PostBufer.uri);
 800b362:	88fb      	ldrh	r3, [r7, #6]
 800b364:	4a0a      	ldr	r2, [pc, #40]	; (800b390 <httpd_post_finished+0x184>)
 800b366:	4619      	mov	r1, r3
 800b368:	68b8      	ldr	r0, [r7, #8]
 800b36a:	f01b fdc5 	bl	8026ef8 <sniprintf>

		current_connection = NULL;
 800b36e:	4b0c      	ldr	r3, [pc, #48]	; (800b3a0 <httpd_post_finished+0x194>)
 800b370:	2200      	movs	r2, #0
 800b372:	601a      	str	r2, [r3, #0]

	}
}
 800b374:	bf00      	nop
 800b376:	3730      	adds	r7, #48	; 0x30
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	0802c990 	.word	0x0802c990
 800b380:	2000d1c0 	.word	0x2000d1c0
 800b384:	0802c994 	.word	0x0802c994
 800b388:	0802c520 	.word	0x0802c520
 800b38c:	0802c760 	.word	0x0802c760
 800b390:	2000d9c0 	.word	0x2000d9c0
 800b394:	0802c770 	.word	0x0802c770
 800b398:	0802c784 	.word	0x0802c784
 800b39c:	0802c844 	.word	0x0802c844
 800b3a0:	2000133c 	.word	0x2000133c
 800b3a4:	2000d154 	.word	0x2000d154

0800b3a8 <http_server_init>:

//////////////////// POST  END ////////////////////////



void http_server_init(void) {
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	af00      	add	r7, sp, #0
	httpd_init();
 800b3ac:	f00d fcdc 	bl	8018d68 <httpd_init>

	http_set_cgi_handlers(URL_TABLES, CGI_URL_NUM); //
 800b3b0:	2314      	movs	r3, #20
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	4805      	ldr	r0, [pc, #20]	; (800b3cc <http_server_init+0x24>)
 800b3b6:	f00d fd39 	bl	8018e2c <http_set_cgi_handlers>
	http_set_ssi_handler((tSSIHandler) ssi_handler, (char const**) TAGS, SSI_TAG_NUM); //
 800b3ba:	4b05      	ldr	r3, [pc, #20]	; (800b3d0 <http_server_init+0x28>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2207      	movs	r2, #7
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	4804      	ldr	r0, [pc, #16]	; (800b3d4 <http_server_init+0x2c>)
 800b3c4:	f00d fcf0 	bl	8018da8 <http_set_ssi_handler>
}
 800b3c8:	bf00      	nop
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	0803012c 	.word	0x0803012c
 800b3d0:	20000034 	.word	0x20000034
 800b3d4:	080084a1 	.word	0x080084a1

0800b3d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b3d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b410 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b3dc:	480d      	ldr	r0, [pc, #52]	; (800b414 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b3de:	490e      	ldr	r1, [pc, #56]	; (800b418 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b3e0:	4a0e      	ldr	r2, [pc, #56]	; (800b41c <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b3e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b3e4:	e002      	b.n	800b3ec <LoopCopyDataInit>

0800b3e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b3e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b3e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b3ea:	3304      	adds	r3, #4

0800b3ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b3ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b3ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b3f0:	d3f9      	bcc.n	800b3e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b3f2:	4a0b      	ldr	r2, [pc, #44]	; (800b420 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b3f4:	4c0b      	ldr	r4, [pc, #44]	; (800b424 <LoopFillZerobss+0x26>)
  movs r3, #0
 800b3f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b3f8:	e001      	b.n	800b3fe <LoopFillZerobss>

0800b3fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b3fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b3fc:	3204      	adds	r2, #4

0800b3fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b3fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b400:	d3fb      	bcc.n	800b3fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b402:	f7fc ffa7 	bl	8008354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b406:	f01a ff73 	bl	80262f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b40a:	f7f9 f9a3 	bl	8004754 <main>
  bx  lr    
 800b40e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b410:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800b414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b418:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 800b41c:	080611a4 	.word	0x080611a4
  ldr r2, =_sbss
 800b420:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 800b424:	2001d54c 	.word	0x2001d54c

0800b428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b428:	e7fe      	b.n	800b428 <ADC_IRQHandler>
	...

0800b42c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b430:	4b0e      	ldr	r3, [pc, #56]	; (800b46c <HAL_Init+0x40>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a0d      	ldr	r2, [pc, #52]	; (800b46c <HAL_Init+0x40>)
 800b436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b43a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b43c:	4b0b      	ldr	r3, [pc, #44]	; (800b46c <HAL_Init+0x40>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a0a      	ldr	r2, [pc, #40]	; (800b46c <HAL_Init+0x40>)
 800b442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b446:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b448:	4b08      	ldr	r3, [pc, #32]	; (800b46c <HAL_Init+0x40>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a07      	ldr	r2, [pc, #28]	; (800b46c <HAL_Init+0x40>)
 800b44e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b454:	2003      	movs	r0, #3
 800b456:	f000 f8fc 	bl	800b652 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b45a:	200f      	movs	r0, #15
 800b45c:	f7fc fe12 	bl	8008084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b460:	f7fc fce8 	bl	8007e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	40023c00 	.word	0x40023c00

0800b470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b470:	b480      	push	{r7}
 800b472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b474:	4b06      	ldr	r3, [pc, #24]	; (800b490 <HAL_IncTick+0x20>)
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	461a      	mov	r2, r3
 800b47a:	4b06      	ldr	r3, [pc, #24]	; (800b494 <HAL_IncTick+0x24>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4413      	add	r3, r2
 800b480:	4a04      	ldr	r2, [pc, #16]	; (800b494 <HAL_IncTick+0x24>)
 800b482:	6013      	str	r3, [r2, #0]
}
 800b484:	bf00      	nop
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr
 800b48e:	bf00      	nop
 800b490:	2000003c 	.word	0x2000003c
 800b494:	2000d9dc 	.word	0x2000d9dc

0800b498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b498:	b480      	push	{r7}
 800b49a:	af00      	add	r7, sp, #0
  return uwTick;
 800b49c:	4b03      	ldr	r3, [pc, #12]	; (800b4ac <HAL_GetTick+0x14>)
 800b49e:	681b      	ldr	r3, [r3, #0]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	2000d9dc 	.word	0x2000d9dc

0800b4b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b4b8:	f7ff ffee 	bl	800b498 <HAL_GetTick>
 800b4bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4c8:	d005      	beq.n	800b4d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b4ca:	4b0a      	ldr	r3, [pc, #40]	; (800b4f4 <HAL_Delay+0x44>)
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b4d6:	bf00      	nop
 800b4d8:	f7ff ffde 	bl	800b498 <HAL_GetTick>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d8f7      	bhi.n	800b4d8 <HAL_Delay+0x28>
  {
  }
}
 800b4e8:	bf00      	nop
 800b4ea:	bf00      	nop
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	2000003c 	.word	0x2000003c

0800b4f8 <__NVIC_SetPriorityGrouping>:
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f003 0307 	and.w	r3, r3, #7
 800b506:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b508:	4b0c      	ldr	r3, [pc, #48]	; (800b53c <__NVIC_SetPriorityGrouping+0x44>)
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b514:	4013      	ands	r3, r2
 800b516:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b52a:	4a04      	ldr	r2, [pc, #16]	; (800b53c <__NVIC_SetPriorityGrouping+0x44>)
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	60d3      	str	r3, [r2, #12]
}
 800b530:	bf00      	nop
 800b532:	3714      	adds	r7, #20
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr
 800b53c:	e000ed00 	.word	0xe000ed00

0800b540 <__NVIC_GetPriorityGrouping>:
{
 800b540:	b480      	push	{r7}
 800b542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b544:	4b04      	ldr	r3, [pc, #16]	; (800b558 <__NVIC_GetPriorityGrouping+0x18>)
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	0a1b      	lsrs	r3, r3, #8
 800b54a:	f003 0307 	and.w	r3, r3, #7
}
 800b54e:	4618      	mov	r0, r3
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr
 800b558:	e000ed00 	.word	0xe000ed00

0800b55c <__NVIC_EnableIRQ>:
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	4603      	mov	r3, r0
 800b564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	db0b      	blt.n	800b586 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b56e:	79fb      	ldrb	r3, [r7, #7]
 800b570:	f003 021f 	and.w	r2, r3, #31
 800b574:	4907      	ldr	r1, [pc, #28]	; (800b594 <__NVIC_EnableIRQ+0x38>)
 800b576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b57a:	095b      	lsrs	r3, r3, #5
 800b57c:	2001      	movs	r0, #1
 800b57e:	fa00 f202 	lsl.w	r2, r0, r2
 800b582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b586:	bf00      	nop
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	e000e100 	.word	0xe000e100

0800b598 <__NVIC_SetPriority>:
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	4603      	mov	r3, r0
 800b5a0:	6039      	str	r1, [r7, #0]
 800b5a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b5a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	db0a      	blt.n	800b5c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	b2da      	uxtb	r2, r3
 800b5b0:	490c      	ldr	r1, [pc, #48]	; (800b5e4 <__NVIC_SetPriority+0x4c>)
 800b5b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5b6:	0112      	lsls	r2, r2, #4
 800b5b8:	b2d2      	uxtb	r2, r2
 800b5ba:	440b      	add	r3, r1
 800b5bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b5c0:	e00a      	b.n	800b5d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	b2da      	uxtb	r2, r3
 800b5c6:	4908      	ldr	r1, [pc, #32]	; (800b5e8 <__NVIC_SetPriority+0x50>)
 800b5c8:	79fb      	ldrb	r3, [r7, #7]
 800b5ca:	f003 030f 	and.w	r3, r3, #15
 800b5ce:	3b04      	subs	r3, #4
 800b5d0:	0112      	lsls	r2, r2, #4
 800b5d2:	b2d2      	uxtb	r2, r2
 800b5d4:	440b      	add	r3, r1
 800b5d6:	761a      	strb	r2, [r3, #24]
}
 800b5d8:	bf00      	nop
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr
 800b5e4:	e000e100 	.word	0xe000e100
 800b5e8:	e000ed00 	.word	0xe000ed00

0800b5ec <NVIC_EncodePriority>:
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b089      	sub	sp, #36	; 0x24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f003 0307 	and.w	r3, r3, #7
 800b5fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	f1c3 0307 	rsb	r3, r3, #7
 800b606:	2b04      	cmp	r3, #4
 800b608:	bf28      	it	cs
 800b60a:	2304      	movcs	r3, #4
 800b60c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	3304      	adds	r3, #4
 800b612:	2b06      	cmp	r3, #6
 800b614:	d902      	bls.n	800b61c <NVIC_EncodePriority+0x30>
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	3b03      	subs	r3, #3
 800b61a:	e000      	b.n	800b61e <NVIC_EncodePriority+0x32>
 800b61c:	2300      	movs	r3, #0
 800b61e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	fa02 f303 	lsl.w	r3, r2, r3
 800b62a:	43da      	mvns	r2, r3
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	401a      	ands	r2, r3
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b634:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	fa01 f303 	lsl.w	r3, r1, r3
 800b63e:	43d9      	mvns	r1, r3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b644:	4313      	orrs	r3, r2
}
 800b646:	4618      	mov	r0, r3
 800b648:	3724      	adds	r7, #36	; 0x24
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr

0800b652 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b082      	sub	sp, #8
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7ff ff4c 	bl	800b4f8 <__NVIC_SetPriorityGrouping>
}
 800b660:	bf00      	nop
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	4603      	mov	r3, r0
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
 800b674:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b676:	2300      	movs	r3, #0
 800b678:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b67a:	f7ff ff61 	bl	800b540 <__NVIC_GetPriorityGrouping>
 800b67e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	68b9      	ldr	r1, [r7, #8]
 800b684:	6978      	ldr	r0, [r7, #20]
 800b686:	f7ff ffb1 	bl	800b5ec <NVIC_EncodePriority>
 800b68a:	4602      	mov	r2, r0
 800b68c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b690:	4611      	mov	r1, r2
 800b692:	4618      	mov	r0, r3
 800b694:	f7ff ff80 	bl	800b598 <__NVIC_SetPriority>
}
 800b698:	bf00      	nop
 800b69a:	3718      	adds	r7, #24
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b6aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7ff ff54 	bl	800b55c <__NVIC_EnableIRQ>
}
 800b6b4:	bf00      	nop
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b088      	sub	sp, #32
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	61fb      	str	r3, [r7, #28]
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800b6cc:	4baa      	ldr	r3, [pc, #680]	; (800b978 <HAL_ETH_Init+0x2bc>)
 800b6ce:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e183      	b.n	800b9ea <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6e8:	b2db      	uxtb	r3, r3
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d106      	bne.n	800b6fc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f004 f944 	bl	800f984 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	60bb      	str	r3, [r7, #8]
 800b700:	4b9e      	ldr	r3, [pc, #632]	; (800b97c <HAL_ETH_Init+0x2c0>)
 800b702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b704:	4a9d      	ldr	r2, [pc, #628]	; (800b97c <HAL_ETH_Init+0x2c0>)
 800b706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b70a:	6453      	str	r3, [r2, #68]	; 0x44
 800b70c:	4b9b      	ldr	r3, [pc, #620]	; (800b97c <HAL_ETH_Init+0x2c0>)
 800b70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b714:	60bb      	str	r3, [r7, #8]
 800b716:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b718:	4b99      	ldr	r3, [pc, #612]	; (800b980 <HAL_ETH_Init+0x2c4>)
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	4a98      	ldr	r2, [pc, #608]	; (800b980 <HAL_ETH_Init+0x2c4>)
 800b71e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b722:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800b724:	4b96      	ldr	r3, [pc, #600]	; (800b980 <HAL_ETH_Init+0x2c4>)
 800b726:	685a      	ldr	r2, [r3, #4]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6a1b      	ldr	r3, [r3, #32]
 800b72c:	4994      	ldr	r1, [pc, #592]	; (800b980 <HAL_ETH_Init+0x2c4>)
 800b72e:	4313      	orrs	r3, r2
 800b730:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f042 0201 	orr.w	r2, r2, #1
 800b744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b748:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800b74a:	f7ff fea5 	bl	800b498 <HAL_GetTick>
 800b74e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800b750:	e011      	b.n	800b776 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800b752:	f7ff fea1 	bl	800b498 <HAL_GetTick>
 800b756:	4602      	mov	r2, r0
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	1ad3      	subs	r3, r2, r3
 800b75c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b760:	d909      	bls.n	800b776 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2203      	movs	r2, #3
 800b766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800b772:	2303      	movs	r3, #3
 800b774:	e139      	b.n	800b9ea <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 0301 	and.w	r3, r3, #1
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1e4      	bne.n	800b752 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	f023 031c 	bic.w	r3, r3, #28
 800b796:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800b798:	f002 f85a 	bl	800d850 <HAL_RCC_GetHCLKFreq>
 800b79c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	4a78      	ldr	r2, [pc, #480]	; (800b984 <HAL_ETH_Init+0x2c8>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d908      	bls.n	800b7b8 <HAL_ETH_Init+0xfc>
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	4a77      	ldr	r2, [pc, #476]	; (800b988 <HAL_ETH_Init+0x2cc>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d804      	bhi.n	800b7b8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	f043 0308 	orr.w	r3, r3, #8
 800b7b4:	61fb      	str	r3, [r7, #28]
 800b7b6:	e027      	b.n	800b808 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	4a73      	ldr	r2, [pc, #460]	; (800b988 <HAL_ETH_Init+0x2cc>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d908      	bls.n	800b7d2 <HAL_ETH_Init+0x116>
 800b7c0:	69bb      	ldr	r3, [r7, #24]
 800b7c2:	4a6d      	ldr	r2, [pc, #436]	; (800b978 <HAL_ETH_Init+0x2bc>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d204      	bcs.n	800b7d2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	f043 030c 	orr.w	r3, r3, #12
 800b7ce:	61fb      	str	r3, [r7, #28]
 800b7d0:	e01a      	b.n	800b808 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	4a68      	ldr	r2, [pc, #416]	; (800b978 <HAL_ETH_Init+0x2bc>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d303      	bcc.n	800b7e2 <HAL_ETH_Init+0x126>
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	4a6b      	ldr	r2, [pc, #428]	; (800b98c <HAL_ETH_Init+0x2d0>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d911      	bls.n	800b806 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	4a69      	ldr	r2, [pc, #420]	; (800b98c <HAL_ETH_Init+0x2d0>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d908      	bls.n	800b7fc <HAL_ETH_Init+0x140>
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	4a68      	ldr	r2, [pc, #416]	; (800b990 <HAL_ETH_Init+0x2d4>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d804      	bhi.n	800b7fc <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	f043 0304 	orr.w	r3, r3, #4
 800b7f8:	61fb      	str	r3, [r7, #28]
 800b7fa:	e005      	b.n	800b808 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800b7fc:	69fb      	ldr	r3, [r7, #28]
 800b7fe:	f043 0310 	orr.w	r3, r3, #16
 800b802:	61fb      	str	r3, [r7, #28]
 800b804:	e000      	b.n	800b808 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800b806:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	69fa      	ldr	r2, [r7, #28]
 800b80e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800b810:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b814:	2100      	movs	r1, #0
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fc17 	bl	800c04a <HAL_ETH_WritePHYRegister>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00b      	beq.n	800b83a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800b826:	6939      	ldr	r1, [r7, #16]
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 fdcd 	bl	800c3c8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2201      	movs	r2, #1
 800b832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	e0d7      	b.n	800b9ea <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800b83a:	20ff      	movs	r0, #255	; 0xff
 800b83c:	f7ff fe38 	bl	800b4b0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	f000 80a5 	beq.w	800b994 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800b84a:	f7ff fe25 	bl	800b498 <HAL_GetTick>
 800b84e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800b850:	f107 030c 	add.w	r3, r7, #12
 800b854:	461a      	mov	r2, r3
 800b856:	2101      	movs	r1, #1
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 fb8e 	bl	800bf7a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800b85e:	f7ff fe1b 	bl	800b498 <HAL_GetTick>
 800b862:	4602      	mov	r2, r0
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	1ad3      	subs	r3, r2, r3
 800b868:	f241 3288 	movw	r2, #5000	; 0x1388
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d90f      	bls.n	800b890 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800b874:	6939      	ldr	r1, [r7, #16]
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 fda6 	bl	800c3c8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2201      	movs	r2, #1
 800b880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800b88c:	2303      	movs	r3, #3
 800b88e:	e0ac      	b.n	800b9ea <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f003 0304 	and.w	r3, r3, #4
 800b896:	2b00      	cmp	r3, #0
 800b898:	d0da      	beq.n	800b850 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800b89a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b89e:	2100      	movs	r1, #0
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 fbd2 	bl	800c04a <HAL_ETH_WritePHYRegister>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d00b      	beq.n	800b8c4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800b8b0:	6939      	ldr	r1, [r7, #16]
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 fd88 	bl	800c3c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e092      	b.n	800b9ea <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800b8c4:	f7ff fde8 	bl	800b498 <HAL_GetTick>
 800b8c8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800b8ca:	f107 030c 	add.w	r3, r7, #12
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 fb51 	bl	800bf7a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800b8d8:	f7ff fdde 	bl	800b498 <HAL_GetTick>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d90f      	bls.n	800b90a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800b8ee:	6939      	ldr	r1, [r7, #16]
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 fd69 	bl	800c3c8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800b906:	2303      	movs	r3, #3
 800b908:	e06f      	b.n	800b9ea <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f003 0320 	and.w	r3, r3, #32
 800b910:	2b00      	cmp	r3, #0
 800b912:	d0da      	beq.n	800b8ca <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800b914:	f107 030c 	add.w	r3, r7, #12
 800b918:	461a      	mov	r2, r3
 800b91a:	2110      	movs	r1, #16
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fb2c 	bl	800bf7a <HAL_ETH_ReadPHYRegister>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00b      	beq.n	800b940 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800b928:	2301      	movs	r3, #1
 800b92a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800b92c:	6939      	ldr	r1, [r7, #16]
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 fd4a 	bl	800c3c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2201      	movs	r2, #1
 800b938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800b93c:	2301      	movs	r3, #1
 800b93e:	e054      	b.n	800b9ea <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f003 0304 	and.w	r3, r3, #4
 800b946:	2b00      	cmp	r3, #0
 800b948:	d004      	beq.n	800b954 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b950:	60da      	str	r2, [r3, #12]
 800b952:	e002      	b.n	800b95a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f003 0302 	and.w	r3, r3, #2
 800b960:	2b00      	cmp	r3, #0
 800b962:	d003      	beq.n	800b96c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	609a      	str	r2, [r3, #8]
 800b96a:	e035      	b.n	800b9d8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b972:	609a      	str	r2, [r3, #8]
 800b974:	e030      	b.n	800b9d8 <HAL_ETH_Init+0x31c>
 800b976:	bf00      	nop
 800b978:	03938700 	.word	0x03938700
 800b97c:	40023800 	.word	0x40023800
 800b980:	40013800 	.word	0x40013800
 800b984:	01312cff 	.word	0x01312cff
 800b988:	02160ebf 	.word	0x02160ebf
 800b98c:	05f5e0ff 	.word	0x05f5e0ff
 800b990:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	08db      	lsrs	r3, r3, #3
 800b99a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	085b      	lsrs	r3, r3, #1
 800b9a2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	2100      	movs	r1, #0
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fb4c 	bl	800c04a <HAL_ETH_WritePHYRegister>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00b      	beq.n	800b9d0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800b9bc:	6939      	ldr	r1, [r7, #16]
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 fd02 	bl	800c3c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e00c      	b.n	800b9ea <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800b9d0:	f640 70ff 	movw	r0, #4095	; 0xfff
 800b9d4:	f7ff fd6c 	bl	800b4b0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800b9d8:	6939      	ldr	r1, [r7, #16]
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 fcf4 	bl	800c3c8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3720      	adds	r7, #32
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop

0800b9f4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b087      	sub	sp, #28
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	607a      	str	r2, [r7, #4]
 800ba00:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800ba02:	2300      	movs	r3, #0
 800ba04:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d101      	bne.n	800ba14 <HAL_ETH_DMATxDescListInit+0x20>
 800ba10:	2302      	movs	r3, #2
 800ba12:	e052      	b.n	800baba <HAL_ETH_DMATxDescListInit+0xc6>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2202      	movs	r2, #2
 800ba20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	68ba      	ldr	r2, [r7, #8]
 800ba28:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	617b      	str	r3, [r7, #20]
 800ba2e:	e030      	b.n	800ba92 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	015b      	lsls	r3, r3, #5
 800ba34:	68ba      	ldr	r2, [r7, #8]
 800ba36:	4413      	add	r3, r2
 800ba38:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ba40:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800ba48:	fb02 f303 	mul.w	r3, r2, r3
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	4413      	add	r3, r2
 800ba50:	461a      	mov	r2, r3
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	69db      	ldr	r3, [r3, #28]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d105      	bne.n	800ba6a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d208      	bcs.n	800ba86 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	3301      	adds	r3, #1
 800ba78:	015b      	lsls	r3, r3, #5
 800ba7a:	68ba      	ldr	r2, [r7, #8]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	461a      	mov	r2, r3
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	60da      	str	r2, [r3, #12]
 800ba84:	e002      	b.n	800ba8c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	617b      	str	r3, [r7, #20]
 800ba92:	697a      	ldr	r2, [r7, #20]
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d3ca      	bcc.n	800ba30 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baa4:	3310      	adds	r3, #16
 800baa6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	371c      	adds	r7, #28
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr

0800bac6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800bac6:	b480      	push	{r7}
 800bac8:	b087      	sub	sp, #28
 800baca:	af00      	add	r7, sp, #0
 800bacc:	60f8      	str	r0, [r7, #12]
 800bace:	60b9      	str	r1, [r7, #8]
 800bad0:	607a      	str	r2, [r7, #4]
 800bad2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800bad4:	2300      	movs	r3, #0
 800bad6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d101      	bne.n	800bae6 <HAL_ETH_DMARxDescListInit+0x20>
 800bae2:	2302      	movs	r3, #2
 800bae4:	e056      	b.n	800bb94 <HAL_ETH_DMARxDescListInit+0xce>
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2201      	movs	r2, #1
 800baea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2202      	movs	r2, #2
 800baf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	68ba      	ldr	r2, [r7, #8]
 800bafa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800bafc:	2300      	movs	r3, #0
 800bafe:	617b      	str	r3, [r7, #20]
 800bb00:	e034      	b.n	800bb6c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	015b      	lsls	r3, r3, #5
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	4413      	add	r3, r2
 800bb0a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb12:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800bb1a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800bb22:	fb02 f303 	mul.w	r3, r2, r3
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	4413      	add	r3, r2
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	699b      	ldr	r3, [r3, #24]
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d105      	bne.n	800bb44 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	3b01      	subs	r3, #1
 800bb48:	697a      	ldr	r2, [r7, #20]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d208      	bcs.n	800bb60 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	3301      	adds	r3, #1
 800bb52:	015b      	lsls	r3, r3, #5
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	4413      	add	r3, r2
 800bb58:	461a      	mov	r2, r3
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	60da      	str	r2, [r3, #12]
 800bb5e:	e002      	b.n	800bb66 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800bb60:	68ba      	ldr	r2, [r7, #8]
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	617b      	str	r3, [r7, #20]
 800bb6c:	697a      	ldr	r2, [r7, #20]
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d3c6      	bcc.n	800bb02 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb7e:	330c      	adds	r3, #12
 800bb80:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2201      	movs	r2, #1
 800bb86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800bb92:	2300      	movs	r3, #0
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	371c      	adds	r7, #28
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b087      	sub	sp, #28
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	617b      	str	r3, [r7, #20]
 800bbae:	2300      	movs	r3, #0
 800bbb0:	60fb      	str	r3, [r7, #12]
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d101      	bne.n	800bbc4 <HAL_ETH_TransmitFrame+0x24>
 800bbc0:	2302      	movs	r3, #2
 800bbc2:	e0cd      	b.n	800bd60 <HAL_ETH_TransmitFrame+0x1c0>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2202      	movs	r2, #2
 800bbd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d109      	bne.n	800bbee <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2201      	movs	r2, #1
 800bbde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800bbea:	2301      	movs	r3, #1
 800bbec:	e0b8      	b.n	800bd60 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	da09      	bge.n	800bc0c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2212      	movs	r2, #18
 800bbfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e0a9      	b.n	800bd60 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d915      	bls.n	800bc42 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	4a54      	ldr	r2, [pc, #336]	; (800bd6c <HAL_ETH_TransmitFrame+0x1cc>)
 800bc1a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc1e:	0a9b      	lsrs	r3, r3, #10
 800bc20:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800bc22:	683a      	ldr	r2, [r7, #0]
 800bc24:	4b51      	ldr	r3, [pc, #324]	; (800bd6c <HAL_ETH_TransmitFrame+0x1cc>)
 800bc26:	fba3 1302 	umull	r1, r3, r3, r2
 800bc2a:	0a9b      	lsrs	r3, r3, #10
 800bc2c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800bc30:	fb01 f303 	mul.w	r3, r1, r3
 800bc34:	1ad3      	subs	r3, r2, r3
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d005      	beq.n	800bc46 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	617b      	str	r3, [r7, #20]
 800bc40:	e001      	b.n	800bc46 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800bc42:	2301      	movs	r3, #1
 800bc44:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d11c      	bne.n	800bc86 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc56:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800bc5a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800bc66:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc72:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800bc76:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	461a      	mov	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	62da      	str	r2, [r3, #44]	; 0x2c
 800bc84:	e04b      	b.n	800bd1e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800bc86:	2300      	movs	r3, #0
 800bc88:	613b      	str	r3, [r7, #16]
 800bc8a:	e044      	b.n	800bd16 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc96:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bc9a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d107      	bne.n	800bcb2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bcb0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800bcba:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	693a      	ldr	r2, [r7, #16]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d116      	bne.n	800bcf4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800bcd4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	4a25      	ldr	r2, [pc, #148]	; (800bd70 <HAL_ETH_TransmitFrame+0x1d0>)
 800bcda:	fb02 f203 	mul.w	r2, r2, r3
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	4413      	add	r3, r2
 800bce2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800bce6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800bcf2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800bd02:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	3301      	adds	r3, #1
 800bd14:	613b      	str	r3, [r7, #16]
 800bd16:	693a      	ldr	r2, [r7, #16]
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d3b6      	bcc.n	800bc8c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd26:	3314      	adds	r3, #20
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f003 0304 	and.w	r3, r3, #4
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00d      	beq.n	800bd4e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd3a:	3314      	adds	r3, #20
 800bd3c:	2204      	movs	r2, #4
 800bd3e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd48:	3304      	adds	r3, #4
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2201      	movs	r2, #1
 800bd52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	371c      	adds	r7, #28
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr
 800bd6c:	ac02b00b 	.word	0xac02b00b
 800bd70:	fffffa0c 	.word	0xfffffa0c

0800bd74 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d101      	bne.n	800bd8e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800bd8a:	2302      	movs	r3, #2
 800bd8c:	e074      	b.n	800be78 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2201      	movs	r2, #1
 800bd92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2202      	movs	r2, #2
 800bd9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800bd9e:	e05a      	b.n	800be56 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	3301      	adds	r3, #1
 800bda4:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdb4:	d10d      	bne.n	800bdd2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	629a      	str	r2, [r3, #40]	; 0x28
 800bdd0:	e041      	b.n	800be56 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d10b      	bne.n	800bdf8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde4:	1c5a      	adds	r2, r3, #1
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdee:	68db      	ldr	r3, [r3, #12]
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	629a      	str	r2, [r3, #40]	; 0x28
 800bdf6:	e02e      	b.n	800be56 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be04:	1c5a      	adds	r2, r3, #1
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d103      	bne.n	800be1a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	0c1b      	lsrs	r3, r3, #16
 800be22:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800be26:	1f1a      	subs	r2, r3, #4
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be30:	689a      	ldr	r2, [r3, #8]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	461a      	mov	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800be52:	2300      	movs	r3, #0
 800be54:	e010      	b.n	800be78 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	db02      	blt.n	800be66 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2b03      	cmp	r3, #3
 800be64:	d99c      	bls.n	800bda0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2201      	movs	r2, #1
 800be6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2200      	movs	r2, #0
 800be72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800be76:	2301      	movs	r3, #1
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3714      	adds	r7, #20
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be94:	3314      	adds	r3, #20
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be9c:	2b40      	cmp	r3, #64	; 0x40
 800be9e:	d112      	bne.n	800bec6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f003 fe1d 	bl	800fae0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beae:	3314      	adds	r3, #20
 800beb0:	2240      	movs	r2, #64	; 0x40
 800beb2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2201      	movs	r2, #1
 800beb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bec4:	e01b      	b.n	800befe <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bece:	3314      	adds	r3, #20
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f003 0301 	and.w	r3, r3, #1
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d111      	bne.n	800befe <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 f839 	bl	800bf52 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bee8:	3314      	adds	r3, #20
 800beea:	2201      	movs	r2, #1
 800beec:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2201      	movs	r2, #1
 800bef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2200      	movs	r2, #0
 800befa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf06:	3314      	adds	r3, #20
 800bf08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bf0c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf16:	3314      	adds	r3, #20
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf22:	d112      	bne.n	800bf4a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 f81e 	bl	800bf66 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf32:	3314      	adds	r3, #20
 800bf34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bf38:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2200      	movs	r2, #0
 800bf46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800bf4a:	bf00      	nop
 800bf4c:	3708      	adds	r7, #8
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800bf52:	b480      	push	{r7}
 800bf54:	b083      	sub	sp, #12
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800bf5a:	bf00      	nop
 800bf5c:	370c      	adds	r7, #12
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr

0800bf66 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800bf66:	b480      	push	{r7}
 800bf68:	b083      	sub	sp, #12
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800bf6e:	bf00      	nop
 800bf70:	370c      	adds	r7, #12
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr

0800bf7a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b086      	sub	sp, #24
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	60f8      	str	r0, [r7, #12]
 800bf82:	460b      	mov	r3, r1
 800bf84:	607a      	str	r2, [r7, #4]
 800bf86:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800bf88:	2300      	movs	r3, #0
 800bf8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	2b82      	cmp	r3, #130	; 0x82
 800bf9a:	d101      	bne.n	800bfa0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800bf9c:	2302      	movs	r3, #2
 800bf9e:	e050      	b.n	800c042 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2282      	movs	r2, #130	; 0x82
 800bfa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	691b      	ldr	r3, [r3, #16]
 800bfae:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	f003 031c 	and.w	r3, r3, #28
 800bfb6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	8a1b      	ldrh	r3, [r3, #16]
 800bfbc:	02db      	lsls	r3, r3, #11
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	697a      	ldr	r2, [r7, #20]
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800bfc6:	897b      	ldrh	r3, [r7, #10]
 800bfc8:	019b      	lsls	r3, r3, #6
 800bfca:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800bfce:	697a      	ldr	r2, [r7, #20]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	f023 0302 	bic.w	r3, r3, #2
 800bfda:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	f043 0301 	orr.w	r3, r3, #1
 800bfe2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	697a      	ldr	r2, [r7, #20]
 800bfea:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800bfec:	f7ff fa54 	bl	800b498 <HAL_GetTick>
 800bff0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800bff2:	e015      	b.n	800c020 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800bff4:	f7ff fa50 	bl	800b498 <HAL_GetTick>
 800bff8:	4602      	mov	r2, r0
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	1ad3      	subs	r3, r2, r3
 800bffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c002:	d309      	bcc.n	800c018 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2201      	movs	r2, #1
 800c008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2200      	movs	r2, #0
 800c010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800c014:	2303      	movs	r3, #3
 800c016:	e014      	b.n	800c042 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	691b      	ldr	r3, [r3, #16]
 800c01e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	f003 0301 	and.w	r3, r3, #1
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1e4      	bne.n	800bff4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	695b      	ldr	r3, [r3, #20]
 800c030:	b29b      	uxth	r3, r3
 800c032:	461a      	mov	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3718      	adds	r7, #24
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b086      	sub	sp, #24
 800c04e:	af00      	add	r7, sp, #0
 800c050:	60f8      	str	r0, [r7, #12]
 800c052:	460b      	mov	r3, r1
 800c054:	607a      	str	r2, [r7, #4]
 800c056:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800c058:	2300      	movs	r3, #0
 800c05a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800c05c:	2300      	movs	r3, #0
 800c05e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c066:	b2db      	uxtb	r3, r3
 800c068:	2b42      	cmp	r3, #66	; 0x42
 800c06a:	d101      	bne.n	800c070 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800c06c:	2302      	movs	r3, #2
 800c06e:	e04e      	b.n	800c10e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2242      	movs	r2, #66	; 0x42
 800c074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	691b      	ldr	r3, [r3, #16]
 800c07e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	f003 031c 	and.w	r3, r3, #28
 800c086:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	8a1b      	ldrh	r3, [r3, #16]
 800c08c:	02db      	lsls	r3, r3, #11
 800c08e:	b29b      	uxth	r3, r3
 800c090:	697a      	ldr	r2, [r7, #20]
 800c092:	4313      	orrs	r3, r2
 800c094:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800c096:	897b      	ldrh	r3, [r7, #10]
 800c098:	019b      	lsls	r3, r3, #6
 800c09a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800c09e:	697a      	ldr	r2, [r7, #20]
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	f043 0302 	orr.w	r3, r3, #2
 800c0aa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	f043 0301 	orr.w	r3, r3, #1
 800c0b2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	b29a      	uxth	r2, r3
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	697a      	ldr	r2, [r7, #20]
 800c0c4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800c0c6:	f7ff f9e7 	bl	800b498 <HAL_GetTick>
 800c0ca:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c0cc:	e015      	b.n	800c0fa <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800c0ce:	f7ff f9e3 	bl	800b498 <HAL_GetTick>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	1ad3      	subs	r3, r2, r3
 800c0d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0dc:	d309      	bcc.n	800c0f2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800c0ee:	2303      	movs	r3, #3
 800c0f0:	e00d      	b.n	800c10e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	691b      	ldr	r3, [r3, #16]
 800c0f8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	f003 0301 	and.w	r3, r3, #1
 800c100:	2b00      	cmp	r3, #0
 800c102:	d1e4      	bne.n	800c0ce <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2201      	movs	r2, #1
 800c108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800c10c:	2300      	movs	r3, #0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3718      	adds	r7, #24
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800c116:	b580      	push	{r7, lr}
 800c118:	b082      	sub	sp, #8
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c124:	2b01      	cmp	r3, #1
 800c126:	d101      	bne.n	800c12c <HAL_ETH_Start+0x16>
 800c128:	2302      	movs	r3, #2
 800c12a:	e01f      	b.n	800c16c <HAL_ETH_Start+0x56>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2201      	movs	r2, #1
 800c130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2202      	movs	r2, #2
 800c138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 fb45 	bl	800c7cc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 fb7c 	bl	800c840 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 fc13 	bl	800c974 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fbb0 	bl	800c8b4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 fbdd 	bl	800c914 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2201      	movs	r2, #1
 800c15e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800c16a:	2300      	movs	r3, #0
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3708      	adds	r7, #8
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c182:	2b01      	cmp	r3, #1
 800c184:	d101      	bne.n	800c18a <HAL_ETH_Stop+0x16>
 800c186:	2302      	movs	r3, #2
 800c188:	e01f      	b.n	800c1ca <HAL_ETH_Stop+0x56>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2201      	movs	r2, #1
 800c18e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2202      	movs	r2, #2
 800c196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 fba2 	bl	800c8e4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 fbcf 	bl	800c944 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 fb67 	bl	800c87a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 fbe1 	bl	800c974 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 fb27 	bl	800c806 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800c1c8:	2300      	movs	r3, #0
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
	...

0800c1d4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d101      	bne.n	800c1f0 <HAL_ETH_ConfigMAC+0x1c>
 800c1ec:	2302      	movs	r3, #2
 800c1ee:	e0e4      	b.n	800c3ba <HAL_ETH_ConfigMAC+0x1e6>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	f000 80b1 	beq.w	800c36a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800c210:	68fa      	ldr	r2, [r7, #12]
 800c212:	4b6c      	ldr	r3, [pc, #432]	; (800c3c4 <HAL_ETH_ConfigMAC+0x1f0>)
 800c214:	4013      	ands	r3, r2
 800c216:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800c220:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800c226:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800c22c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800c232:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800c238:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800c23e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800c244:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800c24a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800c250:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800c256:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800c25c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800c262:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800c264:	68fa      	ldr	r2, [r7, #12]
 800c266:	4313      	orrs	r3, r2
 800c268:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	68fa      	ldr	r2, [r7, #12]
 800c270:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c27a:	2001      	movs	r0, #1
 800c27c:	f7ff f918 	bl	800b4b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800c290:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800c296:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800c29c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800c2a2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800c2a8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800c2ae:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800c2ba:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800c2bc:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800c2c6:	2001      	movs	r0, #1
 800c2c8:	f7ff f8f2 	bl	800b4b0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c2dc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	683a      	ldr	r2, [r7, #0]
 800c2e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c2e6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	699b      	ldr	r3, [r3, #24]
 800c2ee:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	f64f 7341 	movw	r3, #65345	; 0xff41
 800c2f6:	4013      	ands	r3, r2
 800c2f8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2fe:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800c304:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800c30a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800c310:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800c316:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800c31c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800c31e:	68fa      	ldr	r2, [r7, #12]
 800c320:	4313      	orrs	r3, r2
 800c322:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	68fa      	ldr	r2, [r7, #12]
 800c32a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	699b      	ldr	r3, [r3, #24]
 800c332:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800c334:	2001      	movs	r0, #1
 800c336:	f7ff f8bb 	bl	800b4b0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	430a      	orrs	r2, r1
 800c350:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	69db      	ldr	r3, [r3, #28]
 800c358:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800c35a:	2001      	movs	r0, #1
 800c35c:	f7ff f8a8 	bl	800b4b0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	68fa      	ldr	r2, [r7, #12]
 800c366:	61da      	str	r2, [r3, #28]
 800c368:	e01e      	b.n	800c3a8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800c378:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	689a      	ldr	r2, [r3, #8]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	4313      	orrs	r3, r2
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	4313      	orrs	r3, r2
 800c388:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c39a:	2001      	movs	r0, #1
 800c39c:	f7ff f888 	bl	800b4b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800c3b8:	2300      	movs	r3, #0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	ff20810f 	.word	0xff20810f

0800c3c8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b0b0      	sub	sp, #192	; 0xc0
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d007      	beq.n	800c3ee <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3e4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c3ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800c3fe:	2300      	movs	r3, #0
 800c400:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800c402:	2300      	movs	r3, #0
 800c404:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	69db      	ldr	r3, [r3, #28]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d103      	bne.n	800c416 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800c40e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c412:	663b      	str	r3, [r7, #96]	; 0x60
 800c414:	e001      	b.n	800c41a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800c416:	2300      	movs	r3, #0
 800c418:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800c41a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c41e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800c420:	2300      	movs	r3, #0
 800c422:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800c424:	2300      	movs	r3, #0
 800c426:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800c428:	2300      	movs	r3, #0
 800c42a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800c42c:	2300      	movs	r3, #0
 800c42e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800c430:	2300      	movs	r3, #0
 800c432:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800c434:	2340      	movs	r3, #64	; 0x40
 800c436:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800c438:	2300      	movs	r3, #0
 800c43a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800c43e:	2300      	movs	r3, #0
 800c440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800c444:	2300      	movs	r3, #0
 800c446:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800c44a:	2300      	movs	r3, #0
 800c44c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800c450:	2300      	movs	r3, #0
 800c452:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800c456:	2300      	movs	r3, #0
 800c458:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800c45c:	2300      	movs	r3, #0
 800c45e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800c462:	2300      	movs	r3, #0
 800c464:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800c468:	2380      	movs	r3, #128	; 0x80
 800c46a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800c46e:	2300      	movs	r3, #0
 800c470:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800c474:	2300      	movs	r3, #0
 800c476:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800c47a:	2300      	movs	r3, #0
 800c47c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800c480:	2300      	movs	r3, #0
 800c482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800c486:	2300      	movs	r3, #0
 800c488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800c48c:	2300      	movs	r3, #0
 800c48e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800c49c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c4a0:	4bac      	ldr	r3, [pc, #688]	; (800c754 <ETH_MACDMAConfig+0x38c>)
 800c4a2:	4013      	ands	r3, r2
 800c4a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800c4a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800c4aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800c4ac:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800c4ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800c4b0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800c4b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800c4b4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800c4ba:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800c4bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800c4be:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800c4c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800c4c2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800c4c8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800c4ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800c4cc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800c4ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800c4d0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800c4d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800c4d4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800c4d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800c4d8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800c4da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800c4dc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800c4de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c4f0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800c4fc:	2001      	movs	r0, #1
 800c4fe:	f7fe ffd7 	bl	800b4b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c50a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800c50c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800c50e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800c510:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800c512:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800c514:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800c516:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800c51a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800c51c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800c520:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800c522:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800c526:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800c528:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800c52c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800c530:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800c538:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800c53a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800c546:	2001      	movs	r0, #1
 800c548:	f7fe ffb2 	bl	800b4b0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c554:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c55e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c568:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	699b      	ldr	r3, [r3, #24]
 800c570:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800c574:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c578:	f64f 7341 	movw	r3, #65345	; 0xff41
 800c57c:	4013      	ands	r3, r2
 800c57e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800c582:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c586:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800c588:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800c58c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800c58e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800c592:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800c594:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800c598:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800c59a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800c59e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800c5a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800c5a4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800c5a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c5b8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	699b      	ldr	r3, [r3, #24]
 800c5c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800c5c4:	2001      	movs	r0, #1
 800c5c6:	f7fe ff73 	bl	800b4b0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c5d2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800c5d4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800c5d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	430a      	orrs	r2, r1
 800c5e2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	69db      	ldr	r3, [r3, #28]
 800c5ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c5ee:	2001      	movs	r0, #1
 800c5f0:	f7fe ff5e 	bl	800b4b0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c5fc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800c5fe:	2300      	movs	r3, #0
 800c600:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800c602:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c606:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800c608:	2300      	movs	r3, #0
 800c60a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800c60c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c610:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800c612:	2300      	movs	r3, #0
 800c614:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800c616:	2300      	movs	r3, #0
 800c618:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800c61a:	2300      	movs	r3, #0
 800c61c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800c61e:	2300      	movs	r3, #0
 800c620:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800c622:	2304      	movs	r3, #4
 800c624:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800c626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c62a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800c62c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c630:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800c632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c636:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800c638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c63c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800c63e:	2380      	movs	r3, #128	; 0x80
 800c640:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800c642:	2300      	movs	r3, #0
 800c644:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800c646:	2300      	movs	r3, #0
 800c648:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c652:	3318      	adds	r3, #24
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800c65a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c65e:	4b3e      	ldr	r3, [pc, #248]	; (800c758 <ETH_MACDMAConfig+0x390>)
 800c660:	4013      	ands	r3, r2
 800c662:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800c666:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800c668:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800c66a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800c66c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800c66e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800c670:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800c672:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800c674:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800c676:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800c678:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800c67a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800c67c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800c67e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800c680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800c682:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800c684:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800c686:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800c688:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c68c:	4313      	orrs	r3, r2
 800c68e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c69a:	3318      	adds	r3, #24
 800c69c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c6a0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6aa:	3318      	adds	r3, #24
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c6b2:	2001      	movs	r0, #1
 800c6b4:	f7fe fefc 	bl	800b4b0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6c0:	3318      	adds	r3, #24
 800c6c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c6c6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800c6c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800c6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800c6cc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800c6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800c6d0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800c6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800c6d4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800c6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800c6d8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800c6da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6dc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800c6de:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800c6e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800c6e2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c6ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6f0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800c700:	2001      	movs	r0, #1
 800c702:	f7fe fed5 	bl	800b4b0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c70e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c712:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	699b      	ldr	r3, [r3, #24]
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d10f      	bne.n	800c73c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c724:	331c      	adds	r3, #28
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c738:	331c      	adds	r3, #28
 800c73a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	695b      	ldr	r3, [r3, #20]
 800c740:	461a      	mov	r2, r3
 800c742:	2100      	movs	r1, #0
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 f809 	bl	800c75c <ETH_MACAddressConfig>
}
 800c74a:	bf00      	nop
 800c74c:	37c0      	adds	r7, #192	; 0xc0
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	ff20810f 	.word	0xff20810f
 800c758:	f8de3f23 	.word	0xf8de3f23

0800c75c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b087      	sub	sp, #28
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	3305      	adds	r3, #5
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	021b      	lsls	r3, r3, #8
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	3204      	adds	r2, #4
 800c774:	7812      	ldrb	r2, [r2, #0]
 800c776:	4313      	orrs	r3, r2
 800c778:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800c77a:	68ba      	ldr	r2, [r7, #8]
 800c77c:	4b11      	ldr	r3, [pc, #68]	; (800c7c4 <ETH_MACAddressConfig+0x68>)
 800c77e:	4413      	add	r3, r2
 800c780:	461a      	mov	r2, r3
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	3303      	adds	r3, #3
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	061a      	lsls	r2, r3, #24
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	3302      	adds	r3, #2
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	041b      	lsls	r3, r3, #16
 800c796:	431a      	orrs	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	3301      	adds	r3, #1
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	021b      	lsls	r3, r3, #8
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	7812      	ldrb	r2, [r2, #0]
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800c7aa:	68ba      	ldr	r2, [r7, #8]
 800c7ac:	4b06      	ldr	r3, [pc, #24]	; (800c7c8 <ETH_MACAddressConfig+0x6c>)
 800c7ae:	4413      	add	r3, r2
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	6013      	str	r3, [r2, #0]
}
 800c7b6:	bf00      	nop
 800c7b8:	371c      	adds	r7, #28
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	40028040 	.word	0x40028040
 800c7c8:	40028044 	.word	0x40028044

0800c7cc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f042 0208 	orr.w	r2, r2, #8
 800c7e6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800c7f0:	2001      	movs	r0, #1
 800c7f2:	f000 f8e9 	bl	800c9c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	68fa      	ldr	r2, [r7, #12]
 800c7fc:	601a      	str	r2, [r3, #0]
}
 800c7fe:	bf00      	nop
 800c800:	3710      	adds	r7, #16
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}

0800c806 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800c806:	b580      	push	{r7, lr}
 800c808:	b084      	sub	sp, #16
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800c80e:	2300      	movs	r3, #0
 800c810:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f022 0208 	bic.w	r2, r2, #8
 800c820:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800c82a:	2001      	movs	r0, #1
 800c82c:	f000 f8cc 	bl	800c9c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	601a      	str	r2, [r3, #0]
}
 800c838:	bf00      	nop
 800c83a:	3710      	adds	r7, #16
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800c848:	2300      	movs	r3, #0
 800c84a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f042 0204 	orr.w	r2, r2, #4
 800c85a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800c864:	2001      	movs	r0, #1
 800c866:	f000 f8af 	bl	800c9c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	68fa      	ldr	r2, [r7, #12]
 800c870:	601a      	str	r2, [r3, #0]
}
 800c872:	bf00      	nop
 800c874:	3710      	adds	r7, #16
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b084      	sub	sp, #16
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800c882:	2300      	movs	r3, #0
 800c884:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f022 0204 	bic.w	r2, r2, #4
 800c894:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800c89e:	2001      	movs	r0, #1
 800c8a0:	f000 f892 	bl	800c9c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	601a      	str	r2, [r3, #0]
}
 800c8ac:	bf00      	nop
 800c8ae:	3710      	adds	r7, #16
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8c4:	3318      	adds	r3, #24
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c8d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8d4:	3318      	adds	r3, #24
 800c8d6:	601a      	str	r2, [r3, #0]
}
 800c8d8:	bf00      	nop
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8f4:	3318      	adds	r3, #24
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c904:	3318      	adds	r3, #24
 800c906:	601a      	str	r2, [r3, #0]
}
 800c908:	bf00      	nop
 800c90a:	370c      	adds	r7, #12
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr

0800c914 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c924:	3318      	adds	r3, #24
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f042 0202 	orr.w	r2, r2, #2
 800c930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c934:	3318      	adds	r3, #24
 800c936:	601a      	str	r2, [r3, #0]
}
 800c938:	bf00      	nop
 800c93a:	370c      	adds	r7, #12
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr

0800c944 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800c944:	b480      	push	{r7}
 800c946:	b083      	sub	sp, #12
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c954:	3318      	adds	r3, #24
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f022 0202 	bic.w	r2, r2, #2
 800c960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c964:	3318      	adds	r3, #24
 800c966:	601a      	str	r2, [r3, #0]
}
 800c968:	bf00      	nop
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800c97c:	2300      	movs	r3, #0
 800c97e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c988:	3318      	adds	r3, #24
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c998:	3318      	adds	r3, #24
 800c99a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9a4:	3318      	adds	r3, #24
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800c9aa:	2001      	movs	r0, #1
 800c9ac:	f000 f80c 	bl	800c9c8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9ba:	3318      	adds	r3, #24
 800c9bc:	601a      	str	r2, [r3, #0]
}
 800c9be:	bf00      	nop
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
	...

0800c9c8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b085      	sub	sp, #20
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c9d0:	4b0b      	ldr	r3, [pc, #44]	; (800ca00 <ETH_Delay+0x38>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a0b      	ldr	r2, [pc, #44]	; (800ca04 <ETH_Delay+0x3c>)
 800c9d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9da:	0a5b      	lsrs	r3, r3, #9
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	fb02 f303 	mul.w	r3, r2, r3
 800c9e2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800c9e4:	bf00      	nop
  } 
  while (Delay --);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	1e5a      	subs	r2, r3, #1
 800c9ea:	60fa      	str	r2, [r7, #12]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1f9      	bne.n	800c9e4 <ETH_Delay+0x1c>
}
 800c9f0:	bf00      	nop
 800c9f2:	bf00      	nop
 800c9f4:	3714      	adds	r7, #20
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	20000014 	.word	0x20000014
 800ca04:	10624dd3 	.word	0x10624dd3

0800ca08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b089      	sub	sp, #36	; 0x24
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ca12:	2300      	movs	r3, #0
 800ca14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ca16:	2300      	movs	r3, #0
 800ca18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ca1e:	2300      	movs	r3, #0
 800ca20:	61fb      	str	r3, [r7, #28]
 800ca22:	e16b      	b.n	800ccfc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ca24:	2201      	movs	r2, #1
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	fa02 f303 	lsl.w	r3, r2, r3
 800ca2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	697a      	ldr	r2, [r7, #20]
 800ca34:	4013      	ands	r3, r2
 800ca36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ca38:	693a      	ldr	r2, [r7, #16]
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	f040 815a 	bne.w	800ccf6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	f003 0303 	and.w	r3, r3, #3
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d005      	beq.n	800ca5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ca56:	2b02      	cmp	r3, #2
 800ca58:	d130      	bne.n	800cabc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	005b      	lsls	r3, r3, #1
 800ca64:	2203      	movs	r2, #3
 800ca66:	fa02 f303 	lsl.w	r3, r2, r3
 800ca6a:	43db      	mvns	r3, r3
 800ca6c:	69ba      	ldr	r2, [r7, #24]
 800ca6e:	4013      	ands	r3, r2
 800ca70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	68da      	ldr	r2, [r3, #12]
 800ca76:	69fb      	ldr	r3, [r7, #28]
 800ca78:	005b      	lsls	r3, r3, #1
 800ca7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca7e:	69ba      	ldr	r2, [r7, #24]
 800ca80:	4313      	orrs	r3, r2
 800ca82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	69ba      	ldr	r2, [r7, #24]
 800ca88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ca90:	2201      	movs	r2, #1
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	fa02 f303 	lsl.w	r3, r2, r3
 800ca98:	43db      	mvns	r3, r3
 800ca9a:	69ba      	ldr	r2, [r7, #24]
 800ca9c:	4013      	ands	r3, r2
 800ca9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	091b      	lsrs	r3, r3, #4
 800caa6:	f003 0201 	and.w	r2, r3, #1
 800caaa:	69fb      	ldr	r3, [r7, #28]
 800caac:	fa02 f303 	lsl.w	r3, r2, r3
 800cab0:	69ba      	ldr	r2, [r7, #24]
 800cab2:	4313      	orrs	r3, r2
 800cab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	69ba      	ldr	r2, [r7, #24]
 800caba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	f003 0303 	and.w	r3, r3, #3
 800cac4:	2b03      	cmp	r3, #3
 800cac6:	d017      	beq.n	800caf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	005b      	lsls	r3, r3, #1
 800cad2:	2203      	movs	r2, #3
 800cad4:	fa02 f303 	lsl.w	r3, r2, r3
 800cad8:	43db      	mvns	r3, r3
 800cada:	69ba      	ldr	r2, [r7, #24]
 800cadc:	4013      	ands	r3, r2
 800cade:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	689a      	ldr	r2, [r3, #8]
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	005b      	lsls	r3, r3, #1
 800cae8:	fa02 f303 	lsl.w	r3, r2, r3
 800caec:	69ba      	ldr	r2, [r7, #24]
 800caee:	4313      	orrs	r3, r2
 800caf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	69ba      	ldr	r2, [r7, #24]
 800caf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	f003 0303 	and.w	r3, r3, #3
 800cb00:	2b02      	cmp	r3, #2
 800cb02:	d123      	bne.n	800cb4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	08da      	lsrs	r2, r3, #3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	3208      	adds	r2, #8
 800cb0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	f003 0307 	and.w	r3, r3, #7
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	220f      	movs	r2, #15
 800cb1c:	fa02 f303 	lsl.w	r3, r2, r3
 800cb20:	43db      	mvns	r3, r3
 800cb22:	69ba      	ldr	r2, [r7, #24]
 800cb24:	4013      	ands	r3, r2
 800cb26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	691a      	ldr	r2, [r3, #16]
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	f003 0307 	and.w	r3, r3, #7
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	fa02 f303 	lsl.w	r3, r2, r3
 800cb38:	69ba      	ldr	r2, [r7, #24]
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cb3e:	69fb      	ldr	r3, [r7, #28]
 800cb40:	08da      	lsrs	r2, r3, #3
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	3208      	adds	r2, #8
 800cb46:	69b9      	ldr	r1, [r7, #24]
 800cb48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	005b      	lsls	r3, r3, #1
 800cb56:	2203      	movs	r2, #3
 800cb58:	fa02 f303 	lsl.w	r3, r2, r3
 800cb5c:	43db      	mvns	r3, r3
 800cb5e:	69ba      	ldr	r2, [r7, #24]
 800cb60:	4013      	ands	r3, r2
 800cb62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	f003 0203 	and.w	r2, r3, #3
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	005b      	lsls	r3, r3, #1
 800cb70:	fa02 f303 	lsl.w	r3, r2, r3
 800cb74:	69ba      	ldr	r2, [r7, #24]
 800cb76:	4313      	orrs	r3, r2
 800cb78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	69ba      	ldr	r2, [r7, #24]
 800cb7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	f000 80b4 	beq.w	800ccf6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cb8e:	2300      	movs	r3, #0
 800cb90:	60fb      	str	r3, [r7, #12]
 800cb92:	4b60      	ldr	r3, [pc, #384]	; (800cd14 <HAL_GPIO_Init+0x30c>)
 800cb94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb96:	4a5f      	ldr	r2, [pc, #380]	; (800cd14 <HAL_GPIO_Init+0x30c>)
 800cb98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cb9c:	6453      	str	r3, [r2, #68]	; 0x44
 800cb9e:	4b5d      	ldr	r3, [pc, #372]	; (800cd14 <HAL_GPIO_Init+0x30c>)
 800cba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cba6:	60fb      	str	r3, [r7, #12]
 800cba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cbaa:	4a5b      	ldr	r2, [pc, #364]	; (800cd18 <HAL_GPIO_Init+0x310>)
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	089b      	lsrs	r3, r3, #2
 800cbb0:	3302      	adds	r3, #2
 800cbb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	f003 0303 	and.w	r3, r3, #3
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	220f      	movs	r2, #15
 800cbc2:	fa02 f303 	lsl.w	r3, r2, r3
 800cbc6:	43db      	mvns	r3, r3
 800cbc8:	69ba      	ldr	r2, [r7, #24]
 800cbca:	4013      	ands	r3, r2
 800cbcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	4a52      	ldr	r2, [pc, #328]	; (800cd1c <HAL_GPIO_Init+0x314>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d02b      	beq.n	800cc2e <HAL_GPIO_Init+0x226>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	4a51      	ldr	r2, [pc, #324]	; (800cd20 <HAL_GPIO_Init+0x318>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d025      	beq.n	800cc2a <HAL_GPIO_Init+0x222>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	4a50      	ldr	r2, [pc, #320]	; (800cd24 <HAL_GPIO_Init+0x31c>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d01f      	beq.n	800cc26 <HAL_GPIO_Init+0x21e>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	4a4f      	ldr	r2, [pc, #316]	; (800cd28 <HAL_GPIO_Init+0x320>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d019      	beq.n	800cc22 <HAL_GPIO_Init+0x21a>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	4a4e      	ldr	r2, [pc, #312]	; (800cd2c <HAL_GPIO_Init+0x324>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d013      	beq.n	800cc1e <HAL_GPIO_Init+0x216>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	4a4d      	ldr	r2, [pc, #308]	; (800cd30 <HAL_GPIO_Init+0x328>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d00d      	beq.n	800cc1a <HAL_GPIO_Init+0x212>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	4a4c      	ldr	r2, [pc, #304]	; (800cd34 <HAL_GPIO_Init+0x32c>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d007      	beq.n	800cc16 <HAL_GPIO_Init+0x20e>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	4a4b      	ldr	r2, [pc, #300]	; (800cd38 <HAL_GPIO_Init+0x330>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d101      	bne.n	800cc12 <HAL_GPIO_Init+0x20a>
 800cc0e:	2307      	movs	r3, #7
 800cc10:	e00e      	b.n	800cc30 <HAL_GPIO_Init+0x228>
 800cc12:	2308      	movs	r3, #8
 800cc14:	e00c      	b.n	800cc30 <HAL_GPIO_Init+0x228>
 800cc16:	2306      	movs	r3, #6
 800cc18:	e00a      	b.n	800cc30 <HAL_GPIO_Init+0x228>
 800cc1a:	2305      	movs	r3, #5
 800cc1c:	e008      	b.n	800cc30 <HAL_GPIO_Init+0x228>
 800cc1e:	2304      	movs	r3, #4
 800cc20:	e006      	b.n	800cc30 <HAL_GPIO_Init+0x228>
 800cc22:	2303      	movs	r3, #3
 800cc24:	e004      	b.n	800cc30 <HAL_GPIO_Init+0x228>
 800cc26:	2302      	movs	r3, #2
 800cc28:	e002      	b.n	800cc30 <HAL_GPIO_Init+0x228>
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e000      	b.n	800cc30 <HAL_GPIO_Init+0x228>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	69fa      	ldr	r2, [r7, #28]
 800cc32:	f002 0203 	and.w	r2, r2, #3
 800cc36:	0092      	lsls	r2, r2, #2
 800cc38:	4093      	lsls	r3, r2
 800cc3a:	69ba      	ldr	r2, [r7, #24]
 800cc3c:	4313      	orrs	r3, r2
 800cc3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cc40:	4935      	ldr	r1, [pc, #212]	; (800cd18 <HAL_GPIO_Init+0x310>)
 800cc42:	69fb      	ldr	r3, [r7, #28]
 800cc44:	089b      	lsrs	r3, r3, #2
 800cc46:	3302      	adds	r3, #2
 800cc48:	69ba      	ldr	r2, [r7, #24]
 800cc4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cc4e:	4b3b      	ldr	r3, [pc, #236]	; (800cd3c <HAL_GPIO_Init+0x334>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	43db      	mvns	r3, r3
 800cc58:	69ba      	ldr	r2, [r7, #24]
 800cc5a:	4013      	ands	r3, r2
 800cc5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d003      	beq.n	800cc72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800cc6a:	69ba      	ldr	r2, [r7, #24]
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cc72:	4a32      	ldr	r2, [pc, #200]	; (800cd3c <HAL_GPIO_Init+0x334>)
 800cc74:	69bb      	ldr	r3, [r7, #24]
 800cc76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800cc78:	4b30      	ldr	r3, [pc, #192]	; (800cd3c <HAL_GPIO_Init+0x334>)
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	43db      	mvns	r3, r3
 800cc82:	69ba      	ldr	r2, [r7, #24]
 800cc84:	4013      	ands	r3, r2
 800cc86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d003      	beq.n	800cc9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800cc94:	69ba      	ldr	r2, [r7, #24]
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800cc9c:	4a27      	ldr	r2, [pc, #156]	; (800cd3c <HAL_GPIO_Init+0x334>)
 800cc9e:	69bb      	ldr	r3, [r7, #24]
 800cca0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cca2:	4b26      	ldr	r3, [pc, #152]	; (800cd3c <HAL_GPIO_Init+0x334>)
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	43db      	mvns	r3, r3
 800ccac:	69ba      	ldr	r2, [r7, #24]
 800ccae:	4013      	ands	r3, r2
 800ccb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d003      	beq.n	800ccc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800ccbe:	69ba      	ldr	r2, [r7, #24]
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ccc6:	4a1d      	ldr	r2, [pc, #116]	; (800cd3c <HAL_GPIO_Init+0x334>)
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cccc:	4b1b      	ldr	r3, [pc, #108]	; (800cd3c <HAL_GPIO_Init+0x334>)
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	43db      	mvns	r3, r3
 800ccd6:	69ba      	ldr	r2, [r7, #24]
 800ccd8:	4013      	ands	r3, r2
 800ccda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d003      	beq.n	800ccf0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800cce8:	69ba      	ldr	r2, [r7, #24]
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	4313      	orrs	r3, r2
 800ccee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ccf0:	4a12      	ldr	r2, [pc, #72]	; (800cd3c <HAL_GPIO_Init+0x334>)
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	61fb      	str	r3, [r7, #28]
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	2b0f      	cmp	r3, #15
 800cd00:	f67f ae90 	bls.w	800ca24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800cd04:	bf00      	nop
 800cd06:	bf00      	nop
 800cd08:	3724      	adds	r7, #36	; 0x24
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	40023800 	.word	0x40023800
 800cd18:	40013800 	.word	0x40013800
 800cd1c:	40020000 	.word	0x40020000
 800cd20:	40020400 	.word	0x40020400
 800cd24:	40020800 	.word	0x40020800
 800cd28:	40020c00 	.word	0x40020c00
 800cd2c:	40021000 	.word	0x40021000
 800cd30:	40021400 	.word	0x40021400
 800cd34:	40021800 	.word	0x40021800
 800cd38:	40021c00 	.word	0x40021c00
 800cd3c:	40013c00 	.word	0x40013c00

0800cd40 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b087      	sub	sp, #28
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800cd52:	2300      	movs	r3, #0
 800cd54:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cd56:	2300      	movs	r3, #0
 800cd58:	617b      	str	r3, [r7, #20]
 800cd5a:	e0cd      	b.n	800cef8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	fa02 f303 	lsl.w	r3, r2, r3
 800cd64:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800cd66:	683a      	ldr	r2, [r7, #0]
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	4013      	ands	r3, r2
 800cd6c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	f040 80bd 	bne.w	800cef2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800cd78:	4a65      	ldr	r2, [pc, #404]	; (800cf10 <HAL_GPIO_DeInit+0x1d0>)
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	089b      	lsrs	r3, r3, #2
 800cd7e:	3302      	adds	r3, #2
 800cd80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd84:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	f003 0303 	and.w	r3, r3, #3
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	220f      	movs	r2, #15
 800cd90:	fa02 f303 	lsl.w	r3, r2, r3
 800cd94:	68ba      	ldr	r2, [r7, #8]
 800cd96:	4013      	ands	r3, r2
 800cd98:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4a5d      	ldr	r2, [pc, #372]	; (800cf14 <HAL_GPIO_DeInit+0x1d4>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d02b      	beq.n	800cdfa <HAL_GPIO_DeInit+0xba>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	4a5c      	ldr	r2, [pc, #368]	; (800cf18 <HAL_GPIO_DeInit+0x1d8>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d025      	beq.n	800cdf6 <HAL_GPIO_DeInit+0xb6>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	4a5b      	ldr	r2, [pc, #364]	; (800cf1c <HAL_GPIO_DeInit+0x1dc>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d01f      	beq.n	800cdf2 <HAL_GPIO_DeInit+0xb2>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	4a5a      	ldr	r2, [pc, #360]	; (800cf20 <HAL_GPIO_DeInit+0x1e0>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d019      	beq.n	800cdee <HAL_GPIO_DeInit+0xae>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	4a59      	ldr	r2, [pc, #356]	; (800cf24 <HAL_GPIO_DeInit+0x1e4>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d013      	beq.n	800cdea <HAL_GPIO_DeInit+0xaa>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4a58      	ldr	r2, [pc, #352]	; (800cf28 <HAL_GPIO_DeInit+0x1e8>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d00d      	beq.n	800cde6 <HAL_GPIO_DeInit+0xa6>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4a57      	ldr	r2, [pc, #348]	; (800cf2c <HAL_GPIO_DeInit+0x1ec>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d007      	beq.n	800cde2 <HAL_GPIO_DeInit+0xa2>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	4a56      	ldr	r2, [pc, #344]	; (800cf30 <HAL_GPIO_DeInit+0x1f0>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d101      	bne.n	800cdde <HAL_GPIO_DeInit+0x9e>
 800cdda:	2307      	movs	r3, #7
 800cddc:	e00e      	b.n	800cdfc <HAL_GPIO_DeInit+0xbc>
 800cdde:	2308      	movs	r3, #8
 800cde0:	e00c      	b.n	800cdfc <HAL_GPIO_DeInit+0xbc>
 800cde2:	2306      	movs	r3, #6
 800cde4:	e00a      	b.n	800cdfc <HAL_GPIO_DeInit+0xbc>
 800cde6:	2305      	movs	r3, #5
 800cde8:	e008      	b.n	800cdfc <HAL_GPIO_DeInit+0xbc>
 800cdea:	2304      	movs	r3, #4
 800cdec:	e006      	b.n	800cdfc <HAL_GPIO_DeInit+0xbc>
 800cdee:	2303      	movs	r3, #3
 800cdf0:	e004      	b.n	800cdfc <HAL_GPIO_DeInit+0xbc>
 800cdf2:	2302      	movs	r3, #2
 800cdf4:	e002      	b.n	800cdfc <HAL_GPIO_DeInit+0xbc>
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	e000      	b.n	800cdfc <HAL_GPIO_DeInit+0xbc>
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	697a      	ldr	r2, [r7, #20]
 800cdfe:	f002 0203 	and.w	r2, r2, #3
 800ce02:	0092      	lsls	r2, r2, #2
 800ce04:	4093      	lsls	r3, r2
 800ce06:	68ba      	ldr	r2, [r7, #8]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d132      	bne.n	800ce72 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800ce0c:	4b49      	ldr	r3, [pc, #292]	; (800cf34 <HAL_GPIO_DeInit+0x1f4>)
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	43db      	mvns	r3, r3
 800ce14:	4947      	ldr	r1, [pc, #284]	; (800cf34 <HAL_GPIO_DeInit+0x1f4>)
 800ce16:	4013      	ands	r3, r2
 800ce18:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800ce1a:	4b46      	ldr	r3, [pc, #280]	; (800cf34 <HAL_GPIO_DeInit+0x1f4>)
 800ce1c:	685a      	ldr	r2, [r3, #4]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	43db      	mvns	r3, r3
 800ce22:	4944      	ldr	r1, [pc, #272]	; (800cf34 <HAL_GPIO_DeInit+0x1f4>)
 800ce24:	4013      	ands	r3, r2
 800ce26:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800ce28:	4b42      	ldr	r3, [pc, #264]	; (800cf34 <HAL_GPIO_DeInit+0x1f4>)
 800ce2a:	689a      	ldr	r2, [r3, #8]
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	43db      	mvns	r3, r3
 800ce30:	4940      	ldr	r1, [pc, #256]	; (800cf34 <HAL_GPIO_DeInit+0x1f4>)
 800ce32:	4013      	ands	r3, r2
 800ce34:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800ce36:	4b3f      	ldr	r3, [pc, #252]	; (800cf34 <HAL_GPIO_DeInit+0x1f4>)
 800ce38:	68da      	ldr	r2, [r3, #12]
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	43db      	mvns	r3, r3
 800ce3e:	493d      	ldr	r1, [pc, #244]	; (800cf34 <HAL_GPIO_DeInit+0x1f4>)
 800ce40:	4013      	ands	r3, r2
 800ce42:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	f003 0303 	and.w	r3, r3, #3
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	220f      	movs	r2, #15
 800ce4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ce52:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ce54:	4a2e      	ldr	r2, [pc, #184]	; (800cf10 <HAL_GPIO_DeInit+0x1d0>)
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	089b      	lsrs	r3, r3, #2
 800ce5a:	3302      	adds	r3, #2
 800ce5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	43da      	mvns	r2, r3
 800ce64:	482a      	ldr	r0, [pc, #168]	; (800cf10 <HAL_GPIO_DeInit+0x1d0>)
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	089b      	lsrs	r3, r3, #2
 800ce6a:	400a      	ands	r2, r1
 800ce6c:	3302      	adds	r3, #2
 800ce6e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	005b      	lsls	r3, r3, #1
 800ce7a:	2103      	movs	r1, #3
 800ce7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ce80:	43db      	mvns	r3, r3
 800ce82:	401a      	ands	r2, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	08da      	lsrs	r2, r3, #3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	3208      	adds	r2, #8
 800ce90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	f003 0307 	and.w	r3, r3, #7
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	220f      	movs	r2, #15
 800ce9e:	fa02 f303 	lsl.w	r3, r2, r3
 800cea2:	43db      	mvns	r3, r3
 800cea4:	697a      	ldr	r2, [r7, #20]
 800cea6:	08d2      	lsrs	r2, r2, #3
 800cea8:	4019      	ands	r1, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	3208      	adds	r2, #8
 800ceae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	68da      	ldr	r2, [r3, #12]
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	005b      	lsls	r3, r3, #1
 800ceba:	2103      	movs	r1, #3
 800cebc:	fa01 f303 	lsl.w	r3, r1, r3
 800cec0:	43db      	mvns	r3, r3
 800cec2:	401a      	ands	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	2101      	movs	r1, #1
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	fa01 f303 	lsl.w	r3, r1, r3
 800ced4:	43db      	mvns	r3, r3
 800ced6:	401a      	ands	r2, r3
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	689a      	ldr	r2, [r3, #8]
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	005b      	lsls	r3, r3, #1
 800cee4:	2103      	movs	r1, #3
 800cee6:	fa01 f303 	lsl.w	r3, r1, r3
 800ceea:	43db      	mvns	r3, r3
 800ceec:	401a      	ands	r2, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	3301      	adds	r3, #1
 800cef6:	617b      	str	r3, [r7, #20]
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	2b0f      	cmp	r3, #15
 800cefc:	f67f af2e 	bls.w	800cd5c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800cf00:	bf00      	nop
 800cf02:	bf00      	nop
 800cf04:	371c      	adds	r7, #28
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	40013800 	.word	0x40013800
 800cf14:	40020000 	.word	0x40020000
 800cf18:	40020400 	.word	0x40020400
 800cf1c:	40020800 	.word	0x40020800
 800cf20:	40020c00 	.word	0x40020c00
 800cf24:	40021000 	.word	0x40021000
 800cf28:	40021400 	.word	0x40021400
 800cf2c:	40021800 	.word	0x40021800
 800cf30:	40021c00 	.word	0x40021c00
 800cf34:	40013c00 	.word	0x40013c00

0800cf38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	460b      	mov	r3, r1
 800cf42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	691a      	ldr	r2, [r3, #16]
 800cf48:	887b      	ldrh	r3, [r7, #2]
 800cf4a:	4013      	ands	r3, r2
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d002      	beq.n	800cf56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800cf50:	2301      	movs	r3, #1
 800cf52:	73fb      	strb	r3, [r7, #15]
 800cf54:	e001      	b.n	800cf5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800cf56:	2300      	movs	r3, #0
 800cf58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cf5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3714      	adds	r7, #20
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr

0800cf68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	460b      	mov	r3, r1
 800cf72:	807b      	strh	r3, [r7, #2]
 800cf74:	4613      	mov	r3, r2
 800cf76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cf78:	787b      	ldrb	r3, [r7, #1]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d003      	beq.n	800cf86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cf7e:	887a      	ldrh	r2, [r7, #2]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800cf84:	e003      	b.n	800cf8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800cf86:	887b      	ldrh	r3, [r7, #2]
 800cf88:	041a      	lsls	r2, r3, #16
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	619a      	str	r2, [r3, #24]
}
 800cf8e:	bf00      	nop
 800cf90:	370c      	adds	r7, #12
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr

0800cf9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cf9a:	b480      	push	{r7}
 800cf9c:	b085      	sub	sp, #20
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	695b      	ldr	r3, [r3, #20]
 800cfaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800cfac:	887a      	ldrh	r2, [r7, #2]
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	4013      	ands	r3, r2
 800cfb2:	041a      	lsls	r2, r3, #16
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	43d9      	mvns	r1, r3
 800cfb8:	887b      	ldrh	r3, [r7, #2]
 800cfba:	400b      	ands	r3, r1
 800cfbc:	431a      	orrs	r2, r3
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	619a      	str	r2, [r3, #24]
}
 800cfc2:	bf00      	nop
 800cfc4:	3714      	adds	r7, #20
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr
	...

0800cfd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b086      	sub	sp, #24
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d101      	bne.n	800cfe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	e264      	b.n	800d4ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f003 0301 	and.w	r3, r3, #1
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d075      	beq.n	800d0da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cfee:	4ba3      	ldr	r3, [pc, #652]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800cff0:	689b      	ldr	r3, [r3, #8]
 800cff2:	f003 030c 	and.w	r3, r3, #12
 800cff6:	2b04      	cmp	r3, #4
 800cff8:	d00c      	beq.n	800d014 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cffa:	4ba0      	ldr	r3, [pc, #640]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d002:	2b08      	cmp	r3, #8
 800d004:	d112      	bne.n	800d02c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d006:	4b9d      	ldr	r3, [pc, #628]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d00e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d012:	d10b      	bne.n	800d02c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d014:	4b99      	ldr	r3, [pc, #612]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d05b      	beq.n	800d0d8 <HAL_RCC_OscConfig+0x108>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d157      	bne.n	800d0d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d028:	2301      	movs	r3, #1
 800d02a:	e23f      	b.n	800d4ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d034:	d106      	bne.n	800d044 <HAL_RCC_OscConfig+0x74>
 800d036:	4b91      	ldr	r3, [pc, #580]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4a90      	ldr	r2, [pc, #576]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d03c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d040:	6013      	str	r3, [r2, #0]
 800d042:	e01d      	b.n	800d080 <HAL_RCC_OscConfig+0xb0>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d04c:	d10c      	bne.n	800d068 <HAL_RCC_OscConfig+0x98>
 800d04e:	4b8b      	ldr	r3, [pc, #556]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4a8a      	ldr	r2, [pc, #552]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d058:	6013      	str	r3, [r2, #0]
 800d05a:	4b88      	ldr	r3, [pc, #544]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	4a87      	ldr	r2, [pc, #540]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d064:	6013      	str	r3, [r2, #0]
 800d066:	e00b      	b.n	800d080 <HAL_RCC_OscConfig+0xb0>
 800d068:	4b84      	ldr	r3, [pc, #528]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a83      	ldr	r2, [pc, #524]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d06e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d072:	6013      	str	r3, [r2, #0]
 800d074:	4b81      	ldr	r3, [pc, #516]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a80      	ldr	r2, [pc, #512]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d07a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d07e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d013      	beq.n	800d0b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d088:	f7fe fa06 	bl	800b498 <HAL_GetTick>
 800d08c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d08e:	e008      	b.n	800d0a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d090:	f7fe fa02 	bl	800b498 <HAL_GetTick>
 800d094:	4602      	mov	r2, r0
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	1ad3      	subs	r3, r2, r3
 800d09a:	2b64      	cmp	r3, #100	; 0x64
 800d09c:	d901      	bls.n	800d0a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d09e:	2303      	movs	r3, #3
 800d0a0:	e204      	b.n	800d4ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d0a2:	4b76      	ldr	r3, [pc, #472]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d0f0      	beq.n	800d090 <HAL_RCC_OscConfig+0xc0>
 800d0ae:	e014      	b.n	800d0da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d0b0:	f7fe f9f2 	bl	800b498 <HAL_GetTick>
 800d0b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d0b6:	e008      	b.n	800d0ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d0b8:	f7fe f9ee 	bl	800b498 <HAL_GetTick>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	1ad3      	subs	r3, r2, r3
 800d0c2:	2b64      	cmp	r3, #100	; 0x64
 800d0c4:	d901      	bls.n	800d0ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d0c6:	2303      	movs	r3, #3
 800d0c8:	e1f0      	b.n	800d4ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d0ca:	4b6c      	ldr	r3, [pc, #432]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d1f0      	bne.n	800d0b8 <HAL_RCC_OscConfig+0xe8>
 800d0d6:	e000      	b.n	800d0da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d0d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f003 0302 	and.w	r3, r3, #2
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d063      	beq.n	800d1ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d0e6:	4b65      	ldr	r3, [pc, #404]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d0e8:	689b      	ldr	r3, [r3, #8]
 800d0ea:	f003 030c 	and.w	r3, r3, #12
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00b      	beq.n	800d10a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d0f2:	4b62      	ldr	r3, [pc, #392]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d0f4:	689b      	ldr	r3, [r3, #8]
 800d0f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d0fa:	2b08      	cmp	r3, #8
 800d0fc:	d11c      	bne.n	800d138 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d0fe:	4b5f      	ldr	r3, [pc, #380]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d106:	2b00      	cmp	r3, #0
 800d108:	d116      	bne.n	800d138 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d10a:	4b5c      	ldr	r3, [pc, #368]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f003 0302 	and.w	r3, r3, #2
 800d112:	2b00      	cmp	r3, #0
 800d114:	d005      	beq.n	800d122 <HAL_RCC_OscConfig+0x152>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	2b01      	cmp	r3, #1
 800d11c:	d001      	beq.n	800d122 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
 800d120:	e1c4      	b.n	800d4ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d122:	4b56      	ldr	r3, [pc, #344]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	691b      	ldr	r3, [r3, #16]
 800d12e:	00db      	lsls	r3, r3, #3
 800d130:	4952      	ldr	r1, [pc, #328]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d132:	4313      	orrs	r3, r2
 800d134:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d136:	e03a      	b.n	800d1ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	68db      	ldr	r3, [r3, #12]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d020      	beq.n	800d182 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d140:	4b4f      	ldr	r3, [pc, #316]	; (800d280 <HAL_RCC_OscConfig+0x2b0>)
 800d142:	2201      	movs	r2, #1
 800d144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d146:	f7fe f9a7 	bl	800b498 <HAL_GetTick>
 800d14a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d14c:	e008      	b.n	800d160 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d14e:	f7fe f9a3 	bl	800b498 <HAL_GetTick>
 800d152:	4602      	mov	r2, r0
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	1ad3      	subs	r3, r2, r3
 800d158:	2b02      	cmp	r3, #2
 800d15a:	d901      	bls.n	800d160 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d15c:	2303      	movs	r3, #3
 800d15e:	e1a5      	b.n	800d4ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d160:	4b46      	ldr	r3, [pc, #280]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f003 0302 	and.w	r3, r3, #2
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d0f0      	beq.n	800d14e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d16c:	4b43      	ldr	r3, [pc, #268]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	691b      	ldr	r3, [r3, #16]
 800d178:	00db      	lsls	r3, r3, #3
 800d17a:	4940      	ldr	r1, [pc, #256]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d17c:	4313      	orrs	r3, r2
 800d17e:	600b      	str	r3, [r1, #0]
 800d180:	e015      	b.n	800d1ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d182:	4b3f      	ldr	r3, [pc, #252]	; (800d280 <HAL_RCC_OscConfig+0x2b0>)
 800d184:	2200      	movs	r2, #0
 800d186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d188:	f7fe f986 	bl	800b498 <HAL_GetTick>
 800d18c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d18e:	e008      	b.n	800d1a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d190:	f7fe f982 	bl	800b498 <HAL_GetTick>
 800d194:	4602      	mov	r2, r0
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	1ad3      	subs	r3, r2, r3
 800d19a:	2b02      	cmp	r3, #2
 800d19c:	d901      	bls.n	800d1a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	e184      	b.n	800d4ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d1a2:	4b36      	ldr	r3, [pc, #216]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f003 0302 	and.w	r3, r3, #2
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d1f0      	bne.n	800d190 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f003 0308 	and.w	r3, r3, #8
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d030      	beq.n	800d21c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	695b      	ldr	r3, [r3, #20]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d016      	beq.n	800d1f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d1c2:	4b30      	ldr	r3, [pc, #192]	; (800d284 <HAL_RCC_OscConfig+0x2b4>)
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d1c8:	f7fe f966 	bl	800b498 <HAL_GetTick>
 800d1cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d1ce:	e008      	b.n	800d1e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d1d0:	f7fe f962 	bl	800b498 <HAL_GetTick>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	1ad3      	subs	r3, r2, r3
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d901      	bls.n	800d1e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d1de:	2303      	movs	r3, #3
 800d1e0:	e164      	b.n	800d4ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d1e2:	4b26      	ldr	r3, [pc, #152]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d1e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1e6:	f003 0302 	and.w	r3, r3, #2
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d0f0      	beq.n	800d1d0 <HAL_RCC_OscConfig+0x200>
 800d1ee:	e015      	b.n	800d21c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d1f0:	4b24      	ldr	r3, [pc, #144]	; (800d284 <HAL_RCC_OscConfig+0x2b4>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d1f6:	f7fe f94f 	bl	800b498 <HAL_GetTick>
 800d1fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d1fc:	e008      	b.n	800d210 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d1fe:	f7fe f94b 	bl	800b498 <HAL_GetTick>
 800d202:	4602      	mov	r2, r0
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	1ad3      	subs	r3, r2, r3
 800d208:	2b02      	cmp	r3, #2
 800d20a:	d901      	bls.n	800d210 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d20c:	2303      	movs	r3, #3
 800d20e:	e14d      	b.n	800d4ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d210:	4b1a      	ldr	r3, [pc, #104]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d214:	f003 0302 	and.w	r3, r3, #2
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d1f0      	bne.n	800d1fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f003 0304 	and.w	r3, r3, #4
 800d224:	2b00      	cmp	r3, #0
 800d226:	f000 80a0 	beq.w	800d36a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d22a:	2300      	movs	r3, #0
 800d22c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d22e:	4b13      	ldr	r3, [pc, #76]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d236:	2b00      	cmp	r3, #0
 800d238:	d10f      	bne.n	800d25a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d23a:	2300      	movs	r3, #0
 800d23c:	60bb      	str	r3, [r7, #8]
 800d23e:	4b0f      	ldr	r3, [pc, #60]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d242:	4a0e      	ldr	r2, [pc, #56]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d248:	6413      	str	r3, [r2, #64]	; 0x40
 800d24a:	4b0c      	ldr	r3, [pc, #48]	; (800d27c <HAL_RCC_OscConfig+0x2ac>)
 800d24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d24e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d252:	60bb      	str	r3, [r7, #8]
 800d254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d256:	2301      	movs	r3, #1
 800d258:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d25a:	4b0b      	ldr	r3, [pc, #44]	; (800d288 <HAL_RCC_OscConfig+0x2b8>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d262:	2b00      	cmp	r3, #0
 800d264:	d121      	bne.n	800d2aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d266:	4b08      	ldr	r3, [pc, #32]	; (800d288 <HAL_RCC_OscConfig+0x2b8>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4a07      	ldr	r2, [pc, #28]	; (800d288 <HAL_RCC_OscConfig+0x2b8>)
 800d26c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d272:	f7fe f911 	bl	800b498 <HAL_GetTick>
 800d276:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d278:	e011      	b.n	800d29e <HAL_RCC_OscConfig+0x2ce>
 800d27a:	bf00      	nop
 800d27c:	40023800 	.word	0x40023800
 800d280:	42470000 	.word	0x42470000
 800d284:	42470e80 	.word	0x42470e80
 800d288:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d28c:	f7fe f904 	bl	800b498 <HAL_GetTick>
 800d290:	4602      	mov	r2, r0
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	1ad3      	subs	r3, r2, r3
 800d296:	2b02      	cmp	r3, #2
 800d298:	d901      	bls.n	800d29e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d29a:	2303      	movs	r3, #3
 800d29c:	e106      	b.n	800d4ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d29e:	4b85      	ldr	r3, [pc, #532]	; (800d4b4 <HAL_RCC_OscConfig+0x4e4>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d0f0      	beq.n	800d28c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d106      	bne.n	800d2c0 <HAL_RCC_OscConfig+0x2f0>
 800d2b2:	4b81      	ldr	r3, [pc, #516]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d2b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2b6:	4a80      	ldr	r2, [pc, #512]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d2b8:	f043 0301 	orr.w	r3, r3, #1
 800d2bc:	6713      	str	r3, [r2, #112]	; 0x70
 800d2be:	e01c      	b.n	800d2fa <HAL_RCC_OscConfig+0x32a>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	689b      	ldr	r3, [r3, #8]
 800d2c4:	2b05      	cmp	r3, #5
 800d2c6:	d10c      	bne.n	800d2e2 <HAL_RCC_OscConfig+0x312>
 800d2c8:	4b7b      	ldr	r3, [pc, #492]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d2ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2cc:	4a7a      	ldr	r2, [pc, #488]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d2ce:	f043 0304 	orr.w	r3, r3, #4
 800d2d2:	6713      	str	r3, [r2, #112]	; 0x70
 800d2d4:	4b78      	ldr	r3, [pc, #480]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d2d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2d8:	4a77      	ldr	r2, [pc, #476]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d2da:	f043 0301 	orr.w	r3, r3, #1
 800d2de:	6713      	str	r3, [r2, #112]	; 0x70
 800d2e0:	e00b      	b.n	800d2fa <HAL_RCC_OscConfig+0x32a>
 800d2e2:	4b75      	ldr	r3, [pc, #468]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d2e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2e6:	4a74      	ldr	r2, [pc, #464]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d2e8:	f023 0301 	bic.w	r3, r3, #1
 800d2ec:	6713      	str	r3, [r2, #112]	; 0x70
 800d2ee:	4b72      	ldr	r3, [pc, #456]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d2f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2f2:	4a71      	ldr	r2, [pc, #452]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d2f4:	f023 0304 	bic.w	r3, r3, #4
 800d2f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d015      	beq.n	800d32e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d302:	f7fe f8c9 	bl	800b498 <HAL_GetTick>
 800d306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d308:	e00a      	b.n	800d320 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d30a:	f7fe f8c5 	bl	800b498 <HAL_GetTick>
 800d30e:	4602      	mov	r2, r0
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	1ad3      	subs	r3, r2, r3
 800d314:	f241 3288 	movw	r2, #5000	; 0x1388
 800d318:	4293      	cmp	r3, r2
 800d31a:	d901      	bls.n	800d320 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d31c:	2303      	movs	r3, #3
 800d31e:	e0c5      	b.n	800d4ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d320:	4b65      	ldr	r3, [pc, #404]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d324:	f003 0302 	and.w	r3, r3, #2
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d0ee      	beq.n	800d30a <HAL_RCC_OscConfig+0x33a>
 800d32c:	e014      	b.n	800d358 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d32e:	f7fe f8b3 	bl	800b498 <HAL_GetTick>
 800d332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d334:	e00a      	b.n	800d34c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d336:	f7fe f8af 	bl	800b498 <HAL_GetTick>
 800d33a:	4602      	mov	r2, r0
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	f241 3288 	movw	r2, #5000	; 0x1388
 800d344:	4293      	cmp	r3, r2
 800d346:	d901      	bls.n	800d34c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d348:	2303      	movs	r3, #3
 800d34a:	e0af      	b.n	800d4ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d34c:	4b5a      	ldr	r3, [pc, #360]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d34e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d350:	f003 0302 	and.w	r3, r3, #2
 800d354:	2b00      	cmp	r3, #0
 800d356:	d1ee      	bne.n	800d336 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d358:	7dfb      	ldrb	r3, [r7, #23]
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d105      	bne.n	800d36a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d35e:	4b56      	ldr	r3, [pc, #344]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d362:	4a55      	ldr	r2, [pc, #340]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d368:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	699b      	ldr	r3, [r3, #24]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	f000 809b 	beq.w	800d4aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d374:	4b50      	ldr	r3, [pc, #320]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	f003 030c 	and.w	r3, r3, #12
 800d37c:	2b08      	cmp	r3, #8
 800d37e:	d05c      	beq.n	800d43a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	699b      	ldr	r3, [r3, #24]
 800d384:	2b02      	cmp	r3, #2
 800d386:	d141      	bne.n	800d40c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d388:	4b4c      	ldr	r3, [pc, #304]	; (800d4bc <HAL_RCC_OscConfig+0x4ec>)
 800d38a:	2200      	movs	r2, #0
 800d38c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d38e:	f7fe f883 	bl	800b498 <HAL_GetTick>
 800d392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d394:	e008      	b.n	800d3a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d396:	f7fe f87f 	bl	800b498 <HAL_GetTick>
 800d39a:	4602      	mov	r2, r0
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	1ad3      	subs	r3, r2, r3
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d901      	bls.n	800d3a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d3a4:	2303      	movs	r3, #3
 800d3a6:	e081      	b.n	800d4ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d3a8:	4b43      	ldr	r3, [pc, #268]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d1f0      	bne.n	800d396 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	69da      	ldr	r2, [r3, #28]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6a1b      	ldr	r3, [r3, #32]
 800d3bc:	431a      	orrs	r2, r3
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c2:	019b      	lsls	r3, r3, #6
 800d3c4:	431a      	orrs	r2, r3
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ca:	085b      	lsrs	r3, r3, #1
 800d3cc:	3b01      	subs	r3, #1
 800d3ce:	041b      	lsls	r3, r3, #16
 800d3d0:	431a      	orrs	r2, r3
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d6:	061b      	lsls	r3, r3, #24
 800d3d8:	4937      	ldr	r1, [pc, #220]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d3de:	4b37      	ldr	r3, [pc, #220]	; (800d4bc <HAL_RCC_OscConfig+0x4ec>)
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d3e4:	f7fe f858 	bl	800b498 <HAL_GetTick>
 800d3e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d3ea:	e008      	b.n	800d3fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d3ec:	f7fe f854 	bl	800b498 <HAL_GetTick>
 800d3f0:	4602      	mov	r2, r0
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	1ad3      	subs	r3, r2, r3
 800d3f6:	2b02      	cmp	r3, #2
 800d3f8:	d901      	bls.n	800d3fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d3fa:	2303      	movs	r3, #3
 800d3fc:	e056      	b.n	800d4ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d3fe:	4b2e      	ldr	r3, [pc, #184]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d406:	2b00      	cmp	r3, #0
 800d408:	d0f0      	beq.n	800d3ec <HAL_RCC_OscConfig+0x41c>
 800d40a:	e04e      	b.n	800d4aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d40c:	4b2b      	ldr	r3, [pc, #172]	; (800d4bc <HAL_RCC_OscConfig+0x4ec>)
 800d40e:	2200      	movs	r2, #0
 800d410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d412:	f7fe f841 	bl	800b498 <HAL_GetTick>
 800d416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d418:	e008      	b.n	800d42c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d41a:	f7fe f83d 	bl	800b498 <HAL_GetTick>
 800d41e:	4602      	mov	r2, r0
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	1ad3      	subs	r3, r2, r3
 800d424:	2b02      	cmp	r3, #2
 800d426:	d901      	bls.n	800d42c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d428:	2303      	movs	r3, #3
 800d42a:	e03f      	b.n	800d4ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d42c:	4b22      	ldr	r3, [pc, #136]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d434:	2b00      	cmp	r3, #0
 800d436:	d1f0      	bne.n	800d41a <HAL_RCC_OscConfig+0x44a>
 800d438:	e037      	b.n	800d4aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	699b      	ldr	r3, [r3, #24]
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d101      	bne.n	800d446 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	e032      	b.n	800d4ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d446:	4b1c      	ldr	r3, [pc, #112]	; (800d4b8 <HAL_RCC_OscConfig+0x4e8>)
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	699b      	ldr	r3, [r3, #24]
 800d450:	2b01      	cmp	r3, #1
 800d452:	d028      	beq.n	800d4a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d45e:	429a      	cmp	r2, r3
 800d460:	d121      	bne.n	800d4a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d11a      	bne.n	800d4a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d470:	68fa      	ldr	r2, [r7, #12]
 800d472:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d476:	4013      	ands	r3, r2
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d47c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d47e:	4293      	cmp	r3, r2
 800d480:	d111      	bne.n	800d4a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d48c:	085b      	lsrs	r3, r3, #1
 800d48e:	3b01      	subs	r3, #1
 800d490:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d492:	429a      	cmp	r2, r3
 800d494:	d107      	bne.n	800d4a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d001      	beq.n	800d4aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	e000      	b.n	800d4ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800d4aa:	2300      	movs	r3, #0
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3718      	adds	r7, #24
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}
 800d4b4:	40007000 	.word	0x40007000
 800d4b8:	40023800 	.word	0x40023800
 800d4bc:	42470060 	.word	0x42470060

0800d4c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d101      	bne.n	800d4d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e0cc      	b.n	800d66e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d4d4:	4b68      	ldr	r3, [pc, #416]	; (800d678 <HAL_RCC_ClockConfig+0x1b8>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f003 0307 	and.w	r3, r3, #7
 800d4dc:	683a      	ldr	r2, [r7, #0]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d90c      	bls.n	800d4fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d4e2:	4b65      	ldr	r3, [pc, #404]	; (800d678 <HAL_RCC_ClockConfig+0x1b8>)
 800d4e4:	683a      	ldr	r2, [r7, #0]
 800d4e6:	b2d2      	uxtb	r2, r2
 800d4e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d4ea:	4b63      	ldr	r3, [pc, #396]	; (800d678 <HAL_RCC_ClockConfig+0x1b8>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f003 0307 	and.w	r3, r3, #7
 800d4f2:	683a      	ldr	r2, [r7, #0]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d001      	beq.n	800d4fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e0b8      	b.n	800d66e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f003 0302 	and.w	r3, r3, #2
 800d504:	2b00      	cmp	r3, #0
 800d506:	d020      	beq.n	800d54a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f003 0304 	and.w	r3, r3, #4
 800d510:	2b00      	cmp	r3, #0
 800d512:	d005      	beq.n	800d520 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d514:	4b59      	ldr	r3, [pc, #356]	; (800d67c <HAL_RCC_ClockConfig+0x1bc>)
 800d516:	689b      	ldr	r3, [r3, #8]
 800d518:	4a58      	ldr	r2, [pc, #352]	; (800d67c <HAL_RCC_ClockConfig+0x1bc>)
 800d51a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d51e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f003 0308 	and.w	r3, r3, #8
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d005      	beq.n	800d538 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d52c:	4b53      	ldr	r3, [pc, #332]	; (800d67c <HAL_RCC_ClockConfig+0x1bc>)
 800d52e:	689b      	ldr	r3, [r3, #8]
 800d530:	4a52      	ldr	r2, [pc, #328]	; (800d67c <HAL_RCC_ClockConfig+0x1bc>)
 800d532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d536:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d538:	4b50      	ldr	r3, [pc, #320]	; (800d67c <HAL_RCC_ClockConfig+0x1bc>)
 800d53a:	689b      	ldr	r3, [r3, #8]
 800d53c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	494d      	ldr	r1, [pc, #308]	; (800d67c <HAL_RCC_ClockConfig+0x1bc>)
 800d546:	4313      	orrs	r3, r2
 800d548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f003 0301 	and.w	r3, r3, #1
 800d552:	2b00      	cmp	r3, #0
 800d554:	d044      	beq.n	800d5e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	2b01      	cmp	r3, #1
 800d55c:	d107      	bne.n	800d56e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d55e:	4b47      	ldr	r3, [pc, #284]	; (800d67c <HAL_RCC_ClockConfig+0x1bc>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d566:	2b00      	cmp	r3, #0
 800d568:	d119      	bne.n	800d59e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d56a:	2301      	movs	r3, #1
 800d56c:	e07f      	b.n	800d66e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	2b02      	cmp	r3, #2
 800d574:	d003      	beq.n	800d57e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d57a:	2b03      	cmp	r3, #3
 800d57c:	d107      	bne.n	800d58e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d57e:	4b3f      	ldr	r3, [pc, #252]	; (800d67c <HAL_RCC_ClockConfig+0x1bc>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d586:	2b00      	cmp	r3, #0
 800d588:	d109      	bne.n	800d59e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d58a:	2301      	movs	r3, #1
 800d58c:	e06f      	b.n	800d66e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d58e:	4b3b      	ldr	r3, [pc, #236]	; (800d67c <HAL_RCC_ClockConfig+0x1bc>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f003 0302 	and.w	r3, r3, #2
 800d596:	2b00      	cmp	r3, #0
 800d598:	d101      	bne.n	800d59e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d59a:	2301      	movs	r3, #1
 800d59c:	e067      	b.n	800d66e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d59e:	4b37      	ldr	r3, [pc, #220]	; (800d67c <HAL_RCC_ClockConfig+0x1bc>)
 800d5a0:	689b      	ldr	r3, [r3, #8]
 800d5a2:	f023 0203 	bic.w	r2, r3, #3
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	4934      	ldr	r1, [pc, #208]	; (800d67c <HAL_RCC_ClockConfig+0x1bc>)
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d5b0:	f7fd ff72 	bl	800b498 <HAL_GetTick>
 800d5b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d5b6:	e00a      	b.n	800d5ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d5b8:	f7fd ff6e 	bl	800b498 <HAL_GetTick>
 800d5bc:	4602      	mov	r2, r0
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	1ad3      	subs	r3, r2, r3
 800d5c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d901      	bls.n	800d5ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d5ca:	2303      	movs	r3, #3
 800d5cc:	e04f      	b.n	800d66e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d5ce:	4b2b      	ldr	r3, [pc, #172]	; (800d67c <HAL_RCC_ClockConfig+0x1bc>)
 800d5d0:	689b      	ldr	r3, [r3, #8]
 800d5d2:	f003 020c 	and.w	r2, r3, #12
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d1eb      	bne.n	800d5b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d5e0:	4b25      	ldr	r3, [pc, #148]	; (800d678 <HAL_RCC_ClockConfig+0x1b8>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f003 0307 	and.w	r3, r3, #7
 800d5e8:	683a      	ldr	r2, [r7, #0]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d20c      	bcs.n	800d608 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d5ee:	4b22      	ldr	r3, [pc, #136]	; (800d678 <HAL_RCC_ClockConfig+0x1b8>)
 800d5f0:	683a      	ldr	r2, [r7, #0]
 800d5f2:	b2d2      	uxtb	r2, r2
 800d5f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d5f6:	4b20      	ldr	r3, [pc, #128]	; (800d678 <HAL_RCC_ClockConfig+0x1b8>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f003 0307 	and.w	r3, r3, #7
 800d5fe:	683a      	ldr	r2, [r7, #0]
 800d600:	429a      	cmp	r2, r3
 800d602:	d001      	beq.n	800d608 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d604:	2301      	movs	r3, #1
 800d606:	e032      	b.n	800d66e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f003 0304 	and.w	r3, r3, #4
 800d610:	2b00      	cmp	r3, #0
 800d612:	d008      	beq.n	800d626 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d614:	4b19      	ldr	r3, [pc, #100]	; (800d67c <HAL_RCC_ClockConfig+0x1bc>)
 800d616:	689b      	ldr	r3, [r3, #8]
 800d618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	4916      	ldr	r1, [pc, #88]	; (800d67c <HAL_RCC_ClockConfig+0x1bc>)
 800d622:	4313      	orrs	r3, r2
 800d624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f003 0308 	and.w	r3, r3, #8
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d009      	beq.n	800d646 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d632:	4b12      	ldr	r3, [pc, #72]	; (800d67c <HAL_RCC_ClockConfig+0x1bc>)
 800d634:	689b      	ldr	r3, [r3, #8]
 800d636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	691b      	ldr	r3, [r3, #16]
 800d63e:	00db      	lsls	r3, r3, #3
 800d640:	490e      	ldr	r1, [pc, #56]	; (800d67c <HAL_RCC_ClockConfig+0x1bc>)
 800d642:	4313      	orrs	r3, r2
 800d644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d646:	f000 f821 	bl	800d68c <HAL_RCC_GetSysClockFreq>
 800d64a:	4602      	mov	r2, r0
 800d64c:	4b0b      	ldr	r3, [pc, #44]	; (800d67c <HAL_RCC_ClockConfig+0x1bc>)
 800d64e:	689b      	ldr	r3, [r3, #8]
 800d650:	091b      	lsrs	r3, r3, #4
 800d652:	f003 030f 	and.w	r3, r3, #15
 800d656:	490a      	ldr	r1, [pc, #40]	; (800d680 <HAL_RCC_ClockConfig+0x1c0>)
 800d658:	5ccb      	ldrb	r3, [r1, r3]
 800d65a:	fa22 f303 	lsr.w	r3, r2, r3
 800d65e:	4a09      	ldr	r2, [pc, #36]	; (800d684 <HAL_RCC_ClockConfig+0x1c4>)
 800d660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d662:	4b09      	ldr	r3, [pc, #36]	; (800d688 <HAL_RCC_ClockConfig+0x1c8>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	4618      	mov	r0, r3
 800d668:	f7fa fd0c 	bl	8008084 <HAL_InitTick>

  return HAL_OK;
 800d66c:	2300      	movs	r3, #0
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3710      	adds	r7, #16
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	40023c00 	.word	0x40023c00
 800d67c:	40023800 	.word	0x40023800
 800d680:	08030114 	.word	0x08030114
 800d684:	20000014 	.word	0x20000014
 800d688:	20000038 	.word	0x20000038

0800d68c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d68c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d690:	b084      	sub	sp, #16
 800d692:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d694:	2300      	movs	r3, #0
 800d696:	607b      	str	r3, [r7, #4]
 800d698:	2300      	movs	r3, #0
 800d69a:	60fb      	str	r3, [r7, #12]
 800d69c:	2300      	movs	r3, #0
 800d69e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d6a4:	4b67      	ldr	r3, [pc, #412]	; (800d844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800d6a6:	689b      	ldr	r3, [r3, #8]
 800d6a8:	f003 030c 	and.w	r3, r3, #12
 800d6ac:	2b08      	cmp	r3, #8
 800d6ae:	d00d      	beq.n	800d6cc <HAL_RCC_GetSysClockFreq+0x40>
 800d6b0:	2b08      	cmp	r3, #8
 800d6b2:	f200 80bd 	bhi.w	800d830 <HAL_RCC_GetSysClockFreq+0x1a4>
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d002      	beq.n	800d6c0 <HAL_RCC_GetSysClockFreq+0x34>
 800d6ba:	2b04      	cmp	r3, #4
 800d6bc:	d003      	beq.n	800d6c6 <HAL_RCC_GetSysClockFreq+0x3a>
 800d6be:	e0b7      	b.n	800d830 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d6c0:	4b61      	ldr	r3, [pc, #388]	; (800d848 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800d6c2:	60bb      	str	r3, [r7, #8]
       break;
 800d6c4:	e0b7      	b.n	800d836 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d6c6:	4b61      	ldr	r3, [pc, #388]	; (800d84c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800d6c8:	60bb      	str	r3, [r7, #8]
      break;
 800d6ca:	e0b4      	b.n	800d836 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d6cc:	4b5d      	ldr	r3, [pc, #372]	; (800d844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d6d6:	4b5b      	ldr	r3, [pc, #364]	; (800d844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d04d      	beq.n	800d77e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d6e2:	4b58      	ldr	r3, [pc, #352]	; (800d844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800d6e4:	685b      	ldr	r3, [r3, #4]
 800d6e6:	099b      	lsrs	r3, r3, #6
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	f04f 0300 	mov.w	r3, #0
 800d6ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 800d6f2:	f04f 0100 	mov.w	r1, #0
 800d6f6:	ea02 0800 	and.w	r8, r2, r0
 800d6fa:	ea03 0901 	and.w	r9, r3, r1
 800d6fe:	4640      	mov	r0, r8
 800d700:	4649      	mov	r1, r9
 800d702:	f04f 0200 	mov.w	r2, #0
 800d706:	f04f 0300 	mov.w	r3, #0
 800d70a:	014b      	lsls	r3, r1, #5
 800d70c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800d710:	0142      	lsls	r2, r0, #5
 800d712:	4610      	mov	r0, r2
 800d714:	4619      	mov	r1, r3
 800d716:	ebb0 0008 	subs.w	r0, r0, r8
 800d71a:	eb61 0109 	sbc.w	r1, r1, r9
 800d71e:	f04f 0200 	mov.w	r2, #0
 800d722:	f04f 0300 	mov.w	r3, #0
 800d726:	018b      	lsls	r3, r1, #6
 800d728:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800d72c:	0182      	lsls	r2, r0, #6
 800d72e:	1a12      	subs	r2, r2, r0
 800d730:	eb63 0301 	sbc.w	r3, r3, r1
 800d734:	f04f 0000 	mov.w	r0, #0
 800d738:	f04f 0100 	mov.w	r1, #0
 800d73c:	00d9      	lsls	r1, r3, #3
 800d73e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d742:	00d0      	lsls	r0, r2, #3
 800d744:	4602      	mov	r2, r0
 800d746:	460b      	mov	r3, r1
 800d748:	eb12 0208 	adds.w	r2, r2, r8
 800d74c:	eb43 0309 	adc.w	r3, r3, r9
 800d750:	f04f 0000 	mov.w	r0, #0
 800d754:	f04f 0100 	mov.w	r1, #0
 800d758:	0259      	lsls	r1, r3, #9
 800d75a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800d75e:	0250      	lsls	r0, r2, #9
 800d760:	4602      	mov	r2, r0
 800d762:	460b      	mov	r3, r1
 800d764:	4610      	mov	r0, r2
 800d766:	4619      	mov	r1, r3
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	461a      	mov	r2, r3
 800d76c:	f04f 0300 	mov.w	r3, #0
 800d770:	f7f3 fa9a 	bl	8000ca8 <__aeabi_uldivmod>
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	4613      	mov	r3, r2
 800d77a:	60fb      	str	r3, [r7, #12]
 800d77c:	e04a      	b.n	800d814 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d77e:	4b31      	ldr	r3, [pc, #196]	; (800d844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	099b      	lsrs	r3, r3, #6
 800d784:	461a      	mov	r2, r3
 800d786:	f04f 0300 	mov.w	r3, #0
 800d78a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800d78e:	f04f 0100 	mov.w	r1, #0
 800d792:	ea02 0400 	and.w	r4, r2, r0
 800d796:	ea03 0501 	and.w	r5, r3, r1
 800d79a:	4620      	mov	r0, r4
 800d79c:	4629      	mov	r1, r5
 800d79e:	f04f 0200 	mov.w	r2, #0
 800d7a2:	f04f 0300 	mov.w	r3, #0
 800d7a6:	014b      	lsls	r3, r1, #5
 800d7a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800d7ac:	0142      	lsls	r2, r0, #5
 800d7ae:	4610      	mov	r0, r2
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	1b00      	subs	r0, r0, r4
 800d7b4:	eb61 0105 	sbc.w	r1, r1, r5
 800d7b8:	f04f 0200 	mov.w	r2, #0
 800d7bc:	f04f 0300 	mov.w	r3, #0
 800d7c0:	018b      	lsls	r3, r1, #6
 800d7c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800d7c6:	0182      	lsls	r2, r0, #6
 800d7c8:	1a12      	subs	r2, r2, r0
 800d7ca:	eb63 0301 	sbc.w	r3, r3, r1
 800d7ce:	f04f 0000 	mov.w	r0, #0
 800d7d2:	f04f 0100 	mov.w	r1, #0
 800d7d6:	00d9      	lsls	r1, r3, #3
 800d7d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d7dc:	00d0      	lsls	r0, r2, #3
 800d7de:	4602      	mov	r2, r0
 800d7e0:	460b      	mov	r3, r1
 800d7e2:	1912      	adds	r2, r2, r4
 800d7e4:	eb45 0303 	adc.w	r3, r5, r3
 800d7e8:	f04f 0000 	mov.w	r0, #0
 800d7ec:	f04f 0100 	mov.w	r1, #0
 800d7f0:	0299      	lsls	r1, r3, #10
 800d7f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800d7f6:	0290      	lsls	r0, r2, #10
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	4610      	mov	r0, r2
 800d7fe:	4619      	mov	r1, r3
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	461a      	mov	r2, r3
 800d804:	f04f 0300 	mov.w	r3, #0
 800d808:	f7f3 fa4e 	bl	8000ca8 <__aeabi_uldivmod>
 800d80c:	4602      	mov	r2, r0
 800d80e:	460b      	mov	r3, r1
 800d810:	4613      	mov	r3, r2
 800d812:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d814:	4b0b      	ldr	r3, [pc, #44]	; (800d844 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	0c1b      	lsrs	r3, r3, #16
 800d81a:	f003 0303 	and.w	r3, r3, #3
 800d81e:	3301      	adds	r3, #1
 800d820:	005b      	lsls	r3, r3, #1
 800d822:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	fbb2 f3f3 	udiv	r3, r2, r3
 800d82c:	60bb      	str	r3, [r7, #8]
      break;
 800d82e:	e002      	b.n	800d836 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d830:	4b05      	ldr	r3, [pc, #20]	; (800d848 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800d832:	60bb      	str	r3, [r7, #8]
      break;
 800d834:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d836:	68bb      	ldr	r3, [r7, #8]
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3710      	adds	r7, #16
 800d83c:	46bd      	mov	sp, r7
 800d83e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d842:	bf00      	nop
 800d844:	40023800 	.word	0x40023800
 800d848:	00f42400 	.word	0x00f42400
 800d84c:	007a1200 	.word	0x007a1200

0800d850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d850:	b480      	push	{r7}
 800d852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d854:	4b03      	ldr	r3, [pc, #12]	; (800d864 <HAL_RCC_GetHCLKFreq+0x14>)
 800d856:	681b      	ldr	r3, [r3, #0]
}
 800d858:	4618      	mov	r0, r3
 800d85a:	46bd      	mov	sp, r7
 800d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d860:	4770      	bx	lr
 800d862:	bf00      	nop
 800d864:	20000014 	.word	0x20000014

0800d868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d86c:	f7ff fff0 	bl	800d850 <HAL_RCC_GetHCLKFreq>
 800d870:	4602      	mov	r2, r0
 800d872:	4b05      	ldr	r3, [pc, #20]	; (800d888 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d874:	689b      	ldr	r3, [r3, #8]
 800d876:	0a9b      	lsrs	r3, r3, #10
 800d878:	f003 0307 	and.w	r3, r3, #7
 800d87c:	4903      	ldr	r1, [pc, #12]	; (800d88c <HAL_RCC_GetPCLK1Freq+0x24>)
 800d87e:	5ccb      	ldrb	r3, [r1, r3]
 800d880:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d884:	4618      	mov	r0, r3
 800d886:	bd80      	pop	{r7, pc}
 800d888:	40023800 	.word	0x40023800
 800d88c:	08030124 	.word	0x08030124

0800d890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d894:	f7ff ffdc 	bl	800d850 <HAL_RCC_GetHCLKFreq>
 800d898:	4602      	mov	r2, r0
 800d89a:	4b05      	ldr	r3, [pc, #20]	; (800d8b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d89c:	689b      	ldr	r3, [r3, #8]
 800d89e:	0b5b      	lsrs	r3, r3, #13
 800d8a0:	f003 0307 	and.w	r3, r3, #7
 800d8a4:	4903      	ldr	r1, [pc, #12]	; (800d8b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d8a6:	5ccb      	ldrb	r3, [r1, r3]
 800d8a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	40023800 	.word	0x40023800
 800d8b4:	08030124 	.word	0x08030124

0800d8b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b083      	sub	sp, #12
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	220f      	movs	r2, #15
 800d8c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d8c8:	4b12      	ldr	r3, [pc, #72]	; (800d914 <HAL_RCC_GetClockConfig+0x5c>)
 800d8ca:	689b      	ldr	r3, [r3, #8]
 800d8cc:	f003 0203 	and.w	r2, r3, #3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d8d4:	4b0f      	ldr	r3, [pc, #60]	; (800d914 <HAL_RCC_GetClockConfig+0x5c>)
 800d8d6:	689b      	ldr	r3, [r3, #8]
 800d8d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d8e0:	4b0c      	ldr	r3, [pc, #48]	; (800d914 <HAL_RCC_GetClockConfig+0x5c>)
 800d8e2:	689b      	ldr	r3, [r3, #8]
 800d8e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d8ec:	4b09      	ldr	r3, [pc, #36]	; (800d914 <HAL_RCC_GetClockConfig+0x5c>)
 800d8ee:	689b      	ldr	r3, [r3, #8]
 800d8f0:	08db      	lsrs	r3, r3, #3
 800d8f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d8fa:	4b07      	ldr	r3, [pc, #28]	; (800d918 <HAL_RCC_GetClockConfig+0x60>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f003 0207 	and.w	r2, r3, #7
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	601a      	str	r2, [r3, #0]
}
 800d906:	bf00      	nop
 800d908:	370c      	adds	r7, #12
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr
 800d912:	bf00      	nop
 800d914:	40023800 	.word	0x40023800
 800d918:	40023c00 	.word	0x40023c00

0800d91c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b086      	sub	sp, #24
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d924:	2300      	movs	r3, #0
 800d926:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800d928:	2300      	movs	r3, #0
 800d92a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f003 0301 	and.w	r3, r3, #1
 800d934:	2b00      	cmp	r3, #0
 800d936:	d105      	bne.n	800d944 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800d940:	2b00      	cmp	r3, #0
 800d942:	d035      	beq.n	800d9b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d944:	4b62      	ldr	r3, [pc, #392]	; (800dad0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800d946:	2200      	movs	r2, #0
 800d948:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d94a:	f7fd fda5 	bl	800b498 <HAL_GetTick>
 800d94e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d950:	e008      	b.n	800d964 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800d952:	f7fd fda1 	bl	800b498 <HAL_GetTick>
 800d956:	4602      	mov	r2, r0
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	1ad3      	subs	r3, r2, r3
 800d95c:	2b02      	cmp	r3, #2
 800d95e:	d901      	bls.n	800d964 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d960:	2303      	movs	r3, #3
 800d962:	e0b0      	b.n	800dac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d964:	4b5b      	ldr	r3, [pc, #364]	; (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d1f0      	bne.n	800d952 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	019a      	lsls	r2, r3, #6
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	071b      	lsls	r3, r3, #28
 800d97c:	4955      	ldr	r1, [pc, #340]	; (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d97e:	4313      	orrs	r3, r2
 800d980:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d984:	4b52      	ldr	r3, [pc, #328]	; (800dad0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800d986:	2201      	movs	r2, #1
 800d988:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d98a:	f7fd fd85 	bl	800b498 <HAL_GetTick>
 800d98e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d990:	e008      	b.n	800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800d992:	f7fd fd81 	bl	800b498 <HAL_GetTick>
 800d996:	4602      	mov	r2, r0
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	1ad3      	subs	r3, r2, r3
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	d901      	bls.n	800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d9a0:	2303      	movs	r3, #3
 800d9a2:	e090      	b.n	800dac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d9a4:	4b4b      	ldr	r3, [pc, #300]	; (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d0f0      	beq.n	800d992 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f003 0302 	and.w	r3, r3, #2
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	f000 8083 	beq.w	800dac4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d9be:	2300      	movs	r3, #0
 800d9c0:	60fb      	str	r3, [r7, #12]
 800d9c2:	4b44      	ldr	r3, [pc, #272]	; (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c6:	4a43      	ldr	r2, [pc, #268]	; (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d9c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9cc:	6413      	str	r3, [r2, #64]	; 0x40
 800d9ce:	4b41      	ldr	r3, [pc, #260]	; (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9d6:	60fb      	str	r3, [r7, #12]
 800d9d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800d9da:	4b3f      	ldr	r3, [pc, #252]	; (800dad8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4a3e      	ldr	r2, [pc, #248]	; (800dad8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d9e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d9e6:	f7fd fd57 	bl	800b498 <HAL_GetTick>
 800d9ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800d9ec:	e008      	b.n	800da00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800d9ee:	f7fd fd53 	bl	800b498 <HAL_GetTick>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	1ad3      	subs	r3, r2, r3
 800d9f8:	2b02      	cmp	r3, #2
 800d9fa:	d901      	bls.n	800da00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800d9fc:	2303      	movs	r3, #3
 800d9fe:	e062      	b.n	800dac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800da00:	4b35      	ldr	r3, [pc, #212]	; (800dad8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d0f0      	beq.n	800d9ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800da0c:	4b31      	ldr	r3, [pc, #196]	; (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800da0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da14:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d02f      	beq.n	800da7c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	68db      	ldr	r3, [r3, #12]
 800da20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da24:	693a      	ldr	r2, [r7, #16]
 800da26:	429a      	cmp	r2, r3
 800da28:	d028      	beq.n	800da7c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800da2a:	4b2a      	ldr	r3, [pc, #168]	; (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800da2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da32:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800da34:	4b29      	ldr	r3, [pc, #164]	; (800dadc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800da36:	2201      	movs	r2, #1
 800da38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800da3a:	4b28      	ldr	r3, [pc, #160]	; (800dadc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800da3c:	2200      	movs	r2, #0
 800da3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800da40:	4a24      	ldr	r2, [pc, #144]	; (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800da46:	4b23      	ldr	r3, [pc, #140]	; (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800da48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da4a:	f003 0301 	and.w	r3, r3, #1
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d114      	bne.n	800da7c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800da52:	f7fd fd21 	bl	800b498 <HAL_GetTick>
 800da56:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800da58:	e00a      	b.n	800da70 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800da5a:	f7fd fd1d 	bl	800b498 <HAL_GetTick>
 800da5e:	4602      	mov	r2, r0
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	1ad3      	subs	r3, r2, r3
 800da64:	f241 3288 	movw	r2, #5000	; 0x1388
 800da68:	4293      	cmp	r3, r2
 800da6a:	d901      	bls.n	800da70 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800da6c:	2303      	movs	r3, #3
 800da6e:	e02a      	b.n	800dac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800da70:	4b18      	ldr	r3, [pc, #96]	; (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800da72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da74:	f003 0302 	and.w	r3, r3, #2
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d0ee      	beq.n	800da5a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800da88:	d10d      	bne.n	800daa6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800da8a:	4b12      	ldr	r3, [pc, #72]	; (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800da8c:	689b      	ldr	r3, [r3, #8]
 800da8e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800da9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da9e:	490d      	ldr	r1, [pc, #52]	; (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800daa0:	4313      	orrs	r3, r2
 800daa2:	608b      	str	r3, [r1, #8]
 800daa4:	e005      	b.n	800dab2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800daa6:	4b0b      	ldr	r3, [pc, #44]	; (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800daa8:	689b      	ldr	r3, [r3, #8]
 800daaa:	4a0a      	ldr	r2, [pc, #40]	; (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800daac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800dab0:	6093      	str	r3, [r2, #8]
 800dab2:	4b08      	ldr	r3, [pc, #32]	; (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800dab4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dabe:	4905      	ldr	r1, [pc, #20]	; (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800dac0:	4313      	orrs	r3, r2
 800dac2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800dac4:	2300      	movs	r3, #0
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3718      	adds	r7, #24
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	42470068 	.word	0x42470068
 800dad4:	40023800 	.word	0x40023800
 800dad8:	40007000 	.word	0x40007000
 800dadc:	42470e40 	.word	0x42470e40

0800dae0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d101      	bne.n	800daf2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800daee:	2301      	movs	r3, #1
 800daf0:	e083      	b.n	800dbfa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	7f5b      	ldrb	r3, [r3, #29]
 800daf6:	b2db      	uxtb	r3, r3
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d105      	bne.n	800db08 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2200      	movs	r2, #0
 800db00:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7fa f9c2 	bl	8007e8c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2202      	movs	r2, #2
 800db0c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	22ca      	movs	r2, #202	; 0xca
 800db14:	625a      	str	r2, [r3, #36]	; 0x24
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2253      	movs	r2, #83	; 0x53
 800db1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 faa8 	bl	800e074 <RTC_EnterInitMode>
 800db24:	4603      	mov	r3, r0
 800db26:	2b00      	cmp	r3, #0
 800db28:	d008      	beq.n	800db3c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	22ff      	movs	r2, #255	; 0xff
 800db30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2204      	movs	r2, #4
 800db36:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800db38:	2301      	movs	r3, #1
 800db3a:	e05e      	b.n	800dbfa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	689b      	ldr	r3, [r3, #8]
 800db42:	687a      	ldr	r2, [r7, #4]
 800db44:	6812      	ldr	r2, [r2, #0]
 800db46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800db4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db4e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	6899      	ldr	r1, [r3, #8]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	685a      	ldr	r2, [r3, #4]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	691b      	ldr	r3, [r3, #16]
 800db5e:	431a      	orrs	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	695b      	ldr	r3, [r3, #20]
 800db64:	431a      	orrs	r2, r3
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	430a      	orrs	r2, r1
 800db6c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	68d2      	ldr	r2, [r2, #12]
 800db76:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	6919      	ldr	r1, [r3, #16]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	689b      	ldr	r3, [r3, #8]
 800db82:	041a      	lsls	r2, r3, #16
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	430a      	orrs	r2, r1
 800db8a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	68da      	ldr	r2, [r3, #12]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800db9a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	689b      	ldr	r3, [r3, #8]
 800dba2:	f003 0320 	and.w	r3, r3, #32
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d10e      	bne.n	800dbc8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 fa3a 	bl	800e024 <HAL_RTC_WaitForSynchro>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d008      	beq.n	800dbc8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	22ff      	movs	r2, #255	; 0xff
 800dbbc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2204      	movs	r2, #4
 800dbc2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	e018      	b.n	800dbfa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dbd6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	699a      	ldr	r2, [r3, #24]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	430a      	orrs	r2, r1
 800dbe8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	22ff      	movs	r2, #255	; 0xff
 800dbf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800dbf8:	2300      	movs	r3, #0
  }
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3708      	adds	r7, #8
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dc02:	b590      	push	{r4, r7, lr}
 800dc04:	b087      	sub	sp, #28
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	60f8      	str	r0, [r7, #12]
 800dc0a:	60b9      	str	r1, [r7, #8]
 800dc0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	7f1b      	ldrb	r3, [r3, #28]
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d101      	bne.n	800dc1e <HAL_RTC_SetTime+0x1c>
 800dc1a:	2302      	movs	r3, #2
 800dc1c:	e0aa      	b.n	800dd74 <HAL_RTC_SetTime+0x172>
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2201      	movs	r2, #1
 800dc22:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2202      	movs	r2, #2
 800dc28:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d126      	bne.n	800dc7e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	689b      	ldr	r3, [r3, #8]
 800dc36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d102      	bne.n	800dc44 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	2200      	movs	r2, #0
 800dc42:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f000 fa3f 	bl	800e0cc <RTC_ByteToBcd2>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	785b      	ldrb	r3, [r3, #1]
 800dc56:	4618      	mov	r0, r3
 800dc58:	f000 fa38 	bl	800e0cc <RTC_ByteToBcd2>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800dc60:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	789b      	ldrb	r3, [r3, #2]
 800dc66:	4618      	mov	r0, r3
 800dc68:	f000 fa30 	bl	800e0cc <RTC_ByteToBcd2>
 800dc6c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800dc6e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	78db      	ldrb	r3, [r3, #3]
 800dc76:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800dc78:	4313      	orrs	r3, r2
 800dc7a:	617b      	str	r3, [r7, #20]
 800dc7c:	e018      	b.n	800dcb0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	689b      	ldr	r3, [r3, #8]
 800dc84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d102      	bne.n	800dc92 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	785b      	ldrb	r3, [r3, #1]
 800dc9c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800dc9e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800dca0:	68ba      	ldr	r2, [r7, #8]
 800dca2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800dca4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	78db      	ldrb	r3, [r3, #3]
 800dcaa:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800dcac:	4313      	orrs	r3, r2
 800dcae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	22ca      	movs	r2, #202	; 0xca
 800dcb6:	625a      	str	r2, [r3, #36]	; 0x24
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2253      	movs	r2, #83	; 0x53
 800dcbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f000 f9d7 	bl	800e074 <RTC_EnterInitMode>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d00b      	beq.n	800dce4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	22ff      	movs	r2, #255	; 0xff
 800dcd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2204      	movs	r2, #4
 800dcd8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800dce0:	2301      	movs	r3, #1
 800dce2:	e047      	b.n	800dd74 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800dcee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800dcf2:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	689a      	ldr	r2, [r3, #8]
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dd02:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	6899      	ldr	r1, [r3, #8]
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	68da      	ldr	r2, [r3, #12]
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	691b      	ldr	r3, [r3, #16]
 800dd12:	431a      	orrs	r2, r3
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	430a      	orrs	r2, r1
 800dd1a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	68da      	ldr	r2, [r3, #12]
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dd2a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	f003 0320 	and.w	r3, r3, #32
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d111      	bne.n	800dd5e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dd3a:	68f8      	ldr	r0, [r7, #12]
 800dd3c:	f000 f972 	bl	800e024 <HAL_RTC_WaitForSynchro>
 800dd40:	4603      	mov	r3, r0
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d00b      	beq.n	800dd5e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	22ff      	movs	r2, #255	; 0xff
 800dd4c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	2204      	movs	r2, #4
 800dd52:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2200      	movs	r2, #0
 800dd58:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	e00a      	b.n	800dd74 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	22ff      	movs	r2, #255	; 0xff
 800dd64:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2201      	movs	r2, #1
 800dd6a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800dd72:	2300      	movs	r3, #0
  }
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	371c      	adds	r7, #28
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd90      	pop	{r4, r7, pc}

0800dd7c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b086      	sub	sp, #24
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	60f8      	str	r0, [r7, #12]
 800dd84:	60b9      	str	r1, [r7, #8]
 800dd86:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	691b      	ldr	r3, [r3, #16]
 800dd9c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ddae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ddb2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	0c1b      	lsrs	r3, r3, #16
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ddbe:	b2da      	uxtb	r2, r3
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	0a1b      	lsrs	r3, r3, #8
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddce:	b2da      	uxtb	r2, r3
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dddc:	b2da      	uxtb	r2, r3
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	0c1b      	lsrs	r3, r3, #16
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddec:	b2da      	uxtb	r2, r3
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d11a      	bne.n	800de2e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f000 f983 	bl	800e108 <RTC_Bcd2ToByte>
 800de02:	4603      	mov	r3, r0
 800de04:	461a      	mov	r2, r3
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	785b      	ldrb	r3, [r3, #1]
 800de0e:	4618      	mov	r0, r3
 800de10:	f000 f97a 	bl	800e108 <RTC_Bcd2ToByte>
 800de14:	4603      	mov	r3, r0
 800de16:	461a      	mov	r2, r3
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	789b      	ldrb	r3, [r3, #2]
 800de20:	4618      	mov	r0, r3
 800de22:	f000 f971 	bl	800e108 <RTC_Bcd2ToByte>
 800de26:	4603      	mov	r3, r0
 800de28:	461a      	mov	r2, r3
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800de2e:	2300      	movs	r3, #0
}
 800de30:	4618      	mov	r0, r3
 800de32:	3718      	adds	r7, #24
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800de38:	b590      	push	{r4, r7, lr}
 800de3a:	b087      	sub	sp, #28
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800de44:	2300      	movs	r3, #0
 800de46:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	7f1b      	ldrb	r3, [r3, #28]
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d101      	bne.n	800de54 <HAL_RTC_SetDate+0x1c>
 800de50:	2302      	movs	r3, #2
 800de52:	e094      	b.n	800df7e <HAL_RTC_SetDate+0x146>
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2201      	movs	r2, #1
 800de58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2202      	movs	r2, #2
 800de5e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d10e      	bne.n	800de84 <HAL_RTC_SetDate+0x4c>
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	785b      	ldrb	r3, [r3, #1]
 800de6a:	f003 0310 	and.w	r3, r3, #16
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d008      	beq.n	800de84 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	785b      	ldrb	r3, [r3, #1]
 800de76:	f023 0310 	bic.w	r3, r3, #16
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	330a      	adds	r3, #10
 800de7e:	b2da      	uxtb	r2, r3
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d11c      	bne.n	800dec4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	78db      	ldrb	r3, [r3, #3]
 800de8e:	4618      	mov	r0, r3
 800de90:	f000 f91c 	bl	800e0cc <RTC_ByteToBcd2>
 800de94:	4603      	mov	r3, r0
 800de96:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	785b      	ldrb	r3, [r3, #1]
 800de9c:	4618      	mov	r0, r3
 800de9e:	f000 f915 	bl	800e0cc <RTC_ByteToBcd2>
 800dea2:	4603      	mov	r3, r0
 800dea4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800dea6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	789b      	ldrb	r3, [r3, #2]
 800deac:	4618      	mov	r0, r3
 800deae:	f000 f90d 	bl	800e0cc <RTC_ByteToBcd2>
 800deb2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800deb4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800debe:	4313      	orrs	r3, r2
 800dec0:	617b      	str	r3, [r7, #20]
 800dec2:	e00e      	b.n	800dee2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	78db      	ldrb	r3, [r3, #3]
 800dec8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	785b      	ldrb	r3, [r3, #1]
 800dece:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ded0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800ded2:	68ba      	ldr	r2, [r7, #8]
 800ded4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800ded6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dede:	4313      	orrs	r3, r2
 800dee0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	22ca      	movs	r2, #202	; 0xca
 800dee8:	625a      	str	r2, [r3, #36]	; 0x24
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2253      	movs	r2, #83	; 0x53
 800def0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800def2:	68f8      	ldr	r0, [r7, #12]
 800def4:	f000 f8be 	bl	800e074 <RTC_EnterInitMode>
 800def8:	4603      	mov	r3, r0
 800defa:	2b00      	cmp	r3, #0
 800defc:	d00b      	beq.n	800df16 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	22ff      	movs	r2, #255	; 0xff
 800df04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	2204      	movs	r2, #4
 800df0a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	2200      	movs	r2, #0
 800df10:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800df12:	2301      	movs	r3, #1
 800df14:	e033      	b.n	800df7e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800df20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800df24:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	68da      	ldr	r2, [r3, #12]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800df34:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	689b      	ldr	r3, [r3, #8]
 800df3c:	f003 0320 	and.w	r3, r3, #32
 800df40:	2b00      	cmp	r3, #0
 800df42:	d111      	bne.n	800df68 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f000 f86d 	bl	800e024 <HAL_RTC_WaitForSynchro>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d00b      	beq.n	800df68 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	22ff      	movs	r2, #255	; 0xff
 800df56:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2204      	movs	r2, #4
 800df5c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2200      	movs	r2, #0
 800df62:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800df64:	2301      	movs	r3, #1
 800df66:	e00a      	b.n	800df7e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	22ff      	movs	r2, #255	; 0xff
 800df6e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2201      	movs	r2, #1
 800df74:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2200      	movs	r2, #0
 800df7a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800df7c:	2300      	movs	r3, #0
  }
}
 800df7e:	4618      	mov	r0, r3
 800df80:	371c      	adds	r7, #28
 800df82:	46bd      	mov	sp, r7
 800df84:	bd90      	pop	{r4, r7, pc}

0800df86 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800df86:	b580      	push	{r7, lr}
 800df88:	b086      	sub	sp, #24
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	60f8      	str	r0, [r7, #12]
 800df8e:	60b9      	str	r1, [r7, #8]
 800df90:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800df92:	2300      	movs	r3, #0
 800df94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dfa0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dfa4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	0c1b      	lsrs	r3, r3, #16
 800dfaa:	b2da      	uxtb	r2, r3
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	0a1b      	lsrs	r3, r3, #8
 800dfb4:	b2db      	uxtb	r3, r3
 800dfb6:	f003 031f 	and.w	r3, r3, #31
 800dfba:	b2da      	uxtb	r2, r3
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	b2db      	uxtb	r3, r3
 800dfc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dfc8:	b2da      	uxtb	r2, r3
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	0b5b      	lsrs	r3, r3, #13
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	f003 0307 	and.w	r3, r3, #7
 800dfd8:	b2da      	uxtb	r2, r3
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d11a      	bne.n	800e01a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	78db      	ldrb	r3, [r3, #3]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f000 f88d 	bl	800e108 <RTC_Bcd2ToByte>
 800dfee:	4603      	mov	r3, r0
 800dff0:	461a      	mov	r2, r3
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	785b      	ldrb	r3, [r3, #1]
 800dffa:	4618      	mov	r0, r3
 800dffc:	f000 f884 	bl	800e108 <RTC_Bcd2ToByte>
 800e000:	4603      	mov	r3, r0
 800e002:	461a      	mov	r2, r3
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	789b      	ldrb	r3, [r3, #2]
 800e00c:	4618      	mov	r0, r3
 800e00e:	f000 f87b 	bl	800e108 <RTC_Bcd2ToByte>
 800e012:	4603      	mov	r3, r0
 800e014:	461a      	mov	r2, r3
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800e01a:	2300      	movs	r3, #0
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3718      	adds	r7, #24
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e02c:	2300      	movs	r3, #0
 800e02e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	68da      	ldr	r2, [r3, #12]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e03e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e040:	f7fd fa2a 	bl	800b498 <HAL_GetTick>
 800e044:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800e046:	e009      	b.n	800e05c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e048:	f7fd fa26 	bl	800b498 <HAL_GetTick>
 800e04c:	4602      	mov	r2, r0
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	1ad3      	subs	r3, r2, r3
 800e052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e056:	d901      	bls.n	800e05c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800e058:	2303      	movs	r3, #3
 800e05a:	e007      	b.n	800e06c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	68db      	ldr	r3, [r3, #12]
 800e062:	f003 0320 	and.w	r3, r3, #32
 800e066:	2b00      	cmp	r3, #0
 800e068:	d0ee      	beq.n	800e048 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800e06a:	2300      	movs	r3, #0
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3710      	adds	r7, #16
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b084      	sub	sp, #16
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e07c:	2300      	movs	r3, #0
 800e07e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	68db      	ldr	r3, [r3, #12]
 800e086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d119      	bne.n	800e0c2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e096:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e098:	f7fd f9fe 	bl	800b498 <HAL_GetTick>
 800e09c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e09e:	e009      	b.n	800e0b4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e0a0:	f7fd f9fa 	bl	800b498 <HAL_GetTick>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	1ad3      	subs	r3, r2, r3
 800e0aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e0ae:	d901      	bls.n	800e0b4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800e0b0:	2303      	movs	r3, #3
 800e0b2:	e007      	b.n	800e0c4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	68db      	ldr	r3, [r3, #12]
 800e0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d0ee      	beq.n	800e0a0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800e0c2:	2300      	movs	r3, #0
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3710      	adds	r7, #16
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b085      	sub	sp, #20
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800e0da:	e005      	b.n	800e0e8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800e0e2:	79fb      	ldrb	r3, [r7, #7]
 800e0e4:	3b0a      	subs	r3, #10
 800e0e6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800e0e8:	79fb      	ldrb	r3, [r7, #7]
 800e0ea:	2b09      	cmp	r3, #9
 800e0ec:	d8f6      	bhi.n	800e0dc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	011b      	lsls	r3, r3, #4
 800e0f4:	b2da      	uxtb	r2, r3
 800e0f6:	79fb      	ldrb	r3, [r7, #7]
 800e0f8:	4313      	orrs	r3, r2
 800e0fa:	b2db      	uxtb	r3, r3
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3714      	adds	r7, #20
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr

0800e108 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e108:	b480      	push	{r7}
 800e10a:	b085      	sub	sp, #20
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	4603      	mov	r3, r0
 800e110:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800e112:	2300      	movs	r3, #0
 800e114:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800e116:	79fb      	ldrb	r3, [r7, #7]
 800e118:	091b      	lsrs	r3, r3, #4
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	461a      	mov	r2, r3
 800e11e:	4613      	mov	r3, r2
 800e120:	009b      	lsls	r3, r3, #2
 800e122:	4413      	add	r3, r2
 800e124:	005b      	lsls	r3, r3, #1
 800e126:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800e128:	79fb      	ldrb	r3, [r7, #7]
 800e12a:	f003 030f 	and.w	r3, r3, #15
 800e12e:	b2da      	uxtb	r2, r3
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	b2db      	uxtb	r3, r3
 800e134:	4413      	add	r3, r2
 800e136:	b2db      	uxtb	r3, r3
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3714      	adds	r7, #20
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr

0800e144 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d101      	bne.n	800e156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e152:	2301      	movs	r3, #1
 800e154:	e07b      	b.n	800e24e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d108      	bne.n	800e170 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e166:	d009      	beq.n	800e17c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2200      	movs	r2, #0
 800e16c:	61da      	str	r2, [r3, #28]
 800e16e:	e005      	b.n	800e17c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2200      	movs	r2, #0
 800e17a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2200      	movs	r2, #0
 800e180:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d106      	bne.n	800e19c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2200      	movs	r2, #0
 800e192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f7f9 fea2 	bl	8007ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2202      	movs	r2, #2
 800e1a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	689b      	ldr	r3, [r3, #8]
 800e1c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e1c4:	431a      	orrs	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	68db      	ldr	r3, [r3, #12]
 800e1ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e1ce:	431a      	orrs	r2, r3
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	691b      	ldr	r3, [r3, #16]
 800e1d4:	f003 0302 	and.w	r3, r3, #2
 800e1d8:	431a      	orrs	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	695b      	ldr	r3, [r3, #20]
 800e1de:	f003 0301 	and.w	r3, r3, #1
 800e1e2:	431a      	orrs	r2, r3
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	699b      	ldr	r3, [r3, #24]
 800e1e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e1ec:	431a      	orrs	r2, r3
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	69db      	ldr	r3, [r3, #28]
 800e1f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e1f6:	431a      	orrs	r2, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6a1b      	ldr	r3, [r3, #32]
 800e1fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e200:	ea42 0103 	orr.w	r1, r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e208:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	430a      	orrs	r2, r1
 800e212:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	699b      	ldr	r3, [r3, #24]
 800e218:	0c1b      	lsrs	r3, r3, #16
 800e21a:	f003 0104 	and.w	r1, r3, #4
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e222:	f003 0210 	and.w	r2, r3, #16
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	430a      	orrs	r2, r1
 800e22c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	69da      	ldr	r2, [r3, #28]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e23c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2200      	movs	r2, #0
 800e242:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2201      	movs	r2, #1
 800e248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e24c:	2300      	movs	r3, #0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3708      	adds	r7, #8
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}

0800e256 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e256:	b580      	push	{r7, lr}
 800e258:	b088      	sub	sp, #32
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	60f8      	str	r0, [r7, #12]
 800e25e:	60b9      	str	r1, [r7, #8]
 800e260:	603b      	str	r3, [r7, #0]
 800e262:	4613      	mov	r3, r2
 800e264:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e266:	2300      	movs	r3, #0
 800e268:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e270:	2b01      	cmp	r3, #1
 800e272:	d101      	bne.n	800e278 <HAL_SPI_Transmit+0x22>
 800e274:	2302      	movs	r3, #2
 800e276:	e126      	b.n	800e4c6 <HAL_SPI_Transmit+0x270>
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2201      	movs	r2, #1
 800e27c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e280:	f7fd f90a 	bl	800b498 <HAL_GetTick>
 800e284:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e286:	88fb      	ldrh	r3, [r7, #6]
 800e288:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e290:	b2db      	uxtb	r3, r3
 800e292:	2b01      	cmp	r3, #1
 800e294:	d002      	beq.n	800e29c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e296:	2302      	movs	r3, #2
 800e298:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e29a:	e10b      	b.n	800e4b4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d002      	beq.n	800e2a8 <HAL_SPI_Transmit+0x52>
 800e2a2:	88fb      	ldrh	r3, [r7, #6]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d102      	bne.n	800e2ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e2ac:	e102      	b.n	800e4b4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2203      	movs	r2, #3
 800e2b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	68ba      	ldr	r2, [r7, #8]
 800e2c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	88fa      	ldrh	r2, [r7, #6]
 800e2c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	88fa      	ldrh	r2, [r7, #6]
 800e2cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	689b      	ldr	r3, [r3, #8]
 800e2f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2f4:	d10f      	bne.n	800e316 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e304:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e314:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e320:	2b40      	cmp	r3, #64	; 0x40
 800e322:	d007      	beq.n	800e334 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e332:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	68db      	ldr	r3, [r3, #12]
 800e338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e33c:	d14b      	bne.n	800e3d6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d002      	beq.n	800e34c <HAL_SPI_Transmit+0xf6>
 800e346:	8afb      	ldrh	r3, [r7, #22]
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d13e      	bne.n	800e3ca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e350:	881a      	ldrh	r2, [r3, #0]
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e35c:	1c9a      	adds	r2, r3, #2
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e366:	b29b      	uxth	r3, r3
 800e368:	3b01      	subs	r3, #1
 800e36a:	b29a      	uxth	r2, r3
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e370:	e02b      	b.n	800e3ca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	689b      	ldr	r3, [r3, #8]
 800e378:	f003 0302 	and.w	r3, r3, #2
 800e37c:	2b02      	cmp	r3, #2
 800e37e:	d112      	bne.n	800e3a6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e384:	881a      	ldrh	r2, [r3, #0]
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e390:	1c9a      	adds	r2, r3, #2
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	3b01      	subs	r3, #1
 800e39e:	b29a      	uxth	r2, r3
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	86da      	strh	r2, [r3, #54]	; 0x36
 800e3a4:	e011      	b.n	800e3ca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3a6:	f7fd f877 	bl	800b498 <HAL_GetTick>
 800e3aa:	4602      	mov	r2, r0
 800e3ac:	69bb      	ldr	r3, [r7, #24]
 800e3ae:	1ad3      	subs	r3, r2, r3
 800e3b0:	683a      	ldr	r2, [r7, #0]
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d803      	bhi.n	800e3be <HAL_SPI_Transmit+0x168>
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3bc:	d102      	bne.n	800e3c4 <HAL_SPI_Transmit+0x16e>
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d102      	bne.n	800e3ca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800e3c4:	2303      	movs	r3, #3
 800e3c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e3c8:	e074      	b.n	800e4b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d1ce      	bne.n	800e372 <HAL_SPI_Transmit+0x11c>
 800e3d4:	e04c      	b.n	800e470 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	685b      	ldr	r3, [r3, #4]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d002      	beq.n	800e3e4 <HAL_SPI_Transmit+0x18e>
 800e3de:	8afb      	ldrh	r3, [r7, #22]
 800e3e0:	2b01      	cmp	r3, #1
 800e3e2:	d140      	bne.n	800e466 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	330c      	adds	r3, #12
 800e3ee:	7812      	ldrb	r2, [r2, #0]
 800e3f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3f6:	1c5a      	adds	r2, r3, #1
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e400:	b29b      	uxth	r3, r3
 800e402:	3b01      	subs	r3, #1
 800e404:	b29a      	uxth	r2, r3
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e40a:	e02c      	b.n	800e466 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	689b      	ldr	r3, [r3, #8]
 800e412:	f003 0302 	and.w	r3, r3, #2
 800e416:	2b02      	cmp	r3, #2
 800e418:	d113      	bne.n	800e442 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	330c      	adds	r3, #12
 800e424:	7812      	ldrb	r2, [r2, #0]
 800e426:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e42c:	1c5a      	adds	r2, r3, #1
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e436:	b29b      	uxth	r3, r3
 800e438:	3b01      	subs	r3, #1
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	86da      	strh	r2, [r3, #54]	; 0x36
 800e440:	e011      	b.n	800e466 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e442:	f7fd f829 	bl	800b498 <HAL_GetTick>
 800e446:	4602      	mov	r2, r0
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	1ad3      	subs	r3, r2, r3
 800e44c:	683a      	ldr	r2, [r7, #0]
 800e44e:	429a      	cmp	r2, r3
 800e450:	d803      	bhi.n	800e45a <HAL_SPI_Transmit+0x204>
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e458:	d102      	bne.n	800e460 <HAL_SPI_Transmit+0x20a>
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d102      	bne.n	800e466 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800e460:	2303      	movs	r3, #3
 800e462:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e464:	e026      	b.n	800e4b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d1cd      	bne.n	800e40c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e470:	69ba      	ldr	r2, [r7, #24]
 800e472:	6839      	ldr	r1, [r7, #0]
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	f000 fa63 	bl	800e940 <SPI_EndRxTxTransaction>
 800e47a:	4603      	mov	r3, r0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d002      	beq.n	800e486 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2220      	movs	r2, #32
 800e484:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	689b      	ldr	r3, [r3, #8]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d10a      	bne.n	800e4a4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e48e:	2300      	movs	r3, #0
 800e490:	613b      	str	r3, [r7, #16]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	68db      	ldr	r3, [r3, #12]
 800e498:	613b      	str	r3, [r7, #16]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	613b      	str	r3, [r7, #16]
 800e4a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d002      	beq.n	800e4b2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	77fb      	strb	r3, [r7, #31]
 800e4b0:	e000      	b.n	800e4b4 <HAL_SPI_Transmit+0x25e>
  }

error:
 800e4b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e4c4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3720      	adds	r7, #32
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}

0800e4ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	b08c      	sub	sp, #48	; 0x30
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	60f8      	str	r0, [r7, #12]
 800e4d6:	60b9      	str	r1, [r7, #8]
 800e4d8:	607a      	str	r2, [r7, #4]
 800e4da:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d101      	bne.n	800e4f4 <HAL_SPI_TransmitReceive+0x26>
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	e18a      	b.n	800e80a <HAL_SPI_TransmitReceive+0x33c>
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4fc:	f7fc ffcc 	bl	800b498 <HAL_GetTick>
 800e500:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e508:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e512:	887b      	ldrh	r3, [r7, #2]
 800e514:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e516:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e51a:	2b01      	cmp	r3, #1
 800e51c:	d00f      	beq.n	800e53e <HAL_SPI_TransmitReceive+0x70>
 800e51e:	69fb      	ldr	r3, [r7, #28]
 800e520:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e524:	d107      	bne.n	800e536 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	689b      	ldr	r3, [r3, #8]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d103      	bne.n	800e536 <HAL_SPI_TransmitReceive+0x68>
 800e52e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e532:	2b04      	cmp	r3, #4
 800e534:	d003      	beq.n	800e53e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e536:	2302      	movs	r3, #2
 800e538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e53c:	e15b      	b.n	800e7f6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d005      	beq.n	800e550 <HAL_SPI_TransmitReceive+0x82>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d002      	beq.n	800e550 <HAL_SPI_TransmitReceive+0x82>
 800e54a:	887b      	ldrh	r3, [r7, #2]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d103      	bne.n	800e558 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e550:	2301      	movs	r3, #1
 800e552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e556:	e14e      	b.n	800e7f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e55e:	b2db      	uxtb	r3, r3
 800e560:	2b04      	cmp	r3, #4
 800e562:	d003      	beq.n	800e56c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2205      	movs	r2, #5
 800e568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2200      	movs	r2, #0
 800e570:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	687a      	ldr	r2, [r7, #4]
 800e576:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	887a      	ldrh	r2, [r7, #2]
 800e57c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	887a      	ldrh	r2, [r7, #2]
 800e582:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	68ba      	ldr	r2, [r7, #8]
 800e588:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	887a      	ldrh	r2, [r7, #2]
 800e58e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	887a      	ldrh	r2, [r7, #2]
 800e594:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2200      	movs	r2, #0
 800e59a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5ac:	2b40      	cmp	r3, #64	; 0x40
 800e5ae:	d007      	beq.n	800e5c0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e5be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5c8:	d178      	bne.n	800e6bc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d002      	beq.n	800e5d8 <HAL_SPI_TransmitReceive+0x10a>
 800e5d2:	8b7b      	ldrh	r3, [r7, #26]
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	d166      	bne.n	800e6a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5dc:	881a      	ldrh	r2, [r3, #0]
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5e8:	1c9a      	adds	r2, r3, #2
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	3b01      	subs	r3, #1
 800e5f6:	b29a      	uxth	r2, r3
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5fc:	e053      	b.n	800e6a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	f003 0302 	and.w	r3, r3, #2
 800e608:	2b02      	cmp	r3, #2
 800e60a:	d11b      	bne.n	800e644 <HAL_SPI_TransmitReceive+0x176>
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e610:	b29b      	uxth	r3, r3
 800e612:	2b00      	cmp	r3, #0
 800e614:	d016      	beq.n	800e644 <HAL_SPI_TransmitReceive+0x176>
 800e616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d113      	bne.n	800e644 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e620:	881a      	ldrh	r2, [r3, #0]
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e62c:	1c9a      	adds	r2, r3, #2
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e636:	b29b      	uxth	r3, r3
 800e638:	3b01      	subs	r3, #1
 800e63a:	b29a      	uxth	r2, r3
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e640:	2300      	movs	r3, #0
 800e642:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	689b      	ldr	r3, [r3, #8]
 800e64a:	f003 0301 	and.w	r3, r3, #1
 800e64e:	2b01      	cmp	r3, #1
 800e650:	d119      	bne.n	800e686 <HAL_SPI_TransmitReceive+0x1b8>
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e656:	b29b      	uxth	r3, r3
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d014      	beq.n	800e686 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	68da      	ldr	r2, [r3, #12]
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e666:	b292      	uxth	r2, r2
 800e668:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e66e:	1c9a      	adds	r2, r3, #2
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e678:	b29b      	uxth	r3, r3
 800e67a:	3b01      	subs	r3, #1
 800e67c:	b29a      	uxth	r2, r3
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e682:	2301      	movs	r3, #1
 800e684:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e686:	f7fc ff07 	bl	800b498 <HAL_GetTick>
 800e68a:	4602      	mov	r2, r0
 800e68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68e:	1ad3      	subs	r3, r2, r3
 800e690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e692:	429a      	cmp	r2, r3
 800e694:	d807      	bhi.n	800e6a6 <HAL_SPI_TransmitReceive+0x1d8>
 800e696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e69c:	d003      	beq.n	800e6a6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e69e:	2303      	movs	r3, #3
 800e6a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e6a4:	e0a7      	b.n	800e7f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d1a6      	bne.n	800e5fe <HAL_SPI_TransmitReceive+0x130>
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d1a1      	bne.n	800e5fe <HAL_SPI_TransmitReceive+0x130>
 800e6ba:	e07c      	b.n	800e7b6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d002      	beq.n	800e6ca <HAL_SPI_TransmitReceive+0x1fc>
 800e6c4:	8b7b      	ldrh	r3, [r7, #26]
 800e6c6:	2b01      	cmp	r3, #1
 800e6c8:	d16b      	bne.n	800e7a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	330c      	adds	r3, #12
 800e6d4:	7812      	ldrb	r2, [r2, #0]
 800e6d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6dc:	1c5a      	adds	r2, r3, #1
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6e6:	b29b      	uxth	r3, r3
 800e6e8:	3b01      	subs	r3, #1
 800e6ea:	b29a      	uxth	r2, r3
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e6f0:	e057      	b.n	800e7a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	689b      	ldr	r3, [r3, #8]
 800e6f8:	f003 0302 	and.w	r3, r3, #2
 800e6fc:	2b02      	cmp	r3, #2
 800e6fe:	d11c      	bne.n	800e73a <HAL_SPI_TransmitReceive+0x26c>
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e704:	b29b      	uxth	r3, r3
 800e706:	2b00      	cmp	r3, #0
 800e708:	d017      	beq.n	800e73a <HAL_SPI_TransmitReceive+0x26c>
 800e70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d114      	bne.n	800e73a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	330c      	adds	r3, #12
 800e71a:	7812      	ldrb	r2, [r2, #0]
 800e71c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e722:	1c5a      	adds	r2, r3, #1
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	3b01      	subs	r3, #1
 800e730:	b29a      	uxth	r2, r3
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e736:	2300      	movs	r3, #0
 800e738:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	689b      	ldr	r3, [r3, #8]
 800e740:	f003 0301 	and.w	r3, r3, #1
 800e744:	2b01      	cmp	r3, #1
 800e746:	d119      	bne.n	800e77c <HAL_SPI_TransmitReceive+0x2ae>
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e74c:	b29b      	uxth	r3, r3
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d014      	beq.n	800e77c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	68da      	ldr	r2, [r3, #12]
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e75c:	b2d2      	uxtb	r2, r2
 800e75e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e764:	1c5a      	adds	r2, r3, #1
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e76e:	b29b      	uxth	r3, r3
 800e770:	3b01      	subs	r3, #1
 800e772:	b29a      	uxth	r2, r3
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e778:	2301      	movs	r3, #1
 800e77a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e77c:	f7fc fe8c 	bl	800b498 <HAL_GetTick>
 800e780:	4602      	mov	r2, r0
 800e782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e784:	1ad3      	subs	r3, r2, r3
 800e786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e788:	429a      	cmp	r2, r3
 800e78a:	d803      	bhi.n	800e794 <HAL_SPI_TransmitReceive+0x2c6>
 800e78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e78e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e792:	d102      	bne.n	800e79a <HAL_SPI_TransmitReceive+0x2cc>
 800e794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e796:	2b00      	cmp	r3, #0
 800e798:	d103      	bne.n	800e7a2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e79a:	2303      	movs	r3, #3
 800e79c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e7a0:	e029      	b.n	800e7f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d1a2      	bne.n	800e6f2 <HAL_SPI_TransmitReceive+0x224>
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d19d      	bne.n	800e6f2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e7b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	f000 f8c0 	bl	800e940 <SPI_EndRxTxTransaction>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d006      	beq.n	800e7d4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2220      	movs	r2, #32
 800e7d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e7d2:	e010      	b.n	800e7f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	689b      	ldr	r3, [r3, #8]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d10b      	bne.n	800e7f4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e7dc:	2300      	movs	r3, #0
 800e7de:	617b      	str	r3, [r7, #20]
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	68db      	ldr	r3, [r3, #12]
 800e7e6:	617b      	str	r3, [r7, #20]
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	689b      	ldr	r3, [r3, #8]
 800e7ee:	617b      	str	r3, [r7, #20]
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	e000      	b.n	800e7f6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e7f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2201      	movs	r2, #1
 800e7fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2200      	movs	r2, #0
 800e802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e806:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3730      	adds	r7, #48	; 0x30
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}

0800e812 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800e812:	b480      	push	{r7}
 800e814:	b083      	sub	sp, #12
 800e816:	af00      	add	r7, sp, #0
 800e818:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e820:	b2db      	uxtb	r3, r3
}
 800e822:	4618      	mov	r0, r3
 800e824:	370c      	adds	r7, #12
 800e826:	46bd      	mov	sp, r7
 800e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82c:	4770      	bx	lr
	...

0800e830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b088      	sub	sp, #32
 800e834:	af00      	add	r7, sp, #0
 800e836:	60f8      	str	r0, [r7, #12]
 800e838:	60b9      	str	r1, [r7, #8]
 800e83a:	603b      	str	r3, [r7, #0]
 800e83c:	4613      	mov	r3, r2
 800e83e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e840:	f7fc fe2a 	bl	800b498 <HAL_GetTick>
 800e844:	4602      	mov	r2, r0
 800e846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e848:	1a9b      	subs	r3, r3, r2
 800e84a:	683a      	ldr	r2, [r7, #0]
 800e84c:	4413      	add	r3, r2
 800e84e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e850:	f7fc fe22 	bl	800b498 <HAL_GetTick>
 800e854:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e856:	4b39      	ldr	r3, [pc, #228]	; (800e93c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	015b      	lsls	r3, r3, #5
 800e85c:	0d1b      	lsrs	r3, r3, #20
 800e85e:	69fa      	ldr	r2, [r7, #28]
 800e860:	fb02 f303 	mul.w	r3, r2, r3
 800e864:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e866:	e054      	b.n	800e912 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e86e:	d050      	beq.n	800e912 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e870:	f7fc fe12 	bl	800b498 <HAL_GetTick>
 800e874:	4602      	mov	r2, r0
 800e876:	69bb      	ldr	r3, [r7, #24]
 800e878:	1ad3      	subs	r3, r2, r3
 800e87a:	69fa      	ldr	r2, [r7, #28]
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d902      	bls.n	800e886 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e880:	69fb      	ldr	r3, [r7, #28]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d13d      	bne.n	800e902 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	685a      	ldr	r2, [r3, #4]
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e894:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e89e:	d111      	bne.n	800e8c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8a8:	d004      	beq.n	800e8b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	689b      	ldr	r3, [r3, #8]
 800e8ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8b2:	d107      	bne.n	800e8c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e8c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8cc:	d10f      	bne.n	800e8ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e8dc:	601a      	str	r2, [r3, #0]
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	681a      	ldr	r2, [r3, #0]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e8ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e8fe:	2303      	movs	r3, #3
 800e900:	e017      	b.n	800e932 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d101      	bne.n	800e90c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e908:	2300      	movs	r3, #0
 800e90a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	3b01      	subs	r3, #1
 800e910:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	689a      	ldr	r2, [r3, #8]
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	4013      	ands	r3, r2
 800e91c:	68ba      	ldr	r2, [r7, #8]
 800e91e:	429a      	cmp	r2, r3
 800e920:	bf0c      	ite	eq
 800e922:	2301      	moveq	r3, #1
 800e924:	2300      	movne	r3, #0
 800e926:	b2db      	uxtb	r3, r3
 800e928:	461a      	mov	r2, r3
 800e92a:	79fb      	ldrb	r3, [r7, #7]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d19b      	bne.n	800e868 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e930:	2300      	movs	r3, #0
}
 800e932:	4618      	mov	r0, r3
 800e934:	3720      	adds	r7, #32
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	bf00      	nop
 800e93c:	20000014 	.word	0x20000014

0800e940 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b088      	sub	sp, #32
 800e944:	af02      	add	r7, sp, #8
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	60b9      	str	r1, [r7, #8]
 800e94a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e94c:	4b1b      	ldr	r3, [pc, #108]	; (800e9bc <SPI_EndRxTxTransaction+0x7c>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a1b      	ldr	r2, [pc, #108]	; (800e9c0 <SPI_EndRxTxTransaction+0x80>)
 800e952:	fba2 2303 	umull	r2, r3, r2, r3
 800e956:	0d5b      	lsrs	r3, r3, #21
 800e958:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e95c:	fb02 f303 	mul.w	r3, r2, r3
 800e960:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e96a:	d112      	bne.n	800e992 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	9300      	str	r3, [sp, #0]
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	2200      	movs	r2, #0
 800e974:	2180      	movs	r1, #128	; 0x80
 800e976:	68f8      	ldr	r0, [r7, #12]
 800e978:	f7ff ff5a 	bl	800e830 <SPI_WaitFlagStateUntilTimeout>
 800e97c:	4603      	mov	r3, r0
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d016      	beq.n	800e9b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e986:	f043 0220 	orr.w	r2, r3, #32
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e98e:	2303      	movs	r3, #3
 800e990:	e00f      	b.n	800e9b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d00a      	beq.n	800e9ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	3b01      	subs	r3, #1
 800e99c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	689b      	ldr	r3, [r3, #8]
 800e9a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9a8:	2b80      	cmp	r3, #128	; 0x80
 800e9aa:	d0f2      	beq.n	800e992 <SPI_EndRxTxTransaction+0x52>
 800e9ac:	e000      	b.n	800e9b0 <SPI_EndRxTxTransaction+0x70>
        break;
 800e9ae:	bf00      	nop
  }

  return HAL_OK;
 800e9b0:	2300      	movs	r3, #0
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3718      	adds	r7, #24
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	20000014 	.word	0x20000014
 800e9c0:	165e9f81 	.word	0x165e9f81

0800e9c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d101      	bne.n	800e9d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	e041      	b.n	800ea5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9dc:	b2db      	uxtb	r3, r3
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d106      	bne.n	800e9f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f000 f839 	bl	800ea62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2202      	movs	r2, #2
 800e9f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	3304      	adds	r3, #4
 800ea00:	4619      	mov	r1, r3
 800ea02:	4610      	mov	r0, r2
 800ea04:	f000 f9d8 	bl	800edb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2201      	movs	r2, #1
 800ea14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2201      	movs	r2, #1
 800ea24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2201      	movs	r2, #1
 800ea34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2201      	movs	r2, #1
 800ea44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2201      	movs	r2, #1
 800ea54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea58:	2300      	movs	r3, #0
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3708      	adds	r7, #8
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ea62:	b480      	push	{r7}
 800ea64:	b083      	sub	sp, #12
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ea6a:	bf00      	nop
 800ea6c:	370c      	adds	r7, #12
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr
	...

0800ea78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b085      	sub	sp, #20
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	2b01      	cmp	r3, #1
 800ea8a:	d001      	beq.n	800ea90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	e04e      	b.n	800eb2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2202      	movs	r2, #2
 800ea94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	68da      	ldr	r2, [r3, #12]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f042 0201 	orr.w	r2, r2, #1
 800eaa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	4a23      	ldr	r2, [pc, #140]	; (800eb3c <HAL_TIM_Base_Start_IT+0xc4>)
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d022      	beq.n	800eaf8 <HAL_TIM_Base_Start_IT+0x80>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eaba:	d01d      	beq.n	800eaf8 <HAL_TIM_Base_Start_IT+0x80>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a1f      	ldr	r2, [pc, #124]	; (800eb40 <HAL_TIM_Base_Start_IT+0xc8>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d018      	beq.n	800eaf8 <HAL_TIM_Base_Start_IT+0x80>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	4a1e      	ldr	r2, [pc, #120]	; (800eb44 <HAL_TIM_Base_Start_IT+0xcc>)
 800eacc:	4293      	cmp	r3, r2
 800eace:	d013      	beq.n	800eaf8 <HAL_TIM_Base_Start_IT+0x80>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	4a1c      	ldr	r2, [pc, #112]	; (800eb48 <HAL_TIM_Base_Start_IT+0xd0>)
 800ead6:	4293      	cmp	r3, r2
 800ead8:	d00e      	beq.n	800eaf8 <HAL_TIM_Base_Start_IT+0x80>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	4a1b      	ldr	r2, [pc, #108]	; (800eb4c <HAL_TIM_Base_Start_IT+0xd4>)
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d009      	beq.n	800eaf8 <HAL_TIM_Base_Start_IT+0x80>
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	4a19      	ldr	r2, [pc, #100]	; (800eb50 <HAL_TIM_Base_Start_IT+0xd8>)
 800eaea:	4293      	cmp	r3, r2
 800eaec:	d004      	beq.n	800eaf8 <HAL_TIM_Base_Start_IT+0x80>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	4a18      	ldr	r2, [pc, #96]	; (800eb54 <HAL_TIM_Base_Start_IT+0xdc>)
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	d111      	bne.n	800eb1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	689b      	ldr	r3, [r3, #8]
 800eafe:	f003 0307 	and.w	r3, r3, #7
 800eb02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2b06      	cmp	r3, #6
 800eb08:	d010      	beq.n	800eb2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f042 0201 	orr.w	r2, r2, #1
 800eb18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb1a:	e007      	b.n	800eb2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f042 0201 	orr.w	r2, r2, #1
 800eb2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eb2c:	2300      	movs	r3, #0
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3714      	adds	r7, #20
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr
 800eb3a:	bf00      	nop
 800eb3c:	40010000 	.word	0x40010000
 800eb40:	40000400 	.word	0x40000400
 800eb44:	40000800 	.word	0x40000800
 800eb48:	40000c00 	.word	0x40000c00
 800eb4c:	40010400 	.word	0x40010400
 800eb50:	40014000 	.word	0x40014000
 800eb54:	40001800 	.word	0x40001800

0800eb58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	691b      	ldr	r3, [r3, #16]
 800eb66:	f003 0302 	and.w	r3, r3, #2
 800eb6a:	2b02      	cmp	r3, #2
 800eb6c:	d122      	bne.n	800ebb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	68db      	ldr	r3, [r3, #12]
 800eb74:	f003 0302 	and.w	r3, r3, #2
 800eb78:	2b02      	cmp	r3, #2
 800eb7a:	d11b      	bne.n	800ebb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f06f 0202 	mvn.w	r2, #2
 800eb84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2201      	movs	r2, #1
 800eb8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	699b      	ldr	r3, [r3, #24]
 800eb92:	f003 0303 	and.w	r3, r3, #3
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d003      	beq.n	800eba2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f000 f8ee 	bl	800ed7c <HAL_TIM_IC_CaptureCallback>
 800eba0:	e005      	b.n	800ebae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f000 f8e0 	bl	800ed68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 f8f1 	bl	800ed90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	691b      	ldr	r3, [r3, #16]
 800ebba:	f003 0304 	and.w	r3, r3, #4
 800ebbe:	2b04      	cmp	r3, #4
 800ebc0:	d122      	bne.n	800ec08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	68db      	ldr	r3, [r3, #12]
 800ebc8:	f003 0304 	and.w	r3, r3, #4
 800ebcc:	2b04      	cmp	r3, #4
 800ebce:	d11b      	bne.n	800ec08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	f06f 0204 	mvn.w	r2, #4
 800ebd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2202      	movs	r2, #2
 800ebde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	699b      	ldr	r3, [r3, #24]
 800ebe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d003      	beq.n	800ebf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 f8c4 	bl	800ed7c <HAL_TIM_IC_CaptureCallback>
 800ebf4:	e005      	b.n	800ec02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f000 f8b6 	bl	800ed68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f000 f8c7 	bl	800ed90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2200      	movs	r2, #0
 800ec06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	691b      	ldr	r3, [r3, #16]
 800ec0e:	f003 0308 	and.w	r3, r3, #8
 800ec12:	2b08      	cmp	r3, #8
 800ec14:	d122      	bne.n	800ec5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	68db      	ldr	r3, [r3, #12]
 800ec1c:	f003 0308 	and.w	r3, r3, #8
 800ec20:	2b08      	cmp	r3, #8
 800ec22:	d11b      	bne.n	800ec5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f06f 0208 	mvn.w	r2, #8
 800ec2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2204      	movs	r2, #4
 800ec32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	69db      	ldr	r3, [r3, #28]
 800ec3a:	f003 0303 	and.w	r3, r3, #3
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d003      	beq.n	800ec4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f000 f89a 	bl	800ed7c <HAL_TIM_IC_CaptureCallback>
 800ec48:	e005      	b.n	800ec56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f000 f88c 	bl	800ed68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f000 f89d 	bl	800ed90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	691b      	ldr	r3, [r3, #16]
 800ec62:	f003 0310 	and.w	r3, r3, #16
 800ec66:	2b10      	cmp	r3, #16
 800ec68:	d122      	bne.n	800ecb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	68db      	ldr	r3, [r3, #12]
 800ec70:	f003 0310 	and.w	r3, r3, #16
 800ec74:	2b10      	cmp	r3, #16
 800ec76:	d11b      	bne.n	800ecb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f06f 0210 	mvn.w	r2, #16
 800ec80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2208      	movs	r2, #8
 800ec86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	69db      	ldr	r3, [r3, #28]
 800ec8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d003      	beq.n	800ec9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 f870 	bl	800ed7c <HAL_TIM_IC_CaptureCallback>
 800ec9c:	e005      	b.n	800ecaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f000 f862 	bl	800ed68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f000 f873 	bl	800ed90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2200      	movs	r2, #0
 800ecae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	691b      	ldr	r3, [r3, #16]
 800ecb6:	f003 0301 	and.w	r3, r3, #1
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	d10e      	bne.n	800ecdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	f003 0301 	and.w	r3, r3, #1
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d107      	bne.n	800ecdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	f06f 0201 	mvn.w	r2, #1
 800ecd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f7f6 fc10 	bl	80054fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	691b      	ldr	r3, [r3, #16]
 800ece2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ece6:	2b80      	cmp	r3, #128	; 0x80
 800ece8:	d10e      	bne.n	800ed08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	68db      	ldr	r3, [r3, #12]
 800ecf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecf4:	2b80      	cmp	r3, #128	; 0x80
 800ecf6:	d107      	bne.n	800ed08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ed00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 f902 	bl	800ef0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	691b      	ldr	r3, [r3, #16]
 800ed0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed12:	2b40      	cmp	r3, #64	; 0x40
 800ed14:	d10e      	bne.n	800ed34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed20:	2b40      	cmp	r3, #64	; 0x40
 800ed22:	d107      	bne.n	800ed34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ed2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 f838 	bl	800eda4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	691b      	ldr	r3, [r3, #16]
 800ed3a:	f003 0320 	and.w	r3, r3, #32
 800ed3e:	2b20      	cmp	r3, #32
 800ed40:	d10e      	bne.n	800ed60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	68db      	ldr	r3, [r3, #12]
 800ed48:	f003 0320 	and.w	r3, r3, #32
 800ed4c:	2b20      	cmp	r3, #32
 800ed4e:	d107      	bne.n	800ed60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f06f 0220 	mvn.w	r2, #32
 800ed58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f000 f8cc 	bl	800eef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ed60:	bf00      	nop
 800ed62:	3708      	adds	r7, #8
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b083      	sub	sp, #12
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ed70:	bf00      	nop
 800ed72:	370c      	adds	r7, #12
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr

0800ed7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b083      	sub	sp, #12
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ed84:	bf00      	nop
 800ed86:	370c      	adds	r7, #12
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b083      	sub	sp, #12
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ed98:	bf00      	nop
 800ed9a:	370c      	adds	r7, #12
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda2:	4770      	bx	lr

0800eda4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b083      	sub	sp, #12
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800edac:	bf00      	nop
 800edae:	370c      	adds	r7, #12
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr

0800edb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800edb8:	b480      	push	{r7}
 800edba:	b085      	sub	sp, #20
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	4a40      	ldr	r2, [pc, #256]	; (800eecc <TIM_Base_SetConfig+0x114>)
 800edcc:	4293      	cmp	r3, r2
 800edce:	d013      	beq.n	800edf8 <TIM_Base_SetConfig+0x40>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800edd6:	d00f      	beq.n	800edf8 <TIM_Base_SetConfig+0x40>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	4a3d      	ldr	r2, [pc, #244]	; (800eed0 <TIM_Base_SetConfig+0x118>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d00b      	beq.n	800edf8 <TIM_Base_SetConfig+0x40>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	4a3c      	ldr	r2, [pc, #240]	; (800eed4 <TIM_Base_SetConfig+0x11c>)
 800ede4:	4293      	cmp	r3, r2
 800ede6:	d007      	beq.n	800edf8 <TIM_Base_SetConfig+0x40>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	4a3b      	ldr	r2, [pc, #236]	; (800eed8 <TIM_Base_SetConfig+0x120>)
 800edec:	4293      	cmp	r3, r2
 800edee:	d003      	beq.n	800edf8 <TIM_Base_SetConfig+0x40>
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	4a3a      	ldr	r2, [pc, #232]	; (800eedc <TIM_Base_SetConfig+0x124>)
 800edf4:	4293      	cmp	r3, r2
 800edf6:	d108      	bne.n	800ee0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	68fa      	ldr	r2, [r7, #12]
 800ee06:	4313      	orrs	r3, r2
 800ee08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	4a2f      	ldr	r2, [pc, #188]	; (800eecc <TIM_Base_SetConfig+0x114>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d02b      	beq.n	800ee6a <TIM_Base_SetConfig+0xb2>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee18:	d027      	beq.n	800ee6a <TIM_Base_SetConfig+0xb2>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	4a2c      	ldr	r2, [pc, #176]	; (800eed0 <TIM_Base_SetConfig+0x118>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d023      	beq.n	800ee6a <TIM_Base_SetConfig+0xb2>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	4a2b      	ldr	r2, [pc, #172]	; (800eed4 <TIM_Base_SetConfig+0x11c>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d01f      	beq.n	800ee6a <TIM_Base_SetConfig+0xb2>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	4a2a      	ldr	r2, [pc, #168]	; (800eed8 <TIM_Base_SetConfig+0x120>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d01b      	beq.n	800ee6a <TIM_Base_SetConfig+0xb2>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	4a29      	ldr	r2, [pc, #164]	; (800eedc <TIM_Base_SetConfig+0x124>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d017      	beq.n	800ee6a <TIM_Base_SetConfig+0xb2>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	4a28      	ldr	r2, [pc, #160]	; (800eee0 <TIM_Base_SetConfig+0x128>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d013      	beq.n	800ee6a <TIM_Base_SetConfig+0xb2>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	4a27      	ldr	r2, [pc, #156]	; (800eee4 <TIM_Base_SetConfig+0x12c>)
 800ee46:	4293      	cmp	r3, r2
 800ee48:	d00f      	beq.n	800ee6a <TIM_Base_SetConfig+0xb2>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	4a26      	ldr	r2, [pc, #152]	; (800eee8 <TIM_Base_SetConfig+0x130>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d00b      	beq.n	800ee6a <TIM_Base_SetConfig+0xb2>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	4a25      	ldr	r2, [pc, #148]	; (800eeec <TIM_Base_SetConfig+0x134>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d007      	beq.n	800ee6a <TIM_Base_SetConfig+0xb2>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	4a24      	ldr	r2, [pc, #144]	; (800eef0 <TIM_Base_SetConfig+0x138>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d003      	beq.n	800ee6a <TIM_Base_SetConfig+0xb2>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	4a23      	ldr	r2, [pc, #140]	; (800eef4 <TIM_Base_SetConfig+0x13c>)
 800ee66:	4293      	cmp	r3, r2
 800ee68:	d108      	bne.n	800ee7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	68fa      	ldr	r2, [r7, #12]
 800ee78:	4313      	orrs	r3, r2
 800ee7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	695b      	ldr	r3, [r3, #20]
 800ee86:	4313      	orrs	r3, r2
 800ee88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	68fa      	ldr	r2, [r7, #12]
 800ee8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	689a      	ldr	r2, [r3, #8]
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	681a      	ldr	r2, [r3, #0]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	4a0a      	ldr	r2, [pc, #40]	; (800eecc <TIM_Base_SetConfig+0x114>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d003      	beq.n	800eeb0 <TIM_Base_SetConfig+0xf8>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	4a0c      	ldr	r2, [pc, #48]	; (800eedc <TIM_Base_SetConfig+0x124>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d103      	bne.n	800eeb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	691a      	ldr	r2, [r3, #16]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2201      	movs	r2, #1
 800eebc:	615a      	str	r2, [r3, #20]
}
 800eebe:	bf00      	nop
 800eec0:	3714      	adds	r7, #20
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	40010000 	.word	0x40010000
 800eed0:	40000400 	.word	0x40000400
 800eed4:	40000800 	.word	0x40000800
 800eed8:	40000c00 	.word	0x40000c00
 800eedc:	40010400 	.word	0x40010400
 800eee0:	40014000 	.word	0x40014000
 800eee4:	40014400 	.word	0x40014400
 800eee8:	40014800 	.word	0x40014800
 800eeec:	40001800 	.word	0x40001800
 800eef0:	40001c00 	.word	0x40001c00
 800eef4:	40002000 	.word	0x40002000

0800eef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b083      	sub	sp, #12
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ef00:	bf00      	nop
 800ef02:	370c      	adds	r7, #12
 800ef04:	46bd      	mov	sp, r7
 800ef06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0a:	4770      	bx	lr

0800ef0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b083      	sub	sp, #12
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ef14:	bf00      	nop
 800ef16:	370c      	adds	r7, #12
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr

0800ef20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d101      	bne.n	800ef32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e03f      	b.n	800efb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d106      	bne.n	800ef4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2200      	movs	r2, #0
 800ef42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f7f9 f832 	bl	8007fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2224      	movs	r2, #36	; 0x24
 800ef50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	68da      	ldr	r2, [r3, #12]
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ef62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 f929 	bl	800f1bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	691a      	ldr	r2, [r3, #16]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ef78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	695a      	ldr	r2, [r3, #20]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ef88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	68da      	ldr	r2, [r3, #12]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ef98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2220      	movs	r2, #32
 800efa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2220      	movs	r2, #32
 800efac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800efb0:	2300      	movs	r3, #0
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3708      	adds	r7, #8
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}

0800efba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800efba:	b580      	push	{r7, lr}
 800efbc:	b08a      	sub	sp, #40	; 0x28
 800efbe:	af02      	add	r7, sp, #8
 800efc0:	60f8      	str	r0, [r7, #12]
 800efc2:	60b9      	str	r1, [r7, #8]
 800efc4:	603b      	str	r3, [r7, #0]
 800efc6:	4613      	mov	r3, r2
 800efc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800efca:	2300      	movs	r3, #0
 800efcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	2b20      	cmp	r3, #32
 800efd8:	d17c      	bne.n	800f0d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d002      	beq.n	800efe6 <HAL_UART_Transmit+0x2c>
 800efe0:	88fb      	ldrh	r3, [r7, #6]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d101      	bne.n	800efea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800efe6:	2301      	movs	r3, #1
 800efe8:	e075      	b.n	800f0d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d101      	bne.n	800eff8 <HAL_UART_Transmit+0x3e>
 800eff4:	2302      	movs	r3, #2
 800eff6:	e06e      	b.n	800f0d6 <HAL_UART_Transmit+0x11c>
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2201      	movs	r2, #1
 800effc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2200      	movs	r2, #0
 800f004:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	2221      	movs	r2, #33	; 0x21
 800f00a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f00e:	f7fc fa43 	bl	800b498 <HAL_GetTick>
 800f012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	88fa      	ldrh	r2, [r7, #6]
 800f018:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	88fa      	ldrh	r2, [r7, #6]
 800f01e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	689b      	ldr	r3, [r3, #8]
 800f024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f028:	d108      	bne.n	800f03c <HAL_UART_Transmit+0x82>
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	691b      	ldr	r3, [r3, #16]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d104      	bne.n	800f03c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800f032:	2300      	movs	r3, #0
 800f034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	61bb      	str	r3, [r7, #24]
 800f03a:	e003      	b.n	800f044 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f040:	2300      	movs	r3, #0
 800f042:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2200      	movs	r2, #0
 800f048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800f04c:	e02a      	b.n	800f0a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	9300      	str	r3, [sp, #0]
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	2200      	movs	r2, #0
 800f056:	2180      	movs	r1, #128	; 0x80
 800f058:	68f8      	ldr	r0, [r7, #12]
 800f05a:	f000 f840 	bl	800f0de <UART_WaitOnFlagUntilTimeout>
 800f05e:	4603      	mov	r3, r0
 800f060:	2b00      	cmp	r3, #0
 800f062:	d001      	beq.n	800f068 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800f064:	2303      	movs	r3, #3
 800f066:	e036      	b.n	800f0d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d10b      	bne.n	800f086 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	881b      	ldrh	r3, [r3, #0]
 800f072:	461a      	mov	r2, r3
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f07c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800f07e:	69bb      	ldr	r3, [r7, #24]
 800f080:	3302      	adds	r3, #2
 800f082:	61bb      	str	r3, [r7, #24]
 800f084:	e007      	b.n	800f096 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800f086:	69fb      	ldr	r3, [r7, #28]
 800f088:	781a      	ldrb	r2, [r3, #0]
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800f090:	69fb      	ldr	r3, [r7, #28]
 800f092:	3301      	adds	r3, #1
 800f094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f09a:	b29b      	uxth	r3, r3
 800f09c:	3b01      	subs	r3, #1
 800f09e:	b29a      	uxth	r2, r3
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d1cf      	bne.n	800f04e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	9300      	str	r3, [sp, #0]
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	2140      	movs	r1, #64	; 0x40
 800f0b8:	68f8      	ldr	r0, [r7, #12]
 800f0ba:	f000 f810 	bl	800f0de <UART_WaitOnFlagUntilTimeout>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d001      	beq.n	800f0c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800f0c4:	2303      	movs	r3, #3
 800f0c6:	e006      	b.n	800f0d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	2220      	movs	r2, #32
 800f0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	e000      	b.n	800f0d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800f0d4:	2302      	movs	r3, #2
  }
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3720      	adds	r7, #32
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}

0800f0de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800f0de:	b580      	push	{r7, lr}
 800f0e0:	b090      	sub	sp, #64	; 0x40
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	60f8      	str	r0, [r7, #12]
 800f0e6:	60b9      	str	r1, [r7, #8]
 800f0e8:	603b      	str	r3, [r7, #0]
 800f0ea:	4613      	mov	r3, r2
 800f0ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f0ee:	e050      	b.n	800f192 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f0f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0f6:	d04c      	beq.n	800f192 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800f0f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d007      	beq.n	800f10e <UART_WaitOnFlagUntilTimeout+0x30>
 800f0fe:	f7fc f9cb 	bl	800b498 <HAL_GetTick>
 800f102:	4602      	mov	r2, r0
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	1ad3      	subs	r3, r2, r3
 800f108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d241      	bcs.n	800f192 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	330c      	adds	r3, #12
 800f114:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f118:	e853 3f00 	ldrex	r3, [r3]
 800f11c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f120:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f124:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	330c      	adds	r3, #12
 800f12c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f12e:	637a      	str	r2, [r7, #52]	; 0x34
 800f130:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f132:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f136:	e841 2300 	strex	r3, r2, [r1]
 800f13a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d1e5      	bne.n	800f10e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	3314      	adds	r3, #20
 800f148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	e853 3f00 	ldrex	r3, [r3]
 800f150:	613b      	str	r3, [r7, #16]
   return(result);
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	f023 0301 	bic.w	r3, r3, #1
 800f158:	63bb      	str	r3, [r7, #56]	; 0x38
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	3314      	adds	r3, #20
 800f160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f162:	623a      	str	r2, [r7, #32]
 800f164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f166:	69f9      	ldr	r1, [r7, #28]
 800f168:	6a3a      	ldr	r2, [r7, #32]
 800f16a:	e841 2300 	strex	r3, r2, [r1]
 800f16e:	61bb      	str	r3, [r7, #24]
   return(result);
 800f170:	69bb      	ldr	r3, [r7, #24]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d1e5      	bne.n	800f142 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	2220      	movs	r2, #32
 800f17a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2220      	movs	r2, #32
 800f182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2200      	movs	r2, #0
 800f18a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800f18e:	2303      	movs	r3, #3
 800f190:	e00f      	b.n	800f1b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	681a      	ldr	r2, [r3, #0]
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	4013      	ands	r3, r2
 800f19c:	68ba      	ldr	r2, [r7, #8]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	bf0c      	ite	eq
 800f1a2:	2301      	moveq	r3, #1
 800f1a4:	2300      	movne	r3, #0
 800f1a6:	b2db      	uxtb	r3, r3
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	79fb      	ldrb	r3, [r7, #7]
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d09f      	beq.n	800f0f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f1b0:	2300      	movs	r3, #0
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3740      	adds	r7, #64	; 0x40
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
	...

0800f1bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1c0:	b09f      	sub	sp, #124	; 0x7c
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f1c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	691b      	ldr	r3, [r3, #16]
 800f1cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f1d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1d2:	68d9      	ldr	r1, [r3, #12]
 800f1d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	ea40 0301 	orr.w	r3, r0, r1
 800f1dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f1de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1e0:	689a      	ldr	r2, [r3, #8]
 800f1e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1e4:	691b      	ldr	r3, [r3, #16]
 800f1e6:	431a      	orrs	r2, r3
 800f1e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1ea:	695b      	ldr	r3, [r3, #20]
 800f1ec:	431a      	orrs	r2, r3
 800f1ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1f0:	69db      	ldr	r3, [r3, #28]
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800f1f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	68db      	ldr	r3, [r3, #12]
 800f1fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800f200:	f021 010c 	bic.w	r1, r1, #12
 800f204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f206:	681a      	ldr	r2, [r3, #0]
 800f208:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f20a:	430b      	orrs	r3, r1
 800f20c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f20e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	695b      	ldr	r3, [r3, #20]
 800f214:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800f218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f21a:	6999      	ldr	r1, [r3, #24]
 800f21c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	ea40 0301 	orr.w	r3, r0, r1
 800f224:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	4bc5      	ldr	r3, [pc, #788]	; (800f540 <UART_SetConfig+0x384>)
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d004      	beq.n	800f23a <UART_SetConfig+0x7e>
 800f230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f232:	681a      	ldr	r2, [r3, #0]
 800f234:	4bc3      	ldr	r3, [pc, #780]	; (800f544 <UART_SetConfig+0x388>)
 800f236:	429a      	cmp	r2, r3
 800f238:	d103      	bne.n	800f242 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f23a:	f7fe fb29 	bl	800d890 <HAL_RCC_GetPCLK2Freq>
 800f23e:	6778      	str	r0, [r7, #116]	; 0x74
 800f240:	e002      	b.n	800f248 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f242:	f7fe fb11 	bl	800d868 <HAL_RCC_GetPCLK1Freq>
 800f246:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f24a:	69db      	ldr	r3, [r3, #28]
 800f24c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f250:	f040 80b6 	bne.w	800f3c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f256:	461c      	mov	r4, r3
 800f258:	f04f 0500 	mov.w	r5, #0
 800f25c:	4622      	mov	r2, r4
 800f25e:	462b      	mov	r3, r5
 800f260:	1891      	adds	r1, r2, r2
 800f262:	6439      	str	r1, [r7, #64]	; 0x40
 800f264:	415b      	adcs	r3, r3
 800f266:	647b      	str	r3, [r7, #68]	; 0x44
 800f268:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f26c:	1912      	adds	r2, r2, r4
 800f26e:	eb45 0303 	adc.w	r3, r5, r3
 800f272:	f04f 0000 	mov.w	r0, #0
 800f276:	f04f 0100 	mov.w	r1, #0
 800f27a:	00d9      	lsls	r1, r3, #3
 800f27c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f280:	00d0      	lsls	r0, r2, #3
 800f282:	4602      	mov	r2, r0
 800f284:	460b      	mov	r3, r1
 800f286:	1911      	adds	r1, r2, r4
 800f288:	6639      	str	r1, [r7, #96]	; 0x60
 800f28a:	416b      	adcs	r3, r5
 800f28c:	667b      	str	r3, [r7, #100]	; 0x64
 800f28e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	461a      	mov	r2, r3
 800f294:	f04f 0300 	mov.w	r3, #0
 800f298:	1891      	adds	r1, r2, r2
 800f29a:	63b9      	str	r1, [r7, #56]	; 0x38
 800f29c:	415b      	adcs	r3, r3
 800f29e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f2a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800f2a8:	f7f1 fcfe 	bl	8000ca8 <__aeabi_uldivmod>
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	460b      	mov	r3, r1
 800f2b0:	4ba5      	ldr	r3, [pc, #660]	; (800f548 <UART_SetConfig+0x38c>)
 800f2b2:	fba3 2302 	umull	r2, r3, r3, r2
 800f2b6:	095b      	lsrs	r3, r3, #5
 800f2b8:	011e      	lsls	r6, r3, #4
 800f2ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2bc:	461c      	mov	r4, r3
 800f2be:	f04f 0500 	mov.w	r5, #0
 800f2c2:	4622      	mov	r2, r4
 800f2c4:	462b      	mov	r3, r5
 800f2c6:	1891      	adds	r1, r2, r2
 800f2c8:	6339      	str	r1, [r7, #48]	; 0x30
 800f2ca:	415b      	adcs	r3, r3
 800f2cc:	637b      	str	r3, [r7, #52]	; 0x34
 800f2ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f2d2:	1912      	adds	r2, r2, r4
 800f2d4:	eb45 0303 	adc.w	r3, r5, r3
 800f2d8:	f04f 0000 	mov.w	r0, #0
 800f2dc:	f04f 0100 	mov.w	r1, #0
 800f2e0:	00d9      	lsls	r1, r3, #3
 800f2e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f2e6:	00d0      	lsls	r0, r2, #3
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	460b      	mov	r3, r1
 800f2ec:	1911      	adds	r1, r2, r4
 800f2ee:	65b9      	str	r1, [r7, #88]	; 0x58
 800f2f0:	416b      	adcs	r3, r5
 800f2f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f2f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2f6:	685b      	ldr	r3, [r3, #4]
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	f04f 0300 	mov.w	r3, #0
 800f2fe:	1891      	adds	r1, r2, r2
 800f300:	62b9      	str	r1, [r7, #40]	; 0x28
 800f302:	415b      	adcs	r3, r3
 800f304:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f306:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f30a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800f30e:	f7f1 fccb 	bl	8000ca8 <__aeabi_uldivmod>
 800f312:	4602      	mov	r2, r0
 800f314:	460b      	mov	r3, r1
 800f316:	4b8c      	ldr	r3, [pc, #560]	; (800f548 <UART_SetConfig+0x38c>)
 800f318:	fba3 1302 	umull	r1, r3, r3, r2
 800f31c:	095b      	lsrs	r3, r3, #5
 800f31e:	2164      	movs	r1, #100	; 0x64
 800f320:	fb01 f303 	mul.w	r3, r1, r3
 800f324:	1ad3      	subs	r3, r2, r3
 800f326:	00db      	lsls	r3, r3, #3
 800f328:	3332      	adds	r3, #50	; 0x32
 800f32a:	4a87      	ldr	r2, [pc, #540]	; (800f548 <UART_SetConfig+0x38c>)
 800f32c:	fba2 2303 	umull	r2, r3, r2, r3
 800f330:	095b      	lsrs	r3, r3, #5
 800f332:	005b      	lsls	r3, r3, #1
 800f334:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f338:	441e      	add	r6, r3
 800f33a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f33c:	4618      	mov	r0, r3
 800f33e:	f04f 0100 	mov.w	r1, #0
 800f342:	4602      	mov	r2, r0
 800f344:	460b      	mov	r3, r1
 800f346:	1894      	adds	r4, r2, r2
 800f348:	623c      	str	r4, [r7, #32]
 800f34a:	415b      	adcs	r3, r3
 800f34c:	627b      	str	r3, [r7, #36]	; 0x24
 800f34e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f352:	1812      	adds	r2, r2, r0
 800f354:	eb41 0303 	adc.w	r3, r1, r3
 800f358:	f04f 0400 	mov.w	r4, #0
 800f35c:	f04f 0500 	mov.w	r5, #0
 800f360:	00dd      	lsls	r5, r3, #3
 800f362:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f366:	00d4      	lsls	r4, r2, #3
 800f368:	4622      	mov	r2, r4
 800f36a:	462b      	mov	r3, r5
 800f36c:	1814      	adds	r4, r2, r0
 800f36e:	653c      	str	r4, [r7, #80]	; 0x50
 800f370:	414b      	adcs	r3, r1
 800f372:	657b      	str	r3, [r7, #84]	; 0x54
 800f374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f376:	685b      	ldr	r3, [r3, #4]
 800f378:	461a      	mov	r2, r3
 800f37a:	f04f 0300 	mov.w	r3, #0
 800f37e:	1891      	adds	r1, r2, r2
 800f380:	61b9      	str	r1, [r7, #24]
 800f382:	415b      	adcs	r3, r3
 800f384:	61fb      	str	r3, [r7, #28]
 800f386:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f38a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f38e:	f7f1 fc8b 	bl	8000ca8 <__aeabi_uldivmod>
 800f392:	4602      	mov	r2, r0
 800f394:	460b      	mov	r3, r1
 800f396:	4b6c      	ldr	r3, [pc, #432]	; (800f548 <UART_SetConfig+0x38c>)
 800f398:	fba3 1302 	umull	r1, r3, r3, r2
 800f39c:	095b      	lsrs	r3, r3, #5
 800f39e:	2164      	movs	r1, #100	; 0x64
 800f3a0:	fb01 f303 	mul.w	r3, r1, r3
 800f3a4:	1ad3      	subs	r3, r2, r3
 800f3a6:	00db      	lsls	r3, r3, #3
 800f3a8:	3332      	adds	r3, #50	; 0x32
 800f3aa:	4a67      	ldr	r2, [pc, #412]	; (800f548 <UART_SetConfig+0x38c>)
 800f3ac:	fba2 2303 	umull	r2, r3, r2, r3
 800f3b0:	095b      	lsrs	r3, r3, #5
 800f3b2:	f003 0207 	and.w	r2, r3, #7
 800f3b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	4432      	add	r2, r6
 800f3bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f3be:	e0b9      	b.n	800f534 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f3c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3c2:	461c      	mov	r4, r3
 800f3c4:	f04f 0500 	mov.w	r5, #0
 800f3c8:	4622      	mov	r2, r4
 800f3ca:	462b      	mov	r3, r5
 800f3cc:	1891      	adds	r1, r2, r2
 800f3ce:	6139      	str	r1, [r7, #16]
 800f3d0:	415b      	adcs	r3, r3
 800f3d2:	617b      	str	r3, [r7, #20]
 800f3d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f3d8:	1912      	adds	r2, r2, r4
 800f3da:	eb45 0303 	adc.w	r3, r5, r3
 800f3de:	f04f 0000 	mov.w	r0, #0
 800f3e2:	f04f 0100 	mov.w	r1, #0
 800f3e6:	00d9      	lsls	r1, r3, #3
 800f3e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f3ec:	00d0      	lsls	r0, r2, #3
 800f3ee:	4602      	mov	r2, r0
 800f3f0:	460b      	mov	r3, r1
 800f3f2:	eb12 0804 	adds.w	r8, r2, r4
 800f3f6:	eb43 0905 	adc.w	r9, r3, r5
 800f3fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	4618      	mov	r0, r3
 800f400:	f04f 0100 	mov.w	r1, #0
 800f404:	f04f 0200 	mov.w	r2, #0
 800f408:	f04f 0300 	mov.w	r3, #0
 800f40c:	008b      	lsls	r3, r1, #2
 800f40e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f412:	0082      	lsls	r2, r0, #2
 800f414:	4640      	mov	r0, r8
 800f416:	4649      	mov	r1, r9
 800f418:	f7f1 fc46 	bl	8000ca8 <__aeabi_uldivmod>
 800f41c:	4602      	mov	r2, r0
 800f41e:	460b      	mov	r3, r1
 800f420:	4b49      	ldr	r3, [pc, #292]	; (800f548 <UART_SetConfig+0x38c>)
 800f422:	fba3 2302 	umull	r2, r3, r3, r2
 800f426:	095b      	lsrs	r3, r3, #5
 800f428:	011e      	lsls	r6, r3, #4
 800f42a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f42c:	4618      	mov	r0, r3
 800f42e:	f04f 0100 	mov.w	r1, #0
 800f432:	4602      	mov	r2, r0
 800f434:	460b      	mov	r3, r1
 800f436:	1894      	adds	r4, r2, r2
 800f438:	60bc      	str	r4, [r7, #8]
 800f43a:	415b      	adcs	r3, r3
 800f43c:	60fb      	str	r3, [r7, #12]
 800f43e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f442:	1812      	adds	r2, r2, r0
 800f444:	eb41 0303 	adc.w	r3, r1, r3
 800f448:	f04f 0400 	mov.w	r4, #0
 800f44c:	f04f 0500 	mov.w	r5, #0
 800f450:	00dd      	lsls	r5, r3, #3
 800f452:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f456:	00d4      	lsls	r4, r2, #3
 800f458:	4622      	mov	r2, r4
 800f45a:	462b      	mov	r3, r5
 800f45c:	1814      	adds	r4, r2, r0
 800f45e:	64bc      	str	r4, [r7, #72]	; 0x48
 800f460:	414b      	adcs	r3, r1
 800f462:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	4618      	mov	r0, r3
 800f46a:	f04f 0100 	mov.w	r1, #0
 800f46e:	f04f 0200 	mov.w	r2, #0
 800f472:	f04f 0300 	mov.w	r3, #0
 800f476:	008b      	lsls	r3, r1, #2
 800f478:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f47c:	0082      	lsls	r2, r0, #2
 800f47e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800f482:	f7f1 fc11 	bl	8000ca8 <__aeabi_uldivmod>
 800f486:	4602      	mov	r2, r0
 800f488:	460b      	mov	r3, r1
 800f48a:	4b2f      	ldr	r3, [pc, #188]	; (800f548 <UART_SetConfig+0x38c>)
 800f48c:	fba3 1302 	umull	r1, r3, r3, r2
 800f490:	095b      	lsrs	r3, r3, #5
 800f492:	2164      	movs	r1, #100	; 0x64
 800f494:	fb01 f303 	mul.w	r3, r1, r3
 800f498:	1ad3      	subs	r3, r2, r3
 800f49a:	011b      	lsls	r3, r3, #4
 800f49c:	3332      	adds	r3, #50	; 0x32
 800f49e:	4a2a      	ldr	r2, [pc, #168]	; (800f548 <UART_SetConfig+0x38c>)
 800f4a0:	fba2 2303 	umull	r2, r3, r2, r3
 800f4a4:	095b      	lsrs	r3, r3, #5
 800f4a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f4aa:	441e      	add	r6, r3
 800f4ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f04f 0100 	mov.w	r1, #0
 800f4b4:	4602      	mov	r2, r0
 800f4b6:	460b      	mov	r3, r1
 800f4b8:	1894      	adds	r4, r2, r2
 800f4ba:	603c      	str	r4, [r7, #0]
 800f4bc:	415b      	adcs	r3, r3
 800f4be:	607b      	str	r3, [r7, #4]
 800f4c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4c4:	1812      	adds	r2, r2, r0
 800f4c6:	eb41 0303 	adc.w	r3, r1, r3
 800f4ca:	f04f 0400 	mov.w	r4, #0
 800f4ce:	f04f 0500 	mov.w	r5, #0
 800f4d2:	00dd      	lsls	r5, r3, #3
 800f4d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f4d8:	00d4      	lsls	r4, r2, #3
 800f4da:	4622      	mov	r2, r4
 800f4dc:	462b      	mov	r3, r5
 800f4de:	eb12 0a00 	adds.w	sl, r2, r0
 800f4e2:	eb43 0b01 	adc.w	fp, r3, r1
 800f4e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4e8:	685b      	ldr	r3, [r3, #4]
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f04f 0100 	mov.w	r1, #0
 800f4f0:	f04f 0200 	mov.w	r2, #0
 800f4f4:	f04f 0300 	mov.w	r3, #0
 800f4f8:	008b      	lsls	r3, r1, #2
 800f4fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f4fe:	0082      	lsls	r2, r0, #2
 800f500:	4650      	mov	r0, sl
 800f502:	4659      	mov	r1, fp
 800f504:	f7f1 fbd0 	bl	8000ca8 <__aeabi_uldivmod>
 800f508:	4602      	mov	r2, r0
 800f50a:	460b      	mov	r3, r1
 800f50c:	4b0e      	ldr	r3, [pc, #56]	; (800f548 <UART_SetConfig+0x38c>)
 800f50e:	fba3 1302 	umull	r1, r3, r3, r2
 800f512:	095b      	lsrs	r3, r3, #5
 800f514:	2164      	movs	r1, #100	; 0x64
 800f516:	fb01 f303 	mul.w	r3, r1, r3
 800f51a:	1ad3      	subs	r3, r2, r3
 800f51c:	011b      	lsls	r3, r3, #4
 800f51e:	3332      	adds	r3, #50	; 0x32
 800f520:	4a09      	ldr	r2, [pc, #36]	; (800f548 <UART_SetConfig+0x38c>)
 800f522:	fba2 2303 	umull	r2, r3, r2, r3
 800f526:	095b      	lsrs	r3, r3, #5
 800f528:	f003 020f 	and.w	r2, r3, #15
 800f52c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	4432      	add	r2, r6
 800f532:	609a      	str	r2, [r3, #8]
}
 800f534:	bf00      	nop
 800f536:	377c      	adds	r7, #124	; 0x7c
 800f538:	46bd      	mov	sp, r7
 800f53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f53e:	bf00      	nop
 800f540:	40011000 	.word	0x40011000
 800f544:	40011400 	.word	0x40011400
 800f548:	51eb851f 	.word	0x51eb851f

0800f54c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800f550:	4904      	ldr	r1, [pc, #16]	; (800f564 <MX_FATFS_Init+0x18>)
 800f552:	4805      	ldr	r0, [pc, #20]	; (800f568 <MX_FATFS_Init+0x1c>)
 800f554:	f004 fb98 	bl	8013c88 <FATFS_LinkDriver>
 800f558:	4603      	mov	r3, r0
 800f55a:	461a      	mov	r2, r3
 800f55c:	4b03      	ldr	r3, [pc, #12]	; (800f56c <MX_FATFS_Init+0x20>)
 800f55e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f560:	bf00      	nop
 800f562:	bd80      	pop	{r7, pc}
 800f564:	2000d9e0 	.word	0x2000d9e0
 800f568:	20000040 	.word	0x20000040
 800f56c:	2000d9e4 	.word	0x2000d9e4

0800f570 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f570:	b480      	push	{r7}
 800f572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f574:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f576:	4618      	mov	r0, r3
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr

0800f580 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b082      	sub	sp, #8
 800f584:	af00      	add	r7, sp, #0
 800f586:	4603      	mov	r3, r0
 800f588:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize (pdrv);
 800f58a:	79fb      	ldrb	r3, [r7, #7]
 800f58c:	4618      	mov	r0, r3
 800f58e:	f7f4 f813 	bl	80035b8 <SD_disk_initialize>
 800f592:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800f594:	4618      	mov	r0, r3
 800f596:	3708      	adds	r7, #8
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}

0800f59c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b082      	sub	sp, #8
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status (pdrv);
 800f5a6:	79fb      	ldrb	r3, [r7, #7]
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7f4 f8ef 	bl	800378c <SD_disk_status>
 800f5ae:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3708      	adds	r7, #8
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}

0800f5b8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b084      	sub	sp, #16
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	60b9      	str	r1, [r7, #8]
 800f5c0:	607a      	str	r2, [r7, #4]
 800f5c2:	603b      	str	r3, [r7, #0]
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read (pdrv, buff, sector, count);
 800f5c8:	7bf8      	ldrb	r0, [r7, #15]
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	68b9      	ldr	r1, [r7, #8]
 800f5d0:	f7f4 f8f2 	bl	80037b8 <SD_disk_read>
 800f5d4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3710      	adds	r7, #16
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}

0800f5de <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800f5de:	b580      	push	{r7, lr}
 800f5e0:	b084      	sub	sp, #16
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	60b9      	str	r1, [r7, #8]
 800f5e6:	607a      	str	r2, [r7, #4]
 800f5e8:	603b      	str	r3, [r7, #0]
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 800f5ee:	7bf8      	ldrb	r0, [r7, #15]
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	68b9      	ldr	r1, [r7, #8]
 800f5f6:	f7f4 f949 	bl	800388c <SD_disk_write>
 800f5fa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3710      	adds	r7, #16
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b082      	sub	sp, #8
 800f608:	af00      	add	r7, sp, #0
 800f60a:	4603      	mov	r3, r0
 800f60c:	603a      	str	r2, [r7, #0]
 800f60e:	71fb      	strb	r3, [r7, #7]
 800f610:	460b      	mov	r3, r1
 800f612:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl (pdrv, cmd, buff);
 800f614:	79b9      	ldrb	r1, [r7, #6]
 800f616:	79fb      	ldrb	r3, [r7, #7]
 800f618:	683a      	ldr	r2, [r7, #0]
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7f4 f9ba 	bl	8003994 <SD_disk_ioctl>
 800f620:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800f622:	4618      	mov	r0, r3
 800f624:	3708      	adds	r7, #8
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
	...

0800f62c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800f62c:	b5b0      	push	{r4, r5, r7, lr}
 800f62e:	b08e      	sub	sp, #56	; 0x38
 800f630:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800f632:	4bac      	ldr	r3, [pc, #688]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f634:	22c0      	movs	r2, #192	; 0xc0
 800f636:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800f638:	4baa      	ldr	r3, [pc, #680]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f63a:	22a8      	movs	r2, #168	; 0xa8
 800f63c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 800f63e:	4ba9      	ldr	r3, [pc, #676]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f640:	2212      	movs	r2, #18
 800f642:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 27;
 800f644:	4ba7      	ldr	r3, [pc, #668]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f646:	221b      	movs	r2, #27
 800f648:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800f64a:	4ba7      	ldr	r3, [pc, #668]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f64c:	22ff      	movs	r2, #255	; 0xff
 800f64e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800f650:	4ba5      	ldr	r3, [pc, #660]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f652:	22ff      	movs	r2, #255	; 0xff
 800f654:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800f656:	4ba4      	ldr	r3, [pc, #656]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f658:	22ff      	movs	r2, #255	; 0xff
 800f65a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800f65c:	4ba2      	ldr	r3, [pc, #648]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f65e:	2200      	movs	r2, #0
 800f660:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800f662:	4ba2      	ldr	r3, [pc, #648]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f664:	22c0      	movs	r2, #192	; 0xc0
 800f666:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800f668:	4ba0      	ldr	r3, [pc, #640]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f66a:	22a8      	movs	r2, #168	; 0xa8
 800f66c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 800f66e:	4b9f      	ldr	r3, [pc, #636]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f670:	2212      	movs	r2, #18
 800f672:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800f674:	4b9d      	ldr	r3, [pc, #628]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f676:	2201      	movs	r2, #1
 800f678:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
  IP_ADDRESS[0] = SetSettings.ip_addr0;
 800f67a:	4b9d      	ldr	r3, [pc, #628]	; (800f8f0 <MX_LWIP_Init+0x2c4>)
 800f67c:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 800f680:	b2da      	uxtb	r2, r3
 800f682:	4b98      	ldr	r3, [pc, #608]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f684:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = SetSettings.ip_addr1;
 800f686:	4b9a      	ldr	r3, [pc, #616]	; (800f8f0 <MX_LWIP_Init+0x2c4>)
 800f688:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	; 0xae
 800f68c:	b2da      	uxtb	r2, r3
 800f68e:	4b95      	ldr	r3, [pc, #596]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f690:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = SetSettings.ip_addr2;
 800f692:	4b97      	ldr	r3, [pc, #604]	; (800f8f0 <MX_LWIP_Init+0x2c4>)
 800f694:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
 800f698:	b2da      	uxtb	r2, r3
 800f69a:	4b92      	ldr	r3, [pc, #584]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f69c:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = SetSettings.ip_addr3;
 800f69e:	4b94      	ldr	r3, [pc, #592]	; (800f8f0 <MX_LWIP_Init+0x2c4>)
 800f6a0:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 800f6a4:	b2da      	uxtb	r2, r3
 800f6a6:	4b8f      	ldr	r3, [pc, #572]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f6a8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = SetSettings.sb_mask0;
 800f6aa:	4b91      	ldr	r3, [pc, #580]	; (800f8f0 <MX_LWIP_Init+0x2c4>)
 800f6ac:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 800f6b0:	b2da      	uxtb	r2, r3
 800f6b2:	4b8d      	ldr	r3, [pc, #564]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f6b4:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = SetSettings.sb_mask1;
 800f6b6:	4b8e      	ldr	r3, [pc, #568]	; (800f8f0 <MX_LWIP_Init+0x2c4>)
 800f6b8:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 800f6bc:	b2da      	uxtb	r2, r3
 800f6be:	4b8a      	ldr	r3, [pc, #552]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f6c0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = SetSettings.sb_mask2;
 800f6c2:	4b8b      	ldr	r3, [pc, #556]	; (800f8f0 <MX_LWIP_Init+0x2c4>)
 800f6c4:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 800f6c8:	b2da      	uxtb	r2, r3
 800f6ca:	4b87      	ldr	r3, [pc, #540]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f6cc:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = SetSettings.sb_mask3;
 800f6ce:	4b88      	ldr	r3, [pc, #544]	; (800f8f0 <MX_LWIP_Init+0x2c4>)
 800f6d0:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800f6d4:	b2da      	uxtb	r2, r3
 800f6d6:	4b84      	ldr	r3, [pc, #528]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f6d8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = SetSettings.gateway0;
 800f6da:	4b85      	ldr	r3, [pc, #532]	; (800f8f0 <MX_LWIP_Init+0x2c4>)
 800f6dc:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 800f6e0:	b2da      	uxtb	r2, r3
 800f6e2:	4b82      	ldr	r3, [pc, #520]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f6e4:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = SetSettings.gateway1;
 800f6e6:	4b82      	ldr	r3, [pc, #520]	; (800f8f0 <MX_LWIP_Init+0x2c4>)
 800f6e8:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 800f6ec:	b2da      	uxtb	r2, r3
 800f6ee:	4b7f      	ldr	r3, [pc, #508]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f6f0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = SetSettings.gateway2;
 800f6f2:	4b7f      	ldr	r3, [pc, #508]	; (800f8f0 <MX_LWIP_Init+0x2c4>)
 800f6f4:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 800f6f8:	b2da      	uxtb	r2, r3
 800f6fa:	4b7c      	ldr	r3, [pc, #496]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f6fc:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = SetSettings.gateway3;
 800f6fe:	4b7c      	ldr	r3, [pc, #496]	; (800f8f0 <MX_LWIP_Init+0x2c4>)
 800f700:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 800f704:	b2da      	uxtb	r2, r3
 800f706:	4b79      	ldr	r3, [pc, #484]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f708:	70da      	strb	r2, [r3, #3]
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800f70a:	2100      	movs	r1, #0
 800f70c:	2000      	movs	r0, #0
 800f70e:	f007 fdd5 	bl	80172bc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800f712:	4b74      	ldr	r3, [pc, #464]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	061a      	lsls	r2, r3, #24
 800f718:	4b72      	ldr	r3, [pc, #456]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f71a:	785b      	ldrb	r3, [r3, #1]
 800f71c:	041b      	lsls	r3, r3, #16
 800f71e:	431a      	orrs	r2, r3
 800f720:	4b70      	ldr	r3, [pc, #448]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f722:	789b      	ldrb	r3, [r3, #2]
 800f724:	021b      	lsls	r3, r3, #8
 800f726:	4313      	orrs	r3, r2
 800f728:	4a6e      	ldr	r2, [pc, #440]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f72a:	78d2      	ldrb	r2, [r2, #3]
 800f72c:	4313      	orrs	r3, r2
 800f72e:	061a      	lsls	r2, r3, #24
 800f730:	4b6c      	ldr	r3, [pc, #432]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	0619      	lsls	r1, r3, #24
 800f736:	4b6b      	ldr	r3, [pc, #428]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f738:	785b      	ldrb	r3, [r3, #1]
 800f73a:	041b      	lsls	r3, r3, #16
 800f73c:	4319      	orrs	r1, r3
 800f73e:	4b69      	ldr	r3, [pc, #420]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f740:	789b      	ldrb	r3, [r3, #2]
 800f742:	021b      	lsls	r3, r3, #8
 800f744:	430b      	orrs	r3, r1
 800f746:	4967      	ldr	r1, [pc, #412]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f748:	78c9      	ldrb	r1, [r1, #3]
 800f74a:	430b      	orrs	r3, r1
 800f74c:	021b      	lsls	r3, r3, #8
 800f74e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f752:	431a      	orrs	r2, r3
 800f754:	4b63      	ldr	r3, [pc, #396]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	0619      	lsls	r1, r3, #24
 800f75a:	4b62      	ldr	r3, [pc, #392]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f75c:	785b      	ldrb	r3, [r3, #1]
 800f75e:	041b      	lsls	r3, r3, #16
 800f760:	4319      	orrs	r1, r3
 800f762:	4b60      	ldr	r3, [pc, #384]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f764:	789b      	ldrb	r3, [r3, #2]
 800f766:	021b      	lsls	r3, r3, #8
 800f768:	430b      	orrs	r3, r1
 800f76a:	495e      	ldr	r1, [pc, #376]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f76c:	78c9      	ldrb	r1, [r1, #3]
 800f76e:	430b      	orrs	r3, r1
 800f770:	0a1b      	lsrs	r3, r3, #8
 800f772:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f776:	431a      	orrs	r2, r3
 800f778:	4b5a      	ldr	r3, [pc, #360]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	0619      	lsls	r1, r3, #24
 800f77e:	4b59      	ldr	r3, [pc, #356]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f780:	785b      	ldrb	r3, [r3, #1]
 800f782:	041b      	lsls	r3, r3, #16
 800f784:	4319      	orrs	r1, r3
 800f786:	4b57      	ldr	r3, [pc, #348]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f788:	789b      	ldrb	r3, [r3, #2]
 800f78a:	021b      	lsls	r3, r3, #8
 800f78c:	430b      	orrs	r3, r1
 800f78e:	4955      	ldr	r1, [pc, #340]	; (800f8e4 <MX_LWIP_Init+0x2b8>)
 800f790:	78c9      	ldrb	r1, [r1, #3]
 800f792:	430b      	orrs	r3, r1
 800f794:	0e1b      	lsrs	r3, r3, #24
 800f796:	4313      	orrs	r3, r2
 800f798:	4a56      	ldr	r2, [pc, #344]	; (800f8f4 <MX_LWIP_Init+0x2c8>)
 800f79a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800f79c:	4b52      	ldr	r3, [pc, #328]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f79e:	781b      	ldrb	r3, [r3, #0]
 800f7a0:	061a      	lsls	r2, r3, #24
 800f7a2:	4b51      	ldr	r3, [pc, #324]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f7a4:	785b      	ldrb	r3, [r3, #1]
 800f7a6:	041b      	lsls	r3, r3, #16
 800f7a8:	431a      	orrs	r2, r3
 800f7aa:	4b4f      	ldr	r3, [pc, #316]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f7ac:	789b      	ldrb	r3, [r3, #2]
 800f7ae:	021b      	lsls	r3, r3, #8
 800f7b0:	4313      	orrs	r3, r2
 800f7b2:	4a4d      	ldr	r2, [pc, #308]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f7b4:	78d2      	ldrb	r2, [r2, #3]
 800f7b6:	4313      	orrs	r3, r2
 800f7b8:	061a      	lsls	r2, r3, #24
 800f7ba:	4b4b      	ldr	r3, [pc, #300]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	0619      	lsls	r1, r3, #24
 800f7c0:	4b49      	ldr	r3, [pc, #292]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f7c2:	785b      	ldrb	r3, [r3, #1]
 800f7c4:	041b      	lsls	r3, r3, #16
 800f7c6:	4319      	orrs	r1, r3
 800f7c8:	4b47      	ldr	r3, [pc, #284]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f7ca:	789b      	ldrb	r3, [r3, #2]
 800f7cc:	021b      	lsls	r3, r3, #8
 800f7ce:	430b      	orrs	r3, r1
 800f7d0:	4945      	ldr	r1, [pc, #276]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f7d2:	78c9      	ldrb	r1, [r1, #3]
 800f7d4:	430b      	orrs	r3, r1
 800f7d6:	021b      	lsls	r3, r3, #8
 800f7d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f7dc:	431a      	orrs	r2, r3
 800f7de:	4b42      	ldr	r3, [pc, #264]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	0619      	lsls	r1, r3, #24
 800f7e4:	4b40      	ldr	r3, [pc, #256]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f7e6:	785b      	ldrb	r3, [r3, #1]
 800f7e8:	041b      	lsls	r3, r3, #16
 800f7ea:	4319      	orrs	r1, r3
 800f7ec:	4b3e      	ldr	r3, [pc, #248]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f7ee:	789b      	ldrb	r3, [r3, #2]
 800f7f0:	021b      	lsls	r3, r3, #8
 800f7f2:	430b      	orrs	r3, r1
 800f7f4:	493c      	ldr	r1, [pc, #240]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f7f6:	78c9      	ldrb	r1, [r1, #3]
 800f7f8:	430b      	orrs	r3, r1
 800f7fa:	0a1b      	lsrs	r3, r3, #8
 800f7fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f800:	431a      	orrs	r2, r3
 800f802:	4b39      	ldr	r3, [pc, #228]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f804:	781b      	ldrb	r3, [r3, #0]
 800f806:	0619      	lsls	r1, r3, #24
 800f808:	4b37      	ldr	r3, [pc, #220]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f80a:	785b      	ldrb	r3, [r3, #1]
 800f80c:	041b      	lsls	r3, r3, #16
 800f80e:	4319      	orrs	r1, r3
 800f810:	4b35      	ldr	r3, [pc, #212]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f812:	789b      	ldrb	r3, [r3, #2]
 800f814:	021b      	lsls	r3, r3, #8
 800f816:	430b      	orrs	r3, r1
 800f818:	4933      	ldr	r1, [pc, #204]	; (800f8e8 <MX_LWIP_Init+0x2bc>)
 800f81a:	78c9      	ldrb	r1, [r1, #3]
 800f81c:	430b      	orrs	r3, r1
 800f81e:	0e1b      	lsrs	r3, r3, #24
 800f820:	4313      	orrs	r3, r2
 800f822:	4a35      	ldr	r2, [pc, #212]	; (800f8f8 <MX_LWIP_Init+0x2cc>)
 800f824:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800f826:	4b31      	ldr	r3, [pc, #196]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f828:	781b      	ldrb	r3, [r3, #0]
 800f82a:	061a      	lsls	r2, r3, #24
 800f82c:	4b2f      	ldr	r3, [pc, #188]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f82e:	785b      	ldrb	r3, [r3, #1]
 800f830:	041b      	lsls	r3, r3, #16
 800f832:	431a      	orrs	r2, r3
 800f834:	4b2d      	ldr	r3, [pc, #180]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f836:	789b      	ldrb	r3, [r3, #2]
 800f838:	021b      	lsls	r3, r3, #8
 800f83a:	4313      	orrs	r3, r2
 800f83c:	4a2b      	ldr	r2, [pc, #172]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f83e:	78d2      	ldrb	r2, [r2, #3]
 800f840:	4313      	orrs	r3, r2
 800f842:	061a      	lsls	r2, r3, #24
 800f844:	4b29      	ldr	r3, [pc, #164]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f846:	781b      	ldrb	r3, [r3, #0]
 800f848:	0619      	lsls	r1, r3, #24
 800f84a:	4b28      	ldr	r3, [pc, #160]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f84c:	785b      	ldrb	r3, [r3, #1]
 800f84e:	041b      	lsls	r3, r3, #16
 800f850:	4319      	orrs	r1, r3
 800f852:	4b26      	ldr	r3, [pc, #152]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f854:	789b      	ldrb	r3, [r3, #2]
 800f856:	021b      	lsls	r3, r3, #8
 800f858:	430b      	orrs	r3, r1
 800f85a:	4924      	ldr	r1, [pc, #144]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f85c:	78c9      	ldrb	r1, [r1, #3]
 800f85e:	430b      	orrs	r3, r1
 800f860:	021b      	lsls	r3, r3, #8
 800f862:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f866:	431a      	orrs	r2, r3
 800f868:	4b20      	ldr	r3, [pc, #128]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	0619      	lsls	r1, r3, #24
 800f86e:	4b1f      	ldr	r3, [pc, #124]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f870:	785b      	ldrb	r3, [r3, #1]
 800f872:	041b      	lsls	r3, r3, #16
 800f874:	4319      	orrs	r1, r3
 800f876:	4b1d      	ldr	r3, [pc, #116]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f878:	789b      	ldrb	r3, [r3, #2]
 800f87a:	021b      	lsls	r3, r3, #8
 800f87c:	430b      	orrs	r3, r1
 800f87e:	491b      	ldr	r1, [pc, #108]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f880:	78c9      	ldrb	r1, [r1, #3]
 800f882:	430b      	orrs	r3, r1
 800f884:	0a1b      	lsrs	r3, r3, #8
 800f886:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f88a:	431a      	orrs	r2, r3
 800f88c:	4b17      	ldr	r3, [pc, #92]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	0619      	lsls	r1, r3, #24
 800f892:	4b16      	ldr	r3, [pc, #88]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f894:	785b      	ldrb	r3, [r3, #1]
 800f896:	041b      	lsls	r3, r3, #16
 800f898:	4319      	orrs	r1, r3
 800f89a:	4b14      	ldr	r3, [pc, #80]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f89c:	789b      	ldrb	r3, [r3, #2]
 800f89e:	021b      	lsls	r3, r3, #8
 800f8a0:	430b      	orrs	r3, r1
 800f8a2:	4912      	ldr	r1, [pc, #72]	; (800f8ec <MX_LWIP_Init+0x2c0>)
 800f8a4:	78c9      	ldrb	r1, [r1, #3]
 800f8a6:	430b      	orrs	r3, r1
 800f8a8:	0e1b      	lsrs	r3, r3, #24
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	4a13      	ldr	r2, [pc, #76]	; (800f8fc <MX_LWIP_Init+0x2d0>)
 800f8ae:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800f8b0:	4b13      	ldr	r3, [pc, #76]	; (800f900 <MX_LWIP_Init+0x2d4>)
 800f8b2:	9302      	str	r3, [sp, #8]
 800f8b4:	4b13      	ldr	r3, [pc, #76]	; (800f904 <MX_LWIP_Init+0x2d8>)
 800f8b6:	9301      	str	r3, [sp, #4]
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	9300      	str	r3, [sp, #0]
 800f8bc:	4b0f      	ldr	r3, [pc, #60]	; (800f8fc <MX_LWIP_Init+0x2d0>)
 800f8be:	4a0e      	ldr	r2, [pc, #56]	; (800f8f8 <MX_LWIP_Init+0x2cc>)
 800f8c0:	490c      	ldr	r1, [pc, #48]	; (800f8f4 <MX_LWIP_Init+0x2c8>)
 800f8c2:	4811      	ldr	r0, [pc, #68]	; (800f908 <MX_LWIP_Init+0x2dc>)
 800f8c4:	f00b ff2e 	bl	801b724 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800f8c8:	480f      	ldr	r0, [pc, #60]	; (800f908 <MX_LWIP_Init+0x2dc>)
 800f8ca:	f00c f8dd 	bl	801ba88 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800f8ce:	4b0e      	ldr	r3, [pc, #56]	; (800f908 <MX_LWIP_Init+0x2dc>)
 800f8d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8d4:	089b      	lsrs	r3, r3, #2
 800f8d6:	f003 0301 	and.w	r3, r3, #1
 800f8da:	b2db      	uxtb	r3, r3
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d019      	beq.n	800f914 <MX_LWIP_Init+0x2e8>
 800f8e0:	e014      	b.n	800f90c <MX_LWIP_Init+0x2e0>
 800f8e2:	bf00      	nop
 800f8e4:	2000faa0 	.word	0x2000faa0
 800f8e8:	2000fa9c 	.word	0x2000fa9c
 800f8ec:	2000fa60 	.word	0x2000fa60
 800f8f0:	20005b90 	.word	0x20005b90
 800f8f4:	2000fa98 	.word	0x2000fa98
 800f8f8:	2000faa4 	.word	0x2000faa4
 800f8fc:	2000faa8 	.word	0x2000faa8
 800f900:	080171f9 	.word	0x080171f9
 800f904:	0800ffb5 	.word	0x0800ffb5
 800f908:	2000fa64 	.word	0x2000fa64
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800f90c:	4818      	ldr	r0, [pc, #96]	; (800f970 <MX_LWIP_Init+0x344>)
 800f90e:	f00c f8cb 	bl	801baa8 <netif_set_up>
 800f912:	e002      	b.n	800f91a <MX_LWIP_Init+0x2ee>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800f914:	4816      	ldr	r0, [pc, #88]	; (800f970 <MX_LWIP_Init+0x344>)
 800f916:	f00c f933 	bl	801bb80 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800f91a:	4916      	ldr	r1, [pc, #88]	; (800f974 <MX_LWIP_Init+0x348>)
 800f91c:	4814      	ldr	r0, [pc, #80]	; (800f970 <MX_LWIP_Init+0x344>)
 800f91e:	f00c f9c5 	bl	801bcac <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800f922:	2300      	movs	r3, #0
 800f924:	623b      	str	r3, [r7, #32]
 800f926:	2300      	movs	r3, #0
 800f928:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800f92a:	f107 0320 	add.w	r3, r7, #32
 800f92e:	2101      	movs	r1, #1
 800f930:	4618      	mov	r0, r3
 800f932:	f004 fc09 	bl	8014148 <osSemaphoreCreate>
 800f936:	4603      	mov	r3, r0
 800f938:	4a0f      	ldr	r2, [pc, #60]	; (800f978 <MX_LWIP_Init+0x34c>)
 800f93a:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800f93c:	4b0f      	ldr	r3, [pc, #60]	; (800f97c <MX_LWIP_Init+0x350>)
 800f93e:	4a0c      	ldr	r2, [pc, #48]	; (800f970 <MX_LWIP_Init+0x344>)
 800f940:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800f942:	4b0d      	ldr	r3, [pc, #52]	; (800f978 <MX_LWIP_Init+0x34c>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	4a0d      	ldr	r2, [pc, #52]	; (800f97c <MX_LWIP_Init+0x350>)
 800f948:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800f94a:	4b0d      	ldr	r3, [pc, #52]	; (800f980 <MX_LWIP_Init+0x354>)
 800f94c:	1d3c      	adds	r4, r7, #4
 800f94e:	461d      	mov	r5, r3
 800f950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f954:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f958:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 800f95c:	1d3b      	adds	r3, r7, #4
 800f95e:	4907      	ldr	r1, [pc, #28]	; (800f97c <MX_LWIP_Init+0x350>)
 800f960:	4618      	mov	r0, r3
 800f962:	f004 faf4 	bl	8013f4e <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800f966:	bf00      	nop
 800f968:	3728      	adds	r7, #40	; 0x28
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bdb0      	pop	{r4, r5, r7, pc}
 800f96e:	bf00      	nop
 800f970:	2000fa64 	.word	0x2000fa64
 800f974:	08010099 	.word	0x08010099
 800f978:	20001784 	.word	0x20001784
 800f97c:	2000fa58 	.word	0x2000fa58
 800f980:	0802c9a0 	.word	0x0802c9a0

0800f984 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b08e      	sub	sp, #56	; 0x38
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f98c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f990:	2200      	movs	r2, #0
 800f992:	601a      	str	r2, [r3, #0]
 800f994:	605a      	str	r2, [r3, #4]
 800f996:	609a      	str	r2, [r3, #8]
 800f998:	60da      	str	r2, [r3, #12]
 800f99a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4a4a      	ldr	r2, [pc, #296]	; (800facc <HAL_ETH_MspInit+0x148>)
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	f040 808d 	bne.w	800fac2 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	623b      	str	r3, [r7, #32]
 800f9ac:	4b48      	ldr	r3, [pc, #288]	; (800fad0 <HAL_ETH_MspInit+0x14c>)
 800f9ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9b0:	4a47      	ldr	r2, [pc, #284]	; (800fad0 <HAL_ETH_MspInit+0x14c>)
 800f9b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f9b6:	6313      	str	r3, [r2, #48]	; 0x30
 800f9b8:	4b45      	ldr	r3, [pc, #276]	; (800fad0 <HAL_ETH_MspInit+0x14c>)
 800f9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9c0:	623b      	str	r3, [r7, #32]
 800f9c2:	6a3b      	ldr	r3, [r7, #32]
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	61fb      	str	r3, [r7, #28]
 800f9c8:	4b41      	ldr	r3, [pc, #260]	; (800fad0 <HAL_ETH_MspInit+0x14c>)
 800f9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9cc:	4a40      	ldr	r2, [pc, #256]	; (800fad0 <HAL_ETH_MspInit+0x14c>)
 800f9ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f9d2:	6313      	str	r3, [r2, #48]	; 0x30
 800f9d4:	4b3e      	ldr	r3, [pc, #248]	; (800fad0 <HAL_ETH_MspInit+0x14c>)
 800f9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f9dc:	61fb      	str	r3, [r7, #28]
 800f9de:	69fb      	ldr	r3, [r7, #28]
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	61bb      	str	r3, [r7, #24]
 800f9e4:	4b3a      	ldr	r3, [pc, #232]	; (800fad0 <HAL_ETH_MspInit+0x14c>)
 800f9e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9e8:	4a39      	ldr	r2, [pc, #228]	; (800fad0 <HAL_ETH_MspInit+0x14c>)
 800f9ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f9ee:	6313      	str	r3, [r2, #48]	; 0x30
 800f9f0:	4b37      	ldr	r3, [pc, #220]	; (800fad0 <HAL_ETH_MspInit+0x14c>)
 800f9f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f9f8:	61bb      	str	r3, [r7, #24]
 800f9fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	617b      	str	r3, [r7, #20]
 800fa00:	4b33      	ldr	r3, [pc, #204]	; (800fad0 <HAL_ETH_MspInit+0x14c>)
 800fa02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa04:	4a32      	ldr	r2, [pc, #200]	; (800fad0 <HAL_ETH_MspInit+0x14c>)
 800fa06:	f043 0304 	orr.w	r3, r3, #4
 800fa0a:	6313      	str	r3, [r2, #48]	; 0x30
 800fa0c:	4b30      	ldr	r3, [pc, #192]	; (800fad0 <HAL_ETH_MspInit+0x14c>)
 800fa0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa10:	f003 0304 	and.w	r3, r3, #4
 800fa14:	617b      	str	r3, [r7, #20]
 800fa16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fa18:	2300      	movs	r3, #0
 800fa1a:	613b      	str	r3, [r7, #16]
 800fa1c:	4b2c      	ldr	r3, [pc, #176]	; (800fad0 <HAL_ETH_MspInit+0x14c>)
 800fa1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa20:	4a2b      	ldr	r2, [pc, #172]	; (800fad0 <HAL_ETH_MspInit+0x14c>)
 800fa22:	f043 0301 	orr.w	r3, r3, #1
 800fa26:	6313      	str	r3, [r2, #48]	; 0x30
 800fa28:	4b29      	ldr	r3, [pc, #164]	; (800fad0 <HAL_ETH_MspInit+0x14c>)
 800fa2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa2c:	f003 0301 	and.w	r3, r3, #1
 800fa30:	613b      	str	r3, [r7, #16]
 800fa32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fa34:	2300      	movs	r3, #0
 800fa36:	60fb      	str	r3, [r7, #12]
 800fa38:	4b25      	ldr	r3, [pc, #148]	; (800fad0 <HAL_ETH_MspInit+0x14c>)
 800fa3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa3c:	4a24      	ldr	r2, [pc, #144]	; (800fad0 <HAL_ETH_MspInit+0x14c>)
 800fa3e:	f043 0302 	orr.w	r3, r3, #2
 800fa42:	6313      	str	r3, [r2, #48]	; 0x30
 800fa44:	4b22      	ldr	r3, [pc, #136]	; (800fad0 <HAL_ETH_MspInit+0x14c>)
 800fa46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa48:	f003 0302 	and.w	r3, r3, #2
 800fa4c:	60fb      	str	r3, [r7, #12]
 800fa4e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800fa50:	2332      	movs	r3, #50	; 0x32
 800fa52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa54:	2302      	movs	r3, #2
 800fa56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fa5c:	2303      	movs	r3, #3
 800fa5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fa60:	230b      	movs	r3, #11
 800fa62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fa64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa68:	4619      	mov	r1, r3
 800fa6a:	481a      	ldr	r0, [pc, #104]	; (800fad4 <HAL_ETH_MspInit+0x150>)
 800fa6c:	f7fc ffcc 	bl	800ca08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800fa70:	2386      	movs	r3, #134	; 0x86
 800fa72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa74:	2302      	movs	r3, #2
 800fa76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fa7c:	2303      	movs	r3, #3
 800fa7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fa80:	230b      	movs	r3, #11
 800fa82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fa84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa88:	4619      	mov	r1, r3
 800fa8a:	4813      	ldr	r0, [pc, #76]	; (800fad8 <HAL_ETH_MspInit+0x154>)
 800fa8c:	f7fc ffbc 	bl	800ca08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800fa90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800fa94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa96:	2302      	movs	r3, #2
 800fa98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fa9e:	2303      	movs	r3, #3
 800faa0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800faa2:	230b      	movs	r3, #11
 800faa4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800faa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800faaa:	4619      	mov	r1, r3
 800faac:	480b      	ldr	r0, [pc, #44]	; (800fadc <HAL_ETH_MspInit+0x158>)
 800faae:	f7fc ffab 	bl	800ca08 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800fab2:	2200      	movs	r2, #0
 800fab4:	2105      	movs	r1, #5
 800fab6:	203d      	movs	r0, #61	; 0x3d
 800fab8:	f7fb fdd6 	bl	800b668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800fabc:	203d      	movs	r0, #61	; 0x3d
 800fabe:	f7fb fdef 	bl	800b6a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800fac2:	bf00      	nop
 800fac4:	3738      	adds	r7, #56	; 0x38
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	40028000 	.word	0x40028000
 800fad0:	40023800 	.word	0x40023800
 800fad4:	40020800 	.word	0x40020800
 800fad8:	40020000 	.word	0x40020000
 800fadc:	40020400 	.word	0x40020400

0800fae0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800fae8:	4b04      	ldr	r3, [pc, #16]	; (800fafc <HAL_ETH_RxCpltCallback+0x1c>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	4618      	mov	r0, r3
 800faee:	f004 fbab 	bl	8014248 <osSemaphoreRelease>
}
 800faf2:	bf00      	nop
 800faf4:	3708      	adds	r7, #8
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	20001788 	.word	0x20001788

0800fb00 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800fb00:	b5b0      	push	{r4, r5, r7, lr}
 800fb02:	b090      	sub	sp, #64	; 0x40
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800fb0c:	4b60      	ldr	r3, [pc, #384]	; (800fc90 <low_level_init+0x190>)
 800fb0e:	4a61      	ldr	r2, [pc, #388]	; (800fc94 <low_level_init+0x194>)
 800fb10:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800fb12:	4b5f      	ldr	r3, [pc, #380]	; (800fc90 <low_level_init+0x190>)
 800fb14:	2201      	movs	r2, #1
 800fb16:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800fb18:	4b5d      	ldr	r3, [pc, #372]	; (800fc90 <low_level_init+0x190>)
 800fb1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800fb1e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800fb20:	4b5b      	ldr	r3, [pc, #364]	; (800fc90 <low_level_init+0x190>)
 800fb22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fb26:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800fb28:	4b59      	ldr	r3, [pc, #356]	; (800fc90 <low_level_init+0x190>)
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0xDC;
 800fb2e:	23dc      	movs	r3, #220	; 0xdc
 800fb30:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x8C;
 800fb34:	238c      	movs	r3, #140	; 0x8c
 800fb36:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0x7C;
 800fb3a:	237c      	movs	r3, #124	; 0x7c
 800fb3c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x30;
 800fb40:	2330      	movs	r3, #48	; 0x30
 800fb42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x34;
 800fb46:	2334      	movs	r3, #52	; 0x34
 800fb48:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x6F;
 800fb4c:	236f      	movs	r3, #111	; 0x6f
 800fb4e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800fb52:	4a4f      	ldr	r2, [pc, #316]	; (800fc90 <low_level_init+0x190>)
 800fb54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fb58:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800fb5a:	4b4d      	ldr	r3, [pc, #308]	; (800fc90 <low_level_init+0x190>)
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800fb60:	4b4b      	ldr	r3, [pc, #300]	; (800fc90 <low_level_init+0x190>)
 800fb62:	2200      	movs	r2, #0
 800fb64:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800fb66:	4b4a      	ldr	r3, [pc, #296]	; (800fc90 <low_level_init+0x190>)
 800fb68:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800fb6c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800fb6e:	4848      	ldr	r0, [pc, #288]	; (800fc90 <low_level_init+0x190>)
 800fb70:	f7fb fda4 	bl	800b6bc <HAL_ETH_Init>
 800fb74:	4603      	mov	r3, r0
 800fb76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800fb7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d108      	bne.n	800fb94 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb88:	f043 0304 	orr.w	r3, r3, #4
 800fb8c:	b2da      	uxtb	r2, r3
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800fb94:	2304      	movs	r3, #4
 800fb96:	4a40      	ldr	r2, [pc, #256]	; (800fc98 <low_level_init+0x198>)
 800fb98:	4940      	ldr	r1, [pc, #256]	; (800fc9c <low_level_init+0x19c>)
 800fb9a:	483d      	ldr	r0, [pc, #244]	; (800fc90 <low_level_init+0x190>)
 800fb9c:	f7fb ff2a 	bl	800b9f4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800fba0:	2304      	movs	r3, #4
 800fba2:	4a3f      	ldr	r2, [pc, #252]	; (800fca0 <low_level_init+0x1a0>)
 800fba4:	493f      	ldr	r1, [pc, #252]	; (800fca4 <low_level_init+0x1a4>)
 800fba6:	483a      	ldr	r0, [pc, #232]	; (800fc90 <low_level_init+0x190>)
 800fba8:	f7fb ff8d 	bl	800bac6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2206      	movs	r2, #6
 800fbb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800fbb4:	4b36      	ldr	r3, [pc, #216]	; (800fc90 <low_level_init+0x190>)
 800fbb6:	695b      	ldr	r3, [r3, #20]
 800fbb8:	781a      	ldrb	r2, [r3, #0]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800fbc0:	4b33      	ldr	r3, [pc, #204]	; (800fc90 <low_level_init+0x190>)
 800fbc2:	695b      	ldr	r3, [r3, #20]
 800fbc4:	785a      	ldrb	r2, [r3, #1]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800fbcc:	4b30      	ldr	r3, [pc, #192]	; (800fc90 <low_level_init+0x190>)
 800fbce:	695b      	ldr	r3, [r3, #20]
 800fbd0:	789a      	ldrb	r2, [r3, #2]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800fbd8:	4b2d      	ldr	r3, [pc, #180]	; (800fc90 <low_level_init+0x190>)
 800fbda:	695b      	ldr	r3, [r3, #20]
 800fbdc:	78da      	ldrb	r2, [r3, #3]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800fbe4:	4b2a      	ldr	r3, [pc, #168]	; (800fc90 <low_level_init+0x190>)
 800fbe6:	695b      	ldr	r3, [r3, #20]
 800fbe8:	791a      	ldrb	r2, [r3, #4]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800fbf0:	4b27      	ldr	r3, [pc, #156]	; (800fc90 <low_level_init+0x190>)
 800fbf2:	695b      	ldr	r3, [r3, #20]
 800fbf4:	795a      	ldrb	r2, [r3, #5]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800fc02:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc0a:	f043 030a 	orr.w	r3, r3, #10
 800fc0e:	b2da      	uxtb	r2, r3
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800fc16:	2300      	movs	r3, #0
 800fc18:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800fc1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fc22:	2101      	movs	r1, #1
 800fc24:	4618      	mov	r0, r3
 800fc26:	f004 fa8f 	bl	8014148 <osSemaphoreCreate>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	4a1e      	ldr	r2, [pc, #120]	; (800fca8 <low_level_init+0x1a8>)
 800fc2e:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800fc30:	4b1e      	ldr	r3, [pc, #120]	; (800fcac <low_level_init+0x1ac>)
 800fc32:	f107 040c 	add.w	r4, r7, #12
 800fc36:	461d      	mov	r5, r3
 800fc38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fc40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800fc44:	f107 030c 	add.w	r3, r7, #12
 800fc48:	6879      	ldr	r1, [r7, #4]
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f004 f97f 	bl	8013f4e <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800fc50:	480f      	ldr	r0, [pc, #60]	; (800fc90 <low_level_init+0x190>)
 800fc52:	f7fc fa60 	bl	800c116 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800fc56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	211d      	movs	r1, #29
 800fc5e:	480c      	ldr	r0, [pc, #48]	; (800fc90 <low_level_init+0x190>)
 800fc60:	f7fc f98b 	bl	800bf7a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800fc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc66:	f043 030b 	orr.w	r3, r3, #11
 800fc6a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800fc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc6e:	461a      	mov	r2, r3
 800fc70:	211d      	movs	r1, #29
 800fc72:	4807      	ldr	r0, [pc, #28]	; (800fc90 <low_level_init+0x190>)
 800fc74:	f7fc f9e9 	bl	800c04a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800fc78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	211d      	movs	r1, #29
 800fc80:	4803      	ldr	r0, [pc, #12]	; (800fc90 <low_level_init+0x190>)
 800fc82:	f7fc f97a 	bl	800bf7a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800fc86:	bf00      	nop
 800fc88:	3740      	adds	r7, #64	; 0x40
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bdb0      	pop	{r4, r5, r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	2001137c 	.word	0x2001137c
 800fc94:	40028000 	.word	0x40028000
 800fc98:	200113c4 	.word	0x200113c4
 800fc9c:	2000faac 	.word	0x2000faac
 800fca0:	2000fb2c 	.word	0x2000fb2c
 800fca4:	200112fc 	.word	0x200112fc
 800fca8:	20001788 	.word	0x20001788
 800fcac:	0802c9c4 	.word	0x0802c9c4

0800fcb0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b08a      	sub	sp, #40	; 0x28
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800fcba:	4b4b      	ldr	r3, [pc, #300]	; (800fde8 <low_level_output+0x138>)
 800fcbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcbe:	689b      	ldr	r3, [r3, #8]
 800fcc0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800fcca:	2300      	movs	r3, #0
 800fccc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800fcd2:	4b45      	ldr	r3, [pc, #276]	; (800fde8 <low_level_output+0x138>)
 800fcd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcd6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800fcd8:	2300      	movs	r3, #0
 800fcda:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	623b      	str	r3, [r7, #32]
 800fce0:	e05a      	b.n	800fd98 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800fce2:	69bb      	ldr	r3, [r7, #24]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	da03      	bge.n	800fcf2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800fcea:	23f8      	movs	r3, #248	; 0xf8
 800fcec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800fcf0:	e05c      	b.n	800fdac <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800fcf2:	6a3b      	ldr	r3, [r7, #32]
 800fcf4:	895b      	ldrh	r3, [r3, #10]
 800fcf6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800fcfc:	e02f      	b.n	800fd5e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800fcfe:	69fa      	ldr	r2, [r7, #28]
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	18d0      	adds	r0, r2, r3
 800fd04:	6a3b      	ldr	r3, [r7, #32]
 800fd06:	685a      	ldr	r2, [r3, #4]
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	18d1      	adds	r1, r2, r3
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800fd12:	3304      	adds	r3, #4
 800fd14:	461a      	mov	r2, r3
 800fd16:	f016 fc47 	bl	80265a8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800fd1a:	69bb      	ldr	r3, [r7, #24]
 800fd1c:	68db      	ldr	r3, [r3, #12]
 800fd1e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800fd20:	69bb      	ldr	r3, [r7, #24]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	da03      	bge.n	800fd30 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800fd28:	23f8      	movs	r3, #248	; 0xf8
 800fd2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800fd2e:	e03d      	b.n	800fdac <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800fd30:	69bb      	ldr	r3, [r7, #24]
 800fd32:	689b      	ldr	r3, [r3, #8]
 800fd34:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800fd36:	693a      	ldr	r2, [r7, #16]
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	4413      	add	r3, r2
 800fd3c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800fd40:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800fd42:	68ba      	ldr	r2, [r7, #8]
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	1ad3      	subs	r3, r2, r3
 800fd48:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800fd4c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800fd4e:	697a      	ldr	r2, [r7, #20]
 800fd50:	693b      	ldr	r3, [r7, #16]
 800fd52:	1ad3      	subs	r3, r2, r3
 800fd54:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800fd58:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800fd5e:	68fa      	ldr	r2, [r7, #12]
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	4413      	add	r3, r2
 800fd64:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d8c8      	bhi.n	800fcfe <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800fd6c:	69fa      	ldr	r2, [r7, #28]
 800fd6e:	693b      	ldr	r3, [r7, #16]
 800fd70:	18d0      	adds	r0, r2, r3
 800fd72:	6a3b      	ldr	r3, [r7, #32]
 800fd74:	685a      	ldr	r2, [r3, #4]
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	4413      	add	r3, r2
 800fd7a:	68fa      	ldr	r2, [r7, #12]
 800fd7c:	4619      	mov	r1, r3
 800fd7e:	f016 fc13 	bl	80265a8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800fd82:	693a      	ldr	r2, [r7, #16]
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	4413      	add	r3, r2
 800fd88:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800fd8a:	697a      	ldr	r2, [r7, #20]
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	4413      	add	r3, r2
 800fd90:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800fd92:	6a3b      	ldr	r3, [r7, #32]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	623b      	str	r3, [r7, #32]
 800fd98:	6a3b      	ldr	r3, [r7, #32]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d1a1      	bne.n	800fce2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800fd9e:	6979      	ldr	r1, [r7, #20]
 800fda0:	4811      	ldr	r0, [pc, #68]	; (800fde8 <low_level_output+0x138>)
 800fda2:	f7fb fefd 	bl	800bba0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800fda6:	2300      	movs	r3, #0
 800fda8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800fdac:	4b0e      	ldr	r3, [pc, #56]	; (800fde8 <low_level_output+0x138>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdb4:	3314      	adds	r3, #20
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	f003 0320 	and.w	r3, r3, #32
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d00d      	beq.n	800fddc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800fdc0:	4b09      	ldr	r3, [pc, #36]	; (800fde8 <low_level_output+0x138>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdc8:	3314      	adds	r3, #20
 800fdca:	2220      	movs	r2, #32
 800fdcc:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800fdce:	4b06      	ldr	r3, [pc, #24]	; (800fde8 <low_level_output+0x138>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdd6:	3304      	adds	r3, #4
 800fdd8:	2200      	movs	r2, #0
 800fdda:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800fddc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3728      	adds	r7, #40	; 0x28
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	2001137c 	.word	0x2001137c

0800fdec <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b08c      	sub	sp, #48	; 0x30
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800fe00:	2300      	movs	r3, #0
 800fe02:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800fe04:	2300      	movs	r3, #0
 800fe06:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800fe10:	484f      	ldr	r0, [pc, #316]	; (800ff50 <low_level_input+0x164>)
 800fe12:	f7fb ffaf 	bl	800bd74 <HAL_ETH_GetReceivedFrame_IT>
 800fe16:	4603      	mov	r3, r0
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d001      	beq.n	800fe20 <low_level_input+0x34>

    return NULL;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	e092      	b.n	800ff46 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800fe20:	4b4b      	ldr	r3, [pc, #300]	; (800ff50 <low_level_input+0x164>)
 800fe22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe24:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800fe26:	4b4a      	ldr	r3, [pc, #296]	; (800ff50 <low_level_input+0x164>)
 800fe28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800fe2c:	89fb      	ldrh	r3, [r7, #14]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d007      	beq.n	800fe42 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800fe32:	89fb      	ldrh	r3, [r7, #14]
 800fe34:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800fe38:	4619      	mov	r1, r3
 800fe3a:	2000      	movs	r0, #0
 800fe3c:	f00c f800 	bl	801be40 <pbuf_alloc>
 800fe40:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800fe42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d04b      	beq.n	800fee0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800fe48:	4b41      	ldr	r3, [pc, #260]	; (800ff50 <low_level_input+0x164>)
 800fe4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe4c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800fe52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe54:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe56:	e040      	b.n	800feda <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800fe58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe5a:	895b      	ldrh	r3, [r3, #10]
 800fe5c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800fe62:	e021      	b.n	800fea8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800fe64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe66:	685a      	ldr	r2, [r3, #4]
 800fe68:	69bb      	ldr	r3, [r7, #24]
 800fe6a:	18d0      	adds	r0, r2, r3
 800fe6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe6e:	69fb      	ldr	r3, [r7, #28]
 800fe70:	18d1      	adds	r1, r2, r3
 800fe72:	69fb      	ldr	r3, [r7, #28]
 800fe74:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800fe78:	3304      	adds	r3, #4
 800fe7a:	461a      	mov	r2, r3
 800fe7c:	f016 fb94 	bl	80265a8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800fe80:	6a3b      	ldr	r3, [r7, #32]
 800fe82:	68db      	ldr	r3, [r3, #12]
 800fe84:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800fe86:	6a3b      	ldr	r3, [r7, #32]
 800fe88:	689b      	ldr	r3, [r3, #8]
 800fe8a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800fe8c:	69fa      	ldr	r2, [r7, #28]
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	4413      	add	r3, r2
 800fe92:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800fe96:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800fe98:	69ba      	ldr	r2, [r7, #24]
 800fe9a:	69fb      	ldr	r3, [r7, #28]
 800fe9c:	1ad3      	subs	r3, r2, r3
 800fe9e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800fea2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800fea4:	2300      	movs	r3, #0
 800fea6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800fea8:	697a      	ldr	r2, [r7, #20]
 800feaa:	69fb      	ldr	r3, [r7, #28]
 800feac:	4413      	add	r3, r2
 800feae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800feb2:	4293      	cmp	r3, r2
 800feb4:	d8d6      	bhi.n	800fe64 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800feb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb8:	685a      	ldr	r2, [r3, #4]
 800feba:	69bb      	ldr	r3, [r7, #24]
 800febc:	18d0      	adds	r0, r2, r3
 800febe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fec0:	69fb      	ldr	r3, [r7, #28]
 800fec2:	4413      	add	r3, r2
 800fec4:	697a      	ldr	r2, [r7, #20]
 800fec6:	4619      	mov	r1, r3
 800fec8:	f016 fb6e 	bl	80265a8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800fecc:	69fa      	ldr	r2, [r7, #28]
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	4413      	add	r3, r2
 800fed2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800fed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	62bb      	str	r3, [r7, #40]	; 0x28
 800feda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d1bb      	bne.n	800fe58 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800fee0:	4b1b      	ldr	r3, [pc, #108]	; (800ff50 <low_level_input+0x164>)
 800fee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fee4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800fee6:	2300      	movs	r3, #0
 800fee8:	613b      	str	r3, [r7, #16]
 800feea:	e00b      	b.n	800ff04 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800feec:	6a3b      	ldr	r3, [r7, #32]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800fef4:	6a3b      	ldr	r3, [r7, #32]
 800fef6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800fef8:	6a3b      	ldr	r3, [r7, #32]
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800fefe:	693b      	ldr	r3, [r7, #16]
 800ff00:	3301      	adds	r3, #1
 800ff02:	613b      	str	r3, [r7, #16]
 800ff04:	4b12      	ldr	r3, [pc, #72]	; (800ff50 <low_level_input+0x164>)
 800ff06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff08:	693a      	ldr	r2, [r7, #16]
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d3ee      	bcc.n	800feec <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800ff0e:	4b10      	ldr	r3, [pc, #64]	; (800ff50 <low_level_input+0x164>)
 800ff10:	2200      	movs	r2, #0
 800ff12:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800ff14:	4b0e      	ldr	r3, [pc, #56]	; (800ff50 <low_level_input+0x164>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff1c:	3314      	adds	r3, #20
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d00d      	beq.n	800ff44 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800ff28:	4b09      	ldr	r3, [pc, #36]	; (800ff50 <low_level_input+0x164>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff30:	3314      	adds	r3, #20
 800ff32:	2280      	movs	r2, #128	; 0x80
 800ff34:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800ff36:	4b06      	ldr	r3, [pc, #24]	; (800ff50 <low_level_input+0x164>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff3e:	3308      	adds	r3, #8
 800ff40:	2200      	movs	r2, #0
 800ff42:	601a      	str	r2, [r3, #0]
  }
  return p;
 800ff44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3730      	adds	r7, #48	; 0x30
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	2001137c 	.word	0x2001137c

0800ff54 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b084      	sub	sp, #16
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800ff60:	4b12      	ldr	r3, [pc, #72]	; (800ffac <ethernetif_input+0x58>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f004 f91f 	bl	80141ac <osSemaphoreWait>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d1f5      	bne.n	800ff60 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800ff74:	480e      	ldr	r0, [pc, #56]	; (800ffb0 <ethernetif_input+0x5c>)
 800ff76:	f016 f861 	bl	802603c <sys_mutex_lock>
        p = low_level_input( netif );
 800ff7a:	68f8      	ldr	r0, [r7, #12]
 800ff7c:	f7ff ff36 	bl	800fdec <low_level_input>
 800ff80:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d00a      	beq.n	800ff9e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	691b      	ldr	r3, [r3, #16]
 800ff8c:	68f9      	ldr	r1, [r7, #12]
 800ff8e:	68b8      	ldr	r0, [r7, #8]
 800ff90:	4798      	blx	r3
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d002      	beq.n	800ff9e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800ff98:	68b8      	ldr	r0, [r7, #8]
 800ff9a:	f00c fa35 	bl	801c408 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800ff9e:	4804      	ldr	r0, [pc, #16]	; (800ffb0 <ethernetif_input+0x5c>)
 800ffa0:	f016 f85b 	bl	802605a <sys_mutex_unlock>
      } while(p!=NULL);
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d1e4      	bne.n	800ff74 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800ffaa:	e7d9      	b.n	800ff60 <ethernetif_input+0xc>
 800ffac:	20001788 	.word	0x20001788
 800ffb0:	20012bd4 	.word	0x20012bd4

0800ffb4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d106      	bne.n	800ffd0 <ethernetif_init+0x1c>
 800ffc2:	4b0e      	ldr	r3, [pc, #56]	; (800fffc <ethernetif_init+0x48>)
 800ffc4:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800ffc8:	490d      	ldr	r1, [pc, #52]	; (8010000 <ethernetif_init+0x4c>)
 800ffca:	480e      	ldr	r0, [pc, #56]	; (8010004 <ethernetif_init+0x50>)
 800ffcc:	f016 fe44 	bl	8026c58 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2273      	movs	r2, #115	; 0x73
 800ffd4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2274      	movs	r2, #116	; 0x74
 800ffdc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	4a09      	ldr	r2, [pc, #36]	; (8010008 <ethernetif_init+0x54>)
 800ffe4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	4a08      	ldr	r2, [pc, #32]	; (801000c <ethernetif_init+0x58>)
 800ffea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f7ff fd87 	bl	800fb00 <low_level_init>

  return ERR_OK;
 800fff2:	2300      	movs	r3, #0
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3708      	adds	r7, #8
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	0802c9e0 	.word	0x0802c9e0
 8010000:	0802c9fc 	.word	0x0802c9fc
 8010004:	0802ca0c 	.word	0x0802ca0c
 8010008:	080241e9 	.word	0x080241e9
 801000c:	0800fcb1 	.word	0x0800fcb1

08010010 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8010014:	f7fb fa40 	bl	800b498 <HAL_GetTick>
 8010018:	4603      	mov	r3, r0
}
 801001a:	4618      	mov	r0, r3
 801001c:	bd80      	pop	{r7, pc}
	...

08010020 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8010020:	b580      	push	{r7, lr}
 8010022:	b084      	sub	sp, #16
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8010028:	2300      	movs	r3, #0
 801002a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8010030:	f107 0308 	add.w	r3, r7, #8
 8010034:	461a      	mov	r2, r3
 8010036:	2101      	movs	r1, #1
 8010038:	4816      	ldr	r0, [pc, #88]	; (8010094 <ethernetif_set_link+0x74>)
 801003a:	f7fb ff9e 	bl	800bf7a <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	f003 0304 	and.w	r3, r3, #4
 8010044:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801004e:	f003 0304 	and.w	r3, r3, #4
 8010052:	2b00      	cmp	r3, #0
 8010054:	d108      	bne.n	8010068 <ethernetif_set_link+0x48>
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d005      	beq.n	8010068 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4618      	mov	r0, r3
 8010062:	f00b fdbf 	bl	801bbe4 <netif_set_link_up>
 8010066:	e011      	b.n	801008c <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010070:	089b      	lsrs	r3, r3, #2
 8010072:	f003 0301 	and.w	r3, r3, #1
 8010076:	b2db      	uxtb	r3, r3
 8010078:	2b00      	cmp	r3, #0
 801007a:	d007      	beq.n	801008c <ethernetif_set_link+0x6c>
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d104      	bne.n	801008c <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	4618      	mov	r0, r3
 8010088:	f00b fde0 	bl	801bc4c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 801008c:	20c8      	movs	r0, #200	; 0xc8
 801008e:	f003 ffaa 	bl	8013fe6 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8010092:	e7cd      	b.n	8010030 <ethernetif_set_link+0x10>
 8010094:	2001137c 	.word	0x2001137c

08010098 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80100a0:	2300      	movs	r3, #0
 80100a2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80100a4:	2300      	movs	r3, #0
 80100a6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80100ae:	089b      	lsrs	r3, r3, #2
 80100b0:	f003 0301 	and.w	r3, r3, #1
 80100b4:	b2db      	uxtb	r3, r3
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d05d      	beq.n	8010176 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80100ba:	4b34      	ldr	r3, [pc, #208]	; (801018c <ethernetif_update_config+0xf4>)
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d03f      	beq.n	8010142 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80100c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80100c6:	2100      	movs	r1, #0
 80100c8:	4830      	ldr	r0, [pc, #192]	; (801018c <ethernetif_update_config+0xf4>)
 80100ca:	f7fb ffbe 	bl	800c04a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80100ce:	f7fb f9e3 	bl	800b498 <HAL_GetTick>
 80100d2:	4603      	mov	r3, r0
 80100d4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80100d6:	f107 0308 	add.w	r3, r7, #8
 80100da:	461a      	mov	r2, r3
 80100dc:	2101      	movs	r1, #1
 80100de:	482b      	ldr	r0, [pc, #172]	; (801018c <ethernetif_update_config+0xf4>)
 80100e0:	f7fb ff4b 	bl	800bf7a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80100e4:	f7fb f9d8 	bl	800b498 <HAL_GetTick>
 80100e8:	4602      	mov	r2, r0
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	1ad3      	subs	r3, r2, r3
 80100ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80100f2:	d828      	bhi.n	8010146 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	f003 0320 	and.w	r3, r3, #32
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d0eb      	beq.n	80100d6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80100fe:	f107 0308 	add.w	r3, r7, #8
 8010102:	461a      	mov	r2, r3
 8010104:	2110      	movs	r1, #16
 8010106:	4821      	ldr	r0, [pc, #132]	; (801018c <ethernetif_update_config+0xf4>)
 8010108:	f7fb ff37 	bl	800bf7a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	f003 0304 	and.w	r3, r3, #4
 8010112:	2b00      	cmp	r3, #0
 8010114:	d004      	beq.n	8010120 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8010116:	4b1d      	ldr	r3, [pc, #116]	; (801018c <ethernetif_update_config+0xf4>)
 8010118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801011c:	60da      	str	r2, [r3, #12]
 801011e:	e002      	b.n	8010126 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8010120:	4b1a      	ldr	r3, [pc, #104]	; (801018c <ethernetif_update_config+0xf4>)
 8010122:	2200      	movs	r2, #0
 8010124:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	f003 0302 	and.w	r3, r3, #2
 801012c:	2b00      	cmp	r3, #0
 801012e:	d003      	beq.n	8010138 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8010130:	4b16      	ldr	r3, [pc, #88]	; (801018c <ethernetif_update_config+0xf4>)
 8010132:	2200      	movs	r2, #0
 8010134:	609a      	str	r2, [r3, #8]
 8010136:	e016      	b.n	8010166 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8010138:	4b14      	ldr	r3, [pc, #80]	; (801018c <ethernetif_update_config+0xf4>)
 801013a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801013e:	609a      	str	r2, [r3, #8]
 8010140:	e011      	b.n	8010166 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8010142:	bf00      	nop
 8010144:	e000      	b.n	8010148 <ethernetif_update_config+0xb0>
          goto error;
 8010146:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8010148:	4b10      	ldr	r3, [pc, #64]	; (801018c <ethernetif_update_config+0xf4>)
 801014a:	68db      	ldr	r3, [r3, #12]
 801014c:	08db      	lsrs	r3, r3, #3
 801014e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8010150:	4b0e      	ldr	r3, [pc, #56]	; (801018c <ethernetif_update_config+0xf4>)
 8010152:	689b      	ldr	r3, [r3, #8]
 8010154:	085b      	lsrs	r3, r3, #1
 8010156:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8010158:	4313      	orrs	r3, r2
 801015a:	b29b      	uxth	r3, r3
 801015c:	461a      	mov	r2, r3
 801015e:	2100      	movs	r1, #0
 8010160:	480a      	ldr	r0, [pc, #40]	; (801018c <ethernetif_update_config+0xf4>)
 8010162:	f7fb ff72 	bl	800c04a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8010166:	2100      	movs	r1, #0
 8010168:	4808      	ldr	r0, [pc, #32]	; (801018c <ethernetif_update_config+0xf4>)
 801016a:	f7fc f833 	bl	800c1d4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 801016e:	4807      	ldr	r0, [pc, #28]	; (801018c <ethernetif_update_config+0xf4>)
 8010170:	f7fb ffd1 	bl	800c116 <HAL_ETH_Start>
 8010174:	e002      	b.n	801017c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8010176:	4805      	ldr	r0, [pc, #20]	; (801018c <ethernetif_update_config+0xf4>)
 8010178:	f7fb fffc 	bl	800c174 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f000 f807 	bl	8010190 <ethernetif_notify_conn_changed>
}
 8010182:	bf00      	nop
 8010184:	3710      	adds	r7, #16
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	2001137c 	.word	0x2001137c

08010190 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8010190:	b480      	push	{r7}
 8010192:	b083      	sub	sp, #12
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8010198:	bf00      	nop
 801019a:	370c      	adds	r7, #12
 801019c:	46bd      	mov	sp, r7
 801019e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a2:	4770      	bx	lr

080101a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b084      	sub	sp, #16
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	4603      	mov	r3, r0
 80101ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80101ae:	79fb      	ldrb	r3, [r7, #7]
 80101b0:	4a08      	ldr	r2, [pc, #32]	; (80101d4 <disk_status+0x30>)
 80101b2:	009b      	lsls	r3, r3, #2
 80101b4:	4413      	add	r3, r2
 80101b6:	685b      	ldr	r3, [r3, #4]
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	79fa      	ldrb	r2, [r7, #7]
 80101bc:	4905      	ldr	r1, [pc, #20]	; (80101d4 <disk_status+0x30>)
 80101be:	440a      	add	r2, r1
 80101c0:	7a12      	ldrb	r2, [r2, #8]
 80101c2:	4610      	mov	r0, r2
 80101c4:	4798      	blx	r3
 80101c6:	4603      	mov	r3, r0
 80101c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80101ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3710      	adds	r7, #16
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}
 80101d4:	200017b4 	.word	0x200017b4

080101d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b084      	sub	sp, #16
 80101dc:	af00      	add	r7, sp, #0
 80101de:	4603      	mov	r3, r0
 80101e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80101e2:	2300      	movs	r3, #0
 80101e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80101e6:	79fb      	ldrb	r3, [r7, #7]
 80101e8:	4a0d      	ldr	r2, [pc, #52]	; (8010220 <disk_initialize+0x48>)
 80101ea:	5cd3      	ldrb	r3, [r2, r3]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d111      	bne.n	8010214 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80101f0:	79fb      	ldrb	r3, [r7, #7]
 80101f2:	4a0b      	ldr	r2, [pc, #44]	; (8010220 <disk_initialize+0x48>)
 80101f4:	2101      	movs	r1, #1
 80101f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80101f8:	79fb      	ldrb	r3, [r7, #7]
 80101fa:	4a09      	ldr	r2, [pc, #36]	; (8010220 <disk_initialize+0x48>)
 80101fc:	009b      	lsls	r3, r3, #2
 80101fe:	4413      	add	r3, r2
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	79fa      	ldrb	r2, [r7, #7]
 8010206:	4906      	ldr	r1, [pc, #24]	; (8010220 <disk_initialize+0x48>)
 8010208:	440a      	add	r2, r1
 801020a:	7a12      	ldrb	r2, [r2, #8]
 801020c:	4610      	mov	r0, r2
 801020e:	4798      	blx	r3
 8010210:	4603      	mov	r3, r0
 8010212:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010214:	7bfb      	ldrb	r3, [r7, #15]
}
 8010216:	4618      	mov	r0, r3
 8010218:	3710      	adds	r7, #16
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}
 801021e:	bf00      	nop
 8010220:	200017b4 	.word	0x200017b4

08010224 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010224:	b590      	push	{r4, r7, lr}
 8010226:	b087      	sub	sp, #28
 8010228:	af00      	add	r7, sp, #0
 801022a:	60b9      	str	r1, [r7, #8]
 801022c:	607a      	str	r2, [r7, #4]
 801022e:	603b      	str	r3, [r7, #0]
 8010230:	4603      	mov	r3, r0
 8010232:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010234:	7bfb      	ldrb	r3, [r7, #15]
 8010236:	4a0a      	ldr	r2, [pc, #40]	; (8010260 <disk_read+0x3c>)
 8010238:	009b      	lsls	r3, r3, #2
 801023a:	4413      	add	r3, r2
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	689c      	ldr	r4, [r3, #8]
 8010240:	7bfb      	ldrb	r3, [r7, #15]
 8010242:	4a07      	ldr	r2, [pc, #28]	; (8010260 <disk_read+0x3c>)
 8010244:	4413      	add	r3, r2
 8010246:	7a18      	ldrb	r0, [r3, #8]
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	687a      	ldr	r2, [r7, #4]
 801024c:	68b9      	ldr	r1, [r7, #8]
 801024e:	47a0      	blx	r4
 8010250:	4603      	mov	r3, r0
 8010252:	75fb      	strb	r3, [r7, #23]
  return res;
 8010254:	7dfb      	ldrb	r3, [r7, #23]
}
 8010256:	4618      	mov	r0, r3
 8010258:	371c      	adds	r7, #28
 801025a:	46bd      	mov	sp, r7
 801025c:	bd90      	pop	{r4, r7, pc}
 801025e:	bf00      	nop
 8010260:	200017b4 	.word	0x200017b4

08010264 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010264:	b590      	push	{r4, r7, lr}
 8010266:	b087      	sub	sp, #28
 8010268:	af00      	add	r7, sp, #0
 801026a:	60b9      	str	r1, [r7, #8]
 801026c:	607a      	str	r2, [r7, #4]
 801026e:	603b      	str	r3, [r7, #0]
 8010270:	4603      	mov	r3, r0
 8010272:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010274:	7bfb      	ldrb	r3, [r7, #15]
 8010276:	4a0a      	ldr	r2, [pc, #40]	; (80102a0 <disk_write+0x3c>)
 8010278:	009b      	lsls	r3, r3, #2
 801027a:	4413      	add	r3, r2
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	68dc      	ldr	r4, [r3, #12]
 8010280:	7bfb      	ldrb	r3, [r7, #15]
 8010282:	4a07      	ldr	r2, [pc, #28]	; (80102a0 <disk_write+0x3c>)
 8010284:	4413      	add	r3, r2
 8010286:	7a18      	ldrb	r0, [r3, #8]
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	687a      	ldr	r2, [r7, #4]
 801028c:	68b9      	ldr	r1, [r7, #8]
 801028e:	47a0      	blx	r4
 8010290:	4603      	mov	r3, r0
 8010292:	75fb      	strb	r3, [r7, #23]
  return res;
 8010294:	7dfb      	ldrb	r3, [r7, #23]
}
 8010296:	4618      	mov	r0, r3
 8010298:	371c      	adds	r7, #28
 801029a:	46bd      	mov	sp, r7
 801029c:	bd90      	pop	{r4, r7, pc}
 801029e:	bf00      	nop
 80102a0:	200017b4 	.word	0x200017b4

080102a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b084      	sub	sp, #16
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	4603      	mov	r3, r0
 80102ac:	603a      	str	r2, [r7, #0]
 80102ae:	71fb      	strb	r3, [r7, #7]
 80102b0:	460b      	mov	r3, r1
 80102b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80102b4:	79fb      	ldrb	r3, [r7, #7]
 80102b6:	4a09      	ldr	r2, [pc, #36]	; (80102dc <disk_ioctl+0x38>)
 80102b8:	009b      	lsls	r3, r3, #2
 80102ba:	4413      	add	r3, r2
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	691b      	ldr	r3, [r3, #16]
 80102c0:	79fa      	ldrb	r2, [r7, #7]
 80102c2:	4906      	ldr	r1, [pc, #24]	; (80102dc <disk_ioctl+0x38>)
 80102c4:	440a      	add	r2, r1
 80102c6:	7a10      	ldrb	r0, [r2, #8]
 80102c8:	79b9      	ldrb	r1, [r7, #6]
 80102ca:	683a      	ldr	r2, [r7, #0]
 80102cc:	4798      	blx	r3
 80102ce:	4603      	mov	r3, r0
 80102d0:	73fb      	strb	r3, [r7, #15]
  return res;
 80102d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3710      	adds	r7, #16
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}
 80102dc:	200017b4 	.word	0x200017b4

080102e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80102e0:	b480      	push	{r7}
 80102e2:	b085      	sub	sp, #20
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	3301      	adds	r3, #1
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80102f0:	89fb      	ldrh	r3, [r7, #14]
 80102f2:	021b      	lsls	r3, r3, #8
 80102f4:	b21a      	sxth	r2, r3
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	781b      	ldrb	r3, [r3, #0]
 80102fa:	b21b      	sxth	r3, r3
 80102fc:	4313      	orrs	r3, r2
 80102fe:	b21b      	sxth	r3, r3
 8010300:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010302:	89fb      	ldrh	r3, [r7, #14]
}
 8010304:	4618      	mov	r0, r3
 8010306:	3714      	adds	r7, #20
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr

08010310 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010310:	b480      	push	{r7}
 8010312:	b085      	sub	sp, #20
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	3303      	adds	r3, #3
 801031c:	781b      	ldrb	r3, [r3, #0]
 801031e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	021b      	lsls	r3, r3, #8
 8010324:	687a      	ldr	r2, [r7, #4]
 8010326:	3202      	adds	r2, #2
 8010328:	7812      	ldrb	r2, [r2, #0]
 801032a:	4313      	orrs	r3, r2
 801032c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	021b      	lsls	r3, r3, #8
 8010332:	687a      	ldr	r2, [r7, #4]
 8010334:	3201      	adds	r2, #1
 8010336:	7812      	ldrb	r2, [r2, #0]
 8010338:	4313      	orrs	r3, r2
 801033a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	021b      	lsls	r3, r3, #8
 8010340:	687a      	ldr	r2, [r7, #4]
 8010342:	7812      	ldrb	r2, [r2, #0]
 8010344:	4313      	orrs	r3, r2
 8010346:	60fb      	str	r3, [r7, #12]
	return rv;
 8010348:	68fb      	ldr	r3, [r7, #12]
}
 801034a:	4618      	mov	r0, r3
 801034c:	3714      	adds	r7, #20
 801034e:	46bd      	mov	sp, r7
 8010350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010354:	4770      	bx	lr

08010356 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010356:	b480      	push	{r7}
 8010358:	b083      	sub	sp, #12
 801035a:	af00      	add	r7, sp, #0
 801035c:	6078      	str	r0, [r7, #4]
 801035e:	460b      	mov	r3, r1
 8010360:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	1c5a      	adds	r2, r3, #1
 8010366:	607a      	str	r2, [r7, #4]
 8010368:	887a      	ldrh	r2, [r7, #2]
 801036a:	b2d2      	uxtb	r2, r2
 801036c:	701a      	strb	r2, [r3, #0]
 801036e:	887b      	ldrh	r3, [r7, #2]
 8010370:	0a1b      	lsrs	r3, r3, #8
 8010372:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	1c5a      	adds	r2, r3, #1
 8010378:	607a      	str	r2, [r7, #4]
 801037a:	887a      	ldrh	r2, [r7, #2]
 801037c:	b2d2      	uxtb	r2, r2
 801037e:	701a      	strb	r2, [r3, #0]
}
 8010380:	bf00      	nop
 8010382:	370c      	adds	r7, #12
 8010384:	46bd      	mov	sp, r7
 8010386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038a:	4770      	bx	lr

0801038c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801038c:	b480      	push	{r7}
 801038e:	b083      	sub	sp, #12
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	1c5a      	adds	r2, r3, #1
 801039a:	607a      	str	r2, [r7, #4]
 801039c:	683a      	ldr	r2, [r7, #0]
 801039e:	b2d2      	uxtb	r2, r2
 80103a0:	701a      	strb	r2, [r3, #0]
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	0a1b      	lsrs	r3, r3, #8
 80103a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	1c5a      	adds	r2, r3, #1
 80103ac:	607a      	str	r2, [r7, #4]
 80103ae:	683a      	ldr	r2, [r7, #0]
 80103b0:	b2d2      	uxtb	r2, r2
 80103b2:	701a      	strb	r2, [r3, #0]
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	0a1b      	lsrs	r3, r3, #8
 80103b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	1c5a      	adds	r2, r3, #1
 80103be:	607a      	str	r2, [r7, #4]
 80103c0:	683a      	ldr	r2, [r7, #0]
 80103c2:	b2d2      	uxtb	r2, r2
 80103c4:	701a      	strb	r2, [r3, #0]
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	0a1b      	lsrs	r3, r3, #8
 80103ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	1c5a      	adds	r2, r3, #1
 80103d0:	607a      	str	r2, [r7, #4]
 80103d2:	683a      	ldr	r2, [r7, #0]
 80103d4:	b2d2      	uxtb	r2, r2
 80103d6:	701a      	strb	r2, [r3, #0]
}
 80103d8:	bf00      	nop
 80103da:	370c      	adds	r7, #12
 80103dc:	46bd      	mov	sp, r7
 80103de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e2:	4770      	bx	lr

080103e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80103e4:	b480      	push	{r7}
 80103e6:	b087      	sub	sp, #28
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	60f8      	str	r0, [r7, #12]
 80103ec:	60b9      	str	r1, [r7, #8]
 80103ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d00d      	beq.n	801041a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80103fe:	693a      	ldr	r2, [r7, #16]
 8010400:	1c53      	adds	r3, r2, #1
 8010402:	613b      	str	r3, [r7, #16]
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	1c59      	adds	r1, r3, #1
 8010408:	6179      	str	r1, [r7, #20]
 801040a:	7812      	ldrb	r2, [r2, #0]
 801040c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	3b01      	subs	r3, #1
 8010412:	607b      	str	r3, [r7, #4]
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d1f1      	bne.n	80103fe <mem_cpy+0x1a>
	}
}
 801041a:	bf00      	nop
 801041c:	371c      	adds	r7, #28
 801041e:	46bd      	mov	sp, r7
 8010420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010424:	4770      	bx	lr

08010426 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010426:	b480      	push	{r7}
 8010428:	b087      	sub	sp, #28
 801042a:	af00      	add	r7, sp, #0
 801042c:	60f8      	str	r0, [r7, #12]
 801042e:	60b9      	str	r1, [r7, #8]
 8010430:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	1c5a      	adds	r2, r3, #1
 801043a:	617a      	str	r2, [r7, #20]
 801043c:	68ba      	ldr	r2, [r7, #8]
 801043e:	b2d2      	uxtb	r2, r2
 8010440:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	3b01      	subs	r3, #1
 8010446:	607b      	str	r3, [r7, #4]
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d1f3      	bne.n	8010436 <mem_set+0x10>
}
 801044e:	bf00      	nop
 8010450:	bf00      	nop
 8010452:	371c      	adds	r7, #28
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr

0801045c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801045c:	b480      	push	{r7}
 801045e:	b089      	sub	sp, #36	; 0x24
 8010460:	af00      	add	r7, sp, #0
 8010462:	60f8      	str	r0, [r7, #12]
 8010464:	60b9      	str	r1, [r7, #8]
 8010466:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	61fb      	str	r3, [r7, #28]
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010470:	2300      	movs	r3, #0
 8010472:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010474:	69fb      	ldr	r3, [r7, #28]
 8010476:	1c5a      	adds	r2, r3, #1
 8010478:	61fa      	str	r2, [r7, #28]
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	4619      	mov	r1, r3
 801047e:	69bb      	ldr	r3, [r7, #24]
 8010480:	1c5a      	adds	r2, r3, #1
 8010482:	61ba      	str	r2, [r7, #24]
 8010484:	781b      	ldrb	r3, [r3, #0]
 8010486:	1acb      	subs	r3, r1, r3
 8010488:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	3b01      	subs	r3, #1
 801048e:	607b      	str	r3, [r7, #4]
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d002      	beq.n	801049c <mem_cmp+0x40>
 8010496:	697b      	ldr	r3, [r7, #20]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d0eb      	beq.n	8010474 <mem_cmp+0x18>

	return r;
 801049c:	697b      	ldr	r3, [r7, #20]
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3724      	adds	r7, #36	; 0x24
 80104a2:	46bd      	mov	sp, r7
 80104a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a8:	4770      	bx	lr

080104aa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80104aa:	b480      	push	{r7}
 80104ac:	b083      	sub	sp, #12
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	6078      	str	r0, [r7, #4]
 80104b2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80104b4:	e002      	b.n	80104bc <chk_chr+0x12>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	3301      	adds	r3, #1
 80104ba:	607b      	str	r3, [r7, #4]
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	781b      	ldrb	r3, [r3, #0]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d005      	beq.n	80104d0 <chk_chr+0x26>
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	781b      	ldrb	r3, [r3, #0]
 80104c8:	461a      	mov	r2, r3
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	4293      	cmp	r3, r2
 80104ce:	d1f2      	bne.n	80104b6 <chk_chr+0xc>
	return *str;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	781b      	ldrb	r3, [r3, #0]
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	370c      	adds	r7, #12
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr

080104e0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b082      	sub	sp, #8
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d009      	beq.n	8010502 <lock_fs+0x22>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	695b      	ldr	r3, [r3, #20]
 80104f2:	4618      	mov	r0, r3
 80104f4:	f003 fcca 	bl	8013e8c <ff_req_grant>
 80104f8:	4603      	mov	r3, r0
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d001      	beq.n	8010502 <lock_fs+0x22>
 80104fe:	2301      	movs	r3, #1
 8010500:	e000      	b.n	8010504 <lock_fs+0x24>
 8010502:	2300      	movs	r3, #0
}
 8010504:	4618      	mov	r0, r3
 8010506:	3708      	adds	r7, #8
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}

0801050c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	460b      	mov	r3, r1
 8010516:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d00d      	beq.n	801053a <unlock_fs+0x2e>
 801051e:	78fb      	ldrb	r3, [r7, #3]
 8010520:	2b0c      	cmp	r3, #12
 8010522:	d00a      	beq.n	801053a <unlock_fs+0x2e>
 8010524:	78fb      	ldrb	r3, [r7, #3]
 8010526:	2b0b      	cmp	r3, #11
 8010528:	d007      	beq.n	801053a <unlock_fs+0x2e>
 801052a:	78fb      	ldrb	r3, [r7, #3]
 801052c:	2b0f      	cmp	r3, #15
 801052e:	d004      	beq.n	801053a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	695b      	ldr	r3, [r3, #20]
 8010534:	4618      	mov	r0, r3
 8010536:	f003 fcbe 	bl	8013eb6 <ff_rel_grant>
	}
}
 801053a:	bf00      	nop
 801053c:	3708      	adds	r7, #8
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
	...

08010544 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010544:	b480      	push	{r7}
 8010546:	b085      	sub	sp, #20
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801054e:	2300      	movs	r3, #0
 8010550:	60bb      	str	r3, [r7, #8]
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	60fb      	str	r3, [r7, #12]
 8010556:	e029      	b.n	80105ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010558:	4a27      	ldr	r2, [pc, #156]	; (80105f8 <chk_lock+0xb4>)
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	011b      	lsls	r3, r3, #4
 801055e:	4413      	add	r3, r2
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d01d      	beq.n	80105a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010566:	4a24      	ldr	r2, [pc, #144]	; (80105f8 <chk_lock+0xb4>)
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	011b      	lsls	r3, r3, #4
 801056c:	4413      	add	r3, r2
 801056e:	681a      	ldr	r2, [r3, #0]
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	429a      	cmp	r2, r3
 8010576:	d116      	bne.n	80105a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010578:	4a1f      	ldr	r2, [pc, #124]	; (80105f8 <chk_lock+0xb4>)
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	011b      	lsls	r3, r3, #4
 801057e:	4413      	add	r3, r2
 8010580:	3304      	adds	r3, #4
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010588:	429a      	cmp	r2, r3
 801058a:	d10c      	bne.n	80105a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801058c:	4a1a      	ldr	r2, [pc, #104]	; (80105f8 <chk_lock+0xb4>)
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	011b      	lsls	r3, r3, #4
 8010592:	4413      	add	r3, r2
 8010594:	3308      	adds	r3, #8
 8010596:	681a      	ldr	r2, [r3, #0]
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801059c:	429a      	cmp	r2, r3
 801059e:	d102      	bne.n	80105a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80105a0:	e007      	b.n	80105b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80105a2:	2301      	movs	r3, #1
 80105a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	3301      	adds	r3, #1
 80105aa:	60fb      	str	r3, [r7, #12]
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	d9d2      	bls.n	8010558 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	2b02      	cmp	r3, #2
 80105b6:	d109      	bne.n	80105cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d102      	bne.n	80105c4 <chk_lock+0x80>
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	2b02      	cmp	r3, #2
 80105c2:	d101      	bne.n	80105c8 <chk_lock+0x84>
 80105c4:	2300      	movs	r3, #0
 80105c6:	e010      	b.n	80105ea <chk_lock+0xa6>
 80105c8:	2312      	movs	r3, #18
 80105ca:	e00e      	b.n	80105ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d108      	bne.n	80105e4 <chk_lock+0xa0>
 80105d2:	4a09      	ldr	r2, [pc, #36]	; (80105f8 <chk_lock+0xb4>)
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	011b      	lsls	r3, r3, #4
 80105d8:	4413      	add	r3, r2
 80105da:	330c      	adds	r3, #12
 80105dc:	881b      	ldrh	r3, [r3, #0]
 80105de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105e2:	d101      	bne.n	80105e8 <chk_lock+0xa4>
 80105e4:	2310      	movs	r3, #16
 80105e6:	e000      	b.n	80105ea <chk_lock+0xa6>
 80105e8:	2300      	movs	r3, #0
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3714      	adds	r7, #20
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr
 80105f6:	bf00      	nop
 80105f8:	20001794 	.word	0x20001794

080105fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80105fc:	b480      	push	{r7}
 80105fe:	b083      	sub	sp, #12
 8010600:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010602:	2300      	movs	r3, #0
 8010604:	607b      	str	r3, [r7, #4]
 8010606:	e002      	b.n	801060e <enq_lock+0x12>
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	3301      	adds	r3, #1
 801060c:	607b      	str	r3, [r7, #4]
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2b01      	cmp	r3, #1
 8010612:	d806      	bhi.n	8010622 <enq_lock+0x26>
 8010614:	4a09      	ldr	r2, [pc, #36]	; (801063c <enq_lock+0x40>)
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	011b      	lsls	r3, r3, #4
 801061a:	4413      	add	r3, r2
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d1f2      	bne.n	8010608 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	2b02      	cmp	r3, #2
 8010626:	bf14      	ite	ne
 8010628:	2301      	movne	r3, #1
 801062a:	2300      	moveq	r3, #0
 801062c:	b2db      	uxtb	r3, r3
}
 801062e:	4618      	mov	r0, r3
 8010630:	370c      	adds	r7, #12
 8010632:	46bd      	mov	sp, r7
 8010634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010638:	4770      	bx	lr
 801063a:	bf00      	nop
 801063c:	20001794 	.word	0x20001794

08010640 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010640:	b480      	push	{r7}
 8010642:	b085      	sub	sp, #20
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801064a:	2300      	movs	r3, #0
 801064c:	60fb      	str	r3, [r7, #12]
 801064e:	e01f      	b.n	8010690 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010650:	4a41      	ldr	r2, [pc, #260]	; (8010758 <inc_lock+0x118>)
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	011b      	lsls	r3, r3, #4
 8010656:	4413      	add	r3, r2
 8010658:	681a      	ldr	r2, [r3, #0]
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	429a      	cmp	r2, r3
 8010660:	d113      	bne.n	801068a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010662:	4a3d      	ldr	r2, [pc, #244]	; (8010758 <inc_lock+0x118>)
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	011b      	lsls	r3, r3, #4
 8010668:	4413      	add	r3, r2
 801066a:	3304      	adds	r3, #4
 801066c:	681a      	ldr	r2, [r3, #0]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010672:	429a      	cmp	r2, r3
 8010674:	d109      	bne.n	801068a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010676:	4a38      	ldr	r2, [pc, #224]	; (8010758 <inc_lock+0x118>)
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	011b      	lsls	r3, r3, #4
 801067c:	4413      	add	r3, r2
 801067e:	3308      	adds	r3, #8
 8010680:	681a      	ldr	r2, [r3, #0]
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010686:	429a      	cmp	r2, r3
 8010688:	d006      	beq.n	8010698 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	3301      	adds	r3, #1
 801068e:	60fb      	str	r3, [r7, #12]
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	2b01      	cmp	r3, #1
 8010694:	d9dc      	bls.n	8010650 <inc_lock+0x10>
 8010696:	e000      	b.n	801069a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010698:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	2b02      	cmp	r3, #2
 801069e:	d132      	bne.n	8010706 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80106a0:	2300      	movs	r3, #0
 80106a2:	60fb      	str	r3, [r7, #12]
 80106a4:	e002      	b.n	80106ac <inc_lock+0x6c>
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	3301      	adds	r3, #1
 80106aa:	60fb      	str	r3, [r7, #12]
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	2b01      	cmp	r3, #1
 80106b0:	d806      	bhi.n	80106c0 <inc_lock+0x80>
 80106b2:	4a29      	ldr	r2, [pc, #164]	; (8010758 <inc_lock+0x118>)
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	011b      	lsls	r3, r3, #4
 80106b8:	4413      	add	r3, r2
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d1f2      	bne.n	80106a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	2b02      	cmp	r3, #2
 80106c4:	d101      	bne.n	80106ca <inc_lock+0x8a>
 80106c6:	2300      	movs	r3, #0
 80106c8:	e040      	b.n	801074c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681a      	ldr	r2, [r3, #0]
 80106ce:	4922      	ldr	r1, [pc, #136]	; (8010758 <inc_lock+0x118>)
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	011b      	lsls	r3, r3, #4
 80106d4:	440b      	add	r3, r1
 80106d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	689a      	ldr	r2, [r3, #8]
 80106dc:	491e      	ldr	r1, [pc, #120]	; (8010758 <inc_lock+0x118>)
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	011b      	lsls	r3, r3, #4
 80106e2:	440b      	add	r3, r1
 80106e4:	3304      	adds	r3, #4
 80106e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	695a      	ldr	r2, [r3, #20]
 80106ec:	491a      	ldr	r1, [pc, #104]	; (8010758 <inc_lock+0x118>)
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	011b      	lsls	r3, r3, #4
 80106f2:	440b      	add	r3, r1
 80106f4:	3308      	adds	r3, #8
 80106f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80106f8:	4a17      	ldr	r2, [pc, #92]	; (8010758 <inc_lock+0x118>)
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	011b      	lsls	r3, r3, #4
 80106fe:	4413      	add	r3, r2
 8010700:	330c      	adds	r3, #12
 8010702:	2200      	movs	r2, #0
 8010704:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d009      	beq.n	8010720 <inc_lock+0xe0>
 801070c:	4a12      	ldr	r2, [pc, #72]	; (8010758 <inc_lock+0x118>)
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	011b      	lsls	r3, r3, #4
 8010712:	4413      	add	r3, r2
 8010714:	330c      	adds	r3, #12
 8010716:	881b      	ldrh	r3, [r3, #0]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d001      	beq.n	8010720 <inc_lock+0xe0>
 801071c:	2300      	movs	r3, #0
 801071e:	e015      	b.n	801074c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d108      	bne.n	8010738 <inc_lock+0xf8>
 8010726:	4a0c      	ldr	r2, [pc, #48]	; (8010758 <inc_lock+0x118>)
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	011b      	lsls	r3, r3, #4
 801072c:	4413      	add	r3, r2
 801072e:	330c      	adds	r3, #12
 8010730:	881b      	ldrh	r3, [r3, #0]
 8010732:	3301      	adds	r3, #1
 8010734:	b29a      	uxth	r2, r3
 8010736:	e001      	b.n	801073c <inc_lock+0xfc>
 8010738:	f44f 7280 	mov.w	r2, #256	; 0x100
 801073c:	4906      	ldr	r1, [pc, #24]	; (8010758 <inc_lock+0x118>)
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	011b      	lsls	r3, r3, #4
 8010742:	440b      	add	r3, r1
 8010744:	330c      	adds	r3, #12
 8010746:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	3301      	adds	r3, #1
}
 801074c:	4618      	mov	r0, r3
 801074e:	3714      	adds	r7, #20
 8010750:	46bd      	mov	sp, r7
 8010752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010756:	4770      	bx	lr
 8010758:	20001794 	.word	0x20001794

0801075c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801075c:	b480      	push	{r7}
 801075e:	b085      	sub	sp, #20
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	3b01      	subs	r3, #1
 8010768:	607b      	str	r3, [r7, #4]
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2b01      	cmp	r3, #1
 801076e:	d825      	bhi.n	80107bc <dec_lock+0x60>
		n = Files[i].ctr;
 8010770:	4a17      	ldr	r2, [pc, #92]	; (80107d0 <dec_lock+0x74>)
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	011b      	lsls	r3, r3, #4
 8010776:	4413      	add	r3, r2
 8010778:	330c      	adds	r3, #12
 801077a:	881b      	ldrh	r3, [r3, #0]
 801077c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801077e:	89fb      	ldrh	r3, [r7, #14]
 8010780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010784:	d101      	bne.n	801078a <dec_lock+0x2e>
 8010786:	2300      	movs	r3, #0
 8010788:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801078a:	89fb      	ldrh	r3, [r7, #14]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d002      	beq.n	8010796 <dec_lock+0x3a>
 8010790:	89fb      	ldrh	r3, [r7, #14]
 8010792:	3b01      	subs	r3, #1
 8010794:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010796:	4a0e      	ldr	r2, [pc, #56]	; (80107d0 <dec_lock+0x74>)
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	011b      	lsls	r3, r3, #4
 801079c:	4413      	add	r3, r2
 801079e:	330c      	adds	r3, #12
 80107a0:	89fa      	ldrh	r2, [r7, #14]
 80107a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80107a4:	89fb      	ldrh	r3, [r7, #14]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d105      	bne.n	80107b6 <dec_lock+0x5a>
 80107aa:	4a09      	ldr	r2, [pc, #36]	; (80107d0 <dec_lock+0x74>)
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	011b      	lsls	r3, r3, #4
 80107b0:	4413      	add	r3, r2
 80107b2:	2200      	movs	r2, #0
 80107b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80107b6:	2300      	movs	r3, #0
 80107b8:	737b      	strb	r3, [r7, #13]
 80107ba:	e001      	b.n	80107c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80107bc:	2302      	movs	r3, #2
 80107be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80107c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	3714      	adds	r7, #20
 80107c6:	46bd      	mov	sp, r7
 80107c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107cc:	4770      	bx	lr
 80107ce:	bf00      	nop
 80107d0:	20001794 	.word	0x20001794

080107d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80107d4:	b480      	push	{r7}
 80107d6:	b085      	sub	sp, #20
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80107dc:	2300      	movs	r3, #0
 80107de:	60fb      	str	r3, [r7, #12]
 80107e0:	e010      	b.n	8010804 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80107e2:	4a0d      	ldr	r2, [pc, #52]	; (8010818 <clear_lock+0x44>)
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	011b      	lsls	r3, r3, #4
 80107e8:	4413      	add	r3, r2
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	687a      	ldr	r2, [r7, #4]
 80107ee:	429a      	cmp	r2, r3
 80107f0:	d105      	bne.n	80107fe <clear_lock+0x2a>
 80107f2:	4a09      	ldr	r2, [pc, #36]	; (8010818 <clear_lock+0x44>)
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	011b      	lsls	r3, r3, #4
 80107f8:	4413      	add	r3, r2
 80107fa:	2200      	movs	r2, #0
 80107fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	3301      	adds	r3, #1
 8010802:	60fb      	str	r3, [r7, #12]
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	2b01      	cmp	r3, #1
 8010808:	d9eb      	bls.n	80107e2 <clear_lock+0xe>
	}
}
 801080a:	bf00      	nop
 801080c:	bf00      	nop
 801080e:	3714      	adds	r7, #20
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr
 8010818:	20001794 	.word	0x20001794

0801081c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b086      	sub	sp, #24
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010824:	2300      	movs	r3, #0
 8010826:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	78db      	ldrb	r3, [r3, #3]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d034      	beq.n	801089a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010834:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	7858      	ldrb	r0, [r3, #1]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8010840:	2301      	movs	r3, #1
 8010842:	697a      	ldr	r2, [r7, #20]
 8010844:	f7ff fd0e 	bl	8010264 <disk_write>
 8010848:	4603      	mov	r3, r0
 801084a:	2b00      	cmp	r3, #0
 801084c:	d002      	beq.n	8010854 <sync_window+0x38>
			res = FR_DISK_ERR;
 801084e:	2301      	movs	r3, #1
 8010850:	73fb      	strb	r3, [r7, #15]
 8010852:	e022      	b.n	801089a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2200      	movs	r2, #0
 8010858:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801085e:	697a      	ldr	r2, [r7, #20]
 8010860:	1ad2      	subs	r2, r2, r3
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010866:	429a      	cmp	r2, r3
 8010868:	d217      	bcs.n	801089a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	789b      	ldrb	r3, [r3, #2]
 801086e:	613b      	str	r3, [r7, #16]
 8010870:	e010      	b.n	8010894 <sync_window+0x78>
					wsect += fs->fsize;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010876:	697a      	ldr	r2, [r7, #20]
 8010878:	4413      	add	r3, r2
 801087a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	7858      	ldrb	r0, [r3, #1]
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8010886:	2301      	movs	r3, #1
 8010888:	697a      	ldr	r2, [r7, #20]
 801088a:	f7ff fceb 	bl	8010264 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	3b01      	subs	r3, #1
 8010892:	613b      	str	r3, [r7, #16]
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	2b01      	cmp	r3, #1
 8010898:	d8eb      	bhi.n	8010872 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801089a:	7bfb      	ldrb	r3, [r7, #15]
}
 801089c:	4618      	mov	r0, r3
 801089e:	3718      	adds	r7, #24
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b084      	sub	sp, #16
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80108ae:	2300      	movs	r3, #0
 80108b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108b6:	683a      	ldr	r2, [r7, #0]
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d01b      	beq.n	80108f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f7ff ffad 	bl	801081c <sync_window>
 80108c2:	4603      	mov	r3, r0
 80108c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80108c6:	7bfb      	ldrb	r3, [r7, #15]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d113      	bne.n	80108f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	7858      	ldrb	r0, [r3, #1]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80108d6:	2301      	movs	r3, #1
 80108d8:	683a      	ldr	r2, [r7, #0]
 80108da:	f7ff fca3 	bl	8010224 <disk_read>
 80108de:	4603      	mov	r3, r0
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d004      	beq.n	80108ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80108e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80108e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80108ea:	2301      	movs	r3, #1
 80108ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	683a      	ldr	r2, [r7, #0]
 80108f2:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}
	return res;
 80108f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	3710      	adds	r7, #16
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}
	...

08010900 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b084      	sub	sp, #16
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f7ff ff87 	bl	801081c <sync_window>
 801090e:	4603      	mov	r3, r0
 8010910:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010912:	7bfb      	ldrb	r3, [r7, #15]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d159      	bne.n	80109cc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	2b03      	cmp	r3, #3
 801091e:	d149      	bne.n	80109b4 <sync_fs+0xb4>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	791b      	ldrb	r3, [r3, #4]
 8010924:	2b01      	cmp	r3, #1
 8010926:	d145      	bne.n	80109b4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	899b      	ldrh	r3, [r3, #12]
 8010932:	461a      	mov	r2, r3
 8010934:	2100      	movs	r1, #0
 8010936:	f7ff fd76 	bl	8010426 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	3340      	adds	r3, #64	; 0x40
 801093e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010942:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010946:	4618      	mov	r0, r3
 8010948:	f7ff fd05 	bl	8010356 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	3340      	adds	r3, #64	; 0x40
 8010950:	4921      	ldr	r1, [pc, #132]	; (80109d8 <sync_fs+0xd8>)
 8010952:	4618      	mov	r0, r3
 8010954:	f7ff fd1a 	bl	801038c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	3340      	adds	r3, #64	; 0x40
 801095c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010960:	491e      	ldr	r1, [pc, #120]	; (80109dc <sync_fs+0xdc>)
 8010962:	4618      	mov	r0, r3
 8010964:	f7ff fd12 	bl	801038c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	3340      	adds	r3, #64	; 0x40
 801096c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	69db      	ldr	r3, [r3, #28]
 8010974:	4619      	mov	r1, r3
 8010976:	4610      	mov	r0, r2
 8010978:	f7ff fd08 	bl	801038c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	3340      	adds	r3, #64	; 0x40
 8010980:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	699b      	ldr	r3, [r3, #24]
 8010988:	4619      	mov	r1, r3
 801098a:	4610      	mov	r0, r2
 801098c:	f7ff fcfe 	bl	801038c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010994:	1c5a      	adds	r2, r3, #1
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	63da      	str	r2, [r3, #60]	; 0x3c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	7858      	ldrb	r0, [r3, #1]
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80109a8:	2301      	movs	r3, #1
 80109aa:	f7ff fc5b 	bl	8010264 <disk_write>
			fs->fsi_flag = 0;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2200      	movs	r2, #0
 80109b2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	785b      	ldrb	r3, [r3, #1]
 80109b8:	2200      	movs	r2, #0
 80109ba:	2100      	movs	r1, #0
 80109bc:	4618      	mov	r0, r3
 80109be:	f7ff fc71 	bl	80102a4 <disk_ioctl>
 80109c2:	4603      	mov	r3, r0
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d001      	beq.n	80109cc <sync_fs+0xcc>
 80109c8:	2301      	movs	r3, #1
 80109ca:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80109cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3710      	adds	r7, #16
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}
 80109d6:	bf00      	nop
 80109d8:	41615252 	.word	0x41615252
 80109dc:	61417272 	.word	0x61417272

080109e0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80109e0:	b480      	push	{r7}
 80109e2:	b083      	sub	sp, #12
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	3b02      	subs	r3, #2
 80109ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109f4:	3b02      	subs	r3, #2
 80109f6:	683a      	ldr	r2, [r7, #0]
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d301      	bcc.n	8010a00 <clust2sect+0x20>
 80109fc:	2300      	movs	r3, #0
 80109fe:	e008      	b.n	8010a12 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	895b      	ldrh	r3, [r3, #10]
 8010a04:	461a      	mov	r2, r3
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	fb03 f202 	mul.w	r2, r3, r2
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a10:	4413      	add	r3, r2
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	370c      	adds	r7, #12
 8010a16:	46bd      	mov	sp, r7
 8010a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1c:	4770      	bx	lr

08010a1e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010a1e:	b580      	push	{r7, lr}
 8010a20:	b086      	sub	sp, #24
 8010a22:	af00      	add	r7, sp, #0
 8010a24:	6078      	str	r0, [r7, #4]
 8010a26:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	2b01      	cmp	r3, #1
 8010a32:	d904      	bls.n	8010a3e <get_fat+0x20>
 8010a34:	693b      	ldr	r3, [r7, #16]
 8010a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a38:	683a      	ldr	r2, [r7, #0]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d302      	bcc.n	8010a44 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010a3e:	2301      	movs	r3, #1
 8010a40:	617b      	str	r3, [r7, #20]
 8010a42:	e0bb      	b.n	8010bbc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010a44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a48:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	2b03      	cmp	r3, #3
 8010a50:	f000 8083 	beq.w	8010b5a <get_fat+0x13c>
 8010a54:	2b03      	cmp	r3, #3
 8010a56:	f300 80a7 	bgt.w	8010ba8 <get_fat+0x18a>
 8010a5a:	2b01      	cmp	r3, #1
 8010a5c:	d002      	beq.n	8010a64 <get_fat+0x46>
 8010a5e:	2b02      	cmp	r3, #2
 8010a60:	d056      	beq.n	8010b10 <get_fat+0xf2>
 8010a62:	e0a1      	b.n	8010ba8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	60fb      	str	r3, [r7, #12]
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	085b      	lsrs	r3, r3, #1
 8010a6c:	68fa      	ldr	r2, [r7, #12]
 8010a6e:	4413      	add	r3, r2
 8010a70:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010a72:	693b      	ldr	r3, [r7, #16]
 8010a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a76:	693b      	ldr	r3, [r7, #16]
 8010a78:	899b      	ldrh	r3, [r3, #12]
 8010a7a:	4619      	mov	r1, r3
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a82:	4413      	add	r3, r2
 8010a84:	4619      	mov	r1, r3
 8010a86:	6938      	ldr	r0, [r7, #16]
 8010a88:	f7ff ff0c 	bl	80108a4 <move_window>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	f040 808d 	bne.w	8010bae <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	1c5a      	adds	r2, r3, #1
 8010a98:	60fa      	str	r2, [r7, #12]
 8010a9a:	693a      	ldr	r2, [r7, #16]
 8010a9c:	8992      	ldrh	r2, [r2, #12]
 8010a9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010aa2:	fb02 f201 	mul.w	r2, r2, r1
 8010aa6:	1a9b      	subs	r3, r3, r2
 8010aa8:	693a      	ldr	r2, [r7, #16]
 8010aaa:	4413      	add	r3, r2
 8010aac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ab0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010ab2:	693b      	ldr	r3, [r7, #16]
 8010ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010ab6:	693b      	ldr	r3, [r7, #16]
 8010ab8:	899b      	ldrh	r3, [r3, #12]
 8010aba:	4619      	mov	r1, r3
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8010ac2:	4413      	add	r3, r2
 8010ac4:	4619      	mov	r1, r3
 8010ac6:	6938      	ldr	r0, [r7, #16]
 8010ac8:	f7ff feec 	bl	80108a4 <move_window>
 8010acc:	4603      	mov	r3, r0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d16f      	bne.n	8010bb2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	899b      	ldrh	r3, [r3, #12]
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ade:	fb02 f201 	mul.w	r2, r2, r1
 8010ae2:	1a9b      	subs	r3, r3, r2
 8010ae4:	693a      	ldr	r2, [r7, #16]
 8010ae6:	4413      	add	r3, r2
 8010ae8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010aec:	021b      	lsls	r3, r3, #8
 8010aee:	461a      	mov	r2, r3
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	4313      	orrs	r3, r2
 8010af4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	f003 0301 	and.w	r3, r3, #1
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d002      	beq.n	8010b06 <get_fat+0xe8>
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	091b      	lsrs	r3, r3, #4
 8010b04:	e002      	b.n	8010b0c <get_fat+0xee>
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010b0c:	617b      	str	r3, [r7, #20]
			break;
 8010b0e:	e055      	b.n	8010bbc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010b10:	693b      	ldr	r3, [r7, #16]
 8010b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010b14:	693b      	ldr	r3, [r7, #16]
 8010b16:	899b      	ldrh	r3, [r3, #12]
 8010b18:	085b      	lsrs	r3, r3, #1
 8010b1a:	b29b      	uxth	r3, r3
 8010b1c:	4619      	mov	r1, r3
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	fbb3 f3f1 	udiv	r3, r3, r1
 8010b24:	4413      	add	r3, r2
 8010b26:	4619      	mov	r1, r3
 8010b28:	6938      	ldr	r0, [r7, #16]
 8010b2a:	f7ff febb 	bl	80108a4 <move_window>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d140      	bne.n	8010bb6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010b34:	693b      	ldr	r3, [r7, #16]
 8010b36:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	005b      	lsls	r3, r3, #1
 8010b3e:	693a      	ldr	r2, [r7, #16]
 8010b40:	8992      	ldrh	r2, [r2, #12]
 8010b42:	fbb3 f0f2 	udiv	r0, r3, r2
 8010b46:	fb02 f200 	mul.w	r2, r2, r0
 8010b4a:	1a9b      	subs	r3, r3, r2
 8010b4c:	440b      	add	r3, r1
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7ff fbc6 	bl	80102e0 <ld_word>
 8010b54:	4603      	mov	r3, r0
 8010b56:	617b      	str	r3, [r7, #20]
			break;
 8010b58:	e030      	b.n	8010bbc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010b5e:	693b      	ldr	r3, [r7, #16]
 8010b60:	899b      	ldrh	r3, [r3, #12]
 8010b62:	089b      	lsrs	r3, r3, #2
 8010b64:	b29b      	uxth	r3, r3
 8010b66:	4619      	mov	r1, r3
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010b6e:	4413      	add	r3, r2
 8010b70:	4619      	mov	r1, r3
 8010b72:	6938      	ldr	r0, [r7, #16]
 8010b74:	f7ff fe96 	bl	80108a4 <move_window>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d11d      	bne.n	8010bba <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	009b      	lsls	r3, r3, #2
 8010b88:	693a      	ldr	r2, [r7, #16]
 8010b8a:	8992      	ldrh	r2, [r2, #12]
 8010b8c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010b90:	fb02 f200 	mul.w	r2, r2, r0
 8010b94:	1a9b      	subs	r3, r3, r2
 8010b96:	440b      	add	r3, r1
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7ff fbb9 	bl	8010310 <ld_dword>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010ba4:	617b      	str	r3, [r7, #20]
			break;
 8010ba6:	e009      	b.n	8010bbc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010ba8:	2301      	movs	r3, #1
 8010baa:	617b      	str	r3, [r7, #20]
 8010bac:	e006      	b.n	8010bbc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010bae:	bf00      	nop
 8010bb0:	e004      	b.n	8010bbc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010bb2:	bf00      	nop
 8010bb4:	e002      	b.n	8010bbc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010bb6:	bf00      	nop
 8010bb8:	e000      	b.n	8010bbc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010bba:	bf00      	nop
		}
	}

	return val;
 8010bbc:	697b      	ldr	r3, [r7, #20]
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3718      	adds	r7, #24
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}

08010bc6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010bc6:	b590      	push	{r4, r7, lr}
 8010bc8:	b089      	sub	sp, #36	; 0x24
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	60f8      	str	r0, [r7, #12]
 8010bce:	60b9      	str	r1, [r7, #8]
 8010bd0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010bd2:	2302      	movs	r3, #2
 8010bd4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	2b01      	cmp	r3, #1
 8010bda:	f240 8102 	bls.w	8010de2 <put_fat+0x21c>
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010be2:	68ba      	ldr	r2, [r7, #8]
 8010be4:	429a      	cmp	r2, r3
 8010be6:	f080 80fc 	bcs.w	8010de2 <put_fat+0x21c>
		switch (fs->fs_type) {
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	781b      	ldrb	r3, [r3, #0]
 8010bee:	2b03      	cmp	r3, #3
 8010bf0:	f000 80b6 	beq.w	8010d60 <put_fat+0x19a>
 8010bf4:	2b03      	cmp	r3, #3
 8010bf6:	f300 80fd 	bgt.w	8010df4 <put_fat+0x22e>
 8010bfa:	2b01      	cmp	r3, #1
 8010bfc:	d003      	beq.n	8010c06 <put_fat+0x40>
 8010bfe:	2b02      	cmp	r3, #2
 8010c00:	f000 8083 	beq.w	8010d0a <put_fat+0x144>
 8010c04:	e0f6      	b.n	8010df4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	61bb      	str	r3, [r7, #24]
 8010c0a:	69bb      	ldr	r3, [r7, #24]
 8010c0c:	085b      	lsrs	r3, r3, #1
 8010c0e:	69ba      	ldr	r2, [r7, #24]
 8010c10:	4413      	add	r3, r2
 8010c12:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	899b      	ldrh	r3, [r3, #12]
 8010c1c:	4619      	mov	r1, r3
 8010c1e:	69bb      	ldr	r3, [r7, #24]
 8010c20:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c24:	4413      	add	r3, r2
 8010c26:	4619      	mov	r1, r3
 8010c28:	68f8      	ldr	r0, [r7, #12]
 8010c2a:	f7ff fe3b 	bl	80108a4 <move_window>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010c32:	7ffb      	ldrb	r3, [r7, #31]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	f040 80d6 	bne.w	8010de6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8010c40:	69bb      	ldr	r3, [r7, #24]
 8010c42:	1c5a      	adds	r2, r3, #1
 8010c44:	61ba      	str	r2, [r7, #24]
 8010c46:	68fa      	ldr	r2, [r7, #12]
 8010c48:	8992      	ldrh	r2, [r2, #12]
 8010c4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8010c4e:	fb02 f200 	mul.w	r2, r2, r0
 8010c52:	1a9b      	subs	r3, r3, r2
 8010c54:	440b      	add	r3, r1
 8010c56:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	f003 0301 	and.w	r3, r3, #1
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d00d      	beq.n	8010c7e <put_fat+0xb8>
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	781b      	ldrb	r3, [r3, #0]
 8010c66:	b25b      	sxtb	r3, r3
 8010c68:	f003 030f 	and.w	r3, r3, #15
 8010c6c:	b25a      	sxtb	r2, r3
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	b2db      	uxtb	r3, r3
 8010c72:	011b      	lsls	r3, r3, #4
 8010c74:	b25b      	sxtb	r3, r3
 8010c76:	4313      	orrs	r3, r2
 8010c78:	b25b      	sxtb	r3, r3
 8010c7a:	b2db      	uxtb	r3, r3
 8010c7c:	e001      	b.n	8010c82 <put_fat+0xbc>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	b2db      	uxtb	r3, r3
 8010c82:	697a      	ldr	r2, [r7, #20]
 8010c84:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	2201      	movs	r2, #1
 8010c8a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	899b      	ldrh	r3, [r3, #12]
 8010c94:	4619      	mov	r1, r3
 8010c96:	69bb      	ldr	r3, [r7, #24]
 8010c98:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c9c:	4413      	add	r3, r2
 8010c9e:	4619      	mov	r1, r3
 8010ca0:	68f8      	ldr	r0, [r7, #12]
 8010ca2:	f7ff fdff 	bl	80108a4 <move_window>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010caa:	7ffb      	ldrb	r3, [r7, #31]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	f040 809c 	bne.w	8010dea <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	899b      	ldrh	r3, [r3, #12]
 8010cbc:	461a      	mov	r2, r3
 8010cbe:	69bb      	ldr	r3, [r7, #24]
 8010cc0:	fbb3 f0f2 	udiv	r0, r3, r2
 8010cc4:	fb02 f200 	mul.w	r2, r2, r0
 8010cc8:	1a9b      	subs	r3, r3, r2
 8010cca:	440b      	add	r3, r1
 8010ccc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	f003 0301 	and.w	r3, r3, #1
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d003      	beq.n	8010ce0 <put_fat+0x11a>
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	091b      	lsrs	r3, r3, #4
 8010cdc:	b2db      	uxtb	r3, r3
 8010cde:	e00e      	b.n	8010cfe <put_fat+0x138>
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	b25b      	sxtb	r3, r3
 8010ce6:	f023 030f 	bic.w	r3, r3, #15
 8010cea:	b25a      	sxtb	r2, r3
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	0a1b      	lsrs	r3, r3, #8
 8010cf0:	b25b      	sxtb	r3, r3
 8010cf2:	f003 030f 	and.w	r3, r3, #15
 8010cf6:	b25b      	sxtb	r3, r3
 8010cf8:	4313      	orrs	r3, r2
 8010cfa:	b25b      	sxtb	r3, r3
 8010cfc:	b2db      	uxtb	r3, r3
 8010cfe:	697a      	ldr	r2, [r7, #20]
 8010d00:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	2201      	movs	r2, #1
 8010d06:	70da      	strb	r2, [r3, #3]
			break;
 8010d08:	e074      	b.n	8010df4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	899b      	ldrh	r3, [r3, #12]
 8010d12:	085b      	lsrs	r3, r3, #1
 8010d14:	b29b      	uxth	r3, r3
 8010d16:	4619      	mov	r1, r3
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d1e:	4413      	add	r3, r2
 8010d20:	4619      	mov	r1, r3
 8010d22:	68f8      	ldr	r0, [r7, #12]
 8010d24:	f7ff fdbe 	bl	80108a4 <move_window>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010d2c:	7ffb      	ldrb	r3, [r7, #31]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d15d      	bne.n	8010dee <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8010d38:	68bb      	ldr	r3, [r7, #8]
 8010d3a:	005b      	lsls	r3, r3, #1
 8010d3c:	68fa      	ldr	r2, [r7, #12]
 8010d3e:	8992      	ldrh	r2, [r2, #12]
 8010d40:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d44:	fb02 f200 	mul.w	r2, r2, r0
 8010d48:	1a9b      	subs	r3, r3, r2
 8010d4a:	440b      	add	r3, r1
 8010d4c:	687a      	ldr	r2, [r7, #4]
 8010d4e:	b292      	uxth	r2, r2
 8010d50:	4611      	mov	r1, r2
 8010d52:	4618      	mov	r0, r3
 8010d54:	f7ff faff 	bl	8010356 <st_word>
			fs->wflag = 1;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	2201      	movs	r2, #1
 8010d5c:	70da      	strb	r2, [r3, #3]
			break;
 8010d5e:	e049      	b.n	8010df4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	899b      	ldrh	r3, [r3, #12]
 8010d68:	089b      	lsrs	r3, r3, #2
 8010d6a:	b29b      	uxth	r3, r3
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d74:	4413      	add	r3, r2
 8010d76:	4619      	mov	r1, r3
 8010d78:	68f8      	ldr	r0, [r7, #12]
 8010d7a:	f7ff fd93 	bl	80108a4 <move_window>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010d82:	7ffb      	ldrb	r3, [r7, #31]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d134      	bne.n	8010df2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	009b      	lsls	r3, r3, #2
 8010d98:	68fa      	ldr	r2, [r7, #12]
 8010d9a:	8992      	ldrh	r2, [r2, #12]
 8010d9c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010da0:	fb02 f200 	mul.w	r2, r2, r0
 8010da4:	1a9b      	subs	r3, r3, r2
 8010da6:	440b      	add	r3, r1
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7ff fab1 	bl	8010310 <ld_dword>
 8010dae:	4603      	mov	r3, r0
 8010db0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010db4:	4323      	orrs	r3, r4
 8010db6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8010dbe:	68bb      	ldr	r3, [r7, #8]
 8010dc0:	009b      	lsls	r3, r3, #2
 8010dc2:	68fa      	ldr	r2, [r7, #12]
 8010dc4:	8992      	ldrh	r2, [r2, #12]
 8010dc6:	fbb3 f0f2 	udiv	r0, r3, r2
 8010dca:	fb02 f200 	mul.w	r2, r2, r0
 8010dce:	1a9b      	subs	r3, r3, r2
 8010dd0:	440b      	add	r3, r1
 8010dd2:	6879      	ldr	r1, [r7, #4]
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7ff fad9 	bl	801038c <st_dword>
			fs->wflag = 1;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	2201      	movs	r2, #1
 8010dde:	70da      	strb	r2, [r3, #3]
			break;
 8010de0:	e008      	b.n	8010df4 <put_fat+0x22e>
		}
	}
 8010de2:	bf00      	nop
 8010de4:	e006      	b.n	8010df4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8010de6:	bf00      	nop
 8010de8:	e004      	b.n	8010df4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8010dea:	bf00      	nop
 8010dec:	e002      	b.n	8010df4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8010dee:	bf00      	nop
 8010df0:	e000      	b.n	8010df4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8010df2:	bf00      	nop
	return res;
 8010df4:	7ffb      	ldrb	r3, [r7, #31]
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3724      	adds	r7, #36	; 0x24
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd90      	pop	{r4, r7, pc}

08010dfe <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010dfe:	b580      	push	{r7, lr}
 8010e00:	b088      	sub	sp, #32
 8010e02:	af00      	add	r7, sp, #0
 8010e04:	60f8      	str	r0, [r7, #12]
 8010e06:	60b9      	str	r1, [r7, #8]
 8010e08:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	2b01      	cmp	r3, #1
 8010e18:	d904      	bls.n	8010e24 <remove_chain+0x26>
 8010e1a:	69bb      	ldr	r3, [r7, #24]
 8010e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e1e:	68ba      	ldr	r2, [r7, #8]
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d301      	bcc.n	8010e28 <remove_chain+0x2a>
 8010e24:	2302      	movs	r3, #2
 8010e26:	e04b      	b.n	8010ec0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d00c      	beq.n	8010e48 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010e2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e32:	6879      	ldr	r1, [r7, #4]
 8010e34:	69b8      	ldr	r0, [r7, #24]
 8010e36:	f7ff fec6 	bl	8010bc6 <put_fat>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010e3e:	7ffb      	ldrb	r3, [r7, #31]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d001      	beq.n	8010e48 <remove_chain+0x4a>
 8010e44:	7ffb      	ldrb	r3, [r7, #31]
 8010e46:	e03b      	b.n	8010ec0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010e48:	68b9      	ldr	r1, [r7, #8]
 8010e4a:	68f8      	ldr	r0, [r7, #12]
 8010e4c:	f7ff fde7 	bl	8010a1e <get_fat>
 8010e50:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d031      	beq.n	8010ebc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	2b01      	cmp	r3, #1
 8010e5c:	d101      	bne.n	8010e62 <remove_chain+0x64>
 8010e5e:	2302      	movs	r3, #2
 8010e60:	e02e      	b.n	8010ec0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e68:	d101      	bne.n	8010e6e <remove_chain+0x70>
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	e028      	b.n	8010ec0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010e6e:	2200      	movs	r2, #0
 8010e70:	68b9      	ldr	r1, [r7, #8]
 8010e72:	69b8      	ldr	r0, [r7, #24]
 8010e74:	f7ff fea7 	bl	8010bc6 <put_fat>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010e7c:	7ffb      	ldrb	r3, [r7, #31]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d001      	beq.n	8010e86 <remove_chain+0x88>
 8010e82:	7ffb      	ldrb	r3, [r7, #31]
 8010e84:	e01c      	b.n	8010ec0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010e86:	69bb      	ldr	r3, [r7, #24]
 8010e88:	69da      	ldr	r2, [r3, #28]
 8010e8a:	69bb      	ldr	r3, [r7, #24]
 8010e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e8e:	3b02      	subs	r3, #2
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d20b      	bcs.n	8010eac <remove_chain+0xae>
			fs->free_clst++;
 8010e94:	69bb      	ldr	r3, [r7, #24]
 8010e96:	69db      	ldr	r3, [r3, #28]
 8010e98:	1c5a      	adds	r2, r3, #1
 8010e9a:	69bb      	ldr	r3, [r7, #24]
 8010e9c:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8010e9e:	69bb      	ldr	r3, [r7, #24]
 8010ea0:	791b      	ldrb	r3, [r3, #4]
 8010ea2:	f043 0301 	orr.w	r3, r3, #1
 8010ea6:	b2da      	uxtb	r2, r3
 8010ea8:	69bb      	ldr	r3, [r7, #24]
 8010eaa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eb4:	68ba      	ldr	r2, [r7, #8]
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	d3c6      	bcc.n	8010e48 <remove_chain+0x4a>
 8010eba:	e000      	b.n	8010ebe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010ebc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010ebe:	2300      	movs	r3, #0
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3720      	adds	r7, #32
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}

08010ec8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b088      	sub	sp, #32
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d10d      	bne.n	8010efa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010ede:	693b      	ldr	r3, [r7, #16]
 8010ee0:	699b      	ldr	r3, [r3, #24]
 8010ee2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010ee4:	69bb      	ldr	r3, [r7, #24]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d004      	beq.n	8010ef4 <create_chain+0x2c>
 8010eea:	693b      	ldr	r3, [r7, #16]
 8010eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eee:	69ba      	ldr	r2, [r7, #24]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d31b      	bcc.n	8010f2c <create_chain+0x64>
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	61bb      	str	r3, [r7, #24]
 8010ef8:	e018      	b.n	8010f2c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010efa:	6839      	ldr	r1, [r7, #0]
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f7ff fd8e 	bl	8010a1e <get_fat>
 8010f02:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2b01      	cmp	r3, #1
 8010f08:	d801      	bhi.n	8010f0e <create_chain+0x46>
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	e070      	b.n	8010ff0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f14:	d101      	bne.n	8010f1a <create_chain+0x52>
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	e06a      	b.n	8010ff0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010f1a:	693b      	ldr	r3, [r7, #16]
 8010f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f1e:	68fa      	ldr	r2, [r7, #12]
 8010f20:	429a      	cmp	r2, r3
 8010f22:	d201      	bcs.n	8010f28 <create_chain+0x60>
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	e063      	b.n	8010ff0 <create_chain+0x128>
		scl = clst;
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010f2c:	69bb      	ldr	r3, [r7, #24]
 8010f2e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010f30:	69fb      	ldr	r3, [r7, #28]
 8010f32:	3301      	adds	r3, #1
 8010f34:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f3a:	69fa      	ldr	r2, [r7, #28]
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d307      	bcc.n	8010f50 <create_chain+0x88>
				ncl = 2;
 8010f40:	2302      	movs	r3, #2
 8010f42:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010f44:	69fa      	ldr	r2, [r7, #28]
 8010f46:	69bb      	ldr	r3, [r7, #24]
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d901      	bls.n	8010f50 <create_chain+0x88>
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	e04f      	b.n	8010ff0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010f50:	69f9      	ldr	r1, [r7, #28]
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f7ff fd63 	bl	8010a1e <get_fat>
 8010f58:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d00e      	beq.n	8010f7e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	2b01      	cmp	r3, #1
 8010f64:	d003      	beq.n	8010f6e <create_chain+0xa6>
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f6c:	d101      	bne.n	8010f72 <create_chain+0xaa>
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	e03e      	b.n	8010ff0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010f72:	69fa      	ldr	r2, [r7, #28]
 8010f74:	69bb      	ldr	r3, [r7, #24]
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d1da      	bne.n	8010f30 <create_chain+0x68>
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	e038      	b.n	8010ff0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010f7e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f84:	69f9      	ldr	r1, [r7, #28]
 8010f86:	6938      	ldr	r0, [r7, #16]
 8010f88:	f7ff fe1d 	bl	8010bc6 <put_fat>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010f90:	7dfb      	ldrb	r3, [r7, #23]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d109      	bne.n	8010faa <create_chain+0xe2>
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d006      	beq.n	8010faa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010f9c:	69fa      	ldr	r2, [r7, #28]
 8010f9e:	6839      	ldr	r1, [r7, #0]
 8010fa0:	6938      	ldr	r0, [r7, #16]
 8010fa2:	f7ff fe10 	bl	8010bc6 <put_fat>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010faa:	7dfb      	ldrb	r3, [r7, #23]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d116      	bne.n	8010fde <create_chain+0x116>
		fs->last_clst = ncl;
 8010fb0:	693b      	ldr	r3, [r7, #16]
 8010fb2:	69fa      	ldr	r2, [r7, #28]
 8010fb4:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010fb6:	693b      	ldr	r3, [r7, #16]
 8010fb8:	69da      	ldr	r2, [r3, #28]
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fbe:	3b02      	subs	r3, #2
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d804      	bhi.n	8010fce <create_chain+0x106>
 8010fc4:	693b      	ldr	r3, [r7, #16]
 8010fc6:	69db      	ldr	r3, [r3, #28]
 8010fc8:	1e5a      	subs	r2, r3, #1
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8010fce:	693b      	ldr	r3, [r7, #16]
 8010fd0:	791b      	ldrb	r3, [r3, #4]
 8010fd2:	f043 0301 	orr.w	r3, r3, #1
 8010fd6:	b2da      	uxtb	r2, r3
 8010fd8:	693b      	ldr	r3, [r7, #16]
 8010fda:	711a      	strb	r2, [r3, #4]
 8010fdc:	e007      	b.n	8010fee <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010fde:	7dfb      	ldrb	r3, [r7, #23]
 8010fe0:	2b01      	cmp	r3, #1
 8010fe2:	d102      	bne.n	8010fea <create_chain+0x122>
 8010fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010fe8:	e000      	b.n	8010fec <create_chain+0x124>
 8010fea:	2301      	movs	r3, #1
 8010fec:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010fee:	69fb      	ldr	r3, [r7, #28]
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	3720      	adds	r7, #32
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}

08010ff8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010ff8:	b480      	push	{r7}
 8010ffa:	b087      	sub	sp, #28
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801100c:	3304      	adds	r3, #4
 801100e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	899b      	ldrh	r3, [r3, #12]
 8011014:	461a      	mov	r2, r3
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	fbb3 f3f2 	udiv	r3, r3, r2
 801101c:	68fa      	ldr	r2, [r7, #12]
 801101e:	8952      	ldrh	r2, [r2, #10]
 8011020:	fbb3 f3f2 	udiv	r3, r3, r2
 8011024:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	1d1a      	adds	r2, r3, #4
 801102a:	613a      	str	r2, [r7, #16]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d101      	bne.n	801103a <clmt_clust+0x42>
 8011036:	2300      	movs	r3, #0
 8011038:	e010      	b.n	801105c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801103a:	697a      	ldr	r2, [r7, #20]
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	429a      	cmp	r2, r3
 8011040:	d307      	bcc.n	8011052 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011042:	697a      	ldr	r2, [r7, #20]
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	1ad3      	subs	r3, r2, r3
 8011048:	617b      	str	r3, [r7, #20]
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	3304      	adds	r3, #4
 801104e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011050:	e7e9      	b.n	8011026 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011052:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	681a      	ldr	r2, [r3, #0]
 8011058:	697b      	ldr	r3, [r7, #20]
 801105a:	4413      	add	r3, r2
}
 801105c:	4618      	mov	r0, r3
 801105e:	371c      	adds	r7, #28
 8011060:	46bd      	mov	sp, r7
 8011062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011066:	4770      	bx	lr

08011068 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b086      	sub	sp, #24
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801107e:	d204      	bcs.n	801108a <dir_sdi+0x22>
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	f003 031f 	and.w	r3, r3, #31
 8011086:	2b00      	cmp	r3, #0
 8011088:	d001      	beq.n	801108e <dir_sdi+0x26>
		return FR_INT_ERR;
 801108a:	2302      	movs	r3, #2
 801108c:	e071      	b.n	8011172 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	683a      	ldr	r2, [r7, #0]
 8011092:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	689b      	ldr	r3, [r3, #8]
 8011098:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801109a:	697b      	ldr	r3, [r7, #20]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d106      	bne.n	80110ae <dir_sdi+0x46>
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	781b      	ldrb	r3, [r3, #0]
 80110a4:	2b02      	cmp	r3, #2
 80110a6:	d902      	bls.n	80110ae <dir_sdi+0x46>
		clst = fs->dirbase;
 80110a8:	693b      	ldr	r3, [r7, #16]
 80110aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110ac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d10c      	bne.n	80110ce <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	095b      	lsrs	r3, r3, #5
 80110b8:	693a      	ldr	r2, [r7, #16]
 80110ba:	8912      	ldrh	r2, [r2, #8]
 80110bc:	4293      	cmp	r3, r2
 80110be:	d301      	bcc.n	80110c4 <dir_sdi+0x5c>
 80110c0:	2302      	movs	r3, #2
 80110c2:	e056      	b.n	8011172 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	61da      	str	r2, [r3, #28]
 80110cc:	e02d      	b.n	801112a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80110ce:	693b      	ldr	r3, [r7, #16]
 80110d0:	895b      	ldrh	r3, [r3, #10]
 80110d2:	461a      	mov	r2, r3
 80110d4:	693b      	ldr	r3, [r7, #16]
 80110d6:	899b      	ldrh	r3, [r3, #12]
 80110d8:	fb03 f302 	mul.w	r3, r3, r2
 80110dc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80110de:	e019      	b.n	8011114 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	6979      	ldr	r1, [r7, #20]
 80110e4:	4618      	mov	r0, r3
 80110e6:	f7ff fc9a 	bl	8010a1e <get_fat>
 80110ea:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80110ec:	697b      	ldr	r3, [r7, #20]
 80110ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110f2:	d101      	bne.n	80110f8 <dir_sdi+0x90>
 80110f4:	2301      	movs	r3, #1
 80110f6:	e03c      	b.n	8011172 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	2b01      	cmp	r3, #1
 80110fc:	d904      	bls.n	8011108 <dir_sdi+0xa0>
 80110fe:	693b      	ldr	r3, [r7, #16]
 8011100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011102:	697a      	ldr	r2, [r7, #20]
 8011104:	429a      	cmp	r2, r3
 8011106:	d301      	bcc.n	801110c <dir_sdi+0xa4>
 8011108:	2302      	movs	r3, #2
 801110a:	e032      	b.n	8011172 <dir_sdi+0x10a>
			ofs -= csz;
 801110c:	683a      	ldr	r2, [r7, #0]
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	1ad3      	subs	r3, r2, r3
 8011112:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011114:	683a      	ldr	r2, [r7, #0]
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	429a      	cmp	r2, r3
 801111a:	d2e1      	bcs.n	80110e0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801111c:	6979      	ldr	r1, [r7, #20]
 801111e:	6938      	ldr	r0, [r7, #16]
 8011120:	f7ff fc5e 	bl	80109e0 <clust2sect>
 8011124:	4602      	mov	r2, r0
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	697a      	ldr	r2, [r7, #20]
 801112e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	69db      	ldr	r3, [r3, #28]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d101      	bne.n	801113c <dir_sdi+0xd4>
 8011138:	2302      	movs	r3, #2
 801113a:	e01a      	b.n	8011172 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	69da      	ldr	r2, [r3, #28]
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	899b      	ldrh	r3, [r3, #12]
 8011144:	4619      	mov	r1, r3
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	fbb3 f3f1 	udiv	r3, r3, r1
 801114c:	441a      	add	r2, r3
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011152:	693b      	ldr	r3, [r7, #16]
 8011154:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	899b      	ldrh	r3, [r3, #12]
 801115c:	461a      	mov	r2, r3
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	fbb3 f0f2 	udiv	r0, r3, r2
 8011164:	fb02 f200 	mul.w	r2, r2, r0
 8011168:	1a9b      	subs	r3, r3, r2
 801116a:	18ca      	adds	r2, r1, r3
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011170:	2300      	movs	r3, #0
}
 8011172:	4618      	mov	r0, r3
 8011174:	3718      	adds	r7, #24
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}

0801117a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801117a:	b580      	push	{r7, lr}
 801117c:	b086      	sub	sp, #24
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
 8011182:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	695b      	ldr	r3, [r3, #20]
 801118e:	3320      	adds	r3, #32
 8011190:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	69db      	ldr	r3, [r3, #28]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d003      	beq.n	80111a2 <dir_next+0x28>
 801119a:	68bb      	ldr	r3, [r7, #8]
 801119c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80111a0:	d301      	bcc.n	80111a6 <dir_next+0x2c>
 80111a2:	2304      	movs	r3, #4
 80111a4:	e0bb      	b.n	801131e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	899b      	ldrh	r3, [r3, #12]
 80111aa:	461a      	mov	r2, r3
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80111b2:	fb02 f201 	mul.w	r2, r2, r1
 80111b6:	1a9b      	subs	r3, r3, r2
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	f040 809d 	bne.w	80112f8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	69db      	ldr	r3, [r3, #28]
 80111c2:	1c5a      	adds	r2, r3, #1
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	699b      	ldr	r3, [r3, #24]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d10b      	bne.n	80111e8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	095b      	lsrs	r3, r3, #5
 80111d4:	68fa      	ldr	r2, [r7, #12]
 80111d6:	8912      	ldrh	r2, [r2, #8]
 80111d8:	4293      	cmp	r3, r2
 80111da:	f0c0 808d 	bcc.w	80112f8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2200      	movs	r2, #0
 80111e2:	61da      	str	r2, [r3, #28]
 80111e4:	2304      	movs	r3, #4
 80111e6:	e09a      	b.n	801131e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	899b      	ldrh	r3, [r3, #12]
 80111ec:	461a      	mov	r2, r3
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80111f4:	68fa      	ldr	r2, [r7, #12]
 80111f6:	8952      	ldrh	r2, [r2, #10]
 80111f8:	3a01      	subs	r2, #1
 80111fa:	4013      	ands	r3, r2
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d17b      	bne.n	80112f8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011200:	687a      	ldr	r2, [r7, #4]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	699b      	ldr	r3, [r3, #24]
 8011206:	4619      	mov	r1, r3
 8011208:	4610      	mov	r0, r2
 801120a:	f7ff fc08 	bl	8010a1e <get_fat>
 801120e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	2b01      	cmp	r3, #1
 8011214:	d801      	bhi.n	801121a <dir_next+0xa0>
 8011216:	2302      	movs	r3, #2
 8011218:	e081      	b.n	801131e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011220:	d101      	bne.n	8011226 <dir_next+0xac>
 8011222:	2301      	movs	r3, #1
 8011224:	e07b      	b.n	801131e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801122a:	697a      	ldr	r2, [r7, #20]
 801122c:	429a      	cmp	r2, r3
 801122e:	d359      	bcc.n	80112e4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d104      	bne.n	8011240 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	2200      	movs	r2, #0
 801123a:	61da      	str	r2, [r3, #28]
 801123c:	2304      	movs	r3, #4
 801123e:	e06e      	b.n	801131e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011240:	687a      	ldr	r2, [r7, #4]
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	699b      	ldr	r3, [r3, #24]
 8011246:	4619      	mov	r1, r3
 8011248:	4610      	mov	r0, r2
 801124a:	f7ff fe3d 	bl	8010ec8 <create_chain>
 801124e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d101      	bne.n	801125a <dir_next+0xe0>
 8011256:	2307      	movs	r3, #7
 8011258:	e061      	b.n	801131e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	2b01      	cmp	r3, #1
 801125e:	d101      	bne.n	8011264 <dir_next+0xea>
 8011260:	2302      	movs	r3, #2
 8011262:	e05c      	b.n	801131e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801126a:	d101      	bne.n	8011270 <dir_next+0xf6>
 801126c:	2301      	movs	r3, #1
 801126e:	e056      	b.n	801131e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011270:	68f8      	ldr	r0, [r7, #12]
 8011272:	f7ff fad3 	bl	801081c <sync_window>
 8011276:	4603      	mov	r3, r0
 8011278:	2b00      	cmp	r3, #0
 801127a:	d001      	beq.n	8011280 <dir_next+0x106>
 801127c:	2301      	movs	r3, #1
 801127e:	e04e      	b.n	801131e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	899b      	ldrh	r3, [r3, #12]
 801128a:	461a      	mov	r2, r3
 801128c:	2100      	movs	r1, #0
 801128e:	f7ff f8ca 	bl	8010426 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011292:	2300      	movs	r3, #0
 8011294:	613b      	str	r3, [r7, #16]
 8011296:	6979      	ldr	r1, [r7, #20]
 8011298:	68f8      	ldr	r0, [r7, #12]
 801129a:	f7ff fba1 	bl	80109e0 <clust2sect>
 801129e:	4602      	mov	r2, r0
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80112a4:	e012      	b.n	80112cc <dir_next+0x152>
						fs->wflag = 1;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	2201      	movs	r2, #1
 80112aa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80112ac:	68f8      	ldr	r0, [r7, #12]
 80112ae:	f7ff fab5 	bl	801081c <sync_window>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d001      	beq.n	80112bc <dir_next+0x142>
 80112b8:	2301      	movs	r3, #1
 80112ba:	e030      	b.n	801131e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80112bc:	693b      	ldr	r3, [r7, #16]
 80112be:	3301      	adds	r3, #1
 80112c0:	613b      	str	r3, [r7, #16]
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112c6:	1c5a      	adds	r2, r3, #1
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	895b      	ldrh	r3, [r3, #10]
 80112d0:	461a      	mov	r2, r3
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	4293      	cmp	r3, r2
 80112d6:	d3e6      	bcc.n	80112a6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80112dc:	693b      	ldr	r3, [r7, #16]
 80112de:	1ad2      	subs	r2, r2, r3
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	63da      	str	r2, [r3, #60]	; 0x3c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	697a      	ldr	r2, [r7, #20]
 80112e8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80112ea:	6979      	ldr	r1, [r7, #20]
 80112ec:	68f8      	ldr	r0, [r7, #12]
 80112ee:	f7ff fb77 	bl	80109e0 <clust2sect>
 80112f2:	4602      	mov	r2, r0
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	68ba      	ldr	r2, [r7, #8]
 80112fc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	899b      	ldrh	r3, [r3, #12]
 8011308:	461a      	mov	r2, r3
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011310:	fb02 f200 	mul.w	r2, r2, r0
 8011314:	1a9b      	subs	r3, r3, r2
 8011316:	18ca      	adds	r2, r1, r3
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801131c:	2300      	movs	r3, #0
}
 801131e:	4618      	mov	r0, r3
 8011320:	3718      	adds	r7, #24
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}

08011326 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011326:	b580      	push	{r7, lr}
 8011328:	b086      	sub	sp, #24
 801132a:	af00      	add	r7, sp, #0
 801132c:	6078      	str	r0, [r7, #4]
 801132e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011336:	2100      	movs	r1, #0
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f7ff fe95 	bl	8011068 <dir_sdi>
 801133e:	4603      	mov	r3, r0
 8011340:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011342:	7dfb      	ldrb	r3, [r7, #23]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d12b      	bne.n	80113a0 <dir_alloc+0x7a>
		n = 0;
 8011348:	2300      	movs	r3, #0
 801134a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	69db      	ldr	r3, [r3, #28]
 8011350:	4619      	mov	r1, r3
 8011352:	68f8      	ldr	r0, [r7, #12]
 8011354:	f7ff faa6 	bl	80108a4 <move_window>
 8011358:	4603      	mov	r3, r0
 801135a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801135c:	7dfb      	ldrb	r3, [r7, #23]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d11d      	bne.n	801139e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6a1b      	ldr	r3, [r3, #32]
 8011366:	781b      	ldrb	r3, [r3, #0]
 8011368:	2be5      	cmp	r3, #229	; 0xe5
 801136a:	d004      	beq.n	8011376 <dir_alloc+0x50>
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6a1b      	ldr	r3, [r3, #32]
 8011370:	781b      	ldrb	r3, [r3, #0]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d107      	bne.n	8011386 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	3301      	adds	r3, #1
 801137a:	613b      	str	r3, [r7, #16]
 801137c:	693a      	ldr	r2, [r7, #16]
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	429a      	cmp	r2, r3
 8011382:	d102      	bne.n	801138a <dir_alloc+0x64>
 8011384:	e00c      	b.n	80113a0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011386:	2300      	movs	r3, #0
 8011388:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801138a:	2101      	movs	r1, #1
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f7ff fef4 	bl	801117a <dir_next>
 8011392:	4603      	mov	r3, r0
 8011394:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011396:	7dfb      	ldrb	r3, [r7, #23]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d0d7      	beq.n	801134c <dir_alloc+0x26>
 801139c:	e000      	b.n	80113a0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801139e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80113a0:	7dfb      	ldrb	r3, [r7, #23]
 80113a2:	2b04      	cmp	r3, #4
 80113a4:	d101      	bne.n	80113aa <dir_alloc+0x84>
 80113a6:	2307      	movs	r3, #7
 80113a8:	75fb      	strb	r3, [r7, #23]
	return res;
 80113aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80113ac:	4618      	mov	r0, r3
 80113ae:	3718      	adds	r7, #24
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}

080113b4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b084      	sub	sp, #16
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
 80113bc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80113be:	683b      	ldr	r3, [r7, #0]
 80113c0:	331a      	adds	r3, #26
 80113c2:	4618      	mov	r0, r3
 80113c4:	f7fe ff8c 	bl	80102e0 <ld_word>
 80113c8:	4603      	mov	r3, r0
 80113ca:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	2b03      	cmp	r3, #3
 80113d2:	d109      	bne.n	80113e8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	3314      	adds	r3, #20
 80113d8:	4618      	mov	r0, r3
 80113da:	f7fe ff81 	bl	80102e0 <ld_word>
 80113de:	4603      	mov	r3, r0
 80113e0:	041b      	lsls	r3, r3, #16
 80113e2:	68fa      	ldr	r2, [r7, #12]
 80113e4:	4313      	orrs	r3, r2
 80113e6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80113e8:	68fb      	ldr	r3, [r7, #12]
}
 80113ea:	4618      	mov	r0, r3
 80113ec:	3710      	adds	r7, #16
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}

080113f2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80113f2:	b580      	push	{r7, lr}
 80113f4:	b084      	sub	sp, #16
 80113f6:	af00      	add	r7, sp, #0
 80113f8:	60f8      	str	r0, [r7, #12]
 80113fa:	60b9      	str	r1, [r7, #8]
 80113fc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	331a      	adds	r3, #26
 8011402:	687a      	ldr	r2, [r7, #4]
 8011404:	b292      	uxth	r2, r2
 8011406:	4611      	mov	r1, r2
 8011408:	4618      	mov	r0, r3
 801140a:	f7fe ffa4 	bl	8010356 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	781b      	ldrb	r3, [r3, #0]
 8011412:	2b03      	cmp	r3, #3
 8011414:	d109      	bne.n	801142a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	f103 0214 	add.w	r2, r3, #20
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	0c1b      	lsrs	r3, r3, #16
 8011420:	b29b      	uxth	r3, r3
 8011422:	4619      	mov	r1, r3
 8011424:	4610      	mov	r0, r2
 8011426:	f7fe ff96 	bl	8010356 <st_word>
	}
}
 801142a:	bf00      	nop
 801142c:	3710      	adds	r7, #16
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}
	...

08011434 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8011434:	b590      	push	{r4, r7, lr}
 8011436:	b087      	sub	sp, #28
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
 801143c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	331a      	adds	r3, #26
 8011442:	4618      	mov	r0, r3
 8011444:	f7fe ff4c 	bl	80102e0 <ld_word>
 8011448:	4603      	mov	r3, r0
 801144a:	2b00      	cmp	r3, #0
 801144c:	d001      	beq.n	8011452 <cmp_lfn+0x1e>
 801144e:	2300      	movs	r3, #0
 8011450:	e059      	b.n	8011506 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	781b      	ldrb	r3, [r3, #0]
 8011456:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801145a:	1e5a      	subs	r2, r3, #1
 801145c:	4613      	mov	r3, r2
 801145e:	005b      	lsls	r3, r3, #1
 8011460:	4413      	add	r3, r2
 8011462:	009b      	lsls	r3, r3, #2
 8011464:	4413      	add	r3, r2
 8011466:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011468:	2301      	movs	r3, #1
 801146a:	81fb      	strh	r3, [r7, #14]
 801146c:	2300      	movs	r3, #0
 801146e:	613b      	str	r3, [r7, #16]
 8011470:	e033      	b.n	80114da <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011472:	4a27      	ldr	r2, [pc, #156]	; (8011510 <cmp_lfn+0xdc>)
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	4413      	add	r3, r2
 8011478:	781b      	ldrb	r3, [r3, #0]
 801147a:	461a      	mov	r2, r3
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	4413      	add	r3, r2
 8011480:	4618      	mov	r0, r3
 8011482:	f7fe ff2d 	bl	80102e0 <ld_word>
 8011486:	4603      	mov	r3, r0
 8011488:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801148a:	89fb      	ldrh	r3, [r7, #14]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d01a      	beq.n	80114c6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	2bfe      	cmp	r3, #254	; 0xfe
 8011494:	d812      	bhi.n	80114bc <cmp_lfn+0x88>
 8011496:	89bb      	ldrh	r3, [r7, #12]
 8011498:	4618      	mov	r0, r3
 801149a:	f002 fc41 	bl	8013d20 <ff_wtoupper>
 801149e:	4603      	mov	r3, r0
 80114a0:	461c      	mov	r4, r3
 80114a2:	697b      	ldr	r3, [r7, #20]
 80114a4:	1c5a      	adds	r2, r3, #1
 80114a6:	617a      	str	r2, [r7, #20]
 80114a8:	005b      	lsls	r3, r3, #1
 80114aa:	687a      	ldr	r2, [r7, #4]
 80114ac:	4413      	add	r3, r2
 80114ae:	881b      	ldrh	r3, [r3, #0]
 80114b0:	4618      	mov	r0, r3
 80114b2:	f002 fc35 	bl	8013d20 <ff_wtoupper>
 80114b6:	4603      	mov	r3, r0
 80114b8:	429c      	cmp	r4, r3
 80114ba:	d001      	beq.n	80114c0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80114bc:	2300      	movs	r3, #0
 80114be:	e022      	b.n	8011506 <cmp_lfn+0xd2>
			}
			wc = uc;
 80114c0:	89bb      	ldrh	r3, [r7, #12]
 80114c2:	81fb      	strh	r3, [r7, #14]
 80114c4:	e006      	b.n	80114d4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80114c6:	89bb      	ldrh	r3, [r7, #12]
 80114c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80114cc:	4293      	cmp	r3, r2
 80114ce:	d001      	beq.n	80114d4 <cmp_lfn+0xa0>
 80114d0:	2300      	movs	r3, #0
 80114d2:	e018      	b.n	8011506 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80114d4:	693b      	ldr	r3, [r7, #16]
 80114d6:	3301      	adds	r3, #1
 80114d8:	613b      	str	r3, [r7, #16]
 80114da:	693b      	ldr	r3, [r7, #16]
 80114dc:	2b0c      	cmp	r3, #12
 80114de:	d9c8      	bls.n	8011472 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d00b      	beq.n	8011504 <cmp_lfn+0xd0>
 80114ec:	89fb      	ldrh	r3, [r7, #14]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d008      	beq.n	8011504 <cmp_lfn+0xd0>
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	005b      	lsls	r3, r3, #1
 80114f6:	687a      	ldr	r2, [r7, #4]
 80114f8:	4413      	add	r3, r2
 80114fa:	881b      	ldrh	r3, [r3, #0]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d001      	beq.n	8011504 <cmp_lfn+0xd0>
 8011500:	2300      	movs	r3, #0
 8011502:	e000      	b.n	8011506 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8011504:	2301      	movs	r3, #1
}
 8011506:	4618      	mov	r0, r3
 8011508:	371c      	adds	r7, #28
 801150a:	46bd      	mov	sp, r7
 801150c:	bd90      	pop	{r4, r7, pc}
 801150e:	bf00      	nop
 8011510:	0803028c 	.word	0x0803028c

08011514 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b088      	sub	sp, #32
 8011518:	af00      	add	r7, sp, #0
 801151a:	60f8      	str	r0, [r7, #12]
 801151c:	60b9      	str	r1, [r7, #8]
 801151e:	4611      	mov	r1, r2
 8011520:	461a      	mov	r2, r3
 8011522:	460b      	mov	r3, r1
 8011524:	71fb      	strb	r3, [r7, #7]
 8011526:	4613      	mov	r3, r2
 8011528:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	330d      	adds	r3, #13
 801152e:	79ba      	ldrb	r2, [r7, #6]
 8011530:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	330b      	adds	r3, #11
 8011536:	220f      	movs	r2, #15
 8011538:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	330c      	adds	r3, #12
 801153e:	2200      	movs	r2, #0
 8011540:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	331a      	adds	r3, #26
 8011546:	2100      	movs	r1, #0
 8011548:	4618      	mov	r0, r3
 801154a:	f7fe ff04 	bl	8010356 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801154e:	79fb      	ldrb	r3, [r7, #7]
 8011550:	1e5a      	subs	r2, r3, #1
 8011552:	4613      	mov	r3, r2
 8011554:	005b      	lsls	r3, r3, #1
 8011556:	4413      	add	r3, r2
 8011558:	009b      	lsls	r3, r3, #2
 801155a:	4413      	add	r3, r2
 801155c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801155e:	2300      	movs	r3, #0
 8011560:	82fb      	strh	r3, [r7, #22]
 8011562:	2300      	movs	r3, #0
 8011564:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011566:	8afb      	ldrh	r3, [r7, #22]
 8011568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801156c:	4293      	cmp	r3, r2
 801156e:	d007      	beq.n	8011580 <put_lfn+0x6c>
 8011570:	69fb      	ldr	r3, [r7, #28]
 8011572:	1c5a      	adds	r2, r3, #1
 8011574:	61fa      	str	r2, [r7, #28]
 8011576:	005b      	lsls	r3, r3, #1
 8011578:	68fa      	ldr	r2, [r7, #12]
 801157a:	4413      	add	r3, r2
 801157c:	881b      	ldrh	r3, [r3, #0]
 801157e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011580:	4a17      	ldr	r2, [pc, #92]	; (80115e0 <put_lfn+0xcc>)
 8011582:	69bb      	ldr	r3, [r7, #24]
 8011584:	4413      	add	r3, r2
 8011586:	781b      	ldrb	r3, [r3, #0]
 8011588:	461a      	mov	r2, r3
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	4413      	add	r3, r2
 801158e:	8afa      	ldrh	r2, [r7, #22]
 8011590:	4611      	mov	r1, r2
 8011592:	4618      	mov	r0, r3
 8011594:	f7fe fedf 	bl	8010356 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011598:	8afb      	ldrh	r3, [r7, #22]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d102      	bne.n	80115a4 <put_lfn+0x90>
 801159e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115a2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80115a4:	69bb      	ldr	r3, [r7, #24]
 80115a6:	3301      	adds	r3, #1
 80115a8:	61bb      	str	r3, [r7, #24]
 80115aa:	69bb      	ldr	r3, [r7, #24]
 80115ac:	2b0c      	cmp	r3, #12
 80115ae:	d9da      	bls.n	8011566 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80115b0:	8afb      	ldrh	r3, [r7, #22]
 80115b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115b6:	4293      	cmp	r3, r2
 80115b8:	d006      	beq.n	80115c8 <put_lfn+0xb4>
 80115ba:	69fb      	ldr	r3, [r7, #28]
 80115bc:	005b      	lsls	r3, r3, #1
 80115be:	68fa      	ldr	r2, [r7, #12]
 80115c0:	4413      	add	r3, r2
 80115c2:	881b      	ldrh	r3, [r3, #0]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d103      	bne.n	80115d0 <put_lfn+0xbc>
 80115c8:	79fb      	ldrb	r3, [r7, #7]
 80115ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115ce:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	79fa      	ldrb	r2, [r7, #7]
 80115d4:	701a      	strb	r2, [r3, #0]
}
 80115d6:	bf00      	nop
 80115d8:	3720      	adds	r7, #32
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd80      	pop	{r7, pc}
 80115de:	bf00      	nop
 80115e0:	0803028c 	.word	0x0803028c

080115e4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b08c      	sub	sp, #48	; 0x30
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	60f8      	str	r0, [r7, #12]
 80115ec:	60b9      	str	r1, [r7, #8]
 80115ee:	607a      	str	r2, [r7, #4]
 80115f0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80115f2:	220b      	movs	r2, #11
 80115f4:	68b9      	ldr	r1, [r7, #8]
 80115f6:	68f8      	ldr	r0, [r7, #12]
 80115f8:	f7fe fef4 	bl	80103e4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	2b05      	cmp	r3, #5
 8011600:	d92b      	bls.n	801165a <gen_numname+0x76>
		sr = seq;
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8011606:	e022      	b.n	801164e <gen_numname+0x6a>
			wc = *lfn++;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	1c9a      	adds	r2, r3, #2
 801160c:	607a      	str	r2, [r7, #4]
 801160e:	881b      	ldrh	r3, [r3, #0]
 8011610:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8011612:	2300      	movs	r3, #0
 8011614:	62bb      	str	r3, [r7, #40]	; 0x28
 8011616:	e017      	b.n	8011648 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8011618:	69fb      	ldr	r3, [r7, #28]
 801161a:	005a      	lsls	r2, r3, #1
 801161c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801161e:	f003 0301 	and.w	r3, r3, #1
 8011622:	4413      	add	r3, r2
 8011624:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8011626:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011628:	085b      	lsrs	r3, r3, #1
 801162a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801162c:	69fb      	ldr	r3, [r7, #28]
 801162e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011632:	2b00      	cmp	r3, #0
 8011634:	d005      	beq.n	8011642 <gen_numname+0x5e>
 8011636:	69fb      	ldr	r3, [r7, #28]
 8011638:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 801163c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8011640:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8011642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011644:	3301      	adds	r3, #1
 8011646:	62bb      	str	r3, [r7, #40]	; 0x28
 8011648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801164a:	2b0f      	cmp	r3, #15
 801164c:	d9e4      	bls.n	8011618 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	881b      	ldrh	r3, [r3, #0]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d1d8      	bne.n	8011608 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8011656:	69fb      	ldr	r3, [r7, #28]
 8011658:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801165a:	2307      	movs	r3, #7
 801165c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	b2db      	uxtb	r3, r3
 8011662:	f003 030f 	and.w	r3, r3, #15
 8011666:	b2db      	uxtb	r3, r3
 8011668:	3330      	adds	r3, #48	; 0x30
 801166a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801166e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011672:	2b39      	cmp	r3, #57	; 0x39
 8011674:	d904      	bls.n	8011680 <gen_numname+0x9c>
 8011676:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801167a:	3307      	adds	r3, #7
 801167c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8011680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011682:	1e5a      	subs	r2, r3, #1
 8011684:	62ba      	str	r2, [r7, #40]	; 0x28
 8011686:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801168a:	4413      	add	r3, r2
 801168c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011690:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	091b      	lsrs	r3, r3, #4
 8011698:	603b      	str	r3, [r7, #0]
	} while (seq);
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d1de      	bne.n	801165e <gen_numname+0x7a>
	ns[i] = '~';
 80116a0:	f107 0214 	add.w	r2, r7, #20
 80116a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116a6:	4413      	add	r3, r2
 80116a8:	227e      	movs	r2, #126	; 0x7e
 80116aa:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80116ac:	2300      	movs	r3, #0
 80116ae:	627b      	str	r3, [r7, #36]	; 0x24
 80116b0:	e002      	b.n	80116b8 <gen_numname+0xd4>
 80116b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116b4:	3301      	adds	r3, #1
 80116b6:	627b      	str	r3, [r7, #36]	; 0x24
 80116b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116bc:	429a      	cmp	r2, r3
 80116be:	d205      	bcs.n	80116cc <gen_numname+0xe8>
 80116c0:	68fa      	ldr	r2, [r7, #12]
 80116c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c4:	4413      	add	r3, r2
 80116c6:	781b      	ldrb	r3, [r3, #0]
 80116c8:	2b20      	cmp	r3, #32
 80116ca:	d1f2      	bne.n	80116b2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80116cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ce:	2b07      	cmp	r3, #7
 80116d0:	d808      	bhi.n	80116e4 <gen_numname+0x100>
 80116d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d4:	1c5a      	adds	r2, r3, #1
 80116d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80116d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80116dc:	4413      	add	r3, r2
 80116de:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80116e2:	e000      	b.n	80116e6 <gen_numname+0x102>
 80116e4:	2120      	movs	r1, #32
 80116e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e8:	1c5a      	adds	r2, r3, #1
 80116ea:	627a      	str	r2, [r7, #36]	; 0x24
 80116ec:	68fa      	ldr	r2, [r7, #12]
 80116ee:	4413      	add	r3, r2
 80116f0:	460a      	mov	r2, r1
 80116f2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80116f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f6:	2b07      	cmp	r3, #7
 80116f8:	d9e8      	bls.n	80116cc <gen_numname+0xe8>
}
 80116fa:	bf00      	nop
 80116fc:	bf00      	nop
 80116fe:	3730      	adds	r7, #48	; 0x30
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}

08011704 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011704:	b480      	push	{r7}
 8011706:	b085      	sub	sp, #20
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801170c:	2300      	movs	r3, #0
 801170e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011710:	230b      	movs	r3, #11
 8011712:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011714:	7bfb      	ldrb	r3, [r7, #15]
 8011716:	b2da      	uxtb	r2, r3
 8011718:	0852      	lsrs	r2, r2, #1
 801171a:	01db      	lsls	r3, r3, #7
 801171c:	4313      	orrs	r3, r2
 801171e:	b2da      	uxtb	r2, r3
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	1c59      	adds	r1, r3, #1
 8011724:	6079      	str	r1, [r7, #4]
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	4413      	add	r3, r2
 801172a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801172c:	68bb      	ldr	r3, [r7, #8]
 801172e:	3b01      	subs	r3, #1
 8011730:	60bb      	str	r3, [r7, #8]
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d1ed      	bne.n	8011714 <sum_sfn+0x10>
	return sum;
 8011738:	7bfb      	ldrb	r3, [r7, #15]
}
 801173a:	4618      	mov	r0, r3
 801173c:	3714      	adds	r7, #20
 801173e:	46bd      	mov	sp, r7
 8011740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011744:	4770      	bx	lr

08011746 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011746:	b580      	push	{r7, lr}
 8011748:	b086      	sub	sp, #24
 801174a:	af00      	add	r7, sp, #0
 801174c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011754:	2100      	movs	r1, #0
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f7ff fc86 	bl	8011068 <dir_sdi>
 801175c:	4603      	mov	r3, r0
 801175e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011760:	7dfb      	ldrb	r3, [r7, #23]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d001      	beq.n	801176a <dir_find+0x24>
 8011766:	7dfb      	ldrb	r3, [r7, #23]
 8011768:	e0a9      	b.n	80118be <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801176a:	23ff      	movs	r3, #255	; 0xff
 801176c:	753b      	strb	r3, [r7, #20]
 801176e:	7d3b      	ldrb	r3, [r7, #20]
 8011770:	757b      	strb	r3, [r7, #21]
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011778:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	69db      	ldr	r3, [r3, #28]
 801177e:	4619      	mov	r1, r3
 8011780:	6938      	ldr	r0, [r7, #16]
 8011782:	f7ff f88f 	bl	80108a4 <move_window>
 8011786:	4603      	mov	r3, r0
 8011788:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801178a:	7dfb      	ldrb	r3, [r7, #23]
 801178c:	2b00      	cmp	r3, #0
 801178e:	f040 8090 	bne.w	80118b2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6a1b      	ldr	r3, [r3, #32]
 8011796:	781b      	ldrb	r3, [r3, #0]
 8011798:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801179a:	7dbb      	ldrb	r3, [r7, #22]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d102      	bne.n	80117a6 <dir_find+0x60>
 80117a0:	2304      	movs	r3, #4
 80117a2:	75fb      	strb	r3, [r7, #23]
 80117a4:	e08a      	b.n	80118bc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6a1b      	ldr	r3, [r3, #32]
 80117aa:	330b      	adds	r3, #11
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80117b2:	73fb      	strb	r3, [r7, #15]
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	7bfa      	ldrb	r2, [r7, #15]
 80117b8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80117ba:	7dbb      	ldrb	r3, [r7, #22]
 80117bc:	2be5      	cmp	r3, #229	; 0xe5
 80117be:	d007      	beq.n	80117d0 <dir_find+0x8a>
 80117c0:	7bfb      	ldrb	r3, [r7, #15]
 80117c2:	f003 0308 	and.w	r3, r3, #8
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d009      	beq.n	80117de <dir_find+0x98>
 80117ca:	7bfb      	ldrb	r3, [r7, #15]
 80117cc:	2b0f      	cmp	r3, #15
 80117ce:	d006      	beq.n	80117de <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80117d0:	23ff      	movs	r3, #255	; 0xff
 80117d2:	757b      	strb	r3, [r7, #21]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117da:	631a      	str	r2, [r3, #48]	; 0x30
 80117dc:	e05e      	b.n	801189c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80117de:	7bfb      	ldrb	r3, [r7, #15]
 80117e0:	2b0f      	cmp	r3, #15
 80117e2:	d136      	bne.n	8011852 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80117ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d154      	bne.n	801189c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80117f2:	7dbb      	ldrb	r3, [r7, #22]
 80117f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d00d      	beq.n	8011818 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	6a1b      	ldr	r3, [r3, #32]
 8011800:	7b5b      	ldrb	r3, [r3, #13]
 8011802:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8011804:	7dbb      	ldrb	r3, [r7, #22]
 8011806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801180a:	75bb      	strb	r3, [r7, #22]
 801180c:	7dbb      	ldrb	r3, [r7, #22]
 801180e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	695a      	ldr	r2, [r3, #20]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011818:	7dba      	ldrb	r2, [r7, #22]
 801181a:	7d7b      	ldrb	r3, [r7, #21]
 801181c:	429a      	cmp	r2, r3
 801181e:	d115      	bne.n	801184c <dir_find+0x106>
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6a1b      	ldr	r3, [r3, #32]
 8011824:	330d      	adds	r3, #13
 8011826:	781b      	ldrb	r3, [r3, #0]
 8011828:	7d3a      	ldrb	r2, [r7, #20]
 801182a:	429a      	cmp	r2, r3
 801182c:	d10e      	bne.n	801184c <dir_find+0x106>
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	691a      	ldr	r2, [r3, #16]
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6a1b      	ldr	r3, [r3, #32]
 8011836:	4619      	mov	r1, r3
 8011838:	4610      	mov	r0, r2
 801183a:	f7ff fdfb 	bl	8011434 <cmp_lfn>
 801183e:	4603      	mov	r3, r0
 8011840:	2b00      	cmp	r3, #0
 8011842:	d003      	beq.n	801184c <dir_find+0x106>
 8011844:	7d7b      	ldrb	r3, [r7, #21]
 8011846:	3b01      	subs	r3, #1
 8011848:	b2db      	uxtb	r3, r3
 801184a:	e000      	b.n	801184e <dir_find+0x108>
 801184c:	23ff      	movs	r3, #255	; 0xff
 801184e:	757b      	strb	r3, [r7, #21]
 8011850:	e024      	b.n	801189c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011852:	7d7b      	ldrb	r3, [r7, #21]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d109      	bne.n	801186c <dir_find+0x126>
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6a1b      	ldr	r3, [r3, #32]
 801185c:	4618      	mov	r0, r3
 801185e:	f7ff ff51 	bl	8011704 <sum_sfn>
 8011862:	4603      	mov	r3, r0
 8011864:	461a      	mov	r2, r3
 8011866:	7d3b      	ldrb	r3, [r7, #20]
 8011868:	4293      	cmp	r3, r2
 801186a:	d024      	beq.n	80118b6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011872:	f003 0301 	and.w	r3, r3, #1
 8011876:	2b00      	cmp	r3, #0
 8011878:	d10a      	bne.n	8011890 <dir_find+0x14a>
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	6a18      	ldr	r0, [r3, #32]
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	3324      	adds	r3, #36	; 0x24
 8011882:	220b      	movs	r2, #11
 8011884:	4619      	mov	r1, r3
 8011886:	f7fe fde9 	bl	801045c <mem_cmp>
 801188a:	4603      	mov	r3, r0
 801188c:	2b00      	cmp	r3, #0
 801188e:	d014      	beq.n	80118ba <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011890:	23ff      	movs	r3, #255	; 0xff
 8011892:	757b      	strb	r3, [r7, #21]
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801189a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801189c:	2100      	movs	r1, #0
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f7ff fc6b 	bl	801117a <dir_next>
 80118a4:	4603      	mov	r3, r0
 80118a6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80118a8:	7dfb      	ldrb	r3, [r7, #23]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	f43f af65 	beq.w	801177a <dir_find+0x34>
 80118b0:	e004      	b.n	80118bc <dir_find+0x176>
		if (res != FR_OK) break;
 80118b2:	bf00      	nop
 80118b4:	e002      	b.n	80118bc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80118b6:	bf00      	nop
 80118b8:	e000      	b.n	80118bc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80118ba:	bf00      	nop

	return res;
 80118bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80118be:	4618      	mov	r0, r3
 80118c0:	3718      	adds	r7, #24
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}
	...

080118c8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b08c      	sub	sp, #48	; 0x30
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80118dc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d001      	beq.n	80118e8 <dir_register+0x20>
 80118e4:	2306      	movs	r3, #6
 80118e6:	e0e0      	b.n	8011aaa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80118e8:	2300      	movs	r3, #0
 80118ea:	627b      	str	r3, [r7, #36]	; 0x24
 80118ec:	e002      	b.n	80118f4 <dir_register+0x2c>
 80118ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118f0:	3301      	adds	r3, #1
 80118f2:	627b      	str	r3, [r7, #36]	; 0x24
 80118f4:	69fb      	ldr	r3, [r7, #28]
 80118f6:	691a      	ldr	r2, [r3, #16]
 80118f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fa:	005b      	lsls	r3, r3, #1
 80118fc:	4413      	add	r3, r2
 80118fe:	881b      	ldrh	r3, [r3, #0]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d1f4      	bne.n	80118ee <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801190a:	f107 030c 	add.w	r3, r7, #12
 801190e:	220c      	movs	r2, #12
 8011910:	4618      	mov	r0, r3
 8011912:	f7fe fd67 	bl	80103e4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8011916:	7dfb      	ldrb	r3, [r7, #23]
 8011918:	f003 0301 	and.w	r3, r3, #1
 801191c:	2b00      	cmp	r3, #0
 801191e:	d032      	beq.n	8011986 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2240      	movs	r2, #64	; 0x40
 8011924:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8011928:	2301      	movs	r3, #1
 801192a:	62bb      	str	r3, [r7, #40]	; 0x28
 801192c:	e016      	b.n	801195c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8011934:	69fb      	ldr	r3, [r7, #28]
 8011936:	691a      	ldr	r2, [r3, #16]
 8011938:	f107 010c 	add.w	r1, r7, #12
 801193c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801193e:	f7ff fe51 	bl	80115e4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f7ff feff 	bl	8011746 <dir_find>
 8011948:	4603      	mov	r3, r0
 801194a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801194e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011952:	2b00      	cmp	r3, #0
 8011954:	d106      	bne.n	8011964 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8011956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011958:	3301      	adds	r3, #1
 801195a:	62bb      	str	r3, [r7, #40]	; 0x28
 801195c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801195e:	2b63      	cmp	r3, #99	; 0x63
 8011960:	d9e5      	bls.n	801192e <dir_register+0x66>
 8011962:	e000      	b.n	8011966 <dir_register+0x9e>
			if (res != FR_OK) break;
 8011964:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8011966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011968:	2b64      	cmp	r3, #100	; 0x64
 801196a:	d101      	bne.n	8011970 <dir_register+0xa8>
 801196c:	2307      	movs	r3, #7
 801196e:	e09c      	b.n	8011aaa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8011970:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011974:	2b04      	cmp	r3, #4
 8011976:	d002      	beq.n	801197e <dir_register+0xb6>
 8011978:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801197c:	e095      	b.n	8011aaa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801197e:	7dfa      	ldrb	r2, [r7, #23]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8011986:	7dfb      	ldrb	r3, [r7, #23]
 8011988:	f003 0302 	and.w	r3, r3, #2
 801198c:	2b00      	cmp	r3, #0
 801198e:	d007      	beq.n	80119a0 <dir_register+0xd8>
 8011990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011992:	330c      	adds	r3, #12
 8011994:	4a47      	ldr	r2, [pc, #284]	; (8011ab4 <dir_register+0x1ec>)
 8011996:	fba2 2303 	umull	r2, r3, r2, r3
 801199a:	089b      	lsrs	r3, r3, #2
 801199c:	3301      	adds	r3, #1
 801199e:	e000      	b.n	80119a2 <dir_register+0xda>
 80119a0:	2301      	movs	r3, #1
 80119a2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80119a4:	6a39      	ldr	r1, [r7, #32]
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f7ff fcbd 	bl	8011326 <dir_alloc>
 80119ac:	4603      	mov	r3, r0
 80119ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80119b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d148      	bne.n	8011a4c <dir_register+0x184>
 80119ba:	6a3b      	ldr	r3, [r7, #32]
 80119bc:	3b01      	subs	r3, #1
 80119be:	623b      	str	r3, [r7, #32]
 80119c0:	6a3b      	ldr	r3, [r7, #32]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d042      	beq.n	8011a4c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	695a      	ldr	r2, [r3, #20]
 80119ca:	6a3b      	ldr	r3, [r7, #32]
 80119cc:	015b      	lsls	r3, r3, #5
 80119ce:	1ad3      	subs	r3, r2, r3
 80119d0:	4619      	mov	r1, r3
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f7ff fb48 	bl	8011068 <dir_sdi>
 80119d8:	4603      	mov	r3, r0
 80119da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80119de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d132      	bne.n	8011a4c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	3324      	adds	r3, #36	; 0x24
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7ff fe8a 	bl	8011704 <sum_sfn>
 80119f0:	4603      	mov	r3, r0
 80119f2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	69db      	ldr	r3, [r3, #28]
 80119f8:	4619      	mov	r1, r3
 80119fa:	69f8      	ldr	r0, [r7, #28]
 80119fc:	f7fe ff52 	bl	80108a4 <move_window>
 8011a00:	4603      	mov	r3, r0
 8011a02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8011a06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d11d      	bne.n	8011a4a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8011a0e:	69fb      	ldr	r3, [r7, #28]
 8011a10:	6918      	ldr	r0, [r3, #16]
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	6a19      	ldr	r1, [r3, #32]
 8011a16:	6a3b      	ldr	r3, [r7, #32]
 8011a18:	b2da      	uxtb	r2, r3
 8011a1a:	7efb      	ldrb	r3, [r7, #27]
 8011a1c:	f7ff fd7a 	bl	8011514 <put_lfn>
				fs->wflag = 1;
 8011a20:	69fb      	ldr	r3, [r7, #28]
 8011a22:	2201      	movs	r2, #1
 8011a24:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8011a26:	2100      	movs	r1, #0
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f7ff fba6 	bl	801117a <dir_next>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8011a34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d107      	bne.n	8011a4c <dir_register+0x184>
 8011a3c:	6a3b      	ldr	r3, [r7, #32]
 8011a3e:	3b01      	subs	r3, #1
 8011a40:	623b      	str	r3, [r7, #32]
 8011a42:	6a3b      	ldr	r3, [r7, #32]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d1d5      	bne.n	80119f4 <dir_register+0x12c>
 8011a48:	e000      	b.n	8011a4c <dir_register+0x184>
				if (res != FR_OK) break;
 8011a4a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011a4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d128      	bne.n	8011aa6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	69db      	ldr	r3, [r3, #28]
 8011a58:	4619      	mov	r1, r3
 8011a5a:	69f8      	ldr	r0, [r7, #28]
 8011a5c:	f7fe ff22 	bl	80108a4 <move_window>
 8011a60:	4603      	mov	r3, r0
 8011a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8011a66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d11b      	bne.n	8011aa6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	6a1b      	ldr	r3, [r3, #32]
 8011a72:	2220      	movs	r2, #32
 8011a74:	2100      	movs	r1, #0
 8011a76:	4618      	mov	r0, r3
 8011a78:	f7fe fcd5 	bl	8010426 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	6a18      	ldr	r0, [r3, #32]
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	3324      	adds	r3, #36	; 0x24
 8011a84:	220b      	movs	r2, #11
 8011a86:	4619      	mov	r1, r3
 8011a88:	f7fe fcac 	bl	80103e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	6a1b      	ldr	r3, [r3, #32]
 8011a96:	330c      	adds	r3, #12
 8011a98:	f002 0218 	and.w	r2, r2, #24
 8011a9c:	b2d2      	uxtb	r2, r2
 8011a9e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8011aa0:	69fb      	ldr	r3, [r7, #28]
 8011aa2:	2201      	movs	r2, #1
 8011aa4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3730      	adds	r7, #48	; 0x30
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}
 8011ab2:	bf00      	nop
 8011ab4:	4ec4ec4f 	.word	0x4ec4ec4f

08011ab8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b088      	sub	sp, #32
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
 8011ac0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	2200      	movs	r2, #0
 8011acc:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	69db      	ldr	r3, [r3, #28]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	f000 80c9 	beq.w	8011c6a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ae0:	d032      	beq.n	8011b48 <get_fileinfo+0x90>
			i = j = 0;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	61bb      	str	r3, [r7, #24]
 8011ae6:	69bb      	ldr	r3, [r7, #24]
 8011ae8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8011aea:	e01b      	b.n	8011b24 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8011aec:	89fb      	ldrh	r3, [r7, #14]
 8011aee:	2100      	movs	r1, #0
 8011af0:	4618      	mov	r0, r3
 8011af2:	f002 f8d9 	bl	8013ca8 <ff_convert>
 8011af6:	4603      	mov	r3, r0
 8011af8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8011afa:	89fb      	ldrh	r3, [r7, #14]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d102      	bne.n	8011b06 <get_fileinfo+0x4e>
 8011b00:	2300      	movs	r3, #0
 8011b02:	61fb      	str	r3, [r7, #28]
 8011b04:	e01a      	b.n	8011b3c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8011b06:	69fb      	ldr	r3, [r7, #28]
 8011b08:	2bfe      	cmp	r3, #254	; 0xfe
 8011b0a:	d902      	bls.n	8011b12 <get_fileinfo+0x5a>
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	61fb      	str	r3, [r7, #28]
 8011b10:	e014      	b.n	8011b3c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8011b12:	69fb      	ldr	r3, [r7, #28]
 8011b14:	1c5a      	adds	r2, r3, #1
 8011b16:	61fa      	str	r2, [r7, #28]
 8011b18:	89fa      	ldrh	r2, [r7, #14]
 8011b1a:	b2d1      	uxtb	r1, r2
 8011b1c:	683a      	ldr	r2, [r7, #0]
 8011b1e:	4413      	add	r3, r2
 8011b20:	460a      	mov	r2, r1
 8011b22:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8011b24:	693b      	ldr	r3, [r7, #16]
 8011b26:	691a      	ldr	r2, [r3, #16]
 8011b28:	69bb      	ldr	r3, [r7, #24]
 8011b2a:	1c59      	adds	r1, r3, #1
 8011b2c:	61b9      	str	r1, [r7, #24]
 8011b2e:	005b      	lsls	r3, r3, #1
 8011b30:	4413      	add	r3, r2
 8011b32:	881b      	ldrh	r3, [r3, #0]
 8011b34:	81fb      	strh	r3, [r7, #14]
 8011b36:	89fb      	ldrh	r3, [r7, #14]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d1d7      	bne.n	8011aec <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8011b3c:	683a      	ldr	r2, [r7, #0]
 8011b3e:	69fb      	ldr	r3, [r7, #28]
 8011b40:	4413      	add	r3, r2
 8011b42:	3316      	adds	r3, #22
 8011b44:	2200      	movs	r2, #0
 8011b46:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	61bb      	str	r3, [r7, #24]
 8011b4c:	69bb      	ldr	r3, [r7, #24]
 8011b4e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8011b50:	683a      	ldr	r2, [r7, #0]
 8011b52:	69fb      	ldr	r3, [r7, #28]
 8011b54:	4413      	add	r3, r2
 8011b56:	3316      	adds	r3, #22
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8011b5c:	e04c      	b.n	8011bf8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	6a1a      	ldr	r2, [r3, #32]
 8011b62:	69fb      	ldr	r3, [r7, #28]
 8011b64:	1c59      	adds	r1, r3, #1
 8011b66:	61f9      	str	r1, [r7, #28]
 8011b68:	4413      	add	r3, r2
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8011b6e:	7dfb      	ldrb	r3, [r7, #23]
 8011b70:	2b20      	cmp	r3, #32
 8011b72:	d100      	bne.n	8011b76 <get_fileinfo+0xbe>
 8011b74:	e040      	b.n	8011bf8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8011b76:	7dfb      	ldrb	r3, [r7, #23]
 8011b78:	2b05      	cmp	r3, #5
 8011b7a:	d101      	bne.n	8011b80 <get_fileinfo+0xc8>
 8011b7c:	23e5      	movs	r3, #229	; 0xe5
 8011b7e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8011b80:	69fb      	ldr	r3, [r7, #28]
 8011b82:	2b09      	cmp	r3, #9
 8011b84:	d10f      	bne.n	8011ba6 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8011b86:	89bb      	ldrh	r3, [r7, #12]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d105      	bne.n	8011b98 <get_fileinfo+0xe0>
 8011b8c:	683a      	ldr	r2, [r7, #0]
 8011b8e:	69bb      	ldr	r3, [r7, #24]
 8011b90:	4413      	add	r3, r2
 8011b92:	3316      	adds	r3, #22
 8011b94:	222e      	movs	r2, #46	; 0x2e
 8011b96:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8011b98:	69bb      	ldr	r3, [r7, #24]
 8011b9a:	1c5a      	adds	r2, r3, #1
 8011b9c:	61ba      	str	r2, [r7, #24]
 8011b9e:	683a      	ldr	r2, [r7, #0]
 8011ba0:	4413      	add	r3, r2
 8011ba2:	222e      	movs	r2, #46	; 0x2e
 8011ba4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8011ba6:	683a      	ldr	r2, [r7, #0]
 8011ba8:	69bb      	ldr	r3, [r7, #24]
 8011baa:	4413      	add	r3, r2
 8011bac:	3309      	adds	r3, #9
 8011bae:	7dfa      	ldrb	r2, [r7, #23]
 8011bb0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8011bb2:	89bb      	ldrh	r3, [r7, #12]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d11c      	bne.n	8011bf2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8011bb8:	7dfb      	ldrb	r3, [r7, #23]
 8011bba:	2b40      	cmp	r3, #64	; 0x40
 8011bbc:	d913      	bls.n	8011be6 <get_fileinfo+0x12e>
 8011bbe:	7dfb      	ldrb	r3, [r7, #23]
 8011bc0:	2b5a      	cmp	r3, #90	; 0x5a
 8011bc2:	d810      	bhi.n	8011be6 <get_fileinfo+0x12e>
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	6a1b      	ldr	r3, [r3, #32]
 8011bc8:	330c      	adds	r3, #12
 8011bca:	781b      	ldrb	r3, [r3, #0]
 8011bcc:	461a      	mov	r2, r3
 8011bce:	69fb      	ldr	r3, [r7, #28]
 8011bd0:	2b08      	cmp	r3, #8
 8011bd2:	d901      	bls.n	8011bd8 <get_fileinfo+0x120>
 8011bd4:	2310      	movs	r3, #16
 8011bd6:	e000      	b.n	8011bda <get_fileinfo+0x122>
 8011bd8:	2308      	movs	r3, #8
 8011bda:	4013      	ands	r3, r2
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d002      	beq.n	8011be6 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8011be0:	7dfb      	ldrb	r3, [r7, #23]
 8011be2:	3320      	adds	r3, #32
 8011be4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8011be6:	683a      	ldr	r2, [r7, #0]
 8011be8:	69bb      	ldr	r3, [r7, #24]
 8011bea:	4413      	add	r3, r2
 8011bec:	3316      	adds	r3, #22
 8011bee:	7dfa      	ldrb	r2, [r7, #23]
 8011bf0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8011bf2:	69bb      	ldr	r3, [r7, #24]
 8011bf4:	3301      	adds	r3, #1
 8011bf6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8011bf8:	69fb      	ldr	r3, [r7, #28]
 8011bfa:	2b0a      	cmp	r3, #10
 8011bfc:	d9af      	bls.n	8011b5e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8011bfe:	89bb      	ldrh	r3, [r7, #12]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d10d      	bne.n	8011c20 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8011c04:	683a      	ldr	r2, [r7, #0]
 8011c06:	69bb      	ldr	r3, [r7, #24]
 8011c08:	4413      	add	r3, r2
 8011c0a:	3316      	adds	r3, #22
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6a1b      	ldr	r3, [r3, #32]
 8011c14:	330c      	adds	r3, #12
 8011c16:	781b      	ldrb	r3, [r3, #0]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d101      	bne.n	8011c20 <get_fileinfo+0x168>
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8011c20:	683a      	ldr	r2, [r7, #0]
 8011c22:	69bb      	ldr	r3, [r7, #24]
 8011c24:	4413      	add	r3, r2
 8011c26:	3309      	adds	r3, #9
 8011c28:	2200      	movs	r2, #0
 8011c2a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6a1b      	ldr	r3, [r3, #32]
 8011c30:	7ada      	ldrb	r2, [r3, #11]
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	6a1b      	ldr	r3, [r3, #32]
 8011c3a:	331c      	adds	r3, #28
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7fe fb67 	bl	8010310 <ld_dword>
 8011c42:	4602      	mov	r2, r0
 8011c44:	683b      	ldr	r3, [r7, #0]
 8011c46:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	6a1b      	ldr	r3, [r3, #32]
 8011c4c:	3316      	adds	r3, #22
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f7fe fb5e 	bl	8010310 <ld_dword>
 8011c54:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	b29a      	uxth	r2, r3
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	80da      	strh	r2, [r3, #6]
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	0c1b      	lsrs	r3, r3, #16
 8011c62:	b29a      	uxth	r2, r3
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	809a      	strh	r2, [r3, #4]
 8011c68:	e000      	b.n	8011c6c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011c6a:	bf00      	nop
}
 8011c6c:	3720      	adds	r7, #32
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
	...

08011c74 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b08a      	sub	sp, #40	; 0x28
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
 8011c7c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	613b      	str	r3, [r7, #16]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	691b      	ldr	r3, [r3, #16]
 8011c8a:	60fb      	str	r3, [r7, #12]
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	617b      	str	r3, [r7, #20]
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8011c94:	69bb      	ldr	r3, [r7, #24]
 8011c96:	1c5a      	adds	r2, r3, #1
 8011c98:	61ba      	str	r2, [r7, #24]
 8011c9a:	693a      	ldr	r2, [r7, #16]
 8011c9c:	4413      	add	r3, r2
 8011c9e:	781b      	ldrb	r3, [r3, #0]
 8011ca0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8011ca2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ca4:	2b1f      	cmp	r3, #31
 8011ca6:	d940      	bls.n	8011d2a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8011ca8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011caa:	2b2f      	cmp	r3, #47	; 0x2f
 8011cac:	d006      	beq.n	8011cbc <create_name+0x48>
 8011cae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011cb0:	2b5c      	cmp	r3, #92	; 0x5c
 8011cb2:	d110      	bne.n	8011cd6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011cb4:	e002      	b.n	8011cbc <create_name+0x48>
 8011cb6:	69bb      	ldr	r3, [r7, #24]
 8011cb8:	3301      	adds	r3, #1
 8011cba:	61bb      	str	r3, [r7, #24]
 8011cbc:	693a      	ldr	r2, [r7, #16]
 8011cbe:	69bb      	ldr	r3, [r7, #24]
 8011cc0:	4413      	add	r3, r2
 8011cc2:	781b      	ldrb	r3, [r3, #0]
 8011cc4:	2b2f      	cmp	r3, #47	; 0x2f
 8011cc6:	d0f6      	beq.n	8011cb6 <create_name+0x42>
 8011cc8:	693a      	ldr	r2, [r7, #16]
 8011cca:	69bb      	ldr	r3, [r7, #24]
 8011ccc:	4413      	add	r3, r2
 8011cce:	781b      	ldrb	r3, [r3, #0]
 8011cd0:	2b5c      	cmp	r3, #92	; 0x5c
 8011cd2:	d0f0      	beq.n	8011cb6 <create_name+0x42>
			break;
 8011cd4:	e02a      	b.n	8011d2c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8011cd6:	697b      	ldr	r3, [r7, #20]
 8011cd8:	2bfe      	cmp	r3, #254	; 0xfe
 8011cda:	d901      	bls.n	8011ce0 <create_name+0x6c>
 8011cdc:	2306      	movs	r3, #6
 8011cde:	e1c9      	b.n	8012074 <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 8011ce0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ce2:	b2db      	uxtb	r3, r3
 8011ce4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8011ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ce8:	2101      	movs	r1, #1
 8011cea:	4618      	mov	r0, r3
 8011cec:	f001 ffdc 	bl	8013ca8 <ff_convert>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8011cf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d101      	bne.n	8011cfe <create_name+0x8a>
 8011cfa:	2306      	movs	r3, #6
 8011cfc:	e1ba      	b.n	8012074 <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8011cfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011d00:	2b7f      	cmp	r3, #127	; 0x7f
 8011d02:	d809      	bhi.n	8011d18 <create_name+0xa4>
 8011d04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011d06:	4619      	mov	r1, r3
 8011d08:	48a5      	ldr	r0, [pc, #660]	; (8011fa0 <create_name+0x32c>)
 8011d0a:	f7fe fbce 	bl	80104aa <chk_chr>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d001      	beq.n	8011d18 <create_name+0xa4>
 8011d14:	2306      	movs	r3, #6
 8011d16:	e1ad      	b.n	8012074 <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 8011d18:	697b      	ldr	r3, [r7, #20]
 8011d1a:	1c5a      	adds	r2, r3, #1
 8011d1c:	617a      	str	r2, [r7, #20]
 8011d1e:	005b      	lsls	r3, r3, #1
 8011d20:	68fa      	ldr	r2, [r7, #12]
 8011d22:	4413      	add	r3, r2
 8011d24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d26:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8011d28:	e7b4      	b.n	8011c94 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8011d2a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8011d2c:	693a      	ldr	r2, [r7, #16]
 8011d2e:	69bb      	ldr	r3, [r7, #24]
 8011d30:	441a      	add	r2, r3
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011d36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011d38:	2b1f      	cmp	r3, #31
 8011d3a:	d801      	bhi.n	8011d40 <create_name+0xcc>
 8011d3c:	2304      	movs	r3, #4
 8011d3e:	e000      	b.n	8011d42 <create_name+0xce>
 8011d40:	2300      	movs	r3, #0
 8011d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	2b01      	cmp	r3, #1
 8011d4a:	d109      	bne.n	8011d60 <create_name+0xec>
 8011d4c:	697b      	ldr	r3, [r7, #20]
 8011d4e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011d52:	3b01      	subs	r3, #1
 8011d54:	005b      	lsls	r3, r3, #1
 8011d56:	68fa      	ldr	r2, [r7, #12]
 8011d58:	4413      	add	r3, r2
 8011d5a:	881b      	ldrh	r3, [r3, #0]
 8011d5c:	2b2e      	cmp	r3, #46	; 0x2e
 8011d5e:	d016      	beq.n	8011d8e <create_name+0x11a>
 8011d60:	697b      	ldr	r3, [r7, #20]
 8011d62:	2b02      	cmp	r3, #2
 8011d64:	d14e      	bne.n	8011e04 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8011d66:	697b      	ldr	r3, [r7, #20]
 8011d68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011d6c:	3b01      	subs	r3, #1
 8011d6e:	005b      	lsls	r3, r3, #1
 8011d70:	68fa      	ldr	r2, [r7, #12]
 8011d72:	4413      	add	r3, r2
 8011d74:	881b      	ldrh	r3, [r3, #0]
 8011d76:	2b2e      	cmp	r3, #46	; 0x2e
 8011d78:	d144      	bne.n	8011e04 <create_name+0x190>
 8011d7a:	697b      	ldr	r3, [r7, #20]
 8011d7c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011d80:	3b02      	subs	r3, #2
 8011d82:	005b      	lsls	r3, r3, #1
 8011d84:	68fa      	ldr	r2, [r7, #12]
 8011d86:	4413      	add	r3, r2
 8011d88:	881b      	ldrh	r3, [r3, #0]
 8011d8a:	2b2e      	cmp	r3, #46	; 0x2e
 8011d8c:	d13a      	bne.n	8011e04 <create_name+0x190>
		lfn[di] = 0;
 8011d8e:	697b      	ldr	r3, [r7, #20]
 8011d90:	005b      	lsls	r3, r3, #1
 8011d92:	68fa      	ldr	r2, [r7, #12]
 8011d94:	4413      	add	r3, r2
 8011d96:	2200      	movs	r2, #0
 8011d98:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	623b      	str	r3, [r7, #32]
 8011d9e:	e00f      	b.n	8011dc0 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8011da0:	6a3a      	ldr	r2, [r7, #32]
 8011da2:	697b      	ldr	r3, [r7, #20]
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d201      	bcs.n	8011dac <create_name+0x138>
 8011da8:	212e      	movs	r1, #46	; 0x2e
 8011daa:	e000      	b.n	8011dae <create_name+0x13a>
 8011dac:	2120      	movs	r1, #32
 8011dae:	687a      	ldr	r2, [r7, #4]
 8011db0:	6a3b      	ldr	r3, [r7, #32]
 8011db2:	4413      	add	r3, r2
 8011db4:	3324      	adds	r3, #36	; 0x24
 8011db6:	460a      	mov	r2, r1
 8011db8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8011dba:	6a3b      	ldr	r3, [r7, #32]
 8011dbc:	3301      	adds	r3, #1
 8011dbe:	623b      	str	r3, [r7, #32]
 8011dc0:	6a3b      	ldr	r3, [r7, #32]
 8011dc2:	2b0a      	cmp	r3, #10
 8011dc4:	d9ec      	bls.n	8011da0 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8011dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011dca:	f043 0320 	orr.w	r3, r3, #32
 8011dce:	b2d9      	uxtb	r1, r3
 8011dd0:	687a      	ldr	r2, [r7, #4]
 8011dd2:	6a3b      	ldr	r3, [r7, #32]
 8011dd4:	4413      	add	r3, r2
 8011dd6:	3324      	adds	r3, #36	; 0x24
 8011dd8:	460a      	mov	r2, r1
 8011dda:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8011ddc:	2300      	movs	r3, #0
 8011dde:	e149      	b.n	8012074 <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011de6:	3b01      	subs	r3, #1
 8011de8:	005b      	lsls	r3, r3, #1
 8011dea:	68fa      	ldr	r2, [r7, #12]
 8011dec:	4413      	add	r3, r2
 8011dee:	881b      	ldrh	r3, [r3, #0]
 8011df0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8011df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011df4:	2b20      	cmp	r3, #32
 8011df6:	d002      	beq.n	8011dfe <create_name+0x18a>
 8011df8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011dfa:	2b2e      	cmp	r3, #46	; 0x2e
 8011dfc:	d106      	bne.n	8011e0c <create_name+0x198>
		di--;
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	3b01      	subs	r3, #1
 8011e02:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011e04:	697b      	ldr	r3, [r7, #20]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d1ea      	bne.n	8011de0 <create_name+0x16c>
 8011e0a:	e000      	b.n	8011e0e <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 8011e0c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	005b      	lsls	r3, r3, #1
 8011e12:	68fa      	ldr	r2, [r7, #12]
 8011e14:	4413      	add	r3, r2
 8011e16:	2200      	movs	r2, #0
 8011e18:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d101      	bne.n	8011e24 <create_name+0x1b0>
 8011e20:	2306      	movs	r3, #6
 8011e22:	e127      	b.n	8012074 <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	3324      	adds	r3, #36	; 0x24
 8011e28:	220b      	movs	r2, #11
 8011e2a:	2120      	movs	r1, #32
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f7fe fafa 	bl	8010426 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8011e32:	2300      	movs	r3, #0
 8011e34:	61bb      	str	r3, [r7, #24]
 8011e36:	e002      	b.n	8011e3e <create_name+0x1ca>
 8011e38:	69bb      	ldr	r3, [r7, #24]
 8011e3a:	3301      	adds	r3, #1
 8011e3c:	61bb      	str	r3, [r7, #24]
 8011e3e:	69bb      	ldr	r3, [r7, #24]
 8011e40:	005b      	lsls	r3, r3, #1
 8011e42:	68fa      	ldr	r2, [r7, #12]
 8011e44:	4413      	add	r3, r2
 8011e46:	881b      	ldrh	r3, [r3, #0]
 8011e48:	2b20      	cmp	r3, #32
 8011e4a:	d0f5      	beq.n	8011e38 <create_name+0x1c4>
 8011e4c:	69bb      	ldr	r3, [r7, #24]
 8011e4e:	005b      	lsls	r3, r3, #1
 8011e50:	68fa      	ldr	r2, [r7, #12]
 8011e52:	4413      	add	r3, r2
 8011e54:	881b      	ldrh	r3, [r3, #0]
 8011e56:	2b2e      	cmp	r3, #46	; 0x2e
 8011e58:	d0ee      	beq.n	8011e38 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 8011e5a:	69bb      	ldr	r3, [r7, #24]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d009      	beq.n	8011e74 <create_name+0x200>
 8011e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e64:	f043 0303 	orr.w	r3, r3, #3
 8011e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8011e6c:	e002      	b.n	8011e74 <create_name+0x200>
 8011e6e:	697b      	ldr	r3, [r7, #20]
 8011e70:	3b01      	subs	r3, #1
 8011e72:	617b      	str	r3, [r7, #20]
 8011e74:	697b      	ldr	r3, [r7, #20]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d009      	beq.n	8011e8e <create_name+0x21a>
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011e80:	3b01      	subs	r3, #1
 8011e82:	005b      	lsls	r3, r3, #1
 8011e84:	68fa      	ldr	r2, [r7, #12]
 8011e86:	4413      	add	r3, r2
 8011e88:	881b      	ldrh	r3, [r3, #0]
 8011e8a:	2b2e      	cmp	r3, #46	; 0x2e
 8011e8c:	d1ef      	bne.n	8011e6e <create_name+0x1fa>

	i = b = 0; ni = 8;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011e94:	2300      	movs	r3, #0
 8011e96:	623b      	str	r3, [r7, #32]
 8011e98:	2308      	movs	r3, #8
 8011e9a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8011e9c:	69bb      	ldr	r3, [r7, #24]
 8011e9e:	1c5a      	adds	r2, r3, #1
 8011ea0:	61ba      	str	r2, [r7, #24]
 8011ea2:	005b      	lsls	r3, r3, #1
 8011ea4:	68fa      	ldr	r2, [r7, #12]
 8011ea6:	4413      	add	r3, r2
 8011ea8:	881b      	ldrh	r3, [r3, #0]
 8011eaa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8011eac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	f000 8096 	beq.w	8011fe0 <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8011eb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011eb6:	2b20      	cmp	r3, #32
 8011eb8:	d006      	beq.n	8011ec8 <create_name+0x254>
 8011eba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ebc:	2b2e      	cmp	r3, #46	; 0x2e
 8011ebe:	d10a      	bne.n	8011ed6 <create_name+0x262>
 8011ec0:	69ba      	ldr	r2, [r7, #24]
 8011ec2:	697b      	ldr	r3, [r7, #20]
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	d006      	beq.n	8011ed6 <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 8011ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ecc:	f043 0303 	orr.w	r3, r3, #3
 8011ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011ed4:	e083      	b.n	8011fde <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8011ed6:	6a3a      	ldr	r2, [r7, #32]
 8011ed8:	69fb      	ldr	r3, [r7, #28]
 8011eda:	429a      	cmp	r2, r3
 8011edc:	d203      	bcs.n	8011ee6 <create_name+0x272>
 8011ede:	69ba      	ldr	r2, [r7, #24]
 8011ee0:	697b      	ldr	r3, [r7, #20]
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d123      	bne.n	8011f2e <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 8011ee6:	69fb      	ldr	r3, [r7, #28]
 8011ee8:	2b0b      	cmp	r3, #11
 8011eea:	d106      	bne.n	8011efa <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 8011eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ef0:	f043 0303 	orr.w	r3, r3, #3
 8011ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011ef8:	e075      	b.n	8011fe6 <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8011efa:	69ba      	ldr	r2, [r7, #24]
 8011efc:	697b      	ldr	r3, [r7, #20]
 8011efe:	429a      	cmp	r2, r3
 8011f00:	d005      	beq.n	8011f0e <create_name+0x29a>
 8011f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f06:	f043 0303 	orr.w	r3, r3, #3
 8011f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8011f0e:	69ba      	ldr	r2, [r7, #24]
 8011f10:	697b      	ldr	r3, [r7, #20]
 8011f12:	429a      	cmp	r2, r3
 8011f14:	d866      	bhi.n	8011fe4 <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	61bb      	str	r3, [r7, #24]
 8011f1a:	2308      	movs	r3, #8
 8011f1c:	623b      	str	r3, [r7, #32]
 8011f1e:	230b      	movs	r3, #11
 8011f20:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8011f22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011f26:	009b      	lsls	r3, r3, #2
 8011f28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011f2c:	e057      	b.n	8011fde <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8011f2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f30:	2b7f      	cmp	r3, #127	; 0x7f
 8011f32:	d914      	bls.n	8011f5e <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8011f34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f36:	2100      	movs	r1, #0
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f001 feb5 	bl	8013ca8 <ff_convert>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8011f42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d004      	beq.n	8011f52 <create_name+0x2de>
 8011f48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f4a:	3b80      	subs	r3, #128	; 0x80
 8011f4c:	4a15      	ldr	r2, [pc, #84]	; (8011fa4 <create_name+0x330>)
 8011f4e:	5cd3      	ldrb	r3, [r2, r3]
 8011f50:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8011f52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f56:	f043 0302 	orr.w	r3, r3, #2
 8011f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8011f5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d007      	beq.n	8011f74 <create_name+0x300>
 8011f64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f66:	4619      	mov	r1, r3
 8011f68:	480f      	ldr	r0, [pc, #60]	; (8011fa8 <create_name+0x334>)
 8011f6a:	f7fe fa9e 	bl	80104aa <chk_chr>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d008      	beq.n	8011f86 <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8011f74:	235f      	movs	r3, #95	; 0x5f
 8011f76:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f7c:	f043 0303 	orr.w	r3, r3, #3
 8011f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011f84:	e021      	b.n	8011fca <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8011f86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f88:	2b40      	cmp	r3, #64	; 0x40
 8011f8a:	d90f      	bls.n	8011fac <create_name+0x338>
 8011f8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f8e:	2b5a      	cmp	r3, #90	; 0x5a
 8011f90:	d80c      	bhi.n	8011fac <create_name+0x338>
					b |= 2;
 8011f92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011f96:	f043 0302 	orr.w	r3, r3, #2
 8011f9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011f9e:	e014      	b.n	8011fca <create_name+0x356>
 8011fa0:	0802ca34 	.word	0x0802ca34
 8011fa4:	0803020c 	.word	0x0803020c
 8011fa8:	0802ca40 	.word	0x0802ca40
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8011fac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011fae:	2b60      	cmp	r3, #96	; 0x60
 8011fb0:	d90b      	bls.n	8011fca <create_name+0x356>
 8011fb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011fb4:	2b7a      	cmp	r3, #122	; 0x7a
 8011fb6:	d808      	bhi.n	8011fca <create_name+0x356>
						b |= 1; w -= 0x20;
 8011fb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011fbc:	f043 0301 	orr.w	r3, r3, #1
 8011fc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011fc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011fc6:	3b20      	subs	r3, #32
 8011fc8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8011fca:	6a3b      	ldr	r3, [r7, #32]
 8011fcc:	1c5a      	adds	r2, r3, #1
 8011fce:	623a      	str	r2, [r7, #32]
 8011fd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011fd2:	b2d1      	uxtb	r1, r2
 8011fd4:	687a      	ldr	r2, [r7, #4]
 8011fd6:	4413      	add	r3, r2
 8011fd8:	460a      	mov	r2, r1
 8011fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8011fde:	e75d      	b.n	8011e9c <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 8011fe0:	bf00      	nop
 8011fe2:	e000      	b.n	8011fe6 <create_name+0x372>
			if (si > di) break;			/* No extension */
 8011fe4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011fec:	2be5      	cmp	r3, #229	; 0xe5
 8011fee:	d103      	bne.n	8011ff8 <create_name+0x384>
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2205      	movs	r2, #5
 8011ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8011ff8:	69fb      	ldr	r3, [r7, #28]
 8011ffa:	2b08      	cmp	r3, #8
 8011ffc:	d104      	bne.n	8012008 <create_name+0x394>
 8011ffe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012002:	009b      	lsls	r3, r3, #2
 8012004:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012008:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801200c:	f003 030c 	and.w	r3, r3, #12
 8012010:	2b0c      	cmp	r3, #12
 8012012:	d005      	beq.n	8012020 <create_name+0x3ac>
 8012014:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012018:	f003 0303 	and.w	r3, r3, #3
 801201c:	2b03      	cmp	r3, #3
 801201e:	d105      	bne.n	801202c <create_name+0x3b8>
 8012020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012024:	f043 0302 	orr.w	r3, r3, #2
 8012028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801202c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012030:	f003 0302 	and.w	r3, r3, #2
 8012034:	2b00      	cmp	r3, #0
 8012036:	d117      	bne.n	8012068 <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012038:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801203c:	f003 0303 	and.w	r3, r3, #3
 8012040:	2b01      	cmp	r3, #1
 8012042:	d105      	bne.n	8012050 <create_name+0x3dc>
 8012044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012048:	f043 0310 	orr.w	r3, r3, #16
 801204c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8012050:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012054:	f003 030c 	and.w	r3, r3, #12
 8012058:	2b04      	cmp	r3, #4
 801205a:	d105      	bne.n	8012068 <create_name+0x3f4>
 801205c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012060:	f043 0308 	orr.w	r3, r3, #8
 8012064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801206e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8012072:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8012074:	4618      	mov	r0, r3
 8012076:	3728      	adds	r7, #40	; 0x28
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}

0801207c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b086      	sub	sp, #24
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801208a:	693b      	ldr	r3, [r7, #16]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	781b      	ldrb	r3, [r3, #0]
 8012094:	2b2f      	cmp	r3, #47	; 0x2f
 8012096:	d00b      	beq.n	80120b0 <follow_path+0x34>
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	781b      	ldrb	r3, [r3, #0]
 801209c:	2b5c      	cmp	r3, #92	; 0x5c
 801209e:	d007      	beq.n	80120b0 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	6a1a      	ldr	r2, [r3, #32]
 80120a4:	693b      	ldr	r3, [r7, #16]
 80120a6:	609a      	str	r2, [r3, #8]
 80120a8:	e00d      	b.n	80120c6 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	3301      	adds	r3, #1
 80120ae:	603b      	str	r3, [r7, #0]
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	781b      	ldrb	r3, [r3, #0]
 80120b4:	2b2f      	cmp	r3, #47	; 0x2f
 80120b6:	d0f8      	beq.n	80120aa <follow_path+0x2e>
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	781b      	ldrb	r3, [r3, #0]
 80120bc:	2b5c      	cmp	r3, #92	; 0x5c
 80120be:	d0f4      	beq.n	80120aa <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80120c0:	693b      	ldr	r3, [r7, #16]
 80120c2:	2200      	movs	r2, #0
 80120c4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80120c6:	683b      	ldr	r3, [r7, #0]
 80120c8:	781b      	ldrb	r3, [r3, #0]
 80120ca:	2b1f      	cmp	r3, #31
 80120cc:	d80a      	bhi.n	80120e4 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	2280      	movs	r2, #128	; 0x80
 80120d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80120d6:	2100      	movs	r1, #0
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f7fe ffc5 	bl	8011068 <dir_sdi>
 80120de:	4603      	mov	r3, r0
 80120e0:	75fb      	strb	r3, [r7, #23]
 80120e2:	e05b      	b.n	801219c <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80120e4:	463b      	mov	r3, r7
 80120e6:	4619      	mov	r1, r3
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f7ff fdc3 	bl	8011c74 <create_name>
 80120ee:	4603      	mov	r3, r0
 80120f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80120f2:	7dfb      	ldrb	r3, [r7, #23]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d14c      	bne.n	8012192 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80120f8:	6878      	ldr	r0, [r7, #4]
 80120fa:	f7ff fb24 	bl	8011746 <dir_find>
 80120fe:	4603      	mov	r3, r0
 8012100:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012108:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801210a:	7dfb      	ldrb	r3, [r7, #23]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d01b      	beq.n	8012148 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012110:	7dfb      	ldrb	r3, [r7, #23]
 8012112:	2b04      	cmp	r3, #4
 8012114:	d13f      	bne.n	8012196 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012116:	7afb      	ldrb	r3, [r7, #11]
 8012118:	f003 0320 	and.w	r3, r3, #32
 801211c:	2b00      	cmp	r3, #0
 801211e:	d00b      	beq.n	8012138 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012120:	7afb      	ldrb	r3, [r7, #11]
 8012122:	f003 0304 	and.w	r3, r3, #4
 8012126:	2b00      	cmp	r3, #0
 8012128:	d031      	beq.n	801218e <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	2280      	movs	r2, #128	; 0x80
 801212e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012132:	2300      	movs	r3, #0
 8012134:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012136:	e02e      	b.n	8012196 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012138:	7afb      	ldrb	r3, [r7, #11]
 801213a:	f003 0304 	and.w	r3, r3, #4
 801213e:	2b00      	cmp	r3, #0
 8012140:	d129      	bne.n	8012196 <follow_path+0x11a>
 8012142:	2305      	movs	r3, #5
 8012144:	75fb      	strb	r3, [r7, #23]
				break;
 8012146:	e026      	b.n	8012196 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012148:	7afb      	ldrb	r3, [r7, #11]
 801214a:	f003 0304 	and.w	r3, r3, #4
 801214e:	2b00      	cmp	r3, #0
 8012150:	d123      	bne.n	801219a <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	799b      	ldrb	r3, [r3, #6]
 8012156:	f003 0310 	and.w	r3, r3, #16
 801215a:	2b00      	cmp	r3, #0
 801215c:	d102      	bne.n	8012164 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801215e:	2305      	movs	r3, #5
 8012160:	75fb      	strb	r3, [r7, #23]
 8012162:	e01b      	b.n	801219c <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	f103 0140 	add.w	r1, r3, #64	; 0x40
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	695b      	ldr	r3, [r3, #20]
 801216e:	68fa      	ldr	r2, [r7, #12]
 8012170:	8992      	ldrh	r2, [r2, #12]
 8012172:	fbb3 f0f2 	udiv	r0, r3, r2
 8012176:	fb02 f200 	mul.w	r2, r2, r0
 801217a:	1a9b      	subs	r3, r3, r2
 801217c:	440b      	add	r3, r1
 801217e:	4619      	mov	r1, r3
 8012180:	68f8      	ldr	r0, [r7, #12]
 8012182:	f7ff f917 	bl	80113b4 <ld_clust>
 8012186:	4602      	mov	r2, r0
 8012188:	693b      	ldr	r3, [r7, #16]
 801218a:	609a      	str	r2, [r3, #8]
 801218c:	e7aa      	b.n	80120e4 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801218e:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012190:	e7a8      	b.n	80120e4 <follow_path+0x68>
			if (res != FR_OK) break;
 8012192:	bf00      	nop
 8012194:	e002      	b.n	801219c <follow_path+0x120>
				break;
 8012196:	bf00      	nop
 8012198:	e000      	b.n	801219c <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801219a:	bf00      	nop
			}
		}
	}

	return res;
 801219c:	7dfb      	ldrb	r3, [r7, #23]
}
 801219e:	4618      	mov	r0, r3
 80121a0:	3718      	adds	r7, #24
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}

080121a6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80121a6:	b480      	push	{r7}
 80121a8:	b087      	sub	sp, #28
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80121ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80121b2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d031      	beq.n	8012220 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	617b      	str	r3, [r7, #20]
 80121c2:	e002      	b.n	80121ca <get_ldnumber+0x24>
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	3301      	adds	r3, #1
 80121c8:	617b      	str	r3, [r7, #20]
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	781b      	ldrb	r3, [r3, #0]
 80121ce:	2b1f      	cmp	r3, #31
 80121d0:	d903      	bls.n	80121da <get_ldnumber+0x34>
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	781b      	ldrb	r3, [r3, #0]
 80121d6:	2b3a      	cmp	r3, #58	; 0x3a
 80121d8:	d1f4      	bne.n	80121c4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80121da:	697b      	ldr	r3, [r7, #20]
 80121dc:	781b      	ldrb	r3, [r3, #0]
 80121de:	2b3a      	cmp	r3, #58	; 0x3a
 80121e0:	d11c      	bne.n	801221c <get_ldnumber+0x76>
			tp = *path;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	1c5a      	adds	r2, r3, #1
 80121ec:	60fa      	str	r2, [r7, #12]
 80121ee:	781b      	ldrb	r3, [r3, #0]
 80121f0:	3b30      	subs	r3, #48	; 0x30
 80121f2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	2b09      	cmp	r3, #9
 80121f8:	d80e      	bhi.n	8012218 <get_ldnumber+0x72>
 80121fa:	68fa      	ldr	r2, [r7, #12]
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	429a      	cmp	r2, r3
 8012200:	d10a      	bne.n	8012218 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d107      	bne.n	8012218 <get_ldnumber+0x72>
					vol = (int)i;
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801220c:	697b      	ldr	r3, [r7, #20]
 801220e:	3301      	adds	r3, #1
 8012210:	617b      	str	r3, [r7, #20]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	697a      	ldr	r2, [r7, #20]
 8012216:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	e002      	b.n	8012222 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801221c:	2300      	movs	r3, #0
 801221e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012220:	693b      	ldr	r3, [r7, #16]
}
 8012222:	4618      	mov	r0, r3
 8012224:	371c      	adds	r7, #28
 8012226:	46bd      	mov	sp, r7
 8012228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222c:	4770      	bx	lr
	...

08012230 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b082      	sub	sp, #8
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
 8012238:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	2200      	movs	r2, #0
 801223e:	70da      	strb	r2, [r3, #3]
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012246:	63da      	str	r2, [r3, #60]	; 0x3c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012248:	6839      	ldr	r1, [r7, #0]
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f7fe fb2a 	bl	80108a4 <move_window>
 8012250:	4603      	mov	r3, r0
 8012252:	2b00      	cmp	r3, #0
 8012254:	d001      	beq.n	801225a <check_fs+0x2a>
 8012256:	2304      	movs	r3, #4
 8012258:	e038      	b.n	80122cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	3340      	adds	r3, #64	; 0x40
 801225e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012262:	4618      	mov	r0, r3
 8012264:	f7fe f83c 	bl	80102e0 <ld_word>
 8012268:	4603      	mov	r3, r0
 801226a:	461a      	mov	r2, r3
 801226c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012270:	429a      	cmp	r2, r3
 8012272:	d001      	beq.n	8012278 <check_fs+0x48>
 8012274:	2303      	movs	r3, #3
 8012276:	e029      	b.n	80122cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801227e:	2be9      	cmp	r3, #233	; 0xe9
 8012280:	d009      	beq.n	8012296 <check_fs+0x66>
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012288:	2beb      	cmp	r3, #235	; 0xeb
 801228a:	d11e      	bne.n	80122ca <check_fs+0x9a>
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012292:	2b90      	cmp	r3, #144	; 0x90
 8012294:	d119      	bne.n	80122ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	3340      	adds	r3, #64	; 0x40
 801229a:	3336      	adds	r3, #54	; 0x36
 801229c:	4618      	mov	r0, r3
 801229e:	f7fe f837 	bl	8010310 <ld_dword>
 80122a2:	4603      	mov	r3, r0
 80122a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80122a8:	4a0a      	ldr	r2, [pc, #40]	; (80122d4 <check_fs+0xa4>)
 80122aa:	4293      	cmp	r3, r2
 80122ac:	d101      	bne.n	80122b2 <check_fs+0x82>
 80122ae:	2300      	movs	r3, #0
 80122b0:	e00c      	b.n	80122cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	3340      	adds	r3, #64	; 0x40
 80122b6:	3352      	adds	r3, #82	; 0x52
 80122b8:	4618      	mov	r0, r3
 80122ba:	f7fe f829 	bl	8010310 <ld_dword>
 80122be:	4603      	mov	r3, r0
 80122c0:	4a05      	ldr	r2, [pc, #20]	; (80122d8 <check_fs+0xa8>)
 80122c2:	4293      	cmp	r3, r2
 80122c4:	d101      	bne.n	80122ca <check_fs+0x9a>
 80122c6:	2300      	movs	r3, #0
 80122c8:	e000      	b.n	80122cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80122ca:	2302      	movs	r3, #2
}
 80122cc:	4618      	mov	r0, r3
 80122ce:	3708      	adds	r7, #8
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}
 80122d4:	00544146 	.word	0x00544146
 80122d8:	33544146 	.word	0x33544146

080122dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b096      	sub	sp, #88	; 0x58
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	60f8      	str	r0, [r7, #12]
 80122e4:	60b9      	str	r1, [r7, #8]
 80122e6:	4613      	mov	r3, r2
 80122e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80122ea:	68bb      	ldr	r3, [r7, #8]
 80122ec:	2200      	movs	r2, #0
 80122ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80122f0:	68f8      	ldr	r0, [r7, #12]
 80122f2:	f7ff ff58 	bl	80121a6 <get_ldnumber>
 80122f6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80122f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	da01      	bge.n	8012302 <find_volume+0x26>
 80122fe:	230b      	movs	r3, #11
 8012300:	e26f      	b.n	80127e2 <find_volume+0x506>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012302:	4aa4      	ldr	r2, [pc, #656]	; (8012594 <find_volume+0x2b8>)
 8012304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801230a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801230c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801230e:	2b00      	cmp	r3, #0
 8012310:	d101      	bne.n	8012316 <find_volume+0x3a>
 8012312:	230c      	movs	r3, #12
 8012314:	e265      	b.n	80127e2 <find_volume+0x506>

	ENTER_FF(fs);						/* Lock the volume */
 8012316:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012318:	f7fe f8e2 	bl	80104e0 <lock_fs>
 801231c:	4603      	mov	r3, r0
 801231e:	2b00      	cmp	r3, #0
 8012320:	d101      	bne.n	8012326 <find_volume+0x4a>
 8012322:	230f      	movs	r3, #15
 8012324:	e25d      	b.n	80127e2 <find_volume+0x506>
	*rfs = fs;							/* Return pointer to the file system object */
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801232a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801232c:	79fb      	ldrb	r3, [r7, #7]
 801232e:	f023 0301 	bic.w	r3, r3, #1
 8012332:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d01a      	beq.n	8012372 <find_volume+0x96>
		stat = disk_status(fs->drv);
 801233c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801233e:	785b      	ldrb	r3, [r3, #1]
 8012340:	4618      	mov	r0, r3
 8012342:	f7fd ff2f 	bl	80101a4 <disk_status>
 8012346:	4603      	mov	r3, r0
 8012348:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801234c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012350:	f003 0301 	and.w	r3, r3, #1
 8012354:	2b00      	cmp	r3, #0
 8012356:	d10c      	bne.n	8012372 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012358:	79fb      	ldrb	r3, [r7, #7]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d007      	beq.n	801236e <find_volume+0x92>
 801235e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012362:	f003 0304 	and.w	r3, r3, #4
 8012366:	2b00      	cmp	r3, #0
 8012368:	d001      	beq.n	801236e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801236a:	230a      	movs	r3, #10
 801236c:	e239      	b.n	80127e2 <find_volume+0x506>
			}
			return FR_OK;				/* The file system object is valid */
 801236e:	2300      	movs	r3, #0
 8012370:	e237      	b.n	80127e2 <find_volume+0x506>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012374:	2200      	movs	r2, #0
 8012376:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801237a:	b2da      	uxtb	r2, r3
 801237c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801237e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012382:	785b      	ldrb	r3, [r3, #1]
 8012384:	4618      	mov	r0, r3
 8012386:	f7fd ff27 	bl	80101d8 <disk_initialize>
 801238a:	4603      	mov	r3, r0
 801238c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012390:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012394:	f003 0301 	and.w	r3, r3, #1
 8012398:	2b00      	cmp	r3, #0
 801239a:	d001      	beq.n	80123a0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801239c:	2303      	movs	r3, #3
 801239e:	e220      	b.n	80127e2 <find_volume+0x506>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80123a0:	79fb      	ldrb	r3, [r7, #7]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d007      	beq.n	80123b6 <find_volume+0xda>
 80123a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80123aa:	f003 0304 	and.w	r3, r3, #4
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d001      	beq.n	80123b6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80123b2:	230a      	movs	r3, #10
 80123b4:	e215      	b.n	80127e2 <find_volume+0x506>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80123b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123b8:	7858      	ldrb	r0, [r3, #1]
 80123ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123bc:	330c      	adds	r3, #12
 80123be:	461a      	mov	r2, r3
 80123c0:	2102      	movs	r1, #2
 80123c2:	f7fd ff6f 	bl	80102a4 <disk_ioctl>
 80123c6:	4603      	mov	r3, r0
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d001      	beq.n	80123d0 <find_volume+0xf4>
 80123cc:	2301      	movs	r3, #1
 80123ce:	e208      	b.n	80127e2 <find_volume+0x506>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80123d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123d2:	899b      	ldrh	r3, [r3, #12]
 80123d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80123d8:	d80d      	bhi.n	80123f6 <find_volume+0x11a>
 80123da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123dc:	899b      	ldrh	r3, [r3, #12]
 80123de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80123e2:	d308      	bcc.n	80123f6 <find_volume+0x11a>
 80123e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e6:	899b      	ldrh	r3, [r3, #12]
 80123e8:	461a      	mov	r2, r3
 80123ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ec:	899b      	ldrh	r3, [r3, #12]
 80123ee:	3b01      	subs	r3, #1
 80123f0:	4013      	ands	r3, r2
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d001      	beq.n	80123fa <find_volume+0x11e>
 80123f6:	2301      	movs	r3, #1
 80123f8:	e1f3      	b.n	80127e2 <find_volume+0x506>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80123fa:	2300      	movs	r3, #0
 80123fc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80123fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012400:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012402:	f7ff ff15 	bl	8012230 <check_fs>
 8012406:	4603      	mov	r3, r0
 8012408:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801240c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012410:	2b02      	cmp	r3, #2
 8012412:	d14b      	bne.n	80124ac <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012414:	2300      	movs	r3, #0
 8012416:	643b      	str	r3, [r7, #64]	; 0x40
 8012418:	e01f      	b.n	801245a <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801241c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8012420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012422:	011b      	lsls	r3, r3, #4
 8012424:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012428:	4413      	add	r3, r2
 801242a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801242e:	3304      	adds	r3, #4
 8012430:	781b      	ldrb	r3, [r3, #0]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d006      	beq.n	8012444 <find_volume+0x168>
 8012436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012438:	3308      	adds	r3, #8
 801243a:	4618      	mov	r0, r3
 801243c:	f7fd ff68 	bl	8010310 <ld_dword>
 8012440:	4602      	mov	r2, r0
 8012442:	e000      	b.n	8012446 <find_volume+0x16a>
 8012444:	2200      	movs	r2, #0
 8012446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012448:	009b      	lsls	r3, r3, #2
 801244a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801244e:	440b      	add	r3, r1
 8012450:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012456:	3301      	adds	r3, #1
 8012458:	643b      	str	r3, [r7, #64]	; 0x40
 801245a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801245c:	2b03      	cmp	r3, #3
 801245e:	d9dc      	bls.n	801241a <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012460:	2300      	movs	r3, #0
 8012462:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012466:	2b00      	cmp	r3, #0
 8012468:	d002      	beq.n	8012470 <find_volume+0x194>
 801246a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801246c:	3b01      	subs	r3, #1
 801246e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012472:	009b      	lsls	r3, r3, #2
 8012474:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012478:	4413      	add	r3, r2
 801247a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801247e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012482:	2b00      	cmp	r3, #0
 8012484:	d005      	beq.n	8012492 <find_volume+0x1b6>
 8012486:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012488:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801248a:	f7ff fed1 	bl	8012230 <check_fs>
 801248e:	4603      	mov	r3, r0
 8012490:	e000      	b.n	8012494 <find_volume+0x1b8>
 8012492:	2303      	movs	r3, #3
 8012494:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012498:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801249c:	2b01      	cmp	r3, #1
 801249e:	d905      	bls.n	80124ac <find_volume+0x1d0>
 80124a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124a2:	3301      	adds	r3, #1
 80124a4:	643b      	str	r3, [r7, #64]	; 0x40
 80124a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124a8:	2b03      	cmp	r3, #3
 80124aa:	d9e1      	bls.n	8012470 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80124ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80124b0:	2b04      	cmp	r3, #4
 80124b2:	d101      	bne.n	80124b8 <find_volume+0x1dc>
 80124b4:	2301      	movs	r3, #1
 80124b6:	e194      	b.n	80127e2 <find_volume+0x506>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80124b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80124bc:	2b01      	cmp	r3, #1
 80124be:	d901      	bls.n	80124c4 <find_volume+0x1e8>
 80124c0:	230d      	movs	r3, #13
 80124c2:	e18e      	b.n	80127e2 <find_volume+0x506>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80124c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c6:	3340      	adds	r3, #64	; 0x40
 80124c8:	330b      	adds	r3, #11
 80124ca:	4618      	mov	r0, r3
 80124cc:	f7fd ff08 	bl	80102e0 <ld_word>
 80124d0:	4603      	mov	r3, r0
 80124d2:	461a      	mov	r2, r3
 80124d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d6:	899b      	ldrh	r3, [r3, #12]
 80124d8:	429a      	cmp	r2, r3
 80124da:	d001      	beq.n	80124e0 <find_volume+0x204>
 80124dc:	230d      	movs	r3, #13
 80124de:	e180      	b.n	80127e2 <find_volume+0x506>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80124e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e2:	3340      	adds	r3, #64	; 0x40
 80124e4:	3316      	adds	r3, #22
 80124e6:	4618      	mov	r0, r3
 80124e8:	f7fd fefa 	bl	80102e0 <ld_word>
 80124ec:	4603      	mov	r3, r0
 80124ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80124f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d106      	bne.n	8012504 <find_volume+0x228>
 80124f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f8:	3340      	adds	r3, #64	; 0x40
 80124fa:	3324      	adds	r3, #36	; 0x24
 80124fc:	4618      	mov	r0, r3
 80124fe:	f7fd ff07 	bl	8010310 <ld_dword>
 8012502:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012506:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012508:	629a      	str	r2, [r3, #40]	; 0x28

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801250a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801250c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8012510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012512:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012516:	789b      	ldrb	r3, [r3, #2]
 8012518:	2b01      	cmp	r3, #1
 801251a:	d005      	beq.n	8012528 <find_volume+0x24c>
 801251c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801251e:	789b      	ldrb	r3, [r3, #2]
 8012520:	2b02      	cmp	r3, #2
 8012522:	d001      	beq.n	8012528 <find_volume+0x24c>
 8012524:	230d      	movs	r3, #13
 8012526:	e15c      	b.n	80127e2 <find_volume+0x506>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801252a:	789b      	ldrb	r3, [r3, #2]
 801252c:	461a      	mov	r2, r3
 801252e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012530:	fb02 f303 	mul.w	r3, r2, r3
 8012534:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012538:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801253c:	b29a      	uxth	r2, r3
 801253e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012540:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012544:	895b      	ldrh	r3, [r3, #10]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d008      	beq.n	801255c <find_volume+0x280>
 801254a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254c:	895b      	ldrh	r3, [r3, #10]
 801254e:	461a      	mov	r2, r3
 8012550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012552:	895b      	ldrh	r3, [r3, #10]
 8012554:	3b01      	subs	r3, #1
 8012556:	4013      	ands	r3, r2
 8012558:	2b00      	cmp	r3, #0
 801255a:	d001      	beq.n	8012560 <find_volume+0x284>
 801255c:	230d      	movs	r3, #13
 801255e:	e140      	b.n	80127e2 <find_volume+0x506>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012562:	3340      	adds	r3, #64	; 0x40
 8012564:	3311      	adds	r3, #17
 8012566:	4618      	mov	r0, r3
 8012568:	f7fd feba 	bl	80102e0 <ld_word>
 801256c:	4603      	mov	r3, r0
 801256e:	461a      	mov	r2, r3
 8012570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012572:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012576:	891b      	ldrh	r3, [r3, #8]
 8012578:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801257a:	8992      	ldrh	r2, [r2, #12]
 801257c:	0952      	lsrs	r2, r2, #5
 801257e:	b292      	uxth	r2, r2
 8012580:	fbb3 f1f2 	udiv	r1, r3, r2
 8012584:	fb02 f201 	mul.w	r2, r2, r1
 8012588:	1a9b      	subs	r3, r3, r2
 801258a:	b29b      	uxth	r3, r3
 801258c:	2b00      	cmp	r3, #0
 801258e:	d003      	beq.n	8012598 <find_volume+0x2bc>
 8012590:	230d      	movs	r3, #13
 8012592:	e126      	b.n	80127e2 <find_volume+0x506>
 8012594:	2000178c 	.word	0x2000178c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801259a:	3340      	adds	r3, #64	; 0x40
 801259c:	3313      	adds	r3, #19
 801259e:	4618      	mov	r0, r3
 80125a0:	f7fd fe9e 	bl	80102e0 <ld_word>
 80125a4:	4603      	mov	r3, r0
 80125a6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80125a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d106      	bne.n	80125bc <find_volume+0x2e0>
 80125ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b0:	3340      	adds	r3, #64	; 0x40
 80125b2:	3320      	adds	r3, #32
 80125b4:	4618      	mov	r0, r3
 80125b6:	f7fd feab 	bl	8010310 <ld_dword>
 80125ba:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80125bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125be:	3340      	adds	r3, #64	; 0x40
 80125c0:	330e      	adds	r3, #14
 80125c2:	4618      	mov	r0, r3
 80125c4:	f7fd fe8c 	bl	80102e0 <ld_word>
 80125c8:	4603      	mov	r3, r0
 80125ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80125cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d101      	bne.n	80125d6 <find_volume+0x2fa>
 80125d2:	230d      	movs	r3, #13
 80125d4:	e105      	b.n	80127e2 <find_volume+0x506>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80125d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80125d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125da:	4413      	add	r3, r2
 80125dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80125de:	8911      	ldrh	r1, [r2, #8]
 80125e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80125e2:	8992      	ldrh	r2, [r2, #12]
 80125e4:	0952      	lsrs	r2, r2, #5
 80125e6:	b292      	uxth	r2, r2
 80125e8:	fbb1 f2f2 	udiv	r2, r1, r2
 80125ec:	b292      	uxth	r2, r2
 80125ee:	4413      	add	r3, r2
 80125f0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80125f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80125f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d201      	bcs.n	80125fe <find_volume+0x322>
 80125fa:	230d      	movs	r3, #13
 80125fc:	e0f1      	b.n	80127e2 <find_volume+0x506>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80125fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012602:	1ad3      	subs	r3, r2, r3
 8012604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012606:	8952      	ldrh	r2, [r2, #10]
 8012608:	fbb3 f3f2 	udiv	r3, r3, r2
 801260c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012610:	2b00      	cmp	r3, #0
 8012612:	d101      	bne.n	8012618 <find_volume+0x33c>
 8012614:	230d      	movs	r3, #13
 8012616:	e0e4      	b.n	80127e2 <find_volume+0x506>
		fmt = FS_FAT32;
 8012618:	2303      	movs	r3, #3
 801261a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012620:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012624:	4293      	cmp	r3, r2
 8012626:	d802      	bhi.n	801262e <find_volume+0x352>
 8012628:	2302      	movs	r3, #2
 801262a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012630:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012634:	4293      	cmp	r3, r2
 8012636:	d802      	bhi.n	801263e <find_volume+0x362>
 8012638:	2301      	movs	r3, #1
 801263a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012640:	1c9a      	adds	r2, r3, #2
 8012642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012644:	625a      	str	r2, [r3, #36]	; 0x24
		fs->volbase = bsect;							/* Volume start sector */
 8012646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012648:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801264a:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801264c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801264e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012650:	441a      	add	r2, r3
 8012652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012654:	631a      	str	r2, [r3, #48]	; 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 8012656:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801265a:	441a      	add	r2, r3
 801265c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801265e:	639a      	str	r2, [r3, #56]	; 0x38
		if (fmt == FS_FAT32) {
 8012660:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012664:	2b03      	cmp	r3, #3
 8012666:	d11e      	bne.n	80126a6 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801266a:	3340      	adds	r3, #64	; 0x40
 801266c:	332a      	adds	r3, #42	; 0x2a
 801266e:	4618      	mov	r0, r3
 8012670:	f7fd fe36 	bl	80102e0 <ld_word>
 8012674:	4603      	mov	r3, r0
 8012676:	2b00      	cmp	r3, #0
 8012678:	d001      	beq.n	801267e <find_volume+0x3a2>
 801267a:	230d      	movs	r3, #13
 801267c:	e0b1      	b.n	80127e2 <find_volume+0x506>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012680:	891b      	ldrh	r3, [r3, #8]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d001      	beq.n	801268a <find_volume+0x3ae>
 8012686:	230d      	movs	r3, #13
 8012688:	e0ab      	b.n	80127e2 <find_volume+0x506>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801268a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801268c:	3340      	adds	r3, #64	; 0x40
 801268e:	332c      	adds	r3, #44	; 0x2c
 8012690:	4618      	mov	r0, r3
 8012692:	f7fd fe3d 	bl	8010310 <ld_dword>
 8012696:	4602      	mov	r2, r0
 8012698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269a:	635a      	str	r2, [r3, #52]	; 0x34
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126a0:	009b      	lsls	r3, r3, #2
 80126a2:	647b      	str	r3, [r7, #68]	; 0x44
 80126a4:	e01f      	b.n	80126e6 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80126a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126a8:	891b      	ldrh	r3, [r3, #8]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d101      	bne.n	80126b2 <find_volume+0x3d6>
 80126ae:	230d      	movs	r3, #13
 80126b0:	e097      	b.n	80127e2 <find_volume+0x506>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80126b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80126b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126b8:	441a      	add	r2, r3
 80126ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126bc:	635a      	str	r2, [r3, #52]	; 0x34
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80126be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80126c2:	2b02      	cmp	r3, #2
 80126c4:	d103      	bne.n	80126ce <find_volume+0x3f2>
 80126c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126ca:	005b      	lsls	r3, r3, #1
 80126cc:	e00a      	b.n	80126e4 <find_volume+0x408>
 80126ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80126d2:	4613      	mov	r3, r2
 80126d4:	005b      	lsls	r3, r3, #1
 80126d6:	4413      	add	r3, r2
 80126d8:	085a      	lsrs	r2, r3, #1
 80126da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126de:	f003 0301 	and.w	r3, r3, #1
 80126e2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80126e4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80126e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80126ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ec:	899b      	ldrh	r3, [r3, #12]
 80126ee:	4619      	mov	r1, r3
 80126f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126f2:	440b      	add	r3, r1
 80126f4:	3b01      	subs	r3, #1
 80126f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80126f8:	8989      	ldrh	r1, [r1, #12]
 80126fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80126fe:	429a      	cmp	r2, r3
 8012700:	d201      	bcs.n	8012706 <find_volume+0x42a>
 8012702:	230d      	movs	r3, #13
 8012704:	e06d      	b.n	80127e2 <find_volume+0x506>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801270c:	61da      	str	r2, [r3, #28]
 801270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012710:	69da      	ldr	r2, [r3, #28]
 8012712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012714:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8012716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012718:	2280      	movs	r2, #128	; 0x80
 801271a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801271c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012720:	2b03      	cmp	r3, #3
 8012722:	d149      	bne.n	80127b8 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012726:	3340      	adds	r3, #64	; 0x40
 8012728:	3330      	adds	r3, #48	; 0x30
 801272a:	4618      	mov	r0, r3
 801272c:	f7fd fdd8 	bl	80102e0 <ld_word>
 8012730:	4603      	mov	r3, r0
 8012732:	2b01      	cmp	r3, #1
 8012734:	d140      	bne.n	80127b8 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012738:	3301      	adds	r3, #1
 801273a:	4619      	mov	r1, r3
 801273c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801273e:	f7fe f8b1 	bl	80108a4 <move_window>
 8012742:	4603      	mov	r3, r0
 8012744:	2b00      	cmp	r3, #0
 8012746:	d137      	bne.n	80127b8 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8012748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801274a:	2200      	movs	r2, #0
 801274c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012750:	3340      	adds	r3, #64	; 0x40
 8012752:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012756:	4618      	mov	r0, r3
 8012758:	f7fd fdc2 	bl	80102e0 <ld_word>
 801275c:	4603      	mov	r3, r0
 801275e:	461a      	mov	r2, r3
 8012760:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012764:	429a      	cmp	r2, r3
 8012766:	d127      	bne.n	80127b8 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801276a:	3340      	adds	r3, #64	; 0x40
 801276c:	4618      	mov	r0, r3
 801276e:	f7fd fdcf 	bl	8010310 <ld_dword>
 8012772:	4603      	mov	r3, r0
 8012774:	4a1d      	ldr	r2, [pc, #116]	; (80127ec <find_volume+0x510>)
 8012776:	4293      	cmp	r3, r2
 8012778:	d11e      	bne.n	80127b8 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801277a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801277c:	3340      	adds	r3, #64	; 0x40
 801277e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012782:	4618      	mov	r0, r3
 8012784:	f7fd fdc4 	bl	8010310 <ld_dword>
 8012788:	4603      	mov	r3, r0
 801278a:	4a19      	ldr	r2, [pc, #100]	; (80127f0 <find_volume+0x514>)
 801278c:	4293      	cmp	r3, r2
 801278e:	d113      	bne.n	80127b8 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012792:	3340      	adds	r3, #64	; 0x40
 8012794:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012798:	4618      	mov	r0, r3
 801279a:	f7fd fdb9 	bl	8010310 <ld_dword>
 801279e:	4602      	mov	r2, r0
 80127a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127a2:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80127a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127a6:	3340      	adds	r3, #64	; 0x40
 80127a8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80127ac:	4618      	mov	r0, r3
 80127ae:	f7fd fdaf 	bl	8010310 <ld_dword>
 80127b2:	4602      	mov	r2, r0
 80127b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127b6:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80127b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80127be:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80127c0:	4b0c      	ldr	r3, [pc, #48]	; (80127f4 <find_volume+0x518>)
 80127c2:	881b      	ldrh	r3, [r3, #0]
 80127c4:	3301      	adds	r3, #1
 80127c6:	b29a      	uxth	r2, r3
 80127c8:	4b0a      	ldr	r3, [pc, #40]	; (80127f4 <find_volume+0x518>)
 80127ca:	801a      	strh	r2, [r3, #0]
 80127cc:	4b09      	ldr	r3, [pc, #36]	; (80127f4 <find_volume+0x518>)
 80127ce:	881a      	ldrh	r2, [r3, #0]
 80127d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127d2:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80127d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127d6:	2200      	movs	r2, #0
 80127d8:	621a      	str	r2, [r3, #32]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80127da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80127dc:	f7fd fffa 	bl	80107d4 <clear_lock>
#endif
	return FR_OK;
 80127e0:	2300      	movs	r3, #0
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3758      	adds	r7, #88	; 0x58
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}
 80127ea:	bf00      	nop
 80127ec:	41615252 	.word	0x41615252
 80127f0:	61417272 	.word	0x61417272
 80127f4:	20001790 	.word	0x20001790

080127f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b084      	sub	sp, #16
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
 8012800:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012802:	2309      	movs	r3, #9
 8012804:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d02e      	beq.n	801286a <validate+0x72>
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d02a      	beq.n	801286a <validate+0x72>
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	781b      	ldrb	r3, [r3, #0]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d025      	beq.n	801286a <validate+0x72>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	889a      	ldrh	r2, [r3, #4]
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	88db      	ldrh	r3, [r3, #6]
 8012828:	429a      	cmp	r2, r3
 801282a:	d11e      	bne.n	801286a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	4618      	mov	r0, r3
 8012832:	f7fd fe55 	bl	80104e0 <lock_fs>
 8012836:	4603      	mov	r3, r0
 8012838:	2b00      	cmp	r3, #0
 801283a:	d014      	beq.n	8012866 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	785b      	ldrb	r3, [r3, #1]
 8012842:	4618      	mov	r0, r3
 8012844:	f7fd fcae 	bl	80101a4 <disk_status>
 8012848:	4603      	mov	r3, r0
 801284a:	f003 0301 	and.w	r3, r3, #1
 801284e:	2b00      	cmp	r3, #0
 8012850:	d102      	bne.n	8012858 <validate+0x60>
				res = FR_OK;
 8012852:	2300      	movs	r3, #0
 8012854:	73fb      	strb	r3, [r7, #15]
 8012856:	e008      	b.n	801286a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	2100      	movs	r1, #0
 801285e:	4618      	mov	r0, r3
 8012860:	f7fd fe54 	bl	801050c <unlock_fs>
 8012864:	e001      	b.n	801286a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8012866:	230f      	movs	r3, #15
 8012868:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801286a:	7bfb      	ldrb	r3, [r7, #15]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d102      	bne.n	8012876 <validate+0x7e>
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	e000      	b.n	8012878 <validate+0x80>
 8012876:	2300      	movs	r3, #0
 8012878:	683a      	ldr	r2, [r7, #0]
 801287a:	6013      	str	r3, [r2, #0]
	return res;
 801287c:	7bfb      	ldrb	r3, [r7, #15]
}
 801287e:	4618      	mov	r0, r3
 8012880:	3710      	adds	r7, #16
 8012882:	46bd      	mov	sp, r7
 8012884:	bd80      	pop	{r7, pc}
	...

08012888 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b088      	sub	sp, #32
 801288c:	af00      	add	r7, sp, #0
 801288e:	60f8      	str	r0, [r7, #12]
 8012890:	60b9      	str	r1, [r7, #8]
 8012892:	4613      	mov	r3, r2
 8012894:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012896:	68bb      	ldr	r3, [r7, #8]
 8012898:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801289a:	f107 0310 	add.w	r3, r7, #16
 801289e:	4618      	mov	r0, r3
 80128a0:	f7ff fc81 	bl	80121a6 <get_ldnumber>
 80128a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80128a6:	69fb      	ldr	r3, [r7, #28]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	da01      	bge.n	80128b0 <f_mount+0x28>
 80128ac:	230b      	movs	r3, #11
 80128ae:	e048      	b.n	8012942 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80128b0:	4a26      	ldr	r2, [pc, #152]	; (801294c <f_mount+0xc4>)
 80128b2:	69fb      	ldr	r3, [r7, #28]
 80128b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80128b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80128ba:	69bb      	ldr	r3, [r7, #24]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d00f      	beq.n	80128e0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80128c0:	69b8      	ldr	r0, [r7, #24]
 80128c2:	f7fd ff87 	bl	80107d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80128c6:	69bb      	ldr	r3, [r7, #24]
 80128c8:	695b      	ldr	r3, [r3, #20]
 80128ca:	4618      	mov	r0, r3
 80128cc:	f001 fad2 	bl	8013e74 <ff_del_syncobj>
 80128d0:	4603      	mov	r3, r0
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d101      	bne.n	80128da <f_mount+0x52>
 80128d6:	2302      	movs	r3, #2
 80128d8:	e033      	b.n	8012942 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80128da:	69bb      	ldr	r3, [r7, #24]
 80128dc:	2200      	movs	r2, #0
 80128de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d00f      	beq.n	8012906 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	2200      	movs	r2, #0
 80128ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80128ec:	69fb      	ldr	r3, [r7, #28]
 80128ee:	b2da      	uxtb	r2, r3
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	3314      	adds	r3, #20
 80128f4:	4619      	mov	r1, r3
 80128f6:	4610      	mov	r0, r2
 80128f8:	f001 fa9c 	bl	8013e34 <ff_cre_syncobj>
 80128fc:	4603      	mov	r3, r0
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d101      	bne.n	8012906 <f_mount+0x7e>
 8012902:	2302      	movs	r3, #2
 8012904:	e01d      	b.n	8012942 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012906:	68fa      	ldr	r2, [r7, #12]
 8012908:	4910      	ldr	r1, [pc, #64]	; (801294c <f_mount+0xc4>)
 801290a:	69fb      	ldr	r3, [r7, #28]
 801290c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d002      	beq.n	801291c <f_mount+0x94>
 8012916:	79fb      	ldrb	r3, [r7, #7]
 8012918:	2b01      	cmp	r3, #1
 801291a:	d001      	beq.n	8012920 <f_mount+0x98>
 801291c:	2300      	movs	r3, #0
 801291e:	e010      	b.n	8012942 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012920:	f107 010c 	add.w	r1, r7, #12
 8012924:	f107 0308 	add.w	r3, r7, #8
 8012928:	2200      	movs	r2, #0
 801292a:	4618      	mov	r0, r3
 801292c:	f7ff fcd6 	bl	80122dc <find_volume>
 8012930:	4603      	mov	r3, r0
 8012932:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	7dfa      	ldrb	r2, [r7, #23]
 8012938:	4611      	mov	r1, r2
 801293a:	4618      	mov	r0, r3
 801293c:	f7fd fde6 	bl	801050c <unlock_fs>
 8012940:	7dfb      	ldrb	r3, [r7, #23]
}
 8012942:	4618      	mov	r0, r3
 8012944:	3720      	adds	r7, #32
 8012946:	46bd      	mov	sp, r7
 8012948:	bd80      	pop	{r7, pc}
 801294a:	bf00      	nop
 801294c:	2000178c 	.word	0x2000178c

08012950 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8012956:	af00      	add	r7, sp, #0
 8012958:	f107 030c 	add.w	r3, r7, #12
 801295c:	6018      	str	r0, [r3, #0]
 801295e:	f107 0308 	add.w	r3, r7, #8
 8012962:	6019      	str	r1, [r3, #0]
 8012964:	1dfb      	adds	r3, r7, #7
 8012966:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012968:	f107 030c 	add.w	r3, r7, #12
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d101      	bne.n	8012976 <f_open+0x26>
 8012972:	2309      	movs	r3, #9
 8012974:	e24a      	b.n	8012e0c <f_open+0x4bc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012976:	1dfb      	adds	r3, r7, #7
 8012978:	1dfa      	adds	r2, r7, #7
 801297a:	7812      	ldrb	r2, [r2, #0]
 801297c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012980:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8012982:	1dfb      	adds	r3, r7, #7
 8012984:	781a      	ldrb	r2, [r3, #0]
 8012986:	f507 7105 	add.w	r1, r7, #532	; 0x214
 801298a:	f107 0308 	add.w	r3, r7, #8
 801298e:	4618      	mov	r0, r3
 8012990:	f7ff fca4 	bl	80122dc <find_volume>
 8012994:	4603      	mov	r3, r0
 8012996:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 801299a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801299e:	2b00      	cmp	r3, #0
 80129a0:	f040 8221 	bne.w	8012de6 <f_open+0x496>
		dj.obj.fs = fs;
 80129a4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80129a8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 80129ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80129b0:	f107 0214 	add.w	r2, r7, #20
 80129b4:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80129b6:	f107 0308 	add.w	r3, r7, #8
 80129ba:	681a      	ldr	r2, [r3, #0]
 80129bc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80129c0:	4611      	mov	r1, r2
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7ff fb5a 	bl	801207c <follow_path>
 80129c8:	4603      	mov	r3, r0
 80129ca:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80129ce:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d11b      	bne.n	8012a0e <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80129d6:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80129da:	b25b      	sxtb	r3, r3
 80129dc:	2b00      	cmp	r3, #0
 80129de:	da03      	bge.n	80129e8 <f_open+0x98>
				res = FR_INVALID_NAME;
 80129e0:	2306      	movs	r3, #6
 80129e2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80129e6:	e012      	b.n	8012a0e <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80129e8:	1dfb      	adds	r3, r7, #7
 80129ea:	781b      	ldrb	r3, [r3, #0]
 80129ec:	f023 0301 	bic.w	r3, r3, #1
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	bf14      	ite	ne
 80129f4:	2301      	movne	r3, #1
 80129f6:	2300      	moveq	r3, #0
 80129f8:	b2db      	uxtb	r3, r3
 80129fa:	461a      	mov	r2, r3
 80129fc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012a00:	4611      	mov	r1, r2
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7fd fd9e 	bl	8010544 <chk_lock>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012a0e:	1dfb      	adds	r3, r7, #7
 8012a10:	781b      	ldrb	r3, [r3, #0]
 8012a12:	f003 031c 	and.w	r3, r3, #28
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	f000 809b 	beq.w	8012b52 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8012a1c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d019      	beq.n	8012a58 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012a24:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012a28:	2b04      	cmp	r3, #4
 8012a2a:	d10e      	bne.n	8012a4a <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012a2c:	f7fd fde6 	bl	80105fc <enq_lock>
 8012a30:	4603      	mov	r3, r0
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d006      	beq.n	8012a44 <f_open+0xf4>
 8012a36:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7fe ff44 	bl	80118c8 <dir_register>
 8012a40:	4603      	mov	r3, r0
 8012a42:	e000      	b.n	8012a46 <f_open+0xf6>
 8012a44:	2312      	movs	r3, #18
 8012a46:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012a4a:	1dfb      	adds	r3, r7, #7
 8012a4c:	1dfa      	adds	r2, r7, #7
 8012a4e:	7812      	ldrb	r2, [r2, #0]
 8012a50:	f042 0208 	orr.w	r2, r2, #8
 8012a54:	701a      	strb	r2, [r3, #0]
 8012a56:	e012      	b.n	8012a7e <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012a58:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8012a5c:	f003 0311 	and.w	r3, r3, #17
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d003      	beq.n	8012a6c <f_open+0x11c>
					res = FR_DENIED;
 8012a64:	2307      	movs	r3, #7
 8012a66:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8012a6a:	e008      	b.n	8012a7e <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012a6c:	1dfb      	adds	r3, r7, #7
 8012a6e:	781b      	ldrb	r3, [r3, #0]
 8012a70:	f003 0304 	and.w	r3, r3, #4
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d002      	beq.n	8012a7e <f_open+0x12e>
 8012a78:	2308      	movs	r3, #8
 8012a7a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012a7e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	f040 8082 	bne.w	8012b8c <f_open+0x23c>
 8012a88:	1dfb      	adds	r3, r7, #7
 8012a8a:	781b      	ldrb	r3, [r3, #0]
 8012a8c:	f003 0308 	and.w	r3, r3, #8
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d07b      	beq.n	8012b8c <f_open+0x23c>
				dw = GET_FATTIME();
 8012a94:	f7fc fd6c 	bl	800f570 <get_fattime>
 8012a98:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012a9c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8012aa0:	330e      	adds	r3, #14
 8012aa2:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f7fd fc70 	bl	801038c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012aac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8012ab0:	3316      	adds	r3, #22
 8012ab2:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f7fd fc68 	bl	801038c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012abc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8012ac0:	330b      	adds	r3, #11
 8012ac2:	2220      	movs	r2, #32
 8012ac4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012ac6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012aca:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8012ace:	4611      	mov	r1, r2
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f7fe fc6f 	bl	80113b4 <ld_clust>
 8012ad6:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012ada:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012ade:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7fe fc84 	bl	80113f2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012aea:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8012aee:	331c      	adds	r3, #28
 8012af0:	2100      	movs	r1, #0
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7fd fc4a 	bl	801038c <st_dword>
					fs->wflag = 1;
 8012af8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012afc:	2201      	movs	r2, #1
 8012afe:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012b00:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d041      	beq.n	8012b8c <f_open+0x23c>
						dw = fs->winsect;
 8012b08:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b0e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8012b12:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012b16:	2200      	movs	r2, #0
 8012b18:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	f7fe f96e 	bl	8010dfe <remove_chain>
 8012b22:	4603      	mov	r3, r0
 8012b24:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8012b28:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d12d      	bne.n	8012b8c <f_open+0x23c>
							res = move_window(fs, dw);
 8012b30:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012b34:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f7fd feb3 	bl	80108a4 <move_window>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012b44:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012b48:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8012b4c:	3a01      	subs	r2, #1
 8012b4e:	619a      	str	r2, [r3, #24]
 8012b50:	e01c      	b.n	8012b8c <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012b52:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d118      	bne.n	8012b8c <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012b5a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8012b5e:	f003 0310 	and.w	r3, r3, #16
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d003      	beq.n	8012b6e <f_open+0x21e>
					res = FR_NO_FILE;
 8012b66:	2304      	movs	r3, #4
 8012b68:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8012b6c:	e00e      	b.n	8012b8c <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012b6e:	1dfb      	adds	r3, r7, #7
 8012b70:	781b      	ldrb	r3, [r3, #0]
 8012b72:	f003 0302 	and.w	r3, r3, #2
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d008      	beq.n	8012b8c <f_open+0x23c>
 8012b7a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8012b7e:	f003 0301 	and.w	r3, r3, #1
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d002      	beq.n	8012b8c <f_open+0x23c>
						res = FR_DENIED;
 8012b86:	2307      	movs	r3, #7
 8012b88:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8012b8c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d136      	bne.n	8012c02 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012b94:	1dfb      	adds	r3, r7, #7
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	f003 0308 	and.w	r3, r3, #8
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d005      	beq.n	8012bac <f_open+0x25c>
				mode |= FA_MODIFIED;
 8012ba0:	1dfb      	adds	r3, r7, #7
 8012ba2:	1dfa      	adds	r2, r7, #7
 8012ba4:	7812      	ldrb	r2, [r2, #0]
 8012ba6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012baa:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012bac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012bb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012bb2:	f107 030c 	add.w	r3, r7, #12
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012bba:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8012bbe:	f107 030c 	add.w	r3, r7, #12
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012bc6:	1dfb      	adds	r3, r7, #7
 8012bc8:	781b      	ldrb	r3, [r3, #0]
 8012bca:	f023 0301 	bic.w	r3, r3, #1
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	bf14      	ite	ne
 8012bd2:	2301      	movne	r3, #1
 8012bd4:	2300      	moveq	r3, #0
 8012bd6:	b2db      	uxtb	r3, r3
 8012bd8:	461a      	mov	r2, r3
 8012bda:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012bde:	4611      	mov	r1, r2
 8012be0:	4618      	mov	r0, r3
 8012be2:	f7fd fd2d 	bl	8010640 <inc_lock>
 8012be6:	4602      	mov	r2, r0
 8012be8:	f107 030c 	add.w	r3, r7, #12
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012bf0:	f107 030c 	add.w	r3, r7, #12
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	691b      	ldr	r3, [r3, #16]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d102      	bne.n	8012c02 <f_open+0x2b2>
 8012bfc:	2302      	movs	r3, #2
 8012bfe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012c02:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	f040 80ed 	bne.w	8012de6 <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012c0c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012c10:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8012c14:	4611      	mov	r1, r2
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7fe fbcc 	bl	80113b4 <ld_clust>
 8012c1c:	4602      	mov	r2, r0
 8012c1e:	f107 030c 	add.w	r3, r7, #12
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012c26:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8012c2a:	331c      	adds	r3, #28
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7fd fb6f 	bl	8010310 <ld_dword>
 8012c32:	4602      	mov	r2, r0
 8012c34:	f107 030c 	add.w	r3, r7, #12
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012c3c:	f107 030c 	add.w	r3, r7, #12
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	2200      	movs	r2, #0
 8012c44:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012c46:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8012c4a:	f107 030c 	add.w	r3, r7, #12
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012c52:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012c56:	88da      	ldrh	r2, [r3, #6]
 8012c58:	f107 030c 	add.w	r3, r7, #12
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012c60:	f107 030c 	add.w	r3, r7, #12
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	1dfa      	adds	r2, r7, #7
 8012c68:	7812      	ldrb	r2, [r2, #0]
 8012c6a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012c6c:	f107 030c 	add.w	r3, r7, #12
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	2200      	movs	r2, #0
 8012c74:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012c76:	f107 030c 	add.w	r3, r7, #12
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012c80:	f107 030c 	add.w	r3, r7, #12
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	2200      	movs	r2, #0
 8012c88:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012c8a:	f107 030c 	add.w	r3, r7, #12
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	3330      	adds	r3, #48	; 0x30
 8012c92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012c96:	2100      	movs	r1, #0
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f7fd fbc4 	bl	8010426 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012c9e:	1dfb      	adds	r3, r7, #7
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	f003 0320 	and.w	r3, r3, #32
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	f000 809d 	beq.w	8012de6 <f_open+0x496>
 8012cac:	f107 030c 	add.w	r3, r7, #12
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	68db      	ldr	r3, [r3, #12]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	f000 8096 	beq.w	8012de6 <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012cba:	f107 030c 	add.w	r3, r7, #12
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	68da      	ldr	r2, [r3, #12]
 8012cc2:	f107 030c 	add.w	r3, r7, #12
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012cca:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012cce:	895b      	ldrh	r3, [r3, #10]
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012cd6:	899b      	ldrh	r3, [r3, #12]
 8012cd8:	fb03 f302 	mul.w	r3, r3, r2
 8012cdc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012ce0:	f107 030c 	add.w	r3, r7, #12
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	689b      	ldr	r3, [r3, #8]
 8012ce8:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012cec:	f107 030c 	add.w	r3, r7, #12
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	68db      	ldr	r3, [r3, #12]
 8012cf4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8012cf8:	e01f      	b.n	8012d3a <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 8012cfa:	f107 030c 	add.w	r3, r7, #12
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7fd fe8a 	bl	8010a1e <get_fat>
 8012d0a:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8012d0e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8012d12:	2b01      	cmp	r3, #1
 8012d14:	d802      	bhi.n	8012d1c <f_open+0x3cc>
 8012d16:	2302      	movs	r3, #2
 8012d18:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012d1c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8012d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d24:	d102      	bne.n	8012d2c <f_open+0x3dc>
 8012d26:	2301      	movs	r3, #1
 8012d28:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012d2c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8012d30:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8012d34:	1ad3      	subs	r3, r2, r3
 8012d36:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8012d3a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d105      	bne.n	8012d4e <f_open+0x3fe>
 8012d42:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8012d46:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	d8d5      	bhi.n	8012cfa <f_open+0x3aa>
				}
				fp->clust = clst;
 8012d4e:	f107 030c 	add.w	r3, r7, #12
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8012d58:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012d5a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d141      	bne.n	8012de6 <f_open+0x496>
 8012d62:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012d66:	899b      	ldrh	r3, [r3, #12]
 8012d68:	461a      	mov	r2, r3
 8012d6a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8012d6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012d72:	fb02 f201 	mul.w	r2, r2, r1
 8012d76:	1a9b      	subs	r3, r3, r2
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d034      	beq.n	8012de6 <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012d7c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012d80:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8012d84:	4618      	mov	r0, r3
 8012d86:	f7fd fe2b 	bl	80109e0 <clust2sect>
 8012d8a:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8012d8e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d103      	bne.n	8012d9e <f_open+0x44e>
						res = FR_INT_ERR;
 8012d96:	2302      	movs	r3, #2
 8012d98:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8012d9c:	e023      	b.n	8012de6 <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012d9e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012da2:	899b      	ldrh	r3, [r3, #12]
 8012da4:	461a      	mov	r2, r3
 8012da6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8012daa:	fbb3 f2f2 	udiv	r2, r3, r2
 8012dae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8012db2:	441a      	add	r2, r3
 8012db4:	f107 030c 	add.w	r3, r7, #12
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012dbc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012dc0:	7858      	ldrb	r0, [r3, #1]
 8012dc2:	f107 030c 	add.w	r3, r7, #12
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012dcc:	f107 030c 	add.w	r3, r7, #12
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	6a1a      	ldr	r2, [r3, #32]
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	f7fd fa25 	bl	8010224 <disk_read>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d002      	beq.n	8012de6 <f_open+0x496>
 8012de0:	2301      	movs	r3, #1
 8012de2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012de6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d004      	beq.n	8012df8 <f_open+0x4a8>
 8012dee:	f107 030c 	add.w	r3, r7, #12
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	2200      	movs	r2, #0
 8012df6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012df8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012dfc:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8012e00:	4611      	mov	r1, r2
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7fd fb82 	bl	801050c <unlock_fs>
 8012e08:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}

08012e16 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012e16:	b580      	push	{r7, lr}
 8012e18:	b08e      	sub	sp, #56	; 0x38
 8012e1a:	af00      	add	r7, sp, #0
 8012e1c:	60f8      	str	r0, [r7, #12]
 8012e1e:	60b9      	str	r1, [r7, #8]
 8012e20:	607a      	str	r2, [r7, #4]
 8012e22:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	f107 0214 	add.w	r2, r7, #20
 8012e34:	4611      	mov	r1, r2
 8012e36:	4618      	mov	r0, r3
 8012e38:	f7ff fcde 	bl	80127f8 <validate>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012e42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d107      	bne.n	8012e5a <f_read+0x44>
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	7d5b      	ldrb	r3, [r3, #21]
 8012e4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012e52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d009      	beq.n	8012e6e <f_read+0x58>
 8012e5a:	697b      	ldr	r3, [r7, #20]
 8012e5c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e60:	4611      	mov	r1, r2
 8012e62:	4618      	mov	r0, r3
 8012e64:	f7fd fb52 	bl	801050c <unlock_fs>
 8012e68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e6c:	e15d      	b.n	801312a <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	7d1b      	ldrb	r3, [r3, #20]
 8012e72:	f003 0301 	and.w	r3, r3, #1
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d106      	bne.n	8012e88 <f_read+0x72>
 8012e7a:	697b      	ldr	r3, [r7, #20]
 8012e7c:	2107      	movs	r1, #7
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f7fd fb44 	bl	801050c <unlock_fs>
 8012e84:	2307      	movs	r3, #7
 8012e86:	e150      	b.n	801312a <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	68da      	ldr	r2, [r3, #12]
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	699b      	ldr	r3, [r3, #24]
 8012e90:	1ad3      	subs	r3, r2, r3
 8012e92:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012e94:	687a      	ldr	r2, [r7, #4]
 8012e96:	6a3b      	ldr	r3, [r7, #32]
 8012e98:	429a      	cmp	r2, r3
 8012e9a:	f240 813c 	bls.w	8013116 <f_read+0x300>
 8012e9e:	6a3b      	ldr	r3, [r7, #32]
 8012ea0:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012ea2:	e138      	b.n	8013116 <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	699b      	ldr	r3, [r3, #24]
 8012ea8:	697a      	ldr	r2, [r7, #20]
 8012eaa:	8992      	ldrh	r2, [r2, #12]
 8012eac:	fbb3 f1f2 	udiv	r1, r3, r2
 8012eb0:	fb02 f201 	mul.w	r2, r2, r1
 8012eb4:	1a9b      	subs	r3, r3, r2
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	f040 80f3 	bne.w	80130a2 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	699b      	ldr	r3, [r3, #24]
 8012ec0:	697a      	ldr	r2, [r7, #20]
 8012ec2:	8992      	ldrh	r2, [r2, #12]
 8012ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ec8:	697a      	ldr	r2, [r7, #20]
 8012eca:	8952      	ldrh	r2, [r2, #10]
 8012ecc:	3a01      	subs	r2, #1
 8012ece:	4013      	ands	r3, r2
 8012ed0:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012ed2:	69fb      	ldr	r3, [r7, #28]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d139      	bne.n	8012f4c <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	699b      	ldr	r3, [r3, #24]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d103      	bne.n	8012ee8 <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	689b      	ldr	r3, [r3, #8]
 8012ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8012ee6:	e013      	b.n	8012f10 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d007      	beq.n	8012f00 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	699b      	ldr	r3, [r3, #24]
 8012ef4:	4619      	mov	r1, r3
 8012ef6:	68f8      	ldr	r0, [r7, #12]
 8012ef8:	f7fe f87e 	bl	8010ff8 <clmt_clust>
 8012efc:	6338      	str	r0, [r7, #48]	; 0x30
 8012efe:	e007      	b.n	8012f10 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012f00:	68fa      	ldr	r2, [r7, #12]
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	69db      	ldr	r3, [r3, #28]
 8012f06:	4619      	mov	r1, r3
 8012f08:	4610      	mov	r0, r2
 8012f0a:	f7fd fd88 	bl	8010a1e <get_fat>
 8012f0e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f12:	2b01      	cmp	r3, #1
 8012f14:	d809      	bhi.n	8012f2a <f_read+0x114>
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	2202      	movs	r2, #2
 8012f1a:	755a      	strb	r2, [r3, #21]
 8012f1c:	697b      	ldr	r3, [r7, #20]
 8012f1e:	2102      	movs	r1, #2
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7fd faf3 	bl	801050c <unlock_fs>
 8012f26:	2302      	movs	r3, #2
 8012f28:	e0ff      	b.n	801312a <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f30:	d109      	bne.n	8012f46 <f_read+0x130>
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	2201      	movs	r2, #1
 8012f36:	755a      	strb	r2, [r3, #21]
 8012f38:	697b      	ldr	r3, [r7, #20]
 8012f3a:	2101      	movs	r1, #1
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f7fd fae5 	bl	801050c <unlock_fs>
 8012f42:	2301      	movs	r3, #1
 8012f44:	e0f1      	b.n	801312a <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f4a:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012f4c:	697a      	ldr	r2, [r7, #20]
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	69db      	ldr	r3, [r3, #28]
 8012f52:	4619      	mov	r1, r3
 8012f54:	4610      	mov	r0, r2
 8012f56:	f7fd fd43 	bl	80109e0 <clust2sect>
 8012f5a:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012f5c:	69bb      	ldr	r3, [r7, #24]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d109      	bne.n	8012f76 <f_read+0x160>
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	2202      	movs	r2, #2
 8012f66:	755a      	strb	r2, [r3, #21]
 8012f68:	697b      	ldr	r3, [r7, #20]
 8012f6a:	2102      	movs	r1, #2
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7fd facd 	bl	801050c <unlock_fs>
 8012f72:	2302      	movs	r3, #2
 8012f74:	e0d9      	b.n	801312a <f_read+0x314>
			sect += csect;
 8012f76:	69ba      	ldr	r2, [r7, #24]
 8012f78:	69fb      	ldr	r3, [r7, #28]
 8012f7a:	4413      	add	r3, r2
 8012f7c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012f7e:	697b      	ldr	r3, [r7, #20]
 8012f80:	899b      	ldrh	r3, [r3, #12]
 8012f82:	461a      	mov	r2, r3
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f8a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d046      	beq.n	8013020 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012f92:	69fa      	ldr	r2, [r7, #28]
 8012f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f96:	4413      	add	r3, r2
 8012f98:	697a      	ldr	r2, [r7, #20]
 8012f9a:	8952      	ldrh	r2, [r2, #10]
 8012f9c:	4293      	cmp	r3, r2
 8012f9e:	d905      	bls.n	8012fac <f_read+0x196>
					cc = fs->csize - csect;
 8012fa0:	697b      	ldr	r3, [r7, #20]
 8012fa2:	895b      	ldrh	r3, [r3, #10]
 8012fa4:	461a      	mov	r2, r3
 8012fa6:	69fb      	ldr	r3, [r7, #28]
 8012fa8:	1ad3      	subs	r3, r2, r3
 8012faa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012fac:	697b      	ldr	r3, [r7, #20]
 8012fae:	7858      	ldrb	r0, [r3, #1]
 8012fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb2:	69ba      	ldr	r2, [r7, #24]
 8012fb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012fb6:	f7fd f935 	bl	8010224 <disk_read>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d009      	beq.n	8012fd4 <f_read+0x1be>
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	2201      	movs	r2, #1
 8012fc4:	755a      	strb	r2, [r3, #21]
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	2101      	movs	r1, #1
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f7fd fa9e 	bl	801050c <unlock_fs>
 8012fd0:	2301      	movs	r3, #1
 8012fd2:	e0aa      	b.n	801312a <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	7d1b      	ldrb	r3, [r3, #20]
 8012fd8:	b25b      	sxtb	r3, r3
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	da18      	bge.n	8013010 <f_read+0x1fa>
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	6a1a      	ldr	r2, [r3, #32]
 8012fe2:	69bb      	ldr	r3, [r7, #24]
 8012fe4:	1ad3      	subs	r3, r2, r3
 8012fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d911      	bls.n	8013010 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	6a1a      	ldr	r2, [r3, #32]
 8012ff0:	69bb      	ldr	r3, [r7, #24]
 8012ff2:	1ad3      	subs	r3, r2, r3
 8012ff4:	697a      	ldr	r2, [r7, #20]
 8012ff6:	8992      	ldrh	r2, [r2, #12]
 8012ff8:	fb02 f303 	mul.w	r3, r2, r3
 8012ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ffe:	18d0      	adds	r0, r2, r3
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	899b      	ldrh	r3, [r3, #12]
 801300a:	461a      	mov	r2, r3
 801300c:	f7fd f9ea 	bl	80103e4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	899b      	ldrh	r3, [r3, #12]
 8013014:	461a      	mov	r2, r3
 8013016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013018:	fb02 f303 	mul.w	r3, r2, r3
 801301c:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801301e:	e066      	b.n	80130ee <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	6a1b      	ldr	r3, [r3, #32]
 8013024:	69ba      	ldr	r2, [r7, #24]
 8013026:	429a      	cmp	r2, r3
 8013028:	d038      	beq.n	801309c <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	7d1b      	ldrb	r3, [r3, #20]
 801302e:	b25b      	sxtb	r3, r3
 8013030:	2b00      	cmp	r3, #0
 8013032:	da1d      	bge.n	8013070 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013034:	697b      	ldr	r3, [r7, #20]
 8013036:	7858      	ldrb	r0, [r3, #1]
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	6a1a      	ldr	r2, [r3, #32]
 8013042:	2301      	movs	r3, #1
 8013044:	f7fd f90e 	bl	8010264 <disk_write>
 8013048:	4603      	mov	r3, r0
 801304a:	2b00      	cmp	r3, #0
 801304c:	d009      	beq.n	8013062 <f_read+0x24c>
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	2201      	movs	r2, #1
 8013052:	755a      	strb	r2, [r3, #21]
 8013054:	697b      	ldr	r3, [r7, #20]
 8013056:	2101      	movs	r1, #1
 8013058:	4618      	mov	r0, r3
 801305a:	f7fd fa57 	bl	801050c <unlock_fs>
 801305e:	2301      	movs	r3, #1
 8013060:	e063      	b.n	801312a <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	7d1b      	ldrb	r3, [r3, #20]
 8013066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801306a:	b2da      	uxtb	r2, r3
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013070:	697b      	ldr	r3, [r7, #20]
 8013072:	7858      	ldrb	r0, [r3, #1]
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801307a:	2301      	movs	r3, #1
 801307c:	69ba      	ldr	r2, [r7, #24]
 801307e:	f7fd f8d1 	bl	8010224 <disk_read>
 8013082:	4603      	mov	r3, r0
 8013084:	2b00      	cmp	r3, #0
 8013086:	d009      	beq.n	801309c <f_read+0x286>
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	2201      	movs	r2, #1
 801308c:	755a      	strb	r2, [r3, #21]
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	2101      	movs	r1, #1
 8013092:	4618      	mov	r0, r3
 8013094:	f7fd fa3a 	bl	801050c <unlock_fs>
 8013098:	2301      	movs	r3, #1
 801309a:	e046      	b.n	801312a <f_read+0x314>
			}
#endif
			fp->sect = sect;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	69ba      	ldr	r2, [r7, #24]
 80130a0:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80130a2:	697b      	ldr	r3, [r7, #20]
 80130a4:	899b      	ldrh	r3, [r3, #12]
 80130a6:	4618      	mov	r0, r3
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	699b      	ldr	r3, [r3, #24]
 80130ac:	697a      	ldr	r2, [r7, #20]
 80130ae:	8992      	ldrh	r2, [r2, #12]
 80130b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80130b4:	fb02 f201 	mul.w	r2, r2, r1
 80130b8:	1a9b      	subs	r3, r3, r2
 80130ba:	1ac3      	subs	r3, r0, r3
 80130bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80130be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	429a      	cmp	r2, r3
 80130c4:	d901      	bls.n	80130ca <f_read+0x2b4>
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	699b      	ldr	r3, [r3, #24]
 80130d4:	697a      	ldr	r2, [r7, #20]
 80130d6:	8992      	ldrh	r2, [r2, #12]
 80130d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80130dc:	fb02 f200 	mul.w	r2, r2, r0
 80130e0:	1a9b      	subs	r3, r3, r2
 80130e2:	440b      	add	r3, r1
 80130e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130e6:	4619      	mov	r1, r3
 80130e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130ea:	f7fd f97b 	bl	80103e4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80130ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f2:	4413      	add	r3, r2
 80130f4:	627b      	str	r3, [r7, #36]	; 0x24
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	699a      	ldr	r2, [r3, #24]
 80130fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130fc:	441a      	add	r2, r3
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	619a      	str	r2, [r3, #24]
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	681a      	ldr	r2, [r3, #0]
 8013106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013108:	441a      	add	r2, r3
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	601a      	str	r2, [r3, #0]
 801310e:	687a      	ldr	r2, [r7, #4]
 8013110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013112:	1ad3      	subs	r3, r2, r3
 8013114:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	2b00      	cmp	r3, #0
 801311a:	f47f aec3 	bne.w	8012ea4 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801311e:	697b      	ldr	r3, [r7, #20]
 8013120:	2100      	movs	r1, #0
 8013122:	4618      	mov	r0, r3
 8013124:	f7fd f9f2 	bl	801050c <unlock_fs>
 8013128:	2300      	movs	r3, #0
}
 801312a:	4618      	mov	r0, r3
 801312c:	3738      	adds	r7, #56	; 0x38
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}

08013132 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013132:	b580      	push	{r7, lr}
 8013134:	b08c      	sub	sp, #48	; 0x30
 8013136:	af00      	add	r7, sp, #0
 8013138:	60f8      	str	r0, [r7, #12]
 801313a:	60b9      	str	r1, [r7, #8]
 801313c:	607a      	str	r2, [r7, #4]
 801313e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013140:	68bb      	ldr	r3, [r7, #8]
 8013142:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	2200      	movs	r2, #0
 8013148:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	f107 0210 	add.w	r2, r7, #16
 8013150:	4611      	mov	r1, r2
 8013152:	4618      	mov	r0, r3
 8013154:	f7ff fb50 	bl	80127f8 <validate>
 8013158:	4603      	mov	r3, r0
 801315a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801315e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013162:	2b00      	cmp	r3, #0
 8013164:	d107      	bne.n	8013176 <f_write+0x44>
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	7d5b      	ldrb	r3, [r3, #21]
 801316a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801316e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013172:	2b00      	cmp	r3, #0
 8013174:	d009      	beq.n	801318a <f_write+0x58>
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801317c:	4611      	mov	r1, r2
 801317e:	4618      	mov	r0, r3
 8013180:	f7fd f9c4 	bl	801050c <unlock_fs>
 8013184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013188:	e192      	b.n	80134b0 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	7d1b      	ldrb	r3, [r3, #20]
 801318e:	f003 0302 	and.w	r3, r3, #2
 8013192:	2b00      	cmp	r3, #0
 8013194:	d106      	bne.n	80131a4 <f_write+0x72>
 8013196:	693b      	ldr	r3, [r7, #16]
 8013198:	2107      	movs	r1, #7
 801319a:	4618      	mov	r0, r3
 801319c:	f7fd f9b6 	bl	801050c <unlock_fs>
 80131a0:	2307      	movs	r3, #7
 80131a2:	e185      	b.n	80134b0 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	699a      	ldr	r2, [r3, #24]
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	441a      	add	r2, r3
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	699b      	ldr	r3, [r3, #24]
 80131b0:	429a      	cmp	r2, r3
 80131b2:	f080 816a 	bcs.w	801348a <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	699b      	ldr	r3, [r3, #24]
 80131ba:	43db      	mvns	r3, r3
 80131bc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80131be:	e164      	b.n	801348a <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	699b      	ldr	r3, [r3, #24]
 80131c4:	693a      	ldr	r2, [r7, #16]
 80131c6:	8992      	ldrh	r2, [r2, #12]
 80131c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80131cc:	fb02 f201 	mul.w	r2, r2, r1
 80131d0:	1a9b      	subs	r3, r3, r2
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	f040 810f 	bne.w	80133f6 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	699b      	ldr	r3, [r3, #24]
 80131dc:	693a      	ldr	r2, [r7, #16]
 80131de:	8992      	ldrh	r2, [r2, #12]
 80131e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80131e4:	693a      	ldr	r2, [r7, #16]
 80131e6:	8952      	ldrh	r2, [r2, #10]
 80131e8:	3a01      	subs	r2, #1
 80131ea:	4013      	ands	r3, r2
 80131ec:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80131ee:	69bb      	ldr	r3, [r7, #24]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d14d      	bne.n	8013290 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	699b      	ldr	r3, [r3, #24]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d10c      	bne.n	8013216 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	689b      	ldr	r3, [r3, #8]
 8013200:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013204:	2b00      	cmp	r3, #0
 8013206:	d11a      	bne.n	801323e <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	2100      	movs	r1, #0
 801320c:	4618      	mov	r0, r3
 801320e:	f7fd fe5b 	bl	8010ec8 <create_chain>
 8013212:	62b8      	str	r0, [r7, #40]	; 0x28
 8013214:	e013      	b.n	801323e <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801321a:	2b00      	cmp	r3, #0
 801321c:	d007      	beq.n	801322e <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	699b      	ldr	r3, [r3, #24]
 8013222:	4619      	mov	r1, r3
 8013224:	68f8      	ldr	r0, [r7, #12]
 8013226:	f7fd fee7 	bl	8010ff8 <clmt_clust>
 801322a:	62b8      	str	r0, [r7, #40]	; 0x28
 801322c:	e007      	b.n	801323e <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801322e:	68fa      	ldr	r2, [r7, #12]
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	69db      	ldr	r3, [r3, #28]
 8013234:	4619      	mov	r1, r3
 8013236:	4610      	mov	r0, r2
 8013238:	f7fd fe46 	bl	8010ec8 <create_chain>
 801323c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013240:	2b00      	cmp	r3, #0
 8013242:	f000 8127 	beq.w	8013494 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013248:	2b01      	cmp	r3, #1
 801324a:	d109      	bne.n	8013260 <f_write+0x12e>
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	2202      	movs	r2, #2
 8013250:	755a      	strb	r2, [r3, #21]
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	2102      	movs	r1, #2
 8013256:	4618      	mov	r0, r3
 8013258:	f7fd f958 	bl	801050c <unlock_fs>
 801325c:	2302      	movs	r3, #2
 801325e:	e127      	b.n	80134b0 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013266:	d109      	bne.n	801327c <f_write+0x14a>
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	2201      	movs	r2, #1
 801326c:	755a      	strb	r2, [r3, #21]
 801326e:	693b      	ldr	r3, [r7, #16]
 8013270:	2101      	movs	r1, #1
 8013272:	4618      	mov	r0, r3
 8013274:	f7fd f94a 	bl	801050c <unlock_fs>
 8013278:	2301      	movs	r3, #1
 801327a:	e119      	b.n	80134b0 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013280:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	689b      	ldr	r3, [r3, #8]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d102      	bne.n	8013290 <f_write+0x15e>
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801328e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	7d1b      	ldrb	r3, [r3, #20]
 8013294:	b25b      	sxtb	r3, r3
 8013296:	2b00      	cmp	r3, #0
 8013298:	da1d      	bge.n	80132d6 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801329a:	693b      	ldr	r3, [r7, #16]
 801329c:	7858      	ldrb	r0, [r3, #1]
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	6a1a      	ldr	r2, [r3, #32]
 80132a8:	2301      	movs	r3, #1
 80132aa:	f7fc ffdb 	bl	8010264 <disk_write>
 80132ae:	4603      	mov	r3, r0
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d009      	beq.n	80132c8 <f_write+0x196>
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	2201      	movs	r2, #1
 80132b8:	755a      	strb	r2, [r3, #21]
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	2101      	movs	r1, #1
 80132be:	4618      	mov	r0, r3
 80132c0:	f7fd f924 	bl	801050c <unlock_fs>
 80132c4:	2301      	movs	r3, #1
 80132c6:	e0f3      	b.n	80134b0 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	7d1b      	ldrb	r3, [r3, #20]
 80132cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132d0:	b2da      	uxtb	r2, r3
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80132d6:	693a      	ldr	r2, [r7, #16]
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	69db      	ldr	r3, [r3, #28]
 80132dc:	4619      	mov	r1, r3
 80132de:	4610      	mov	r0, r2
 80132e0:	f7fd fb7e 	bl	80109e0 <clust2sect>
 80132e4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80132e6:	697b      	ldr	r3, [r7, #20]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d109      	bne.n	8013300 <f_write+0x1ce>
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	2202      	movs	r2, #2
 80132f0:	755a      	strb	r2, [r3, #21]
 80132f2:	693b      	ldr	r3, [r7, #16]
 80132f4:	2102      	movs	r1, #2
 80132f6:	4618      	mov	r0, r3
 80132f8:	f7fd f908 	bl	801050c <unlock_fs>
 80132fc:	2302      	movs	r3, #2
 80132fe:	e0d7      	b.n	80134b0 <f_write+0x37e>
			sect += csect;
 8013300:	697a      	ldr	r2, [r7, #20]
 8013302:	69bb      	ldr	r3, [r7, #24]
 8013304:	4413      	add	r3, r2
 8013306:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013308:	693b      	ldr	r3, [r7, #16]
 801330a:	899b      	ldrh	r3, [r3, #12]
 801330c:	461a      	mov	r2, r3
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	fbb3 f3f2 	udiv	r3, r3, r2
 8013314:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013316:	6a3b      	ldr	r3, [r7, #32]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d048      	beq.n	80133ae <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801331c:	69ba      	ldr	r2, [r7, #24]
 801331e:	6a3b      	ldr	r3, [r7, #32]
 8013320:	4413      	add	r3, r2
 8013322:	693a      	ldr	r2, [r7, #16]
 8013324:	8952      	ldrh	r2, [r2, #10]
 8013326:	4293      	cmp	r3, r2
 8013328:	d905      	bls.n	8013336 <f_write+0x204>
					cc = fs->csize - csect;
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	895b      	ldrh	r3, [r3, #10]
 801332e:	461a      	mov	r2, r3
 8013330:	69bb      	ldr	r3, [r7, #24]
 8013332:	1ad3      	subs	r3, r2, r3
 8013334:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013336:	693b      	ldr	r3, [r7, #16]
 8013338:	7858      	ldrb	r0, [r3, #1]
 801333a:	6a3b      	ldr	r3, [r7, #32]
 801333c:	697a      	ldr	r2, [r7, #20]
 801333e:	69f9      	ldr	r1, [r7, #28]
 8013340:	f7fc ff90 	bl	8010264 <disk_write>
 8013344:	4603      	mov	r3, r0
 8013346:	2b00      	cmp	r3, #0
 8013348:	d009      	beq.n	801335e <f_write+0x22c>
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	2201      	movs	r2, #1
 801334e:	755a      	strb	r2, [r3, #21]
 8013350:	693b      	ldr	r3, [r7, #16]
 8013352:	2101      	movs	r1, #1
 8013354:	4618      	mov	r0, r3
 8013356:	f7fd f8d9 	bl	801050c <unlock_fs>
 801335a:	2301      	movs	r3, #1
 801335c:	e0a8      	b.n	80134b0 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	6a1a      	ldr	r2, [r3, #32]
 8013362:	697b      	ldr	r3, [r7, #20]
 8013364:	1ad3      	subs	r3, r2, r3
 8013366:	6a3a      	ldr	r2, [r7, #32]
 8013368:	429a      	cmp	r2, r3
 801336a:	d918      	bls.n	801339e <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	6a1a      	ldr	r2, [r3, #32]
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	1ad3      	subs	r3, r2, r3
 801337a:	693a      	ldr	r2, [r7, #16]
 801337c:	8992      	ldrh	r2, [r2, #12]
 801337e:	fb02 f303 	mul.w	r3, r2, r3
 8013382:	69fa      	ldr	r2, [r7, #28]
 8013384:	18d1      	adds	r1, r2, r3
 8013386:	693b      	ldr	r3, [r7, #16]
 8013388:	899b      	ldrh	r3, [r3, #12]
 801338a:	461a      	mov	r2, r3
 801338c:	f7fd f82a 	bl	80103e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	7d1b      	ldrb	r3, [r3, #20]
 8013394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013398:	b2da      	uxtb	r2, r3
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801339e:	693b      	ldr	r3, [r7, #16]
 80133a0:	899b      	ldrh	r3, [r3, #12]
 80133a2:	461a      	mov	r2, r3
 80133a4:	6a3b      	ldr	r3, [r7, #32]
 80133a6:	fb02 f303 	mul.w	r3, r2, r3
 80133aa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80133ac:	e050      	b.n	8013450 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	6a1b      	ldr	r3, [r3, #32]
 80133b2:	697a      	ldr	r2, [r7, #20]
 80133b4:	429a      	cmp	r2, r3
 80133b6:	d01b      	beq.n	80133f0 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	699a      	ldr	r2, [r3, #24]
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d215      	bcs.n	80133f0 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80133c4:	693b      	ldr	r3, [r7, #16]
 80133c6:	7858      	ldrb	r0, [r3, #1]
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80133ce:	2301      	movs	r3, #1
 80133d0:	697a      	ldr	r2, [r7, #20]
 80133d2:	f7fc ff27 	bl	8010224 <disk_read>
 80133d6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d009      	beq.n	80133f0 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	2201      	movs	r2, #1
 80133e0:	755a      	strb	r2, [r3, #21]
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	2101      	movs	r1, #1
 80133e6:	4618      	mov	r0, r3
 80133e8:	f7fd f890 	bl	801050c <unlock_fs>
 80133ec:	2301      	movs	r3, #1
 80133ee:	e05f      	b.n	80134b0 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	697a      	ldr	r2, [r7, #20]
 80133f4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80133f6:	693b      	ldr	r3, [r7, #16]
 80133f8:	899b      	ldrh	r3, [r3, #12]
 80133fa:	4618      	mov	r0, r3
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	699b      	ldr	r3, [r3, #24]
 8013400:	693a      	ldr	r2, [r7, #16]
 8013402:	8992      	ldrh	r2, [r2, #12]
 8013404:	fbb3 f1f2 	udiv	r1, r3, r2
 8013408:	fb02 f201 	mul.w	r2, r2, r1
 801340c:	1a9b      	subs	r3, r3, r2
 801340e:	1ac3      	subs	r3, r0, r3
 8013410:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	429a      	cmp	r2, r3
 8013418:	d901      	bls.n	801341e <f_write+0x2ec>
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	699b      	ldr	r3, [r3, #24]
 8013428:	693a      	ldr	r2, [r7, #16]
 801342a:	8992      	ldrh	r2, [r2, #12]
 801342c:	fbb3 f0f2 	udiv	r0, r3, r2
 8013430:	fb02 f200 	mul.w	r2, r2, r0
 8013434:	1a9b      	subs	r3, r3, r2
 8013436:	440b      	add	r3, r1
 8013438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801343a:	69f9      	ldr	r1, [r7, #28]
 801343c:	4618      	mov	r0, r3
 801343e:	f7fc ffd1 	bl	80103e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	7d1b      	ldrb	r3, [r3, #20]
 8013446:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801344a:	b2da      	uxtb	r2, r3
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013450:	69fa      	ldr	r2, [r7, #28]
 8013452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013454:	4413      	add	r3, r2
 8013456:	61fb      	str	r3, [r7, #28]
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	699a      	ldr	r2, [r3, #24]
 801345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801345e:	441a      	add	r2, r3
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	619a      	str	r2, [r3, #24]
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	68da      	ldr	r2, [r3, #12]
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	699b      	ldr	r3, [r3, #24]
 801346c:	429a      	cmp	r2, r3
 801346e:	bf38      	it	cc
 8013470:	461a      	movcc	r2, r3
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	60da      	str	r2, [r3, #12]
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	681a      	ldr	r2, [r3, #0]
 801347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801347c:	441a      	add	r2, r3
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	601a      	str	r2, [r3, #0]
 8013482:	687a      	ldr	r2, [r7, #4]
 8013484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013486:	1ad3      	subs	r3, r2, r3
 8013488:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	2b00      	cmp	r3, #0
 801348e:	f47f ae97 	bne.w	80131c0 <f_write+0x8e>
 8013492:	e000      	b.n	8013496 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013494:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	7d1b      	ldrb	r3, [r3, #20]
 801349a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801349e:	b2da      	uxtb	r2, r3
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80134a4:	693b      	ldr	r3, [r7, #16]
 80134a6:	2100      	movs	r1, #0
 80134a8:	4618      	mov	r0, r3
 80134aa:	f7fd f82f 	bl	801050c <unlock_fs>
 80134ae:	2300      	movs	r3, #0
}
 80134b0:	4618      	mov	r0, r3
 80134b2:	3730      	adds	r7, #48	; 0x30
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}

080134b8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b086      	sub	sp, #24
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	f107 0208 	add.w	r2, r7, #8
 80134c6:	4611      	mov	r1, r2
 80134c8:	4618      	mov	r0, r3
 80134ca:	f7ff f995 	bl	80127f8 <validate>
 80134ce:	4603      	mov	r3, r0
 80134d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80134d2:	7dfb      	ldrb	r3, [r7, #23]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d16d      	bne.n	80135b4 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	7d1b      	ldrb	r3, [r3, #20]
 80134dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d067      	beq.n	80135b4 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	7d1b      	ldrb	r3, [r3, #20]
 80134e8:	b25b      	sxtb	r3, r3
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	da1a      	bge.n	8013524 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	7858      	ldrb	r0, [r3, #1]
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	6a1a      	ldr	r2, [r3, #32]
 80134fc:	2301      	movs	r3, #1
 80134fe:	f7fc feb1 	bl	8010264 <disk_write>
 8013502:	4603      	mov	r3, r0
 8013504:	2b00      	cmp	r3, #0
 8013506:	d006      	beq.n	8013516 <f_sync+0x5e>
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	2101      	movs	r1, #1
 801350c:	4618      	mov	r0, r3
 801350e:	f7fc fffd 	bl	801050c <unlock_fs>
 8013512:	2301      	movs	r3, #1
 8013514:	e055      	b.n	80135c2 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	7d1b      	ldrb	r3, [r3, #20]
 801351a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801351e:	b2da      	uxtb	r2, r3
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013524:	f7fc f824 	bl	800f570 <get_fattime>
 8013528:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801352a:	68ba      	ldr	r2, [r7, #8]
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013530:	4619      	mov	r1, r3
 8013532:	4610      	mov	r0, r2
 8013534:	f7fd f9b6 	bl	80108a4 <move_window>
 8013538:	4603      	mov	r3, r0
 801353a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801353c:	7dfb      	ldrb	r3, [r7, #23]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d138      	bne.n	80135b4 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013546:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	330b      	adds	r3, #11
 801354c:	781a      	ldrb	r2, [r3, #0]
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	330b      	adds	r3, #11
 8013552:	f042 0220 	orr.w	r2, r2, #32
 8013556:	b2d2      	uxtb	r2, r2
 8013558:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	6818      	ldr	r0, [r3, #0]
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	689b      	ldr	r3, [r3, #8]
 8013562:	461a      	mov	r2, r3
 8013564:	68f9      	ldr	r1, [r7, #12]
 8013566:	f7fd ff44 	bl	80113f2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	f103 021c 	add.w	r2, r3, #28
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	68db      	ldr	r3, [r3, #12]
 8013574:	4619      	mov	r1, r3
 8013576:	4610      	mov	r0, r2
 8013578:	f7fc ff08 	bl	801038c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	3316      	adds	r3, #22
 8013580:	6939      	ldr	r1, [r7, #16]
 8013582:	4618      	mov	r0, r3
 8013584:	f7fc ff02 	bl	801038c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	3312      	adds	r3, #18
 801358c:	2100      	movs	r1, #0
 801358e:	4618      	mov	r0, r3
 8013590:	f7fc fee1 	bl	8010356 <st_word>
					fs->wflag = 1;
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	2201      	movs	r2, #1
 8013598:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801359a:	68bb      	ldr	r3, [r7, #8]
 801359c:	4618      	mov	r0, r3
 801359e:	f7fd f9af 	bl	8010900 <sync_fs>
 80135a2:	4603      	mov	r3, r0
 80135a4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	7d1b      	ldrb	r3, [r3, #20]
 80135aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80135ae:	b2da      	uxtb	r2, r3
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80135b4:	68bb      	ldr	r3, [r7, #8]
 80135b6:	7dfa      	ldrb	r2, [r7, #23]
 80135b8:	4611      	mov	r1, r2
 80135ba:	4618      	mov	r0, r3
 80135bc:	f7fc ffa6 	bl	801050c <unlock_fs>
 80135c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3718      	adds	r7, #24
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}

080135ca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80135ca:	b580      	push	{r7, lr}
 80135cc:	b084      	sub	sp, #16
 80135ce:	af00      	add	r7, sp, #0
 80135d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80135d2:	6878      	ldr	r0, [r7, #4]
 80135d4:	f7ff ff70 	bl	80134b8 <f_sync>
 80135d8:	4603      	mov	r3, r0
 80135da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80135dc:	7bfb      	ldrb	r3, [r7, #15]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d11d      	bne.n	801361e <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	f107 0208 	add.w	r2, r7, #8
 80135e8:	4611      	mov	r1, r2
 80135ea:	4618      	mov	r0, r3
 80135ec:	f7ff f904 	bl	80127f8 <validate>
 80135f0:	4603      	mov	r3, r0
 80135f2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80135f4:	7bfb      	ldrb	r3, [r7, #15]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d111      	bne.n	801361e <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	691b      	ldr	r3, [r3, #16]
 80135fe:	4618      	mov	r0, r3
 8013600:	f7fd f8ac 	bl	801075c <dec_lock>
 8013604:	4603      	mov	r3, r0
 8013606:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013608:	7bfb      	ldrb	r3, [r7, #15]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d102      	bne.n	8013614 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	2200      	movs	r2, #0
 8013612:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8013614:	68bb      	ldr	r3, [r7, #8]
 8013616:	2100      	movs	r1, #0
 8013618:	4618      	mov	r0, r3
 801361a:	f7fc ff77 	bl	801050c <unlock_fs>
#endif
		}
	}
	return res;
 801361e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013620:	4618      	mov	r0, r3
 8013622:	3710      	adds	r7, #16
 8013624:	46bd      	mov	sp, r7
 8013626:	bd80      	pop	{r7, pc}

08013628 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 801362e:	af00      	add	r7, sp, #0
 8013630:	1d3b      	adds	r3, r7, #4
 8013632:	6018      	str	r0, [r3, #0]
 8013634:	463b      	mov	r3, r7
 8013636:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8013638:	f507 7102 	add.w	r1, r7, #520	; 0x208
 801363c:	1d3b      	adds	r3, r7, #4
 801363e:	2200      	movs	r2, #0
 8013640:	4618      	mov	r0, r3
 8013642:	f7fe fe4b 	bl	80122dc <find_volume>
 8013646:	4603      	mov	r3, r0
 8013648:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 801364c:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8013650:	2b00      	cmp	r3, #0
 8013652:	d127      	bne.n	80136a4 <f_stat+0x7c>
		INIT_NAMBUF(dj.obj.fs);
 8013654:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8013658:	f107 0208 	add.w	r2, r7, #8
 801365c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 801365e:	1d3b      	adds	r3, r7, #4
 8013660:	681a      	ldr	r2, [r3, #0]
 8013662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8013666:	4611      	mov	r1, r2
 8013668:	4618      	mov	r0, r3
 801366a:	f7fe fd07 	bl	801207c <follow_path>
 801366e:	4603      	mov	r3, r0
 8013670:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 8013674:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8013678:	2b00      	cmp	r3, #0
 801367a:	d113      	bne.n	80136a4 <f_stat+0x7c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801367c:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8013680:	b25b      	sxtb	r3, r3
 8013682:	2b00      	cmp	r3, #0
 8013684:	da03      	bge.n	801368e <f_stat+0x66>
				res = FR_INVALID_NAME;
 8013686:	2306      	movs	r3, #6
 8013688:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 801368c:	e00a      	b.n	80136a4 <f_stat+0x7c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801368e:	463b      	mov	r3, r7
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d006      	beq.n	80136a4 <f_stat+0x7c>
 8013696:	463b      	mov	r3, r7
 8013698:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801369c:	6819      	ldr	r1, [r3, #0]
 801369e:	4610      	mov	r0, r2
 80136a0:	f7fe fa0a 	bl	8011ab8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80136a4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80136a8:	f897 223f 	ldrb.w	r2, [r7, #575]	; 0x23f
 80136ac:	4611      	mov	r1, r2
 80136ae:	4618      	mov	r0, r3
 80136b0:	f7fc ff2c 	bl	801050c <unlock_fs>
 80136b4:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 80136b8:	4618      	mov	r0, r3
 80136ba:	f507 7710 	add.w	r7, r7, #576	; 0x240
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd80      	pop	{r7, pc}

080136c2 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80136c2:	b580      	push	{r7, lr}
 80136c4:	b084      	sub	sp, #16
 80136c6:	af00      	add	r7, sp, #0
 80136c8:	6078      	str	r0, [r7, #4]
 80136ca:	460b      	mov	r3, r1
 80136cc:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80136ce:	78fb      	ldrb	r3, [r7, #3]
 80136d0:	2b0a      	cmp	r3, #10
 80136d2:	d103      	bne.n	80136dc <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80136d4:	210d      	movs	r1, #13
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f7ff fff3 	bl	80136c2 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	685b      	ldr	r3, [r3, #4]
 80136e0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	db25      	blt.n	8013734 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	1c5a      	adds	r2, r3, #1
 80136ec:	60fa      	str	r2, [r7, #12]
 80136ee:	687a      	ldr	r2, [r7, #4]
 80136f0:	4413      	add	r3, r2
 80136f2:	78fa      	ldrb	r2, [r7, #3]
 80136f4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	2b3c      	cmp	r3, #60	; 0x3c
 80136fa:	dd12      	ble.n	8013722 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	6818      	ldr	r0, [r3, #0]
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	f103 010c 	add.w	r1, r3, #12
 8013706:	68fa      	ldr	r2, [r7, #12]
 8013708:	f107 0308 	add.w	r3, r7, #8
 801370c:	f7ff fd11 	bl	8013132 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8013710:	68ba      	ldr	r2, [r7, #8]
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	429a      	cmp	r2, r3
 8013716:	d101      	bne.n	801371c <putc_bfd+0x5a>
 8013718:	2300      	movs	r3, #0
 801371a:	e001      	b.n	8013720 <putc_bfd+0x5e>
 801371c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013720:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	68fa      	ldr	r2, [r7, #12]
 8013726:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	689b      	ldr	r3, [r3, #8]
 801372c:	1c5a      	adds	r2, r3, #1
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	609a      	str	r2, [r3, #8]
 8013732:	e000      	b.n	8013736 <putc_bfd+0x74>
	if (i < 0) return;
 8013734:	bf00      	nop
}
 8013736:	3710      	adds	r7, #16
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}

0801373c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b084      	sub	sp, #16
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	685b      	ldr	r3, [r3, #4]
 8013748:	2b00      	cmp	r3, #0
 801374a:	db16      	blt.n	801377a <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	6818      	ldr	r0, [r3, #0]
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	f103 010c 	add.w	r1, r3, #12
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	685b      	ldr	r3, [r3, #4]
 801375a:	461a      	mov	r2, r3
 801375c:	f107 030c 	add.w	r3, r7, #12
 8013760:	f7ff fce7 	bl	8013132 <f_write>
 8013764:	4603      	mov	r3, r0
 8013766:	2b00      	cmp	r3, #0
 8013768:	d107      	bne.n	801377a <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	685b      	ldr	r3, [r3, #4]
 801376e:	68fa      	ldr	r2, [r7, #12]
 8013770:	4293      	cmp	r3, r2
 8013772:	d102      	bne.n	801377a <putc_flush+0x3e>
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	689b      	ldr	r3, [r3, #8]
 8013778:	e001      	b.n	801377e <putc_flush+0x42>
	return EOF;
 801377a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801377e:	4618      	mov	r0, r3
 8013780:	3710      	adds	r7, #16
 8013782:	46bd      	mov	sp, r7
 8013784:	bd80      	pop	{r7, pc}

08013786 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8013786:	b480      	push	{r7}
 8013788:	b083      	sub	sp, #12
 801378a:	af00      	add	r7, sp, #0
 801378c:	6078      	str	r0, [r7, #4]
 801378e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	683a      	ldr	r2, [r7, #0]
 8013794:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2200      	movs	r2, #0
 801379a:	605a      	str	r2, [r3, #4]
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	685a      	ldr	r2, [r3, #4]
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	609a      	str	r2, [r3, #8]
}
 80137a4:	bf00      	nop
 80137a6:	370c      	adds	r7, #12
 80137a8:	46bd      	mov	sp, r7
 80137aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ae:	4770      	bx	lr

080137b0 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80137b0:	b40e      	push	{r1, r2, r3}
 80137b2:	b580      	push	{r7, lr}
 80137b4:	b0a7      	sub	sp, #156	; 0x9c
 80137b6:	af00      	add	r7, sp, #0
 80137b8:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80137ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80137be:	6879      	ldr	r1, [r7, #4]
 80137c0:	4618      	mov	r0, r3
 80137c2:	f7ff ffe0 	bl	8013786 <putc_init>

	va_start(arp, fmt);
 80137c6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80137ca:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 80137cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80137d0:	1c5a      	adds	r2, r3, #1
 80137d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80137d6:	781b      	ldrb	r3, [r3, #0]
 80137d8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 80137dc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	f000 81f4 	beq.w	8013bce <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 80137e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80137ea:	2b25      	cmp	r3, #37	; 0x25
 80137ec:	d008      	beq.n	8013800 <f_printf+0x50>
			putc_bfd(&pb, c);
 80137ee:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80137f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80137f6:	4611      	mov	r1, r2
 80137f8:	4618      	mov	r0, r3
 80137fa:	f7ff ff62 	bl	80136c2 <putc_bfd>
			continue;
 80137fe:	e1e5      	b.n	8013bcc <f_printf+0x41c>
		}
		w = f = 0;
 8013800:	2300      	movs	r3, #0
 8013802:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8013806:	2300      	movs	r3, #0
 8013808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 801380c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013810:	1c5a      	adds	r2, r3, #1
 8013812:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013816:	781b      	ldrb	r3, [r3, #0]
 8013818:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 801381c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013820:	2b30      	cmp	r3, #48	; 0x30
 8013822:	d10b      	bne.n	801383c <f_printf+0x8c>
			f = 1; c = *fmt++;
 8013824:	2301      	movs	r3, #1
 8013826:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801382a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801382e:	1c5a      	adds	r2, r3, #1
 8013830:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013834:	781b      	ldrb	r3, [r3, #0]
 8013836:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 801383a:	e024      	b.n	8013886 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 801383c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013840:	2b2d      	cmp	r3, #45	; 0x2d
 8013842:	d120      	bne.n	8013886 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8013844:	2302      	movs	r3, #2
 8013846:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801384a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801384e:	1c5a      	adds	r2, r3, #1
 8013850:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013854:	781b      	ldrb	r3, [r3, #0]
 8013856:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 801385a:	e014      	b.n	8013886 <f_printf+0xd6>
			w = w * 10 + c - '0';
 801385c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013860:	4613      	mov	r3, r2
 8013862:	009b      	lsls	r3, r3, #2
 8013864:	4413      	add	r3, r2
 8013866:	005b      	lsls	r3, r3, #1
 8013868:	461a      	mov	r2, r3
 801386a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801386e:	4413      	add	r3, r2
 8013870:	3b30      	subs	r3, #48	; 0x30
 8013872:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8013876:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801387a:	1c5a      	adds	r2, r3, #1
 801387c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013880:	781b      	ldrb	r3, [r3, #0]
 8013882:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8013886:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801388a:	2b2f      	cmp	r3, #47	; 0x2f
 801388c:	d903      	bls.n	8013896 <f_printf+0xe6>
 801388e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013892:	2b39      	cmp	r3, #57	; 0x39
 8013894:	d9e2      	bls.n	801385c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8013896:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801389a:	2b6c      	cmp	r3, #108	; 0x6c
 801389c:	d003      	beq.n	80138a6 <f_printf+0xf6>
 801389e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80138a2:	2b4c      	cmp	r3, #76	; 0x4c
 80138a4:	d10d      	bne.n	80138c2 <f_printf+0x112>
			f |= 4; c = *fmt++;
 80138a6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80138aa:	f043 0304 	orr.w	r3, r3, #4
 80138ae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80138b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80138b6:	1c5a      	adds	r2, r3, #1
 80138b8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80138bc:	781b      	ldrb	r3, [r3, #0]
 80138be:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 80138c2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	f000 8183 	beq.w	8013bd2 <f_printf+0x422>
		d = c;
 80138cc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80138d0:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 80138d4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80138d8:	2b60      	cmp	r3, #96	; 0x60
 80138da:	d908      	bls.n	80138ee <f_printf+0x13e>
 80138dc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80138e0:	2b7a      	cmp	r3, #122	; 0x7a
 80138e2:	d804      	bhi.n	80138ee <f_printf+0x13e>
 80138e4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80138e8:	3b20      	subs	r3, #32
 80138ea:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 80138ee:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80138f2:	3b42      	subs	r3, #66	; 0x42
 80138f4:	2b16      	cmp	r3, #22
 80138f6:	f200 8098 	bhi.w	8013a2a <f_printf+0x27a>
 80138fa:	a201      	add	r2, pc, #4	; (adr r2, 8013900 <f_printf+0x150>)
 80138fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013900:	08013a0b 	.word	0x08013a0b
 8013904:	080139f3 	.word	0x080139f3
 8013908:	08013a1b 	.word	0x08013a1b
 801390c:	08013a2b 	.word	0x08013a2b
 8013910:	08013a2b 	.word	0x08013a2b
 8013914:	08013a2b 	.word	0x08013a2b
 8013918:	08013a2b 	.word	0x08013a2b
 801391c:	08013a2b 	.word	0x08013a2b
 8013920:	08013a2b 	.word	0x08013a2b
 8013924:	08013a2b 	.word	0x08013a2b
 8013928:	08013a2b 	.word	0x08013a2b
 801392c:	08013a2b 	.word	0x08013a2b
 8013930:	08013a2b 	.word	0x08013a2b
 8013934:	08013a13 	.word	0x08013a13
 8013938:	08013a2b 	.word	0x08013a2b
 801393c:	08013a2b 	.word	0x08013a2b
 8013940:	08013a2b 	.word	0x08013a2b
 8013944:	0801395d 	.word	0x0801395d
 8013948:	08013a2b 	.word	0x08013a2b
 801394c:	08013a1b 	.word	0x08013a1b
 8013950:	08013a2b 	.word	0x08013a2b
 8013954:	08013a2b 	.word	0x08013a2b
 8013958:	08013a23 	.word	0x08013a23
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 801395c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801395e:	1d1a      	adds	r2, r3, #4
 8013960:	67ba      	str	r2, [r7, #120]	; 0x78
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8013966:	2300      	movs	r3, #0
 8013968:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801396c:	e004      	b.n	8013978 <f_printf+0x1c8>
 801396e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013972:	3301      	adds	r3, #1
 8013974:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013978:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801397a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801397e:	4413      	add	r3, r2
 8013980:	781b      	ldrb	r3, [r3, #0]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d1f3      	bne.n	801396e <f_printf+0x1be>
			if (!(f & 2)) {
 8013986:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801398a:	f003 0302 	and.w	r3, r3, #2
 801398e:	2b00      	cmp	r3, #0
 8013990:	d11a      	bne.n	80139c8 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8013992:	e005      	b.n	80139a0 <f_printf+0x1f0>
 8013994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013998:	2120      	movs	r1, #32
 801399a:	4618      	mov	r0, r3
 801399c:	f7ff fe91 	bl	80136c2 <putc_bfd>
 80139a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80139a4:	1c5a      	adds	r2, r3, #1
 80139a6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80139aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80139ae:	429a      	cmp	r2, r3
 80139b0:	d8f0      	bhi.n	8013994 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80139b2:	e009      	b.n	80139c8 <f_printf+0x218>
 80139b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80139b6:	1c5a      	adds	r2, r3, #1
 80139b8:	67fa      	str	r2, [r7, #124]	; 0x7c
 80139ba:	781a      	ldrb	r2, [r3, #0]
 80139bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80139c0:	4611      	mov	r1, r2
 80139c2:	4618      	mov	r0, r3
 80139c4:	f7ff fe7d 	bl	80136c2 <putc_bfd>
 80139c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80139ca:	781b      	ldrb	r3, [r3, #0]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d1f1      	bne.n	80139b4 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80139d0:	e005      	b.n	80139de <f_printf+0x22e>
 80139d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80139d6:	2120      	movs	r1, #32
 80139d8:	4618      	mov	r0, r3
 80139da:	f7ff fe72 	bl	80136c2 <putc_bfd>
 80139de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80139e2:	1c5a      	adds	r2, r3, #1
 80139e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80139e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80139ec:	429a      	cmp	r2, r3
 80139ee:	d8f0      	bhi.n	80139d2 <f_printf+0x222>
			continue;
 80139f0:	e0ec      	b.n	8013bcc <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80139f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80139f4:	1d1a      	adds	r2, r3, #4
 80139f6:	67ba      	str	r2, [r7, #120]	; 0x78
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	b2da      	uxtb	r2, r3
 80139fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013a00:	4611      	mov	r1, r2
 8013a02:	4618      	mov	r0, r3
 8013a04:	f7ff fe5d 	bl	80136c2 <putc_bfd>
 8013a08:	e0e0      	b.n	8013bcc <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 8013a0a:	2302      	movs	r3, #2
 8013a0c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013a10:	e014      	b.n	8013a3c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8013a12:	2308      	movs	r3, #8
 8013a14:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013a18:	e010      	b.n	8013a3c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8013a1a:	230a      	movs	r3, #10
 8013a1c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013a20:	e00c      	b.n	8013a3c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8013a22:	2310      	movs	r3, #16
 8013a24:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013a28:	e008      	b.n	8013a3c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8013a2a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8013a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013a32:	4611      	mov	r1, r2
 8013a34:	4618      	mov	r0, r3
 8013a36:	f7ff fe44 	bl	80136c2 <putc_bfd>
 8013a3a:	e0c7      	b.n	8013bcc <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8013a3c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013a40:	f003 0304 	and.w	r3, r3, #4
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d004      	beq.n	8013a52 <f_printf+0x2a2>
 8013a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013a4a:	1d1a      	adds	r2, r3, #4
 8013a4c:	67ba      	str	r2, [r7, #120]	; 0x78
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	e00c      	b.n	8013a6c <f_printf+0x2bc>
 8013a52:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013a56:	2b44      	cmp	r3, #68	; 0x44
 8013a58:	d104      	bne.n	8013a64 <f_printf+0x2b4>
 8013a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013a5c:	1d1a      	adds	r2, r3, #4
 8013a5e:	67ba      	str	r2, [r7, #120]	; 0x78
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	e003      	b.n	8013a6c <f_printf+0x2bc>
 8013a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013a66:	1d1a      	adds	r2, r3, #4
 8013a68:	67ba      	str	r2, [r7, #120]	; 0x78
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8013a70:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013a74:	2b44      	cmp	r3, #68	; 0x44
 8013a76:	d10e      	bne.n	8013a96 <f_printf+0x2e6>
 8013a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	da0a      	bge.n	8013a96 <f_printf+0x2e6>
			v = 0 - v;
 8013a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013a84:	425b      	negs	r3, r3
 8013a86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8013a8a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013a8e:	f043 0308 	orr.w	r3, r3, #8
 8013a92:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8013a96:	2300      	movs	r3, #0
 8013a98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8013a9c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8013aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013aa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8013aa8:	fb02 f201 	mul.w	r2, r2, r1
 8013aac:	1a9b      	subs	r3, r3, r2
 8013aae:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8013ab2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8013ab6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8013abe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8013ac2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013ac6:	2b09      	cmp	r3, #9
 8013ac8:	d90b      	bls.n	8013ae2 <f_printf+0x332>
 8013aca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013ace:	2b78      	cmp	r3, #120	; 0x78
 8013ad0:	d101      	bne.n	8013ad6 <f_printf+0x326>
 8013ad2:	2227      	movs	r2, #39	; 0x27
 8013ad4:	e000      	b.n	8013ad8 <f_printf+0x328>
 8013ad6:	2207      	movs	r2, #7
 8013ad8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013adc:	4413      	add	r3, r2
 8013ade:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8013ae2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013ae6:	1c5a      	adds	r2, r3, #1
 8013ae8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8013aec:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8013af0:	3230      	adds	r2, #48	; 0x30
 8013af2:	b2d2      	uxtb	r2, r2
 8013af4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8013af8:	440b      	add	r3, r1
 8013afa:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8013afe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d003      	beq.n	8013b0e <f_printf+0x35e>
 8013b06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b0a:	2b1f      	cmp	r3, #31
 8013b0c:	d9c6      	bls.n	8013a9c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8013b0e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013b12:	f003 0308 	and.w	r3, r3, #8
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d00a      	beq.n	8013b30 <f_printf+0x380>
 8013b1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b1e:	1c5a      	adds	r2, r3, #1
 8013b20:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8013b24:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8013b28:	4413      	add	r3, r2
 8013b2a:	222d      	movs	r2, #45	; 0x2d
 8013b2c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8013b30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013b38:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013b3c:	f003 0301 	and.w	r3, r3, #1
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d001      	beq.n	8013b48 <f_printf+0x398>
 8013b44:	2330      	movs	r3, #48	; 0x30
 8013b46:	e000      	b.n	8013b4a <f_printf+0x39a>
 8013b48:	2320      	movs	r3, #32
 8013b4a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8013b4e:	e007      	b.n	8013b60 <f_printf+0x3b0>
 8013b50:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8013b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b58:	4611      	mov	r1, r2
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7ff fdb1 	bl	80136c2 <putc_bfd>
 8013b60:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013b64:	f003 0302 	and.w	r3, r3, #2
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d108      	bne.n	8013b7e <f_printf+0x3ce>
 8013b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013b70:	1c5a      	adds	r2, r3, #1
 8013b72:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013b76:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	d8e8      	bhi.n	8013b50 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 8013b7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b82:	3b01      	subs	r3, #1
 8013b84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013b88:	f107 020c 	add.w	r2, r7, #12
 8013b8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b90:	4413      	add	r3, r2
 8013b92:	781a      	ldrb	r2, [r3, #0]
 8013b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b98:	4611      	mov	r1, r2
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f7ff fd91 	bl	80136c2 <putc_bfd>
		} while (i);
 8013ba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d1ea      	bne.n	8013b7e <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 8013ba8:	e007      	b.n	8013bba <f_printf+0x40a>
 8013baa:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8013bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013bb2:	4611      	mov	r1, r2
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f7ff fd84 	bl	80136c2 <putc_bfd>
 8013bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013bbe:	1c5a      	adds	r2, r3, #1
 8013bc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013bc4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013bc8:	429a      	cmp	r2, r3
 8013bca:	d8ee      	bhi.n	8013baa <f_printf+0x3fa>
		c = *fmt++;
 8013bcc:	e5fe      	b.n	80137cc <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8013bce:	bf00      	nop
 8013bd0:	e000      	b.n	8013bd4 <f_printf+0x424>
		if (!c) break;
 8013bd2:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8013bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f7ff fdaf 	bl	801373c <putc_flush>
 8013bde:	4603      	mov	r3, r0
}
 8013be0:	4618      	mov	r0, r3
 8013be2:	379c      	adds	r7, #156	; 0x9c
 8013be4:	46bd      	mov	sp, r7
 8013be6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013bea:	b003      	add	sp, #12
 8013bec:	4770      	bx	lr
 8013bee:	bf00      	nop

08013bf0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013bf0:	b480      	push	{r7}
 8013bf2:	b087      	sub	sp, #28
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	60f8      	str	r0, [r7, #12]
 8013bf8:	60b9      	str	r1, [r7, #8]
 8013bfa:	4613      	mov	r3, r2
 8013bfc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013bfe:	2301      	movs	r3, #1
 8013c00:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013c02:	2300      	movs	r3, #0
 8013c04:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013c06:	4b1f      	ldr	r3, [pc, #124]	; (8013c84 <FATFS_LinkDriverEx+0x94>)
 8013c08:	7a5b      	ldrb	r3, [r3, #9]
 8013c0a:	b2db      	uxtb	r3, r3
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d131      	bne.n	8013c74 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013c10:	4b1c      	ldr	r3, [pc, #112]	; (8013c84 <FATFS_LinkDriverEx+0x94>)
 8013c12:	7a5b      	ldrb	r3, [r3, #9]
 8013c14:	b2db      	uxtb	r3, r3
 8013c16:	461a      	mov	r2, r3
 8013c18:	4b1a      	ldr	r3, [pc, #104]	; (8013c84 <FATFS_LinkDriverEx+0x94>)
 8013c1a:	2100      	movs	r1, #0
 8013c1c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013c1e:	4b19      	ldr	r3, [pc, #100]	; (8013c84 <FATFS_LinkDriverEx+0x94>)
 8013c20:	7a5b      	ldrb	r3, [r3, #9]
 8013c22:	b2db      	uxtb	r3, r3
 8013c24:	4a17      	ldr	r2, [pc, #92]	; (8013c84 <FATFS_LinkDriverEx+0x94>)
 8013c26:	009b      	lsls	r3, r3, #2
 8013c28:	4413      	add	r3, r2
 8013c2a:	68fa      	ldr	r2, [r7, #12]
 8013c2c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013c2e:	4b15      	ldr	r3, [pc, #84]	; (8013c84 <FATFS_LinkDriverEx+0x94>)
 8013c30:	7a5b      	ldrb	r3, [r3, #9]
 8013c32:	b2db      	uxtb	r3, r3
 8013c34:	461a      	mov	r2, r3
 8013c36:	4b13      	ldr	r3, [pc, #76]	; (8013c84 <FATFS_LinkDriverEx+0x94>)
 8013c38:	4413      	add	r3, r2
 8013c3a:	79fa      	ldrb	r2, [r7, #7]
 8013c3c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013c3e:	4b11      	ldr	r3, [pc, #68]	; (8013c84 <FATFS_LinkDriverEx+0x94>)
 8013c40:	7a5b      	ldrb	r3, [r3, #9]
 8013c42:	b2db      	uxtb	r3, r3
 8013c44:	1c5a      	adds	r2, r3, #1
 8013c46:	b2d1      	uxtb	r1, r2
 8013c48:	4a0e      	ldr	r2, [pc, #56]	; (8013c84 <FATFS_LinkDriverEx+0x94>)
 8013c4a:	7251      	strb	r1, [r2, #9]
 8013c4c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013c4e:	7dbb      	ldrb	r3, [r7, #22]
 8013c50:	3330      	adds	r3, #48	; 0x30
 8013c52:	b2da      	uxtb	r2, r3
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013c58:	68bb      	ldr	r3, [r7, #8]
 8013c5a:	3301      	adds	r3, #1
 8013c5c:	223a      	movs	r2, #58	; 0x3a
 8013c5e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	3302      	adds	r3, #2
 8013c64:	222f      	movs	r2, #47	; 0x2f
 8013c66:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013c68:	68bb      	ldr	r3, [r7, #8]
 8013c6a:	3303      	adds	r3, #3
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013c70:	2300      	movs	r3, #0
 8013c72:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c76:	4618      	mov	r0, r3
 8013c78:	371c      	adds	r7, #28
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c80:	4770      	bx	lr
 8013c82:	bf00      	nop
 8013c84:	200017b4 	.word	0x200017b4

08013c88 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b082      	sub	sp, #8
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
 8013c90:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013c92:	2200      	movs	r2, #0
 8013c94:	6839      	ldr	r1, [r7, #0]
 8013c96:	6878      	ldr	r0, [r7, #4]
 8013c98:	f7ff ffaa 	bl	8013bf0 <FATFS_LinkDriverEx>
 8013c9c:	4603      	mov	r3, r0
}
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	3708      	adds	r7, #8
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd80      	pop	{r7, pc}
	...

08013ca8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8013ca8:	b480      	push	{r7}
 8013caa:	b085      	sub	sp, #20
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	4603      	mov	r3, r0
 8013cb0:	6039      	str	r1, [r7, #0]
 8013cb2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8013cb4:	88fb      	ldrh	r3, [r7, #6]
 8013cb6:	2b7f      	cmp	r3, #127	; 0x7f
 8013cb8:	d802      	bhi.n	8013cc0 <ff_convert+0x18>
		c = chr;
 8013cba:	88fb      	ldrh	r3, [r7, #6]
 8013cbc:	81fb      	strh	r3, [r7, #14]
 8013cbe:	e025      	b.n	8013d0c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8013cc0:	683b      	ldr	r3, [r7, #0]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d00b      	beq.n	8013cde <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8013cc6:	88fb      	ldrh	r3, [r7, #6]
 8013cc8:	2bff      	cmp	r3, #255	; 0xff
 8013cca:	d805      	bhi.n	8013cd8 <ff_convert+0x30>
 8013ccc:	88fb      	ldrh	r3, [r7, #6]
 8013cce:	3b80      	subs	r3, #128	; 0x80
 8013cd0:	4a12      	ldr	r2, [pc, #72]	; (8013d1c <ff_convert+0x74>)
 8013cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013cd6:	e000      	b.n	8013cda <ff_convert+0x32>
 8013cd8:	2300      	movs	r3, #0
 8013cda:	81fb      	strh	r3, [r7, #14]
 8013cdc:	e016      	b.n	8013d0c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8013cde:	2300      	movs	r3, #0
 8013ce0:	81fb      	strh	r3, [r7, #14]
 8013ce2:	e009      	b.n	8013cf8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8013ce4:	89fb      	ldrh	r3, [r7, #14]
 8013ce6:	4a0d      	ldr	r2, [pc, #52]	; (8013d1c <ff_convert+0x74>)
 8013ce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013cec:	88fa      	ldrh	r2, [r7, #6]
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	d006      	beq.n	8013d00 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8013cf2:	89fb      	ldrh	r3, [r7, #14]
 8013cf4:	3301      	adds	r3, #1
 8013cf6:	81fb      	strh	r3, [r7, #14]
 8013cf8:	89fb      	ldrh	r3, [r7, #14]
 8013cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8013cfc:	d9f2      	bls.n	8013ce4 <ff_convert+0x3c>
 8013cfe:	e000      	b.n	8013d02 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8013d00:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8013d02:	89fb      	ldrh	r3, [r7, #14]
 8013d04:	3380      	adds	r3, #128	; 0x80
 8013d06:	b29b      	uxth	r3, r3
 8013d08:	b2db      	uxtb	r3, r3
 8013d0a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8013d0c:	89fb      	ldrh	r3, [r7, #14]
}
 8013d0e:	4618      	mov	r0, r3
 8013d10:	3714      	adds	r7, #20
 8013d12:	46bd      	mov	sp, r7
 8013d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d18:	4770      	bx	lr
 8013d1a:	bf00      	nop
 8013d1c:	0803029c 	.word	0x0803029c

08013d20 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8013d20:	b480      	push	{r7}
 8013d22:	b087      	sub	sp, #28
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	4603      	mov	r3, r0
 8013d28:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8013d2a:	88fb      	ldrh	r3, [r7, #6]
 8013d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013d30:	d201      	bcs.n	8013d36 <ff_wtoupper+0x16>
 8013d32:	4b3e      	ldr	r3, [pc, #248]	; (8013e2c <ff_wtoupper+0x10c>)
 8013d34:	e000      	b.n	8013d38 <ff_wtoupper+0x18>
 8013d36:	4b3e      	ldr	r3, [pc, #248]	; (8013e30 <ff_wtoupper+0x110>)
 8013d38:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8013d3a:	697b      	ldr	r3, [r7, #20]
 8013d3c:	1c9a      	adds	r2, r3, #2
 8013d3e:	617a      	str	r2, [r7, #20]
 8013d40:	881b      	ldrh	r3, [r3, #0]
 8013d42:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8013d44:	8a7b      	ldrh	r3, [r7, #18]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d068      	beq.n	8013e1c <ff_wtoupper+0xfc>
 8013d4a:	88fa      	ldrh	r2, [r7, #6]
 8013d4c:	8a7b      	ldrh	r3, [r7, #18]
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d364      	bcc.n	8013e1c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8013d52:	697b      	ldr	r3, [r7, #20]
 8013d54:	1c9a      	adds	r2, r3, #2
 8013d56:	617a      	str	r2, [r7, #20]
 8013d58:	881b      	ldrh	r3, [r3, #0]
 8013d5a:	823b      	strh	r3, [r7, #16]
 8013d5c:	8a3b      	ldrh	r3, [r7, #16]
 8013d5e:	0a1b      	lsrs	r3, r3, #8
 8013d60:	81fb      	strh	r3, [r7, #14]
 8013d62:	8a3b      	ldrh	r3, [r7, #16]
 8013d64:	b2db      	uxtb	r3, r3
 8013d66:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8013d68:	88fa      	ldrh	r2, [r7, #6]
 8013d6a:	8a79      	ldrh	r1, [r7, #18]
 8013d6c:	8a3b      	ldrh	r3, [r7, #16]
 8013d6e:	440b      	add	r3, r1
 8013d70:	429a      	cmp	r2, r3
 8013d72:	da49      	bge.n	8013e08 <ff_wtoupper+0xe8>
			switch (cmd) {
 8013d74:	89fb      	ldrh	r3, [r7, #14]
 8013d76:	2b08      	cmp	r3, #8
 8013d78:	d84f      	bhi.n	8013e1a <ff_wtoupper+0xfa>
 8013d7a:	a201      	add	r2, pc, #4	; (adr r2, 8013d80 <ff_wtoupper+0x60>)
 8013d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d80:	08013da5 	.word	0x08013da5
 8013d84:	08013db7 	.word	0x08013db7
 8013d88:	08013dcd 	.word	0x08013dcd
 8013d8c:	08013dd5 	.word	0x08013dd5
 8013d90:	08013ddd 	.word	0x08013ddd
 8013d94:	08013de5 	.word	0x08013de5
 8013d98:	08013ded 	.word	0x08013ded
 8013d9c:	08013df5 	.word	0x08013df5
 8013da0:	08013dfd 	.word	0x08013dfd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8013da4:	88fa      	ldrh	r2, [r7, #6]
 8013da6:	8a7b      	ldrh	r3, [r7, #18]
 8013da8:	1ad3      	subs	r3, r2, r3
 8013daa:	005b      	lsls	r3, r3, #1
 8013dac:	697a      	ldr	r2, [r7, #20]
 8013dae:	4413      	add	r3, r2
 8013db0:	881b      	ldrh	r3, [r3, #0]
 8013db2:	80fb      	strh	r3, [r7, #6]
 8013db4:	e027      	b.n	8013e06 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8013db6:	88fa      	ldrh	r2, [r7, #6]
 8013db8:	8a7b      	ldrh	r3, [r7, #18]
 8013dba:	1ad3      	subs	r3, r2, r3
 8013dbc:	b29b      	uxth	r3, r3
 8013dbe:	f003 0301 	and.w	r3, r3, #1
 8013dc2:	b29b      	uxth	r3, r3
 8013dc4:	88fa      	ldrh	r2, [r7, #6]
 8013dc6:	1ad3      	subs	r3, r2, r3
 8013dc8:	80fb      	strh	r3, [r7, #6]
 8013dca:	e01c      	b.n	8013e06 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8013dcc:	88fb      	ldrh	r3, [r7, #6]
 8013dce:	3b10      	subs	r3, #16
 8013dd0:	80fb      	strh	r3, [r7, #6]
 8013dd2:	e018      	b.n	8013e06 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8013dd4:	88fb      	ldrh	r3, [r7, #6]
 8013dd6:	3b20      	subs	r3, #32
 8013dd8:	80fb      	strh	r3, [r7, #6]
 8013dda:	e014      	b.n	8013e06 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8013ddc:	88fb      	ldrh	r3, [r7, #6]
 8013dde:	3b30      	subs	r3, #48	; 0x30
 8013de0:	80fb      	strh	r3, [r7, #6]
 8013de2:	e010      	b.n	8013e06 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8013de4:	88fb      	ldrh	r3, [r7, #6]
 8013de6:	3b1a      	subs	r3, #26
 8013de8:	80fb      	strh	r3, [r7, #6]
 8013dea:	e00c      	b.n	8013e06 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8013dec:	88fb      	ldrh	r3, [r7, #6]
 8013dee:	3308      	adds	r3, #8
 8013df0:	80fb      	strh	r3, [r7, #6]
 8013df2:	e008      	b.n	8013e06 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8013df4:	88fb      	ldrh	r3, [r7, #6]
 8013df6:	3b50      	subs	r3, #80	; 0x50
 8013df8:	80fb      	strh	r3, [r7, #6]
 8013dfa:	e004      	b.n	8013e06 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8013dfc:	88fb      	ldrh	r3, [r7, #6]
 8013dfe:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8013e02:	80fb      	strh	r3, [r7, #6]
 8013e04:	bf00      	nop
			}
			break;
 8013e06:	e008      	b.n	8013e1a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8013e08:	89fb      	ldrh	r3, [r7, #14]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d195      	bne.n	8013d3a <ff_wtoupper+0x1a>
 8013e0e:	8a3b      	ldrh	r3, [r7, #16]
 8013e10:	005b      	lsls	r3, r3, #1
 8013e12:	697a      	ldr	r2, [r7, #20]
 8013e14:	4413      	add	r3, r2
 8013e16:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8013e18:	e78f      	b.n	8013d3a <ff_wtoupper+0x1a>
			break;
 8013e1a:	bf00      	nop
	}

	return chr;
 8013e1c:	88fb      	ldrh	r3, [r7, #6]
}
 8013e1e:	4618      	mov	r0, r3
 8013e20:	371c      	adds	r7, #28
 8013e22:	46bd      	mov	sp, r7
 8013e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e28:	4770      	bx	lr
 8013e2a:	bf00      	nop
 8013e2c:	0803039c 	.word	0x0803039c
 8013e30:	08030590 	.word	0x08030590

08013e34 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b086      	sub	sp, #24
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	6039      	str	r1, [r7, #0]
 8013e3e:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8013e40:	2300      	movs	r3, #0
 8013e42:	60fb      	str	r3, [r7, #12]
 8013e44:	2300      	movs	r3, #0
 8013e46:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8013e48:	f107 030c 	add.w	r3, r7, #12
 8013e4c:	2101      	movs	r1, #1
 8013e4e:	4618      	mov	r0, r3
 8013e50:	f000 f97a 	bl	8014148 <osSemaphoreCreate>
 8013e54:	4602      	mov	r2, r0
 8013e56:	683b      	ldr	r3, [r7, #0]
 8013e58:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	bf14      	ite	ne
 8013e62:	2301      	movne	r3, #1
 8013e64:	2300      	moveq	r3, #0
 8013e66:	b2db      	uxtb	r3, r3
 8013e68:	617b      	str	r3, [r7, #20]

    return ret;
 8013e6a:	697b      	ldr	r3, [r7, #20]
}
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	3718      	adds	r7, #24
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}

08013e74 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b082      	sub	sp, #8
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f000 fa19 	bl	80142b4 <osSemaphoreDelete>
#endif
    return 1;
 8013e82:	2301      	movs	r3, #1
}
 8013e84:	4618      	mov	r0, r3
 8013e86:	3708      	adds	r7, #8
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	bd80      	pop	{r7, pc}

08013e8c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b084      	sub	sp, #16
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8013e94:	2300      	movs	r3, #0
 8013e96:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8013e98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013e9c:	6878      	ldr	r0, [r7, #4]
 8013e9e:	f000 f985 	bl	80141ac <osSemaphoreWait>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d101      	bne.n	8013eac <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8013ea8:	2301      	movs	r3, #1
 8013eaa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8013eac:	68fb      	ldr	r3, [r7, #12]
}
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3710      	adds	r7, #16
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}

08013eb6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8013eb6:	b580      	push	{r7, lr}
 8013eb8:	b082      	sub	sp, #8
 8013eba:	af00      	add	r7, sp, #0
 8013ebc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8013ebe:	6878      	ldr	r0, [r7, #4]
 8013ec0:	f000 f9c2 	bl	8014248 <osSemaphoreRelease>
#endif
}
 8013ec4:	bf00      	nop
 8013ec6:	3708      	adds	r7, #8
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	bd80      	pop	{r7, pc}

08013ecc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8013ecc:	b480      	push	{r7}
 8013ece:	b085      	sub	sp, #20
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8013eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013ede:	2b84      	cmp	r3, #132	; 0x84
 8013ee0:	d005      	beq.n	8013eee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8013ee2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	4413      	add	r3, r2
 8013eea:	3303      	adds	r3, #3
 8013eec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8013eee:	68fb      	ldr	r3, [r7, #12]
}
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	3714      	adds	r7, #20
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efa:	4770      	bx	lr

08013efc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8013efc:	b480      	push	{r7}
 8013efe:	b083      	sub	sp, #12
 8013f00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013f02:	f3ef 8305 	mrs	r3, IPSR
 8013f06:	607b      	str	r3, [r7, #4]
  return(result);
 8013f08:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	bf14      	ite	ne
 8013f0e:	2301      	movne	r3, #1
 8013f10:	2300      	moveq	r3, #0
 8013f12:	b2db      	uxtb	r3, r3
}
 8013f14:	4618      	mov	r0, r3
 8013f16:	370c      	adds	r7, #12
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1e:	4770      	bx	lr

08013f20 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8013f24:	f001 fcd6 	bl	80158d4 <vTaskStartScheduler>
  
  return osOK;
 8013f28:	2300      	movs	r3, #0
}
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	bd80      	pop	{r7, pc}

08013f2e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8013f2e:	b580      	push	{r7, lr}
 8013f30:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8013f32:	f7ff ffe3 	bl	8013efc <inHandlerMode>
 8013f36:	4603      	mov	r3, r0
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d003      	beq.n	8013f44 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8013f3c:	f001 fdee 	bl	8015b1c <xTaskGetTickCountFromISR>
 8013f40:	4603      	mov	r3, r0
 8013f42:	e002      	b.n	8013f4a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8013f44:	f001 fdda 	bl	8015afc <xTaskGetTickCount>
 8013f48:	4603      	mov	r3, r0
  }
}
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	bd80      	pop	{r7, pc}

08013f4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8013f4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f50:	b089      	sub	sp, #36	; 0x24
 8013f52:	af04      	add	r7, sp, #16
 8013f54:	6078      	str	r0, [r7, #4]
 8013f56:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	695b      	ldr	r3, [r3, #20]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d020      	beq.n	8013fa2 <osThreadCreate+0x54>
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	699b      	ldr	r3, [r3, #24]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d01c      	beq.n	8013fa2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	685c      	ldr	r4, [r3, #4]
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	681d      	ldr	r5, [r3, #0]
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	691e      	ldr	r6, [r3, #16]
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f7ff ffa6 	bl	8013ecc <makeFreeRtosPriority>
 8013f80:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	695b      	ldr	r3, [r3, #20]
 8013f86:	687a      	ldr	r2, [r7, #4]
 8013f88:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013f8a:	9202      	str	r2, [sp, #8]
 8013f8c:	9301      	str	r3, [sp, #4]
 8013f8e:	9100      	str	r1, [sp, #0]
 8013f90:	683b      	ldr	r3, [r7, #0]
 8013f92:	4632      	mov	r2, r6
 8013f94:	4629      	mov	r1, r5
 8013f96:	4620      	mov	r0, r4
 8013f98:	f001 fabe 	bl	8015518 <xTaskCreateStatic>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	60fb      	str	r3, [r7, #12]
 8013fa0:	e01c      	b.n	8013fdc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	685c      	ldr	r4, [r3, #4]
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013fae:	b29e      	uxth	r6, r3
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f7ff ff88 	bl	8013ecc <makeFreeRtosPriority>
 8013fbc:	4602      	mov	r2, r0
 8013fbe:	f107 030c 	add.w	r3, r7, #12
 8013fc2:	9301      	str	r3, [sp, #4]
 8013fc4:	9200      	str	r2, [sp, #0]
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	4632      	mov	r2, r6
 8013fca:	4629      	mov	r1, r5
 8013fcc:	4620      	mov	r0, r4
 8013fce:	f001 fb00 	bl	80155d2 <xTaskCreate>
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	2b01      	cmp	r3, #1
 8013fd6:	d001      	beq.n	8013fdc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8013fd8:	2300      	movs	r3, #0
 8013fda:	e000      	b.n	8013fde <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8013fdc:	68fb      	ldr	r3, [r7, #12]
}
 8013fde:	4618      	mov	r0, r3
 8013fe0:	3714      	adds	r7, #20
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013fe6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8013fe6:	b580      	push	{r7, lr}
 8013fe8:	b084      	sub	sp, #16
 8013fea:	af00      	add	r7, sp, #0
 8013fec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d001      	beq.n	8013ffc <osDelay+0x16>
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	e000      	b.n	8013ffe <osDelay+0x18>
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	4618      	mov	r0, r3
 8014000:	f001 fc34 	bl	801586c <vTaskDelay>
  
  return osOK;
 8014004:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014006:	4618      	mov	r0, r3
 8014008:	3710      	adds	r7, #16
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}

0801400e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 801400e:	b580      	push	{r7, lr}
 8014010:	b082      	sub	sp, #8
 8014012:	af00      	add	r7, sp, #0
 8014014:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	685b      	ldr	r3, [r3, #4]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d007      	beq.n	801402e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	685b      	ldr	r3, [r3, #4]
 8014022:	4619      	mov	r1, r3
 8014024:	2001      	movs	r0, #1
 8014026:	f000 fc54 	bl	80148d2 <xQueueCreateMutexStatic>
 801402a:	4603      	mov	r3, r0
 801402c:	e003      	b.n	8014036 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 801402e:	2001      	movs	r0, #1
 8014030:	f000 fc37 	bl	80148a2 <xQueueCreateMutex>
 8014034:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8014036:	4618      	mov	r0, r3
 8014038:	3708      	adds	r7, #8
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}
	...

08014040 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b084      	sub	sp, #16
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
 8014048:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801404a:	2300      	movs	r3, #0
 801404c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d101      	bne.n	8014058 <osMutexWait+0x18>
    return osErrorParameter;
 8014054:	2380      	movs	r3, #128	; 0x80
 8014056:	e03a      	b.n	80140ce <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8014058:	2300      	movs	r3, #0
 801405a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014062:	d103      	bne.n	801406c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8014064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014068:	60fb      	str	r3, [r7, #12]
 801406a:	e009      	b.n	8014080 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d006      	beq.n	8014080 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8014072:	683b      	ldr	r3, [r7, #0]
 8014074:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d101      	bne.n	8014080 <osMutexWait+0x40>
      ticks = 1;
 801407c:	2301      	movs	r3, #1
 801407e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8014080:	f7ff ff3c 	bl	8013efc <inHandlerMode>
 8014084:	4603      	mov	r3, r0
 8014086:	2b00      	cmp	r3, #0
 8014088:	d017      	beq.n	80140ba <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801408a:	f107 0308 	add.w	r3, r7, #8
 801408e:	461a      	mov	r2, r3
 8014090:	2100      	movs	r1, #0
 8014092:	6878      	ldr	r0, [r7, #4]
 8014094:	f001 f84a 	bl	801512c <xQueueReceiveFromISR>
 8014098:	4603      	mov	r3, r0
 801409a:	2b01      	cmp	r3, #1
 801409c:	d001      	beq.n	80140a2 <osMutexWait+0x62>
      return osErrorOS;
 801409e:	23ff      	movs	r3, #255	; 0xff
 80140a0:	e015      	b.n	80140ce <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d011      	beq.n	80140cc <osMutexWait+0x8c>
 80140a8:	4b0b      	ldr	r3, [pc, #44]	; (80140d8 <osMutexWait+0x98>)
 80140aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140ae:	601a      	str	r2, [r3, #0]
 80140b0:	f3bf 8f4f 	dsb	sy
 80140b4:	f3bf 8f6f 	isb	sy
 80140b8:	e008      	b.n	80140cc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80140ba:	68f9      	ldr	r1, [r7, #12]
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	f000 ff29 	bl	8014f14 <xQueueSemaphoreTake>
 80140c2:	4603      	mov	r3, r0
 80140c4:	2b01      	cmp	r3, #1
 80140c6:	d001      	beq.n	80140cc <osMutexWait+0x8c>
    return osErrorOS;
 80140c8:	23ff      	movs	r3, #255	; 0xff
 80140ca:	e000      	b.n	80140ce <osMutexWait+0x8e>
  }
  
  return osOK;
 80140cc:	2300      	movs	r3, #0
}
 80140ce:	4618      	mov	r0, r3
 80140d0:	3710      	adds	r7, #16
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bd80      	pop	{r7, pc}
 80140d6:	bf00      	nop
 80140d8:	e000ed04 	.word	0xe000ed04

080140dc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b084      	sub	sp, #16
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80140e4:	2300      	movs	r3, #0
 80140e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80140e8:	2300      	movs	r3, #0
 80140ea:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80140ec:	f7ff ff06 	bl	8013efc <inHandlerMode>
 80140f0:	4603      	mov	r3, r0
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d016      	beq.n	8014124 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80140f6:	f107 0308 	add.w	r3, r7, #8
 80140fa:	4619      	mov	r1, r3
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f000 fd9c 	bl	8014c3a <xQueueGiveFromISR>
 8014102:	4603      	mov	r3, r0
 8014104:	2b01      	cmp	r3, #1
 8014106:	d001      	beq.n	801410c <osMutexRelease+0x30>
      return osErrorOS;
 8014108:	23ff      	movs	r3, #255	; 0xff
 801410a:	e017      	b.n	801413c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d013      	beq.n	801413a <osMutexRelease+0x5e>
 8014112:	4b0c      	ldr	r3, [pc, #48]	; (8014144 <osMutexRelease+0x68>)
 8014114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014118:	601a      	str	r2, [r3, #0]
 801411a:	f3bf 8f4f 	dsb	sy
 801411e:	f3bf 8f6f 	isb	sy
 8014122:	e00a      	b.n	801413a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8014124:	2300      	movs	r3, #0
 8014126:	2200      	movs	r2, #0
 8014128:	2100      	movs	r1, #0
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f000 fbec 	bl	8014908 <xQueueGenericSend>
 8014130:	4603      	mov	r3, r0
 8014132:	2b01      	cmp	r3, #1
 8014134:	d001      	beq.n	801413a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8014136:	23ff      	movs	r3, #255	; 0xff
 8014138:	60fb      	str	r3, [r7, #12]
  }
  return result;
 801413a:	68fb      	ldr	r3, [r7, #12]
}
 801413c:	4618      	mov	r0, r3
 801413e:	3710      	adds	r7, #16
 8014140:	46bd      	mov	sp, r7
 8014142:	bd80      	pop	{r7, pc}
 8014144:	e000ed04 	.word	0xe000ed04

08014148 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8014148:	b580      	push	{r7, lr}
 801414a:	b086      	sub	sp, #24
 801414c:	af02      	add	r7, sp, #8
 801414e:	6078      	str	r0, [r7, #4]
 8014150:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	685b      	ldr	r3, [r3, #4]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d00f      	beq.n	801417a <osSemaphoreCreate+0x32>
    if (count == 1) {
 801415a:	683b      	ldr	r3, [r7, #0]
 801415c:	2b01      	cmp	r3, #1
 801415e:	d10a      	bne.n	8014176 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	685b      	ldr	r3, [r3, #4]
 8014164:	2203      	movs	r2, #3
 8014166:	9200      	str	r2, [sp, #0]
 8014168:	2200      	movs	r2, #0
 801416a:	2100      	movs	r1, #0
 801416c:	2001      	movs	r0, #1
 801416e:	f000 faad 	bl	80146cc <xQueueGenericCreateStatic>
 8014172:	4603      	mov	r3, r0
 8014174:	e016      	b.n	80141a4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8014176:	2300      	movs	r3, #0
 8014178:	e014      	b.n	80141a4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 801417a:	683b      	ldr	r3, [r7, #0]
 801417c:	2b01      	cmp	r3, #1
 801417e:	d110      	bne.n	80141a2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8014180:	2203      	movs	r2, #3
 8014182:	2100      	movs	r1, #0
 8014184:	2001      	movs	r0, #1
 8014186:	f000 fb19 	bl	80147bc <xQueueGenericCreate>
 801418a:	60f8      	str	r0, [r7, #12]
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d005      	beq.n	801419e <osSemaphoreCreate+0x56>
 8014192:	2300      	movs	r3, #0
 8014194:	2200      	movs	r2, #0
 8014196:	2100      	movs	r1, #0
 8014198:	68f8      	ldr	r0, [r7, #12]
 801419a:	f000 fbb5 	bl	8014908 <xQueueGenericSend>
      return sema;
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	e000      	b.n	80141a4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80141a2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80141a4:	4618      	mov	r0, r3
 80141a6:	3710      	adds	r7, #16
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}

080141ac <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b084      	sub	sp, #16
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
 80141b4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80141b6:	2300      	movs	r3, #0
 80141b8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d101      	bne.n	80141c4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80141c0:	2380      	movs	r3, #128	; 0x80
 80141c2:	e03a      	b.n	801423a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80141c4:	2300      	movs	r3, #0
 80141c6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80141c8:	683b      	ldr	r3, [r7, #0]
 80141ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80141ce:	d103      	bne.n	80141d8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80141d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80141d4:	60fb      	str	r3, [r7, #12]
 80141d6:	e009      	b.n	80141ec <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d006      	beq.n	80141ec <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d101      	bne.n	80141ec <osSemaphoreWait+0x40>
      ticks = 1;
 80141e8:	2301      	movs	r3, #1
 80141ea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80141ec:	f7ff fe86 	bl	8013efc <inHandlerMode>
 80141f0:	4603      	mov	r3, r0
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d017      	beq.n	8014226 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80141f6:	f107 0308 	add.w	r3, r7, #8
 80141fa:	461a      	mov	r2, r3
 80141fc:	2100      	movs	r1, #0
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f000 ff94 	bl	801512c <xQueueReceiveFromISR>
 8014204:	4603      	mov	r3, r0
 8014206:	2b01      	cmp	r3, #1
 8014208:	d001      	beq.n	801420e <osSemaphoreWait+0x62>
      return osErrorOS;
 801420a:	23ff      	movs	r3, #255	; 0xff
 801420c:	e015      	b.n	801423a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d011      	beq.n	8014238 <osSemaphoreWait+0x8c>
 8014214:	4b0b      	ldr	r3, [pc, #44]	; (8014244 <osSemaphoreWait+0x98>)
 8014216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801421a:	601a      	str	r2, [r3, #0]
 801421c:	f3bf 8f4f 	dsb	sy
 8014220:	f3bf 8f6f 	isb	sy
 8014224:	e008      	b.n	8014238 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8014226:	68f9      	ldr	r1, [r7, #12]
 8014228:	6878      	ldr	r0, [r7, #4]
 801422a:	f000 fe73 	bl	8014f14 <xQueueSemaphoreTake>
 801422e:	4603      	mov	r3, r0
 8014230:	2b01      	cmp	r3, #1
 8014232:	d001      	beq.n	8014238 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8014234:	23ff      	movs	r3, #255	; 0xff
 8014236:	e000      	b.n	801423a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8014238:	2300      	movs	r3, #0
}
 801423a:	4618      	mov	r0, r3
 801423c:	3710      	adds	r7, #16
 801423e:	46bd      	mov	sp, r7
 8014240:	bd80      	pop	{r7, pc}
 8014242:	bf00      	nop
 8014244:	e000ed04 	.word	0xe000ed04

08014248 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b084      	sub	sp, #16
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8014250:	2300      	movs	r3, #0
 8014252:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8014254:	2300      	movs	r3, #0
 8014256:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8014258:	f7ff fe50 	bl	8013efc <inHandlerMode>
 801425c:	4603      	mov	r3, r0
 801425e:	2b00      	cmp	r3, #0
 8014260:	d016      	beq.n	8014290 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014262:	f107 0308 	add.w	r3, r7, #8
 8014266:	4619      	mov	r1, r3
 8014268:	6878      	ldr	r0, [r7, #4]
 801426a:	f000 fce6 	bl	8014c3a <xQueueGiveFromISR>
 801426e:	4603      	mov	r3, r0
 8014270:	2b01      	cmp	r3, #1
 8014272:	d001      	beq.n	8014278 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8014274:	23ff      	movs	r3, #255	; 0xff
 8014276:	e017      	b.n	80142a8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014278:	68bb      	ldr	r3, [r7, #8]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d013      	beq.n	80142a6 <osSemaphoreRelease+0x5e>
 801427e:	4b0c      	ldr	r3, [pc, #48]	; (80142b0 <osSemaphoreRelease+0x68>)
 8014280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014284:	601a      	str	r2, [r3, #0]
 8014286:	f3bf 8f4f 	dsb	sy
 801428a:	f3bf 8f6f 	isb	sy
 801428e:	e00a      	b.n	80142a6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8014290:	2300      	movs	r3, #0
 8014292:	2200      	movs	r2, #0
 8014294:	2100      	movs	r1, #0
 8014296:	6878      	ldr	r0, [r7, #4]
 8014298:	f000 fb36 	bl	8014908 <xQueueGenericSend>
 801429c:	4603      	mov	r3, r0
 801429e:	2b01      	cmp	r3, #1
 80142a0:	d001      	beq.n	80142a6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80142a2:	23ff      	movs	r3, #255	; 0xff
 80142a4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80142a6:	68fb      	ldr	r3, [r7, #12]
}
 80142a8:	4618      	mov	r0, r3
 80142aa:	3710      	adds	r7, #16
 80142ac:	46bd      	mov	sp, r7
 80142ae:	bd80      	pop	{r7, pc}
 80142b0:	e000ed04 	.word	0xe000ed04

080142b4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b082      	sub	sp, #8
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80142bc:	f7ff fe1e 	bl	8013efc <inHandlerMode>
 80142c0:	4603      	mov	r3, r0
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d001      	beq.n	80142ca <osSemaphoreDelete+0x16>
    return osErrorISR;
 80142c6:	2382      	movs	r3, #130	; 0x82
 80142c8:	e003      	b.n	80142d2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80142ca:	6878      	ldr	r0, [r7, #4]
 80142cc:	f000 ffae 	bl	801522c <vQueueDelete>

  return osOK; 
 80142d0:	2300      	movs	r3, #0
}
 80142d2:	4618      	mov	r0, r3
 80142d4:	3708      	adds	r7, #8
 80142d6:	46bd      	mov	sp, r7
 80142d8:	bd80      	pop	{r7, pc}

080142da <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80142da:	b590      	push	{r4, r7, lr}
 80142dc:	b085      	sub	sp, #20
 80142de:	af02      	add	r7, sp, #8
 80142e0:	6078      	str	r0, [r7, #4]
 80142e2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	689b      	ldr	r3, [r3, #8]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d011      	beq.n	8014310 <osMessageCreate+0x36>
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	68db      	ldr	r3, [r3, #12]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d00d      	beq.n	8014310 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6818      	ldr	r0, [r3, #0]
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	6859      	ldr	r1, [r3, #4]
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	689a      	ldr	r2, [r3, #8]
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	68db      	ldr	r3, [r3, #12]
 8014304:	2400      	movs	r4, #0
 8014306:	9400      	str	r4, [sp, #0]
 8014308:	f000 f9e0 	bl	80146cc <xQueueGenericCreateStatic>
 801430c:	4603      	mov	r3, r0
 801430e:	e008      	b.n	8014322 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	6818      	ldr	r0, [r3, #0]
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	685b      	ldr	r3, [r3, #4]
 8014318:	2200      	movs	r2, #0
 801431a:	4619      	mov	r1, r3
 801431c:	f000 fa4e 	bl	80147bc <xQueueGenericCreate>
 8014320:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8014322:	4618      	mov	r0, r3
 8014324:	370c      	adds	r7, #12
 8014326:	46bd      	mov	sp, r7
 8014328:	bd90      	pop	{r4, r7, pc}
	...

0801432c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b086      	sub	sp, #24
 8014330:	af00      	add	r7, sp, #0
 8014332:	60f8      	str	r0, [r7, #12]
 8014334:	60b9      	str	r1, [r7, #8]
 8014336:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8014338:	2300      	movs	r3, #0
 801433a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8014340:	697b      	ldr	r3, [r7, #20]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d101      	bne.n	801434a <osMessagePut+0x1e>
    ticks = 1;
 8014346:	2301      	movs	r3, #1
 8014348:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801434a:	f7ff fdd7 	bl	8013efc <inHandlerMode>
 801434e:	4603      	mov	r3, r0
 8014350:	2b00      	cmp	r3, #0
 8014352:	d018      	beq.n	8014386 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8014354:	f107 0210 	add.w	r2, r7, #16
 8014358:	f107 0108 	add.w	r1, r7, #8
 801435c:	2300      	movs	r3, #0
 801435e:	68f8      	ldr	r0, [r7, #12]
 8014360:	f000 fbd0 	bl	8014b04 <xQueueGenericSendFromISR>
 8014364:	4603      	mov	r3, r0
 8014366:	2b01      	cmp	r3, #1
 8014368:	d001      	beq.n	801436e <osMessagePut+0x42>
      return osErrorOS;
 801436a:	23ff      	movs	r3, #255	; 0xff
 801436c:	e018      	b.n	80143a0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801436e:	693b      	ldr	r3, [r7, #16]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d014      	beq.n	801439e <osMessagePut+0x72>
 8014374:	4b0c      	ldr	r3, [pc, #48]	; (80143a8 <osMessagePut+0x7c>)
 8014376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801437a:	601a      	str	r2, [r3, #0]
 801437c:	f3bf 8f4f 	dsb	sy
 8014380:	f3bf 8f6f 	isb	sy
 8014384:	e00b      	b.n	801439e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8014386:	f107 0108 	add.w	r1, r7, #8
 801438a:	2300      	movs	r3, #0
 801438c:	697a      	ldr	r2, [r7, #20]
 801438e:	68f8      	ldr	r0, [r7, #12]
 8014390:	f000 faba 	bl	8014908 <xQueueGenericSend>
 8014394:	4603      	mov	r3, r0
 8014396:	2b01      	cmp	r3, #1
 8014398:	d001      	beq.n	801439e <osMessagePut+0x72>
      return osErrorOS;
 801439a:	23ff      	movs	r3, #255	; 0xff
 801439c:	e000      	b.n	80143a0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801439e:	2300      	movs	r3, #0
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	3718      	adds	r7, #24
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}
 80143a8:	e000ed04 	.word	0xe000ed04

080143ac <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80143ac:	b590      	push	{r4, r7, lr}
 80143ae:	b08b      	sub	sp, #44	; 0x2c
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	60f8      	str	r0, [r7, #12]
 80143b4:	60b9      	str	r1, [r7, #8]
 80143b6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80143b8:	68bb      	ldr	r3, [r7, #8]
 80143ba:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80143bc:	2300      	movs	r3, #0
 80143be:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d10a      	bne.n	80143dc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80143c6:	2380      	movs	r3, #128	; 0x80
 80143c8:	617b      	str	r3, [r7, #20]
    return event;
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	461c      	mov	r4, r3
 80143ce:	f107 0314 	add.w	r3, r7, #20
 80143d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80143d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80143da:	e054      	b.n	8014486 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80143dc:	2300      	movs	r3, #0
 80143de:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80143e0:	2300      	movs	r3, #0
 80143e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80143ea:	d103      	bne.n	80143f4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80143ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80143f0:	627b      	str	r3, [r7, #36]	; 0x24
 80143f2:	e009      	b.n	8014408 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d006      	beq.n	8014408 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80143fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014400:	2b00      	cmp	r3, #0
 8014402:	d101      	bne.n	8014408 <osMessageGet+0x5c>
      ticks = 1;
 8014404:	2301      	movs	r3, #1
 8014406:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8014408:	f7ff fd78 	bl	8013efc <inHandlerMode>
 801440c:	4603      	mov	r3, r0
 801440e:	2b00      	cmp	r3, #0
 8014410:	d01c      	beq.n	801444c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8014412:	f107 0220 	add.w	r2, r7, #32
 8014416:	f107 0314 	add.w	r3, r7, #20
 801441a:	3304      	adds	r3, #4
 801441c:	4619      	mov	r1, r3
 801441e:	68b8      	ldr	r0, [r7, #8]
 8014420:	f000 fe84 	bl	801512c <xQueueReceiveFromISR>
 8014424:	4603      	mov	r3, r0
 8014426:	2b01      	cmp	r3, #1
 8014428:	d102      	bne.n	8014430 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801442a:	2310      	movs	r3, #16
 801442c:	617b      	str	r3, [r7, #20]
 801442e:	e001      	b.n	8014434 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8014430:	2300      	movs	r3, #0
 8014432:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014434:	6a3b      	ldr	r3, [r7, #32]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d01d      	beq.n	8014476 <osMessageGet+0xca>
 801443a:	4b15      	ldr	r3, [pc, #84]	; (8014490 <osMessageGet+0xe4>)
 801443c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014440:	601a      	str	r2, [r3, #0]
 8014442:	f3bf 8f4f 	dsb	sy
 8014446:	f3bf 8f6f 	isb	sy
 801444a:	e014      	b.n	8014476 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801444c:	f107 0314 	add.w	r3, r7, #20
 8014450:	3304      	adds	r3, #4
 8014452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014454:	4619      	mov	r1, r3
 8014456:	68b8      	ldr	r0, [r7, #8]
 8014458:	f000 fc7c 	bl	8014d54 <xQueueReceive>
 801445c:	4603      	mov	r3, r0
 801445e:	2b01      	cmp	r3, #1
 8014460:	d102      	bne.n	8014468 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8014462:	2310      	movs	r3, #16
 8014464:	617b      	str	r3, [r7, #20]
 8014466:	e006      	b.n	8014476 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8014468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801446a:	2b00      	cmp	r3, #0
 801446c:	d101      	bne.n	8014472 <osMessageGet+0xc6>
 801446e:	2300      	movs	r3, #0
 8014470:	e000      	b.n	8014474 <osMessageGet+0xc8>
 8014472:	2340      	movs	r3, #64	; 0x40
 8014474:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	461c      	mov	r4, r3
 801447a:	f107 0314 	add.w	r3, r7, #20
 801447e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014482:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8014486:	68f8      	ldr	r0, [r7, #12]
 8014488:	372c      	adds	r7, #44	; 0x2c
 801448a:	46bd      	mov	sp, r7
 801448c:	bd90      	pop	{r4, r7, pc}
 801448e:	bf00      	nop
 8014490:	e000ed04 	.word	0xe000ed04

08014494 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014494:	b480      	push	{r7}
 8014496:	b083      	sub	sp, #12
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	f103 0208 	add.w	r2, r3, #8
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80144ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	f103 0208 	add.w	r2, r3, #8
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	f103 0208 	add.w	r2, r3, #8
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	2200      	movs	r2, #0
 80144c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80144c8:	bf00      	nop
 80144ca:	370c      	adds	r7, #12
 80144cc:	46bd      	mov	sp, r7
 80144ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d2:	4770      	bx	lr

080144d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80144d4:	b480      	push	{r7}
 80144d6:	b083      	sub	sp, #12
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	2200      	movs	r2, #0
 80144e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80144e2:	bf00      	nop
 80144e4:	370c      	adds	r7, #12
 80144e6:	46bd      	mov	sp, r7
 80144e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ec:	4770      	bx	lr

080144ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80144ee:	b480      	push	{r7}
 80144f0:	b085      	sub	sp, #20
 80144f2:	af00      	add	r7, sp, #0
 80144f4:	6078      	str	r0, [r7, #4]
 80144f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	685b      	ldr	r3, [r3, #4]
 80144fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80144fe:	683b      	ldr	r3, [r7, #0]
 8014500:	68fa      	ldr	r2, [r7, #12]
 8014502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	689a      	ldr	r2, [r3, #8]
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	689b      	ldr	r3, [r3, #8]
 8014510:	683a      	ldr	r2, [r7, #0]
 8014512:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	683a      	ldr	r2, [r7, #0]
 8014518:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801451a:	683b      	ldr	r3, [r7, #0]
 801451c:	687a      	ldr	r2, [r7, #4]
 801451e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	1c5a      	adds	r2, r3, #1
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	601a      	str	r2, [r3, #0]
}
 801452a:	bf00      	nop
 801452c:	3714      	adds	r7, #20
 801452e:	46bd      	mov	sp, r7
 8014530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014534:	4770      	bx	lr

08014536 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014536:	b480      	push	{r7}
 8014538:	b085      	sub	sp, #20
 801453a:	af00      	add	r7, sp, #0
 801453c:	6078      	str	r0, [r7, #4]
 801453e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801454c:	d103      	bne.n	8014556 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	691b      	ldr	r3, [r3, #16]
 8014552:	60fb      	str	r3, [r7, #12]
 8014554:	e00c      	b.n	8014570 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	3308      	adds	r3, #8
 801455a:	60fb      	str	r3, [r7, #12]
 801455c:	e002      	b.n	8014564 <vListInsert+0x2e>
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	685b      	ldr	r3, [r3, #4]
 8014562:	60fb      	str	r3, [r7, #12]
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	685b      	ldr	r3, [r3, #4]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	68ba      	ldr	r2, [r7, #8]
 801456c:	429a      	cmp	r2, r3
 801456e:	d2f6      	bcs.n	801455e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	685a      	ldr	r2, [r3, #4]
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014578:	683b      	ldr	r3, [r7, #0]
 801457a:	685b      	ldr	r3, [r3, #4]
 801457c:	683a      	ldr	r2, [r7, #0]
 801457e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014580:	683b      	ldr	r3, [r7, #0]
 8014582:	68fa      	ldr	r2, [r7, #12]
 8014584:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	683a      	ldr	r2, [r7, #0]
 801458a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801458c:	683b      	ldr	r3, [r7, #0]
 801458e:	687a      	ldr	r2, [r7, #4]
 8014590:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	1c5a      	adds	r2, r3, #1
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	601a      	str	r2, [r3, #0]
}
 801459c:	bf00      	nop
 801459e:	3714      	adds	r7, #20
 80145a0:	46bd      	mov	sp, r7
 80145a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a6:	4770      	bx	lr

080145a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80145a8:	b480      	push	{r7}
 80145aa:	b085      	sub	sp, #20
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	691b      	ldr	r3, [r3, #16]
 80145b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	685b      	ldr	r3, [r3, #4]
 80145ba:	687a      	ldr	r2, [r7, #4]
 80145bc:	6892      	ldr	r2, [r2, #8]
 80145be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	689b      	ldr	r3, [r3, #8]
 80145c4:	687a      	ldr	r2, [r7, #4]
 80145c6:	6852      	ldr	r2, [r2, #4]
 80145c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	685b      	ldr	r3, [r3, #4]
 80145ce:	687a      	ldr	r2, [r7, #4]
 80145d0:	429a      	cmp	r2, r3
 80145d2:	d103      	bne.n	80145dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	689a      	ldr	r2, [r3, #8]
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	2200      	movs	r2, #0
 80145e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	1e5a      	subs	r2, r3, #1
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	681b      	ldr	r3, [r3, #0]
}
 80145f0:	4618      	mov	r0, r3
 80145f2:	3714      	adds	r7, #20
 80145f4:	46bd      	mov	sp, r7
 80145f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fa:	4770      	bx	lr

080145fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b084      	sub	sp, #16
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d10a      	bne.n	8014626 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014614:	f383 8811 	msr	BASEPRI, r3
 8014618:	f3bf 8f6f 	isb	sy
 801461c:	f3bf 8f4f 	dsb	sy
 8014620:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014622:	bf00      	nop
 8014624:	e7fe      	b.n	8014624 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8014626:	f002 f9e5 	bl	80169f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	681a      	ldr	r2, [r3, #0]
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014632:	68f9      	ldr	r1, [r7, #12]
 8014634:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014636:	fb01 f303 	mul.w	r3, r1, r3
 801463a:	441a      	add	r2, r3
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	2200      	movs	r2, #0
 8014644:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	681a      	ldr	r2, [r3, #0]
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	681a      	ldr	r2, [r3, #0]
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014656:	3b01      	subs	r3, #1
 8014658:	68f9      	ldr	r1, [r7, #12]
 801465a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801465c:	fb01 f303 	mul.w	r3, r1, r3
 8014660:	441a      	add	r2, r3
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	22ff      	movs	r2, #255	; 0xff
 801466a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	22ff      	movs	r2, #255	; 0xff
 8014672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014676:	683b      	ldr	r3, [r7, #0]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d114      	bne.n	80146a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	691b      	ldr	r3, [r3, #16]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d01a      	beq.n	80146ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	3310      	adds	r3, #16
 8014688:	4618      	mov	r0, r3
 801468a:	f001 fb97 	bl	8015dbc <xTaskRemoveFromEventList>
 801468e:	4603      	mov	r3, r0
 8014690:	2b00      	cmp	r3, #0
 8014692:	d012      	beq.n	80146ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014694:	4b0c      	ldr	r3, [pc, #48]	; (80146c8 <xQueueGenericReset+0xcc>)
 8014696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801469a:	601a      	str	r2, [r3, #0]
 801469c:	f3bf 8f4f 	dsb	sy
 80146a0:	f3bf 8f6f 	isb	sy
 80146a4:	e009      	b.n	80146ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	3310      	adds	r3, #16
 80146aa:	4618      	mov	r0, r3
 80146ac:	f7ff fef2 	bl	8014494 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	3324      	adds	r3, #36	; 0x24
 80146b4:	4618      	mov	r0, r3
 80146b6:	f7ff feed 	bl	8014494 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80146ba:	f002 f9cb 	bl	8016a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80146be:	2301      	movs	r3, #1
}
 80146c0:	4618      	mov	r0, r3
 80146c2:	3710      	adds	r7, #16
 80146c4:	46bd      	mov	sp, r7
 80146c6:	bd80      	pop	{r7, pc}
 80146c8:	e000ed04 	.word	0xe000ed04

080146cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b08e      	sub	sp, #56	; 0x38
 80146d0:	af02      	add	r7, sp, #8
 80146d2:	60f8      	str	r0, [r7, #12]
 80146d4:	60b9      	str	r1, [r7, #8]
 80146d6:	607a      	str	r2, [r7, #4]
 80146d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d10a      	bne.n	80146f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80146e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146e4:	f383 8811 	msr	BASEPRI, r3
 80146e8:	f3bf 8f6f 	isb	sy
 80146ec:	f3bf 8f4f 	dsb	sy
 80146f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80146f2:	bf00      	nop
 80146f4:	e7fe      	b.n	80146f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80146f6:	683b      	ldr	r3, [r7, #0]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d10a      	bne.n	8014712 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80146fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014700:	f383 8811 	msr	BASEPRI, r3
 8014704:	f3bf 8f6f 	isb	sy
 8014708:	f3bf 8f4f 	dsb	sy
 801470c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801470e:	bf00      	nop
 8014710:	e7fe      	b.n	8014710 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d002      	beq.n	801471e <xQueueGenericCreateStatic+0x52>
 8014718:	68bb      	ldr	r3, [r7, #8]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d001      	beq.n	8014722 <xQueueGenericCreateStatic+0x56>
 801471e:	2301      	movs	r3, #1
 8014720:	e000      	b.n	8014724 <xQueueGenericCreateStatic+0x58>
 8014722:	2300      	movs	r3, #0
 8014724:	2b00      	cmp	r3, #0
 8014726:	d10a      	bne.n	801473e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8014728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801472c:	f383 8811 	msr	BASEPRI, r3
 8014730:	f3bf 8f6f 	isb	sy
 8014734:	f3bf 8f4f 	dsb	sy
 8014738:	623b      	str	r3, [r7, #32]
}
 801473a:	bf00      	nop
 801473c:	e7fe      	b.n	801473c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d102      	bne.n	801474a <xQueueGenericCreateStatic+0x7e>
 8014744:	68bb      	ldr	r3, [r7, #8]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d101      	bne.n	801474e <xQueueGenericCreateStatic+0x82>
 801474a:	2301      	movs	r3, #1
 801474c:	e000      	b.n	8014750 <xQueueGenericCreateStatic+0x84>
 801474e:	2300      	movs	r3, #0
 8014750:	2b00      	cmp	r3, #0
 8014752:	d10a      	bne.n	801476a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8014754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014758:	f383 8811 	msr	BASEPRI, r3
 801475c:	f3bf 8f6f 	isb	sy
 8014760:	f3bf 8f4f 	dsb	sy
 8014764:	61fb      	str	r3, [r7, #28]
}
 8014766:	bf00      	nop
 8014768:	e7fe      	b.n	8014768 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801476a:	2348      	movs	r3, #72	; 0x48
 801476c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801476e:	697b      	ldr	r3, [r7, #20]
 8014770:	2b48      	cmp	r3, #72	; 0x48
 8014772:	d00a      	beq.n	801478a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8014774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014778:	f383 8811 	msr	BASEPRI, r3
 801477c:	f3bf 8f6f 	isb	sy
 8014780:	f3bf 8f4f 	dsb	sy
 8014784:	61bb      	str	r3, [r7, #24]
}
 8014786:	bf00      	nop
 8014788:	e7fe      	b.n	8014788 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801478a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801478c:	683b      	ldr	r3, [r7, #0]
 801478e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014792:	2b00      	cmp	r3, #0
 8014794:	d00d      	beq.n	80147b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014798:	2201      	movs	r2, #1
 801479a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801479e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80147a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147a4:	9300      	str	r3, [sp, #0]
 80147a6:	4613      	mov	r3, r2
 80147a8:	687a      	ldr	r2, [r7, #4]
 80147aa:	68b9      	ldr	r1, [r7, #8]
 80147ac:	68f8      	ldr	r0, [r7, #12]
 80147ae:	f000 f83f 	bl	8014830 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80147b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80147b4:	4618      	mov	r0, r3
 80147b6:	3730      	adds	r7, #48	; 0x30
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}

080147bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b08a      	sub	sp, #40	; 0x28
 80147c0:	af02      	add	r7, sp, #8
 80147c2:	60f8      	str	r0, [r7, #12]
 80147c4:	60b9      	str	r1, [r7, #8]
 80147c6:	4613      	mov	r3, r2
 80147c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d10a      	bne.n	80147e6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80147d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147d4:	f383 8811 	msr	BASEPRI, r3
 80147d8:	f3bf 8f6f 	isb	sy
 80147dc:	f3bf 8f4f 	dsb	sy
 80147e0:	613b      	str	r3, [r7, #16]
}
 80147e2:	bf00      	nop
 80147e4:	e7fe      	b.n	80147e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	68ba      	ldr	r2, [r7, #8]
 80147ea:	fb02 f303 	mul.w	r3, r2, r3
 80147ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80147f0:	69fb      	ldr	r3, [r7, #28]
 80147f2:	3348      	adds	r3, #72	; 0x48
 80147f4:	4618      	mov	r0, r3
 80147f6:	f002 fa1f 	bl	8016c38 <pvPortMalloc>
 80147fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80147fc:	69bb      	ldr	r3, [r7, #24]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d011      	beq.n	8014826 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014802:	69bb      	ldr	r3, [r7, #24]
 8014804:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014806:	697b      	ldr	r3, [r7, #20]
 8014808:	3348      	adds	r3, #72	; 0x48
 801480a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801480c:	69bb      	ldr	r3, [r7, #24]
 801480e:	2200      	movs	r2, #0
 8014810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014814:	79fa      	ldrb	r2, [r7, #7]
 8014816:	69bb      	ldr	r3, [r7, #24]
 8014818:	9300      	str	r3, [sp, #0]
 801481a:	4613      	mov	r3, r2
 801481c:	697a      	ldr	r2, [r7, #20]
 801481e:	68b9      	ldr	r1, [r7, #8]
 8014820:	68f8      	ldr	r0, [r7, #12]
 8014822:	f000 f805 	bl	8014830 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014826:	69bb      	ldr	r3, [r7, #24]
	}
 8014828:	4618      	mov	r0, r3
 801482a:	3720      	adds	r7, #32
 801482c:	46bd      	mov	sp, r7
 801482e:	bd80      	pop	{r7, pc}

08014830 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b084      	sub	sp, #16
 8014834:	af00      	add	r7, sp, #0
 8014836:	60f8      	str	r0, [r7, #12]
 8014838:	60b9      	str	r1, [r7, #8]
 801483a:	607a      	str	r2, [r7, #4]
 801483c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801483e:	68bb      	ldr	r3, [r7, #8]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d103      	bne.n	801484c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014844:	69bb      	ldr	r3, [r7, #24]
 8014846:	69ba      	ldr	r2, [r7, #24]
 8014848:	601a      	str	r2, [r3, #0]
 801484a:	e002      	b.n	8014852 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801484c:	69bb      	ldr	r3, [r7, #24]
 801484e:	687a      	ldr	r2, [r7, #4]
 8014850:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014852:	69bb      	ldr	r3, [r7, #24]
 8014854:	68fa      	ldr	r2, [r7, #12]
 8014856:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014858:	69bb      	ldr	r3, [r7, #24]
 801485a:	68ba      	ldr	r2, [r7, #8]
 801485c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801485e:	2101      	movs	r1, #1
 8014860:	69b8      	ldr	r0, [r7, #24]
 8014862:	f7ff fecb 	bl	80145fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014866:	bf00      	nop
 8014868:	3710      	adds	r7, #16
 801486a:	46bd      	mov	sp, r7
 801486c:	bd80      	pop	{r7, pc}

0801486e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801486e:	b580      	push	{r7, lr}
 8014870:	b082      	sub	sp, #8
 8014872:	af00      	add	r7, sp, #0
 8014874:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d00e      	beq.n	801489a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	2200      	movs	r2, #0
 8014880:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	2200      	movs	r2, #0
 8014886:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	2200      	movs	r2, #0
 801488c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801488e:	2300      	movs	r3, #0
 8014890:	2200      	movs	r2, #0
 8014892:	2100      	movs	r1, #0
 8014894:	6878      	ldr	r0, [r7, #4]
 8014896:	f000 f837 	bl	8014908 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801489a:	bf00      	nop
 801489c:	3708      	adds	r7, #8
 801489e:	46bd      	mov	sp, r7
 80148a0:	bd80      	pop	{r7, pc}

080148a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80148a2:	b580      	push	{r7, lr}
 80148a4:	b086      	sub	sp, #24
 80148a6:	af00      	add	r7, sp, #0
 80148a8:	4603      	mov	r3, r0
 80148aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80148ac:	2301      	movs	r3, #1
 80148ae:	617b      	str	r3, [r7, #20]
 80148b0:	2300      	movs	r3, #0
 80148b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80148b4:	79fb      	ldrb	r3, [r7, #7]
 80148b6:	461a      	mov	r2, r3
 80148b8:	6939      	ldr	r1, [r7, #16]
 80148ba:	6978      	ldr	r0, [r7, #20]
 80148bc:	f7ff ff7e 	bl	80147bc <xQueueGenericCreate>
 80148c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80148c2:	68f8      	ldr	r0, [r7, #12]
 80148c4:	f7ff ffd3 	bl	801486e <prvInitialiseMutex>

		return xNewQueue;
 80148c8:	68fb      	ldr	r3, [r7, #12]
	}
 80148ca:	4618      	mov	r0, r3
 80148cc:	3718      	adds	r7, #24
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}

080148d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80148d2:	b580      	push	{r7, lr}
 80148d4:	b088      	sub	sp, #32
 80148d6:	af02      	add	r7, sp, #8
 80148d8:	4603      	mov	r3, r0
 80148da:	6039      	str	r1, [r7, #0]
 80148dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80148de:	2301      	movs	r3, #1
 80148e0:	617b      	str	r3, [r7, #20]
 80148e2:	2300      	movs	r3, #0
 80148e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80148e6:	79fb      	ldrb	r3, [r7, #7]
 80148e8:	9300      	str	r3, [sp, #0]
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	2200      	movs	r2, #0
 80148ee:	6939      	ldr	r1, [r7, #16]
 80148f0:	6978      	ldr	r0, [r7, #20]
 80148f2:	f7ff feeb 	bl	80146cc <xQueueGenericCreateStatic>
 80148f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80148f8:	68f8      	ldr	r0, [r7, #12]
 80148fa:	f7ff ffb8 	bl	801486e <prvInitialiseMutex>

		return xNewQueue;
 80148fe:	68fb      	ldr	r3, [r7, #12]
	}
 8014900:	4618      	mov	r0, r3
 8014902:	3718      	adds	r7, #24
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}

08014908 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b08e      	sub	sp, #56	; 0x38
 801490c:	af00      	add	r7, sp, #0
 801490e:	60f8      	str	r0, [r7, #12]
 8014910:	60b9      	str	r1, [r7, #8]
 8014912:	607a      	str	r2, [r7, #4]
 8014914:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014916:	2300      	movs	r3, #0
 8014918:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014920:	2b00      	cmp	r3, #0
 8014922:	d10a      	bne.n	801493a <xQueueGenericSend+0x32>
	__asm volatile
 8014924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014928:	f383 8811 	msr	BASEPRI, r3
 801492c:	f3bf 8f6f 	isb	sy
 8014930:	f3bf 8f4f 	dsb	sy
 8014934:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014936:	bf00      	nop
 8014938:	e7fe      	b.n	8014938 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d103      	bne.n	8014948 <xQueueGenericSend+0x40>
 8014940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014944:	2b00      	cmp	r3, #0
 8014946:	d101      	bne.n	801494c <xQueueGenericSend+0x44>
 8014948:	2301      	movs	r3, #1
 801494a:	e000      	b.n	801494e <xQueueGenericSend+0x46>
 801494c:	2300      	movs	r3, #0
 801494e:	2b00      	cmp	r3, #0
 8014950:	d10a      	bne.n	8014968 <xQueueGenericSend+0x60>
	__asm volatile
 8014952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014956:	f383 8811 	msr	BASEPRI, r3
 801495a:	f3bf 8f6f 	isb	sy
 801495e:	f3bf 8f4f 	dsb	sy
 8014962:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014964:	bf00      	nop
 8014966:	e7fe      	b.n	8014966 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	2b02      	cmp	r3, #2
 801496c:	d103      	bne.n	8014976 <xQueueGenericSend+0x6e>
 801496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014972:	2b01      	cmp	r3, #1
 8014974:	d101      	bne.n	801497a <xQueueGenericSend+0x72>
 8014976:	2301      	movs	r3, #1
 8014978:	e000      	b.n	801497c <xQueueGenericSend+0x74>
 801497a:	2300      	movs	r3, #0
 801497c:	2b00      	cmp	r3, #0
 801497e:	d10a      	bne.n	8014996 <xQueueGenericSend+0x8e>
	__asm volatile
 8014980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014984:	f383 8811 	msr	BASEPRI, r3
 8014988:	f3bf 8f6f 	isb	sy
 801498c:	f3bf 8f4f 	dsb	sy
 8014990:	623b      	str	r3, [r7, #32]
}
 8014992:	bf00      	nop
 8014994:	e7fe      	b.n	8014994 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014996:	f001 fbd1 	bl	801613c <xTaskGetSchedulerState>
 801499a:	4603      	mov	r3, r0
 801499c:	2b00      	cmp	r3, #0
 801499e:	d102      	bne.n	80149a6 <xQueueGenericSend+0x9e>
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d101      	bne.n	80149aa <xQueueGenericSend+0xa2>
 80149a6:	2301      	movs	r3, #1
 80149a8:	e000      	b.n	80149ac <xQueueGenericSend+0xa4>
 80149aa:	2300      	movs	r3, #0
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d10a      	bne.n	80149c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80149b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149b4:	f383 8811 	msr	BASEPRI, r3
 80149b8:	f3bf 8f6f 	isb	sy
 80149bc:	f3bf 8f4f 	dsb	sy
 80149c0:	61fb      	str	r3, [r7, #28]
}
 80149c2:	bf00      	nop
 80149c4:	e7fe      	b.n	80149c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80149c6:	f002 f815 	bl	80169f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80149ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80149ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80149d2:	429a      	cmp	r2, r3
 80149d4:	d302      	bcc.n	80149dc <xQueueGenericSend+0xd4>
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	2b02      	cmp	r3, #2
 80149da:	d129      	bne.n	8014a30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80149dc:	683a      	ldr	r2, [r7, #0]
 80149de:	68b9      	ldr	r1, [r7, #8]
 80149e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80149e2:	f000 fc5e 	bl	80152a2 <prvCopyDataToQueue>
 80149e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80149e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d010      	beq.n	8014a12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80149f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149f2:	3324      	adds	r3, #36	; 0x24
 80149f4:	4618      	mov	r0, r3
 80149f6:	f001 f9e1 	bl	8015dbc <xTaskRemoveFromEventList>
 80149fa:	4603      	mov	r3, r0
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d013      	beq.n	8014a28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014a00:	4b3f      	ldr	r3, [pc, #252]	; (8014b00 <xQueueGenericSend+0x1f8>)
 8014a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a06:	601a      	str	r2, [r3, #0]
 8014a08:	f3bf 8f4f 	dsb	sy
 8014a0c:	f3bf 8f6f 	isb	sy
 8014a10:	e00a      	b.n	8014a28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d007      	beq.n	8014a28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014a18:	4b39      	ldr	r3, [pc, #228]	; (8014b00 <xQueueGenericSend+0x1f8>)
 8014a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a1e:	601a      	str	r2, [r3, #0]
 8014a20:	f3bf 8f4f 	dsb	sy
 8014a24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014a28:	f002 f814 	bl	8016a54 <vPortExitCritical>
				return pdPASS;
 8014a2c:	2301      	movs	r3, #1
 8014a2e:	e063      	b.n	8014af8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d103      	bne.n	8014a3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014a36:	f002 f80d 	bl	8016a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	e05c      	b.n	8014af8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d106      	bne.n	8014a52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014a44:	f107 0314 	add.w	r3, r7, #20
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f001 fa19 	bl	8015e80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014a4e:	2301      	movs	r3, #1
 8014a50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014a52:	f001 ffff 	bl	8016a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014a56:	f000 ffa7 	bl	80159a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014a5a:	f001 ffcb 	bl	80169f4 <vPortEnterCritical>
 8014a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014a64:	b25b      	sxtb	r3, r3
 8014a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a6a:	d103      	bne.n	8014a74 <xQueueGenericSend+0x16c>
 8014a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a6e:	2200      	movs	r2, #0
 8014a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014a7a:	b25b      	sxtb	r3, r3
 8014a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a80:	d103      	bne.n	8014a8a <xQueueGenericSend+0x182>
 8014a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a84:	2200      	movs	r2, #0
 8014a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014a8a:	f001 ffe3 	bl	8016a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014a8e:	1d3a      	adds	r2, r7, #4
 8014a90:	f107 0314 	add.w	r3, r7, #20
 8014a94:	4611      	mov	r1, r2
 8014a96:	4618      	mov	r0, r3
 8014a98:	f001 fa08 	bl	8015eac <xTaskCheckForTimeOut>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d124      	bne.n	8014aec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014aa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014aa4:	f000 fcf5 	bl	8015492 <prvIsQueueFull>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d018      	beq.n	8014ae0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ab0:	3310      	adds	r3, #16
 8014ab2:	687a      	ldr	r2, [r7, #4]
 8014ab4:	4611      	mov	r1, r2
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f001 f95c 	bl	8015d74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014abe:	f000 fc80 	bl	80153c2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014ac2:	f000 ff7f 	bl	80159c4 <xTaskResumeAll>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	f47f af7c 	bne.w	80149c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8014ace:	4b0c      	ldr	r3, [pc, #48]	; (8014b00 <xQueueGenericSend+0x1f8>)
 8014ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ad4:	601a      	str	r2, [r3, #0]
 8014ad6:	f3bf 8f4f 	dsb	sy
 8014ada:	f3bf 8f6f 	isb	sy
 8014ade:	e772      	b.n	80149c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014ae2:	f000 fc6e 	bl	80153c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014ae6:	f000 ff6d 	bl	80159c4 <xTaskResumeAll>
 8014aea:	e76c      	b.n	80149c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014aee:	f000 fc68 	bl	80153c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014af2:	f000 ff67 	bl	80159c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014af6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014af8:	4618      	mov	r0, r3
 8014afa:	3738      	adds	r7, #56	; 0x38
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd80      	pop	{r7, pc}
 8014b00:	e000ed04 	.word	0xe000ed04

08014b04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b090      	sub	sp, #64	; 0x40
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	60f8      	str	r0, [r7, #12]
 8014b0c:	60b9      	str	r1, [r7, #8]
 8014b0e:	607a      	str	r2, [r7, #4]
 8014b10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8014b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d10a      	bne.n	8014b32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8014b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b20:	f383 8811 	msr	BASEPRI, r3
 8014b24:	f3bf 8f6f 	isb	sy
 8014b28:	f3bf 8f4f 	dsb	sy
 8014b2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014b2e:	bf00      	nop
 8014b30:	e7fe      	b.n	8014b30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014b32:	68bb      	ldr	r3, [r7, #8]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d103      	bne.n	8014b40 <xQueueGenericSendFromISR+0x3c>
 8014b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d101      	bne.n	8014b44 <xQueueGenericSendFromISR+0x40>
 8014b40:	2301      	movs	r3, #1
 8014b42:	e000      	b.n	8014b46 <xQueueGenericSendFromISR+0x42>
 8014b44:	2300      	movs	r3, #0
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d10a      	bne.n	8014b60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8014b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b4e:	f383 8811 	msr	BASEPRI, r3
 8014b52:	f3bf 8f6f 	isb	sy
 8014b56:	f3bf 8f4f 	dsb	sy
 8014b5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014b5c:	bf00      	nop
 8014b5e:	e7fe      	b.n	8014b5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014b60:	683b      	ldr	r3, [r7, #0]
 8014b62:	2b02      	cmp	r3, #2
 8014b64:	d103      	bne.n	8014b6e <xQueueGenericSendFromISR+0x6a>
 8014b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b6a:	2b01      	cmp	r3, #1
 8014b6c:	d101      	bne.n	8014b72 <xQueueGenericSendFromISR+0x6e>
 8014b6e:	2301      	movs	r3, #1
 8014b70:	e000      	b.n	8014b74 <xQueueGenericSendFromISR+0x70>
 8014b72:	2300      	movs	r3, #0
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d10a      	bne.n	8014b8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8014b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b7c:	f383 8811 	msr	BASEPRI, r3
 8014b80:	f3bf 8f6f 	isb	sy
 8014b84:	f3bf 8f4f 	dsb	sy
 8014b88:	623b      	str	r3, [r7, #32]
}
 8014b8a:	bf00      	nop
 8014b8c:	e7fe      	b.n	8014b8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014b8e:	f002 f813 	bl	8016bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014b92:	f3ef 8211 	mrs	r2, BASEPRI
 8014b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b9a:	f383 8811 	msr	BASEPRI, r3
 8014b9e:	f3bf 8f6f 	isb	sy
 8014ba2:	f3bf 8f4f 	dsb	sy
 8014ba6:	61fa      	str	r2, [r7, #28]
 8014ba8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014baa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014bac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014bb6:	429a      	cmp	r2, r3
 8014bb8:	d302      	bcc.n	8014bc0 <xQueueGenericSendFromISR+0xbc>
 8014bba:	683b      	ldr	r3, [r7, #0]
 8014bbc:	2b02      	cmp	r3, #2
 8014bbe:	d12f      	bne.n	8014c20 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014bd0:	683a      	ldr	r2, [r7, #0]
 8014bd2:	68b9      	ldr	r1, [r7, #8]
 8014bd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014bd6:	f000 fb64 	bl	80152a2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014bda:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8014bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014be2:	d112      	bne.n	8014c0a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d016      	beq.n	8014c1a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bee:	3324      	adds	r3, #36	; 0x24
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f001 f8e3 	bl	8015dbc <xTaskRemoveFromEventList>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d00e      	beq.n	8014c1a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d00b      	beq.n	8014c1a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	2201      	movs	r2, #1
 8014c06:	601a      	str	r2, [r3, #0]
 8014c08:	e007      	b.n	8014c1a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014c0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014c0e:	3301      	adds	r3, #1
 8014c10:	b2db      	uxtb	r3, r3
 8014c12:	b25a      	sxtb	r2, r3
 8014c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014c1a:	2301      	movs	r3, #1
 8014c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8014c1e:	e001      	b.n	8014c24 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014c20:	2300      	movs	r3, #0
 8014c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c26:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014c28:	697b      	ldr	r3, [r7, #20]
 8014c2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014c2e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8014c32:	4618      	mov	r0, r3
 8014c34:	3740      	adds	r7, #64	; 0x40
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bd80      	pop	{r7, pc}

08014c3a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014c3a:	b580      	push	{r7, lr}
 8014c3c:	b08e      	sub	sp, #56	; 0x38
 8014c3e:	af00      	add	r7, sp, #0
 8014c40:	6078      	str	r0, [r7, #4]
 8014c42:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d10a      	bne.n	8014c64 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8014c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c52:	f383 8811 	msr	BASEPRI, r3
 8014c56:	f3bf 8f6f 	isb	sy
 8014c5a:	f3bf 8f4f 	dsb	sy
 8014c5e:	623b      	str	r3, [r7, #32]
}
 8014c60:	bf00      	nop
 8014c62:	e7fe      	b.n	8014c62 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d00a      	beq.n	8014c82 <xQueueGiveFromISR+0x48>
	__asm volatile
 8014c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c70:	f383 8811 	msr	BASEPRI, r3
 8014c74:	f3bf 8f6f 	isb	sy
 8014c78:	f3bf 8f4f 	dsb	sy
 8014c7c:	61fb      	str	r3, [r7, #28]
}
 8014c7e:	bf00      	nop
 8014c80:	e7fe      	b.n	8014c80 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d103      	bne.n	8014c92 <xQueueGiveFromISR+0x58>
 8014c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c8c:	689b      	ldr	r3, [r3, #8]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d101      	bne.n	8014c96 <xQueueGiveFromISR+0x5c>
 8014c92:	2301      	movs	r3, #1
 8014c94:	e000      	b.n	8014c98 <xQueueGiveFromISR+0x5e>
 8014c96:	2300      	movs	r3, #0
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d10a      	bne.n	8014cb2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8014c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ca0:	f383 8811 	msr	BASEPRI, r3
 8014ca4:	f3bf 8f6f 	isb	sy
 8014ca8:	f3bf 8f4f 	dsb	sy
 8014cac:	61bb      	str	r3, [r7, #24]
}
 8014cae:	bf00      	nop
 8014cb0:	e7fe      	b.n	8014cb0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014cb2:	f001 ff81 	bl	8016bb8 <vPortValidateInterruptPriority>
	__asm volatile
 8014cb6:	f3ef 8211 	mrs	r2, BASEPRI
 8014cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cbe:	f383 8811 	msr	BASEPRI, r3
 8014cc2:	f3bf 8f6f 	isb	sy
 8014cc6:	f3bf 8f4f 	dsb	sy
 8014cca:	617a      	str	r2, [r7, #20]
 8014ccc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014cce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014cde:	429a      	cmp	r2, r3
 8014ce0:	d22b      	bcs.n	8014d3a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cee:	1c5a      	adds	r2, r3, #1
 8014cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cf2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014cf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014cfc:	d112      	bne.n	8014d24 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d016      	beq.n	8014d34 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d08:	3324      	adds	r3, #36	; 0x24
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f001 f856 	bl	8015dbc <xTaskRemoveFromEventList>
 8014d10:	4603      	mov	r3, r0
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d00e      	beq.n	8014d34 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d00b      	beq.n	8014d34 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014d1c:	683b      	ldr	r3, [r7, #0]
 8014d1e:	2201      	movs	r2, #1
 8014d20:	601a      	str	r2, [r3, #0]
 8014d22:	e007      	b.n	8014d34 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d28:	3301      	adds	r3, #1
 8014d2a:	b2db      	uxtb	r3, r3
 8014d2c:	b25a      	sxtb	r2, r3
 8014d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014d34:	2301      	movs	r3, #1
 8014d36:	637b      	str	r3, [r7, #52]	; 0x34
 8014d38:	e001      	b.n	8014d3e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8014d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d40:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	f383 8811 	msr	BASEPRI, r3
}
 8014d48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	3738      	adds	r7, #56	; 0x38
 8014d50:	46bd      	mov	sp, r7
 8014d52:	bd80      	pop	{r7, pc}

08014d54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b08c      	sub	sp, #48	; 0x30
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	60f8      	str	r0, [r7, #12]
 8014d5c:	60b9      	str	r1, [r7, #8]
 8014d5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014d60:	2300      	movs	r3, #0
 8014d62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d10a      	bne.n	8014d84 <xQueueReceive+0x30>
	__asm volatile
 8014d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d72:	f383 8811 	msr	BASEPRI, r3
 8014d76:	f3bf 8f6f 	isb	sy
 8014d7a:	f3bf 8f4f 	dsb	sy
 8014d7e:	623b      	str	r3, [r7, #32]
}
 8014d80:	bf00      	nop
 8014d82:	e7fe      	b.n	8014d82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014d84:	68bb      	ldr	r3, [r7, #8]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d103      	bne.n	8014d92 <xQueueReceive+0x3e>
 8014d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d101      	bne.n	8014d96 <xQueueReceive+0x42>
 8014d92:	2301      	movs	r3, #1
 8014d94:	e000      	b.n	8014d98 <xQueueReceive+0x44>
 8014d96:	2300      	movs	r3, #0
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d10a      	bne.n	8014db2 <xQueueReceive+0x5e>
	__asm volatile
 8014d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014da0:	f383 8811 	msr	BASEPRI, r3
 8014da4:	f3bf 8f6f 	isb	sy
 8014da8:	f3bf 8f4f 	dsb	sy
 8014dac:	61fb      	str	r3, [r7, #28]
}
 8014dae:	bf00      	nop
 8014db0:	e7fe      	b.n	8014db0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014db2:	f001 f9c3 	bl	801613c <xTaskGetSchedulerState>
 8014db6:	4603      	mov	r3, r0
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d102      	bne.n	8014dc2 <xQueueReceive+0x6e>
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d101      	bne.n	8014dc6 <xQueueReceive+0x72>
 8014dc2:	2301      	movs	r3, #1
 8014dc4:	e000      	b.n	8014dc8 <xQueueReceive+0x74>
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d10a      	bne.n	8014de2 <xQueueReceive+0x8e>
	__asm volatile
 8014dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dd0:	f383 8811 	msr	BASEPRI, r3
 8014dd4:	f3bf 8f6f 	isb	sy
 8014dd8:	f3bf 8f4f 	dsb	sy
 8014ddc:	61bb      	str	r3, [r7, #24]
}
 8014dde:	bf00      	nop
 8014de0:	e7fe      	b.n	8014de0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014de2:	f001 fe07 	bl	80169f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d01f      	beq.n	8014e32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014df2:	68b9      	ldr	r1, [r7, #8]
 8014df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014df6:	f000 fabe 	bl	8015376 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dfc:	1e5a      	subs	r2, r3, #1
 8014dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e04:	691b      	ldr	r3, [r3, #16]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d00f      	beq.n	8014e2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e0c:	3310      	adds	r3, #16
 8014e0e:	4618      	mov	r0, r3
 8014e10:	f000 ffd4 	bl	8015dbc <xTaskRemoveFromEventList>
 8014e14:	4603      	mov	r3, r0
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d007      	beq.n	8014e2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014e1a:	4b3d      	ldr	r3, [pc, #244]	; (8014f10 <xQueueReceive+0x1bc>)
 8014e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e20:	601a      	str	r2, [r3, #0]
 8014e22:	f3bf 8f4f 	dsb	sy
 8014e26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014e2a:	f001 fe13 	bl	8016a54 <vPortExitCritical>
				return pdPASS;
 8014e2e:	2301      	movs	r3, #1
 8014e30:	e069      	b.n	8014f06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d103      	bne.n	8014e40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014e38:	f001 fe0c 	bl	8016a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	e062      	b.n	8014f06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d106      	bne.n	8014e54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014e46:	f107 0310 	add.w	r3, r7, #16
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f001 f818 	bl	8015e80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014e50:	2301      	movs	r3, #1
 8014e52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014e54:	f001 fdfe 	bl	8016a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014e58:	f000 fda6 	bl	80159a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014e5c:	f001 fdca 	bl	80169f4 <vPortEnterCritical>
 8014e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014e66:	b25b      	sxtb	r3, r3
 8014e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014e6c:	d103      	bne.n	8014e76 <xQueueReceive+0x122>
 8014e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e70:	2200      	movs	r2, #0
 8014e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014e7c:	b25b      	sxtb	r3, r3
 8014e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014e82:	d103      	bne.n	8014e8c <xQueueReceive+0x138>
 8014e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e86:	2200      	movs	r2, #0
 8014e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014e8c:	f001 fde2 	bl	8016a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014e90:	1d3a      	adds	r2, r7, #4
 8014e92:	f107 0310 	add.w	r3, r7, #16
 8014e96:	4611      	mov	r1, r2
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f001 f807 	bl	8015eac <xTaskCheckForTimeOut>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d123      	bne.n	8014eec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ea6:	f000 fade 	bl	8015466 <prvIsQueueEmpty>
 8014eaa:	4603      	mov	r3, r0
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d017      	beq.n	8014ee0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eb2:	3324      	adds	r3, #36	; 0x24
 8014eb4:	687a      	ldr	r2, [r7, #4]
 8014eb6:	4611      	mov	r1, r2
 8014eb8:	4618      	mov	r0, r3
 8014eba:	f000 ff5b 	bl	8015d74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ec0:	f000 fa7f 	bl	80153c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014ec4:	f000 fd7e 	bl	80159c4 <xTaskResumeAll>
 8014ec8:	4603      	mov	r3, r0
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d189      	bne.n	8014de2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8014ece:	4b10      	ldr	r3, [pc, #64]	; (8014f10 <xQueueReceive+0x1bc>)
 8014ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ed4:	601a      	str	r2, [r3, #0]
 8014ed6:	f3bf 8f4f 	dsb	sy
 8014eda:	f3bf 8f6f 	isb	sy
 8014ede:	e780      	b.n	8014de2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ee2:	f000 fa6e 	bl	80153c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014ee6:	f000 fd6d 	bl	80159c4 <xTaskResumeAll>
 8014eea:	e77a      	b.n	8014de2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014eee:	f000 fa68 	bl	80153c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014ef2:	f000 fd67 	bl	80159c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ef8:	f000 fab5 	bl	8015466 <prvIsQueueEmpty>
 8014efc:	4603      	mov	r3, r0
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	f43f af6f 	beq.w	8014de2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014f04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014f06:	4618      	mov	r0, r3
 8014f08:	3730      	adds	r7, #48	; 0x30
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	bd80      	pop	{r7, pc}
 8014f0e:	bf00      	nop
 8014f10:	e000ed04 	.word	0xe000ed04

08014f14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014f14:	b580      	push	{r7, lr}
 8014f16:	b08e      	sub	sp, #56	; 0x38
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]
 8014f1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014f1e:	2300      	movs	r3, #0
 8014f20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014f26:	2300      	movs	r3, #0
 8014f28:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d10a      	bne.n	8014f46 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8014f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f34:	f383 8811 	msr	BASEPRI, r3
 8014f38:	f3bf 8f6f 	isb	sy
 8014f3c:	f3bf 8f4f 	dsb	sy
 8014f40:	623b      	str	r3, [r7, #32]
}
 8014f42:	bf00      	nop
 8014f44:	e7fe      	b.n	8014f44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d00a      	beq.n	8014f64 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8014f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f52:	f383 8811 	msr	BASEPRI, r3
 8014f56:	f3bf 8f6f 	isb	sy
 8014f5a:	f3bf 8f4f 	dsb	sy
 8014f5e:	61fb      	str	r3, [r7, #28]
}
 8014f60:	bf00      	nop
 8014f62:	e7fe      	b.n	8014f62 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014f64:	f001 f8ea 	bl	801613c <xTaskGetSchedulerState>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d102      	bne.n	8014f74 <xQueueSemaphoreTake+0x60>
 8014f6e:	683b      	ldr	r3, [r7, #0]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d101      	bne.n	8014f78 <xQueueSemaphoreTake+0x64>
 8014f74:	2301      	movs	r3, #1
 8014f76:	e000      	b.n	8014f7a <xQueueSemaphoreTake+0x66>
 8014f78:	2300      	movs	r3, #0
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d10a      	bne.n	8014f94 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8014f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f82:	f383 8811 	msr	BASEPRI, r3
 8014f86:	f3bf 8f6f 	isb	sy
 8014f8a:	f3bf 8f4f 	dsb	sy
 8014f8e:	61bb      	str	r3, [r7, #24]
}
 8014f90:	bf00      	nop
 8014f92:	e7fe      	b.n	8014f92 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014f94:	f001 fd2e 	bl	80169f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f9c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d024      	beq.n	8014fee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fa6:	1e5a      	subs	r2, r3, #1
 8014fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014faa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d104      	bne.n	8014fbe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014fb4:	f001 fa6a 	bl	801648c <pvTaskIncrementMutexHeldCount>
 8014fb8:	4602      	mov	r2, r0
 8014fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fbc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fc0:	691b      	ldr	r3, [r3, #16]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d00f      	beq.n	8014fe6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fc8:	3310      	adds	r3, #16
 8014fca:	4618      	mov	r0, r3
 8014fcc:	f000 fef6 	bl	8015dbc <xTaskRemoveFromEventList>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d007      	beq.n	8014fe6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014fd6:	4b54      	ldr	r3, [pc, #336]	; (8015128 <xQueueSemaphoreTake+0x214>)
 8014fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fdc:	601a      	str	r2, [r3, #0]
 8014fde:	f3bf 8f4f 	dsb	sy
 8014fe2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014fe6:	f001 fd35 	bl	8016a54 <vPortExitCritical>
				return pdPASS;
 8014fea:	2301      	movs	r3, #1
 8014fec:	e097      	b.n	801511e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014fee:	683b      	ldr	r3, [r7, #0]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d111      	bne.n	8015018 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d00a      	beq.n	8015010 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8014ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ffe:	f383 8811 	msr	BASEPRI, r3
 8015002:	f3bf 8f6f 	isb	sy
 8015006:	f3bf 8f4f 	dsb	sy
 801500a:	617b      	str	r3, [r7, #20]
}
 801500c:	bf00      	nop
 801500e:	e7fe      	b.n	801500e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015010:	f001 fd20 	bl	8016a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015014:	2300      	movs	r3, #0
 8015016:	e082      	b.n	801511e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801501a:	2b00      	cmp	r3, #0
 801501c:	d106      	bne.n	801502c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801501e:	f107 030c 	add.w	r3, r7, #12
 8015022:	4618      	mov	r0, r3
 8015024:	f000 ff2c 	bl	8015e80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015028:	2301      	movs	r3, #1
 801502a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801502c:	f001 fd12 	bl	8016a54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015030:	f000 fcba 	bl	80159a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015034:	f001 fcde 	bl	80169f4 <vPortEnterCritical>
 8015038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801503a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801503e:	b25b      	sxtb	r3, r3
 8015040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015044:	d103      	bne.n	801504e <xQueueSemaphoreTake+0x13a>
 8015046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015048:	2200      	movs	r2, #0
 801504a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015054:	b25b      	sxtb	r3, r3
 8015056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801505a:	d103      	bne.n	8015064 <xQueueSemaphoreTake+0x150>
 801505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801505e:	2200      	movs	r2, #0
 8015060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015064:	f001 fcf6 	bl	8016a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015068:	463a      	mov	r2, r7
 801506a:	f107 030c 	add.w	r3, r7, #12
 801506e:	4611      	mov	r1, r2
 8015070:	4618      	mov	r0, r3
 8015072:	f000 ff1b 	bl	8015eac <xTaskCheckForTimeOut>
 8015076:	4603      	mov	r3, r0
 8015078:	2b00      	cmp	r3, #0
 801507a:	d132      	bne.n	80150e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801507c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801507e:	f000 f9f2 	bl	8015466 <prvIsQueueEmpty>
 8015082:	4603      	mov	r3, r0
 8015084:	2b00      	cmp	r3, #0
 8015086:	d026      	beq.n	80150d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d109      	bne.n	80150a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8015090:	f001 fcb0 	bl	80169f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015096:	689b      	ldr	r3, [r3, #8]
 8015098:	4618      	mov	r0, r3
 801509a:	f001 f86d 	bl	8016178 <xTaskPriorityInherit>
 801509e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80150a0:	f001 fcd8 	bl	8016a54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80150a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150a6:	3324      	adds	r3, #36	; 0x24
 80150a8:	683a      	ldr	r2, [r7, #0]
 80150aa:	4611      	mov	r1, r2
 80150ac:	4618      	mov	r0, r3
 80150ae:	f000 fe61 	bl	8015d74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80150b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80150b4:	f000 f985 	bl	80153c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80150b8:	f000 fc84 	bl	80159c4 <xTaskResumeAll>
 80150bc:	4603      	mov	r3, r0
 80150be:	2b00      	cmp	r3, #0
 80150c0:	f47f af68 	bne.w	8014f94 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80150c4:	4b18      	ldr	r3, [pc, #96]	; (8015128 <xQueueSemaphoreTake+0x214>)
 80150c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150ca:	601a      	str	r2, [r3, #0]
 80150cc:	f3bf 8f4f 	dsb	sy
 80150d0:	f3bf 8f6f 	isb	sy
 80150d4:	e75e      	b.n	8014f94 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80150d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80150d8:	f000 f973 	bl	80153c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80150dc:	f000 fc72 	bl	80159c4 <xTaskResumeAll>
 80150e0:	e758      	b.n	8014f94 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80150e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80150e4:	f000 f96d 	bl	80153c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80150e8:	f000 fc6c 	bl	80159c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80150ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80150ee:	f000 f9ba 	bl	8015466 <prvIsQueueEmpty>
 80150f2:	4603      	mov	r3, r0
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	f43f af4d 	beq.w	8014f94 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80150fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d00d      	beq.n	801511c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8015100:	f001 fc78 	bl	80169f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015104:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015106:	f000 f8b4 	bl	8015272 <prvGetDisinheritPriorityAfterTimeout>
 801510a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801510c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801510e:	689b      	ldr	r3, [r3, #8]
 8015110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015112:	4618      	mov	r0, r3
 8015114:	f001 f92c 	bl	8016370 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015118:	f001 fc9c 	bl	8016a54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801511c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801511e:	4618      	mov	r0, r3
 8015120:	3738      	adds	r7, #56	; 0x38
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}
 8015126:	bf00      	nop
 8015128:	e000ed04 	.word	0xe000ed04

0801512c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b08e      	sub	sp, #56	; 0x38
 8015130:	af00      	add	r7, sp, #0
 8015132:	60f8      	str	r0, [r7, #12]
 8015134:	60b9      	str	r1, [r7, #8]
 8015136:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801513e:	2b00      	cmp	r3, #0
 8015140:	d10a      	bne.n	8015158 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8015142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015146:	f383 8811 	msr	BASEPRI, r3
 801514a:	f3bf 8f6f 	isb	sy
 801514e:	f3bf 8f4f 	dsb	sy
 8015152:	623b      	str	r3, [r7, #32]
}
 8015154:	bf00      	nop
 8015156:	e7fe      	b.n	8015156 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015158:	68bb      	ldr	r3, [r7, #8]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d103      	bne.n	8015166 <xQueueReceiveFromISR+0x3a>
 801515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015162:	2b00      	cmp	r3, #0
 8015164:	d101      	bne.n	801516a <xQueueReceiveFromISR+0x3e>
 8015166:	2301      	movs	r3, #1
 8015168:	e000      	b.n	801516c <xQueueReceiveFromISR+0x40>
 801516a:	2300      	movs	r3, #0
 801516c:	2b00      	cmp	r3, #0
 801516e:	d10a      	bne.n	8015186 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8015170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015174:	f383 8811 	msr	BASEPRI, r3
 8015178:	f3bf 8f6f 	isb	sy
 801517c:	f3bf 8f4f 	dsb	sy
 8015180:	61fb      	str	r3, [r7, #28]
}
 8015182:	bf00      	nop
 8015184:	e7fe      	b.n	8015184 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015186:	f001 fd17 	bl	8016bb8 <vPortValidateInterruptPriority>
	__asm volatile
 801518a:	f3ef 8211 	mrs	r2, BASEPRI
 801518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015192:	f383 8811 	msr	BASEPRI, r3
 8015196:	f3bf 8f6f 	isb	sy
 801519a:	f3bf 8f4f 	dsb	sy
 801519e:	61ba      	str	r2, [r7, #24]
 80151a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80151a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80151a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80151a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80151ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d02f      	beq.n	8015212 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80151b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80151b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80151bc:	68b9      	ldr	r1, [r7, #8]
 80151be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80151c0:	f000 f8d9 	bl	8015376 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80151c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151c6:	1e5a      	subs	r2, r3, #1
 80151c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80151cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80151d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80151d4:	d112      	bne.n	80151fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80151d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151d8:	691b      	ldr	r3, [r3, #16]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d016      	beq.n	801520c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80151de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151e0:	3310      	adds	r3, #16
 80151e2:	4618      	mov	r0, r3
 80151e4:	f000 fdea 	bl	8015dbc <xTaskRemoveFromEventList>
 80151e8:	4603      	mov	r3, r0
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d00e      	beq.n	801520c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d00b      	beq.n	801520c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	2201      	movs	r2, #1
 80151f8:	601a      	str	r2, [r3, #0]
 80151fa:	e007      	b.n	801520c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80151fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015200:	3301      	adds	r3, #1
 8015202:	b2db      	uxtb	r3, r3
 8015204:	b25a      	sxtb	r2, r3
 8015206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801520c:	2301      	movs	r3, #1
 801520e:	637b      	str	r3, [r7, #52]	; 0x34
 8015210:	e001      	b.n	8015216 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8015212:	2300      	movs	r3, #0
 8015214:	637b      	str	r3, [r7, #52]	; 0x34
 8015216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015218:	613b      	str	r3, [r7, #16]
	__asm volatile
 801521a:	693b      	ldr	r3, [r7, #16]
 801521c:	f383 8811 	msr	BASEPRI, r3
}
 8015220:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015224:	4618      	mov	r0, r3
 8015226:	3738      	adds	r7, #56	; 0x38
 8015228:	46bd      	mov	sp, r7
 801522a:	bd80      	pop	{r7, pc}

0801522c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b084      	sub	sp, #16
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d10a      	bne.n	8015254 <vQueueDelete+0x28>
	__asm volatile
 801523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015242:	f383 8811 	msr	BASEPRI, r3
 8015246:	f3bf 8f6f 	isb	sy
 801524a:	f3bf 8f4f 	dsb	sy
 801524e:	60bb      	str	r3, [r7, #8]
}
 8015250:	bf00      	nop
 8015252:	e7fe      	b.n	8015252 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015254:	68f8      	ldr	r0, [r7, #12]
 8015256:	f000 f935 	bl	80154c4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8015260:	2b00      	cmp	r3, #0
 8015262:	d102      	bne.n	801526a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8015264:	68f8      	ldr	r0, [r7, #12]
 8015266:	f001 fdb3 	bl	8016dd0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801526a:	bf00      	nop
 801526c:	3710      	adds	r7, #16
 801526e:	46bd      	mov	sp, r7
 8015270:	bd80      	pop	{r7, pc}

08015272 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015272:	b480      	push	{r7}
 8015274:	b085      	sub	sp, #20
 8015276:	af00      	add	r7, sp, #0
 8015278:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801527e:	2b00      	cmp	r3, #0
 8015280:	d006      	beq.n	8015290 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	f1c3 0307 	rsb	r3, r3, #7
 801528c:	60fb      	str	r3, [r7, #12]
 801528e:	e001      	b.n	8015294 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015290:	2300      	movs	r3, #0
 8015292:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015294:	68fb      	ldr	r3, [r7, #12]
	}
 8015296:	4618      	mov	r0, r3
 8015298:	3714      	adds	r7, #20
 801529a:	46bd      	mov	sp, r7
 801529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a0:	4770      	bx	lr

080152a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80152a2:	b580      	push	{r7, lr}
 80152a4:	b086      	sub	sp, #24
 80152a6:	af00      	add	r7, sp, #0
 80152a8:	60f8      	str	r0, [r7, #12]
 80152aa:	60b9      	str	r1, [r7, #8]
 80152ac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80152ae:	2300      	movs	r3, #0
 80152b0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152b6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d10d      	bne.n	80152dc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d14d      	bne.n	8015364 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	689b      	ldr	r3, [r3, #8]
 80152cc:	4618      	mov	r0, r3
 80152ce:	f000 ffc9 	bl	8016264 <xTaskPriorityDisinherit>
 80152d2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	2200      	movs	r2, #0
 80152d8:	609a      	str	r2, [r3, #8]
 80152da:	e043      	b.n	8015364 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d119      	bne.n	8015316 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	6858      	ldr	r0, [r3, #4]
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152ea:	461a      	mov	r2, r3
 80152ec:	68b9      	ldr	r1, [r7, #8]
 80152ee:	f011 f95b 	bl	80265a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	685a      	ldr	r2, [r3, #4]
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152fa:	441a      	add	r2, r3
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	685a      	ldr	r2, [r3, #4]
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	689b      	ldr	r3, [r3, #8]
 8015308:	429a      	cmp	r2, r3
 801530a:	d32b      	bcc.n	8015364 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	681a      	ldr	r2, [r3, #0]
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	605a      	str	r2, [r3, #4]
 8015314:	e026      	b.n	8015364 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	68d8      	ldr	r0, [r3, #12]
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801531e:	461a      	mov	r2, r3
 8015320:	68b9      	ldr	r1, [r7, #8]
 8015322:	f011 f941 	bl	80265a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	68da      	ldr	r2, [r3, #12]
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801532e:	425b      	negs	r3, r3
 8015330:	441a      	add	r2, r3
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	68da      	ldr	r2, [r3, #12]
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	429a      	cmp	r2, r3
 8015340:	d207      	bcs.n	8015352 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	689a      	ldr	r2, [r3, #8]
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801534a:	425b      	negs	r3, r3
 801534c:	441a      	add	r2, r3
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	2b02      	cmp	r3, #2
 8015356:	d105      	bne.n	8015364 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015358:	693b      	ldr	r3, [r7, #16]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d002      	beq.n	8015364 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801535e:	693b      	ldr	r3, [r7, #16]
 8015360:	3b01      	subs	r3, #1
 8015362:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015364:	693b      	ldr	r3, [r7, #16]
 8015366:	1c5a      	adds	r2, r3, #1
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801536c:	697b      	ldr	r3, [r7, #20]
}
 801536e:	4618      	mov	r0, r3
 8015370:	3718      	adds	r7, #24
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}

08015376 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015376:	b580      	push	{r7, lr}
 8015378:	b082      	sub	sp, #8
 801537a:	af00      	add	r7, sp, #0
 801537c:	6078      	str	r0, [r7, #4]
 801537e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015384:	2b00      	cmp	r3, #0
 8015386:	d018      	beq.n	80153ba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	68da      	ldr	r2, [r3, #12]
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015390:	441a      	add	r2, r3
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	68da      	ldr	r2, [r3, #12]
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	689b      	ldr	r3, [r3, #8]
 801539e:	429a      	cmp	r2, r3
 80153a0:	d303      	bcc.n	80153aa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	681a      	ldr	r2, [r3, #0]
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	68d9      	ldr	r1, [r3, #12]
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80153b2:	461a      	mov	r2, r3
 80153b4:	6838      	ldr	r0, [r7, #0]
 80153b6:	f011 f8f7 	bl	80265a8 <memcpy>
	}
}
 80153ba:	bf00      	nop
 80153bc:	3708      	adds	r7, #8
 80153be:	46bd      	mov	sp, r7
 80153c0:	bd80      	pop	{r7, pc}

080153c2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80153c2:	b580      	push	{r7, lr}
 80153c4:	b084      	sub	sp, #16
 80153c6:	af00      	add	r7, sp, #0
 80153c8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80153ca:	f001 fb13 	bl	80169f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80153d4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80153d6:	e011      	b.n	80153fc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d012      	beq.n	8015406 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	3324      	adds	r3, #36	; 0x24
 80153e4:	4618      	mov	r0, r3
 80153e6:	f000 fce9 	bl	8015dbc <xTaskRemoveFromEventList>
 80153ea:	4603      	mov	r3, r0
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d001      	beq.n	80153f4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80153f0:	f000 fdbe 	bl	8015f70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80153f4:	7bfb      	ldrb	r3, [r7, #15]
 80153f6:	3b01      	subs	r3, #1
 80153f8:	b2db      	uxtb	r3, r3
 80153fa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80153fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015400:	2b00      	cmp	r3, #0
 8015402:	dce9      	bgt.n	80153d8 <prvUnlockQueue+0x16>
 8015404:	e000      	b.n	8015408 <prvUnlockQueue+0x46>
					break;
 8015406:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	22ff      	movs	r2, #255	; 0xff
 801540c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015410:	f001 fb20 	bl	8016a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015414:	f001 faee 	bl	80169f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801541e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015420:	e011      	b.n	8015446 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	691b      	ldr	r3, [r3, #16]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d012      	beq.n	8015450 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	3310      	adds	r3, #16
 801542e:	4618      	mov	r0, r3
 8015430:	f000 fcc4 	bl	8015dbc <xTaskRemoveFromEventList>
 8015434:	4603      	mov	r3, r0
 8015436:	2b00      	cmp	r3, #0
 8015438:	d001      	beq.n	801543e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801543a:	f000 fd99 	bl	8015f70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801543e:	7bbb      	ldrb	r3, [r7, #14]
 8015440:	3b01      	subs	r3, #1
 8015442:	b2db      	uxtb	r3, r3
 8015444:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015446:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801544a:	2b00      	cmp	r3, #0
 801544c:	dce9      	bgt.n	8015422 <prvUnlockQueue+0x60>
 801544e:	e000      	b.n	8015452 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015450:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	22ff      	movs	r2, #255	; 0xff
 8015456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801545a:	f001 fafb 	bl	8016a54 <vPortExitCritical>
}
 801545e:	bf00      	nop
 8015460:	3710      	adds	r7, #16
 8015462:	46bd      	mov	sp, r7
 8015464:	bd80      	pop	{r7, pc}

08015466 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015466:	b580      	push	{r7, lr}
 8015468:	b084      	sub	sp, #16
 801546a:	af00      	add	r7, sp, #0
 801546c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801546e:	f001 fac1 	bl	80169f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015476:	2b00      	cmp	r3, #0
 8015478:	d102      	bne.n	8015480 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801547a:	2301      	movs	r3, #1
 801547c:	60fb      	str	r3, [r7, #12]
 801547e:	e001      	b.n	8015484 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015480:	2300      	movs	r3, #0
 8015482:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015484:	f001 fae6 	bl	8016a54 <vPortExitCritical>

	return xReturn;
 8015488:	68fb      	ldr	r3, [r7, #12]
}
 801548a:	4618      	mov	r0, r3
 801548c:	3710      	adds	r7, #16
 801548e:	46bd      	mov	sp, r7
 8015490:	bd80      	pop	{r7, pc}

08015492 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015492:	b580      	push	{r7, lr}
 8015494:	b084      	sub	sp, #16
 8015496:	af00      	add	r7, sp, #0
 8015498:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801549a:	f001 faab 	bl	80169f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80154a6:	429a      	cmp	r2, r3
 80154a8:	d102      	bne.n	80154b0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80154aa:	2301      	movs	r3, #1
 80154ac:	60fb      	str	r3, [r7, #12]
 80154ae:	e001      	b.n	80154b4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80154b0:	2300      	movs	r3, #0
 80154b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80154b4:	f001 face 	bl	8016a54 <vPortExitCritical>

	return xReturn;
 80154b8:	68fb      	ldr	r3, [r7, #12]
}
 80154ba:	4618      	mov	r0, r3
 80154bc:	3710      	adds	r7, #16
 80154be:	46bd      	mov	sp, r7
 80154c0:	bd80      	pop	{r7, pc}
	...

080154c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80154c4:	b480      	push	{r7}
 80154c6:	b085      	sub	sp, #20
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80154cc:	2300      	movs	r3, #0
 80154ce:	60fb      	str	r3, [r7, #12]
 80154d0:	e016      	b.n	8015500 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80154d2:	4a10      	ldr	r2, [pc, #64]	; (8015514 <vQueueUnregisterQueue+0x50>)
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	00db      	lsls	r3, r3, #3
 80154d8:	4413      	add	r3, r2
 80154da:	685b      	ldr	r3, [r3, #4]
 80154dc:	687a      	ldr	r2, [r7, #4]
 80154de:	429a      	cmp	r2, r3
 80154e0:	d10b      	bne.n	80154fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80154e2:	4a0c      	ldr	r2, [pc, #48]	; (8015514 <vQueueUnregisterQueue+0x50>)
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	2100      	movs	r1, #0
 80154e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80154ec:	4a09      	ldr	r2, [pc, #36]	; (8015514 <vQueueUnregisterQueue+0x50>)
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	00db      	lsls	r3, r3, #3
 80154f2:	4413      	add	r3, r2
 80154f4:	2200      	movs	r2, #0
 80154f6:	605a      	str	r2, [r3, #4]
				break;
 80154f8:	e006      	b.n	8015508 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	3301      	adds	r3, #1
 80154fe:	60fb      	str	r3, [r7, #12]
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	2b07      	cmp	r3, #7
 8015504:	d9e5      	bls.n	80154d2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8015506:	bf00      	nop
 8015508:	bf00      	nop
 801550a:	3714      	adds	r7, #20
 801550c:	46bd      	mov	sp, r7
 801550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015512:	4770      	bx	lr
 8015514:	20012b94 	.word	0x20012b94

08015518 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015518:	b580      	push	{r7, lr}
 801551a:	b08e      	sub	sp, #56	; 0x38
 801551c:	af04      	add	r7, sp, #16
 801551e:	60f8      	str	r0, [r7, #12]
 8015520:	60b9      	str	r1, [r7, #8]
 8015522:	607a      	str	r2, [r7, #4]
 8015524:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015528:	2b00      	cmp	r3, #0
 801552a:	d10a      	bne.n	8015542 <xTaskCreateStatic+0x2a>
	__asm volatile
 801552c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015530:	f383 8811 	msr	BASEPRI, r3
 8015534:	f3bf 8f6f 	isb	sy
 8015538:	f3bf 8f4f 	dsb	sy
 801553c:	623b      	str	r3, [r7, #32]
}
 801553e:	bf00      	nop
 8015540:	e7fe      	b.n	8015540 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8015542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015544:	2b00      	cmp	r3, #0
 8015546:	d10a      	bne.n	801555e <xTaskCreateStatic+0x46>
	__asm volatile
 8015548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801554c:	f383 8811 	msr	BASEPRI, r3
 8015550:	f3bf 8f6f 	isb	sy
 8015554:	f3bf 8f4f 	dsb	sy
 8015558:	61fb      	str	r3, [r7, #28]
}
 801555a:	bf00      	nop
 801555c:	e7fe      	b.n	801555c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801555e:	23b4      	movs	r3, #180	; 0xb4
 8015560:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015562:	693b      	ldr	r3, [r7, #16]
 8015564:	2bb4      	cmp	r3, #180	; 0xb4
 8015566:	d00a      	beq.n	801557e <xTaskCreateStatic+0x66>
	__asm volatile
 8015568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801556c:	f383 8811 	msr	BASEPRI, r3
 8015570:	f3bf 8f6f 	isb	sy
 8015574:	f3bf 8f4f 	dsb	sy
 8015578:	61bb      	str	r3, [r7, #24]
}
 801557a:	bf00      	nop
 801557c:	e7fe      	b.n	801557c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801557e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015582:	2b00      	cmp	r3, #0
 8015584:	d01e      	beq.n	80155c4 <xTaskCreateStatic+0xac>
 8015586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015588:	2b00      	cmp	r3, #0
 801558a:	d01b      	beq.n	80155c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801558e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015594:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015598:	2202      	movs	r2, #2
 801559a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801559e:	2300      	movs	r3, #0
 80155a0:	9303      	str	r3, [sp, #12]
 80155a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155a4:	9302      	str	r3, [sp, #8]
 80155a6:	f107 0314 	add.w	r3, r7, #20
 80155aa:	9301      	str	r3, [sp, #4]
 80155ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155ae:	9300      	str	r3, [sp, #0]
 80155b0:	683b      	ldr	r3, [r7, #0]
 80155b2:	687a      	ldr	r2, [r7, #4]
 80155b4:	68b9      	ldr	r1, [r7, #8]
 80155b6:	68f8      	ldr	r0, [r7, #12]
 80155b8:	f000 f850 	bl	801565c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80155bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155be:	f000 f8eb 	bl	8015798 <prvAddNewTaskToReadyList>
 80155c2:	e001      	b.n	80155c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80155c4:	2300      	movs	r3, #0
 80155c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80155c8:	697b      	ldr	r3, [r7, #20]
	}
 80155ca:	4618      	mov	r0, r3
 80155cc:	3728      	adds	r7, #40	; 0x28
 80155ce:	46bd      	mov	sp, r7
 80155d0:	bd80      	pop	{r7, pc}

080155d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80155d2:	b580      	push	{r7, lr}
 80155d4:	b08c      	sub	sp, #48	; 0x30
 80155d6:	af04      	add	r7, sp, #16
 80155d8:	60f8      	str	r0, [r7, #12]
 80155da:	60b9      	str	r1, [r7, #8]
 80155dc:	603b      	str	r3, [r7, #0]
 80155de:	4613      	mov	r3, r2
 80155e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80155e2:	88fb      	ldrh	r3, [r7, #6]
 80155e4:	009b      	lsls	r3, r3, #2
 80155e6:	4618      	mov	r0, r3
 80155e8:	f001 fb26 	bl	8016c38 <pvPortMalloc>
 80155ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d00e      	beq.n	8015612 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80155f4:	20b4      	movs	r0, #180	; 0xb4
 80155f6:	f001 fb1f 	bl	8016c38 <pvPortMalloc>
 80155fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80155fc:	69fb      	ldr	r3, [r7, #28]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d003      	beq.n	801560a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015602:	69fb      	ldr	r3, [r7, #28]
 8015604:	697a      	ldr	r2, [r7, #20]
 8015606:	631a      	str	r2, [r3, #48]	; 0x30
 8015608:	e005      	b.n	8015616 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801560a:	6978      	ldr	r0, [r7, #20]
 801560c:	f001 fbe0 	bl	8016dd0 <vPortFree>
 8015610:	e001      	b.n	8015616 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015612:	2300      	movs	r3, #0
 8015614:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015616:	69fb      	ldr	r3, [r7, #28]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d017      	beq.n	801564c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801561c:	69fb      	ldr	r3, [r7, #28]
 801561e:	2200      	movs	r2, #0
 8015620:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015624:	88fa      	ldrh	r2, [r7, #6]
 8015626:	2300      	movs	r3, #0
 8015628:	9303      	str	r3, [sp, #12]
 801562a:	69fb      	ldr	r3, [r7, #28]
 801562c:	9302      	str	r3, [sp, #8]
 801562e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015630:	9301      	str	r3, [sp, #4]
 8015632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015634:	9300      	str	r3, [sp, #0]
 8015636:	683b      	ldr	r3, [r7, #0]
 8015638:	68b9      	ldr	r1, [r7, #8]
 801563a:	68f8      	ldr	r0, [r7, #12]
 801563c:	f000 f80e 	bl	801565c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015640:	69f8      	ldr	r0, [r7, #28]
 8015642:	f000 f8a9 	bl	8015798 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015646:	2301      	movs	r3, #1
 8015648:	61bb      	str	r3, [r7, #24]
 801564a:	e002      	b.n	8015652 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801564c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015650:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015652:	69bb      	ldr	r3, [r7, #24]
	}
 8015654:	4618      	mov	r0, r3
 8015656:	3720      	adds	r7, #32
 8015658:	46bd      	mov	sp, r7
 801565a:	bd80      	pop	{r7, pc}

0801565c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801565c:	b580      	push	{r7, lr}
 801565e:	b088      	sub	sp, #32
 8015660:	af00      	add	r7, sp, #0
 8015662:	60f8      	str	r0, [r7, #12]
 8015664:	60b9      	str	r1, [r7, #8]
 8015666:	607a      	str	r2, [r7, #4]
 8015668:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801566c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015674:	3b01      	subs	r3, #1
 8015676:	009b      	lsls	r3, r3, #2
 8015678:	4413      	add	r3, r2
 801567a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801567c:	69bb      	ldr	r3, [r7, #24]
 801567e:	f023 0307 	bic.w	r3, r3, #7
 8015682:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015684:	69bb      	ldr	r3, [r7, #24]
 8015686:	f003 0307 	and.w	r3, r3, #7
 801568a:	2b00      	cmp	r3, #0
 801568c:	d00a      	beq.n	80156a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 801568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015692:	f383 8811 	msr	BASEPRI, r3
 8015696:	f3bf 8f6f 	isb	sy
 801569a:	f3bf 8f4f 	dsb	sy
 801569e:	617b      	str	r3, [r7, #20]
}
 80156a0:	bf00      	nop
 80156a2:	e7fe      	b.n	80156a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80156a4:	68bb      	ldr	r3, [r7, #8]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d01f      	beq.n	80156ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80156aa:	2300      	movs	r3, #0
 80156ac:	61fb      	str	r3, [r7, #28]
 80156ae:	e012      	b.n	80156d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80156b0:	68ba      	ldr	r2, [r7, #8]
 80156b2:	69fb      	ldr	r3, [r7, #28]
 80156b4:	4413      	add	r3, r2
 80156b6:	7819      	ldrb	r1, [r3, #0]
 80156b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156ba:	69fb      	ldr	r3, [r7, #28]
 80156bc:	4413      	add	r3, r2
 80156be:	3334      	adds	r3, #52	; 0x34
 80156c0:	460a      	mov	r2, r1
 80156c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80156c4:	68ba      	ldr	r2, [r7, #8]
 80156c6:	69fb      	ldr	r3, [r7, #28]
 80156c8:	4413      	add	r3, r2
 80156ca:	781b      	ldrb	r3, [r3, #0]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d006      	beq.n	80156de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80156d0:	69fb      	ldr	r3, [r7, #28]
 80156d2:	3301      	adds	r3, #1
 80156d4:	61fb      	str	r3, [r7, #28]
 80156d6:	69fb      	ldr	r3, [r7, #28]
 80156d8:	2b0f      	cmp	r3, #15
 80156da:	d9e9      	bls.n	80156b0 <prvInitialiseNewTask+0x54>
 80156dc:	e000      	b.n	80156e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80156de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80156e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156e2:	2200      	movs	r2, #0
 80156e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80156e8:	e003      	b.n	80156f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80156ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156ec:	2200      	movs	r2, #0
 80156ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80156f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156f4:	2b06      	cmp	r3, #6
 80156f6:	d901      	bls.n	80156fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80156f8:	2306      	movs	r3, #6
 80156fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80156fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015700:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015706:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801570a:	2200      	movs	r2, #0
 801570c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015710:	3304      	adds	r3, #4
 8015712:	4618      	mov	r0, r3
 8015714:	f7fe fede 	bl	80144d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801571a:	3318      	adds	r3, #24
 801571c:	4618      	mov	r0, r3
 801571e:	f7fe fed9 	bl	80144d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015726:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801572a:	f1c3 0207 	rsb	r2, r3, #7
 801572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015730:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015736:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801573a:	2200      	movs	r2, #0
 801573c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015742:	2200      	movs	r2, #0
 8015744:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801574a:	334c      	adds	r3, #76	; 0x4c
 801574c:	2260      	movs	r2, #96	; 0x60
 801574e:	2100      	movs	r1, #0
 8015750:	4618      	mov	r0, r3
 8015752:	f010 ff51 	bl	80265f8 <memset>
 8015756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015758:	4a0c      	ldr	r2, [pc, #48]	; (801578c <prvInitialiseNewTask+0x130>)
 801575a:	651a      	str	r2, [r3, #80]	; 0x50
 801575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801575e:	4a0c      	ldr	r2, [pc, #48]	; (8015790 <prvInitialiseNewTask+0x134>)
 8015760:	655a      	str	r2, [r3, #84]	; 0x54
 8015762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015764:	4a0b      	ldr	r2, [pc, #44]	; (8015794 <prvInitialiseNewTask+0x138>)
 8015766:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015768:	683a      	ldr	r2, [r7, #0]
 801576a:	68f9      	ldr	r1, [r7, #12]
 801576c:	69b8      	ldr	r0, [r7, #24]
 801576e:	f001 f811 	bl	8016794 <pxPortInitialiseStack>
 8015772:	4602      	mov	r2, r0
 8015774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015776:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801577a:	2b00      	cmp	r3, #0
 801577c:	d002      	beq.n	8015784 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015782:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015784:	bf00      	nop
 8015786:	3720      	adds	r7, #32
 8015788:	46bd      	mov	sp, r7
 801578a:	bd80      	pop	{r7, pc}
 801578c:	08060a24 	.word	0x08060a24
 8015790:	08060a44 	.word	0x08060a44
 8015794:	08060a04 	.word	0x08060a04

08015798 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b082      	sub	sp, #8
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80157a0:	f001 f928 	bl	80169f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80157a4:	4b2a      	ldr	r3, [pc, #168]	; (8015850 <prvAddNewTaskToReadyList+0xb8>)
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	3301      	adds	r3, #1
 80157aa:	4a29      	ldr	r2, [pc, #164]	; (8015850 <prvAddNewTaskToReadyList+0xb8>)
 80157ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80157ae:	4b29      	ldr	r3, [pc, #164]	; (8015854 <prvAddNewTaskToReadyList+0xbc>)
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d109      	bne.n	80157ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80157b6:	4a27      	ldr	r2, [pc, #156]	; (8015854 <prvAddNewTaskToReadyList+0xbc>)
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80157bc:	4b24      	ldr	r3, [pc, #144]	; (8015850 <prvAddNewTaskToReadyList+0xb8>)
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	2b01      	cmp	r3, #1
 80157c2:	d110      	bne.n	80157e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80157c4:	f000 fbf8 	bl	8015fb8 <prvInitialiseTaskLists>
 80157c8:	e00d      	b.n	80157e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80157ca:	4b23      	ldr	r3, [pc, #140]	; (8015858 <prvAddNewTaskToReadyList+0xc0>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d109      	bne.n	80157e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80157d2:	4b20      	ldr	r3, [pc, #128]	; (8015854 <prvAddNewTaskToReadyList+0xbc>)
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157dc:	429a      	cmp	r2, r3
 80157de:	d802      	bhi.n	80157e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80157e0:	4a1c      	ldr	r2, [pc, #112]	; (8015854 <prvAddNewTaskToReadyList+0xbc>)
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80157e6:	4b1d      	ldr	r3, [pc, #116]	; (801585c <prvAddNewTaskToReadyList+0xc4>)
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	3301      	adds	r3, #1
 80157ec:	4a1b      	ldr	r2, [pc, #108]	; (801585c <prvAddNewTaskToReadyList+0xc4>)
 80157ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157f4:	2201      	movs	r2, #1
 80157f6:	409a      	lsls	r2, r3
 80157f8:	4b19      	ldr	r3, [pc, #100]	; (8015860 <prvAddNewTaskToReadyList+0xc8>)
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	4313      	orrs	r3, r2
 80157fe:	4a18      	ldr	r2, [pc, #96]	; (8015860 <prvAddNewTaskToReadyList+0xc8>)
 8015800:	6013      	str	r3, [r2, #0]
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015806:	4613      	mov	r3, r2
 8015808:	009b      	lsls	r3, r3, #2
 801580a:	4413      	add	r3, r2
 801580c:	009b      	lsls	r3, r3, #2
 801580e:	4a15      	ldr	r2, [pc, #84]	; (8015864 <prvAddNewTaskToReadyList+0xcc>)
 8015810:	441a      	add	r2, r3
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	3304      	adds	r3, #4
 8015816:	4619      	mov	r1, r3
 8015818:	4610      	mov	r0, r2
 801581a:	f7fe fe68 	bl	80144ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801581e:	f001 f919 	bl	8016a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015822:	4b0d      	ldr	r3, [pc, #52]	; (8015858 <prvAddNewTaskToReadyList+0xc0>)
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d00e      	beq.n	8015848 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801582a:	4b0a      	ldr	r3, [pc, #40]	; (8015854 <prvAddNewTaskToReadyList+0xbc>)
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015834:	429a      	cmp	r2, r3
 8015836:	d207      	bcs.n	8015848 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015838:	4b0b      	ldr	r3, [pc, #44]	; (8015868 <prvAddNewTaskToReadyList+0xd0>)
 801583a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801583e:	601a      	str	r2, [r3, #0]
 8015840:	f3bf 8f4f 	dsb	sy
 8015844:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015848:	bf00      	nop
 801584a:	3708      	adds	r7, #8
 801584c:	46bd      	mov	sp, r7
 801584e:	bd80      	pop	{r7, pc}
 8015850:	200018c0 	.word	0x200018c0
 8015854:	200017c0 	.word	0x200017c0
 8015858:	200018cc 	.word	0x200018cc
 801585c:	200018dc 	.word	0x200018dc
 8015860:	200018c8 	.word	0x200018c8
 8015864:	200017c4 	.word	0x200017c4
 8015868:	e000ed04 	.word	0xe000ed04

0801586c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801586c:	b580      	push	{r7, lr}
 801586e:	b084      	sub	sp, #16
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015874:	2300      	movs	r3, #0
 8015876:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d017      	beq.n	80158ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801587e:	4b13      	ldr	r3, [pc, #76]	; (80158cc <vTaskDelay+0x60>)
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d00a      	beq.n	801589c <vTaskDelay+0x30>
	__asm volatile
 8015886:	f04f 0350 	mov.w	r3, #80	; 0x50
 801588a:	f383 8811 	msr	BASEPRI, r3
 801588e:	f3bf 8f6f 	isb	sy
 8015892:	f3bf 8f4f 	dsb	sy
 8015896:	60bb      	str	r3, [r7, #8]
}
 8015898:	bf00      	nop
 801589a:	e7fe      	b.n	801589a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801589c:	f000 f884 	bl	80159a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80158a0:	2100      	movs	r1, #0
 80158a2:	6878      	ldr	r0, [r7, #4]
 80158a4:	f000 ff10 	bl	80166c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80158a8:	f000 f88c 	bl	80159c4 <xTaskResumeAll>
 80158ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d107      	bne.n	80158c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80158b4:	4b06      	ldr	r3, [pc, #24]	; (80158d0 <vTaskDelay+0x64>)
 80158b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80158ba:	601a      	str	r2, [r3, #0]
 80158bc:	f3bf 8f4f 	dsb	sy
 80158c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80158c4:	bf00      	nop
 80158c6:	3710      	adds	r7, #16
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}
 80158cc:	200018e8 	.word	0x200018e8
 80158d0:	e000ed04 	.word	0xe000ed04

080158d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b08a      	sub	sp, #40	; 0x28
 80158d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80158da:	2300      	movs	r3, #0
 80158dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80158de:	2300      	movs	r3, #0
 80158e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80158e2:	463a      	mov	r2, r7
 80158e4:	1d39      	adds	r1, r7, #4
 80158e6:	f107 0308 	add.w	r3, r7, #8
 80158ea:	4618      	mov	r0, r3
 80158ec:	f7ee f984 	bl	8003bf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80158f0:	6839      	ldr	r1, [r7, #0]
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	68ba      	ldr	r2, [r7, #8]
 80158f6:	9202      	str	r2, [sp, #8]
 80158f8:	9301      	str	r3, [sp, #4]
 80158fa:	2300      	movs	r3, #0
 80158fc:	9300      	str	r3, [sp, #0]
 80158fe:	2300      	movs	r3, #0
 8015900:	460a      	mov	r2, r1
 8015902:	4921      	ldr	r1, [pc, #132]	; (8015988 <vTaskStartScheduler+0xb4>)
 8015904:	4821      	ldr	r0, [pc, #132]	; (801598c <vTaskStartScheduler+0xb8>)
 8015906:	f7ff fe07 	bl	8015518 <xTaskCreateStatic>
 801590a:	4603      	mov	r3, r0
 801590c:	4a20      	ldr	r2, [pc, #128]	; (8015990 <vTaskStartScheduler+0xbc>)
 801590e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015910:	4b1f      	ldr	r3, [pc, #124]	; (8015990 <vTaskStartScheduler+0xbc>)
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d002      	beq.n	801591e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015918:	2301      	movs	r3, #1
 801591a:	617b      	str	r3, [r7, #20]
 801591c:	e001      	b.n	8015922 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801591e:	2300      	movs	r3, #0
 8015920:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015922:	697b      	ldr	r3, [r7, #20]
 8015924:	2b01      	cmp	r3, #1
 8015926:	d11b      	bne.n	8015960 <vTaskStartScheduler+0x8c>
	__asm volatile
 8015928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801592c:	f383 8811 	msr	BASEPRI, r3
 8015930:	f3bf 8f6f 	isb	sy
 8015934:	f3bf 8f4f 	dsb	sy
 8015938:	613b      	str	r3, [r7, #16]
}
 801593a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801593c:	4b15      	ldr	r3, [pc, #84]	; (8015994 <vTaskStartScheduler+0xc0>)
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	334c      	adds	r3, #76	; 0x4c
 8015942:	4a15      	ldr	r2, [pc, #84]	; (8015998 <vTaskStartScheduler+0xc4>)
 8015944:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015946:	4b15      	ldr	r3, [pc, #84]	; (801599c <vTaskStartScheduler+0xc8>)
 8015948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801594c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801594e:	4b14      	ldr	r3, [pc, #80]	; (80159a0 <vTaskStartScheduler+0xcc>)
 8015950:	2201      	movs	r2, #1
 8015952:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015954:	4b13      	ldr	r3, [pc, #76]	; (80159a4 <vTaskStartScheduler+0xd0>)
 8015956:	2200      	movs	r2, #0
 8015958:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801595a:	f000 ffa9 	bl	80168b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801595e:	e00e      	b.n	801597e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015960:	697b      	ldr	r3, [r7, #20]
 8015962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015966:	d10a      	bne.n	801597e <vTaskStartScheduler+0xaa>
	__asm volatile
 8015968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801596c:	f383 8811 	msr	BASEPRI, r3
 8015970:	f3bf 8f6f 	isb	sy
 8015974:	f3bf 8f4f 	dsb	sy
 8015978:	60fb      	str	r3, [r7, #12]
}
 801597a:	bf00      	nop
 801597c:	e7fe      	b.n	801597c <vTaskStartScheduler+0xa8>
}
 801597e:	bf00      	nop
 8015980:	3718      	adds	r7, #24
 8015982:	46bd      	mov	sp, r7
 8015984:	bd80      	pop	{r7, pc}
 8015986:	bf00      	nop
 8015988:	0802ca7c 	.word	0x0802ca7c
 801598c:	08015f89 	.word	0x08015f89
 8015990:	200018e4 	.word	0x200018e4
 8015994:	200017c0 	.word	0x200017c0
 8015998:	20000064 	.word	0x20000064
 801599c:	200018e0 	.word	0x200018e0
 80159a0:	200018cc 	.word	0x200018cc
 80159a4:	200018c4 	.word	0x200018c4

080159a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80159a8:	b480      	push	{r7}
 80159aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80159ac:	4b04      	ldr	r3, [pc, #16]	; (80159c0 <vTaskSuspendAll+0x18>)
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	3301      	adds	r3, #1
 80159b2:	4a03      	ldr	r2, [pc, #12]	; (80159c0 <vTaskSuspendAll+0x18>)
 80159b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80159b6:	bf00      	nop
 80159b8:	46bd      	mov	sp, r7
 80159ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159be:	4770      	bx	lr
 80159c0:	200018e8 	.word	0x200018e8

080159c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b084      	sub	sp, #16
 80159c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80159ca:	2300      	movs	r3, #0
 80159cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80159ce:	2300      	movs	r3, #0
 80159d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80159d2:	4b41      	ldr	r3, [pc, #260]	; (8015ad8 <xTaskResumeAll+0x114>)
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d10a      	bne.n	80159f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80159da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159de:	f383 8811 	msr	BASEPRI, r3
 80159e2:	f3bf 8f6f 	isb	sy
 80159e6:	f3bf 8f4f 	dsb	sy
 80159ea:	603b      	str	r3, [r7, #0]
}
 80159ec:	bf00      	nop
 80159ee:	e7fe      	b.n	80159ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80159f0:	f001 f800 	bl	80169f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80159f4:	4b38      	ldr	r3, [pc, #224]	; (8015ad8 <xTaskResumeAll+0x114>)
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	3b01      	subs	r3, #1
 80159fa:	4a37      	ldr	r2, [pc, #220]	; (8015ad8 <xTaskResumeAll+0x114>)
 80159fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80159fe:	4b36      	ldr	r3, [pc, #216]	; (8015ad8 <xTaskResumeAll+0x114>)
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d161      	bne.n	8015aca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015a06:	4b35      	ldr	r3, [pc, #212]	; (8015adc <xTaskResumeAll+0x118>)
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d05d      	beq.n	8015aca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015a0e:	e02e      	b.n	8015a6e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a10:	4b33      	ldr	r3, [pc, #204]	; (8015ae0 <xTaskResumeAll+0x11c>)
 8015a12:	68db      	ldr	r3, [r3, #12]
 8015a14:	68db      	ldr	r3, [r3, #12]
 8015a16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	3318      	adds	r3, #24
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	f7fe fdc3 	bl	80145a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	3304      	adds	r3, #4
 8015a26:	4618      	mov	r0, r3
 8015a28:	f7fe fdbe 	bl	80145a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a30:	2201      	movs	r2, #1
 8015a32:	409a      	lsls	r2, r3
 8015a34:	4b2b      	ldr	r3, [pc, #172]	; (8015ae4 <xTaskResumeAll+0x120>)
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	4313      	orrs	r3, r2
 8015a3a:	4a2a      	ldr	r2, [pc, #168]	; (8015ae4 <xTaskResumeAll+0x120>)
 8015a3c:	6013      	str	r3, [r2, #0]
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a42:	4613      	mov	r3, r2
 8015a44:	009b      	lsls	r3, r3, #2
 8015a46:	4413      	add	r3, r2
 8015a48:	009b      	lsls	r3, r3, #2
 8015a4a:	4a27      	ldr	r2, [pc, #156]	; (8015ae8 <xTaskResumeAll+0x124>)
 8015a4c:	441a      	add	r2, r3
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	3304      	adds	r3, #4
 8015a52:	4619      	mov	r1, r3
 8015a54:	4610      	mov	r0, r2
 8015a56:	f7fe fd4a 	bl	80144ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a5e:	4b23      	ldr	r3, [pc, #140]	; (8015aec <xTaskResumeAll+0x128>)
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a64:	429a      	cmp	r2, r3
 8015a66:	d302      	bcc.n	8015a6e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8015a68:	4b21      	ldr	r3, [pc, #132]	; (8015af0 <xTaskResumeAll+0x12c>)
 8015a6a:	2201      	movs	r2, #1
 8015a6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015a6e:	4b1c      	ldr	r3, [pc, #112]	; (8015ae0 <xTaskResumeAll+0x11c>)
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d1cc      	bne.n	8015a10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d001      	beq.n	8015a80 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015a7c:	f000 fb3e 	bl	80160fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015a80:	4b1c      	ldr	r3, [pc, #112]	; (8015af4 <xTaskResumeAll+0x130>)
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d010      	beq.n	8015aae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015a8c:	f000 f858 	bl	8015b40 <xTaskIncrementTick>
 8015a90:	4603      	mov	r3, r0
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d002      	beq.n	8015a9c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8015a96:	4b16      	ldr	r3, [pc, #88]	; (8015af0 <xTaskResumeAll+0x12c>)
 8015a98:	2201      	movs	r2, #1
 8015a9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	3b01      	subs	r3, #1
 8015aa0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d1f1      	bne.n	8015a8c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8015aa8:	4b12      	ldr	r3, [pc, #72]	; (8015af4 <xTaskResumeAll+0x130>)
 8015aaa:	2200      	movs	r2, #0
 8015aac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015aae:	4b10      	ldr	r3, [pc, #64]	; (8015af0 <xTaskResumeAll+0x12c>)
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d009      	beq.n	8015aca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015aba:	4b0f      	ldr	r3, [pc, #60]	; (8015af8 <xTaskResumeAll+0x134>)
 8015abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ac0:	601a      	str	r2, [r3, #0]
 8015ac2:	f3bf 8f4f 	dsb	sy
 8015ac6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015aca:	f000 ffc3 	bl	8016a54 <vPortExitCritical>

	return xAlreadyYielded;
 8015ace:	68bb      	ldr	r3, [r7, #8]
}
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	3710      	adds	r7, #16
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	bd80      	pop	{r7, pc}
 8015ad8:	200018e8 	.word	0x200018e8
 8015adc:	200018c0 	.word	0x200018c0
 8015ae0:	20001880 	.word	0x20001880
 8015ae4:	200018c8 	.word	0x200018c8
 8015ae8:	200017c4 	.word	0x200017c4
 8015aec:	200017c0 	.word	0x200017c0
 8015af0:	200018d4 	.word	0x200018d4
 8015af4:	200018d0 	.word	0x200018d0
 8015af8:	e000ed04 	.word	0xe000ed04

08015afc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015afc:	b480      	push	{r7}
 8015afe:	b083      	sub	sp, #12
 8015b00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015b02:	4b05      	ldr	r3, [pc, #20]	; (8015b18 <xTaskGetTickCount+0x1c>)
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015b08:	687b      	ldr	r3, [r7, #4]
}
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	370c      	adds	r7, #12
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b14:	4770      	bx	lr
 8015b16:	bf00      	nop
 8015b18:	200018c4 	.word	0x200018c4

08015b1c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b082      	sub	sp, #8
 8015b20:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015b22:	f001 f849 	bl	8016bb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8015b26:	2300      	movs	r3, #0
 8015b28:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8015b2a:	4b04      	ldr	r3, [pc, #16]	; (8015b3c <xTaskGetTickCountFromISR+0x20>)
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015b30:	683b      	ldr	r3, [r7, #0]
}
 8015b32:	4618      	mov	r0, r3
 8015b34:	3708      	adds	r7, #8
 8015b36:	46bd      	mov	sp, r7
 8015b38:	bd80      	pop	{r7, pc}
 8015b3a:	bf00      	nop
 8015b3c:	200018c4 	.word	0x200018c4

08015b40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b086      	sub	sp, #24
 8015b44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015b46:	2300      	movs	r3, #0
 8015b48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015b4a:	4b4e      	ldr	r3, [pc, #312]	; (8015c84 <xTaskIncrementTick+0x144>)
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	f040 808e 	bne.w	8015c70 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015b54:	4b4c      	ldr	r3, [pc, #304]	; (8015c88 <xTaskIncrementTick+0x148>)
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	3301      	adds	r3, #1
 8015b5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015b5c:	4a4a      	ldr	r2, [pc, #296]	; (8015c88 <xTaskIncrementTick+0x148>)
 8015b5e:	693b      	ldr	r3, [r7, #16]
 8015b60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015b62:	693b      	ldr	r3, [r7, #16]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d120      	bne.n	8015baa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8015b68:	4b48      	ldr	r3, [pc, #288]	; (8015c8c <xTaskIncrementTick+0x14c>)
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d00a      	beq.n	8015b88 <xTaskIncrementTick+0x48>
	__asm volatile
 8015b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b76:	f383 8811 	msr	BASEPRI, r3
 8015b7a:	f3bf 8f6f 	isb	sy
 8015b7e:	f3bf 8f4f 	dsb	sy
 8015b82:	603b      	str	r3, [r7, #0]
}
 8015b84:	bf00      	nop
 8015b86:	e7fe      	b.n	8015b86 <xTaskIncrementTick+0x46>
 8015b88:	4b40      	ldr	r3, [pc, #256]	; (8015c8c <xTaskIncrementTick+0x14c>)
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	60fb      	str	r3, [r7, #12]
 8015b8e:	4b40      	ldr	r3, [pc, #256]	; (8015c90 <xTaskIncrementTick+0x150>)
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	4a3e      	ldr	r2, [pc, #248]	; (8015c8c <xTaskIncrementTick+0x14c>)
 8015b94:	6013      	str	r3, [r2, #0]
 8015b96:	4a3e      	ldr	r2, [pc, #248]	; (8015c90 <xTaskIncrementTick+0x150>)
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	6013      	str	r3, [r2, #0]
 8015b9c:	4b3d      	ldr	r3, [pc, #244]	; (8015c94 <xTaskIncrementTick+0x154>)
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	3301      	adds	r3, #1
 8015ba2:	4a3c      	ldr	r2, [pc, #240]	; (8015c94 <xTaskIncrementTick+0x154>)
 8015ba4:	6013      	str	r3, [r2, #0]
 8015ba6:	f000 faa9 	bl	80160fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015baa:	4b3b      	ldr	r3, [pc, #236]	; (8015c98 <xTaskIncrementTick+0x158>)
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	693a      	ldr	r2, [r7, #16]
 8015bb0:	429a      	cmp	r2, r3
 8015bb2:	d348      	bcc.n	8015c46 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015bb4:	4b35      	ldr	r3, [pc, #212]	; (8015c8c <xTaskIncrementTick+0x14c>)
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d104      	bne.n	8015bc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015bbe:	4b36      	ldr	r3, [pc, #216]	; (8015c98 <xTaskIncrementTick+0x158>)
 8015bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015bc4:	601a      	str	r2, [r3, #0]
					break;
 8015bc6:	e03e      	b.n	8015c46 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015bc8:	4b30      	ldr	r3, [pc, #192]	; (8015c8c <xTaskIncrementTick+0x14c>)
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	68db      	ldr	r3, [r3, #12]
 8015bce:	68db      	ldr	r3, [r3, #12]
 8015bd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015bd2:	68bb      	ldr	r3, [r7, #8]
 8015bd4:	685b      	ldr	r3, [r3, #4]
 8015bd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015bd8:	693a      	ldr	r2, [r7, #16]
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	429a      	cmp	r2, r3
 8015bde:	d203      	bcs.n	8015be8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015be0:	4a2d      	ldr	r2, [pc, #180]	; (8015c98 <xTaskIncrementTick+0x158>)
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015be6:	e02e      	b.n	8015c46 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015be8:	68bb      	ldr	r3, [r7, #8]
 8015bea:	3304      	adds	r3, #4
 8015bec:	4618      	mov	r0, r3
 8015bee:	f7fe fcdb 	bl	80145a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015bf2:	68bb      	ldr	r3, [r7, #8]
 8015bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d004      	beq.n	8015c04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015bfa:	68bb      	ldr	r3, [r7, #8]
 8015bfc:	3318      	adds	r3, #24
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f7fe fcd2 	bl	80145a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015c04:	68bb      	ldr	r3, [r7, #8]
 8015c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c08:	2201      	movs	r2, #1
 8015c0a:	409a      	lsls	r2, r3
 8015c0c:	4b23      	ldr	r3, [pc, #140]	; (8015c9c <xTaskIncrementTick+0x15c>)
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	4313      	orrs	r3, r2
 8015c12:	4a22      	ldr	r2, [pc, #136]	; (8015c9c <xTaskIncrementTick+0x15c>)
 8015c14:	6013      	str	r3, [r2, #0]
 8015c16:	68bb      	ldr	r3, [r7, #8]
 8015c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c1a:	4613      	mov	r3, r2
 8015c1c:	009b      	lsls	r3, r3, #2
 8015c1e:	4413      	add	r3, r2
 8015c20:	009b      	lsls	r3, r3, #2
 8015c22:	4a1f      	ldr	r2, [pc, #124]	; (8015ca0 <xTaskIncrementTick+0x160>)
 8015c24:	441a      	add	r2, r3
 8015c26:	68bb      	ldr	r3, [r7, #8]
 8015c28:	3304      	adds	r3, #4
 8015c2a:	4619      	mov	r1, r3
 8015c2c:	4610      	mov	r0, r2
 8015c2e:	f7fe fc5e 	bl	80144ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015c32:	68bb      	ldr	r3, [r7, #8]
 8015c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c36:	4b1b      	ldr	r3, [pc, #108]	; (8015ca4 <xTaskIncrementTick+0x164>)
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c3c:	429a      	cmp	r2, r3
 8015c3e:	d3b9      	bcc.n	8015bb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8015c40:	2301      	movs	r3, #1
 8015c42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015c44:	e7b6      	b.n	8015bb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015c46:	4b17      	ldr	r3, [pc, #92]	; (8015ca4 <xTaskIncrementTick+0x164>)
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c4c:	4914      	ldr	r1, [pc, #80]	; (8015ca0 <xTaskIncrementTick+0x160>)
 8015c4e:	4613      	mov	r3, r2
 8015c50:	009b      	lsls	r3, r3, #2
 8015c52:	4413      	add	r3, r2
 8015c54:	009b      	lsls	r3, r3, #2
 8015c56:	440b      	add	r3, r1
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	2b01      	cmp	r3, #1
 8015c5c:	d901      	bls.n	8015c62 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8015c5e:	2301      	movs	r3, #1
 8015c60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015c62:	4b11      	ldr	r3, [pc, #68]	; (8015ca8 <xTaskIncrementTick+0x168>)
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d007      	beq.n	8015c7a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8015c6a:	2301      	movs	r3, #1
 8015c6c:	617b      	str	r3, [r7, #20]
 8015c6e:	e004      	b.n	8015c7a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015c70:	4b0e      	ldr	r3, [pc, #56]	; (8015cac <xTaskIncrementTick+0x16c>)
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	3301      	adds	r3, #1
 8015c76:	4a0d      	ldr	r2, [pc, #52]	; (8015cac <xTaskIncrementTick+0x16c>)
 8015c78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8015c7a:	697b      	ldr	r3, [r7, #20]
}
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	3718      	adds	r7, #24
 8015c80:	46bd      	mov	sp, r7
 8015c82:	bd80      	pop	{r7, pc}
 8015c84:	200018e8 	.word	0x200018e8
 8015c88:	200018c4 	.word	0x200018c4
 8015c8c:	20001878 	.word	0x20001878
 8015c90:	2000187c 	.word	0x2000187c
 8015c94:	200018d8 	.word	0x200018d8
 8015c98:	200018e0 	.word	0x200018e0
 8015c9c:	200018c8 	.word	0x200018c8
 8015ca0:	200017c4 	.word	0x200017c4
 8015ca4:	200017c0 	.word	0x200017c0
 8015ca8:	200018d4 	.word	0x200018d4
 8015cac:	200018d0 	.word	0x200018d0

08015cb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015cb0:	b480      	push	{r7}
 8015cb2:	b087      	sub	sp, #28
 8015cb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015cb6:	4b29      	ldr	r3, [pc, #164]	; (8015d5c <vTaskSwitchContext+0xac>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d003      	beq.n	8015cc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015cbe:	4b28      	ldr	r3, [pc, #160]	; (8015d60 <vTaskSwitchContext+0xb0>)
 8015cc0:	2201      	movs	r2, #1
 8015cc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015cc4:	e044      	b.n	8015d50 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8015cc6:	4b26      	ldr	r3, [pc, #152]	; (8015d60 <vTaskSwitchContext+0xb0>)
 8015cc8:	2200      	movs	r2, #0
 8015cca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015ccc:	4b25      	ldr	r3, [pc, #148]	; (8015d64 <vTaskSwitchContext+0xb4>)
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	fab3 f383 	clz	r3, r3
 8015cd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015cda:	7afb      	ldrb	r3, [r7, #11]
 8015cdc:	f1c3 031f 	rsb	r3, r3, #31
 8015ce0:	617b      	str	r3, [r7, #20]
 8015ce2:	4921      	ldr	r1, [pc, #132]	; (8015d68 <vTaskSwitchContext+0xb8>)
 8015ce4:	697a      	ldr	r2, [r7, #20]
 8015ce6:	4613      	mov	r3, r2
 8015ce8:	009b      	lsls	r3, r3, #2
 8015cea:	4413      	add	r3, r2
 8015cec:	009b      	lsls	r3, r3, #2
 8015cee:	440b      	add	r3, r1
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d10a      	bne.n	8015d0c <vTaskSwitchContext+0x5c>
	__asm volatile
 8015cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cfa:	f383 8811 	msr	BASEPRI, r3
 8015cfe:	f3bf 8f6f 	isb	sy
 8015d02:	f3bf 8f4f 	dsb	sy
 8015d06:	607b      	str	r3, [r7, #4]
}
 8015d08:	bf00      	nop
 8015d0a:	e7fe      	b.n	8015d0a <vTaskSwitchContext+0x5a>
 8015d0c:	697a      	ldr	r2, [r7, #20]
 8015d0e:	4613      	mov	r3, r2
 8015d10:	009b      	lsls	r3, r3, #2
 8015d12:	4413      	add	r3, r2
 8015d14:	009b      	lsls	r3, r3, #2
 8015d16:	4a14      	ldr	r2, [pc, #80]	; (8015d68 <vTaskSwitchContext+0xb8>)
 8015d18:	4413      	add	r3, r2
 8015d1a:	613b      	str	r3, [r7, #16]
 8015d1c:	693b      	ldr	r3, [r7, #16]
 8015d1e:	685b      	ldr	r3, [r3, #4]
 8015d20:	685a      	ldr	r2, [r3, #4]
 8015d22:	693b      	ldr	r3, [r7, #16]
 8015d24:	605a      	str	r2, [r3, #4]
 8015d26:	693b      	ldr	r3, [r7, #16]
 8015d28:	685a      	ldr	r2, [r3, #4]
 8015d2a:	693b      	ldr	r3, [r7, #16]
 8015d2c:	3308      	adds	r3, #8
 8015d2e:	429a      	cmp	r2, r3
 8015d30:	d104      	bne.n	8015d3c <vTaskSwitchContext+0x8c>
 8015d32:	693b      	ldr	r3, [r7, #16]
 8015d34:	685b      	ldr	r3, [r3, #4]
 8015d36:	685a      	ldr	r2, [r3, #4]
 8015d38:	693b      	ldr	r3, [r7, #16]
 8015d3a:	605a      	str	r2, [r3, #4]
 8015d3c:	693b      	ldr	r3, [r7, #16]
 8015d3e:	685b      	ldr	r3, [r3, #4]
 8015d40:	68db      	ldr	r3, [r3, #12]
 8015d42:	4a0a      	ldr	r2, [pc, #40]	; (8015d6c <vTaskSwitchContext+0xbc>)
 8015d44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015d46:	4b09      	ldr	r3, [pc, #36]	; (8015d6c <vTaskSwitchContext+0xbc>)
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	334c      	adds	r3, #76	; 0x4c
 8015d4c:	4a08      	ldr	r2, [pc, #32]	; (8015d70 <vTaskSwitchContext+0xc0>)
 8015d4e:	6013      	str	r3, [r2, #0]
}
 8015d50:	bf00      	nop
 8015d52:	371c      	adds	r7, #28
 8015d54:	46bd      	mov	sp, r7
 8015d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d5a:	4770      	bx	lr
 8015d5c:	200018e8 	.word	0x200018e8
 8015d60:	200018d4 	.word	0x200018d4
 8015d64:	200018c8 	.word	0x200018c8
 8015d68:	200017c4 	.word	0x200017c4
 8015d6c:	200017c0 	.word	0x200017c0
 8015d70:	20000064 	.word	0x20000064

08015d74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b084      	sub	sp, #16
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
 8015d7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d10a      	bne.n	8015d9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8015d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d88:	f383 8811 	msr	BASEPRI, r3
 8015d8c:	f3bf 8f6f 	isb	sy
 8015d90:	f3bf 8f4f 	dsb	sy
 8015d94:	60fb      	str	r3, [r7, #12]
}
 8015d96:	bf00      	nop
 8015d98:	e7fe      	b.n	8015d98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015d9a:	4b07      	ldr	r3, [pc, #28]	; (8015db8 <vTaskPlaceOnEventList+0x44>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	3318      	adds	r3, #24
 8015da0:	4619      	mov	r1, r3
 8015da2:	6878      	ldr	r0, [r7, #4]
 8015da4:	f7fe fbc7 	bl	8014536 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015da8:	2101      	movs	r1, #1
 8015daa:	6838      	ldr	r0, [r7, #0]
 8015dac:	f000 fc8c 	bl	80166c8 <prvAddCurrentTaskToDelayedList>
}
 8015db0:	bf00      	nop
 8015db2:	3710      	adds	r7, #16
 8015db4:	46bd      	mov	sp, r7
 8015db6:	bd80      	pop	{r7, pc}
 8015db8:	200017c0 	.word	0x200017c0

08015dbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b086      	sub	sp, #24
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	68db      	ldr	r3, [r3, #12]
 8015dc8:	68db      	ldr	r3, [r3, #12]
 8015dca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015dcc:	693b      	ldr	r3, [r7, #16]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d10a      	bne.n	8015de8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8015dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dd6:	f383 8811 	msr	BASEPRI, r3
 8015dda:	f3bf 8f6f 	isb	sy
 8015dde:	f3bf 8f4f 	dsb	sy
 8015de2:	60fb      	str	r3, [r7, #12]
}
 8015de4:	bf00      	nop
 8015de6:	e7fe      	b.n	8015de6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015de8:	693b      	ldr	r3, [r7, #16]
 8015dea:	3318      	adds	r3, #24
 8015dec:	4618      	mov	r0, r3
 8015dee:	f7fe fbdb 	bl	80145a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015df2:	4b1d      	ldr	r3, [pc, #116]	; (8015e68 <xTaskRemoveFromEventList+0xac>)
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d11c      	bne.n	8015e34 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015dfa:	693b      	ldr	r3, [r7, #16]
 8015dfc:	3304      	adds	r3, #4
 8015dfe:	4618      	mov	r0, r3
 8015e00:	f7fe fbd2 	bl	80145a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015e04:	693b      	ldr	r3, [r7, #16]
 8015e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e08:	2201      	movs	r2, #1
 8015e0a:	409a      	lsls	r2, r3
 8015e0c:	4b17      	ldr	r3, [pc, #92]	; (8015e6c <xTaskRemoveFromEventList+0xb0>)
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	4313      	orrs	r3, r2
 8015e12:	4a16      	ldr	r2, [pc, #88]	; (8015e6c <xTaskRemoveFromEventList+0xb0>)
 8015e14:	6013      	str	r3, [r2, #0]
 8015e16:	693b      	ldr	r3, [r7, #16]
 8015e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e1a:	4613      	mov	r3, r2
 8015e1c:	009b      	lsls	r3, r3, #2
 8015e1e:	4413      	add	r3, r2
 8015e20:	009b      	lsls	r3, r3, #2
 8015e22:	4a13      	ldr	r2, [pc, #76]	; (8015e70 <xTaskRemoveFromEventList+0xb4>)
 8015e24:	441a      	add	r2, r3
 8015e26:	693b      	ldr	r3, [r7, #16]
 8015e28:	3304      	adds	r3, #4
 8015e2a:	4619      	mov	r1, r3
 8015e2c:	4610      	mov	r0, r2
 8015e2e:	f7fe fb5e 	bl	80144ee <vListInsertEnd>
 8015e32:	e005      	b.n	8015e40 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015e34:	693b      	ldr	r3, [r7, #16]
 8015e36:	3318      	adds	r3, #24
 8015e38:	4619      	mov	r1, r3
 8015e3a:	480e      	ldr	r0, [pc, #56]	; (8015e74 <xTaskRemoveFromEventList+0xb8>)
 8015e3c:	f7fe fb57 	bl	80144ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015e40:	693b      	ldr	r3, [r7, #16]
 8015e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e44:	4b0c      	ldr	r3, [pc, #48]	; (8015e78 <xTaskRemoveFromEventList+0xbc>)
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e4a:	429a      	cmp	r2, r3
 8015e4c:	d905      	bls.n	8015e5a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015e4e:	2301      	movs	r3, #1
 8015e50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015e52:	4b0a      	ldr	r3, [pc, #40]	; (8015e7c <xTaskRemoveFromEventList+0xc0>)
 8015e54:	2201      	movs	r2, #1
 8015e56:	601a      	str	r2, [r3, #0]
 8015e58:	e001      	b.n	8015e5e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015e5e:	697b      	ldr	r3, [r7, #20]
}
 8015e60:	4618      	mov	r0, r3
 8015e62:	3718      	adds	r7, #24
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}
 8015e68:	200018e8 	.word	0x200018e8
 8015e6c:	200018c8 	.word	0x200018c8
 8015e70:	200017c4 	.word	0x200017c4
 8015e74:	20001880 	.word	0x20001880
 8015e78:	200017c0 	.word	0x200017c0
 8015e7c:	200018d4 	.word	0x200018d4

08015e80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015e80:	b480      	push	{r7}
 8015e82:	b083      	sub	sp, #12
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015e88:	4b06      	ldr	r3, [pc, #24]	; (8015ea4 <vTaskInternalSetTimeOutState+0x24>)
 8015e8a:	681a      	ldr	r2, [r3, #0]
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015e90:	4b05      	ldr	r3, [pc, #20]	; (8015ea8 <vTaskInternalSetTimeOutState+0x28>)
 8015e92:	681a      	ldr	r2, [r3, #0]
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	605a      	str	r2, [r3, #4]
}
 8015e98:	bf00      	nop
 8015e9a:	370c      	adds	r7, #12
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea2:	4770      	bx	lr
 8015ea4:	200018d8 	.word	0x200018d8
 8015ea8:	200018c4 	.word	0x200018c4

08015eac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b088      	sub	sp, #32
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
 8015eb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d10a      	bne.n	8015ed2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8015ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ec0:	f383 8811 	msr	BASEPRI, r3
 8015ec4:	f3bf 8f6f 	isb	sy
 8015ec8:	f3bf 8f4f 	dsb	sy
 8015ecc:	613b      	str	r3, [r7, #16]
}
 8015ece:	bf00      	nop
 8015ed0:	e7fe      	b.n	8015ed0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015ed2:	683b      	ldr	r3, [r7, #0]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d10a      	bne.n	8015eee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8015ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015edc:	f383 8811 	msr	BASEPRI, r3
 8015ee0:	f3bf 8f6f 	isb	sy
 8015ee4:	f3bf 8f4f 	dsb	sy
 8015ee8:	60fb      	str	r3, [r7, #12]
}
 8015eea:	bf00      	nop
 8015eec:	e7fe      	b.n	8015eec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8015eee:	f000 fd81 	bl	80169f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015ef2:	4b1d      	ldr	r3, [pc, #116]	; (8015f68 <xTaskCheckForTimeOut+0xbc>)
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	685b      	ldr	r3, [r3, #4]
 8015efc:	69ba      	ldr	r2, [r7, #24]
 8015efe:	1ad3      	subs	r3, r2, r3
 8015f00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015f02:	683b      	ldr	r3, [r7, #0]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015f0a:	d102      	bne.n	8015f12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	61fb      	str	r3, [r7, #28]
 8015f10:	e023      	b.n	8015f5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	681a      	ldr	r2, [r3, #0]
 8015f16:	4b15      	ldr	r3, [pc, #84]	; (8015f6c <xTaskCheckForTimeOut+0xc0>)
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	429a      	cmp	r2, r3
 8015f1c:	d007      	beq.n	8015f2e <xTaskCheckForTimeOut+0x82>
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	685b      	ldr	r3, [r3, #4]
 8015f22:	69ba      	ldr	r2, [r7, #24]
 8015f24:	429a      	cmp	r2, r3
 8015f26:	d302      	bcc.n	8015f2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015f28:	2301      	movs	r3, #1
 8015f2a:	61fb      	str	r3, [r7, #28]
 8015f2c:	e015      	b.n	8015f5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	697a      	ldr	r2, [r7, #20]
 8015f34:	429a      	cmp	r2, r3
 8015f36:	d20b      	bcs.n	8015f50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015f38:	683b      	ldr	r3, [r7, #0]
 8015f3a:	681a      	ldr	r2, [r3, #0]
 8015f3c:	697b      	ldr	r3, [r7, #20]
 8015f3e:	1ad2      	subs	r2, r2, r3
 8015f40:	683b      	ldr	r3, [r7, #0]
 8015f42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015f44:	6878      	ldr	r0, [r7, #4]
 8015f46:	f7ff ff9b 	bl	8015e80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	61fb      	str	r3, [r7, #28]
 8015f4e:	e004      	b.n	8015f5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015f50:	683b      	ldr	r3, [r7, #0]
 8015f52:	2200      	movs	r2, #0
 8015f54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015f56:	2301      	movs	r3, #1
 8015f58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015f5a:	f000 fd7b 	bl	8016a54 <vPortExitCritical>

	return xReturn;
 8015f5e:	69fb      	ldr	r3, [r7, #28]
}
 8015f60:	4618      	mov	r0, r3
 8015f62:	3720      	adds	r7, #32
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}
 8015f68:	200018c4 	.word	0x200018c4
 8015f6c:	200018d8 	.word	0x200018d8

08015f70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015f70:	b480      	push	{r7}
 8015f72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015f74:	4b03      	ldr	r3, [pc, #12]	; (8015f84 <vTaskMissedYield+0x14>)
 8015f76:	2201      	movs	r2, #1
 8015f78:	601a      	str	r2, [r3, #0]
}
 8015f7a:	bf00      	nop
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f82:	4770      	bx	lr
 8015f84:	200018d4 	.word	0x200018d4

08015f88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b082      	sub	sp, #8
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015f90:	f000 f852 	bl	8016038 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015f94:	4b06      	ldr	r3, [pc, #24]	; (8015fb0 <prvIdleTask+0x28>)
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	2b01      	cmp	r3, #1
 8015f9a:	d9f9      	bls.n	8015f90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015f9c:	4b05      	ldr	r3, [pc, #20]	; (8015fb4 <prvIdleTask+0x2c>)
 8015f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015fa2:	601a      	str	r2, [r3, #0]
 8015fa4:	f3bf 8f4f 	dsb	sy
 8015fa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015fac:	e7f0      	b.n	8015f90 <prvIdleTask+0x8>
 8015fae:	bf00      	nop
 8015fb0:	200017c4 	.word	0x200017c4
 8015fb4:	e000ed04 	.word	0xe000ed04

08015fb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	b082      	sub	sp, #8
 8015fbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	607b      	str	r3, [r7, #4]
 8015fc2:	e00c      	b.n	8015fde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015fc4:	687a      	ldr	r2, [r7, #4]
 8015fc6:	4613      	mov	r3, r2
 8015fc8:	009b      	lsls	r3, r3, #2
 8015fca:	4413      	add	r3, r2
 8015fcc:	009b      	lsls	r3, r3, #2
 8015fce:	4a12      	ldr	r2, [pc, #72]	; (8016018 <prvInitialiseTaskLists+0x60>)
 8015fd0:	4413      	add	r3, r2
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f7fe fa5e 	bl	8014494 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	3301      	adds	r3, #1
 8015fdc:	607b      	str	r3, [r7, #4]
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	2b06      	cmp	r3, #6
 8015fe2:	d9ef      	bls.n	8015fc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015fe4:	480d      	ldr	r0, [pc, #52]	; (801601c <prvInitialiseTaskLists+0x64>)
 8015fe6:	f7fe fa55 	bl	8014494 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015fea:	480d      	ldr	r0, [pc, #52]	; (8016020 <prvInitialiseTaskLists+0x68>)
 8015fec:	f7fe fa52 	bl	8014494 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015ff0:	480c      	ldr	r0, [pc, #48]	; (8016024 <prvInitialiseTaskLists+0x6c>)
 8015ff2:	f7fe fa4f 	bl	8014494 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015ff6:	480c      	ldr	r0, [pc, #48]	; (8016028 <prvInitialiseTaskLists+0x70>)
 8015ff8:	f7fe fa4c 	bl	8014494 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015ffc:	480b      	ldr	r0, [pc, #44]	; (801602c <prvInitialiseTaskLists+0x74>)
 8015ffe:	f7fe fa49 	bl	8014494 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016002:	4b0b      	ldr	r3, [pc, #44]	; (8016030 <prvInitialiseTaskLists+0x78>)
 8016004:	4a05      	ldr	r2, [pc, #20]	; (801601c <prvInitialiseTaskLists+0x64>)
 8016006:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016008:	4b0a      	ldr	r3, [pc, #40]	; (8016034 <prvInitialiseTaskLists+0x7c>)
 801600a:	4a05      	ldr	r2, [pc, #20]	; (8016020 <prvInitialiseTaskLists+0x68>)
 801600c:	601a      	str	r2, [r3, #0]
}
 801600e:	bf00      	nop
 8016010:	3708      	adds	r7, #8
 8016012:	46bd      	mov	sp, r7
 8016014:	bd80      	pop	{r7, pc}
 8016016:	bf00      	nop
 8016018:	200017c4 	.word	0x200017c4
 801601c:	20001850 	.word	0x20001850
 8016020:	20001864 	.word	0x20001864
 8016024:	20001880 	.word	0x20001880
 8016028:	20001894 	.word	0x20001894
 801602c:	200018ac 	.word	0x200018ac
 8016030:	20001878 	.word	0x20001878
 8016034:	2000187c 	.word	0x2000187c

08016038 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016038:	b580      	push	{r7, lr}
 801603a:	b082      	sub	sp, #8
 801603c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801603e:	e019      	b.n	8016074 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016040:	f000 fcd8 	bl	80169f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016044:	4b10      	ldr	r3, [pc, #64]	; (8016088 <prvCheckTasksWaitingTermination+0x50>)
 8016046:	68db      	ldr	r3, [r3, #12]
 8016048:	68db      	ldr	r3, [r3, #12]
 801604a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	3304      	adds	r3, #4
 8016050:	4618      	mov	r0, r3
 8016052:	f7fe faa9 	bl	80145a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016056:	4b0d      	ldr	r3, [pc, #52]	; (801608c <prvCheckTasksWaitingTermination+0x54>)
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	3b01      	subs	r3, #1
 801605c:	4a0b      	ldr	r2, [pc, #44]	; (801608c <prvCheckTasksWaitingTermination+0x54>)
 801605e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016060:	4b0b      	ldr	r3, [pc, #44]	; (8016090 <prvCheckTasksWaitingTermination+0x58>)
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	3b01      	subs	r3, #1
 8016066:	4a0a      	ldr	r2, [pc, #40]	; (8016090 <prvCheckTasksWaitingTermination+0x58>)
 8016068:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801606a:	f000 fcf3 	bl	8016a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801606e:	6878      	ldr	r0, [r7, #4]
 8016070:	f000 f810 	bl	8016094 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016074:	4b06      	ldr	r3, [pc, #24]	; (8016090 <prvCheckTasksWaitingTermination+0x58>)
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d1e1      	bne.n	8016040 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801607c:	bf00      	nop
 801607e:	bf00      	nop
 8016080:	3708      	adds	r7, #8
 8016082:	46bd      	mov	sp, r7
 8016084:	bd80      	pop	{r7, pc}
 8016086:	bf00      	nop
 8016088:	20001894 	.word	0x20001894
 801608c:	200018c0 	.word	0x200018c0
 8016090:	200018a8 	.word	0x200018a8

08016094 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016094:	b580      	push	{r7, lr}
 8016096:	b084      	sub	sp, #16
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	334c      	adds	r3, #76	; 0x4c
 80160a0:	4618      	mov	r0, r3
 80160a2:	f010 febd 	bl	8026e20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d108      	bne.n	80160c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160b4:	4618      	mov	r0, r3
 80160b6:	f000 fe8b 	bl	8016dd0 <vPortFree>
				vPortFree( pxTCB );
 80160ba:	6878      	ldr	r0, [r7, #4]
 80160bc:	f000 fe88 	bl	8016dd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80160c0:	e018      	b.n	80160f4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80160c8:	2b01      	cmp	r3, #1
 80160ca:	d103      	bne.n	80160d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80160cc:	6878      	ldr	r0, [r7, #4]
 80160ce:	f000 fe7f 	bl	8016dd0 <vPortFree>
	}
 80160d2:	e00f      	b.n	80160f4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80160da:	2b02      	cmp	r3, #2
 80160dc:	d00a      	beq.n	80160f4 <prvDeleteTCB+0x60>
	__asm volatile
 80160de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160e2:	f383 8811 	msr	BASEPRI, r3
 80160e6:	f3bf 8f6f 	isb	sy
 80160ea:	f3bf 8f4f 	dsb	sy
 80160ee:	60fb      	str	r3, [r7, #12]
}
 80160f0:	bf00      	nop
 80160f2:	e7fe      	b.n	80160f2 <prvDeleteTCB+0x5e>
	}
 80160f4:	bf00      	nop
 80160f6:	3710      	adds	r7, #16
 80160f8:	46bd      	mov	sp, r7
 80160fa:	bd80      	pop	{r7, pc}

080160fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80160fc:	b480      	push	{r7}
 80160fe:	b083      	sub	sp, #12
 8016100:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016102:	4b0c      	ldr	r3, [pc, #48]	; (8016134 <prvResetNextTaskUnblockTime+0x38>)
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d104      	bne.n	8016116 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801610c:	4b0a      	ldr	r3, [pc, #40]	; (8016138 <prvResetNextTaskUnblockTime+0x3c>)
 801610e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016112:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016114:	e008      	b.n	8016128 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016116:	4b07      	ldr	r3, [pc, #28]	; (8016134 <prvResetNextTaskUnblockTime+0x38>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	68db      	ldr	r3, [r3, #12]
 801611c:	68db      	ldr	r3, [r3, #12]
 801611e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	685b      	ldr	r3, [r3, #4]
 8016124:	4a04      	ldr	r2, [pc, #16]	; (8016138 <prvResetNextTaskUnblockTime+0x3c>)
 8016126:	6013      	str	r3, [r2, #0]
}
 8016128:	bf00      	nop
 801612a:	370c      	adds	r7, #12
 801612c:	46bd      	mov	sp, r7
 801612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016132:	4770      	bx	lr
 8016134:	20001878 	.word	0x20001878
 8016138:	200018e0 	.word	0x200018e0

0801613c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801613c:	b480      	push	{r7}
 801613e:	b083      	sub	sp, #12
 8016140:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016142:	4b0b      	ldr	r3, [pc, #44]	; (8016170 <xTaskGetSchedulerState+0x34>)
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d102      	bne.n	8016150 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801614a:	2301      	movs	r3, #1
 801614c:	607b      	str	r3, [r7, #4]
 801614e:	e008      	b.n	8016162 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016150:	4b08      	ldr	r3, [pc, #32]	; (8016174 <xTaskGetSchedulerState+0x38>)
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d102      	bne.n	801615e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016158:	2302      	movs	r3, #2
 801615a:	607b      	str	r3, [r7, #4]
 801615c:	e001      	b.n	8016162 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801615e:	2300      	movs	r3, #0
 8016160:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016162:	687b      	ldr	r3, [r7, #4]
	}
 8016164:	4618      	mov	r0, r3
 8016166:	370c      	adds	r7, #12
 8016168:	46bd      	mov	sp, r7
 801616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801616e:	4770      	bx	lr
 8016170:	200018cc 	.word	0x200018cc
 8016174:	200018e8 	.word	0x200018e8

08016178 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016178:	b580      	push	{r7, lr}
 801617a:	b084      	sub	sp, #16
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016184:	2300      	movs	r3, #0
 8016186:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d05e      	beq.n	801624c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801618e:	68bb      	ldr	r3, [r7, #8]
 8016190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016192:	4b31      	ldr	r3, [pc, #196]	; (8016258 <xTaskPriorityInherit+0xe0>)
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016198:	429a      	cmp	r2, r3
 801619a:	d24e      	bcs.n	801623a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801619c:	68bb      	ldr	r3, [r7, #8]
 801619e:	699b      	ldr	r3, [r3, #24]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	db06      	blt.n	80161b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80161a4:	4b2c      	ldr	r3, [pc, #176]	; (8016258 <xTaskPriorityInherit+0xe0>)
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161aa:	f1c3 0207 	rsb	r2, r3, #7
 80161ae:	68bb      	ldr	r3, [r7, #8]
 80161b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80161b2:	68bb      	ldr	r3, [r7, #8]
 80161b4:	6959      	ldr	r1, [r3, #20]
 80161b6:	68bb      	ldr	r3, [r7, #8]
 80161b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161ba:	4613      	mov	r3, r2
 80161bc:	009b      	lsls	r3, r3, #2
 80161be:	4413      	add	r3, r2
 80161c0:	009b      	lsls	r3, r3, #2
 80161c2:	4a26      	ldr	r2, [pc, #152]	; (801625c <xTaskPriorityInherit+0xe4>)
 80161c4:	4413      	add	r3, r2
 80161c6:	4299      	cmp	r1, r3
 80161c8:	d12f      	bne.n	801622a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80161ca:	68bb      	ldr	r3, [r7, #8]
 80161cc:	3304      	adds	r3, #4
 80161ce:	4618      	mov	r0, r3
 80161d0:	f7fe f9ea 	bl	80145a8 <uxListRemove>
 80161d4:	4603      	mov	r3, r0
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d10a      	bne.n	80161f0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80161da:	68bb      	ldr	r3, [r7, #8]
 80161dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161de:	2201      	movs	r2, #1
 80161e0:	fa02 f303 	lsl.w	r3, r2, r3
 80161e4:	43da      	mvns	r2, r3
 80161e6:	4b1e      	ldr	r3, [pc, #120]	; (8016260 <xTaskPriorityInherit+0xe8>)
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	4013      	ands	r3, r2
 80161ec:	4a1c      	ldr	r2, [pc, #112]	; (8016260 <xTaskPriorityInherit+0xe8>)
 80161ee:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80161f0:	4b19      	ldr	r3, [pc, #100]	; (8016258 <xTaskPriorityInherit+0xe0>)
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161f6:	68bb      	ldr	r3, [r7, #8]
 80161f8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80161fa:	68bb      	ldr	r3, [r7, #8]
 80161fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161fe:	2201      	movs	r2, #1
 8016200:	409a      	lsls	r2, r3
 8016202:	4b17      	ldr	r3, [pc, #92]	; (8016260 <xTaskPriorityInherit+0xe8>)
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	4313      	orrs	r3, r2
 8016208:	4a15      	ldr	r2, [pc, #84]	; (8016260 <xTaskPriorityInherit+0xe8>)
 801620a:	6013      	str	r3, [r2, #0]
 801620c:	68bb      	ldr	r3, [r7, #8]
 801620e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016210:	4613      	mov	r3, r2
 8016212:	009b      	lsls	r3, r3, #2
 8016214:	4413      	add	r3, r2
 8016216:	009b      	lsls	r3, r3, #2
 8016218:	4a10      	ldr	r2, [pc, #64]	; (801625c <xTaskPriorityInherit+0xe4>)
 801621a:	441a      	add	r2, r3
 801621c:	68bb      	ldr	r3, [r7, #8]
 801621e:	3304      	adds	r3, #4
 8016220:	4619      	mov	r1, r3
 8016222:	4610      	mov	r0, r2
 8016224:	f7fe f963 	bl	80144ee <vListInsertEnd>
 8016228:	e004      	b.n	8016234 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801622a:	4b0b      	ldr	r3, [pc, #44]	; (8016258 <xTaskPriorityInherit+0xe0>)
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016230:	68bb      	ldr	r3, [r7, #8]
 8016232:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016234:	2301      	movs	r3, #1
 8016236:	60fb      	str	r3, [r7, #12]
 8016238:	e008      	b.n	801624c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801623a:	68bb      	ldr	r3, [r7, #8]
 801623c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801623e:	4b06      	ldr	r3, [pc, #24]	; (8016258 <xTaskPriorityInherit+0xe0>)
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016244:	429a      	cmp	r2, r3
 8016246:	d201      	bcs.n	801624c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8016248:	2301      	movs	r3, #1
 801624a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801624c:	68fb      	ldr	r3, [r7, #12]
	}
 801624e:	4618      	mov	r0, r3
 8016250:	3710      	adds	r7, #16
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}
 8016256:	bf00      	nop
 8016258:	200017c0 	.word	0x200017c0
 801625c:	200017c4 	.word	0x200017c4
 8016260:	200018c8 	.word	0x200018c8

08016264 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016264:	b580      	push	{r7, lr}
 8016266:	b086      	sub	sp, #24
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016270:	2300      	movs	r3, #0
 8016272:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d06e      	beq.n	8016358 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801627a:	4b3a      	ldr	r3, [pc, #232]	; (8016364 <xTaskPriorityDisinherit+0x100>)
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	693a      	ldr	r2, [r7, #16]
 8016280:	429a      	cmp	r2, r3
 8016282:	d00a      	beq.n	801629a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8016284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016288:	f383 8811 	msr	BASEPRI, r3
 801628c:	f3bf 8f6f 	isb	sy
 8016290:	f3bf 8f4f 	dsb	sy
 8016294:	60fb      	str	r3, [r7, #12]
}
 8016296:	bf00      	nop
 8016298:	e7fe      	b.n	8016298 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801629a:	693b      	ldr	r3, [r7, #16]
 801629c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d10a      	bne.n	80162b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80162a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162a6:	f383 8811 	msr	BASEPRI, r3
 80162aa:	f3bf 8f6f 	isb	sy
 80162ae:	f3bf 8f4f 	dsb	sy
 80162b2:	60bb      	str	r3, [r7, #8]
}
 80162b4:	bf00      	nop
 80162b6:	e7fe      	b.n	80162b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80162b8:	693b      	ldr	r3, [r7, #16]
 80162ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80162bc:	1e5a      	subs	r2, r3, #1
 80162be:	693b      	ldr	r3, [r7, #16]
 80162c0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80162c2:	693b      	ldr	r3, [r7, #16]
 80162c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162c6:	693b      	ldr	r3, [r7, #16]
 80162c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80162ca:	429a      	cmp	r2, r3
 80162cc:	d044      	beq.n	8016358 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80162ce:	693b      	ldr	r3, [r7, #16]
 80162d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d140      	bne.n	8016358 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80162d6:	693b      	ldr	r3, [r7, #16]
 80162d8:	3304      	adds	r3, #4
 80162da:	4618      	mov	r0, r3
 80162dc:	f7fe f964 	bl	80145a8 <uxListRemove>
 80162e0:	4603      	mov	r3, r0
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d115      	bne.n	8016312 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80162e6:	693b      	ldr	r3, [r7, #16]
 80162e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162ea:	491f      	ldr	r1, [pc, #124]	; (8016368 <xTaskPriorityDisinherit+0x104>)
 80162ec:	4613      	mov	r3, r2
 80162ee:	009b      	lsls	r3, r3, #2
 80162f0:	4413      	add	r3, r2
 80162f2:	009b      	lsls	r3, r3, #2
 80162f4:	440b      	add	r3, r1
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d10a      	bne.n	8016312 <xTaskPriorityDisinherit+0xae>
 80162fc:	693b      	ldr	r3, [r7, #16]
 80162fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016300:	2201      	movs	r2, #1
 8016302:	fa02 f303 	lsl.w	r3, r2, r3
 8016306:	43da      	mvns	r2, r3
 8016308:	4b18      	ldr	r3, [pc, #96]	; (801636c <xTaskPriorityDisinherit+0x108>)
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	4013      	ands	r3, r2
 801630e:	4a17      	ldr	r2, [pc, #92]	; (801636c <xTaskPriorityDisinherit+0x108>)
 8016310:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016312:	693b      	ldr	r3, [r7, #16]
 8016314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016316:	693b      	ldr	r3, [r7, #16]
 8016318:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801631a:	693b      	ldr	r3, [r7, #16]
 801631c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801631e:	f1c3 0207 	rsb	r2, r3, #7
 8016322:	693b      	ldr	r3, [r7, #16]
 8016324:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016326:	693b      	ldr	r3, [r7, #16]
 8016328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801632a:	2201      	movs	r2, #1
 801632c:	409a      	lsls	r2, r3
 801632e:	4b0f      	ldr	r3, [pc, #60]	; (801636c <xTaskPriorityDisinherit+0x108>)
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	4313      	orrs	r3, r2
 8016334:	4a0d      	ldr	r2, [pc, #52]	; (801636c <xTaskPriorityDisinherit+0x108>)
 8016336:	6013      	str	r3, [r2, #0]
 8016338:	693b      	ldr	r3, [r7, #16]
 801633a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801633c:	4613      	mov	r3, r2
 801633e:	009b      	lsls	r3, r3, #2
 8016340:	4413      	add	r3, r2
 8016342:	009b      	lsls	r3, r3, #2
 8016344:	4a08      	ldr	r2, [pc, #32]	; (8016368 <xTaskPriorityDisinherit+0x104>)
 8016346:	441a      	add	r2, r3
 8016348:	693b      	ldr	r3, [r7, #16]
 801634a:	3304      	adds	r3, #4
 801634c:	4619      	mov	r1, r3
 801634e:	4610      	mov	r0, r2
 8016350:	f7fe f8cd 	bl	80144ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016354:	2301      	movs	r3, #1
 8016356:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016358:	697b      	ldr	r3, [r7, #20]
	}
 801635a:	4618      	mov	r0, r3
 801635c:	3718      	adds	r7, #24
 801635e:	46bd      	mov	sp, r7
 8016360:	bd80      	pop	{r7, pc}
 8016362:	bf00      	nop
 8016364:	200017c0 	.word	0x200017c0
 8016368:	200017c4 	.word	0x200017c4
 801636c:	200018c8 	.word	0x200018c8

08016370 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016370:	b580      	push	{r7, lr}
 8016372:	b088      	sub	sp, #32
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]
 8016378:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801637e:	2301      	movs	r3, #1
 8016380:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d077      	beq.n	8016478 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016388:	69bb      	ldr	r3, [r7, #24]
 801638a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801638c:	2b00      	cmp	r3, #0
 801638e:	d10a      	bne.n	80163a6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8016390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016394:	f383 8811 	msr	BASEPRI, r3
 8016398:	f3bf 8f6f 	isb	sy
 801639c:	f3bf 8f4f 	dsb	sy
 80163a0:	60fb      	str	r3, [r7, #12]
}
 80163a2:	bf00      	nop
 80163a4:	e7fe      	b.n	80163a4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80163a6:	69bb      	ldr	r3, [r7, #24]
 80163a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80163aa:	683a      	ldr	r2, [r7, #0]
 80163ac:	429a      	cmp	r2, r3
 80163ae:	d902      	bls.n	80163b6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80163b0:	683b      	ldr	r3, [r7, #0]
 80163b2:	61fb      	str	r3, [r7, #28]
 80163b4:	e002      	b.n	80163bc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80163b6:	69bb      	ldr	r3, [r7, #24]
 80163b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80163ba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80163bc:	69bb      	ldr	r3, [r7, #24]
 80163be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163c0:	69fa      	ldr	r2, [r7, #28]
 80163c2:	429a      	cmp	r2, r3
 80163c4:	d058      	beq.n	8016478 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80163c6:	69bb      	ldr	r3, [r7, #24]
 80163c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80163ca:	697a      	ldr	r2, [r7, #20]
 80163cc:	429a      	cmp	r2, r3
 80163ce:	d153      	bne.n	8016478 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80163d0:	4b2b      	ldr	r3, [pc, #172]	; (8016480 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	69ba      	ldr	r2, [r7, #24]
 80163d6:	429a      	cmp	r2, r3
 80163d8:	d10a      	bne.n	80163f0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80163da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163de:	f383 8811 	msr	BASEPRI, r3
 80163e2:	f3bf 8f6f 	isb	sy
 80163e6:	f3bf 8f4f 	dsb	sy
 80163ea:	60bb      	str	r3, [r7, #8]
}
 80163ec:	bf00      	nop
 80163ee:	e7fe      	b.n	80163ee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80163f0:	69bb      	ldr	r3, [r7, #24]
 80163f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80163f6:	69bb      	ldr	r3, [r7, #24]
 80163f8:	69fa      	ldr	r2, [r7, #28]
 80163fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80163fc:	69bb      	ldr	r3, [r7, #24]
 80163fe:	699b      	ldr	r3, [r3, #24]
 8016400:	2b00      	cmp	r3, #0
 8016402:	db04      	blt.n	801640e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016404:	69fb      	ldr	r3, [r7, #28]
 8016406:	f1c3 0207 	rsb	r2, r3, #7
 801640a:	69bb      	ldr	r3, [r7, #24]
 801640c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801640e:	69bb      	ldr	r3, [r7, #24]
 8016410:	6959      	ldr	r1, [r3, #20]
 8016412:	693a      	ldr	r2, [r7, #16]
 8016414:	4613      	mov	r3, r2
 8016416:	009b      	lsls	r3, r3, #2
 8016418:	4413      	add	r3, r2
 801641a:	009b      	lsls	r3, r3, #2
 801641c:	4a19      	ldr	r2, [pc, #100]	; (8016484 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801641e:	4413      	add	r3, r2
 8016420:	4299      	cmp	r1, r3
 8016422:	d129      	bne.n	8016478 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016424:	69bb      	ldr	r3, [r7, #24]
 8016426:	3304      	adds	r3, #4
 8016428:	4618      	mov	r0, r3
 801642a:	f7fe f8bd 	bl	80145a8 <uxListRemove>
 801642e:	4603      	mov	r3, r0
 8016430:	2b00      	cmp	r3, #0
 8016432:	d10a      	bne.n	801644a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8016434:	69bb      	ldr	r3, [r7, #24]
 8016436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016438:	2201      	movs	r2, #1
 801643a:	fa02 f303 	lsl.w	r3, r2, r3
 801643e:	43da      	mvns	r2, r3
 8016440:	4b11      	ldr	r3, [pc, #68]	; (8016488 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	4013      	ands	r3, r2
 8016446:	4a10      	ldr	r2, [pc, #64]	; (8016488 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016448:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801644a:	69bb      	ldr	r3, [r7, #24]
 801644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801644e:	2201      	movs	r2, #1
 8016450:	409a      	lsls	r2, r3
 8016452:	4b0d      	ldr	r3, [pc, #52]	; (8016488 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	4313      	orrs	r3, r2
 8016458:	4a0b      	ldr	r2, [pc, #44]	; (8016488 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801645a:	6013      	str	r3, [r2, #0]
 801645c:	69bb      	ldr	r3, [r7, #24]
 801645e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016460:	4613      	mov	r3, r2
 8016462:	009b      	lsls	r3, r3, #2
 8016464:	4413      	add	r3, r2
 8016466:	009b      	lsls	r3, r3, #2
 8016468:	4a06      	ldr	r2, [pc, #24]	; (8016484 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801646a:	441a      	add	r2, r3
 801646c:	69bb      	ldr	r3, [r7, #24]
 801646e:	3304      	adds	r3, #4
 8016470:	4619      	mov	r1, r3
 8016472:	4610      	mov	r0, r2
 8016474:	f7fe f83b 	bl	80144ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016478:	bf00      	nop
 801647a:	3720      	adds	r7, #32
 801647c:	46bd      	mov	sp, r7
 801647e:	bd80      	pop	{r7, pc}
 8016480:	200017c0 	.word	0x200017c0
 8016484:	200017c4 	.word	0x200017c4
 8016488:	200018c8 	.word	0x200018c8

0801648c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801648c:	b480      	push	{r7}
 801648e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016490:	4b07      	ldr	r3, [pc, #28]	; (80164b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d004      	beq.n	80164a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016498:	4b05      	ldr	r3, [pc, #20]	; (80164b0 <pvTaskIncrementMutexHeldCount+0x24>)
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801649e:	3201      	adds	r2, #1
 80164a0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80164a2:	4b03      	ldr	r3, [pc, #12]	; (80164b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80164a4:	681b      	ldr	r3, [r3, #0]
	}
 80164a6:	4618      	mov	r0, r3
 80164a8:	46bd      	mov	sp, r7
 80164aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ae:	4770      	bx	lr
 80164b0:	200017c0 	.word	0x200017c0

080164b4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b084      	sub	sp, #16
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	6078      	str	r0, [r7, #4]
 80164bc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80164be:	f000 fa99 	bl	80169f4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80164c2:	4b20      	ldr	r3, [pc, #128]	; (8016544 <ulTaskNotifyTake+0x90>)
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d113      	bne.n	80164f6 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80164ce:	4b1d      	ldr	r3, [pc, #116]	; (8016544 <ulTaskNotifyTake+0x90>)
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	2201      	movs	r2, #1
 80164d4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d00b      	beq.n	80164f6 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80164de:	2101      	movs	r1, #1
 80164e0:	6838      	ldr	r0, [r7, #0]
 80164e2:	f000 f8f1 	bl	80166c8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80164e6:	4b18      	ldr	r3, [pc, #96]	; (8016548 <ulTaskNotifyTake+0x94>)
 80164e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164ec:	601a      	str	r2, [r3, #0]
 80164ee:	f3bf 8f4f 	dsb	sy
 80164f2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80164f6:	f000 faad 	bl	8016a54 <vPortExitCritical>

		taskENTER_CRITICAL();
 80164fa:	f000 fa7b 	bl	80169f4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80164fe:	4b11      	ldr	r3, [pc, #68]	; (8016544 <ulTaskNotifyTake+0x90>)
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016506:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d00e      	beq.n	801652c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d005      	beq.n	8016520 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8016514:	4b0b      	ldr	r3, [pc, #44]	; (8016544 <ulTaskNotifyTake+0x90>)
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	2200      	movs	r2, #0
 801651a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 801651e:	e005      	b.n	801652c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8016520:	4b08      	ldr	r3, [pc, #32]	; (8016544 <ulTaskNotifyTake+0x90>)
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	68fa      	ldr	r2, [r7, #12]
 8016526:	3a01      	subs	r2, #1
 8016528:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801652c:	4b05      	ldr	r3, [pc, #20]	; (8016544 <ulTaskNotifyTake+0x90>)
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	2200      	movs	r2, #0
 8016532:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8016536:	f000 fa8d 	bl	8016a54 <vPortExitCritical>

		return ulReturn;
 801653a:	68fb      	ldr	r3, [r7, #12]
	}
 801653c:	4618      	mov	r0, r3
 801653e:	3710      	adds	r7, #16
 8016540:	46bd      	mov	sp, r7
 8016542:	bd80      	pop	{r7, pc}
 8016544:	200017c0 	.word	0x200017c0
 8016548:	e000ed04 	.word	0xe000ed04

0801654c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801654c:	b580      	push	{r7, lr}
 801654e:	b08a      	sub	sp, #40	; 0x28
 8016550:	af00      	add	r7, sp, #0
 8016552:	60f8      	str	r0, [r7, #12]
 8016554:	60b9      	str	r1, [r7, #8]
 8016556:	603b      	str	r3, [r7, #0]
 8016558:	4613      	mov	r3, r2
 801655a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801655c:	2301      	movs	r3, #1
 801655e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d10a      	bne.n	801657c <xTaskGenericNotify+0x30>
	__asm volatile
 8016566:	f04f 0350 	mov.w	r3, #80	; 0x50
 801656a:	f383 8811 	msr	BASEPRI, r3
 801656e:	f3bf 8f6f 	isb	sy
 8016572:	f3bf 8f4f 	dsb	sy
 8016576:	61bb      	str	r3, [r7, #24]
}
 8016578:	bf00      	nop
 801657a:	e7fe      	b.n	801657a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8016580:	f000 fa38 	bl	80169f4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8016584:	683b      	ldr	r3, [r7, #0]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d004      	beq.n	8016594 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801658a:	6a3b      	ldr	r3, [r7, #32]
 801658c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8016590:	683b      	ldr	r3, [r7, #0]
 8016592:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8016594:	6a3b      	ldr	r3, [r7, #32]
 8016596:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 801659a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801659c:	6a3b      	ldr	r3, [r7, #32]
 801659e:	2202      	movs	r2, #2
 80165a0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 80165a4:	79fb      	ldrb	r3, [r7, #7]
 80165a6:	2b04      	cmp	r3, #4
 80165a8:	d82d      	bhi.n	8016606 <xTaskGenericNotify+0xba>
 80165aa:	a201      	add	r2, pc, #4	; (adr r2, 80165b0 <xTaskGenericNotify+0x64>)
 80165ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165b0:	08016629 	.word	0x08016629
 80165b4:	080165c5 	.word	0x080165c5
 80165b8:	080165d7 	.word	0x080165d7
 80165bc:	080165e7 	.word	0x080165e7
 80165c0:	080165f1 	.word	0x080165f1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80165c4:	6a3b      	ldr	r3, [r7, #32]
 80165c6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80165ca:	68bb      	ldr	r3, [r7, #8]
 80165cc:	431a      	orrs	r2, r3
 80165ce:	6a3b      	ldr	r3, [r7, #32]
 80165d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80165d4:	e02b      	b.n	801662e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80165d6:	6a3b      	ldr	r3, [r7, #32]
 80165d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80165dc:	1c5a      	adds	r2, r3, #1
 80165de:	6a3b      	ldr	r3, [r7, #32]
 80165e0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80165e4:	e023      	b.n	801662e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80165e6:	6a3b      	ldr	r3, [r7, #32]
 80165e8:	68ba      	ldr	r2, [r7, #8]
 80165ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80165ee:	e01e      	b.n	801662e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80165f0:	7ffb      	ldrb	r3, [r7, #31]
 80165f2:	2b02      	cmp	r3, #2
 80165f4:	d004      	beq.n	8016600 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80165f6:	6a3b      	ldr	r3, [r7, #32]
 80165f8:	68ba      	ldr	r2, [r7, #8]
 80165fa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80165fe:	e016      	b.n	801662e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8016600:	2300      	movs	r3, #0
 8016602:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8016604:	e013      	b.n	801662e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8016606:	6a3b      	ldr	r3, [r7, #32]
 8016608:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801660c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016610:	d00c      	beq.n	801662c <xTaskGenericNotify+0xe0>
	__asm volatile
 8016612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016616:	f383 8811 	msr	BASEPRI, r3
 801661a:	f3bf 8f6f 	isb	sy
 801661e:	f3bf 8f4f 	dsb	sy
 8016622:	617b      	str	r3, [r7, #20]
}
 8016624:	bf00      	nop
 8016626:	e7fe      	b.n	8016626 <xTaskGenericNotify+0xda>
					break;
 8016628:	bf00      	nop
 801662a:	e000      	b.n	801662e <xTaskGenericNotify+0xe2>

					break;
 801662c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801662e:	7ffb      	ldrb	r3, [r7, #31]
 8016630:	2b01      	cmp	r3, #1
 8016632:	d139      	bne.n	80166a8 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016634:	6a3b      	ldr	r3, [r7, #32]
 8016636:	3304      	adds	r3, #4
 8016638:	4618      	mov	r0, r3
 801663a:	f7fd ffb5 	bl	80145a8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801663e:	6a3b      	ldr	r3, [r7, #32]
 8016640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016642:	2201      	movs	r2, #1
 8016644:	409a      	lsls	r2, r3
 8016646:	4b1c      	ldr	r3, [pc, #112]	; (80166b8 <xTaskGenericNotify+0x16c>)
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	4313      	orrs	r3, r2
 801664c:	4a1a      	ldr	r2, [pc, #104]	; (80166b8 <xTaskGenericNotify+0x16c>)
 801664e:	6013      	str	r3, [r2, #0]
 8016650:	6a3b      	ldr	r3, [r7, #32]
 8016652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016654:	4613      	mov	r3, r2
 8016656:	009b      	lsls	r3, r3, #2
 8016658:	4413      	add	r3, r2
 801665a:	009b      	lsls	r3, r3, #2
 801665c:	4a17      	ldr	r2, [pc, #92]	; (80166bc <xTaskGenericNotify+0x170>)
 801665e:	441a      	add	r2, r3
 8016660:	6a3b      	ldr	r3, [r7, #32]
 8016662:	3304      	adds	r3, #4
 8016664:	4619      	mov	r1, r3
 8016666:	4610      	mov	r0, r2
 8016668:	f7fd ff41 	bl	80144ee <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801666c:	6a3b      	ldr	r3, [r7, #32]
 801666e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016670:	2b00      	cmp	r3, #0
 8016672:	d00a      	beq.n	801668a <xTaskGenericNotify+0x13e>
	__asm volatile
 8016674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016678:	f383 8811 	msr	BASEPRI, r3
 801667c:	f3bf 8f6f 	isb	sy
 8016680:	f3bf 8f4f 	dsb	sy
 8016684:	613b      	str	r3, [r7, #16]
}
 8016686:	bf00      	nop
 8016688:	e7fe      	b.n	8016688 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801668a:	6a3b      	ldr	r3, [r7, #32]
 801668c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801668e:	4b0c      	ldr	r3, [pc, #48]	; (80166c0 <xTaskGenericNotify+0x174>)
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016694:	429a      	cmp	r2, r3
 8016696:	d907      	bls.n	80166a8 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8016698:	4b0a      	ldr	r3, [pc, #40]	; (80166c4 <xTaskGenericNotify+0x178>)
 801669a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801669e:	601a      	str	r2, [r3, #0]
 80166a0:	f3bf 8f4f 	dsb	sy
 80166a4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80166a8:	f000 f9d4 	bl	8016a54 <vPortExitCritical>

		return xReturn;
 80166ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80166ae:	4618      	mov	r0, r3
 80166b0:	3728      	adds	r7, #40	; 0x28
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd80      	pop	{r7, pc}
 80166b6:	bf00      	nop
 80166b8:	200018c8 	.word	0x200018c8
 80166bc:	200017c4 	.word	0x200017c4
 80166c0:	200017c0 	.word	0x200017c0
 80166c4:	e000ed04 	.word	0xe000ed04

080166c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b084      	sub	sp, #16
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
 80166d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80166d2:	4b29      	ldr	r3, [pc, #164]	; (8016778 <prvAddCurrentTaskToDelayedList+0xb0>)
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80166d8:	4b28      	ldr	r3, [pc, #160]	; (801677c <prvAddCurrentTaskToDelayedList+0xb4>)
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	3304      	adds	r3, #4
 80166de:	4618      	mov	r0, r3
 80166e0:	f7fd ff62 	bl	80145a8 <uxListRemove>
 80166e4:	4603      	mov	r3, r0
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d10b      	bne.n	8016702 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80166ea:	4b24      	ldr	r3, [pc, #144]	; (801677c <prvAddCurrentTaskToDelayedList+0xb4>)
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166f0:	2201      	movs	r2, #1
 80166f2:	fa02 f303 	lsl.w	r3, r2, r3
 80166f6:	43da      	mvns	r2, r3
 80166f8:	4b21      	ldr	r3, [pc, #132]	; (8016780 <prvAddCurrentTaskToDelayedList+0xb8>)
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	4013      	ands	r3, r2
 80166fe:	4a20      	ldr	r2, [pc, #128]	; (8016780 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016700:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016708:	d10a      	bne.n	8016720 <prvAddCurrentTaskToDelayedList+0x58>
 801670a:	683b      	ldr	r3, [r7, #0]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d007      	beq.n	8016720 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016710:	4b1a      	ldr	r3, [pc, #104]	; (801677c <prvAddCurrentTaskToDelayedList+0xb4>)
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	3304      	adds	r3, #4
 8016716:	4619      	mov	r1, r3
 8016718:	481a      	ldr	r0, [pc, #104]	; (8016784 <prvAddCurrentTaskToDelayedList+0xbc>)
 801671a:	f7fd fee8 	bl	80144ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801671e:	e026      	b.n	801676e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016720:	68fa      	ldr	r2, [r7, #12]
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	4413      	add	r3, r2
 8016726:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016728:	4b14      	ldr	r3, [pc, #80]	; (801677c <prvAddCurrentTaskToDelayedList+0xb4>)
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	68ba      	ldr	r2, [r7, #8]
 801672e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016730:	68ba      	ldr	r2, [r7, #8]
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	429a      	cmp	r2, r3
 8016736:	d209      	bcs.n	801674c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016738:	4b13      	ldr	r3, [pc, #76]	; (8016788 <prvAddCurrentTaskToDelayedList+0xc0>)
 801673a:	681a      	ldr	r2, [r3, #0]
 801673c:	4b0f      	ldr	r3, [pc, #60]	; (801677c <prvAddCurrentTaskToDelayedList+0xb4>)
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	3304      	adds	r3, #4
 8016742:	4619      	mov	r1, r3
 8016744:	4610      	mov	r0, r2
 8016746:	f7fd fef6 	bl	8014536 <vListInsert>
}
 801674a:	e010      	b.n	801676e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801674c:	4b0f      	ldr	r3, [pc, #60]	; (801678c <prvAddCurrentTaskToDelayedList+0xc4>)
 801674e:	681a      	ldr	r2, [r3, #0]
 8016750:	4b0a      	ldr	r3, [pc, #40]	; (801677c <prvAddCurrentTaskToDelayedList+0xb4>)
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	3304      	adds	r3, #4
 8016756:	4619      	mov	r1, r3
 8016758:	4610      	mov	r0, r2
 801675a:	f7fd feec 	bl	8014536 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801675e:	4b0c      	ldr	r3, [pc, #48]	; (8016790 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	68ba      	ldr	r2, [r7, #8]
 8016764:	429a      	cmp	r2, r3
 8016766:	d202      	bcs.n	801676e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016768:	4a09      	ldr	r2, [pc, #36]	; (8016790 <prvAddCurrentTaskToDelayedList+0xc8>)
 801676a:	68bb      	ldr	r3, [r7, #8]
 801676c:	6013      	str	r3, [r2, #0]
}
 801676e:	bf00      	nop
 8016770:	3710      	adds	r7, #16
 8016772:	46bd      	mov	sp, r7
 8016774:	bd80      	pop	{r7, pc}
 8016776:	bf00      	nop
 8016778:	200018c4 	.word	0x200018c4
 801677c:	200017c0 	.word	0x200017c0
 8016780:	200018c8 	.word	0x200018c8
 8016784:	200018ac 	.word	0x200018ac
 8016788:	2000187c 	.word	0x2000187c
 801678c:	20001878 	.word	0x20001878
 8016790:	200018e0 	.word	0x200018e0

08016794 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016794:	b480      	push	{r7}
 8016796:	b085      	sub	sp, #20
 8016798:	af00      	add	r7, sp, #0
 801679a:	60f8      	str	r0, [r7, #12]
 801679c:	60b9      	str	r1, [r7, #8]
 801679e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	3b04      	subs	r3, #4
 80167a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80167ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	3b04      	subs	r3, #4
 80167b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80167b4:	68bb      	ldr	r3, [r7, #8]
 80167b6:	f023 0201 	bic.w	r2, r3, #1
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	3b04      	subs	r3, #4
 80167c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80167c4:	4a0c      	ldr	r2, [pc, #48]	; (80167f8 <pxPortInitialiseStack+0x64>)
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	3b14      	subs	r3, #20
 80167ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80167d0:	687a      	ldr	r2, [r7, #4]
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	3b04      	subs	r3, #4
 80167da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	f06f 0202 	mvn.w	r2, #2
 80167e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	3b20      	subs	r3, #32
 80167e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80167ea:	68fb      	ldr	r3, [r7, #12]
}
 80167ec:	4618      	mov	r0, r3
 80167ee:	3714      	adds	r7, #20
 80167f0:	46bd      	mov	sp, r7
 80167f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f6:	4770      	bx	lr
 80167f8:	080167fd 	.word	0x080167fd

080167fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80167fc:	b480      	push	{r7}
 80167fe:	b085      	sub	sp, #20
 8016800:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016802:	2300      	movs	r3, #0
 8016804:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016806:	4b12      	ldr	r3, [pc, #72]	; (8016850 <prvTaskExitError+0x54>)
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801680e:	d00a      	beq.n	8016826 <prvTaskExitError+0x2a>
	__asm volatile
 8016810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016814:	f383 8811 	msr	BASEPRI, r3
 8016818:	f3bf 8f6f 	isb	sy
 801681c:	f3bf 8f4f 	dsb	sy
 8016820:	60fb      	str	r3, [r7, #12]
}
 8016822:	bf00      	nop
 8016824:	e7fe      	b.n	8016824 <prvTaskExitError+0x28>
	__asm volatile
 8016826:	f04f 0350 	mov.w	r3, #80	; 0x50
 801682a:	f383 8811 	msr	BASEPRI, r3
 801682e:	f3bf 8f6f 	isb	sy
 8016832:	f3bf 8f4f 	dsb	sy
 8016836:	60bb      	str	r3, [r7, #8]
}
 8016838:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801683a:	bf00      	nop
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d0fc      	beq.n	801683c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016842:	bf00      	nop
 8016844:	bf00      	nop
 8016846:	3714      	adds	r7, #20
 8016848:	46bd      	mov	sp, r7
 801684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801684e:	4770      	bx	lr
 8016850:	20000054 	.word	0x20000054
	...

08016860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016860:	4b07      	ldr	r3, [pc, #28]	; (8016880 <pxCurrentTCBConst2>)
 8016862:	6819      	ldr	r1, [r3, #0]
 8016864:	6808      	ldr	r0, [r1, #0]
 8016866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801686a:	f380 8809 	msr	PSP, r0
 801686e:	f3bf 8f6f 	isb	sy
 8016872:	f04f 0000 	mov.w	r0, #0
 8016876:	f380 8811 	msr	BASEPRI, r0
 801687a:	4770      	bx	lr
 801687c:	f3af 8000 	nop.w

08016880 <pxCurrentTCBConst2>:
 8016880:	200017c0 	.word	0x200017c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016884:	bf00      	nop
 8016886:	bf00      	nop

08016888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016888:	4808      	ldr	r0, [pc, #32]	; (80168ac <prvPortStartFirstTask+0x24>)
 801688a:	6800      	ldr	r0, [r0, #0]
 801688c:	6800      	ldr	r0, [r0, #0]
 801688e:	f380 8808 	msr	MSP, r0
 8016892:	f04f 0000 	mov.w	r0, #0
 8016896:	f380 8814 	msr	CONTROL, r0
 801689a:	b662      	cpsie	i
 801689c:	b661      	cpsie	f
 801689e:	f3bf 8f4f 	dsb	sy
 80168a2:	f3bf 8f6f 	isb	sy
 80168a6:	df00      	svc	0
 80168a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80168aa:	bf00      	nop
 80168ac:	e000ed08 	.word	0xe000ed08

080168b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b086      	sub	sp, #24
 80168b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80168b6:	4b46      	ldr	r3, [pc, #280]	; (80169d0 <xPortStartScheduler+0x120>)
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	4a46      	ldr	r2, [pc, #280]	; (80169d4 <xPortStartScheduler+0x124>)
 80168bc:	4293      	cmp	r3, r2
 80168be:	d10a      	bne.n	80168d6 <xPortStartScheduler+0x26>
	__asm volatile
 80168c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168c4:	f383 8811 	msr	BASEPRI, r3
 80168c8:	f3bf 8f6f 	isb	sy
 80168cc:	f3bf 8f4f 	dsb	sy
 80168d0:	613b      	str	r3, [r7, #16]
}
 80168d2:	bf00      	nop
 80168d4:	e7fe      	b.n	80168d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80168d6:	4b3e      	ldr	r3, [pc, #248]	; (80169d0 <xPortStartScheduler+0x120>)
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	4a3f      	ldr	r2, [pc, #252]	; (80169d8 <xPortStartScheduler+0x128>)
 80168dc:	4293      	cmp	r3, r2
 80168de:	d10a      	bne.n	80168f6 <xPortStartScheduler+0x46>
	__asm volatile
 80168e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168e4:	f383 8811 	msr	BASEPRI, r3
 80168e8:	f3bf 8f6f 	isb	sy
 80168ec:	f3bf 8f4f 	dsb	sy
 80168f0:	60fb      	str	r3, [r7, #12]
}
 80168f2:	bf00      	nop
 80168f4:	e7fe      	b.n	80168f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80168f6:	4b39      	ldr	r3, [pc, #228]	; (80169dc <xPortStartScheduler+0x12c>)
 80168f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80168fa:	697b      	ldr	r3, [r7, #20]
 80168fc:	781b      	ldrb	r3, [r3, #0]
 80168fe:	b2db      	uxtb	r3, r3
 8016900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016902:	697b      	ldr	r3, [r7, #20]
 8016904:	22ff      	movs	r2, #255	; 0xff
 8016906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016908:	697b      	ldr	r3, [r7, #20]
 801690a:	781b      	ldrb	r3, [r3, #0]
 801690c:	b2db      	uxtb	r3, r3
 801690e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016910:	78fb      	ldrb	r3, [r7, #3]
 8016912:	b2db      	uxtb	r3, r3
 8016914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016918:	b2da      	uxtb	r2, r3
 801691a:	4b31      	ldr	r3, [pc, #196]	; (80169e0 <xPortStartScheduler+0x130>)
 801691c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801691e:	4b31      	ldr	r3, [pc, #196]	; (80169e4 <xPortStartScheduler+0x134>)
 8016920:	2207      	movs	r2, #7
 8016922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016924:	e009      	b.n	801693a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8016926:	4b2f      	ldr	r3, [pc, #188]	; (80169e4 <xPortStartScheduler+0x134>)
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	3b01      	subs	r3, #1
 801692c:	4a2d      	ldr	r2, [pc, #180]	; (80169e4 <xPortStartScheduler+0x134>)
 801692e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016930:	78fb      	ldrb	r3, [r7, #3]
 8016932:	b2db      	uxtb	r3, r3
 8016934:	005b      	lsls	r3, r3, #1
 8016936:	b2db      	uxtb	r3, r3
 8016938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801693a:	78fb      	ldrb	r3, [r7, #3]
 801693c:	b2db      	uxtb	r3, r3
 801693e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016942:	2b80      	cmp	r3, #128	; 0x80
 8016944:	d0ef      	beq.n	8016926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016946:	4b27      	ldr	r3, [pc, #156]	; (80169e4 <xPortStartScheduler+0x134>)
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	f1c3 0307 	rsb	r3, r3, #7
 801694e:	2b04      	cmp	r3, #4
 8016950:	d00a      	beq.n	8016968 <xPortStartScheduler+0xb8>
	__asm volatile
 8016952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016956:	f383 8811 	msr	BASEPRI, r3
 801695a:	f3bf 8f6f 	isb	sy
 801695e:	f3bf 8f4f 	dsb	sy
 8016962:	60bb      	str	r3, [r7, #8]
}
 8016964:	bf00      	nop
 8016966:	e7fe      	b.n	8016966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016968:	4b1e      	ldr	r3, [pc, #120]	; (80169e4 <xPortStartScheduler+0x134>)
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	021b      	lsls	r3, r3, #8
 801696e:	4a1d      	ldr	r2, [pc, #116]	; (80169e4 <xPortStartScheduler+0x134>)
 8016970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016972:	4b1c      	ldr	r3, [pc, #112]	; (80169e4 <xPortStartScheduler+0x134>)
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801697a:	4a1a      	ldr	r2, [pc, #104]	; (80169e4 <xPortStartScheduler+0x134>)
 801697c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	b2da      	uxtb	r2, r3
 8016982:	697b      	ldr	r3, [r7, #20]
 8016984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016986:	4b18      	ldr	r3, [pc, #96]	; (80169e8 <xPortStartScheduler+0x138>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	4a17      	ldr	r2, [pc, #92]	; (80169e8 <xPortStartScheduler+0x138>)
 801698c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016992:	4b15      	ldr	r3, [pc, #84]	; (80169e8 <xPortStartScheduler+0x138>)
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	4a14      	ldr	r2, [pc, #80]	; (80169e8 <xPortStartScheduler+0x138>)
 8016998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801699c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801699e:	f000 f8dd 	bl	8016b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80169a2:	4b12      	ldr	r3, [pc, #72]	; (80169ec <xPortStartScheduler+0x13c>)
 80169a4:	2200      	movs	r2, #0
 80169a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80169a8:	f000 f8fc 	bl	8016ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80169ac:	4b10      	ldr	r3, [pc, #64]	; (80169f0 <xPortStartScheduler+0x140>)
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	4a0f      	ldr	r2, [pc, #60]	; (80169f0 <xPortStartScheduler+0x140>)
 80169b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80169b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80169b8:	f7ff ff66 	bl	8016888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80169bc:	f7ff f978 	bl	8015cb0 <vTaskSwitchContext>
	prvTaskExitError();
 80169c0:	f7ff ff1c 	bl	80167fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80169c4:	2300      	movs	r3, #0
}
 80169c6:	4618      	mov	r0, r3
 80169c8:	3718      	adds	r7, #24
 80169ca:	46bd      	mov	sp, r7
 80169cc:	bd80      	pop	{r7, pc}
 80169ce:	bf00      	nop
 80169d0:	e000ed00 	.word	0xe000ed00
 80169d4:	410fc271 	.word	0x410fc271
 80169d8:	410fc270 	.word	0x410fc270
 80169dc:	e000e400 	.word	0xe000e400
 80169e0:	200018ec 	.word	0x200018ec
 80169e4:	200018f0 	.word	0x200018f0
 80169e8:	e000ed20 	.word	0xe000ed20
 80169ec:	20000054 	.word	0x20000054
 80169f0:	e000ef34 	.word	0xe000ef34

080169f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80169f4:	b480      	push	{r7}
 80169f6:	b083      	sub	sp, #12
 80169f8:	af00      	add	r7, sp, #0
	__asm volatile
 80169fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169fe:	f383 8811 	msr	BASEPRI, r3
 8016a02:	f3bf 8f6f 	isb	sy
 8016a06:	f3bf 8f4f 	dsb	sy
 8016a0a:	607b      	str	r3, [r7, #4]
}
 8016a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016a0e:	4b0f      	ldr	r3, [pc, #60]	; (8016a4c <vPortEnterCritical+0x58>)
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	3301      	adds	r3, #1
 8016a14:	4a0d      	ldr	r2, [pc, #52]	; (8016a4c <vPortEnterCritical+0x58>)
 8016a16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016a18:	4b0c      	ldr	r3, [pc, #48]	; (8016a4c <vPortEnterCritical+0x58>)
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	2b01      	cmp	r3, #1
 8016a1e:	d10f      	bne.n	8016a40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016a20:	4b0b      	ldr	r3, [pc, #44]	; (8016a50 <vPortEnterCritical+0x5c>)
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	b2db      	uxtb	r3, r3
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d00a      	beq.n	8016a40 <vPortEnterCritical+0x4c>
	__asm volatile
 8016a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a2e:	f383 8811 	msr	BASEPRI, r3
 8016a32:	f3bf 8f6f 	isb	sy
 8016a36:	f3bf 8f4f 	dsb	sy
 8016a3a:	603b      	str	r3, [r7, #0]
}
 8016a3c:	bf00      	nop
 8016a3e:	e7fe      	b.n	8016a3e <vPortEnterCritical+0x4a>
	}
}
 8016a40:	bf00      	nop
 8016a42:	370c      	adds	r7, #12
 8016a44:	46bd      	mov	sp, r7
 8016a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a4a:	4770      	bx	lr
 8016a4c:	20000054 	.word	0x20000054
 8016a50:	e000ed04 	.word	0xe000ed04

08016a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016a54:	b480      	push	{r7}
 8016a56:	b083      	sub	sp, #12
 8016a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016a5a:	4b12      	ldr	r3, [pc, #72]	; (8016aa4 <vPortExitCritical+0x50>)
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d10a      	bne.n	8016a78 <vPortExitCritical+0x24>
	__asm volatile
 8016a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a66:	f383 8811 	msr	BASEPRI, r3
 8016a6a:	f3bf 8f6f 	isb	sy
 8016a6e:	f3bf 8f4f 	dsb	sy
 8016a72:	607b      	str	r3, [r7, #4]
}
 8016a74:	bf00      	nop
 8016a76:	e7fe      	b.n	8016a76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016a78:	4b0a      	ldr	r3, [pc, #40]	; (8016aa4 <vPortExitCritical+0x50>)
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	3b01      	subs	r3, #1
 8016a7e:	4a09      	ldr	r2, [pc, #36]	; (8016aa4 <vPortExitCritical+0x50>)
 8016a80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016a82:	4b08      	ldr	r3, [pc, #32]	; (8016aa4 <vPortExitCritical+0x50>)
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d105      	bne.n	8016a96 <vPortExitCritical+0x42>
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016a8e:	683b      	ldr	r3, [r7, #0]
 8016a90:	f383 8811 	msr	BASEPRI, r3
}
 8016a94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016a96:	bf00      	nop
 8016a98:	370c      	adds	r7, #12
 8016a9a:	46bd      	mov	sp, r7
 8016a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa0:	4770      	bx	lr
 8016aa2:	bf00      	nop
 8016aa4:	20000054 	.word	0x20000054
	...

08016ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016ab0:	f3ef 8009 	mrs	r0, PSP
 8016ab4:	f3bf 8f6f 	isb	sy
 8016ab8:	4b15      	ldr	r3, [pc, #84]	; (8016b10 <pxCurrentTCBConst>)
 8016aba:	681a      	ldr	r2, [r3, #0]
 8016abc:	f01e 0f10 	tst.w	lr, #16
 8016ac0:	bf08      	it	eq
 8016ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aca:	6010      	str	r0, [r2, #0]
 8016acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016ad4:	f380 8811 	msr	BASEPRI, r0
 8016ad8:	f3bf 8f4f 	dsb	sy
 8016adc:	f3bf 8f6f 	isb	sy
 8016ae0:	f7ff f8e6 	bl	8015cb0 <vTaskSwitchContext>
 8016ae4:	f04f 0000 	mov.w	r0, #0
 8016ae8:	f380 8811 	msr	BASEPRI, r0
 8016aec:	bc09      	pop	{r0, r3}
 8016aee:	6819      	ldr	r1, [r3, #0]
 8016af0:	6808      	ldr	r0, [r1, #0]
 8016af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016af6:	f01e 0f10 	tst.w	lr, #16
 8016afa:	bf08      	it	eq
 8016afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016b00:	f380 8809 	msr	PSP, r0
 8016b04:	f3bf 8f6f 	isb	sy
 8016b08:	4770      	bx	lr
 8016b0a:	bf00      	nop
 8016b0c:	f3af 8000 	nop.w

08016b10 <pxCurrentTCBConst>:
 8016b10:	200017c0 	.word	0x200017c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016b14:	bf00      	nop
 8016b16:	bf00      	nop

08016b18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b082      	sub	sp, #8
 8016b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8016b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b22:	f383 8811 	msr	BASEPRI, r3
 8016b26:	f3bf 8f6f 	isb	sy
 8016b2a:	f3bf 8f4f 	dsb	sy
 8016b2e:	607b      	str	r3, [r7, #4]
}
 8016b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016b32:	f7ff f805 	bl	8015b40 <xTaskIncrementTick>
 8016b36:	4603      	mov	r3, r0
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d003      	beq.n	8016b44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016b3c:	4b06      	ldr	r3, [pc, #24]	; (8016b58 <SysTick_Handler+0x40>)
 8016b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b42:	601a      	str	r2, [r3, #0]
 8016b44:	2300      	movs	r3, #0
 8016b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016b48:	683b      	ldr	r3, [r7, #0]
 8016b4a:	f383 8811 	msr	BASEPRI, r3
}
 8016b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016b50:	bf00      	nop
 8016b52:	3708      	adds	r7, #8
 8016b54:	46bd      	mov	sp, r7
 8016b56:	bd80      	pop	{r7, pc}
 8016b58:	e000ed04 	.word	0xe000ed04

08016b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016b5c:	b480      	push	{r7}
 8016b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016b60:	4b0b      	ldr	r3, [pc, #44]	; (8016b90 <vPortSetupTimerInterrupt+0x34>)
 8016b62:	2200      	movs	r2, #0
 8016b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016b66:	4b0b      	ldr	r3, [pc, #44]	; (8016b94 <vPortSetupTimerInterrupt+0x38>)
 8016b68:	2200      	movs	r2, #0
 8016b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016b6c:	4b0a      	ldr	r3, [pc, #40]	; (8016b98 <vPortSetupTimerInterrupt+0x3c>)
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	4a0a      	ldr	r2, [pc, #40]	; (8016b9c <vPortSetupTimerInterrupt+0x40>)
 8016b72:	fba2 2303 	umull	r2, r3, r2, r3
 8016b76:	099b      	lsrs	r3, r3, #6
 8016b78:	4a09      	ldr	r2, [pc, #36]	; (8016ba0 <vPortSetupTimerInterrupt+0x44>)
 8016b7a:	3b01      	subs	r3, #1
 8016b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016b7e:	4b04      	ldr	r3, [pc, #16]	; (8016b90 <vPortSetupTimerInterrupt+0x34>)
 8016b80:	2207      	movs	r2, #7
 8016b82:	601a      	str	r2, [r3, #0]
}
 8016b84:	bf00      	nop
 8016b86:	46bd      	mov	sp, r7
 8016b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b8c:	4770      	bx	lr
 8016b8e:	bf00      	nop
 8016b90:	e000e010 	.word	0xe000e010
 8016b94:	e000e018 	.word	0xe000e018
 8016b98:	20000014 	.word	0x20000014
 8016b9c:	10624dd3 	.word	0x10624dd3
 8016ba0:	e000e014 	.word	0xe000e014

08016ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016bb4 <vPortEnableVFP+0x10>
 8016ba8:	6801      	ldr	r1, [r0, #0]
 8016baa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016bae:	6001      	str	r1, [r0, #0]
 8016bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016bb2:	bf00      	nop
 8016bb4:	e000ed88 	.word	0xe000ed88

08016bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016bb8:	b480      	push	{r7}
 8016bba:	b085      	sub	sp, #20
 8016bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016bbe:	f3ef 8305 	mrs	r3, IPSR
 8016bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	2b0f      	cmp	r3, #15
 8016bc8:	d914      	bls.n	8016bf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016bca:	4a17      	ldr	r2, [pc, #92]	; (8016c28 <vPortValidateInterruptPriority+0x70>)
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	4413      	add	r3, r2
 8016bd0:	781b      	ldrb	r3, [r3, #0]
 8016bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016bd4:	4b15      	ldr	r3, [pc, #84]	; (8016c2c <vPortValidateInterruptPriority+0x74>)
 8016bd6:	781b      	ldrb	r3, [r3, #0]
 8016bd8:	7afa      	ldrb	r2, [r7, #11]
 8016bda:	429a      	cmp	r2, r3
 8016bdc:	d20a      	bcs.n	8016bf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8016bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016be2:	f383 8811 	msr	BASEPRI, r3
 8016be6:	f3bf 8f6f 	isb	sy
 8016bea:	f3bf 8f4f 	dsb	sy
 8016bee:	607b      	str	r3, [r7, #4]
}
 8016bf0:	bf00      	nop
 8016bf2:	e7fe      	b.n	8016bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016bf4:	4b0e      	ldr	r3, [pc, #56]	; (8016c30 <vPortValidateInterruptPriority+0x78>)
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016bfc:	4b0d      	ldr	r3, [pc, #52]	; (8016c34 <vPortValidateInterruptPriority+0x7c>)
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	429a      	cmp	r2, r3
 8016c02:	d90a      	bls.n	8016c1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c08:	f383 8811 	msr	BASEPRI, r3
 8016c0c:	f3bf 8f6f 	isb	sy
 8016c10:	f3bf 8f4f 	dsb	sy
 8016c14:	603b      	str	r3, [r7, #0]
}
 8016c16:	bf00      	nop
 8016c18:	e7fe      	b.n	8016c18 <vPortValidateInterruptPriority+0x60>
	}
 8016c1a:	bf00      	nop
 8016c1c:	3714      	adds	r7, #20
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c24:	4770      	bx	lr
 8016c26:	bf00      	nop
 8016c28:	e000e3f0 	.word	0xe000e3f0
 8016c2c:	200018ec 	.word	0x200018ec
 8016c30:	e000ed0c 	.word	0xe000ed0c
 8016c34:	200018f0 	.word	0x200018f0

08016c38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b08a      	sub	sp, #40	; 0x28
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016c40:	2300      	movs	r3, #0
 8016c42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016c44:	f7fe feb0 	bl	80159a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016c48:	4b5b      	ldr	r3, [pc, #364]	; (8016db8 <pvPortMalloc+0x180>)
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d101      	bne.n	8016c54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016c50:	f000 f920 	bl	8016e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016c54:	4b59      	ldr	r3, [pc, #356]	; (8016dbc <pvPortMalloc+0x184>)
 8016c56:	681a      	ldr	r2, [r3, #0]
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	4013      	ands	r3, r2
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	f040 8093 	bne.w	8016d88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d01d      	beq.n	8016ca4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016c68:	2208      	movs	r2, #8
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	4413      	add	r3, r2
 8016c6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	f003 0307 	and.w	r3, r3, #7
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d014      	beq.n	8016ca4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	f023 0307 	bic.w	r3, r3, #7
 8016c80:	3308      	adds	r3, #8
 8016c82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	f003 0307 	and.w	r3, r3, #7
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d00a      	beq.n	8016ca4 <pvPortMalloc+0x6c>
	__asm volatile
 8016c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c92:	f383 8811 	msr	BASEPRI, r3
 8016c96:	f3bf 8f6f 	isb	sy
 8016c9a:	f3bf 8f4f 	dsb	sy
 8016c9e:	617b      	str	r3, [r7, #20]
}
 8016ca0:	bf00      	nop
 8016ca2:	e7fe      	b.n	8016ca2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d06e      	beq.n	8016d88 <pvPortMalloc+0x150>
 8016caa:	4b45      	ldr	r3, [pc, #276]	; (8016dc0 <pvPortMalloc+0x188>)
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	687a      	ldr	r2, [r7, #4]
 8016cb0:	429a      	cmp	r2, r3
 8016cb2:	d869      	bhi.n	8016d88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016cb4:	4b43      	ldr	r3, [pc, #268]	; (8016dc4 <pvPortMalloc+0x18c>)
 8016cb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016cb8:	4b42      	ldr	r3, [pc, #264]	; (8016dc4 <pvPortMalloc+0x18c>)
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016cbe:	e004      	b.n	8016cca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ccc:	685b      	ldr	r3, [r3, #4]
 8016cce:	687a      	ldr	r2, [r7, #4]
 8016cd0:	429a      	cmp	r2, r3
 8016cd2:	d903      	bls.n	8016cdc <pvPortMalloc+0xa4>
 8016cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d1f1      	bne.n	8016cc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016cdc:	4b36      	ldr	r3, [pc, #216]	; (8016db8 <pvPortMalloc+0x180>)
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ce2:	429a      	cmp	r2, r3
 8016ce4:	d050      	beq.n	8016d88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016ce6:	6a3b      	ldr	r3, [r7, #32]
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	2208      	movs	r2, #8
 8016cec:	4413      	add	r3, r2
 8016cee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cf2:	681a      	ldr	r2, [r3, #0]
 8016cf4:	6a3b      	ldr	r3, [r7, #32]
 8016cf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cfa:	685a      	ldr	r2, [r3, #4]
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	1ad2      	subs	r2, r2, r3
 8016d00:	2308      	movs	r3, #8
 8016d02:	005b      	lsls	r3, r3, #1
 8016d04:	429a      	cmp	r2, r3
 8016d06:	d91f      	bls.n	8016d48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	4413      	add	r3, r2
 8016d0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016d10:	69bb      	ldr	r3, [r7, #24]
 8016d12:	f003 0307 	and.w	r3, r3, #7
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d00a      	beq.n	8016d30 <pvPortMalloc+0xf8>
	__asm volatile
 8016d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d1e:	f383 8811 	msr	BASEPRI, r3
 8016d22:	f3bf 8f6f 	isb	sy
 8016d26:	f3bf 8f4f 	dsb	sy
 8016d2a:	613b      	str	r3, [r7, #16]
}
 8016d2c:	bf00      	nop
 8016d2e:	e7fe      	b.n	8016d2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d32:	685a      	ldr	r2, [r3, #4]
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	1ad2      	subs	r2, r2, r3
 8016d38:	69bb      	ldr	r3, [r7, #24]
 8016d3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d3e:	687a      	ldr	r2, [r7, #4]
 8016d40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016d42:	69b8      	ldr	r0, [r7, #24]
 8016d44:	f000 f908 	bl	8016f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016d48:	4b1d      	ldr	r3, [pc, #116]	; (8016dc0 <pvPortMalloc+0x188>)
 8016d4a:	681a      	ldr	r2, [r3, #0]
 8016d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d4e:	685b      	ldr	r3, [r3, #4]
 8016d50:	1ad3      	subs	r3, r2, r3
 8016d52:	4a1b      	ldr	r2, [pc, #108]	; (8016dc0 <pvPortMalloc+0x188>)
 8016d54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016d56:	4b1a      	ldr	r3, [pc, #104]	; (8016dc0 <pvPortMalloc+0x188>)
 8016d58:	681a      	ldr	r2, [r3, #0]
 8016d5a:	4b1b      	ldr	r3, [pc, #108]	; (8016dc8 <pvPortMalloc+0x190>)
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	429a      	cmp	r2, r3
 8016d60:	d203      	bcs.n	8016d6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016d62:	4b17      	ldr	r3, [pc, #92]	; (8016dc0 <pvPortMalloc+0x188>)
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	4a18      	ldr	r2, [pc, #96]	; (8016dc8 <pvPortMalloc+0x190>)
 8016d68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d6c:	685a      	ldr	r2, [r3, #4]
 8016d6e:	4b13      	ldr	r3, [pc, #76]	; (8016dbc <pvPortMalloc+0x184>)
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	431a      	orrs	r2, r3
 8016d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016d7e:	4b13      	ldr	r3, [pc, #76]	; (8016dcc <pvPortMalloc+0x194>)
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	3301      	adds	r3, #1
 8016d84:	4a11      	ldr	r2, [pc, #68]	; (8016dcc <pvPortMalloc+0x194>)
 8016d86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016d88:	f7fe fe1c 	bl	80159c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016d8c:	69fb      	ldr	r3, [r7, #28]
 8016d8e:	f003 0307 	and.w	r3, r3, #7
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d00a      	beq.n	8016dac <pvPortMalloc+0x174>
	__asm volatile
 8016d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d9a:	f383 8811 	msr	BASEPRI, r3
 8016d9e:	f3bf 8f6f 	isb	sy
 8016da2:	f3bf 8f4f 	dsb	sy
 8016da6:	60fb      	str	r3, [r7, #12]
}
 8016da8:	bf00      	nop
 8016daa:	e7fe      	b.n	8016daa <pvPortMalloc+0x172>
	return pvReturn;
 8016dac:	69fb      	ldr	r3, [r7, #28]
}
 8016dae:	4618      	mov	r0, r3
 8016db0:	3728      	adds	r7, #40	; 0x28
 8016db2:	46bd      	mov	sp, r7
 8016db4:	bd80      	pop	{r7, pc}
 8016db6:	bf00      	nop
 8016db8:	200054fc 	.word	0x200054fc
 8016dbc:	20005510 	.word	0x20005510
 8016dc0:	20005500 	.word	0x20005500
 8016dc4:	200054f4 	.word	0x200054f4
 8016dc8:	20005504 	.word	0x20005504
 8016dcc:	20005508 	.word	0x20005508

08016dd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b086      	sub	sp, #24
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d04d      	beq.n	8016e7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016de2:	2308      	movs	r3, #8
 8016de4:	425b      	negs	r3, r3
 8016de6:	697a      	ldr	r2, [r7, #20]
 8016de8:	4413      	add	r3, r2
 8016dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016dec:	697b      	ldr	r3, [r7, #20]
 8016dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016df0:	693b      	ldr	r3, [r7, #16]
 8016df2:	685a      	ldr	r2, [r3, #4]
 8016df4:	4b24      	ldr	r3, [pc, #144]	; (8016e88 <vPortFree+0xb8>)
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	4013      	ands	r3, r2
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d10a      	bne.n	8016e14 <vPortFree+0x44>
	__asm volatile
 8016dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e02:	f383 8811 	msr	BASEPRI, r3
 8016e06:	f3bf 8f6f 	isb	sy
 8016e0a:	f3bf 8f4f 	dsb	sy
 8016e0e:	60fb      	str	r3, [r7, #12]
}
 8016e10:	bf00      	nop
 8016e12:	e7fe      	b.n	8016e12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016e14:	693b      	ldr	r3, [r7, #16]
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d00a      	beq.n	8016e32 <vPortFree+0x62>
	__asm volatile
 8016e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e20:	f383 8811 	msr	BASEPRI, r3
 8016e24:	f3bf 8f6f 	isb	sy
 8016e28:	f3bf 8f4f 	dsb	sy
 8016e2c:	60bb      	str	r3, [r7, #8]
}
 8016e2e:	bf00      	nop
 8016e30:	e7fe      	b.n	8016e30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016e32:	693b      	ldr	r3, [r7, #16]
 8016e34:	685a      	ldr	r2, [r3, #4]
 8016e36:	4b14      	ldr	r3, [pc, #80]	; (8016e88 <vPortFree+0xb8>)
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	4013      	ands	r3, r2
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d01e      	beq.n	8016e7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016e40:	693b      	ldr	r3, [r7, #16]
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d11a      	bne.n	8016e7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016e48:	693b      	ldr	r3, [r7, #16]
 8016e4a:	685a      	ldr	r2, [r3, #4]
 8016e4c:	4b0e      	ldr	r3, [pc, #56]	; (8016e88 <vPortFree+0xb8>)
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	43db      	mvns	r3, r3
 8016e52:	401a      	ands	r2, r3
 8016e54:	693b      	ldr	r3, [r7, #16]
 8016e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016e58:	f7fe fda6 	bl	80159a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016e5c:	693b      	ldr	r3, [r7, #16]
 8016e5e:	685a      	ldr	r2, [r3, #4]
 8016e60:	4b0a      	ldr	r3, [pc, #40]	; (8016e8c <vPortFree+0xbc>)
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	4413      	add	r3, r2
 8016e66:	4a09      	ldr	r2, [pc, #36]	; (8016e8c <vPortFree+0xbc>)
 8016e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016e6a:	6938      	ldr	r0, [r7, #16]
 8016e6c:	f000 f874 	bl	8016f58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016e70:	4b07      	ldr	r3, [pc, #28]	; (8016e90 <vPortFree+0xc0>)
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	3301      	adds	r3, #1
 8016e76:	4a06      	ldr	r2, [pc, #24]	; (8016e90 <vPortFree+0xc0>)
 8016e78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016e7a:	f7fe fda3 	bl	80159c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016e7e:	bf00      	nop
 8016e80:	3718      	adds	r7, #24
 8016e82:	46bd      	mov	sp, r7
 8016e84:	bd80      	pop	{r7, pc}
 8016e86:	bf00      	nop
 8016e88:	20005510 	.word	0x20005510
 8016e8c:	20005500 	.word	0x20005500
 8016e90:	2000550c 	.word	0x2000550c

08016e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016e94:	b480      	push	{r7}
 8016e96:	b085      	sub	sp, #20
 8016e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016e9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8016e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016ea0:	4b27      	ldr	r3, [pc, #156]	; (8016f40 <prvHeapInit+0xac>)
 8016ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	f003 0307 	and.w	r3, r3, #7
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d00c      	beq.n	8016ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	3307      	adds	r3, #7
 8016eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	f023 0307 	bic.w	r3, r3, #7
 8016eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016ebc:	68ba      	ldr	r2, [r7, #8]
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	1ad3      	subs	r3, r2, r3
 8016ec2:	4a1f      	ldr	r2, [pc, #124]	; (8016f40 <prvHeapInit+0xac>)
 8016ec4:	4413      	add	r3, r2
 8016ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016ecc:	4a1d      	ldr	r2, [pc, #116]	; (8016f44 <prvHeapInit+0xb0>)
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016ed2:	4b1c      	ldr	r3, [pc, #112]	; (8016f44 <prvHeapInit+0xb0>)
 8016ed4:	2200      	movs	r2, #0
 8016ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	68ba      	ldr	r2, [r7, #8]
 8016edc:	4413      	add	r3, r2
 8016ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016ee0:	2208      	movs	r2, #8
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	1a9b      	subs	r3, r3, r2
 8016ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016ee8:	68fb      	ldr	r3, [r7, #12]
 8016eea:	f023 0307 	bic.w	r3, r3, #7
 8016eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	4a15      	ldr	r2, [pc, #84]	; (8016f48 <prvHeapInit+0xb4>)
 8016ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016ef6:	4b14      	ldr	r3, [pc, #80]	; (8016f48 <prvHeapInit+0xb4>)
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	2200      	movs	r2, #0
 8016efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016efe:	4b12      	ldr	r3, [pc, #72]	; (8016f48 <prvHeapInit+0xb4>)
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	2200      	movs	r2, #0
 8016f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016f0a:	683b      	ldr	r3, [r7, #0]
 8016f0c:	68fa      	ldr	r2, [r7, #12]
 8016f0e:	1ad2      	subs	r2, r2, r3
 8016f10:	683b      	ldr	r3, [r7, #0]
 8016f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016f14:	4b0c      	ldr	r3, [pc, #48]	; (8016f48 <prvHeapInit+0xb4>)
 8016f16:	681a      	ldr	r2, [r3, #0]
 8016f18:	683b      	ldr	r3, [r7, #0]
 8016f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016f1c:	683b      	ldr	r3, [r7, #0]
 8016f1e:	685b      	ldr	r3, [r3, #4]
 8016f20:	4a0a      	ldr	r2, [pc, #40]	; (8016f4c <prvHeapInit+0xb8>)
 8016f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016f24:	683b      	ldr	r3, [r7, #0]
 8016f26:	685b      	ldr	r3, [r3, #4]
 8016f28:	4a09      	ldr	r2, [pc, #36]	; (8016f50 <prvHeapInit+0xbc>)
 8016f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016f2c:	4b09      	ldr	r3, [pc, #36]	; (8016f54 <prvHeapInit+0xc0>)
 8016f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016f32:	601a      	str	r2, [r3, #0]
}
 8016f34:	bf00      	nop
 8016f36:	3714      	adds	r7, #20
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3e:	4770      	bx	lr
 8016f40:	200018f4 	.word	0x200018f4
 8016f44:	200054f4 	.word	0x200054f4
 8016f48:	200054fc 	.word	0x200054fc
 8016f4c:	20005504 	.word	0x20005504
 8016f50:	20005500 	.word	0x20005500
 8016f54:	20005510 	.word	0x20005510

08016f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016f58:	b480      	push	{r7}
 8016f5a:	b085      	sub	sp, #20
 8016f5c:	af00      	add	r7, sp, #0
 8016f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016f60:	4b28      	ldr	r3, [pc, #160]	; (8017004 <prvInsertBlockIntoFreeList+0xac>)
 8016f62:	60fb      	str	r3, [r7, #12]
 8016f64:	e002      	b.n	8016f6c <prvInsertBlockIntoFreeList+0x14>
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	60fb      	str	r3, [r7, #12]
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	687a      	ldr	r2, [r7, #4]
 8016f72:	429a      	cmp	r2, r3
 8016f74:	d8f7      	bhi.n	8016f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	685b      	ldr	r3, [r3, #4]
 8016f7e:	68ba      	ldr	r2, [r7, #8]
 8016f80:	4413      	add	r3, r2
 8016f82:	687a      	ldr	r2, [r7, #4]
 8016f84:	429a      	cmp	r2, r3
 8016f86:	d108      	bne.n	8016f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	685a      	ldr	r2, [r3, #4]
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	685b      	ldr	r3, [r3, #4]
 8016f90:	441a      	add	r2, r3
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	685b      	ldr	r3, [r3, #4]
 8016fa2:	68ba      	ldr	r2, [r7, #8]
 8016fa4:	441a      	add	r2, r3
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	429a      	cmp	r2, r3
 8016fac:	d118      	bne.n	8016fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	681a      	ldr	r2, [r3, #0]
 8016fb2:	4b15      	ldr	r3, [pc, #84]	; (8017008 <prvInsertBlockIntoFreeList+0xb0>)
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	429a      	cmp	r2, r3
 8016fb8:	d00d      	beq.n	8016fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	685a      	ldr	r2, [r3, #4]
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	685b      	ldr	r3, [r3, #4]
 8016fc4:	441a      	add	r2, r3
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	681a      	ldr	r2, [r3, #0]
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	601a      	str	r2, [r3, #0]
 8016fd4:	e008      	b.n	8016fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016fd6:	4b0c      	ldr	r3, [pc, #48]	; (8017008 <prvInsertBlockIntoFreeList+0xb0>)
 8016fd8:	681a      	ldr	r2, [r3, #0]
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	601a      	str	r2, [r3, #0]
 8016fde:	e003      	b.n	8016fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	681a      	ldr	r2, [r3, #0]
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016fe8:	68fa      	ldr	r2, [r7, #12]
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	429a      	cmp	r2, r3
 8016fee:	d002      	beq.n	8016ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	687a      	ldr	r2, [r7, #4]
 8016ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016ff6:	bf00      	nop
 8016ff8:	3714      	adds	r7, #20
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017000:	4770      	bx	lr
 8017002:	bf00      	nop
 8017004:	200054f4 	.word	0x200054f4
 8017008:	200054fc 	.word	0x200054fc

0801700c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801700c:	b580      	push	{r7, lr}
 801700e:	b084      	sub	sp, #16
 8017010:	af00      	add	r7, sp, #0
 8017012:	6078      	str	r0, [r7, #4]
 8017014:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8017016:	f00b ffef 	bl	8022ff8 <sys_timeouts_sleeptime>
 801701a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017022:	d10b      	bne.n	801703c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8017024:	4813      	ldr	r0, [pc, #76]	; (8017074 <tcpip_timeouts_mbox_fetch+0x68>)
 8017026:	f00f f818 	bl	802605a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801702a:	2200      	movs	r2, #0
 801702c:	6839      	ldr	r1, [r7, #0]
 801702e:	6878      	ldr	r0, [r7, #4]
 8017030:	f00e ff8a 	bl	8025f48 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8017034:	480f      	ldr	r0, [pc, #60]	; (8017074 <tcpip_timeouts_mbox_fetch+0x68>)
 8017036:	f00f f801 	bl	802603c <sys_mutex_lock>
    return;
 801703a:	e018      	b.n	801706e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d102      	bne.n	8017048 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8017042:	f00b ff9f 	bl	8022f84 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8017046:	e7e6      	b.n	8017016 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8017048:	480a      	ldr	r0, [pc, #40]	; (8017074 <tcpip_timeouts_mbox_fetch+0x68>)
 801704a:	f00f f806 	bl	802605a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801704e:	68fa      	ldr	r2, [r7, #12]
 8017050:	6839      	ldr	r1, [r7, #0]
 8017052:	6878      	ldr	r0, [r7, #4]
 8017054:	f00e ff78 	bl	8025f48 <sys_arch_mbox_fetch>
 8017058:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801705a:	4806      	ldr	r0, [pc, #24]	; (8017074 <tcpip_timeouts_mbox_fetch+0x68>)
 801705c:	f00e ffee 	bl	802603c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8017060:	68bb      	ldr	r3, [r7, #8]
 8017062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017066:	d102      	bne.n	801706e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8017068:	f00b ff8c 	bl	8022f84 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801706c:	e7d3      	b.n	8017016 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801706e:	3710      	adds	r7, #16
 8017070:	46bd      	mov	sp, r7
 8017072:	bd80      	pop	{r7, pc}
 8017074:	20012bd4 	.word	0x20012bd4

08017078 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8017078:	b580      	push	{r7, lr}
 801707a:	b084      	sub	sp, #16
 801707c:	af00      	add	r7, sp, #0
 801707e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8017080:	4810      	ldr	r0, [pc, #64]	; (80170c4 <tcpip_thread+0x4c>)
 8017082:	f00e ffdb 	bl	802603c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8017086:	4b10      	ldr	r3, [pc, #64]	; (80170c8 <tcpip_thread+0x50>)
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d005      	beq.n	801709a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801708e:	4b0e      	ldr	r3, [pc, #56]	; (80170c8 <tcpip_thread+0x50>)
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	4a0e      	ldr	r2, [pc, #56]	; (80170cc <tcpip_thread+0x54>)
 8017094:	6812      	ldr	r2, [r2, #0]
 8017096:	4610      	mov	r0, r2
 8017098:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801709a:	f107 030c 	add.w	r3, r7, #12
 801709e:	4619      	mov	r1, r3
 80170a0:	480b      	ldr	r0, [pc, #44]	; (80170d0 <tcpip_thread+0x58>)
 80170a2:	f7ff ffb3 	bl	801700c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d106      	bne.n	80170ba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80170ac:	4b09      	ldr	r3, [pc, #36]	; (80170d4 <tcpip_thread+0x5c>)
 80170ae:	2291      	movs	r2, #145	; 0x91
 80170b0:	4909      	ldr	r1, [pc, #36]	; (80170d8 <tcpip_thread+0x60>)
 80170b2:	480a      	ldr	r0, [pc, #40]	; (80170dc <tcpip_thread+0x64>)
 80170b4:	f00f fdd0 	bl	8026c58 <iprintf>
      continue;
 80170b8:	e003      	b.n	80170c2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	4618      	mov	r0, r3
 80170be:	f000 f80f 	bl	80170e0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80170c2:	e7ea      	b.n	801709a <tcpip_thread+0x22>
 80170c4:	20012bd4 	.word	0x20012bd4
 80170c8:	20005514 	.word	0x20005514
 80170cc:	20005518 	.word	0x20005518
 80170d0:	2000551c 	.word	0x2000551c
 80170d4:	0802ca84 	.word	0x0802ca84
 80170d8:	0802cab4 	.word	0x0802cab4
 80170dc:	0802cad4 	.word	0x0802cad4

080170e0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b082      	sub	sp, #8
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	781b      	ldrb	r3, [r3, #0]
 80170ec:	2b02      	cmp	r3, #2
 80170ee:	d026      	beq.n	801713e <tcpip_thread_handle_msg+0x5e>
 80170f0:	2b02      	cmp	r3, #2
 80170f2:	dc2b      	bgt.n	801714c <tcpip_thread_handle_msg+0x6c>
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d002      	beq.n	80170fe <tcpip_thread_handle_msg+0x1e>
 80170f8:	2b01      	cmp	r3, #1
 80170fa:	d015      	beq.n	8017128 <tcpip_thread_handle_msg+0x48>
 80170fc:	e026      	b.n	801714c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	68db      	ldr	r3, [r3, #12]
 8017102:	687a      	ldr	r2, [r7, #4]
 8017104:	6850      	ldr	r0, [r2, #4]
 8017106:	687a      	ldr	r2, [r7, #4]
 8017108:	6892      	ldr	r2, [r2, #8]
 801710a:	4611      	mov	r1, r2
 801710c:	4798      	blx	r3
 801710e:	4603      	mov	r3, r0
 8017110:	2b00      	cmp	r3, #0
 8017112:	d004      	beq.n	801711e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	685b      	ldr	r3, [r3, #4]
 8017118:	4618      	mov	r0, r3
 801711a:	f005 f975 	bl	801c408 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801711e:	6879      	ldr	r1, [r7, #4]
 8017120:	2009      	movs	r0, #9
 8017122:	f004 facd 	bl	801b6c0 <memp_free>
      break;
 8017126:	e018      	b.n	801715a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	685b      	ldr	r3, [r3, #4]
 801712c:	687a      	ldr	r2, [r7, #4]
 801712e:	6892      	ldr	r2, [r2, #8]
 8017130:	4610      	mov	r0, r2
 8017132:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017134:	6879      	ldr	r1, [r7, #4]
 8017136:	2008      	movs	r0, #8
 8017138:	f004 fac2 	bl	801b6c0 <memp_free>
      break;
 801713c:	e00d      	b.n	801715a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	685b      	ldr	r3, [r3, #4]
 8017142:	687a      	ldr	r2, [r7, #4]
 8017144:	6892      	ldr	r2, [r2, #8]
 8017146:	4610      	mov	r0, r2
 8017148:	4798      	blx	r3
      break;
 801714a:	e006      	b.n	801715a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801714c:	4b05      	ldr	r3, [pc, #20]	; (8017164 <tcpip_thread_handle_msg+0x84>)
 801714e:	22cf      	movs	r2, #207	; 0xcf
 8017150:	4905      	ldr	r1, [pc, #20]	; (8017168 <tcpip_thread_handle_msg+0x88>)
 8017152:	4806      	ldr	r0, [pc, #24]	; (801716c <tcpip_thread_handle_msg+0x8c>)
 8017154:	f00f fd80 	bl	8026c58 <iprintf>
      break;
 8017158:	bf00      	nop
  }
}
 801715a:	bf00      	nop
 801715c:	3708      	adds	r7, #8
 801715e:	46bd      	mov	sp, r7
 8017160:	bd80      	pop	{r7, pc}
 8017162:	bf00      	nop
 8017164:	0802ca84 	.word	0x0802ca84
 8017168:	0802cab4 	.word	0x0802cab4
 801716c:	0802cad4 	.word	0x0802cad4

08017170 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b086      	sub	sp, #24
 8017174:	af00      	add	r7, sp, #0
 8017176:	60f8      	str	r0, [r7, #12]
 8017178:	60b9      	str	r1, [r7, #8]
 801717a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801717c:	481a      	ldr	r0, [pc, #104]	; (80171e8 <tcpip_inpkt+0x78>)
 801717e:	f00e ff22 	bl	8025fc6 <sys_mbox_valid>
 8017182:	4603      	mov	r3, r0
 8017184:	2b00      	cmp	r3, #0
 8017186:	d105      	bne.n	8017194 <tcpip_inpkt+0x24>
 8017188:	4b18      	ldr	r3, [pc, #96]	; (80171ec <tcpip_inpkt+0x7c>)
 801718a:	22fc      	movs	r2, #252	; 0xfc
 801718c:	4918      	ldr	r1, [pc, #96]	; (80171f0 <tcpip_inpkt+0x80>)
 801718e:	4819      	ldr	r0, [pc, #100]	; (80171f4 <tcpip_inpkt+0x84>)
 8017190:	f00f fd62 	bl	8026c58 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8017194:	2009      	movs	r0, #9
 8017196:	f004 fa41 	bl	801b61c <memp_malloc>
 801719a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801719c:	697b      	ldr	r3, [r7, #20]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d102      	bne.n	80171a8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80171a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80171a6:	e01a      	b.n	80171de <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80171a8:	697b      	ldr	r3, [r7, #20]
 80171aa:	2200      	movs	r2, #0
 80171ac:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80171ae:	697b      	ldr	r3, [r7, #20]
 80171b0:	68fa      	ldr	r2, [r7, #12]
 80171b2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80171b4:	697b      	ldr	r3, [r7, #20]
 80171b6:	68ba      	ldr	r2, [r7, #8]
 80171b8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80171ba:	697b      	ldr	r3, [r7, #20]
 80171bc:	687a      	ldr	r2, [r7, #4]
 80171be:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80171c0:	6979      	ldr	r1, [r7, #20]
 80171c2:	4809      	ldr	r0, [pc, #36]	; (80171e8 <tcpip_inpkt+0x78>)
 80171c4:	f00e fea6 	bl	8025f14 <sys_mbox_trypost>
 80171c8:	4603      	mov	r3, r0
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d006      	beq.n	80171dc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80171ce:	6979      	ldr	r1, [r7, #20]
 80171d0:	2009      	movs	r0, #9
 80171d2:	f004 fa75 	bl	801b6c0 <memp_free>
    return ERR_MEM;
 80171d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80171da:	e000      	b.n	80171de <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80171dc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80171de:	4618      	mov	r0, r3
 80171e0:	3718      	adds	r7, #24
 80171e2:	46bd      	mov	sp, r7
 80171e4:	bd80      	pop	{r7, pc}
 80171e6:	bf00      	nop
 80171e8:	2000551c 	.word	0x2000551c
 80171ec:	0802ca84 	.word	0x0802ca84
 80171f0:	0802cafc 	.word	0x0802cafc
 80171f4:	0802cad4 	.word	0x0802cad4

080171f8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80171f8:	b580      	push	{r7, lr}
 80171fa:	b082      	sub	sp, #8
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	6078      	str	r0, [r7, #4]
 8017200:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8017202:	683b      	ldr	r3, [r7, #0]
 8017204:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017208:	f003 0318 	and.w	r3, r3, #24
 801720c:	2b00      	cmp	r3, #0
 801720e:	d006      	beq.n	801721e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8017210:	4a08      	ldr	r2, [pc, #32]	; (8017234 <tcpip_input+0x3c>)
 8017212:	6839      	ldr	r1, [r7, #0]
 8017214:	6878      	ldr	r0, [r7, #4]
 8017216:	f7ff ffab 	bl	8017170 <tcpip_inpkt>
 801721a:	4603      	mov	r3, r0
 801721c:	e005      	b.n	801722a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801721e:	4a06      	ldr	r2, [pc, #24]	; (8017238 <tcpip_input+0x40>)
 8017220:	6839      	ldr	r1, [r7, #0]
 8017222:	6878      	ldr	r0, [r7, #4]
 8017224:	f7ff ffa4 	bl	8017170 <tcpip_inpkt>
 8017228:	4603      	mov	r3, r0
}
 801722a:	4618      	mov	r0, r3
 801722c:	3708      	adds	r7, #8
 801722e:	46bd      	mov	sp, r7
 8017230:	bd80      	pop	{r7, pc}
 8017232:	bf00      	nop
 8017234:	08025d25 	.word	0x08025d25
 8017238:	08024c39 	.word	0x08024c39

0801723c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801723c:	b580      	push	{r7, lr}
 801723e:	b084      	sub	sp, #16
 8017240:	af00      	add	r7, sp, #0
 8017242:	6078      	str	r0, [r7, #4]
 8017244:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017246:	4819      	ldr	r0, [pc, #100]	; (80172ac <tcpip_try_callback+0x70>)
 8017248:	f00e febd 	bl	8025fc6 <sys_mbox_valid>
 801724c:	4603      	mov	r3, r0
 801724e:	2b00      	cmp	r3, #0
 8017250:	d106      	bne.n	8017260 <tcpip_try_callback+0x24>
 8017252:	4b17      	ldr	r3, [pc, #92]	; (80172b0 <tcpip_try_callback+0x74>)
 8017254:	f240 125d 	movw	r2, #349	; 0x15d
 8017258:	4916      	ldr	r1, [pc, #88]	; (80172b4 <tcpip_try_callback+0x78>)
 801725a:	4817      	ldr	r0, [pc, #92]	; (80172b8 <tcpip_try_callback+0x7c>)
 801725c:	f00f fcfc 	bl	8026c58 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8017260:	2008      	movs	r0, #8
 8017262:	f004 f9db 	bl	801b61c <memp_malloc>
 8017266:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d102      	bne.n	8017274 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801726e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017272:	e017      	b.n	80172a4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	2201      	movs	r2, #1
 8017278:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	687a      	ldr	r2, [r7, #4]
 801727e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	683a      	ldr	r2, [r7, #0]
 8017284:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017286:	68f9      	ldr	r1, [r7, #12]
 8017288:	4808      	ldr	r0, [pc, #32]	; (80172ac <tcpip_try_callback+0x70>)
 801728a:	f00e fe43 	bl	8025f14 <sys_mbox_trypost>
 801728e:	4603      	mov	r3, r0
 8017290:	2b00      	cmp	r3, #0
 8017292:	d006      	beq.n	80172a2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8017294:	68f9      	ldr	r1, [r7, #12]
 8017296:	2008      	movs	r0, #8
 8017298:	f004 fa12 	bl	801b6c0 <memp_free>
    return ERR_MEM;
 801729c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80172a0:	e000      	b.n	80172a4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80172a2:	2300      	movs	r3, #0
}
 80172a4:	4618      	mov	r0, r3
 80172a6:	3710      	adds	r7, #16
 80172a8:	46bd      	mov	sp, r7
 80172aa:	bd80      	pop	{r7, pc}
 80172ac:	2000551c 	.word	0x2000551c
 80172b0:	0802ca84 	.word	0x0802ca84
 80172b4:	0802cafc 	.word	0x0802cafc
 80172b8:	0802cad4 	.word	0x0802cad4

080172bc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80172bc:	b580      	push	{r7, lr}
 80172be:	b084      	sub	sp, #16
 80172c0:	af02      	add	r7, sp, #8
 80172c2:	6078      	str	r0, [r7, #4]
 80172c4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80172c6:	f003 fcf9 	bl	801acbc <lwip_init>

  tcpip_init_done = initfunc;
 80172ca:	4a17      	ldr	r2, [pc, #92]	; (8017328 <tcpip_init+0x6c>)
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80172d0:	4a16      	ldr	r2, [pc, #88]	; (801732c <tcpip_init+0x70>)
 80172d2:	683b      	ldr	r3, [r7, #0]
 80172d4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80172d6:	2106      	movs	r1, #6
 80172d8:	4815      	ldr	r0, [pc, #84]	; (8017330 <tcpip_init+0x74>)
 80172da:	f00e fdf9 	bl	8025ed0 <sys_mbox_new>
 80172de:	4603      	mov	r3, r0
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d006      	beq.n	80172f2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80172e4:	4b13      	ldr	r3, [pc, #76]	; (8017334 <tcpip_init+0x78>)
 80172e6:	f240 2261 	movw	r2, #609	; 0x261
 80172ea:	4913      	ldr	r1, [pc, #76]	; (8017338 <tcpip_init+0x7c>)
 80172ec:	4813      	ldr	r0, [pc, #76]	; (801733c <tcpip_init+0x80>)
 80172ee:	f00f fcb3 	bl	8026c58 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80172f2:	4813      	ldr	r0, [pc, #76]	; (8017340 <tcpip_init+0x84>)
 80172f4:	f00e fe86 	bl	8026004 <sys_mutex_new>
 80172f8:	4603      	mov	r3, r0
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d006      	beq.n	801730c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80172fe:	4b0d      	ldr	r3, [pc, #52]	; (8017334 <tcpip_init+0x78>)
 8017300:	f240 2265 	movw	r2, #613	; 0x265
 8017304:	490f      	ldr	r1, [pc, #60]	; (8017344 <tcpip_init+0x88>)
 8017306:	480d      	ldr	r0, [pc, #52]	; (801733c <tcpip_init+0x80>)
 8017308:	f00f fca6 	bl	8026c58 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801730c:	2300      	movs	r3, #0
 801730e:	9300      	str	r3, [sp, #0]
 8017310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017314:	2200      	movs	r2, #0
 8017316:	490c      	ldr	r1, [pc, #48]	; (8017348 <tcpip_init+0x8c>)
 8017318:	480c      	ldr	r0, [pc, #48]	; (801734c <tcpip_init+0x90>)
 801731a:	f00e feab 	bl	8026074 <sys_thread_new>
}
 801731e:	bf00      	nop
 8017320:	3708      	adds	r7, #8
 8017322:	46bd      	mov	sp, r7
 8017324:	bd80      	pop	{r7, pc}
 8017326:	bf00      	nop
 8017328:	20005514 	.word	0x20005514
 801732c:	20005518 	.word	0x20005518
 8017330:	2000551c 	.word	0x2000551c
 8017334:	0802ca84 	.word	0x0802ca84
 8017338:	0802cb0c 	.word	0x0802cb0c
 801733c:	0802cad4 	.word	0x0802cad4
 8017340:	20012bd4 	.word	0x20012bd4
 8017344:	0802cb30 	.word	0x0802cb30
 8017348:	08017079 	.word	0x08017079
 801734c:	0802cb54 	.word	0x0802cb54

08017350 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b084      	sub	sp, #16
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
 8017358:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d002      	beq.n	8017366 <fs_open+0x16>
 8017360:	683b      	ldr	r3, [r7, #0]
 8017362:	2b00      	cmp	r3, #0
 8017364:	d102      	bne.n	801736c <fs_open+0x1c>
    return ERR_ARG;
 8017366:	f06f 030f 	mvn.w	r3, #15
 801736a:	e028      	b.n	80173be <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 801736c:	4b16      	ldr	r3, [pc, #88]	; (80173c8 <fs_open+0x78>)
 801736e:	60fb      	str	r3, [r7, #12]
 8017370:	e020      	b.n	80173b4 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	685b      	ldr	r3, [r3, #4]
 8017376:	4619      	mov	r1, r3
 8017378:	6838      	ldr	r0, [r7, #0]
 801737a:	f7e8 ff29 	bl	80001d0 <strcmp>
 801737e:	4603      	mov	r3, r0
 8017380:	2b00      	cmp	r3, #0
 8017382:	d114      	bne.n	80173ae <fs_open+0x5e>
      file->data = (const char *)f->data;
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	689a      	ldr	r2, [r3, #8]
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	68da      	ldr	r2, [r3, #12]
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	68da      	ldr	r2, [r3, #12]
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	2200      	movs	r2, #0
 80173a0:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	7c1a      	ldrb	r2, [r3, #16]
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80173aa:	2300      	movs	r3, #0
 80173ac:	e007      	b.n	80173be <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	60fb      	str	r3, [r7, #12]
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d1db      	bne.n	8017372 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 80173ba:	f06f 0305 	mvn.w	r3, #5
}
 80173be:	4618      	mov	r0, r3
 80173c0:	3710      	adds	r7, #16
 80173c2:	46bd      	mov	sp, r7
 80173c4:	bd80      	pop	{r7, pc}
 80173c6:	bf00      	nop
 80173c8:	08060794 	.word	0x08060794

080173cc <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80173cc:	b480      	push	{r7}
 80173ce:	b083      	sub	sp, #12
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80173d4:	bf00      	nop
 80173d6:	370c      	adds	r7, #12
 80173d8:	46bd      	mov	sp, r7
 80173da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173de:	4770      	bx	lr

080173e0 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 80173e0:	b480      	push	{r7}
 80173e2:	b083      	sub	sp, #12
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	685a      	ldr	r2, [r3, #4]
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	689b      	ldr	r3, [r3, #8]
 80173f0:	1ad3      	subs	r3, r2, r3
}
 80173f2:	4618      	mov	r0, r3
 80173f4:	370c      	adds	r7, #12
 80173f6:	46bd      	mov	sp, r7
 80173f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173fc:	4770      	bx	lr

080173fe <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 80173fe:	b580      	push	{r7, lr}
 8017400:	b082      	sub	sp, #8
 8017402:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8017404:	f44f 6085 	mov.w	r0, #1064	; 0x428
 8017408:	f003 ff5e 	bl	801b2c8 <mem_malloc>
 801740c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d005      	beq.n	8017420 <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8017414:	f44f 6285 	mov.w	r2, #1064	; 0x428
 8017418:	2100      	movs	r1, #0
 801741a:	6878      	ldr	r0, [r7, #4]
 801741c:	f00f f8ec 	bl	80265f8 <memset>
  }
  return ret;
 8017420:	687b      	ldr	r3, [r7, #4]
}
 8017422:	4618      	mov	r0, r3
 8017424:	3708      	adds	r7, #8
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}

0801742a <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 801742a:	b580      	push	{r7, lr}
 801742c:	b082      	sub	sp, #8
 801742e:	af00      	add	r7, sp, #0
 8017430:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	2b00      	cmp	r3, #0
 8017436:	d002      	beq.n	801743e <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8017438:	6878      	ldr	r0, [r7, #4]
 801743a:	f003 fdab 	bl	801af94 <mem_free>
  }
}
 801743e:	bf00      	nop
 8017440:	3708      	adds	r7, #8
 8017442:	46bd      	mov	sp, r7
 8017444:	bd80      	pop	{r7, pc}

08017446 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8017446:	b580      	push	{r7, lr}
 8017448:	b082      	sub	sp, #8
 801744a:	af00      	add	r7, sp, #0
 801744c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 801744e:	22b4      	movs	r2, #180	; 0xb4
 8017450:	2100      	movs	r1, #0
 8017452:	6878      	ldr	r0, [r7, #4]
 8017454:	f00f f8d0 	bl	80265f8 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8017458:	bf00      	nop
 801745a:	3708      	adds	r7, #8
 801745c:	46bd      	mov	sp, r7
 801745e:	bd80      	pop	{r7, pc}

08017460 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8017460:	b580      	push	{r7, lr}
 8017462:	b082      	sub	sp, #8
 8017464:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8017466:	20b4      	movs	r0, #180	; 0xb4
 8017468:	f003 ff2e 	bl	801b2c8 <mem_malloc>
 801746c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d002      	beq.n	801747a <http_state_alloc+0x1a>
    http_state_init(ret);
 8017474:	6878      	ldr	r0, [r7, #4]
 8017476:	f7ff ffe6 	bl	8017446 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 801747a:	687b      	ldr	r3, [r7, #4]
}
 801747c:	4618      	mov	r0, r3
 801747e:	3708      	adds	r7, #8
 8017480:	46bd      	mov	sp, r7
 8017482:	bd80      	pop	{r7, pc}

08017484 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b082      	sub	sp, #8
 8017488:	af00      	add	r7, sp, #0
 801748a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	695b      	ldr	r3, [r3, #20]
 8017490:	2b00      	cmp	r3, #0
 8017492:	d007      	beq.n	80174a4 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	695b      	ldr	r3, [r3, #20]
 8017498:	4618      	mov	r0, r3
 801749a:	f7ff ff97 	bl	80173cc <fs_close>
    hs->handle = NULL;
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	2200      	movs	r2, #0
 80174a2:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d007      	beq.n	80174bc <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174b0:	4618      	mov	r0, r3
 80174b2:	f7ff ffba 	bl	801742a <http_ssi_state_free>
    hs->ssi = NULL;
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	2200      	movs	r2, #0
 80174ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	6a1b      	ldr	r3, [r3, #32]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d007      	beq.n	80174d4 <http_state_eof+0x50>
    pbuf_free(hs->req);
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	6a1b      	ldr	r3, [r3, #32]
 80174c8:	4618      	mov	r0, r3
 80174ca:	f004 ff9d 	bl	801c408 <pbuf_free>
    hs->req = NULL;
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	2200      	movs	r2, #0
 80174d2:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 80174d4:	bf00      	nop
 80174d6:	3708      	adds	r7, #8
 80174d8:	46bd      	mov	sp, r7
 80174da:	bd80      	pop	{r7, pc}

080174dc <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 80174dc:	b580      	push	{r7, lr}
 80174de:	b082      	sub	sp, #8
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d005      	beq.n	80174f6 <http_state_free+0x1a>
    http_state_eof(hs);
 80174ea:	6878      	ldr	r0, [r7, #4]
 80174ec:	f7ff ffca 	bl	8017484 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 80174f0:	6878      	ldr	r0, [r7, #4]
 80174f2:	f003 fd4f 	bl	801af94 <mem_free>
  }
}
 80174f6:	bf00      	nop
 80174f8:	3708      	adds	r7, #8
 80174fa:	46bd      	mov	sp, r7
 80174fc:	bd80      	pop	{r7, pc}
	...

08017500 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b086      	sub	sp, #24
 8017504:	af00      	add	r7, sp, #0
 8017506:	60f8      	str	r0, [r7, #12]
 8017508:	60b9      	str	r1, [r7, #8]
 801750a:	607a      	str	r2, [r7, #4]
 801750c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d106      	bne.n	8017522 <http_write+0x22>
 8017514:	4b2c      	ldr	r3, [pc, #176]	; (80175c8 <http_write+0xc8>)
 8017516:	f240 2215 	movw	r2, #533	; 0x215
 801751a:	492c      	ldr	r1, [pc, #176]	; (80175cc <http_write+0xcc>)
 801751c:	482c      	ldr	r0, [pc, #176]	; (80175d0 <http_write+0xd0>)
 801751e:	f00f fb9b 	bl	8026c58 <iprintf>
  len = *length;
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	881b      	ldrh	r3, [r3, #0]
 8017526:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8017528:	8afb      	ldrh	r3, [r7, #22]
 801752a:	2b00      	cmp	r3, #0
 801752c:	d101      	bne.n	8017532 <http_write+0x32>
    return ERR_OK;
 801752e:	2300      	movs	r3, #0
 8017530:	e045      	b.n	80175be <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017538:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 801753a:	8aba      	ldrh	r2, [r7, #20]
 801753c:	8afb      	ldrh	r3, [r7, #22]
 801753e:	429a      	cmp	r2, r3
 8017540:	d201      	bcs.n	8017546 <http_write+0x46>
    len = max_len;
 8017542:	8abb      	ldrh	r3, [r7, #20]
 8017544:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801754a:	005b      	lsls	r3, r3, #1
 801754c:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 801754e:	8afa      	ldrh	r2, [r7, #22]
 8017550:	8abb      	ldrh	r3, [r7, #20]
 8017552:	429a      	cmp	r2, r3
 8017554:	d901      	bls.n	801755a <http_write+0x5a>
    len = max_len;
 8017556:	8abb      	ldrh	r3, [r7, #20]
 8017558:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 801755a:	78fb      	ldrb	r3, [r7, #3]
 801755c:	8afa      	ldrh	r2, [r7, #22]
 801755e:	68b9      	ldr	r1, [r7, #8]
 8017560:	68f8      	ldr	r0, [r7, #12]
 8017562:	f009 fe6d 	bl	8021240 <tcp_write>
 8017566:	4603      	mov	r3, r0
 8017568:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 801756a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801756e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017572:	d10f      	bne.n	8017594 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801757a:	2b00      	cmp	r3, #0
 801757c:	d004      	beq.n	8017588 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8017584:	2b08      	cmp	r3, #8
 8017586:	d902      	bls.n	801758e <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8017588:	2301      	movs	r3, #1
 801758a:	82fb      	strh	r3, [r7, #22]
 801758c:	e002      	b.n	8017594 <http_write+0x94>
      } else {
        len /= 2;
 801758e:	8afb      	ldrh	r3, [r7, #22]
 8017590:	085b      	lsrs	r3, r3, #1
 8017592:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8017594:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801759c:	d102      	bne.n	80175a4 <http_write+0xa4>
 801759e:	8afb      	ldrh	r3, [r7, #22]
 80175a0:	2b01      	cmp	r3, #1
 80175a2:	d8da      	bhi.n	801755a <http_write+0x5a>

  if (err == ERR_OK) {
 80175a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d103      	bne.n	80175b4 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	8afa      	ldrh	r2, [r7, #22]
 80175b0:	801a      	strh	r2, [r3, #0]
 80175b2:	e002      	b.n	80175ba <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	2200      	movs	r2, #0
 80175b8:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 80175ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80175be:	4618      	mov	r0, r3
 80175c0:	3718      	adds	r7, #24
 80175c2:	46bd      	mov	sp, r7
 80175c4:	bd80      	pop	{r7, pc}
 80175c6:	bf00      	nop
 80175c8:	0802cbb0 	.word	0x0802cbb0
 80175cc:	0802cbe8 	.word	0x0802cbe8
 80175d0:	0802cbf8 	.word	0x0802cbf8

080175d4 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b086      	sub	sp, #24
 80175d8:	af00      	add	r7, sp, #0
 80175da:	60f8      	str	r0, [r7, #12]
 80175dc:	60b9      	str	r1, [r7, #8]
 80175de:	4613      	mov	r3, r2
 80175e0:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 80175e2:	68bb      	ldr	r3, [r7, #8]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d00c      	beq.n	8017602 <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 80175e8:	68bb      	ldr	r3, [r7, #8]
 80175ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d007      	beq.n	8017602 <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 80175f2:	4b1f      	ldr	r3, [pc, #124]	; (8017670 <http_close_or_abort_conn+0x9c>)
 80175f4:	2200      	movs	r2, #0
 80175f6:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80175f8:	223f      	movs	r2, #63	; 0x3f
 80175fa:	491d      	ldr	r1, [pc, #116]	; (8017670 <http_close_or_abort_conn+0x9c>)
 80175fc:	68b8      	ldr	r0, [r7, #8]
 80175fe:	f7f3 fe05 	bl	800b20c <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8017602:	2100      	movs	r1, #0
 8017604:	68f8      	ldr	r0, [r7, #12]
 8017606:	f006 fedd 	bl	801e3c4 <tcp_arg>
  altcp_recv(pcb, NULL);
 801760a:	2100      	movs	r1, #0
 801760c:	68f8      	ldr	r0, [r7, #12]
 801760e:	f006 feeb 	bl	801e3e8 <tcp_recv>
  altcp_err(pcb, NULL);
 8017612:	2100      	movs	r1, #0
 8017614:	68f8      	ldr	r0, [r7, #12]
 8017616:	f006 ff2b 	bl	801e470 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 801761a:	2200      	movs	r2, #0
 801761c:	2100      	movs	r1, #0
 801761e:	68f8      	ldr	r0, [r7, #12]
 8017620:	f006 ff60 	bl	801e4e4 <tcp_poll>
  altcp_sent(pcb, NULL);
 8017624:	2100      	movs	r1, #0
 8017626:	68f8      	ldr	r0, [r7, #12]
 8017628:	f006 ff00 	bl	801e42c <tcp_sent>
  if (hs != NULL) {
 801762c:	68bb      	ldr	r3, [r7, #8]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d002      	beq.n	8017638 <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 8017632:	68b8      	ldr	r0, [r7, #8]
 8017634:	f7ff ff52 	bl	80174dc <http_state_free>
  }

  if (abort_conn) {
 8017638:	79fb      	ldrb	r3, [r7, #7]
 801763a:	2b00      	cmp	r3, #0
 801763c:	d004      	beq.n	8017648 <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
 801763e:	68f8      	ldr	r0, [r7, #12]
 8017640:	f005 fcea 	bl	801d018 <tcp_abort>
    return ERR_OK;
 8017644:	2300      	movs	r3, #0
 8017646:	e00f      	b.n	8017668 <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
 8017648:	68f8      	ldr	r0, [r7, #12]
 801764a:	f005 fbfb 	bl	801ce44 <tcp_close>
 801764e:	4603      	mov	r3, r0
 8017650:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8017652:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d004      	beq.n	8017664 <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 801765a:	2204      	movs	r2, #4
 801765c:	4905      	ldr	r1, [pc, #20]	; (8017674 <http_close_or_abort_conn+0xa0>)
 801765e:	68f8      	ldr	r0, [r7, #12]
 8017660:	f006 ff40 	bl	801e4e4 <tcp_poll>
  }
  return err;
 8017664:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017668:	4618      	mov	r0, r3
 801766a:	3718      	adds	r7, #24
 801766c:	46bd      	mov	sp, r7
 801766e:	bd80      	pop	{r7, pc}
 8017670:	20005920 	.word	0x20005920
 8017674:	08018aa3 	.word	0x08018aa3

08017678 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8017678:	b580      	push	{r7, lr}
 801767a:	b082      	sub	sp, #8
 801767c:	af00      	add	r7, sp, #0
 801767e:	6078      	str	r0, [r7, #4]
 8017680:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8017682:	2200      	movs	r2, #0
 8017684:	6839      	ldr	r1, [r7, #0]
 8017686:	6878      	ldr	r0, [r7, #4]
 8017688:	f7ff ffa4 	bl	80175d4 <http_close_or_abort_conn>
 801768c:	4603      	mov	r3, r0
}
 801768e:	4618      	mov	r0, r3
 8017690:	3708      	adds	r7, #8
 8017692:	46bd      	mov	sp, r7
 8017694:	bd80      	pop	{r7, pc}

08017696 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8017696:	b580      	push	{r7, lr}
 8017698:	b082      	sub	sp, #8
 801769a:	af00      	add	r7, sp, #0
 801769c:	6078      	str	r0, [r7, #4]
 801769e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 80176a0:	6839      	ldr	r1, [r7, #0]
 80176a2:	6878      	ldr	r0, [r7, #4]
 80176a4:	f7ff ffe8 	bl	8017678 <http_close_conn>
  }
}
 80176a8:	bf00      	nop
 80176aa:	3708      	adds	r7, #8
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}

080176b0 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b086      	sub	sp, #24
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
 80176b8:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 80176ba:	683b      	ldr	r3, [r7, #0]
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d003      	beq.n	80176c8 <extract_uri_parameters+0x18>
 80176c0:	683b      	ldr	r3, [r7, #0]
 80176c2:	781b      	ldrb	r3, [r3, #0]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d101      	bne.n	80176cc <extract_uri_parameters+0x1c>
    return (0);
 80176c8:	2300      	movs	r3, #0
 80176ca:	e04b      	b.n	8017764 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 80176cc:	683b      	ldr	r3, [r7, #0]
 80176ce:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80176d0:	2300      	movs	r3, #0
 80176d2:	613b      	str	r3, [r7, #16]
 80176d4:	e03f      	b.n	8017756 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	693a      	ldr	r2, [r7, #16]
 80176da:	320c      	adds	r2, #12
 80176dc:	6979      	ldr	r1, [r7, #20]
 80176de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 80176e2:	697b      	ldr	r3, [r7, #20]
 80176e4:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 80176e6:	2126      	movs	r1, #38	; 0x26
 80176e8:	6978      	ldr	r0, [r7, #20]
 80176ea:	f00f fcd9 	bl	80270a0 <strchr>
 80176ee:	6178      	str	r0, [r7, #20]
    if (pair) {
 80176f0:	697b      	ldr	r3, [r7, #20]
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d006      	beq.n	8017704 <extract_uri_parameters+0x54>
      *pair = '\0';
 80176f6:	697b      	ldr	r3, [r7, #20]
 80176f8:	2200      	movs	r2, #0
 80176fa:	701a      	strb	r2, [r3, #0]
      pair++;
 80176fc:	697b      	ldr	r3, [r7, #20]
 80176fe:	3301      	adds	r3, #1
 8017700:	617b      	str	r3, [r7, #20]
 8017702:	e00c      	b.n	801771e <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8017704:	2120      	movs	r1, #32
 8017706:	68f8      	ldr	r0, [r7, #12]
 8017708:	f00f fcca 	bl	80270a0 <strchr>
 801770c:	6178      	str	r0, [r7, #20]
      if (pair) {
 801770e:	697b      	ldr	r3, [r7, #20]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d002      	beq.n	801771a <extract_uri_parameters+0x6a>
        *pair = '\0';
 8017714:	697b      	ldr	r3, [r7, #20]
 8017716:	2200      	movs	r2, #0
 8017718:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 801771a:	2300      	movs	r3, #0
 801771c:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 801771e:	213d      	movs	r1, #61	; 0x3d
 8017720:	68f8      	ldr	r0, [r7, #12]
 8017722:	f00f fcbd 	bl	80270a0 <strchr>
 8017726:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d00a      	beq.n	8017744 <extract_uri_parameters+0x94>
      *equals = '\0';
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	2200      	movs	r2, #0
 8017732:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	1c59      	adds	r1, r3, #1
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	693a      	ldr	r2, [r7, #16]
 801773c:	321c      	adds	r2, #28
 801773e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8017742:	e005      	b.n	8017750 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	693a      	ldr	r2, [r7, #16]
 8017748:	321c      	adds	r2, #28
 801774a:	2100      	movs	r1, #0
 801774c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8017750:	693b      	ldr	r3, [r7, #16]
 8017752:	3301      	adds	r3, #1
 8017754:	613b      	str	r3, [r7, #16]
 8017756:	693b      	ldr	r3, [r7, #16]
 8017758:	2b0f      	cmp	r3, #15
 801775a:	dc02      	bgt.n	8017762 <extract_uri_parameters+0xb2>
 801775c:	697b      	ldr	r3, [r7, #20]
 801775e:	2b00      	cmp	r3, #0
 8017760:	d1b9      	bne.n	80176d6 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8017762:	693b      	ldr	r3, [r7, #16]
}
 8017764:	4618      	mov	r0, r3
 8017766:	3718      	adds	r7, #24
 8017768:	46bd      	mov	sp, r7
 801776a:	bd80      	pop	{r7, pc}

0801776c <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 801776c:	b590      	push	{r4, r7, lr}
 801776e:	b089      	sub	sp, #36	; 0x24
 8017770:	af02      	add	r7, sp, #8
 8017772:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d106      	bne.n	8017788 <get_tag_insert+0x1c>
 801777a:	4b5b      	ldr	r3, [pc, #364]	; (80178e8 <get_tag_insert+0x17c>)
 801777c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8017780:	495a      	ldr	r1, [pc, #360]	; (80178ec <get_tag_insert+0x180>)
 8017782:	485b      	ldr	r0, [pc, #364]	; (80178f0 <get_tag_insert+0x184>)
 8017784:	f00f fa68 	bl	8026c58 <iprintf>
  ssi = hs->ssi;
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801778c:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 801778e:	693b      	ldr	r3, [r7, #16]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d106      	bne.n	80177a2 <get_tag_insert+0x36>
 8017794:	4b54      	ldr	r3, [pc, #336]	; (80178e8 <get_tag_insert+0x17c>)
 8017796:	f240 3202 	movw	r2, #770	; 0x302
 801779a:	4956      	ldr	r1, [pc, #344]	; (80178f4 <get_tag_insert+0x188>)
 801779c:	4854      	ldr	r0, [pc, #336]	; (80178f0 <get_tag_insert+0x184>)
 801779e:	f00f fa5b 	bl	8026c58 <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
 80177a2:	693b      	ldr	r3, [r7, #16]
 80177a4:	8a9b      	ldrh	r3, [r3, #20]
 80177a6:	81fb      	strh	r3, [r7, #14]
  ssi->tag_part = HTTPD_LAST_TAG_PART;
 80177a8:	693b      	ldr	r3, [r7, #16]
 80177aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80177ae:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 80177b0:	4b51      	ldr	r3, [pc, #324]	; (80178f8 <get_tag_insert+0x18c>)
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d034      	beq.n	8017822 <get_tag_insert+0xb6>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 80177b8:	4b50      	ldr	r3, [pc, #320]	; (80178fc <get_tag_insert+0x190>)
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d030      	beq.n	8017822 <get_tag_insert+0xb6>
 80177c0:	4b4f      	ldr	r3, [pc, #316]	; (8017900 <get_tag_insert+0x194>)
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d02c      	beq.n	8017822 <get_tag_insert+0xb6>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80177c8:	2300      	movs	r3, #0
 80177ca:	617b      	str	r3, [r7, #20]
 80177cc:	e024      	b.n	8017818 <get_tag_insert+0xac>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 80177ce:	693b      	ldr	r3, [r7, #16]
 80177d0:	f103 0018 	add.w	r0, r3, #24
 80177d4:	4b49      	ldr	r3, [pc, #292]	; (80178fc <get_tag_insert+0x190>)
 80177d6:	681a      	ldr	r2, [r3, #0]
 80177d8:	697b      	ldr	r3, [r7, #20]
 80177da:	009b      	lsls	r3, r3, #2
 80177dc:	4413      	add	r3, r2
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	4619      	mov	r1, r3
 80177e2:	f7e8 fcf5 	bl	80001d0 <strcmp>
 80177e6:	4603      	mov	r3, r0
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d112      	bne.n	8017812 <get_tag_insert+0xa6>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 80177ec:	4b42      	ldr	r3, [pc, #264]	; (80178f8 <get_tag_insert+0x18c>)
 80177ee:	681c      	ldr	r4, [r3, #0]
 80177f0:	693b      	ldr	r3, [r7, #16]
 80177f2:	f103 0123 	add.w	r1, r3, #35	; 0x23
 80177f6:	693b      	ldr	r3, [r7, #16]
 80177f8:	3314      	adds	r3, #20
 80177fa:	89fa      	ldrh	r2, [r7, #14]
 80177fc:	9300      	str	r3, [sp, #0]
 80177fe:	4613      	mov	r3, r2
 8017800:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017804:	6978      	ldr	r0, [r7, #20]
 8017806:	47a0      	blx	r4
 8017808:	4603      	mov	r3, r0
 801780a:	461a      	mov	r2, r3
 801780c:	693b      	ldr	r3, [r7, #16]
 801780e:	825a      	strh	r2, [r3, #18]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8017810:	e066      	b.n	80178e0 <get_tag_insert+0x174>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8017812:	697b      	ldr	r3, [r7, #20]
 8017814:	3301      	adds	r3, #1
 8017816:	617b      	str	r3, [r7, #20]
 8017818:	4b39      	ldr	r3, [pc, #228]	; (8017900 <get_tag_insert+0x194>)
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	697a      	ldr	r2, [r7, #20]
 801781e:	429a      	cmp	r2, r3
 8017820:	dbd5      	blt.n	80177ce <get_tag_insert+0x62>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8017822:	693b      	ldr	r3, [r7, #16]
 8017824:	3318      	adds	r3, #24
 8017826:	4618      	mov	r0, r3
 8017828:	f7e8 fcdc 	bl	80001e4 <strlen>
 801782c:	4603      	mov	r3, r0
 801782e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8017832:	4293      	cmp	r3, r2
 8017834:	d81b      	bhi.n	801786e <get_tag_insert+0x102>
 8017836:	693b      	ldr	r3, [r7, #16]
 8017838:	3318      	adds	r3, #24
 801783a:	4618      	mov	r0, r3
 801783c:	f7e8 fcd2 	bl	80001e4 <strlen>
 8017840:	4603      	mov	r3, r0
 8017842:	2b0b      	cmp	r3, #11
 8017844:	d813      	bhi.n	801786e <get_tag_insert+0x102>
 8017846:	693b      	ldr	r3, [r7, #16]
 8017848:	3318      	adds	r3, #24
 801784a:	4618      	mov	r0, r3
 801784c:	f7e8 fcca 	bl	80001e4 <strlen>
 8017850:	4603      	mov	r3, r0
 8017852:	f240 32e6 	movw	r2, #998	; 0x3e6
 8017856:	4293      	cmp	r3, r2
 8017858:	d806      	bhi.n	8017868 <get_tag_insert+0xfc>
 801785a:	693b      	ldr	r3, [r7, #16]
 801785c:	3318      	adds	r3, #24
 801785e:	4618      	mov	r0, r3
 8017860:	f7e8 fcc0 	bl	80001e4 <strlen>
 8017864:	4603      	mov	r3, r0
 8017866:	e003      	b.n	8017870 <get_tag_insert+0x104>
 8017868:	f240 33e7 	movw	r3, #999	; 0x3e7
 801786c:	e000      	b.n	8017870 <get_tag_insert+0x104>
 801786e:	230b      	movs	r3, #11
 8017870:	60bb      	str	r3, [r7, #8]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8017872:	693b      	ldr	r3, [r7, #16]
 8017874:	3323      	adds	r3, #35	; 0x23
 8017876:	2212      	movs	r2, #18
 8017878:	4922      	ldr	r1, [pc, #136]	; (8017904 <get_tag_insert+0x198>)
 801787a:	4618      	mov	r0, r3
 801787c:	f00e fe94 	bl	80265a8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8017880:	693b      	ldr	r3, [r7, #16]
 8017882:	f103 0035 	add.w	r0, r3, #53	; 0x35
 8017886:	693b      	ldr	r3, [r7, #16]
 8017888:	3318      	adds	r3, #24
 801788a:	68ba      	ldr	r2, [r7, #8]
 801788c:	4619      	mov	r1, r3
 801788e:	f00e fe8b 	bl	80265a8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8017892:	68bb      	ldr	r3, [r7, #8]
 8017894:	3312      	adds	r3, #18
 8017896:	3320      	adds	r3, #32
 8017898:	693a      	ldr	r2, [r7, #16]
 801789a:	4413      	add	r3, r2
 801789c:	3303      	adds	r3, #3
 801789e:	2207      	movs	r2, #7
 80178a0:	4919      	ldr	r1, [pc, #100]	; (8017908 <get_tag_insert+0x19c>)
 80178a2:	4618      	mov	r0, r3
 80178a4:	f00e fe80 	bl	80265a8 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 80178a8:	68bb      	ldr	r3, [r7, #8]
 80178aa:	3319      	adds	r3, #25
 80178ac:	693a      	ldr	r2, [r7, #16]
 80178ae:	4413      	add	r3, r2
 80178b0:	2200      	movs	r2, #0
 80178b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  len = strlen(ssi->tag_insert);
 80178b6:	693b      	ldr	r3, [r7, #16]
 80178b8:	3323      	adds	r3, #35	; 0x23
 80178ba:	4618      	mov	r0, r3
 80178bc:	f7e8 fc92 	bl	80001e4 <strlen>
 80178c0:	60b8      	str	r0, [r7, #8]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 80178c2:	68bb      	ldr	r3, [r7, #8]
 80178c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80178c8:	d306      	bcc.n	80178d8 <get_tag_insert+0x16c>
 80178ca:	4b07      	ldr	r3, [pc, #28]	; (80178e8 <get_tag_insert+0x17c>)
 80178cc:	f240 323b 	movw	r2, #827	; 0x33b
 80178d0:	490e      	ldr	r1, [pc, #56]	; (801790c <get_tag_insert+0x1a0>)
 80178d2:	4807      	ldr	r0, [pc, #28]	; (80178f0 <get_tag_insert+0x184>)
 80178d4:	f00f f9c0 	bl	8026c58 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 80178d8:	68bb      	ldr	r3, [r7, #8]
 80178da:	b29a      	uxth	r2, r3
 80178dc:	693b      	ldr	r3, [r7, #16]
 80178de:	825a      	strh	r2, [r3, #18]
}
 80178e0:	371c      	adds	r7, #28
 80178e2:	46bd      	mov	sp, r7
 80178e4:	bd90      	pop	{r4, r7, pc}
 80178e6:	bf00      	nop
 80178e8:	0802cbb0 	.word	0x0802cbb0
 80178ec:	0802cc20 	.word	0x0802cc20
 80178f0:	0802cbf8 	.word	0x0802cbf8
 80178f4:	0802cc2c 	.word	0x0802cc2c
 80178f8:	20005960 	.word	0x20005960
 80178fc:	20005968 	.word	0x20005968
 8017900:	20005964 	.word	0x20005964
 8017904:	0802cc38 	.word	0x0802cc38
 8017908:	0802cc4c 	.word	0x0802cc4c
 801790c:	0802cc54 	.word	0x0802cc54

08017910 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8017910:	b580      	push	{r7, lr}
 8017912:	b084      	sub	sp, #16
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
 8017918:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 801791a:	683b      	ldr	r3, [r7, #0]
 801791c:	695b      	ldr	r3, [r3, #20]
 801791e:	2b00      	cmp	r3, #0
 8017920:	d105      	bne.n	801792e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8017922:	6839      	ldr	r1, [r7, #0]
 8017924:	6878      	ldr	r0, [r7, #4]
 8017926:	f7ff feb6 	bl	8017696 <http_eof>
    return 0;
 801792a:	2300      	movs	r3, #0
 801792c:	e016      	b.n	801795c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 801792e:	683b      	ldr	r3, [r7, #0]
 8017930:	695b      	ldr	r3, [r3, #20]
 8017932:	4618      	mov	r0, r3
 8017934:	f7ff fd54 	bl	80173e0 <fs_bytes_left>
 8017938:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	2b00      	cmp	r3, #0
 801793e:	dc05      	bgt.n	801794c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8017940:	6839      	ldr	r1, [r7, #0]
 8017942:	6878      	ldr	r0, [r7, #4]
 8017944:	f7ff fea7 	bl	8017696 <http_eof>
    return 0;
 8017948:	2300      	movs	r3, #0
 801794a:	e007      	b.n	801795c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 801794c:	4b05      	ldr	r3, [pc, #20]	; (8017964 <http_check_eof+0x54>)
 801794e:	f240 4299 	movw	r2, #1177	; 0x499
 8017952:	4905      	ldr	r1, [pc, #20]	; (8017968 <http_check_eof+0x58>)
 8017954:	4805      	ldr	r0, [pc, #20]	; (801796c <http_check_eof+0x5c>)
 8017956:	f00f f97f 	bl	8026c58 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 801795a:	2301      	movs	r3, #1
}
 801795c:	4618      	mov	r0, r3
 801795e:	3710      	adds	r7, #16
 8017960:	46bd      	mov	sp, r7
 8017962:	bd80      	pop	{r7, pc}
 8017964:	0802cbb0 	.word	0x0802cbb0
 8017968:	0802cc64 	.word	0x0802cc64
 801796c:	0802cbf8 	.word	0x0802cbf8

08017970 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8017970:	b580      	push	{r7, lr}
 8017972:	b084      	sub	sp, #16
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]
 8017978:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 801797a:	2300      	movs	r3, #0
 801797c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 801797e:	683b      	ldr	r3, [r7, #0]
 8017980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017982:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017986:	4293      	cmp	r3, r2
 8017988:	d803      	bhi.n	8017992 <http_send_data_nonssi+0x22>
 801798a:	683b      	ldr	r3, [r7, #0]
 801798c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801798e:	b29b      	uxth	r3, r3
 8017990:	e001      	b.n	8017996 <http_send_data_nonssi+0x26>
 8017992:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017996:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017998:	683b      	ldr	r3, [r7, #0]
 801799a:	6999      	ldr	r1, [r3, #24]
 801799c:	f107 020c 	add.w	r2, r7, #12
 80179a0:	2300      	movs	r3, #0
 80179a2:	6878      	ldr	r0, [r7, #4]
 80179a4:	f7ff fdac 	bl	8017500 <http_write>
 80179a8:	4603      	mov	r3, r0
 80179aa:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 80179ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d10d      	bne.n	80179d0 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 80179b4:	2301      	movs	r3, #1
 80179b6:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 80179b8:	683b      	ldr	r3, [r7, #0]
 80179ba:	699b      	ldr	r3, [r3, #24]
 80179bc:	89ba      	ldrh	r2, [r7, #12]
 80179be:	441a      	add	r2, r3
 80179c0:	683b      	ldr	r3, [r7, #0]
 80179c2:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 80179c4:	683b      	ldr	r3, [r7, #0]
 80179c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179c8:	89ba      	ldrh	r2, [r7, #12]
 80179ca:	1a9a      	subs	r2, r3, r2
 80179cc:	683b      	ldr	r3, [r7, #0]
 80179ce:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 80179d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80179d2:	4618      	mov	r0, r3
 80179d4:	3710      	adds	r7, #16
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bd80      	pop	{r7, pc}
	...

080179dc <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	b086      	sub	sp, #24
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	6078      	str	r0, [r7, #4]
 80179e4:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 80179e6:	2300      	movs	r3, #0
 80179e8:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 80179ea:	2300      	movs	r3, #0
 80179ec:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 80179ee:	683b      	ldr	r3, [r7, #0]
 80179f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179f2:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80179f4:	693b      	ldr	r3, [r7, #16]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d106      	bne.n	8017a08 <http_send_data_ssi+0x2c>
 80179fa:	4b89      	ldr	r3, [pc, #548]	; (8017c20 <http_send_data_ssi+0x244>)
 80179fc:	f240 42c7 	movw	r2, #1223	; 0x4c7
 8017a00:	4988      	ldr	r1, [pc, #544]	; (8017c24 <http_send_data_ssi+0x248>)
 8017a02:	4889      	ldr	r0, [pc, #548]	; (8017c28 <http_send_data_ssi+0x24c>)
 8017a04:	f00f f928 	bl	8026c58 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017a0e:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8017a10:	693b      	ldr	r3, [r7, #16]
 8017a12:	681a      	ldr	r2, [r3, #0]
 8017a14:	683b      	ldr	r3, [r7, #0]
 8017a16:	699b      	ldr	r3, [r3, #24]
 8017a18:	429a      	cmp	r2, r3
 8017a1a:	f240 82c5 	bls.w	8017fa8 <http_send_data_ssi+0x5cc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8017a1e:	693b      	ldr	r3, [r7, #16]
 8017a20:	681a      	ldr	r2, [r3, #0]
 8017a22:	683b      	ldr	r3, [r7, #0]
 8017a24:	699b      	ldr	r3, [r3, #24]
 8017a26:	1ad3      	subs	r3, r2, r3
 8017a28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017a2c:	4293      	cmp	r3, r2
 8017a2e:	dc06      	bgt.n	8017a3e <http_send_data_ssi+0x62>
 8017a30:	693b      	ldr	r3, [r7, #16]
 8017a32:	681a      	ldr	r2, [r3, #0]
 8017a34:	683b      	ldr	r3, [r7, #0]
 8017a36:	699b      	ldr	r3, [r3, #24]
 8017a38:	1ad3      	subs	r3, r2, r3
 8017a3a:	b29b      	uxth	r3, r3
 8017a3c:	e001      	b.n	8017a42 <http_send_data_ssi+0x66>
 8017a3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a42:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017a44:	683b      	ldr	r3, [r7, #0]
 8017a46:	6999      	ldr	r1, [r3, #24]
 8017a48:	f107 020e 	add.w	r2, r7, #14
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	6878      	ldr	r0, [r7, #4]
 8017a50:	f7ff fd56 	bl	8017500 <http_write>
 8017a54:	4603      	mov	r3, r0
 8017a56:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8017a58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d10d      	bne.n	8017a7c <http_send_data_ssi+0xa0>
      data_to_send = 1;
 8017a60:	2301      	movs	r3, #1
 8017a62:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8017a64:	683b      	ldr	r3, [r7, #0]
 8017a66:	699b      	ldr	r3, [r3, #24]
 8017a68:	89fa      	ldrh	r2, [r7, #14]
 8017a6a:	441a      	add	r2, r3
 8017a6c:	683b      	ldr	r3, [r7, #0]
 8017a6e:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8017a70:	683b      	ldr	r3, [r7, #0]
 8017a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a74:	89fa      	ldrh	r2, [r7, #14]
 8017a76:	1a9a      	subs	r2, r3, r2
 8017a78:	683b      	ldr	r3, [r7, #0]
 8017a7a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	f040 8290 	bne.w	8017fa8 <http_send_data_ssi+0x5cc>
      return data_to_send;
 8017a88:	7dbb      	ldrb	r3, [r7, #22]
 8017a8a:	e2d6      	b.n	801803a <http_send_data_ssi+0x65e>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8017a8c:	89fb      	ldrh	r3, [r7, #14]
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d101      	bne.n	8017a96 <http_send_data_ssi+0xba>
      return data_to_send;
 8017a92:	7dbb      	ldrb	r3, [r7, #22]
 8017a94:	e2d1      	b.n	801803a <http_send_data_ssi+0x65e>
    }
    switch (ssi->tag_state) {
 8017a96:	693b      	ldr	r3, [r7, #16]
 8017a98:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 8017a9c:	2b04      	cmp	r3, #4
 8017a9e:	f200 8282 	bhi.w	8017fa6 <http_send_data_ssi+0x5ca>
 8017aa2:	a201      	add	r2, pc, #4	; (adr r2, 8017aa8 <http_send_data_ssi+0xcc>)
 8017aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017aa8:	08017abd 	.word	0x08017abd
 8017aac:	08017b17 	.word	0x08017b17
 8017ab0:	08017b89 	.word	0x08017b89
 8017ab4:	08017cd1 	.word	0x08017cd1
 8017ab8:	08017e47 	.word	0x08017e47
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8017abc:	2300      	movs	r3, #0
 8017abe:	757b      	strb	r3, [r7, #21]
 8017ac0:	e01b      	b.n	8017afa <http_send_data_ssi+0x11e>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8017ac2:	693b      	ldr	r3, [r7, #16]
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	781a      	ldrb	r2, [r3, #0]
 8017ac8:	7d7b      	ldrb	r3, [r7, #21]
 8017aca:	4958      	ldr	r1, [pc, #352]	; (8017c2c <http_send_data_ssi+0x250>)
 8017acc:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8017ad0:	781b      	ldrb	r3, [r3, #0]
 8017ad2:	429a      	cmp	r2, r3
 8017ad4:	d10e      	bne.n	8017af4 <http_send_data_ssi+0x118>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 8017ad6:	693b      	ldr	r3, [r7, #16]
 8017ad8:	7d7a      	ldrb	r2, [r7, #21]
 8017ada:	759a      	strb	r2, [r3, #22]
            ssi->tag_state = TAG_LEADIN;
 8017adc:	693b      	ldr	r3, [r7, #16]
 8017ade:	2201      	movs	r2, #1
 8017ae0:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            ssi->tag_index = 1;
 8017ae4:	693b      	ldr	r3, [r7, #16]
 8017ae6:	2201      	movs	r2, #1
 8017ae8:	821a      	strh	r2, [r3, #16]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
 8017aea:	693b      	ldr	r3, [r7, #16]
 8017aec:	681a      	ldr	r2, [r3, #0]
 8017aee:	693b      	ldr	r3, [r7, #16]
 8017af0:	605a      	str	r2, [r3, #4]
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 8017af2:	e005      	b.n	8017b00 <http_send_data_ssi+0x124>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8017af4:	7d7b      	ldrb	r3, [r7, #21]
 8017af6:	3301      	adds	r3, #1
 8017af8:	757b      	strb	r3, [r7, #21]
 8017afa:	7d7b      	ldrb	r3, [r7, #21]
 8017afc:	2b01      	cmp	r3, #1
 8017afe:	d9e0      	bls.n	8017ac2 <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8017b00:	693b      	ldr	r3, [r7, #16]
 8017b02:	68db      	ldr	r3, [r3, #12]
 8017b04:	1e5a      	subs	r2, r3, #1
 8017b06:	693b      	ldr	r3, [r7, #16]
 8017b08:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 8017b0a:	693b      	ldr	r3, [r7, #16]
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	1c5a      	adds	r2, r3, #1
 8017b10:	693b      	ldr	r3, [r7, #16]
 8017b12:	601a      	str	r2, [r3, #0]
        break;
 8017b14:	e248      	b.n	8017fa8 <http_send_data_ssi+0x5cc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8017b16:	693b      	ldr	r3, [r7, #16]
 8017b18:	7d9b      	ldrb	r3, [r3, #22]
 8017b1a:	461a      	mov	r2, r3
 8017b1c:	4b43      	ldr	r3, [pc, #268]	; (8017c2c <http_send_data_ssi+0x250>)
 8017b1e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8017b22:	693a      	ldr	r2, [r7, #16]
 8017b24:	8a12      	ldrh	r2, [r2, #16]
 8017b26:	4413      	add	r3, r2
 8017b28:	781b      	ldrb	r3, [r3, #0]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d107      	bne.n	8017b3e <http_send_data_ssi+0x162>
          ssi->tag_index = 0;
 8017b2e:	693b      	ldr	r3, [r7, #16]
 8017b30:	2200      	movs	r2, #0
 8017b32:	821a      	strh	r2, [r3, #16]
          ssi->tag_state = TAG_FOUND;
 8017b34:	693b      	ldr	r3, [r7, #16]
 8017b36:	2202      	movs	r2, #2
 8017b38:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 8017b3c:	e234      	b.n	8017fa8 <http_send_data_ssi+0x5cc>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8017b3e:	693b      	ldr	r3, [r7, #16]
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	781a      	ldrb	r2, [r3, #0]
 8017b44:	693b      	ldr	r3, [r7, #16]
 8017b46:	7d9b      	ldrb	r3, [r3, #22]
 8017b48:	4619      	mov	r1, r3
 8017b4a:	4b38      	ldr	r3, [pc, #224]	; (8017c2c <http_send_data_ssi+0x250>)
 8017b4c:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8017b50:	6939      	ldr	r1, [r7, #16]
 8017b52:	8a09      	ldrh	r1, [r1, #16]
 8017b54:	440b      	add	r3, r1
 8017b56:	781b      	ldrb	r3, [r3, #0]
 8017b58:	429a      	cmp	r2, r3
 8017b5a:	d106      	bne.n	8017b6a <http_send_data_ssi+0x18e>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8017b5c:	693b      	ldr	r3, [r7, #16]
 8017b5e:	8a1b      	ldrh	r3, [r3, #16]
 8017b60:	3301      	adds	r3, #1
 8017b62:	b29a      	uxth	r2, r3
 8017b64:	693b      	ldr	r3, [r7, #16]
 8017b66:	821a      	strh	r2, [r3, #16]
 8017b68:	e003      	b.n	8017b72 <http_send_data_ssi+0x196>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8017b6a:	693b      	ldr	r3, [r7, #16]
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8017b72:	693b      	ldr	r3, [r7, #16]
 8017b74:	68db      	ldr	r3, [r3, #12]
 8017b76:	1e5a      	subs	r2, r3, #1
 8017b78:	693b      	ldr	r3, [r7, #16]
 8017b7a:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8017b7c:	693b      	ldr	r3, [r7, #16]
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	1c5a      	adds	r2, r3, #1
 8017b82:	693b      	ldr	r3, [r7, #16]
 8017b84:	601a      	str	r2, [r3, #0]
        }
        break;
 8017b86:	e20f      	b.n	8017fa8 <http_send_data_ssi+0x5cc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8017b88:	693b      	ldr	r3, [r7, #16]
 8017b8a:	8a1b      	ldrh	r3, [r3, #16]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d11e      	bne.n	8017bce <http_send_data_ssi+0x1f2>
 8017b90:	693b      	ldr	r3, [r7, #16]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	781b      	ldrb	r3, [r3, #0]
 8017b96:	2b20      	cmp	r3, #32
 8017b98:	d00e      	beq.n	8017bb8 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8017b9a:	693b      	ldr	r3, [r7, #16]
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8017ba0:	2b09      	cmp	r3, #9
 8017ba2:	d009      	beq.n	8017bb8 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8017ba4:	693b      	ldr	r3, [r7, #16]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	781b      	ldrb	r3, [r3, #0]
 8017baa:	2b0a      	cmp	r3, #10
 8017bac:	d004      	beq.n	8017bb8 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\r'))) {
 8017bae:	693b      	ldr	r3, [r7, #16]
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8017bb4:	2b0d      	cmp	r3, #13
 8017bb6:	d10a      	bne.n	8017bce <http_send_data_ssi+0x1f2>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8017bb8:	693b      	ldr	r3, [r7, #16]
 8017bba:	68db      	ldr	r3, [r3, #12]
 8017bbc:	1e5a      	subs	r2, r3, #1
 8017bbe:	693b      	ldr	r3, [r7, #16]
 8017bc0:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8017bc2:	693b      	ldr	r3, [r7, #16]
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	1c5a      	adds	r2, r3, #1
 8017bc8:	693b      	ldr	r3, [r7, #16]
 8017bca:	601a      	str	r2, [r3, #0]
          break;
 8017bcc:	e1ec      	b.n	8017fa8 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8017bce:	693b      	ldr	r3, [r7, #16]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	781a      	ldrb	r2, [r3, #0]
 8017bd4:	693b      	ldr	r3, [r7, #16]
 8017bd6:	7d9b      	ldrb	r3, [r3, #22]
 8017bd8:	4914      	ldr	r1, [pc, #80]	; (8017c2c <http_send_data_ssi+0x250>)
 8017bda:	00db      	lsls	r3, r3, #3
 8017bdc:	440b      	add	r3, r1
 8017bde:	685b      	ldr	r3, [r3, #4]
 8017be0:	781b      	ldrb	r3, [r3, #0]
 8017be2:	429a      	cmp	r2, r3
 8017be4:	d013      	beq.n	8017c0e <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8017be6:	693b      	ldr	r3, [r7, #16]
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8017bec:	2b20      	cmp	r3, #32
 8017bee:	d00e      	beq.n	8017c0e <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8017bf0:	693b      	ldr	r3, [r7, #16]
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	781b      	ldrb	r3, [r3, #0]
 8017bf6:	2b09      	cmp	r3, #9
 8017bf8:	d009      	beq.n	8017c0e <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8017bfa:	693b      	ldr	r3, [r7, #16]
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8017c00:	2b0a      	cmp	r3, #10
 8017c02:	d004      	beq.n	8017c0e <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8017c04:	693b      	ldr	r3, [r7, #16]
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	781b      	ldrb	r3, [r3, #0]
 8017c0a:	2b0d      	cmp	r3, #13
 8017c0c:	d13f      	bne.n	8017c8e <http_send_data_ssi+0x2b2>

          if (ssi->tag_index == 0) {
 8017c0e:	693b      	ldr	r3, [r7, #16]
 8017c10:	8a1b      	ldrh	r3, [r3, #16]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d10c      	bne.n	8017c30 <http_send_data_ssi+0x254>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8017c16:	693b      	ldr	r3, [r7, #16]
 8017c18:	2200      	movs	r2, #0
 8017c1a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
          if (ssi->tag_index == 0) {
 8017c1e:	e04c      	b.n	8017cba <http_send_data_ssi+0x2de>
 8017c20:	0802cbb0 	.word	0x0802cbb0
 8017c24:	0802cc2c 	.word	0x0802cc2c
 8017c28:	0802cbf8 	.word	0x0802cbf8
 8017c2c:	080607c4 	.word	0x080607c4
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8017c30:	693b      	ldr	r3, [r7, #16]
 8017c32:	2203      	movs	r2, #3
 8017c34:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8017c38:	693b      	ldr	r3, [r7, #16]
 8017c3a:	8a1b      	ldrh	r3, [r3, #16]
 8017c3c:	2bff      	cmp	r3, #255	; 0xff
 8017c3e:	d906      	bls.n	8017c4e <http_send_data_ssi+0x272>
 8017c40:	4b92      	ldr	r3, [pc, #584]	; (8017e8c <http_send_data_ssi+0x4b0>)
 8017c42:	f240 5236 	movw	r2, #1334	; 0x536
 8017c46:	4992      	ldr	r1, [pc, #584]	; (8017e90 <http_send_data_ssi+0x4b4>)
 8017c48:	4892      	ldr	r0, [pc, #584]	; (8017e94 <http_send_data_ssi+0x4b8>)
 8017c4a:	f00f f805 	bl	8026c58 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8017c4e:	693b      	ldr	r3, [r7, #16]
 8017c50:	8a1b      	ldrh	r3, [r3, #16]
 8017c52:	b2da      	uxtb	r2, r3
 8017c54:	693b      	ldr	r3, [r7, #16]
 8017c56:	75da      	strb	r2, [r3, #23]
            ssi->tag_name[ssi->tag_index] = '\0';
 8017c58:	693b      	ldr	r3, [r7, #16]
 8017c5a:	8a1b      	ldrh	r3, [r3, #16]
 8017c5c:	461a      	mov	r2, r3
 8017c5e:	693b      	ldr	r3, [r7, #16]
 8017c60:	4413      	add	r3, r2
 8017c62:	2200      	movs	r2, #0
 8017c64:	761a      	strb	r2, [r3, #24]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8017c66:	693b      	ldr	r3, [r7, #16]
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	781a      	ldrb	r2, [r3, #0]
 8017c6c:	693b      	ldr	r3, [r7, #16]
 8017c6e:	7d9b      	ldrb	r3, [r3, #22]
 8017c70:	4989      	ldr	r1, [pc, #548]	; (8017e98 <http_send_data_ssi+0x4bc>)
 8017c72:	00db      	lsls	r3, r3, #3
 8017c74:	440b      	add	r3, r1
 8017c76:	685b      	ldr	r3, [r3, #4]
 8017c78:	781b      	ldrb	r3, [r3, #0]
 8017c7a:	429a      	cmp	r2, r3
 8017c7c:	d103      	bne.n	8017c86 <http_send_data_ssi+0x2aa>
              ssi->tag_index = 1;
 8017c7e:	693b      	ldr	r3, [r7, #16]
 8017c80:	2201      	movs	r2, #1
 8017c82:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 8017c84:	e019      	b.n	8017cba <http_send_data_ssi+0x2de>
            } else {
              ssi->tag_index = 0;
 8017c86:	693b      	ldr	r3, [r7, #16]
 8017c88:	2200      	movs	r2, #0
 8017c8a:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 8017c8c:	e015      	b.n	8017cba <http_send_data_ssi+0x2de>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8017c8e:	693b      	ldr	r3, [r7, #16]
 8017c90:	8a1b      	ldrh	r3, [r3, #16]
 8017c92:	2b09      	cmp	r3, #9
 8017c94:	d80d      	bhi.n	8017cb2 <http_send_data_ssi+0x2d6>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8017c96:	693b      	ldr	r3, [r7, #16]
 8017c98:	681a      	ldr	r2, [r3, #0]
 8017c9a:	693b      	ldr	r3, [r7, #16]
 8017c9c:	8a1b      	ldrh	r3, [r3, #16]
 8017c9e:	1c59      	adds	r1, r3, #1
 8017ca0:	b288      	uxth	r0, r1
 8017ca2:	6939      	ldr	r1, [r7, #16]
 8017ca4:	8208      	strh	r0, [r1, #16]
 8017ca6:	4619      	mov	r1, r3
 8017ca8:	7812      	ldrb	r2, [r2, #0]
 8017caa:	693b      	ldr	r3, [r7, #16]
 8017cac:	440b      	add	r3, r1
 8017cae:	761a      	strb	r2, [r3, #24]
 8017cb0:	e003      	b.n	8017cba <http_send_data_ssi+0x2de>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8017cb2:	693b      	ldr	r3, [r7, #16]
 8017cb4:	2200      	movs	r2, #0
 8017cb6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8017cba:	693b      	ldr	r3, [r7, #16]
 8017cbc:	68db      	ldr	r3, [r3, #12]
 8017cbe:	1e5a      	subs	r2, r3, #1
 8017cc0:	693b      	ldr	r3, [r7, #16]
 8017cc2:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 8017cc4:	693b      	ldr	r3, [r7, #16]
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	1c5a      	adds	r2, r3, #1
 8017cca:	693b      	ldr	r3, [r7, #16]
 8017ccc:	601a      	str	r2, [r3, #0]

        break;
 8017cce:	e16b      	b.n	8017fa8 <http_send_data_ssi+0x5cc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8017cd0:	693b      	ldr	r3, [r7, #16]
 8017cd2:	8a1b      	ldrh	r3, [r3, #16]
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d11e      	bne.n	8017d16 <http_send_data_ssi+0x33a>
 8017cd8:	693b      	ldr	r3, [r7, #16]
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	781b      	ldrb	r3, [r3, #0]
 8017cde:	2b20      	cmp	r3, #32
 8017ce0:	d00e      	beq.n	8017d00 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8017ce2:	693b      	ldr	r3, [r7, #16]
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8017ce8:	2b09      	cmp	r3, #9
 8017cea:	d009      	beq.n	8017d00 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8017cec:	693b      	ldr	r3, [r7, #16]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	781b      	ldrb	r3, [r3, #0]
 8017cf2:	2b0a      	cmp	r3, #10
 8017cf4:	d004      	beq.n	8017d00 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\r'))) {
 8017cf6:	693b      	ldr	r3, [r7, #16]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8017cfc:	2b0d      	cmp	r3, #13
 8017cfe:	d10a      	bne.n	8017d16 <http_send_data_ssi+0x33a>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8017d00:	693b      	ldr	r3, [r7, #16]
 8017d02:	68db      	ldr	r3, [r3, #12]
 8017d04:	1e5a      	subs	r2, r3, #1
 8017d06:	693b      	ldr	r3, [r7, #16]
 8017d08:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8017d0a:	693b      	ldr	r3, [r7, #16]
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	1c5a      	adds	r2, r3, #1
 8017d10:	693b      	ldr	r3, [r7, #16]
 8017d12:	601a      	str	r2, [r3, #0]
          break;
 8017d14:	e148      	b.n	8017fa8 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8017d16:	693b      	ldr	r3, [r7, #16]
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	781a      	ldrb	r2, [r3, #0]
 8017d1c:	693b      	ldr	r3, [r7, #16]
 8017d1e:	7d9b      	ldrb	r3, [r3, #22]
 8017d20:	495d      	ldr	r1, [pc, #372]	; (8017e98 <http_send_data_ssi+0x4bc>)
 8017d22:	00db      	lsls	r3, r3, #3
 8017d24:	440b      	add	r3, r1
 8017d26:	685b      	ldr	r3, [r3, #4]
 8017d28:	6939      	ldr	r1, [r7, #16]
 8017d2a:	8a09      	ldrh	r1, [r1, #16]
 8017d2c:	440b      	add	r3, r1
 8017d2e:	781b      	ldrb	r3, [r3, #0]
 8017d30:	429a      	cmp	r2, r3
 8017d32:	d179      	bne.n	8017e28 <http_send_data_ssi+0x44c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8017d34:	693b      	ldr	r3, [r7, #16]
 8017d36:	68db      	ldr	r3, [r3, #12]
 8017d38:	1e5a      	subs	r2, r3, #1
 8017d3a:	693b      	ldr	r3, [r7, #16]
 8017d3c:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8017d3e:	693b      	ldr	r3, [r7, #16]
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	1c5a      	adds	r2, r3, #1
 8017d44:	693b      	ldr	r3, [r7, #16]
 8017d46:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 8017d48:	693b      	ldr	r3, [r7, #16]
 8017d4a:	8a1b      	ldrh	r3, [r3, #16]
 8017d4c:	3301      	adds	r3, #1
 8017d4e:	b29a      	uxth	r2, r3
 8017d50:	693b      	ldr	r3, [r7, #16]
 8017d52:	821a      	strh	r2, [r3, #16]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8017d54:	693b      	ldr	r3, [r7, #16]
 8017d56:	7d9b      	ldrb	r3, [r3, #22]
 8017d58:	4a4f      	ldr	r2, [pc, #316]	; (8017e98 <http_send_data_ssi+0x4bc>)
 8017d5a:	00db      	lsls	r3, r3, #3
 8017d5c:	4413      	add	r3, r2
 8017d5e:	685b      	ldr	r3, [r3, #4]
 8017d60:	693a      	ldr	r2, [r7, #16]
 8017d62:	8a12      	ldrh	r2, [r2, #16]
 8017d64:	4413      	add	r3, r2
 8017d66:	781b      	ldrb	r3, [r3, #0]
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	f040 811d 	bne.w	8017fa8 <http_send_data_ssi+0x5cc>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
 8017d6e:	693b      	ldr	r3, [r7, #16]
 8017d70:	2200      	movs	r2, #0
 8017d72:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 8017d74:	6838      	ldr	r0, [r7, #0]
 8017d76:	f7ff fcf9 	bl	801776c <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8017d7a:	693b      	ldr	r3, [r7, #16]
 8017d7c:	2200      	movs	r2, #0
 8017d7e:	821a      	strh	r2, [r3, #16]
            ssi->tag_state = TAG_SENDING;
 8017d80:	693b      	ldr	r3, [r7, #16]
 8017d82:	2204      	movs	r2, #4
 8017d84:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            ssi->tag_end = ssi->parsed;
 8017d88:	693b      	ldr	r3, [r7, #16]
 8017d8a:	681a      	ldr	r2, [r3, #0]
 8017d8c:	693b      	ldr	r3, [r7, #16]
 8017d8e:	609a      	str	r2, [r3, #8]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->parsed = ssi->tag_started;
 8017d90:	693b      	ldr	r3, [r7, #16]
 8017d92:	685a      	ldr	r2, [r3, #4]
 8017d94:	693b      	ldr	r3, [r7, #16]
 8017d96:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 8017d98:	693b      	ldr	r3, [r7, #16]
 8017d9a:	689a      	ldr	r2, [r3, #8]
 8017d9c:	683b      	ldr	r3, [r7, #0]
 8017d9e:	699b      	ldr	r3, [r3, #24]
 8017da0:	429a      	cmp	r2, r3
 8017da2:	f240 8101 	bls.w	8017fa8 <http_send_data_ssi+0x5cc>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8017da6:	693b      	ldr	r3, [r7, #16]
 8017da8:	685a      	ldr	r2, [r3, #4]
 8017daa:	683b      	ldr	r3, [r7, #0]
 8017dac:	699b      	ldr	r3, [r3, #24]
 8017dae:	1ad3      	subs	r3, r2, r3
 8017db0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017db4:	4293      	cmp	r3, r2
 8017db6:	dc06      	bgt.n	8017dc6 <http_send_data_ssi+0x3ea>
 8017db8:	693b      	ldr	r3, [r7, #16]
 8017dba:	685a      	ldr	r2, [r3, #4]
 8017dbc:	683b      	ldr	r3, [r7, #0]
 8017dbe:	699b      	ldr	r3, [r3, #24]
 8017dc0:	1ad3      	subs	r3, r2, r3
 8017dc2:	b29b      	uxth	r3, r3
 8017dc4:	e001      	b.n	8017dca <http_send_data_ssi+0x3ee>
 8017dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017dca:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017dcc:	683b      	ldr	r3, [r7, #0]
 8017dce:	6999      	ldr	r1, [r3, #24]
 8017dd0:	f107 020e 	add.w	r2, r7, #14
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	6878      	ldr	r0, [r7, #4]
 8017dd8:	f7ff fb92 	bl	8017500 <http_write>
 8017ddc:	4603      	mov	r3, r0
 8017dde:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8017de0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	f040 80df 	bne.w	8017fa8 <http_send_data_ssi+0x5cc>
                data_to_send = 1;
 8017dea:	2301      	movs	r3, #1
 8017dec:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
                if (ssi->tag_started <= hs->file) {
 8017dee:	693b      	ldr	r3, [r7, #16]
 8017df0:	685a      	ldr	r2, [r3, #4]
 8017df2:	683b      	ldr	r3, [r7, #0]
 8017df4:	699b      	ldr	r3, [r3, #24]
 8017df6:	429a      	cmp	r2, r3
 8017df8:	d809      	bhi.n	8017e0e <http_send_data_ssi+0x432>
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8017dfa:	693b      	ldr	r3, [r7, #16]
 8017dfc:	689a      	ldr	r2, [r3, #8]
 8017dfe:	693b      	ldr	r3, [r7, #16]
 8017e00:	685b      	ldr	r3, [r3, #4]
 8017e02:	1ad3      	subs	r3, r2, r3
 8017e04:	b29a      	uxth	r2, r3
 8017e06:	89fb      	ldrh	r3, [r7, #14]
 8017e08:	4413      	add	r3, r2
 8017e0a:	b29b      	uxth	r3, r3
 8017e0c:	81fb      	strh	r3, [r7, #14]
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8017e0e:	683b      	ldr	r3, [r7, #0]
 8017e10:	699b      	ldr	r3, [r3, #24]
 8017e12:	89fa      	ldrh	r2, [r7, #14]
 8017e14:	441a      	add	r2, r3
 8017e16:	683b      	ldr	r3, [r7, #0]
 8017e18:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8017e1a:	683b      	ldr	r3, [r7, #0]
 8017e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e1e:	89fa      	ldrh	r2, [r7, #14]
 8017e20:	1a9a      	subs	r2, r3, r2
 8017e22:	683b      	ldr	r3, [r7, #0]
 8017e24:	625a      	str	r2, [r3, #36]	; 0x24
 8017e26:	e0bf      	b.n	8017fa8 <http_send_data_ssi+0x5cc>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 8017e28:	693b      	ldr	r3, [r7, #16]
 8017e2a:	68db      	ldr	r3, [r3, #12]
 8017e2c:	1e5a      	subs	r2, r3, #1
 8017e2e:	693b      	ldr	r3, [r7, #16]
 8017e30:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8017e32:	693b      	ldr	r3, [r7, #16]
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	1c5a      	adds	r2, r3, #1
 8017e38:	693b      	ldr	r3, [r7, #16]
 8017e3a:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8017e3c:	693b      	ldr	r3, [r7, #16]
 8017e3e:	2200      	movs	r2, #0
 8017e40:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        }
        break;
 8017e44:	e0b0      	b.n	8017fa8 <http_send_data_ssi+0x5cc>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 8017e46:	693b      	ldr	r3, [r7, #16]
 8017e48:	689a      	ldr	r2, [r3, #8]
 8017e4a:	683b      	ldr	r3, [r7, #0]
 8017e4c:	699b      	ldr	r3, [r3, #24]
 8017e4e:	429a      	cmp	r2, r3
 8017e50:	d95c      	bls.n	8017f0c <http_send_data_ssi+0x530>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8017e52:	693b      	ldr	r3, [r7, #16]
 8017e54:	685a      	ldr	r2, [r3, #4]
 8017e56:	683b      	ldr	r3, [r7, #0]
 8017e58:	699b      	ldr	r3, [r3, #24]
 8017e5a:	429a      	cmp	r2, r3
 8017e5c:	d206      	bcs.n	8017e6c <http_send_data_ssi+0x490>
 8017e5e:	4b0b      	ldr	r3, [pc, #44]	; (8017e8c <http_send_data_ssi+0x4b0>)
 8017e60:	f44f 62b5 	mov.w	r2, #1448	; 0x5a8
 8017e64:	490d      	ldr	r1, [pc, #52]	; (8017e9c <http_send_data_ssi+0x4c0>)
 8017e66:	480b      	ldr	r0, [pc, #44]	; (8017e94 <http_send_data_ssi+0x4b8>)
 8017e68:	f00e fef6 	bl	8026c58 <iprintf>
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8017e6c:	693b      	ldr	r3, [r7, #16]
 8017e6e:	685a      	ldr	r2, [r3, #4]
 8017e70:	683b      	ldr	r3, [r7, #0]
 8017e72:	699b      	ldr	r3, [r3, #24]
 8017e74:	1ad3      	subs	r3, r2, r3
 8017e76:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017e7a:	4293      	cmp	r3, r2
 8017e7c:	dc10      	bgt.n	8017ea0 <http_send_data_ssi+0x4c4>
 8017e7e:	693b      	ldr	r3, [r7, #16]
 8017e80:	685a      	ldr	r2, [r3, #4]
 8017e82:	683b      	ldr	r3, [r7, #0]
 8017e84:	699b      	ldr	r3, [r3, #24]
 8017e86:	1ad3      	subs	r3, r2, r3
 8017e88:	b29b      	uxth	r3, r3
 8017e8a:	e00b      	b.n	8017ea4 <http_send_data_ssi+0x4c8>
 8017e8c:	0802cbb0 	.word	0x0802cbb0
 8017e90:	0802cc9c 	.word	0x0802cc9c
 8017e94:	0802cbf8 	.word	0x0802cbf8
 8017e98:	080607c4 	.word	0x080607c4
 8017e9c:	0802ccb4 	.word	0x0802ccb4
 8017ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017ea4:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8017ea6:	89fb      	ldrh	r3, [r7, #14]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d00a      	beq.n	8017ec2 <http_send_data_ssi+0x4e6>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017eac:	683b      	ldr	r3, [r7, #0]
 8017eae:	6999      	ldr	r1, [r3, #24]
 8017eb0:	f107 020e 	add.w	r2, r7, #14
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	6878      	ldr	r0, [r7, #4]
 8017eb8:	f7ff fb22 	bl	8017500 <http_write>
 8017ebc:	4603      	mov	r3, r0
 8017ebe:	75fb      	strb	r3, [r7, #23]
 8017ec0:	e001      	b.n	8017ec6 <http_send_data_ssi+0x4ea>
          } else {
            err = ERR_OK;
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8017ec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d16c      	bne.n	8017fa8 <http_send_data_ssi+0x5cc>
            data_to_send = 1;
 8017ece:	2301      	movs	r3, #1
 8017ed0:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            if (ssi->tag_started <= hs->file) {
 8017ed2:	693b      	ldr	r3, [r7, #16]
 8017ed4:	685a      	ldr	r2, [r3, #4]
 8017ed6:	683b      	ldr	r3, [r7, #0]
 8017ed8:	699b      	ldr	r3, [r3, #24]
 8017eda:	429a      	cmp	r2, r3
 8017edc:	d809      	bhi.n	8017ef2 <http_send_data_ssi+0x516>
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8017ede:	693b      	ldr	r3, [r7, #16]
 8017ee0:	689a      	ldr	r2, [r3, #8]
 8017ee2:	693b      	ldr	r3, [r7, #16]
 8017ee4:	685b      	ldr	r3, [r3, #4]
 8017ee6:	1ad3      	subs	r3, r2, r3
 8017ee8:	b29a      	uxth	r2, r3
 8017eea:	89fb      	ldrh	r3, [r7, #14]
 8017eec:	4413      	add	r3, r2
 8017eee:	b29b      	uxth	r3, r3
 8017ef0:	81fb      	strh	r3, [r7, #14]
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8017ef2:	683b      	ldr	r3, [r7, #0]
 8017ef4:	699b      	ldr	r3, [r3, #24]
 8017ef6:	89fa      	ldrh	r2, [r7, #14]
 8017ef8:	441a      	add	r2, r3
 8017efa:	683b      	ldr	r3, [r7, #0]
 8017efc:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8017efe:	683b      	ldr	r3, [r7, #0]
 8017f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f02:	89fa      	ldrh	r2, [r7, #14]
 8017f04:	1a9a      	subs	r2, r3, r2
 8017f06:	683b      	ldr	r3, [r7, #0]
 8017f08:	625a      	str	r2, [r3, #36]	; 0x24
 8017f0a:	e04d      	b.n	8017fa8 <http_send_data_ssi+0x5cc>
          }
        } else {
#if LWIP_HTTPD_SSI_MULTIPART
          if (ssi->tag_index >= ssi->tag_insert_len) {
 8017f0c:	693b      	ldr	r3, [r7, #16]
 8017f0e:	8a1a      	ldrh	r2, [r3, #16]
 8017f10:	693b      	ldr	r3, [r7, #16]
 8017f12:	8a5b      	ldrh	r3, [r3, #18]
 8017f14:	429a      	cmp	r2, r3
 8017f16:	d30b      	bcc.n	8017f30 <http_send_data_ssi+0x554>
            /* Did the last SSIHandler have more to send? */
            if (ssi->tag_part != HTTPD_LAST_TAG_PART) {
 8017f18:	693b      	ldr	r3, [r7, #16]
 8017f1a:	8a9b      	ldrh	r3, [r3, #20]
 8017f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f20:	4293      	cmp	r3, r2
 8017f22:	d005      	beq.n	8017f30 <http_send_data_ssi+0x554>
              /* If so, call it again */
              ssi->tag_index = 0;
 8017f24:	693b      	ldr	r3, [r7, #16]
 8017f26:	2200      	movs	r2, #0
 8017f28:	821a      	strh	r2, [r3, #16]
              get_tag_insert(hs);
 8017f2a:	6838      	ldr	r0, [r7, #0]
 8017f2c:	f7ff fc1e 	bl	801776c <get_tag_insert>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 8017f30:	693b      	ldr	r3, [r7, #16]
 8017f32:	8a1a      	ldrh	r2, [r3, #16]
 8017f34:	693b      	ldr	r3, [r7, #16]
 8017f36:	8a5b      	ldrh	r3, [r3, #18]
 8017f38:	429a      	cmp	r2, r3
 8017f3a:	d222      	bcs.n	8017f82 <http_send_data_ssi+0x5a6>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8017f3c:	693b      	ldr	r3, [r7, #16]
 8017f3e:	8a5a      	ldrh	r2, [r3, #18]
 8017f40:	693b      	ldr	r3, [r7, #16]
 8017f42:	8a1b      	ldrh	r3, [r3, #16]
 8017f44:	1ad3      	subs	r3, r2, r3
 8017f46:	b29b      	uxth	r3, r3
 8017f48:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8017f4a:	693b      	ldr	r3, [r7, #16]
 8017f4c:	8a1b      	ldrh	r3, [r3, #16]
 8017f4e:	3320      	adds	r3, #32
 8017f50:	693a      	ldr	r2, [r7, #16]
 8017f52:	4413      	add	r3, r2
 8017f54:	1cd9      	adds	r1, r3, #3
 8017f56:	f107 020e 	add.w	r2, r7, #14
 8017f5a:	2301      	movs	r3, #1
 8017f5c:	6878      	ldr	r0, [r7, #4]
 8017f5e:	f7ff facf 	bl	8017500 <http_write>
 8017f62:	4603      	mov	r3, r0
 8017f64:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8017f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d11c      	bne.n	8017fa8 <http_send_data_ssi+0x5cc>
              data_to_send = 1;
 8017f6e:	2301      	movs	r3, #1
 8017f70:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8017f72:	693b      	ldr	r3, [r7, #16]
 8017f74:	8a1a      	ldrh	r2, [r3, #16]
 8017f76:	89fb      	ldrh	r3, [r7, #14]
 8017f78:	4413      	add	r3, r2
 8017f7a:	b29a      	uxth	r2, r3
 8017f7c:	693b      	ldr	r3, [r7, #16]
 8017f7e:	821a      	strh	r2, [r3, #16]
 8017f80:	e012      	b.n	8017fa8 <http_send_data_ssi+0x5cc>
              /* Don't return here: keep on sending data */
            }
          } else {
#if LWIP_HTTPD_SSI_MULTIPART
            if (ssi->tag_part == HTTPD_LAST_TAG_PART)
 8017f82:	693b      	ldr	r3, [r7, #16]
 8017f84:	8a9b      	ldrh	r3, [r3, #20]
 8017f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f8a:	4293      	cmp	r3, r2
 8017f8c:	d10c      	bne.n	8017fa8 <http_send_data_ssi+0x5cc>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8017f8e:	693b      	ldr	r3, [r7, #16]
 8017f90:	2200      	movs	r2, #0
 8017f92:	821a      	strh	r2, [r3, #16]
              ssi->tag_state = TAG_NONE;
 8017f94:	693b      	ldr	r3, [r7, #16]
 8017f96:	2200      	movs	r2, #0
 8017f98:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
 8017f9c:	693b      	ldr	r3, [r7, #16]
 8017f9e:	689a      	ldr	r2, [r3, #8]
 8017fa0:	693b      	ldr	r3, [r7, #16]
 8017fa2:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8017fa4:	e000      	b.n	8017fa8 <http_send_data_ssi+0x5cc>
        default:
          break;
 8017fa6:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8017fa8:	693b      	ldr	r3, [r7, #16]
 8017faa:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 8017fae:	2b04      	cmp	r3, #4
 8017fb0:	d003      	beq.n	8017fba <http_send_data_ssi+0x5de>
 8017fb2:	693b      	ldr	r3, [r7, #16]
 8017fb4:	68db      	ldr	r3, [r3, #12]
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d004      	beq.n	8017fc4 <http_send_data_ssi+0x5e8>
 8017fba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	f43f ad64 	beq.w	8017a8c <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8017fc4:	693b      	ldr	r3, [r7, #16]
 8017fc6:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 8017fca:	2b04      	cmp	r3, #4
 8017fcc:	d034      	beq.n	8018038 <http_send_data_ssi+0x65c>
 8017fce:	693b      	ldr	r3, [r7, #16]
 8017fd0:	681a      	ldr	r2, [r3, #0]
 8017fd2:	683b      	ldr	r3, [r7, #0]
 8017fd4:	699b      	ldr	r3, [r3, #24]
 8017fd6:	429a      	cmp	r2, r3
 8017fd8:	d92e      	bls.n	8018038 <http_send_data_ssi+0x65c>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8017fda:	693b      	ldr	r3, [r7, #16]
 8017fdc:	681a      	ldr	r2, [r3, #0]
 8017fde:	683b      	ldr	r3, [r7, #0]
 8017fe0:	699b      	ldr	r3, [r3, #24]
 8017fe2:	1ad3      	subs	r3, r2, r3
 8017fe4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017fe8:	4293      	cmp	r3, r2
 8017fea:	dc06      	bgt.n	8017ffa <http_send_data_ssi+0x61e>
 8017fec:	693b      	ldr	r3, [r7, #16]
 8017fee:	681a      	ldr	r2, [r3, #0]
 8017ff0:	683b      	ldr	r3, [r7, #0]
 8017ff2:	699b      	ldr	r3, [r3, #24]
 8017ff4:	1ad3      	subs	r3, r2, r3
 8017ff6:	b29b      	uxth	r3, r3
 8017ff8:	e001      	b.n	8017ffe <http_send_data_ssi+0x622>
 8017ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017ffe:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018000:	683b      	ldr	r3, [r7, #0]
 8018002:	6999      	ldr	r1, [r3, #24]
 8018004:	f107 020e 	add.w	r2, r7, #14
 8018008:	2300      	movs	r3, #0
 801800a:	6878      	ldr	r0, [r7, #4]
 801800c:	f7ff fa78 	bl	8017500 <http_write>
 8018010:	4603      	mov	r3, r0
 8018012:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8018014:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018018:	2b00      	cmp	r3, #0
 801801a:	d10d      	bne.n	8018038 <http_send_data_ssi+0x65c>
      data_to_send = 1;
 801801c:	2301      	movs	r3, #1
 801801e:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8018020:	683b      	ldr	r3, [r7, #0]
 8018022:	699b      	ldr	r3, [r3, #24]
 8018024:	89fa      	ldrh	r2, [r7, #14]
 8018026:	441a      	add	r2, r3
 8018028:	683b      	ldr	r3, [r7, #0]
 801802a:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 801802c:	683b      	ldr	r3, [r7, #0]
 801802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018030:	89fa      	ldrh	r2, [r7, #14]
 8018032:	1a9a      	subs	r2, r3, r2
 8018034:	683b      	ldr	r3, [r7, #0]
 8018036:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8018038:	7dbb      	ldrb	r3, [r7, #22]
}
 801803a:	4618      	mov	r0, r3
 801803c:	3718      	adds	r7, #24
 801803e:	46bd      	mov	sp, r7
 8018040:	bd80      	pop	{r7, pc}
 8018042:	bf00      	nop

08018044 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8018044:	b580      	push	{r7, lr}
 8018046:	b084      	sub	sp, #16
 8018048:	af00      	add	r7, sp, #0
 801804a:	6078      	str	r0, [r7, #4]
 801804c:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 801804e:	2300      	movs	r3, #0
 8018050:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8018052:	683b      	ldr	r3, [r7, #0]
 8018054:	2b00      	cmp	r3, #0
 8018056:	d101      	bne.n	801805c <http_send+0x18>
    return 0;
 8018058:	2300      	movs	r3, #0
 801805a:	e030      	b.n	80180be <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 801805c:	683b      	ldr	r3, [r7, #0]
 801805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018060:	2b00      	cmp	r3, #0
 8018062:	d108      	bne.n	8018076 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8018064:	6839      	ldr	r1, [r7, #0]
 8018066:	6878      	ldr	r0, [r7, #4]
 8018068:	f7ff fc52 	bl	8017910 <http_check_eof>
 801806c:	4603      	mov	r3, r0
 801806e:	2b00      	cmp	r3, #0
 8018070:	d101      	bne.n	8018076 <http_send+0x32>
      return 0;
 8018072:	2300      	movs	r3, #0
 8018074:	e023      	b.n	80180be <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8018076:	683b      	ldr	r3, [r7, #0]
 8018078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801807a:	2b00      	cmp	r3, #0
 801807c:	d006      	beq.n	801808c <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 801807e:	6839      	ldr	r1, [r7, #0]
 8018080:	6878      	ldr	r0, [r7, #4]
 8018082:	f7ff fcab 	bl	80179dc <http_send_data_ssi>
 8018086:	4603      	mov	r3, r0
 8018088:	73fb      	strb	r3, [r7, #15]
 801808a:	e005      	b.n	8018098 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 801808c:	6839      	ldr	r1, [r7, #0]
 801808e:	6878      	ldr	r0, [r7, #4]
 8018090:	f7ff fc6e 	bl	8017970 <http_send_data_nonssi>
 8018094:	4603      	mov	r3, r0
 8018096:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8018098:	683b      	ldr	r3, [r7, #0]
 801809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801809c:	2b00      	cmp	r3, #0
 801809e:	d10d      	bne.n	80180bc <http_send+0x78>
 80180a0:	683b      	ldr	r3, [r7, #0]
 80180a2:	695b      	ldr	r3, [r3, #20]
 80180a4:	4618      	mov	r0, r3
 80180a6:	f7ff f99b 	bl	80173e0 <fs_bytes_left>
 80180aa:	4603      	mov	r3, r0
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	dc05      	bgt.n	80180bc <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80180b0:	6839      	ldr	r1, [r7, #0]
 80180b2:	6878      	ldr	r0, [r7, #4]
 80180b4:	f7ff faef 	bl	8017696 <http_eof>
    return 0;
 80180b8:	2300      	movs	r3, #0
 80180ba:	e000      	b.n	80180be <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 80180bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80180be:	4618      	mov	r0, r3
 80180c0:	3710      	adds	r7, #16
 80180c2:	46bd      	mov	sp, r7
 80180c4:	bd80      	pop	{r7, pc}
	...

080180c8 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b084      	sub	sp, #16
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	6078      	str	r0, [r7, #4]
 80180d0:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 80180d2:	683b      	ldr	r3, [r7, #0]
 80180d4:	4a1c      	ldr	r2, [pc, #112]	; (8018148 <http_get_404_file+0x80>)
 80180d6:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 80180d8:	687a      	ldr	r2, [r7, #4]
 80180da:	683b      	ldr	r3, [r7, #0]
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	4619      	mov	r1, r3
 80180e0:	4610      	mov	r0, r2
 80180e2:	f7ff f935 	bl	8017350 <fs_open>
 80180e6:	4603      	mov	r3, r0
 80180e8:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80180ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d024      	beq.n	801813c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 80180f2:	683b      	ldr	r3, [r7, #0]
 80180f4:	4a15      	ldr	r2, [pc, #84]	; (801814c <http_get_404_file+0x84>)
 80180f6:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 80180f8:	687a      	ldr	r2, [r7, #4]
 80180fa:	683b      	ldr	r3, [r7, #0]
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	4619      	mov	r1, r3
 8018100:	4610      	mov	r0, r2
 8018102:	f7ff f925 	bl	8017350 <fs_open>
 8018106:	4603      	mov	r3, r0
 8018108:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801810a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801810e:	2b00      	cmp	r3, #0
 8018110:	d014      	beq.n	801813c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8018112:	683b      	ldr	r3, [r7, #0]
 8018114:	4a0e      	ldr	r2, [pc, #56]	; (8018150 <http_get_404_file+0x88>)
 8018116:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8018118:	687a      	ldr	r2, [r7, #4]
 801811a:	683b      	ldr	r3, [r7, #0]
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	4619      	mov	r1, r3
 8018120:	4610      	mov	r0, r2
 8018122:	f7ff f915 	bl	8017350 <fs_open>
 8018126:	4603      	mov	r3, r0
 8018128:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 801812a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d004      	beq.n	801813c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8018132:	683b      	ldr	r3, [r7, #0]
 8018134:	2200      	movs	r2, #0
 8018136:	601a      	str	r2, [r3, #0]
        return NULL;
 8018138:	2300      	movs	r3, #0
 801813a:	e000      	b.n	801813e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 801813c:	687b      	ldr	r3, [r7, #4]
}
 801813e:	4618      	mov	r0, r3
 8018140:	3710      	adds	r7, #16
 8018142:	46bd      	mov	sp, r7
 8018144:	bd80      	pop	{r7, pc}
 8018146:	bf00      	nop
 8018148:	0802cccc 	.word	0x0802cccc
 801814c:	0802ccd8 	.word	0x0802ccd8
 8018150:	0802cce4 	.word	0x0802cce4

08018154 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b082      	sub	sp, #8
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 801815c:	4b08      	ldr	r3, [pc, #32]	; (8018180 <http_handle_post_finished+0x2c>)
 801815e:	2200      	movs	r2, #0
 8018160:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8018162:	223f      	movs	r2, #63	; 0x3f
 8018164:	4906      	ldr	r1, [pc, #24]	; (8018180 <http_handle_post_finished+0x2c>)
 8018166:	6878      	ldr	r0, [r7, #4]
 8018168:	f7f3 f850 	bl	800b20c <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 801816c:	2200      	movs	r2, #0
 801816e:	4904      	ldr	r1, [pc, #16]	; (8018180 <http_handle_post_finished+0x2c>)
 8018170:	6878      	ldr	r0, [r7, #4]
 8018172:	f000 faab 	bl	80186cc <http_find_file>
 8018176:	4603      	mov	r3, r0
}
 8018178:	4618      	mov	r0, r3
 801817a:	3708      	adds	r7, #8
 801817c:	46bd      	mov	sp, r7
 801817e:	bd80      	pop	{r7, pc}
 8018180:	20005920 	.word	0x20005920

08018184 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 8018184:	b580      	push	{r7, lr}
 8018186:	b084      	sub	sp, #16
 8018188:	af00      	add	r7, sp, #0
 801818a:	6078      	str	r0, [r7, #4]
 801818c:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 801818e:	683b      	ldr	r3, [r7, #0]
 8018190:	2b00      	cmp	r3, #0
 8018192:	d014      	beq.n	80181be <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801819a:	683a      	ldr	r2, [r7, #0]
 801819c:	8912      	ldrh	r2, [r2, #8]
 801819e:	4293      	cmp	r3, r2
 80181a0:	d204      	bcs.n	80181ac <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	2200      	movs	r2, #0
 80181a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80181aa:	e008      	b.n	80181be <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80181b2:	683a      	ldr	r2, [r7, #0]
 80181b4:	8912      	ldrh	r2, [r2, #8]
 80181b6:	1a9a      	subs	r2, r3, r2
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 80181be:	683b      	ldr	r3, [r7, #0]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d006      	beq.n	80181d2 <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 80181c4:	6839      	ldr	r1, [r7, #0]
 80181c6:	6878      	ldr	r0, [r7, #4]
 80181c8:	f7f2 ffd8 	bl	800b17c <httpd_post_receive_data>
 80181cc:	4603      	mov	r3, r0
 80181ce:	73fb      	strb	r3, [r7, #15]
 80181d0:	e001      	b.n	80181d6 <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 80181d2:	2300      	movs	r3, #0
 80181d4:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 80181d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d003      	beq.n	80181e6 <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	2200      	movs	r2, #0
 80181e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }
  if (hs->post_content_len_left == 0) {
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d104      	bne.n	80181fa <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 80181f0:	6878      	ldr	r0, [r7, #4]
 80181f2:	f7ff ffaf 	bl	8018154 <http_handle_post_finished>
 80181f6:	4603      	mov	r3, r0
 80181f8:	e000      	b.n	80181fc <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 80181fa:	2300      	movs	r3, #0
}
 80181fc:	4618      	mov	r0, r3
 80181fe:	3710      	adds	r7, #16
 8018200:	46bd      	mov	sp, r7
 8018202:	bd80      	pop	{r7, pc}

08018204 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 8018204:	b580      	push	{r7, lr}
 8018206:	b092      	sub	sp, #72	; 0x48
 8018208:	af04      	add	r7, sp, #16
 801820a:	60f8      	str	r0, [r7, #12]
 801820c:	60b9      	str	r1, [r7, #8]
 801820e:	607a      	str	r2, [r7, #4]
 8018210:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8018212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018214:	1c58      	adds	r0, r3, #1
 8018216:	887a      	ldrh	r2, [r7, #2]
 8018218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801821a:	1c59      	adds	r1, r3, #1
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	1acb      	subs	r3, r1, r3
 8018220:	1ad3      	subs	r3, r2, r3
 8018222:	461a      	mov	r2, r3
 8018224:	4965      	ldr	r1, [pc, #404]	; (80183bc <http_post_request+0x1b8>)
 8018226:	f002 fcdf 	bl	801abe8 <lwip_strnstr>
 801822a:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 801822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801822e:	2b00      	cmp	r3, #0
 8018230:	f000 80be 	beq.w	80183b0 <http_post_request+0x1ac>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8018234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018236:	1c58      	adds	r0, r3, #1
 8018238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801823a:	3301      	adds	r3, #1
 801823c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801823e:	1ad3      	subs	r3, r2, r3
 8018240:	461a      	mov	r2, r3
 8018242:	495f      	ldr	r1, [pc, #380]	; (80183c0 <http_post_request+0x1bc>)
 8018244:	f002 fcd0 	bl	801abe8 <lwip_strnstr>
 8018248:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 801824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801824c:	2b00      	cmp	r3, #0
 801824e:	f000 80ac 	beq.w	80183aa <http_post_request+0x1a6>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8018252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018254:	3310      	adds	r3, #16
 8018256:	220a      	movs	r2, #10
 8018258:	495a      	ldr	r1, [pc, #360]	; (80183c4 <http_post_request+0x1c0>)
 801825a:	4618      	mov	r0, r3
 801825c:	f002 fcc4 	bl	801abe8 <lwip_strnstr>
 8018260:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 8018262:	6a3b      	ldr	r3, [r7, #32]
 8018264:	2b00      	cmp	r3, #0
 8018266:	f000 80a0 	beq.w	80183aa <http_post_request+0x1a6>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 801826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801826c:	3310      	adds	r3, #16
 801826e:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 8018270:	69f8      	ldr	r0, [r7, #28]
 8018272:	f00d ff43 	bl	80260fc <atoi>
 8018276:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 8018278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801827a:	2b00      	cmp	r3, #0
 801827c:	d10b      	bne.n	8018296 <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 801827e:	69fb      	ldr	r3, [r7, #28]
 8018280:	781b      	ldrb	r3, [r3, #0]
 8018282:	2b30      	cmp	r3, #48	; 0x30
 8018284:	d104      	bne.n	8018290 <http_post_request+0x8c>
 8018286:	69fb      	ldr	r3, [r7, #28]
 8018288:	3301      	adds	r3, #1
 801828a:	781b      	ldrb	r3, [r3, #0]
 801828c:	2b0d      	cmp	r3, #13
 801828e:	d002      	beq.n	8018296 <http_post_request+0x92>
            content_len = -1;
 8018290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018294:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 8018296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018298:	2b00      	cmp	r3, #0
 801829a:	f2c0 8083 	blt.w	80183a4 <http_post_request+0x1a0>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 801829e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80182a0:	3301      	adds	r3, #1
 80182a2:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 80182a4:	887a      	ldrh	r2, [r7, #2]
 80182a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182a8:	1d19      	adds	r1, r3, #4
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	1acb      	subs	r3, r1, r3
 80182ae:	429a      	cmp	r2, r3
 80182b0:	db05      	blt.n	80182be <http_post_request+0xba>
 80182b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182b4:	1d1a      	adds	r2, r3, #4
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	1ad3      	subs	r3, r2, r3
 80182ba:	b29b      	uxth	r3, r3
 80182bc:	e000      	b.n	80182c0 <http_post_request+0xbc>
 80182be:	887b      	ldrh	r3, [r7, #2]
 80182c0:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 80182c2:	887a      	ldrh	r2, [r7, #2]
 80182c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182c6:	1d19      	adds	r1, r3, #4
 80182c8:	69bb      	ldr	r3, [r7, #24]
 80182ca:	1acb      	subs	r3, r1, r3
 80182cc:	429a      	cmp	r2, r3
 80182ce:	db05      	blt.n	80182dc <http_post_request+0xd8>
 80182d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182d2:	1d1a      	adds	r2, r3, #4
 80182d4:	69bb      	ldr	r3, [r7, #24]
 80182d6:	1ad3      	subs	r3, r2, r3
 80182d8:	b29b      	uxth	r3, r3
 80182da:	e000      	b.n	80182de <http_post_request+0xda>
 80182dc:	887b      	ldrh	r3, [r7, #2]
 80182de:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 80182e0:	2301      	movs	r3, #1
 80182e2:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 80182e4:	4b38      	ldr	r3, [pc, #224]	; (80183c8 <http_post_request+0x1c4>)
 80182e6:	2200      	movs	r2, #0
 80182e8:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 80182ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182ec:	2200      	movs	r2, #0
 80182ee:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 80182f0:	8aba      	ldrh	r2, [r7, #20]
 80182f2:	f107 0312 	add.w	r3, r7, #18
 80182f6:	9303      	str	r3, [sp, #12]
 80182f8:	233f      	movs	r3, #63	; 0x3f
 80182fa:	9302      	str	r3, [sp, #8]
 80182fc:	4b32      	ldr	r3, [pc, #200]	; (80183c8 <http_post_request+0x1c4>)
 80182fe:	9301      	str	r3, [sp, #4]
 8018300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018302:	9300      	str	r3, [sp, #0]
 8018304:	4613      	mov	r3, r2
 8018306:	69ba      	ldr	r2, [r7, #24]
 8018308:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801830a:	68b8      	ldr	r0, [r7, #8]
 801830c:	f7f2 feea 	bl	800b0e4 <httpd_post_begin>
 8018310:	4603      	mov	r3, r0
 8018312:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 8018314:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d13c      	bne.n	8018396 <http_post_request+0x192>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 8018320:	8afb      	ldrh	r3, [r7, #22]
 8018322:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 8018324:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018326:	68bb      	ldr	r3, [r7, #8]
 8018328:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 801832c:	e007      	b.n	801833e <http_post_request+0x13a>
              start_offset -= q->len;
 801832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018330:	895b      	ldrh	r3, [r3, #10]
 8018332:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018334:	1ad3      	subs	r3, r2, r3
 8018336:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 8018338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 801833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018340:	2b00      	cmp	r3, #0
 8018342:	d004      	beq.n	801834e <http_post_request+0x14a>
 8018344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018346:	895b      	ldrh	r3, [r3, #10]
 8018348:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801834a:	429a      	cmp	r2, r3
 801834c:	d2ef      	bcs.n	801832e <http_post_request+0x12a>
            }
            if (q != NULL) {
 801834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018350:	2b00      	cmp	r3, #0
 8018352:	d00d      	beq.n	8018370 <http_post_request+0x16c>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 8018354:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018356:	4619      	mov	r1, r3
 8018358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801835a:	f003 ffcf 	bl	801c2fc <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 801835e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018360:	f004 f8f8 	bl	801c554 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8018364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018366:	68b8      	ldr	r0, [r7, #8]
 8018368:	f7ff ff0c 	bl	8018184 <http_post_rxpbuf>
 801836c:	4603      	mov	r3, r0
 801836e:	e021      	b.n	80183b4 <http_post_request+0x1b0>
            } else if (hs->post_content_len_left == 0) {
 8018370:	68bb      	ldr	r3, [r7, #8]
 8018372:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8018376:	2b00      	cmp	r3, #0
 8018378:	d10b      	bne.n	8018392 <http_post_request+0x18e>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 801837a:	2241      	movs	r2, #65	; 0x41
 801837c:	2100      	movs	r1, #0
 801837e:	2000      	movs	r0, #0
 8018380:	f003 fd5e 	bl	801be40 <pbuf_alloc>
 8018384:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 8018386:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018388:	68b8      	ldr	r0, [r7, #8]
 801838a:	f7ff fefb 	bl	8018184 <http_post_rxpbuf>
 801838e:	4603      	mov	r3, r0
 8018390:	e010      	b.n	80183b4 <http_post_request+0x1b0>
            } else {
              return ERR_OK;
 8018392:	2300      	movs	r3, #0
 8018394:	e00e      	b.n	80183b4 <http_post_request+0x1b0>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 8018396:	2200      	movs	r2, #0
 8018398:	490b      	ldr	r1, [pc, #44]	; (80183c8 <http_post_request+0x1c4>)
 801839a:	68b8      	ldr	r0, [r7, #8]
 801839c:	f000 f996 	bl	80186cc <http_find_file>
 80183a0:	4603      	mov	r3, r0
 80183a2:	e007      	b.n	80183b4 <http_post_request+0x1b0>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 80183a4:	f06f 030f 	mvn.w	r3, #15
 80183a8:	e004      	b.n	80183b4 <http_post_request+0x1b0>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 80183aa:	f06f 030f 	mvn.w	r3, #15
 80183ae:	e001      	b.n	80183b4 <http_post_request+0x1b0>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 80183b0:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 80183b4:	4618      	mov	r0, r3
 80183b6:	3738      	adds	r7, #56	; 0x38
 80183b8:	46bd      	mov	sp, r7
 80183ba:	bd80      	pop	{r7, pc}
 80183bc:	0802ccf0 	.word	0x0802ccf0
 80183c0:	0802ccf8 	.word	0x0802ccf8
 80183c4:	0802cd0c 	.word	0x0802cd0c
 80183c8:	20005920 	.word	0x20005920

080183cc <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 80183cc:	b580      	push	{r7, lr}
 80183ce:	b092      	sub	sp, #72	; 0x48
 80183d0:	af02      	add	r7, sp, #8
 80183d2:	60f8      	str	r0, [r7, #12]
 80183d4:	60b9      	str	r1, [r7, #8]
 80183d6:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 80183dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d106      	bne.n	80183f0 <http_parse_request+0x24>
 80183e2:	4b87      	ldr	r3, [pc, #540]	; (8018600 <http_parse_request+0x234>)
 80183e4:	f240 72aa 	movw	r2, #1962	; 0x7aa
 80183e8:	4986      	ldr	r1, [pc, #536]	; (8018604 <http_parse_request+0x238>)
 80183ea:	4887      	ldr	r0, [pc, #540]	; (8018608 <http_parse_request+0x23c>)
 80183ec:	f00e fc34 	bl	8026c58 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 80183f0:	68bb      	ldr	r3, [r7, #8]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d106      	bne.n	8018404 <http_parse_request+0x38>
 80183f6:	4b82      	ldr	r3, [pc, #520]	; (8018600 <http_parse_request+0x234>)
 80183f8:	f240 72ab 	movw	r2, #1963	; 0x7ab
 80183fc:	4983      	ldr	r1, [pc, #524]	; (801860c <http_parse_request+0x240>)
 80183fe:	4882      	ldr	r0, [pc, #520]	; (8018608 <http_parse_request+0x23c>)
 8018400:	f00e fc2a 	bl	8026c58 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8018404:	68bb      	ldr	r3, [r7, #8]
 8018406:	695b      	ldr	r3, [r3, #20]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d103      	bne.n	8018414 <http_parse_request+0x48>
 801840c:	68bb      	ldr	r3, [r7, #8]
 801840e:	699b      	ldr	r3, [r3, #24]
 8018410:	2b00      	cmp	r3, #0
 8018412:	d002      	beq.n	801841a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8018414:	f06f 0307 	mvn.w	r3, #7
 8018418:	e0ed      	b.n	80185f6 <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 801841a:	68bb      	ldr	r3, [r7, #8]
 801841c:	6a1b      	ldr	r3, [r3, #32]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d103      	bne.n	801842a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8018422:	68bb      	ldr	r3, [r7, #8]
 8018424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018426:	621a      	str	r2, [r3, #32]
 8018428:	e005      	b.n	8018436 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 801842a:	68bb      	ldr	r3, [r7, #8]
 801842c:	6a1b      	ldr	r3, [r3, #32]
 801842e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018430:	4618      	mov	r0, r3
 8018432:	f004 f8b7 	bl	801c5a4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8018436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018438:	f004 f88c 	bl	801c554 <pbuf_ref>

  if (hs->req->next != NULL) {
 801843c:	68bb      	ldr	r3, [r7, #8]
 801843e:	6a1b      	ldr	r3, [r3, #32]
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d012      	beq.n	801846c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8018446:	68bb      	ldr	r3, [r7, #8]
 8018448:	6a1b      	ldr	r3, [r3, #32]
 801844a:	891b      	ldrh	r3, [r3, #8]
 801844c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8018450:	4293      	cmp	r3, r2
 8018452:	bf28      	it	cs
 8018454:	4613      	movcs	r3, r2
 8018456:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8018458:	68bb      	ldr	r3, [r7, #8]
 801845a:	6a18      	ldr	r0, [r3, #32]
 801845c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801845e:	2300      	movs	r3, #0
 8018460:	496b      	ldr	r1, [pc, #428]	; (8018610 <http_parse_request+0x244>)
 8018462:	f004 f9d7 	bl	801c814 <pbuf_copy_partial>
    data = httpd_req_buf;
 8018466:	4b6a      	ldr	r3, [pc, #424]	; (8018610 <http_parse_request+0x244>)
 8018468:	63fb      	str	r3, [r7, #60]	; 0x3c
 801846a:	e005      	b.n	8018478 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 801846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801846e:	685b      	ldr	r3, [r3, #4]
 8018470:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 8018472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018474:	895b      	ldrh	r3, [r3, #10]
 8018476:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8018478:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801847a:	2b06      	cmp	r3, #6
 801847c:	f240 80a1 	bls.w	80185c2 <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8018480:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018482:	461a      	mov	r2, r3
 8018484:	4963      	ldr	r1, [pc, #396]	; (8018614 <http_parse_request+0x248>)
 8018486:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018488:	f002 fbae 	bl	801abe8 <lwip_strnstr>
 801848c:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 801848e:	6a3b      	ldr	r3, [r7, #32]
 8018490:	2b00      	cmp	r3, #0
 8018492:	f000 8096 	beq.w	80185c2 <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 8018496:	2300      	movs	r3, #0
 8018498:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 801849a:	2300      	movs	r3, #0
 801849c:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 801849e:	2204      	movs	r2, #4
 80184a0:	495d      	ldr	r1, [pc, #372]	; (8018618 <http_parse_request+0x24c>)
 80184a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80184a4:	f00f fb6e 	bl	8027b84 <strncmp>
 80184a8:	4603      	mov	r3, r0
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d103      	bne.n	80184b6 <http_parse_request+0xea>
        sp1 = data + 3;
 80184ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184b0:	3303      	adds	r3, #3
 80184b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80184b4:	e014      	b.n	80184e0 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 80184b6:	2205      	movs	r2, #5
 80184b8:	4958      	ldr	r1, [pc, #352]	; (801861c <http_parse_request+0x250>)
 80184ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80184bc:	f00f fb62 	bl	8027b84 <strncmp>
 80184c0:	4603      	mov	r3, r0
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d105      	bne.n	80184d2 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 80184c6:	2301      	movs	r3, #1
 80184c8:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 80184ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184cc:	3304      	adds	r3, #4
 80184ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80184d0:	e006      	b.n	80184e0 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 80184d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184d4:	3304      	adds	r3, #4
 80184d6:	2200      	movs	r2, #0
 80184d8:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 80184da:	f06f 030f 	mvn.w	r3, #15
 80184de:	e08a      	b.n	80185f6 <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80184e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184e2:	1c5a      	adds	r2, r3, #1
 80184e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184e6:	1ad3      	subs	r3, r2, r3
 80184e8:	b29b      	uxth	r3, r3
 80184ea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80184ec:	1ad3      	subs	r3, r2, r3
 80184ee:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80184f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184f2:	3301      	adds	r3, #1
 80184f4:	8bfa      	ldrh	r2, [r7, #30]
 80184f6:	494a      	ldr	r1, [pc, #296]	; (8018620 <http_parse_request+0x254>)
 80184f8:	4618      	mov	r0, r3
 80184fa:	f002 fb75 	bl	801abe8 <lwip_strnstr>
 80184fe:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8018500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018502:	2b00      	cmp	r3, #0
 8018504:	d10c      	bne.n	8018520 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8018506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018508:	3301      	adds	r3, #1
 801850a:	8bfa      	ldrh	r2, [r7, #30]
 801850c:	4941      	ldr	r1, [pc, #260]	; (8018614 <http_parse_request+0x248>)
 801850e:	4618      	mov	r0, r3
 8018510:	f002 fb6a 	bl	801abe8 <lwip_strnstr>
 8018514:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8018516:	2301      	movs	r3, #1
 8018518:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 801851a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801851c:	2b00      	cmp	r3, #0
 801851e:	d163      	bne.n	80185e8 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8018520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018522:	3301      	adds	r3, #1
 8018524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018526:	1ad3      	subs	r3, r2, r3
 8018528:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 801852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801852c:	2b00      	cmp	r3, #0
 801852e:	d048      	beq.n	80185c2 <http_parse_request+0x1f6>
 8018530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018534:	429a      	cmp	r2, r3
 8018536:	d944      	bls.n	80185c2 <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8018538:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801853a:	461a      	mov	r2, r3
 801853c:	4939      	ldr	r1, [pc, #228]	; (8018624 <http_parse_request+0x258>)
 801853e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018540:	f002 fb52 	bl	801abe8 <lwip_strnstr>
 8018544:	4603      	mov	r3, r0
 8018546:	2b00      	cmp	r3, #0
 8018548:	d03b      	beq.n	80185c2 <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 801854a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801854c:	3301      	adds	r3, #1
 801854e:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8018550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018552:	2200      	movs	r2, #0
 8018554:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8018556:	8bbb      	ldrh	r3, [r7, #28]
 8018558:	69ba      	ldr	r2, [r7, #24]
 801855a:	4413      	add	r3, r2
 801855c:	2200      	movs	r2, #0
 801855e:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 8018560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018562:	2b00      	cmp	r3, #0
 8018564:	d026      	beq.n	80185b4 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 8018566:	68bb      	ldr	r3, [r7, #8]
 8018568:	6a1b      	ldr	r3, [r3, #32]
 801856a:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 801856c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801856e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018570:	9301      	str	r3, [sp, #4]
 8018572:	69bb      	ldr	r3, [r7, #24]
 8018574:	9300      	str	r3, [sp, #0]
 8018576:	4613      	mov	r3, r2
 8018578:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801857a:	68b9      	ldr	r1, [r7, #8]
 801857c:	6978      	ldr	r0, [r7, #20]
 801857e:	f7ff fe41 	bl	8018204 <http_post_request>
 8018582:	4603      	mov	r3, r0
 8018584:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 8018586:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d00a      	beq.n	80185a4 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 801858e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018590:	2220      	movs	r2, #32
 8018592:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 8018594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018596:	2220      	movs	r2, #32
 8018598:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 801859a:	8bbb      	ldrh	r3, [r7, #28]
 801859c:	69ba      	ldr	r2, [r7, #24]
 801859e:	4413      	add	r3, r2
 80185a0:	2220      	movs	r2, #32
 80185a2:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 80185a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80185a8:	f113 0f10 	cmn.w	r3, #16
 80185ac:	d01e      	beq.n	80185ec <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 80185ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80185b2:	e020      	b.n	80185f6 <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 80185b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80185b6:	69b9      	ldr	r1, [r7, #24]
 80185b8:	68b8      	ldr	r0, [r7, #8]
 80185ba:	f000 f887 	bl	80186cc <http_find_file>
 80185be:	4603      	mov	r3, r0
 80185c0:	e019      	b.n	80185f6 <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 80185c2:	68bb      	ldr	r3, [r7, #8]
 80185c4:	6a1b      	ldr	r3, [r3, #32]
 80185c6:	4618      	mov	r0, r3
 80185c8:	f003 ffac 	bl	801c524 <pbuf_clen>
 80185cc:	4603      	mov	r3, r0
 80185ce:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80185d0:	68bb      	ldr	r3, [r7, #8]
 80185d2:	6a1b      	ldr	r3, [r3, #32]
 80185d4:	891b      	ldrh	r3, [r3, #8]
 80185d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80185da:	d209      	bcs.n	80185f0 <http_parse_request+0x224>
 80185dc:	8a3b      	ldrh	r3, [r7, #16]
 80185de:	2b05      	cmp	r3, #5
 80185e0:	d806      	bhi.n	80185f0 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 80185e2:	f06f 0304 	mvn.w	r3, #4
 80185e6:	e006      	b.n	80185f6 <http_parse_request+0x22a>
          goto badrequest;
 80185e8:	bf00      	nop
 80185ea:	e002      	b.n	80185f2 <http_parse_request+0x226>
              goto badrequest;
 80185ec:	bf00      	nop
 80185ee:	e000      	b.n	80185f2 <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 80185f0:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 80185f2:	f06f 030f 	mvn.w	r3, #15
  }
}
 80185f6:	4618      	mov	r0, r3
 80185f8:	3740      	adds	r7, #64	; 0x40
 80185fa:	46bd      	mov	sp, r7
 80185fc:	bd80      	pop	{r7, pc}
 80185fe:	bf00      	nop
 8018600:	0802cbb0 	.word	0x0802cbb0
 8018604:	0802cd10 	.word	0x0802cd10
 8018608:	0802cbf8 	.word	0x0802cbf8
 801860c:	0802cc20 	.word	0x0802cc20
 8018610:	20005520 	.word	0x20005520
 8018614:	0802cd0c 	.word	0x0802cd0c
 8018618:	0802cd1c 	.word	0x0802cd1c
 801861c:	0802cd24 	.word	0x0802cd24
 8018620:	0802cd2c 	.word	0x0802cd2c
 8018624:	0802ccf0 	.word	0x0802ccf0

08018628 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 8018628:	b580      	push	{r7, lr}
 801862a:	b088      	sub	sp, #32
 801862c:	af00      	add	r7, sp, #0
 801862e:	6078      	str	r0, [r7, #4]
 8018630:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 8018632:	2300      	movs	r3, #0
 8018634:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	2b00      	cmp	r3, #0
 801863a:	d040      	beq.n	80186be <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 801863c:	2300      	movs	r3, #0
 801863e:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 8018640:	213f      	movs	r1, #63	; 0x3f
 8018642:	6838      	ldr	r0, [r7, #0]
 8018644:	f00e fd2c 	bl	80270a0 <strchr>
 8018648:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	2b00      	cmp	r3, #0
 801864e:	d002      	beq.n	8018656 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	2200      	movs	r2, #0
 8018654:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 8018656:	683b      	ldr	r3, [r7, #0]
 8018658:	613b      	str	r3, [r7, #16]
    ext = uri;
 801865a:	683b      	ldr	r3, [r7, #0]
 801865c:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 801865e:	212e      	movs	r1, #46	; 0x2e
 8018660:	6938      	ldr	r0, [r7, #16]
 8018662:	f00e fd1d 	bl	80270a0 <strchr>
 8018666:	6138      	str	r0, [r7, #16]
 8018668:	e009      	b.n	801867e <http_uri_is_ssi+0x56>
      ext = sub;
 801866a:	693b      	ldr	r3, [r7, #16]
 801866c:	617b      	str	r3, [r7, #20]
      sub++;
 801866e:	693b      	ldr	r3, [r7, #16]
 8018670:	3301      	adds	r3, #1
 8018672:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8018674:	212e      	movs	r1, #46	; 0x2e
 8018676:	6938      	ldr	r0, [r7, #16]
 8018678:	f00e fd12 	bl	80270a0 <strchr>
 801867c:	6138      	str	r0, [r7, #16]
 801867e:	693b      	ldr	r3, [r7, #16]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d1f2      	bne.n	801866a <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8018684:	2300      	movs	r3, #0
 8018686:	61fb      	str	r3, [r7, #28]
 8018688:	e010      	b.n	80186ac <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 801868a:	4a0f      	ldr	r2, [pc, #60]	; (80186c8 <http_uri_is_ssi+0xa0>)
 801868c:	69fb      	ldr	r3, [r7, #28]
 801868e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018692:	4619      	mov	r1, r3
 8018694:	6978      	ldr	r0, [r7, #20]
 8018696:	f002 fadd 	bl	801ac54 <lwip_stricmp>
 801869a:	4603      	mov	r3, r0
 801869c:	2b00      	cmp	r3, #0
 801869e:	d102      	bne.n	80186a6 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 80186a0:	2301      	movs	r3, #1
 80186a2:	76fb      	strb	r3, [r7, #27]
        break;
 80186a4:	e005      	b.n	80186b2 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80186a6:	69fb      	ldr	r3, [r7, #28]
 80186a8:	3301      	adds	r3, #1
 80186aa:	61fb      	str	r3, [r7, #28]
 80186ac:	69fb      	ldr	r3, [r7, #28]
 80186ae:	2b04      	cmp	r3, #4
 80186b0:	d9eb      	bls.n	801868a <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d002      	beq.n	80186be <http_uri_is_ssi+0x96>
      *param = '?';
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	223f      	movs	r2, #63	; 0x3f
 80186bc:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 80186be:	7efb      	ldrb	r3, [r7, #27]
}
 80186c0:	4618      	mov	r0, r3
 80186c2:	3720      	adds	r7, #32
 80186c4:	46bd      	mov	sp, r7
 80186c6:	bd80      	pop	{r7, pc}
 80186c8:	080607a8 	.word	0x080607a8

080186cc <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 80186cc:	b590      	push	{r4, r7, lr}
 80186ce:	b093      	sub	sp, #76	; 0x4c
 80186d0:	af02      	add	r7, sp, #8
 80186d2:	60f8      	str	r0, [r7, #12]
 80186d4:	60b9      	str	r1, [r7, #8]
 80186d6:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 80186d8:	2300      	movs	r3, #0
 80186da:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 80186dc:	2300      	movs	r3, #0
 80186de:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 80186e0:	2300      	movs	r3, #0
 80186e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 80186e6:	68bb      	ldr	r3, [r7, #8]
 80186e8:	4618      	mov	r0, r3
 80186ea:	f7e7 fd7b 	bl	80001e4 <strlen>
 80186ee:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80186f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d072      	beq.n	80187dc <http_find_file+0x110>
 80186f6:	68ba      	ldr	r2, [r7, #8]
 80186f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186fa:	3b01      	subs	r3, #1
 80186fc:	4413      	add	r3, r2
 80186fe:	781b      	ldrb	r3, [r3, #0]
 8018700:	2b2f      	cmp	r3, #47	; 0x2f
 8018702:	d16b      	bne.n	80187dc <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8018704:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8018706:	4a80      	ldr	r2, [pc, #512]	; (8018908 <http_find_file+0x23c>)
 8018708:	4293      	cmp	r3, r2
 801870a:	d102      	bne.n	8018712 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 801870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801870e:	2b01      	cmp	r3, #1
 8018710:	d164      	bne.n	80187dc <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8018712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018714:	3b01      	subs	r3, #1
 8018716:	2b3f      	cmp	r3, #63	; 0x3f
 8018718:	bf28      	it	cs
 801871a:	233f      	movcs	r3, #63	; 0x3f
 801871c:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 801871e:	6a3b      	ldr	r3, [r7, #32]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d00a      	beq.n	801873a <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8018724:	68bb      	ldr	r3, [r7, #8]
 8018726:	6a3a      	ldr	r2, [r7, #32]
 8018728:	4619      	mov	r1, r3
 801872a:	4877      	ldr	r0, [pc, #476]	; (8018908 <http_find_file+0x23c>)
 801872c:	f00d ff3c 	bl	80265a8 <memcpy>
      http_uri_buf[copy_len] = 0;
 8018730:	4a75      	ldr	r2, [pc, #468]	; (8018908 <http_find_file+0x23c>)
 8018732:	6a3b      	ldr	r3, [r7, #32]
 8018734:	4413      	add	r3, r2
 8018736:	2200      	movs	r2, #0
 8018738:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 801873a:	2300      	movs	r3, #0
 801873c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801873e:	e04a      	b.n	80187d6 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8018740:	6a3b      	ldr	r3, [r7, #32]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d028      	beq.n	8018798 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8018746:	6a3b      	ldr	r3, [r7, #32]
 8018748:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 801874c:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 801874e:	69fb      	ldr	r3, [r7, #28]
 8018750:	2b00      	cmp	r3, #0
 8018752:	d01e      	beq.n	8018792 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8018754:	4a6d      	ldr	r2, [pc, #436]	; (801890c <http_find_file+0x240>)
 8018756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018758:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801875c:	4618      	mov	r0, r3
 801875e:	f7e7 fd41 	bl	80001e4 <strlen>
 8018762:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8018764:	69ba      	ldr	r2, [r7, #24]
 8018766:	69fb      	ldr	r3, [r7, #28]
 8018768:	4293      	cmp	r3, r2
 801876a:	bf28      	it	cs
 801876c:	4613      	movcs	r3, r2
 801876e:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8018770:	6a3b      	ldr	r3, [r7, #32]
 8018772:	4a65      	ldr	r2, [pc, #404]	; (8018908 <http_find_file+0x23c>)
 8018774:	1898      	adds	r0, r3, r2
 8018776:	4a65      	ldr	r2, [pc, #404]	; (801890c <http_find_file+0x240>)
 8018778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801877a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801877e:	697a      	ldr	r2, [r7, #20]
 8018780:	4619      	mov	r1, r3
 8018782:	f00d ff11 	bl	80265a8 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8018786:	6a3a      	ldr	r2, [r7, #32]
 8018788:	697b      	ldr	r3, [r7, #20]
 801878a:	4413      	add	r3, r2
 801878c:	4a5e      	ldr	r2, [pc, #376]	; (8018908 <http_find_file+0x23c>)
 801878e:	2100      	movs	r1, #0
 8018790:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8018792:	4b5d      	ldr	r3, [pc, #372]	; (8018908 <http_find_file+0x23c>)
 8018794:	62bb      	str	r3, [r7, #40]	; 0x28
 8018796:	e004      	b.n	80187a2 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8018798:	4a5c      	ldr	r2, [pc, #368]	; (801890c <http_find_file+0x240>)
 801879a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801879c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80187a0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80187a6:	4618      	mov	r0, r3
 80187a8:	f7fe fdd2 	bl	8017350 <fs_open>
 80187ac:	4603      	mov	r3, r0
 80187ae:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 80187b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d10b      	bne.n	80187d0 <http_find_file+0x104>
        uri = file_name;
 80187b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ba:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 80187c0:	4a52      	ldr	r2, [pc, #328]	; (801890c <http_find_file+0x240>)
 80187c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80187c4:	00db      	lsls	r3, r3, #3
 80187c6:	4413      	add	r3, r2
 80187c8:	791b      	ldrb	r3, [r3, #4]
 80187ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 80187ce:	e005      	b.n	80187dc <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80187d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80187d2:	3301      	adds	r3, #1
 80187d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80187d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d0b1      	beq.n	8018740 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 80187dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d176      	bne.n	80188d0 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80187e2:	68bb      	ldr	r3, [r7, #8]
 80187e4:	213f      	movs	r1, #63	; 0x3f
 80187e6:	4618      	mov	r0, r3
 80187e8:	f00e fc5a 	bl	80270a0 <strchr>
 80187ec:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 80187ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d005      	beq.n	8018800 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 80187f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187f6:	2200      	movs	r2, #0
 80187f8:	701a      	strb	r2, [r3, #0]
      params++;
 80187fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187fc:	3301      	adds	r3, #1
 80187fe:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8018800:	4b43      	ldr	r3, [pc, #268]	; (8018910 <http_find_file+0x244>)
 8018802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018806:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 8018808:	4b42      	ldr	r3, [pc, #264]	; (8018914 <http_find_file+0x248>)
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	2b00      	cmp	r3, #0
 801880e:	d034      	beq.n	801887a <http_find_file+0x1ae>
 8018810:	4b41      	ldr	r3, [pc, #260]	; (8018918 <http_find_file+0x24c>)
 8018812:	681b      	ldr	r3, [r3, #0]
 8018814:	2b00      	cmp	r3, #0
 8018816:	d030      	beq.n	801887a <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8018818:	2300      	movs	r3, #0
 801881a:	633b      	str	r3, [r7, #48]	; 0x30
 801881c:	e028      	b.n	8018870 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 801881e:	68b8      	ldr	r0, [r7, #8]
 8018820:	4b3d      	ldr	r3, [pc, #244]	; (8018918 <http_find_file+0x24c>)
 8018822:	681a      	ldr	r2, [r3, #0]
 8018824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018826:	00db      	lsls	r3, r3, #3
 8018828:	4413      	add	r3, r2
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	4619      	mov	r1, r3
 801882e:	f7e7 fccf 	bl	80001d0 <strcmp>
 8018832:	4603      	mov	r3, r0
 8018834:	2b00      	cmp	r3, #0
 8018836:	d118      	bne.n	801886a <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8018838:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801883a:	68f8      	ldr	r0, [r7, #12]
 801883c:	f7fe ff38 	bl	80176b0 <extract_uri_parameters>
 8018840:	4603      	mov	r3, r0
 8018842:	4a33      	ldr	r2, [pc, #204]	; (8018910 <http_find_file+0x244>)
 8018844:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8018846:	4b34      	ldr	r3, [pc, #208]	; (8018918 <http_find_file+0x24c>)
 8018848:	681a      	ldr	r2, [r3, #0]
 801884a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801884c:	00db      	lsls	r3, r3, #3
 801884e:	4413      	add	r3, r2
 8018850:	685c      	ldr	r4, [r3, #4]
 8018852:	4b2f      	ldr	r3, [pc, #188]	; (8018910 <http_find_file+0x244>)
 8018854:	6819      	ldr	r1, [r3, #0]
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8018860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018862:	47a0      	blx	r4
 8018864:	4603      	mov	r3, r0
 8018866:	60bb      	str	r3, [r7, #8]
          break;
 8018868:	e007      	b.n	801887a <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 801886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801886c:	3301      	adds	r3, #1
 801886e:	633b      	str	r3, [r7, #48]	; 0x30
 8018870:	4b28      	ldr	r3, [pc, #160]	; (8018914 <http_find_file+0x248>)
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018876:	429a      	cmp	r2, r3
 8018878:	dbd1      	blt.n	801881e <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 801887a:	68fb      	ldr	r3, [r7, #12]
 801887c:	68ba      	ldr	r2, [r7, #8]
 801887e:	4611      	mov	r1, r2
 8018880:	4618      	mov	r0, r3
 8018882:	f7fe fd65 	bl	8017350 <fs_open>
 8018886:	4603      	mov	r3, r0
 8018888:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 801888a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d102      	bne.n	8018898 <http_find_file+0x1cc>
      file = &hs->file_handle;
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	63bb      	str	r3, [r7, #56]	; 0x38
 8018896:	e006      	b.n	80188a6 <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 8018898:	f107 0308 	add.w	r3, r7, #8
 801889c:	4619      	mov	r1, r3
 801889e:	68f8      	ldr	r0, [r7, #12]
 80188a0:	f7ff fc12 	bl	80180c8 <http_get_404_file>
 80188a4:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 80188a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d011      	beq.n	80188d0 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 80188ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188ae:	7c1b      	ldrb	r3, [r3, #16]
 80188b0:	f003 0308 	and.w	r3, r3, #8
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d003      	beq.n	80188c0 <http_find_file+0x1f4>
        tag_check = 1;
 80188b8:	2301      	movs	r3, #1
 80188ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80188be:	e007      	b.n	80188d0 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 80188c0:	68bb      	ldr	r3, [r7, #8]
 80188c2:	4619      	mov	r1, r3
 80188c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80188c6:	f7ff feaf 	bl	8018628 <http_uri_is_ssi>
 80188ca:	4603      	mov	r3, r0
 80188cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80188d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d106      	bne.n	80188e4 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80188d6:	f107 0308 	add.w	r3, r7, #8
 80188da:	4619      	mov	r1, r3
 80188dc:	68f8      	ldr	r0, [r7, #12]
 80188de:	f7ff fbf3 	bl	80180c8 <http_get_404_file>
 80188e2:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80188e4:	68ba      	ldr	r2, [r7, #8]
 80188e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188e8:	9301      	str	r3, [sp, #4]
 80188ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80188ee:	9300      	str	r3, [sp, #0]
 80188f0:	4613      	mov	r3, r2
 80188f2:	687a      	ldr	r2, [r7, #4]
 80188f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80188f6:	68f8      	ldr	r0, [r7, #12]
 80188f8:	f000 f810 	bl	801891c <http_init_file>
 80188fc:	4603      	mov	r3, r0
}
 80188fe:	4618      	mov	r0, r3
 8018900:	3744      	adds	r7, #68	; 0x44
 8018902:	46bd      	mov	sp, r7
 8018904:	bd90      	pop	{r4, r7, pc}
 8018906:	bf00      	nop
 8018908:	20005920 	.word	0x20005920
 801890c:	080607bc 	.word	0x080607bc
 8018910:	20005974 	.word	0x20005974
 8018914:	20005970 	.word	0x20005970
 8018918:	2000596c 	.word	0x2000596c

0801891c <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 801891c:	b580      	push	{r7, lr}
 801891e:	b088      	sub	sp, #32
 8018920:	af00      	add	r7, sp, #0
 8018922:	60f8      	str	r0, [r7, #12]
 8018924:	60b9      	str	r1, [r7, #8]
 8018926:	607a      	str	r2, [r7, #4]
 8018928:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 801892a:	68bb      	ldr	r3, [r7, #8]
 801892c:	2b00      	cmp	r3, #0
 801892e:	d06f      	beq.n	8018a10 <http_init_file+0xf4>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8018930:	68bb      	ldr	r3, [r7, #8]
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d106      	bne.n	8018946 <http_init_file+0x2a>
 8018938:	4b3e      	ldr	r3, [pc, #248]	; (8018a34 <http_init_file+0x118>)
 801893a:	f640 1207 	movw	r2, #2311	; 0x907
 801893e:	493e      	ldr	r1, [pc, #248]	; (8018a38 <http_init_file+0x11c>)
 8018940:	483e      	ldr	r0, [pc, #248]	; (8018a3c <http_init_file+0x120>)
 8018942:	f00e f989 	bl	8026c58 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 8018946:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801894a:	2b00      	cmp	r3, #0
 801894c:	d01c      	beq.n	8018988 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 801894e:	f7fe fd56 	bl	80173fe <http_ssi_state_alloc>
 8018952:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8018954:	69fb      	ldr	r3, [r7, #28]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d016      	beq.n	8018988 <http_init_file+0x6c>
        ssi->tag_index = 0;
 801895a:	69fb      	ldr	r3, [r7, #28]
 801895c:	2200      	movs	r2, #0
 801895e:	821a      	strh	r2, [r3, #16]
        ssi->tag_state = TAG_NONE;
 8018960:	69fb      	ldr	r3, [r7, #28]
 8018962:	2200      	movs	r2, #0
 8018964:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        ssi->parsed = file->data;
 8018968:	68bb      	ldr	r3, [r7, #8]
 801896a:	681a      	ldr	r2, [r3, #0]
 801896c:	69fb      	ldr	r3, [r7, #28]
 801896e:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8018970:	68bb      	ldr	r3, [r7, #8]
 8018972:	685b      	ldr	r3, [r3, #4]
 8018974:	461a      	mov	r2, r3
 8018976:	69fb      	ldr	r3, [r7, #28]
 8018978:	60da      	str	r2, [r3, #12]
        ssi->tag_end = file->data;
 801897a:	68bb      	ldr	r3, [r7, #8]
 801897c:	681a      	ldr	r2, [r3, #0]
 801897e:	69fb      	ldr	r3, [r7, #28]
 8018980:	609a      	str	r2, [r3, #8]
        hs->ssi = ssi;
 8018982:	68fb      	ldr	r3, [r7, #12]
 8018984:	69fa      	ldr	r2, [r7, #28]
 8018986:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	68ba      	ldr	r2, [r7, #8]
 801898c:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 801898e:	68bb      	ldr	r3, [r7, #8]
 8018990:	681a      	ldr	r2, [r3, #0]
 8018992:	68fb      	ldr	r3, [r7, #12]
 8018994:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8018996:	68bb      	ldr	r3, [r7, #8]
 8018998:	685b      	ldr	r3, [r3, #4]
 801899a:	2b00      	cmp	r3, #0
 801899c:	da06      	bge.n	80189ac <http_init_file+0x90>
 801899e:	4b25      	ldr	r3, [pc, #148]	; (8018a34 <http_init_file+0x118>)
 80189a0:	f44f 6213 	mov.w	r2, #2352	; 0x930
 80189a4:	4926      	ldr	r1, [pc, #152]	; (8018a40 <http_init_file+0x124>)
 80189a6:	4825      	ldr	r0, [pc, #148]	; (8018a3c <http_init_file+0x120>)
 80189a8:	f00e f956 	bl	8026c58 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 80189ac:	68bb      	ldr	r3, [r7, #8]
 80189ae:	685b      	ldr	r3, [r3, #4]
 80189b0:	461a      	mov	r2, r3
 80189b2:	68fb      	ldr	r3, [r7, #12]
 80189b4:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 80189b6:	68fb      	ldr	r3, [r7, #12]
 80189b8:	2200      	movs	r2, #0
 80189ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
//#if !LWIP_HTTPD_DYNAMIC_HEADERS
//    LWIP_ASSERT("HTTP headers not included in file system",
//                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
//#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d032      	beq.n	8018a2a <http_init_file+0x10e>
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	695b      	ldr	r3, [r3, #20]
 80189c8:	7c1b      	ldrb	r3, [r3, #16]
 80189ca:	f003 0301 	and.w	r3, r3, #1
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d02b      	beq.n	8018a2a <http_init_file+0x10e>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	6998      	ldr	r0, [r3, #24]
 80189d6:	68fb      	ldr	r3, [r7, #12]
 80189d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189da:	461a      	mov	r2, r3
 80189dc:	4919      	ldr	r1, [pc, #100]	; (8018a44 <http_init_file+0x128>)
 80189de:	f002 f903 	bl	801abe8 <lwip_strnstr>
 80189e2:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 80189e4:	69bb      	ldr	r3, [r7, #24]
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d01f      	beq.n	8018a2a <http_init_file+0x10e>
        int diff = file_start + 4 - hs->file;
 80189ea:	69bb      	ldr	r3, [r7, #24]
 80189ec:	1d1a      	adds	r2, r3, #4
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	699b      	ldr	r3, [r3, #24]
 80189f2:	1ad3      	subs	r3, r2, r3
 80189f4:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	699a      	ldr	r2, [r3, #24]
 80189fa:	697b      	ldr	r3, [r7, #20]
 80189fc:	441a      	add	r2, r3
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018a06:	697b      	ldr	r3, [r7, #20]
 8018a08:	1ad2      	subs	r2, r2, r3
 8018a0a:	68fb      	ldr	r3, [r7, #12]
 8018a0c:	625a      	str	r2, [r3, #36]	; 0x24
 8018a0e:	e00c      	b.n	8018a2a <http_init_file+0x10e>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	2200      	movs	r2, #0
 8018a14:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	2200      	movs	r2, #0
 8018a1a:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	2200      	movs	r2, #0
 8018a20:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	2200      	movs	r2, #0
 8018a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8018a2a:	2300      	movs	r3, #0
}
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	3720      	adds	r7, #32
 8018a30:	46bd      	mov	sp, r7
 8018a32:	bd80      	pop	{r7, pc}
 8018a34:	0802cbb0 	.word	0x0802cbb0
 8018a38:	0802cd30 	.word	0x0802cd30
 8018a3c:	0802cbf8 	.word	0x0802cbf8
 8018a40:	0802cd44 	.word	0x0802cd44
 8018a44:	0802ccf0 	.word	0x0802ccf0

08018a48 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8018a48:	b580      	push	{r7, lr}
 8018a4a:	b084      	sub	sp, #16
 8018a4c:	af00      	add	r7, sp, #0
 8018a4e:	6078      	str	r0, [r7, #4]
 8018a50:	460b      	mov	r3, r1
 8018a52:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d002      	beq.n	8018a64 <http_err+0x1c>
    http_state_free(hs);
 8018a5e:	68f8      	ldr	r0, [r7, #12]
 8018a60:	f7fe fd3c 	bl	80174dc <http_state_free>
  }
}
 8018a64:	bf00      	nop
 8018a66:	3710      	adds	r7, #16
 8018a68:	46bd      	mov	sp, r7
 8018a6a:	bd80      	pop	{r7, pc}

08018a6c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8018a6c:	b580      	push	{r7, lr}
 8018a6e:	b086      	sub	sp, #24
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	60f8      	str	r0, [r7, #12]
 8018a74:	60b9      	str	r1, [r7, #8]
 8018a76:	4613      	mov	r3, r2
 8018a78:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8018a7e:	697b      	ldr	r3, [r7, #20]
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d101      	bne.n	8018a88 <http_sent+0x1c>
    return ERR_OK;
 8018a84:	2300      	movs	r3, #0
 8018a86:	e008      	b.n	8018a9a <http_sent+0x2e>
  }

  hs->retries = 0;
 8018a88:	697b      	ldr	r3, [r7, #20]
 8018a8a:	2200      	movs	r2, #0
 8018a8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8018a90:	6979      	ldr	r1, [r7, #20]
 8018a92:	68b8      	ldr	r0, [r7, #8]
 8018a94:	f7ff fad6 	bl	8018044 <http_send>

  return ERR_OK;
 8018a98:	2300      	movs	r3, #0
}
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	3718      	adds	r7, #24
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	bd80      	pop	{r7, pc}

08018aa2 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8018aa2:	b580      	push	{r7, lr}
 8018aa4:	b084      	sub	sp, #16
 8018aa6:	af00      	add	r7, sp, #0
 8018aa8:	6078      	str	r0, [r7, #4]
 8018aaa:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d107      	bne.n	8018ac6 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8018ab6:	2100      	movs	r1, #0
 8018ab8:	6838      	ldr	r0, [r7, #0]
 8018aba:	f7fe fddd 	bl	8017678 <http_close_conn>
 8018abe:	4603      	mov	r3, r0
 8018ac0:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	e021      	b.n	8018b0a <http_poll+0x68>
  } else {
    hs->retries++;
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018acc:	3301      	adds	r3, #1
 8018ace:	b2da      	uxtb	r2, r3
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018adc:	2b04      	cmp	r3, #4
 8018ade:	d105      	bne.n	8018aec <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8018ae0:	68f9      	ldr	r1, [r7, #12]
 8018ae2:	6838      	ldr	r0, [r7, #0]
 8018ae4:	f7fe fdc8 	bl	8017678 <http_close_conn>
      return ERR_OK;
 8018ae8:	2300      	movs	r3, #0
 8018aea:	e00e      	b.n	8018b0a <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	695b      	ldr	r3, [r3, #20]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d009      	beq.n	8018b08 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8018af4:	68f9      	ldr	r1, [r7, #12]
 8018af6:	6838      	ldr	r0, [r7, #0]
 8018af8:	f7ff faa4 	bl	8018044 <http_send>
 8018afc:	4603      	mov	r3, r0
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d002      	beq.n	8018b08 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8018b02:	6838      	ldr	r0, [r7, #0]
 8018b04:	f009 f986 	bl	8021e14 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8018b08:	2300      	movs	r3, #0
}
 8018b0a:	4618      	mov	r0, r3
 8018b0c:	3710      	adds	r7, #16
 8018b0e:	46bd      	mov	sp, r7
 8018b10:	bd80      	pop	{r7, pc}
	...

08018b14 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b086      	sub	sp, #24
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	60f8      	str	r0, [r7, #12]
 8018b1c:	60b9      	str	r1, [r7, #8]
 8018b1e:	607a      	str	r2, [r7, #4]
 8018b20:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8018b22:	68fb      	ldr	r3, [r7, #12]
 8018b24:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8018b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d105      	bne.n	8018b3a <http_recv+0x26>
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d002      	beq.n	8018b3a <http_recv+0x26>
 8018b34:	697b      	ldr	r3, [r7, #20]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d111      	bne.n	8018b5e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	d008      	beq.n	8018b52 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	891b      	ldrh	r3, [r3, #8]
 8018b44:	4619      	mov	r1, r3
 8018b46:	68b8      	ldr	r0, [r7, #8]
 8018b48:	f004 fc40 	bl	801d3cc <tcp_recved>
      pbuf_free(p);
 8018b4c:	6878      	ldr	r0, [r7, #4]
 8018b4e:	f003 fc5b 	bl	801c408 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8018b52:	6979      	ldr	r1, [r7, #20]
 8018b54:	68b8      	ldr	r0, [r7, #8]
 8018b56:	f7fe fd8f 	bl	8017678 <http_close_conn>
    return ERR_OK;
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	e072      	b.n	8018c44 <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	891b      	ldrh	r3, [r3, #8]
 8018b62:	4619      	mov	r1, r3
 8018b64:	68b8      	ldr	r0, [r7, #8]
 8018b66:	f004 fc31 	bl	801d3cc <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 8018b6a:	697b      	ldr	r3, [r7, #20]
 8018b6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d012      	beq.n	8018b9a <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 8018b74:	697b      	ldr	r3, [r7, #20]
 8018b76:	2200      	movs	r2, #0
 8018b78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 8018b7c:	6879      	ldr	r1, [r7, #4]
 8018b7e:	6978      	ldr	r0, [r7, #20]
 8018b80:	f7ff fb00 	bl	8018184 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 8018b84:	697b      	ldr	r3, [r7, #20]
 8018b86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d103      	bne.n	8018b96 <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 8018b8e:	6979      	ldr	r1, [r7, #20]
 8018b90:	68b8      	ldr	r0, [r7, #8]
 8018b92:	f7ff fa57 	bl	8018044 <http_send>
    }
    return ERR_OK;
 8018b96:	2300      	movs	r3, #0
 8018b98:	e054      	b.n	8018c44 <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8018b9a:	697b      	ldr	r3, [r7, #20]
 8018b9c:	695b      	ldr	r3, [r3, #20]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d14c      	bne.n	8018c3c <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 8018ba2:	68ba      	ldr	r2, [r7, #8]
 8018ba4:	6979      	ldr	r1, [r7, #20]
 8018ba6:	6878      	ldr	r0, [r7, #4]
 8018ba8:	f7ff fc10 	bl	80183cc <http_parse_request>
 8018bac:	4603      	mov	r3, r0
 8018bae:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8018bb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d015      	beq.n	8018be4 <http_recv+0xd0>
 8018bb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018bbc:	f113 0f05 	cmn.w	r3, #5
 8018bc0:	d010      	beq.n	8018be4 <http_recv+0xd0>
 8018bc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018bc6:	f113 0f10 	cmn.w	r3, #16
 8018bca:	d00b      	beq.n	8018be4 <http_recv+0xd0>
 8018bcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018bd0:	f113 0f08 	cmn.w	r3, #8
 8018bd4:	d006      	beq.n	8018be4 <http_recv+0xd0>
 8018bd6:	4b1d      	ldr	r3, [pc, #116]	; (8018c4c <http_recv+0x138>)
 8018bd8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8018bdc:	491c      	ldr	r1, [pc, #112]	; (8018c50 <http_recv+0x13c>)
 8018bde:	481d      	ldr	r0, [pc, #116]	; (8018c54 <http_recv+0x140>)
 8018be0:	f00e f83a 	bl	8026c58 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8018be4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018be8:	f113 0f05 	cmn.w	r3, #5
 8018bec:	d00b      	beq.n	8018c06 <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8018bee:	697b      	ldr	r3, [r7, #20]
 8018bf0:	6a1b      	ldr	r3, [r3, #32]
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d007      	beq.n	8018c06 <http_recv+0xf2>
          pbuf_free(hs->req);
 8018bf6:	697b      	ldr	r3, [r7, #20]
 8018bf8:	6a1b      	ldr	r3, [r3, #32]
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	f003 fc04 	bl	801c408 <pbuf_free>
          hs->req = NULL;
 8018c00:	697b      	ldr	r3, [r7, #20]
 8018c02:	2200      	movs	r2, #0
 8018c04:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8018c06:	6878      	ldr	r0, [r7, #4]
 8018c08:	f003 fbfe 	bl	801c408 <pbuf_free>
      if (parsed == ERR_OK) {
 8018c0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d109      	bne.n	8018c28 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 8018c14:	697b      	ldr	r3, [r7, #20]
 8018c16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d111      	bne.n	8018c42 <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8018c1e:	6979      	ldr	r1, [r7, #20]
 8018c20:	68b8      	ldr	r0, [r7, #8]
 8018c22:	f7ff fa0f 	bl	8018044 <http_send>
 8018c26:	e00c      	b.n	8018c42 <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 8018c28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018c2c:	f113 0f10 	cmn.w	r3, #16
 8018c30:	d107      	bne.n	8018c42 <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8018c32:	6979      	ldr	r1, [r7, #20]
 8018c34:	68b8      	ldr	r0, [r7, #8]
 8018c36:	f7fe fd1f 	bl	8017678 <http_close_conn>
 8018c3a:	e002      	b.n	8018c42 <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8018c3c:	6878      	ldr	r0, [r7, #4]
 8018c3e:	f003 fbe3 	bl	801c408 <pbuf_free>
    }
  }
  return ERR_OK;
 8018c42:	2300      	movs	r3, #0
}
 8018c44:	4618      	mov	r0, r3
 8018c46:	3718      	adds	r7, #24
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	bd80      	pop	{r7, pc}
 8018c4c:	0802cbb0 	.word	0x0802cbb0
 8018c50:	0802cd64 	.word	0x0802cd64
 8018c54:	0802cbf8 	.word	0x0802cbf8

08018c58 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b086      	sub	sp, #24
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	60f8      	str	r0, [r7, #12]
 8018c60:	60b9      	str	r1, [r7, #8]
 8018c62:	4613      	mov	r3, r2
 8018c64:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8018c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d102      	bne.n	8018c74 <http_accept+0x1c>
 8018c6e:	68bb      	ldr	r3, [r7, #8]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d102      	bne.n	8018c7a <http_accept+0x22>
    return ERR_VAL;
 8018c74:	f06f 0305 	mvn.w	r3, #5
 8018c78:	e025      	b.n	8018cc6 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8018c7a:	2101      	movs	r1, #1
 8018c7c:	68b8      	ldr	r0, [r7, #8]
 8018c7e:	f005 f9a1 	bl	801dfc4 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8018c82:	f7fe fbed 	bl	8017460 <http_state_alloc>
 8018c86:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8018c88:	697b      	ldr	r3, [r7, #20]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d102      	bne.n	8018c94 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8018c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c92:	e018      	b.n	8018cc6 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8018c94:	697b      	ldr	r3, [r7, #20]
 8018c96:	68ba      	ldr	r2, [r7, #8]
 8018c98:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8018c9a:	6979      	ldr	r1, [r7, #20]
 8018c9c:	68b8      	ldr	r0, [r7, #8]
 8018c9e:	f005 fb91 	bl	801e3c4 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8018ca2:	490b      	ldr	r1, [pc, #44]	; (8018cd0 <http_accept+0x78>)
 8018ca4:	68b8      	ldr	r0, [r7, #8]
 8018ca6:	f005 fb9f 	bl	801e3e8 <tcp_recv>
  altcp_err(pcb, http_err);
 8018caa:	490a      	ldr	r1, [pc, #40]	; (8018cd4 <http_accept+0x7c>)
 8018cac:	68b8      	ldr	r0, [r7, #8]
 8018cae:	f005 fbdf 	bl	801e470 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8018cb2:	2204      	movs	r2, #4
 8018cb4:	4908      	ldr	r1, [pc, #32]	; (8018cd8 <http_accept+0x80>)
 8018cb6:	68b8      	ldr	r0, [r7, #8]
 8018cb8:	f005 fc14 	bl	801e4e4 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8018cbc:	4907      	ldr	r1, [pc, #28]	; (8018cdc <http_accept+0x84>)
 8018cbe:	68b8      	ldr	r0, [r7, #8]
 8018cc0:	f005 fbb4 	bl	801e42c <tcp_sent>

  return ERR_OK;
 8018cc4:	2300      	movs	r3, #0
}
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	3718      	adds	r7, #24
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	bd80      	pop	{r7, pc}
 8018cce:	bf00      	nop
 8018cd0:	08018b15 	.word	0x08018b15
 8018cd4:	08018a49 	.word	0x08018a49
 8018cd8:	08018aa3 	.word	0x08018aa3
 8018cdc:	08018a6d 	.word	0x08018a6d

08018ce0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8018ce0:	b580      	push	{r7, lr}
 8018ce2:	b084      	sub	sp, #16
 8018ce4:	af00      	add	r7, sp, #0
 8018ce6:	6078      	str	r0, [r7, #4]
 8018ce8:	460b      	mov	r3, r1
 8018cea:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d029      	beq.n	8018d46 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8018cf2:	2101      	movs	r1, #1
 8018cf4:	6878      	ldr	r0, [r7, #4]
 8018cf6:	f005 f965 	bl	801dfc4 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8018cfa:	887b      	ldrh	r3, [r7, #2]
 8018cfc:	461a      	mov	r2, r3
 8018cfe:	4914      	ldr	r1, [pc, #80]	; (8018d50 <httpd_init_pcb+0x70>)
 8018d00:	6878      	ldr	r0, [r7, #4]
 8018d02:	f004 f995 	bl	801d030 <tcp_bind>
 8018d06:	4603      	mov	r3, r0
 8018d08:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8018d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d006      	beq.n	8018d20 <httpd_init_pcb+0x40>
 8018d12:	4b10      	ldr	r3, [pc, #64]	; (8018d54 <httpd_init_pcb+0x74>)
 8018d14:	f640 2253 	movw	r2, #2643	; 0xa53
 8018d18:	490f      	ldr	r1, [pc, #60]	; (8018d58 <httpd_init_pcb+0x78>)
 8018d1a:	4810      	ldr	r0, [pc, #64]	; (8018d5c <httpd_init_pcb+0x7c>)
 8018d1c:	f00d ff9c 	bl	8026c58 <iprintf>
    pcb = altcp_listen(pcb);
 8018d20:	21ff      	movs	r1, #255	; 0xff
 8018d22:	6878      	ldr	r0, [r7, #4]
 8018d24:	f004 fa3c 	bl	801d1a0 <tcp_listen_with_backlog>
 8018d28:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d106      	bne.n	8018d3e <httpd_init_pcb+0x5e>
 8018d30:	4b08      	ldr	r3, [pc, #32]	; (8018d54 <httpd_init_pcb+0x74>)
 8018d32:	f640 2255 	movw	r2, #2645	; 0xa55
 8018d36:	490a      	ldr	r1, [pc, #40]	; (8018d60 <httpd_init_pcb+0x80>)
 8018d38:	4808      	ldr	r0, [pc, #32]	; (8018d5c <httpd_init_pcb+0x7c>)
 8018d3a:	f00d ff8d 	bl	8026c58 <iprintf>
    altcp_accept(pcb, http_accept);
 8018d3e:	4909      	ldr	r1, [pc, #36]	; (8018d64 <httpd_init_pcb+0x84>)
 8018d40:	6878      	ldr	r0, [r7, #4]
 8018d42:	f005 fbb7 	bl	801e4b4 <tcp_accept>
  }
}
 8018d46:	bf00      	nop
 8018d48:	3710      	adds	r7, #16
 8018d4a:	46bd      	mov	sp, r7
 8018d4c:	bd80      	pop	{r7, pc}
 8018d4e:	bf00      	nop
 8018d50:	080608e4 	.word	0x080608e4
 8018d54:	0802cbb0 	.word	0x0802cbb0
 8018d58:	0802cd90 	.word	0x0802cd90
 8018d5c:	0802cbf8 	.word	0x0802cbf8
 8018d60:	0802cdac 	.word	0x0802cdac
 8018d64:	08018c59 	.word	0x08018c59

08018d68 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8018d68:	b580      	push	{r7, lr}
 8018d6a:	b082      	sub	sp, #8
 8018d6c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8018d6e:	202e      	movs	r0, #46	; 0x2e
 8018d70:	f005 fb1a 	bl	801e3a8 <tcp_new_ip_type>
 8018d74:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d106      	bne.n	8018d8a <httpd_init+0x22>
 8018d7c:	4b07      	ldr	r3, [pc, #28]	; (8018d9c <httpd_init+0x34>)
 8018d7e:	f640 226e 	movw	r2, #2670	; 0xa6e
 8018d82:	4907      	ldr	r1, [pc, #28]	; (8018da0 <httpd_init+0x38>)
 8018d84:	4807      	ldr	r0, [pc, #28]	; (8018da4 <httpd_init+0x3c>)
 8018d86:	f00d ff67 	bl	8026c58 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8018d8a:	2150      	movs	r1, #80	; 0x50
 8018d8c:	6878      	ldr	r0, [r7, #4]
 8018d8e:	f7ff ffa7 	bl	8018ce0 <httpd_init_pcb>
}
 8018d92:	bf00      	nop
 8018d94:	3708      	adds	r7, #8
 8018d96:	46bd      	mov	sp, r7
 8018d98:	bd80      	pop	{r7, pc}
 8018d9a:	bf00      	nop
 8018d9c:	0802cbb0 	.word	0x0802cbb0
 8018da0:	0802cdcc 	.word	0x0802cdcc
 8018da4:	0802cbf8 	.word	0x0802cbf8

08018da8 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b084      	sub	sp, #16
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	60f8      	str	r0, [r7, #12]
 8018db0:	60b9      	str	r1, [r7, #8]
 8018db2:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8018db4:	68fb      	ldr	r3, [r7, #12]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d106      	bne.n	8018dc8 <http_set_ssi_handler+0x20>
 8018dba:	4b14      	ldr	r3, [pc, #80]	; (8018e0c <http_set_ssi_handler+0x64>)
 8018dbc:	f640 2293 	movw	r2, #2707	; 0xa93
 8018dc0:	4913      	ldr	r1, [pc, #76]	; (8018e10 <http_set_ssi_handler+0x68>)
 8018dc2:	4814      	ldr	r0, [pc, #80]	; (8018e14 <http_set_ssi_handler+0x6c>)
 8018dc4:	f00d ff48 	bl	8026c58 <iprintf>
  httpd_ssi_handler = ssi_handler;
 8018dc8:	4a13      	ldr	r2, [pc, #76]	; (8018e18 <http_set_ssi_handler+0x70>)
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8018dce:	68bb      	ldr	r3, [r7, #8]
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d106      	bne.n	8018de2 <http_set_ssi_handler+0x3a>
 8018dd4:	4b0d      	ldr	r3, [pc, #52]	; (8018e0c <http_set_ssi_handler+0x64>)
 8018dd6:	f640 229a 	movw	r2, #2714	; 0xa9a
 8018dda:	4910      	ldr	r1, [pc, #64]	; (8018e1c <http_set_ssi_handler+0x74>)
 8018ddc:	480d      	ldr	r0, [pc, #52]	; (8018e14 <http_set_ssi_handler+0x6c>)
 8018dde:	f00d ff3b 	bl	8026c58 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	dc06      	bgt.n	8018df6 <http_set_ssi_handler+0x4e>
 8018de8:	4b08      	ldr	r3, [pc, #32]	; (8018e0c <http_set_ssi_handler+0x64>)
 8018dea:	f640 229b 	movw	r2, #2715	; 0xa9b
 8018dee:	490c      	ldr	r1, [pc, #48]	; (8018e20 <http_set_ssi_handler+0x78>)
 8018df0:	4808      	ldr	r0, [pc, #32]	; (8018e14 <http_set_ssi_handler+0x6c>)
 8018df2:	f00d ff31 	bl	8026c58 <iprintf>

  httpd_tags = tags;
 8018df6:	4a0b      	ldr	r2, [pc, #44]	; (8018e24 <http_set_ssi_handler+0x7c>)
 8018df8:	68bb      	ldr	r3, [r7, #8]
 8018dfa:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 8018dfc:	4a0a      	ldr	r2, [pc, #40]	; (8018e28 <http_set_ssi_handler+0x80>)
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8018e02:	bf00      	nop
 8018e04:	3710      	adds	r7, #16
 8018e06:	46bd      	mov	sp, r7
 8018e08:	bd80      	pop	{r7, pc}
 8018e0a:	bf00      	nop
 8018e0c:	0802cbb0 	.word	0x0802cbb0
 8018e10:	0802cde8 	.word	0x0802cde8
 8018e14:	0802cbf8 	.word	0x0802cbf8
 8018e18:	20005960 	.word	0x20005960
 8018e1c:	0802ce00 	.word	0x0802ce00
 8018e20:	0802ce10 	.word	0x0802ce10
 8018e24:	20005968 	.word	0x20005968
 8018e28:	20005964 	.word	0x20005964

08018e2c <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8018e2c:	b580      	push	{r7, lr}
 8018e2e:	b082      	sub	sp, #8
 8018e30:	af00      	add	r7, sp, #0
 8018e32:	6078      	str	r0, [r7, #4]
 8018e34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d106      	bne.n	8018e4a <http_set_cgi_handlers+0x1e>
 8018e3c:	4b0d      	ldr	r3, [pc, #52]	; (8018e74 <http_set_cgi_handlers+0x48>)
 8018e3e:	f640 22ae 	movw	r2, #2734	; 0xaae
 8018e42:	490d      	ldr	r1, [pc, #52]	; (8018e78 <http_set_cgi_handlers+0x4c>)
 8018e44:	480d      	ldr	r0, [pc, #52]	; (8018e7c <http_set_cgi_handlers+0x50>)
 8018e46:	f00d ff07 	bl	8026c58 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8018e4a:	683b      	ldr	r3, [r7, #0]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	dc06      	bgt.n	8018e5e <http_set_cgi_handlers+0x32>
 8018e50:	4b08      	ldr	r3, [pc, #32]	; (8018e74 <http_set_cgi_handlers+0x48>)
 8018e52:	f640 22af 	movw	r2, #2735	; 0xaaf
 8018e56:	490a      	ldr	r1, [pc, #40]	; (8018e80 <http_set_cgi_handlers+0x54>)
 8018e58:	4808      	ldr	r0, [pc, #32]	; (8018e7c <http_set_cgi_handlers+0x50>)
 8018e5a:	f00d fefd 	bl	8026c58 <iprintf>

  httpd_cgis = cgis;
 8018e5e:	4a09      	ldr	r2, [pc, #36]	; (8018e84 <http_set_cgi_handlers+0x58>)
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8018e64:	4a08      	ldr	r2, [pc, #32]	; (8018e88 <http_set_cgi_handlers+0x5c>)
 8018e66:	683b      	ldr	r3, [r7, #0]
 8018e68:	6013      	str	r3, [r2, #0]
}
 8018e6a:	bf00      	nop
 8018e6c:	3708      	adds	r7, #8
 8018e6e:	46bd      	mov	sp, r7
 8018e70:	bd80      	pop	{r7, pc}
 8018e72:	bf00      	nop
 8018e74:	0802cbb0 	.word	0x0802cbb0
 8018e78:	0802ce28 	.word	0x0802ce28
 8018e7c:	0802cbf8 	.word	0x0802cbf8
 8018e80:	0802ce38 	.word	0x0802ce38
 8018e84:	2000596c 	.word	0x2000596c
 8018e88:	20005970 	.word	0x20005970

08018e8c <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 8018e8c:	b480      	push	{r7}
 8018e8e:	b083      	sub	sp, #12
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	88db      	ldrh	r3, [r3, #6]
 8018e98:	3301      	adds	r3, #1
 8018e9a:	b29a      	uxth	r2, r3
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	88db      	ldrh	r3, [r3, #6]
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d105      	bne.n	8018eb4 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	88db      	ldrh	r3, [r3, #6]
 8018eac:	3301      	adds	r3, #1
 8018eae:	b29a      	uxth	r2, r3
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	88db      	ldrh	r3, [r3, #6]
}
 8018eb8:	4618      	mov	r0, r3
 8018eba:	370c      	adds	r7, #12
 8018ebc:	46bd      	mov	sp, r7
 8018ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ec2:	4770      	bx	lr

08018ec4 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 8018ec4:	b480      	push	{r7}
 8018ec6:	b083      	sub	sp, #12
 8018ec8:	af00      	add	r7, sp, #0
 8018eca:	6078      	str	r0, [r7, #4]
 8018ecc:	460b      	mov	r3, r1
 8018ece:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	881b      	ldrh	r3, [r3, #0]
 8018ed4:	461a      	mov	r2, r3
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	4413      	add	r3, r2
 8018eda:	78fa      	ldrb	r2, [r7, #3]
 8018edc:	711a      	strb	r2, [r3, #4]
  rb->put++;
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	881b      	ldrh	r3, [r3, #0]
 8018ee2:	3301      	adds	r3, #1
 8018ee4:	b29a      	uxth	r2, r3
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	881b      	ldrh	r3, [r3, #0]
 8018eee:	2bff      	cmp	r3, #255	; 0xff
 8018ef0:	d902      	bls.n	8018ef8 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	2200      	movs	r2, #0
 8018ef6:	801a      	strh	r2, [r3, #0]
  }
}
 8018ef8:	bf00      	nop
 8018efa:	370c      	adds	r7, #12
 8018efc:	46bd      	mov	sp, r7
 8018efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f02:	4770      	bx	lr

08018f04 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8018f04:	b480      	push	{r7}
 8018f06:	b083      	sub	sp, #12
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	885b      	ldrh	r3, [r3, #2]
 8018f10:	461a      	mov	r2, r3
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	4413      	add	r3, r2
 8018f16:	3304      	adds	r3, #4
}
 8018f18:	4618      	mov	r0, r3
 8018f1a:	370c      	adds	r7, #12
 8018f1c:	46bd      	mov	sp, r7
 8018f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f22:	4770      	bx	lr

08018f24 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b082      	sub	sp, #8
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	6078      	str	r0, [r7, #4]
 8018f2c:	460b      	mov	r3, r1
 8018f2e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8018f30:	887b      	ldrh	r3, [r7, #2]
 8018f32:	2bff      	cmp	r3, #255	; 0xff
 8018f34:	d905      	bls.n	8018f42 <mqtt_ringbuf_advance_get_idx+0x1e>
 8018f36:	4b0e      	ldr	r3, [pc, #56]	; (8018f70 <mqtt_ringbuf_advance_get_idx+0x4c>)
 8018f38:	22cb      	movs	r2, #203	; 0xcb
 8018f3a:	490e      	ldr	r1, [pc, #56]	; (8018f74 <mqtt_ringbuf_advance_get_idx+0x50>)
 8018f3c:	480e      	ldr	r0, [pc, #56]	; (8018f78 <mqtt_ringbuf_advance_get_idx+0x54>)
 8018f3e:	f00d fe8b 	bl	8026c58 <iprintf>

  rb->get += len;
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	885a      	ldrh	r2, [r3, #2]
 8018f46:	887b      	ldrh	r3, [r7, #2]
 8018f48:	4413      	add	r3, r2
 8018f4a:	b29a      	uxth	r2, r3
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	885b      	ldrh	r3, [r3, #2]
 8018f54:	2bff      	cmp	r3, #255	; 0xff
 8018f56:	d906      	bls.n	8018f66 <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	885b      	ldrh	r3, [r3, #2]
 8018f5c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8018f60:	b29a      	uxth	r2, r3
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	805a      	strh	r2, [r3, #2]
  }
}
 8018f66:	bf00      	nop
 8018f68:	3708      	adds	r7, #8
 8018f6a:	46bd      	mov	sp, r7
 8018f6c:	bd80      	pop	{r7, pc}
 8018f6e:	bf00      	nop
 8018f70:	0802ce54 	.word	0x0802ce54
 8018f74:	0802ce8c 	.word	0x0802ce8c
 8018f78:	0802cecc 	.word	0x0802cecc

08018f7c <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8018f7c:	b480      	push	{r7}
 8018f7e:	b085      	sub	sp, #20
 8018f80:	af00      	add	r7, sp, #0
 8018f82:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	881b      	ldrh	r3, [r3, #0]
 8018f88:	461a      	mov	r2, r3
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	885b      	ldrh	r3, [r3, #2]
 8018f8e:	1ad3      	subs	r3, r2, r3
 8018f90:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018f98:	d303      	bcc.n	8018fa2 <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018fa0:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	b29b      	uxth	r3, r3
}
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	3714      	adds	r7, #20
 8018faa:	46bd      	mov	sp, r7
 8018fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fb0:	4770      	bx	lr
	...

08018fb4 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 8018fb4:	b590      	push	{r4, r7, lr}
 8018fb6:	b085      	sub	sp, #20
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	6078      	str	r0, [r7, #4]
 8018fbc:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 8018fbe:	2300      	movs	r3, #0
 8018fc0:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 8018fc2:	6878      	ldr	r0, [r7, #4]
 8018fc4:	f7ff ffda 	bl	8018f7c <mqtt_ringbuf_len>
 8018fc8:	4603      	mov	r3, r0
 8018fca:	461a      	mov	r2, r3
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	885b      	ldrh	r3, [r3, #2]
 8018fd0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8018fd4:	429a      	cmp	r2, r3
 8018fd6:	da04      	bge.n	8018fe2 <mqtt_output_send+0x2e>
 8018fd8:	6878      	ldr	r0, [r7, #4]
 8018fda:	f7ff ffcf 	bl	8018f7c <mqtt_ringbuf_len>
 8018fde:	4603      	mov	r3, r0
 8018fe0:	e004      	b.n	8018fec <mqtt_output_send+0x38>
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	885b      	ldrh	r3, [r3, #2]
 8018fe6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8018fea:	b29b      	uxth	r3, r3
 8018fec:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 8018fee:	683b      	ldr	r3, [r7, #0]
 8018ff0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8018ff4:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 8018ff6:	683b      	ldr	r3, [r7, #0]
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	d105      	bne.n	8019008 <mqtt_output_send+0x54>
 8018ffc:	4b44      	ldr	r3, [pc, #272]	; (8019110 <mqtt_output_send+0x15c>)
 8018ffe:	22f0      	movs	r2, #240	; 0xf0
 8019000:	4944      	ldr	r1, [pc, #272]	; (8019114 <mqtt_output_send+0x160>)
 8019002:	4845      	ldr	r0, [pc, #276]	; (8019118 <mqtt_output_send+0x164>)
 8019004:	f00d fe28 	bl	8026c58 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 8019008:	89bb      	ldrh	r3, [r7, #12]
 801900a:	2b00      	cmp	r3, #0
 801900c:	d07c      	beq.n	8019108 <mqtt_output_send+0x154>
 801900e:	897b      	ldrh	r3, [r7, #10]
 8019010:	2b00      	cmp	r3, #0
 8019012:	d079      	beq.n	8019108 <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8019014:	89ba      	ldrh	r2, [r7, #12]
 8019016:	897b      	ldrh	r3, [r7, #10]
 8019018:	429a      	cmp	r2, r3
 801901a:	d90d      	bls.n	8019038 <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 801901c:	897b      	ldrh	r3, [r7, #10]
 801901e:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8019020:	6878      	ldr	r0, [r7, #4]
 8019022:	f7ff ffab 	bl	8018f7c <mqtt_ringbuf_len>
 8019026:	4603      	mov	r3, r0
 8019028:	461a      	mov	r2, r3
 801902a:	897b      	ldrh	r3, [r7, #10]
 801902c:	4293      	cmp	r3, r2
 801902e:	bf34      	ite	cc
 8019030:	2301      	movcc	r3, #1
 8019032:	2300      	movcs	r3, #0
 8019034:	b2db      	uxtb	r3, r3
 8019036:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8019038:	6878      	ldr	r0, [r7, #4]
 801903a:	f7ff ff63 	bl	8018f04 <mqtt_ringbuf_get_ptr>
 801903e:	4601      	mov	r1, r0
 8019040:	7bbb      	ldrb	r3, [r7, #14]
 8019042:	2b00      	cmp	r3, #0
 8019044:	d001      	beq.n	801904a <mqtt_output_send+0x96>
 8019046:	2303      	movs	r3, #3
 8019048:	e000      	b.n	801904c <mqtt_output_send+0x98>
 801904a:	2301      	movs	r3, #1
 801904c:	89ba      	ldrh	r2, [r7, #12]
 801904e:	6838      	ldr	r0, [r7, #0]
 8019050:	f008 f8f6 	bl	8021240 <tcp_write>
 8019054:	4603      	mov	r3, r0
 8019056:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 8019058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d146      	bne.n	80190ee <mqtt_output_send+0x13a>
 8019060:	7bbb      	ldrb	r3, [r7, #14]
 8019062:	2b00      	cmp	r3, #0
 8019064:	d043      	beq.n	80190ee <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8019066:	89bb      	ldrh	r3, [r7, #12]
 8019068:	4619      	mov	r1, r3
 801906a:	6878      	ldr	r0, [r7, #4]
 801906c:	f7ff ff5a 	bl	8018f24 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8019070:	683b      	ldr	r3, [r7, #0]
 8019072:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019076:	461c      	mov	r4, r3
 8019078:	6878      	ldr	r0, [r7, #4]
 801907a:	f7ff ff7f 	bl	8018f7c <mqtt_ringbuf_len>
 801907e:	4603      	mov	r3, r0
 8019080:	461a      	mov	r2, r3
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	885b      	ldrh	r3, [r3, #2]
 8019086:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801908a:	429a      	cmp	r2, r3
 801908c:	da04      	bge.n	8019098 <mqtt_output_send+0xe4>
 801908e:	6878      	ldr	r0, [r7, #4]
 8019090:	f7ff ff74 	bl	8018f7c <mqtt_ringbuf_len>
 8019094:	4603      	mov	r3, r0
 8019096:	e003      	b.n	80190a0 <mqtt_output_send+0xec>
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	885b      	ldrh	r3, [r3, #2]
 801909c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80190a0:	42a3      	cmp	r3, r4
 80190a2:	dd03      	ble.n	80190ac <mqtt_output_send+0xf8>
 80190a4:	683b      	ldr	r3, [r7, #0]
 80190a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80190aa:	e014      	b.n	80190d6 <mqtt_output_send+0x122>
 80190ac:	6878      	ldr	r0, [r7, #4]
 80190ae:	f7ff ff65 	bl	8018f7c <mqtt_ringbuf_len>
 80190b2:	4603      	mov	r3, r0
 80190b4:	461a      	mov	r2, r3
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	885b      	ldrh	r3, [r3, #2]
 80190ba:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80190be:	429a      	cmp	r2, r3
 80190c0:	da04      	bge.n	80190cc <mqtt_output_send+0x118>
 80190c2:	6878      	ldr	r0, [r7, #4]
 80190c4:	f7ff ff5a 	bl	8018f7c <mqtt_ringbuf_len>
 80190c8:	4603      	mov	r3, r0
 80190ca:	e004      	b.n	80190d6 <mqtt_output_send+0x122>
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	885b      	ldrh	r3, [r3, #2]
 80190d0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80190d4:	b29b      	uxth	r3, r3
 80190d6:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 80190d8:	6878      	ldr	r0, [r7, #4]
 80190da:	f7ff ff13 	bl	8018f04 <mqtt_ringbuf_get_ptr>
 80190de:	4601      	mov	r1, r0
 80190e0:	89ba      	ldrh	r2, [r7, #12]
 80190e2:	2301      	movs	r3, #1
 80190e4:	6838      	ldr	r0, [r7, #0]
 80190e6:	f008 f8ab 	bl	8021240 <tcp_write>
 80190ea:	4603      	mov	r3, r0
 80190ec:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 80190ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d109      	bne.n	801910a <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 80190f6:	89bb      	ldrh	r3, [r7, #12]
 80190f8:	4619      	mov	r1, r3
 80190fa:	6878      	ldr	r0, [r7, #4]
 80190fc:	f7ff ff12 	bl	8018f24 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 8019100:	6838      	ldr	r0, [r7, #0]
 8019102:	f008 fe87 	bl	8021e14 <tcp_output>
 8019106:	e000      	b.n	801910a <mqtt_output_send+0x156>
    return;
 8019108:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 801910a:	3714      	adds	r7, #20
 801910c:	46bd      	mov	sp, r7
 801910e:	bd90      	pop	{r4, r7, pc}
 8019110:	0802ce54 	.word	0x0802ce54
 8019114:	0802cef4 	.word	0x0802cef4
 8019118:	0802cecc 	.word	0x0802cecc

0801911c <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 801911c:	b580      	push	{r7, lr}
 801911e:	b086      	sub	sp, #24
 8019120:	af00      	add	r7, sp, #0
 8019122:	60f8      	str	r0, [r7, #12]
 8019124:	60b9      	str	r1, [r7, #8]
 8019126:	603b      	str	r3, [r7, #0]
 8019128:	4613      	mov	r3, r2
 801912a:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 801912c:	2300      	movs	r3, #0
 801912e:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	2b00      	cmp	r3, #0
 8019134:	d106      	bne.n	8019144 <mqtt_create_request+0x28>
 8019136:	4b19      	ldr	r3, [pc, #100]	; (801919c <mqtt_create_request+0x80>)
 8019138:	f240 1223 	movw	r2, #291	; 0x123
 801913c:	4918      	ldr	r1, [pc, #96]	; (80191a0 <mqtt_create_request+0x84>)
 801913e:	4819      	ldr	r0, [pc, #100]	; (80191a4 <mqtt_create_request+0x88>)
 8019140:	f00d fd8a 	bl	8026c58 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8019144:	2300      	movs	r3, #0
 8019146:	74fb      	strb	r3, [r7, #19]
 8019148:	e01f      	b.n	801918a <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 801914a:	7cfb      	ldrb	r3, [r7, #19]
 801914c:	011b      	lsls	r3, r3, #4
 801914e:	68fa      	ldr	r2, [r7, #12]
 8019150:	4413      	add	r3, r2
 8019152:	681a      	ldr	r2, [r3, #0]
 8019154:	7cfb      	ldrb	r3, [r7, #19]
 8019156:	011b      	lsls	r3, r3, #4
 8019158:	68f9      	ldr	r1, [r7, #12]
 801915a:	440b      	add	r3, r1
 801915c:	429a      	cmp	r2, r3
 801915e:	d111      	bne.n	8019184 <mqtt_create_request+0x68>
      r = &r_objs[n];
 8019160:	7cfb      	ldrb	r3, [r7, #19]
 8019162:	011b      	lsls	r3, r3, #4
 8019164:	68fa      	ldr	r2, [r7, #12]
 8019166:	4413      	add	r3, r2
 8019168:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 801916a:	697b      	ldr	r3, [r7, #20]
 801916c:	2200      	movs	r2, #0
 801916e:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 8019170:	697b      	ldr	r3, [r7, #20]
 8019172:	683a      	ldr	r2, [r7, #0]
 8019174:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 8019176:	697b      	ldr	r3, [r7, #20]
 8019178:	6a3a      	ldr	r2, [r7, #32]
 801917a:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 801917c:	697b      	ldr	r3, [r7, #20]
 801917e:	88fa      	ldrh	r2, [r7, #6]
 8019180:	819a      	strh	r2, [r3, #12]
      break;
 8019182:	e006      	b.n	8019192 <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 8019184:	7cfb      	ldrb	r3, [r7, #19]
 8019186:	3301      	adds	r3, #1
 8019188:	74fb      	strb	r3, [r7, #19]
 801918a:	7cfb      	ldrb	r3, [r7, #19]
 801918c:	68ba      	ldr	r2, [r7, #8]
 801918e:	429a      	cmp	r2, r3
 8019190:	d8db      	bhi.n	801914a <mqtt_create_request+0x2e>
    }
  }
  return r;
 8019192:	697b      	ldr	r3, [r7, #20]
}
 8019194:	4618      	mov	r0, r3
 8019196:	3718      	adds	r7, #24
 8019198:	46bd      	mov	sp, r7
 801919a:	bd80      	pop	{r7, pc}
 801919c:	0802ce54 	.word	0x0802ce54
 80191a0:	0802cf14 	.word	0x0802cf14
 80191a4:	0802cecc 	.word	0x0802cecc

080191a8 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 80191a8:	b580      	push	{r7, lr}
 80191aa:	b086      	sub	sp, #24
 80191ac:	af00      	add	r7, sp, #0
 80191ae:	6078      	str	r0, [r7, #4]
 80191b0:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 80191b2:	2300      	movs	r3, #0
 80191b4:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 80191b6:	2300      	movs	r3, #0
 80191b8:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d106      	bne.n	80191ce <mqtt_append_request+0x26>
 80191c0:	4b1b      	ldr	r3, [pc, #108]	; (8019230 <mqtt_append_request+0x88>)
 80191c2:	f240 123f 	movw	r2, #319	; 0x13f
 80191c6:	491b      	ldr	r1, [pc, #108]	; (8019234 <mqtt_append_request+0x8c>)
 80191c8:	481b      	ldr	r0, [pc, #108]	; (8019238 <mqtt_append_request+0x90>)
 80191ca:	f00d fd45 	bl	8026c58 <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	60fb      	str	r3, [r7, #12]
 80191d4:	e00a      	b.n	80191ec <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	89da      	ldrh	r2, [r3, #14]
 80191da:	8a7b      	ldrh	r3, [r7, #18]
 80191dc:	4413      	add	r3, r2
 80191de:	b29b      	uxth	r3, r3
 80191e0:	827b      	strh	r3, [r7, #18]
    head = iter;
 80191e2:	68fb      	ldr	r3, [r7, #12]
 80191e4:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	60fb      	str	r3, [r7, #12]
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	d1f1      	bne.n	80191d6 <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 80191f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80191f6:	2b1e      	cmp	r3, #30
 80191f8:	dd06      	ble.n	8019208 <mqtt_append_request+0x60>
 80191fa:	4b0d      	ldr	r3, [pc, #52]	; (8019230 <mqtt_append_request+0x88>)
 80191fc:	f240 1247 	movw	r2, #327	; 0x147
 8019200:	490e      	ldr	r1, [pc, #56]	; (801923c <mqtt_append_request+0x94>)
 8019202:	480d      	ldr	r0, [pc, #52]	; (8019238 <mqtt_append_request+0x90>)
 8019204:	f00d fd28 	bl	8026c58 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8019208:	8a7b      	ldrh	r3, [r7, #18]
 801920a:	f1c3 031e 	rsb	r3, r3, #30
 801920e:	b29a      	uxth	r2, r3
 8019210:	683b      	ldr	r3, [r7, #0]
 8019212:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8019214:	697b      	ldr	r3, [r7, #20]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d103      	bne.n	8019222 <mqtt_append_request+0x7a>
    *tail = r;
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	683a      	ldr	r2, [r7, #0]
 801921e:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8019220:	e002      	b.n	8019228 <mqtt_append_request+0x80>
    head->next = r;
 8019222:	697b      	ldr	r3, [r7, #20]
 8019224:	683a      	ldr	r2, [r7, #0]
 8019226:	601a      	str	r2, [r3, #0]
}
 8019228:	bf00      	nop
 801922a:	3718      	adds	r7, #24
 801922c:	46bd      	mov	sp, r7
 801922e:	bd80      	pop	{r7, pc}
 8019230:	0802ce54 	.word	0x0802ce54
 8019234:	0802cf38 	.word	0x0802cf38
 8019238:	0802cecc 	.word	0x0802cecc
 801923c:	0802cf5c 	.word	0x0802cf5c

08019240 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8019240:	b480      	push	{r7}
 8019242:	b083      	sub	sp, #12
 8019244:	af00      	add	r7, sp, #0
 8019246:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	2b00      	cmp	r3, #0
 801924c:	d002      	beq.n	8019254 <mqtt_delete_request+0x14>
    r->next = r;
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	687a      	ldr	r2, [r7, #4]
 8019252:	601a      	str	r2, [r3, #0]
  }
}
 8019254:	bf00      	nop
 8019256:	370c      	adds	r7, #12
 8019258:	46bd      	mov	sp, r7
 801925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801925e:	4770      	bx	lr

08019260 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8019260:	b580      	push	{r7, lr}
 8019262:	b084      	sub	sp, #16
 8019264:	af00      	add	r7, sp, #0
 8019266:	6078      	str	r0, [r7, #4]
 8019268:	460b      	mov	r3, r1
 801926a:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 801926c:	2300      	movs	r3, #0
 801926e:	60fb      	str	r3, [r7, #12]
 8019270:	2300      	movs	r3, #0
 8019272:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	2b00      	cmp	r3, #0
 8019278:	d106      	bne.n	8019288 <mqtt_take_request+0x28>
 801927a:	4b1f      	ldr	r3, [pc, #124]	; (80192f8 <mqtt_take_request+0x98>)
 801927c:	f240 1267 	movw	r2, #359	; 0x167
 8019280:	491e      	ldr	r1, [pc, #120]	; (80192fc <mqtt_take_request+0x9c>)
 8019282:	481f      	ldr	r0, [pc, #124]	; (8019300 <mqtt_take_request+0xa0>)
 8019284:	f00d fce8 	bl	8026c58 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	60fb      	str	r3, [r7, #12]
 801928e:	e009      	b.n	80192a4 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	899b      	ldrh	r3, [r3, #12]
 8019294:	887a      	ldrh	r2, [r7, #2]
 8019296:	429a      	cmp	r2, r3
 8019298:	d008      	beq.n	80192ac <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 801929e:	68fb      	ldr	r3, [r7, #12]
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	60fb      	str	r3, [r7, #12]
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d1f2      	bne.n	8019290 <mqtt_take_request+0x30>
 80192aa:	e000      	b.n	80192ae <mqtt_take_request+0x4e>
      break;
 80192ac:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d01c      	beq.n	80192ee <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 80192b4:	68bb      	ldr	r3, [r7, #8]
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d104      	bne.n	80192c4 <mqtt_take_request+0x64>
      *tail = iter->next;
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	681a      	ldr	r2, [r3, #0]
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	601a      	str	r2, [r3, #0]
 80192c2:	e003      	b.n	80192cc <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 80192c4:	68fb      	ldr	r3, [r7, #12]
 80192c6:	681a      	ldr	r2, [r3, #0]
 80192c8:	68bb      	ldr	r3, [r7, #8]
 80192ca:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d009      	beq.n	80192e8 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 80192d4:	68fb      	ldr	r3, [r7, #12]
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	89d9      	ldrh	r1, [r3, #14]
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	89da      	ldrh	r2, [r3, #14]
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	440a      	add	r2, r1
 80192e4:	b292      	uxth	r2, r2
 80192e6:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 80192e8:	68fb      	ldr	r3, [r7, #12]
 80192ea:	2200      	movs	r2, #0
 80192ec:	601a      	str	r2, [r3, #0]
  }
  return iter;
 80192ee:	68fb      	ldr	r3, [r7, #12]
}
 80192f0:	4618      	mov	r0, r3
 80192f2:	3710      	adds	r7, #16
 80192f4:	46bd      	mov	sp, r7
 80192f6:	bd80      	pop	{r7, pc}
 80192f8:	0802ce54 	.word	0x0802ce54
 80192fc:	0802cf94 	.word	0x0802cf94
 8019300:	0802cecc 	.word	0x0802cecc

08019304 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8019304:	b580      	push	{r7, lr}
 8019306:	b084      	sub	sp, #16
 8019308:	af00      	add	r7, sp, #0
 801930a:	6078      	str	r0, [r7, #4]
 801930c:	460b      	mov	r3, r1
 801930e:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	2b00      	cmp	r3, #0
 8019314:	d106      	bne.n	8019324 <mqtt_request_time_elapsed+0x20>
 8019316:	4b21      	ldr	r3, [pc, #132]	; (801939c <mqtt_request_time_elapsed+0x98>)
 8019318:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 801931c:	4920      	ldr	r1, [pc, #128]	; (80193a0 <mqtt_request_time_elapsed+0x9c>)
 801931e:	4821      	ldr	r0, [pc, #132]	; (80193a4 <mqtt_request_time_elapsed+0xa0>)
 8019320:	f00d fc9a 	bl	8026c58 <iprintf>
  r = *tail;
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 801932a:	e02c      	b.n	8019386 <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 801932c:	78fb      	ldrb	r3, [r7, #3]
 801932e:	b29a      	uxth	r2, r3
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	89db      	ldrh	r3, [r3, #14]
 8019334:	429a      	cmp	r2, r3
 8019336:	d31c      	bcc.n	8019372 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	89db      	ldrh	r3, [r3, #14]
 801933c:	b2db      	uxtb	r3, r3
 801933e:	78fa      	ldrb	r2, [r7, #3]
 8019340:	1ad3      	subs	r3, r2, r3
 8019342:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 8019344:	68fb      	ldr	r3, [r7, #12]
 8019346:	681a      	ldr	r2, [r3, #0]
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	685b      	ldr	r3, [r3, #4]
 8019350:	2b00      	cmp	r3, #0
 8019352:	d007      	beq.n	8019364 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	685b      	ldr	r3, [r3, #4]
 8019358:	68fa      	ldr	r2, [r7, #12]
 801935a:	6892      	ldr	r2, [r2, #8]
 801935c:	f06f 0102 	mvn.w	r1, #2
 8019360:	4610      	mov	r0, r2
 8019362:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8019364:	68f8      	ldr	r0, [r7, #12]
 8019366:	f7ff ff6b 	bl	8019240 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	60fb      	str	r3, [r7, #12]
 8019370:	e009      	b.n	8019386 <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 8019372:	68fb      	ldr	r3, [r7, #12]
 8019374:	89da      	ldrh	r2, [r3, #14]
 8019376:	78fb      	ldrb	r3, [r7, #3]
 8019378:	b29b      	uxth	r3, r3
 801937a:	1ad3      	subs	r3, r2, r3
 801937c:	b29a      	uxth	r2, r3
 801937e:	68fb      	ldr	r3, [r7, #12]
 8019380:	81da      	strh	r2, [r3, #14]
      t = 0;
 8019382:	2300      	movs	r3, #0
 8019384:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 8019386:	78fb      	ldrb	r3, [r7, #3]
 8019388:	2b00      	cmp	r3, #0
 801938a:	d002      	beq.n	8019392 <mqtt_request_time_elapsed+0x8e>
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	2b00      	cmp	r3, #0
 8019390:	d1cc      	bne.n	801932c <mqtt_request_time_elapsed+0x28>
    }
  }
}
 8019392:	bf00      	nop
 8019394:	3710      	adds	r7, #16
 8019396:	46bd      	mov	sp, r7
 8019398:	bd80      	pop	{r7, pc}
 801939a:	bf00      	nop
 801939c:	0802ce54 	.word	0x0802ce54
 80193a0:	0802cfb4 	.word	0x0802cfb4
 80193a4:	0802cecc 	.word	0x0802cecc

080193a8 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b084      	sub	sp, #16
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d106      	bne.n	80193c4 <mqtt_clear_requests+0x1c>
 80193b6:	4b0e      	ldr	r3, [pc, #56]	; (80193f0 <mqtt_clear_requests+0x48>)
 80193b8:	f240 12a7 	movw	r2, #423	; 0x1a7
 80193bc:	490d      	ldr	r1, [pc, #52]	; (80193f4 <mqtt_clear_requests+0x4c>)
 80193be:	480e      	ldr	r0, [pc, #56]	; (80193f8 <mqtt_clear_requests+0x50>)
 80193c0:	f00d fc4a 	bl	8026c58 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	60fb      	str	r3, [r7, #12]
 80193ca:	e007      	b.n	80193dc <mqtt_clear_requests+0x34>
    next = iter->next;
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 80193d2:	68f8      	ldr	r0, [r7, #12]
 80193d4:	f7ff ff34 	bl	8019240 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 80193d8:	68bb      	ldr	r3, [r7, #8]
 80193da:	60fb      	str	r3, [r7, #12]
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d1f4      	bne.n	80193cc <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	2200      	movs	r2, #0
 80193e6:	601a      	str	r2, [r3, #0]
}
 80193e8:	bf00      	nop
 80193ea:	3710      	adds	r7, #16
 80193ec:	46bd      	mov	sp, r7
 80193ee:	bd80      	pop	{r7, pc}
 80193f0:	0802ce54 	.word	0x0802ce54
 80193f4:	0802cfdc 	.word	0x0802cfdc
 80193f8:	0802cecc 	.word	0x0802cecc

080193fc <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 80193fc:	b580      	push	{r7, lr}
 80193fe:	b084      	sub	sp, #16
 8019400:	af00      	add	r7, sp, #0
 8019402:	6078      	str	r0, [r7, #4]
 8019404:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	2b00      	cmp	r3, #0
 801940a:	d106      	bne.n	801941a <mqtt_init_requests+0x1e>
 801940c:	4b0f      	ldr	r3, [pc, #60]	; (801944c <mqtt_init_requests+0x50>)
 801940e:	f240 12b7 	movw	r2, #439	; 0x1b7
 8019412:	490f      	ldr	r1, [pc, #60]	; (8019450 <mqtt_init_requests+0x54>)
 8019414:	480f      	ldr	r0, [pc, #60]	; (8019454 <mqtt_init_requests+0x58>)
 8019416:	f00d fc1f 	bl	8026c58 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 801941a:	2300      	movs	r3, #0
 801941c:	73fb      	strb	r3, [r7, #15]
 801941e:	e00b      	b.n	8019438 <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8019420:	7bfb      	ldrb	r3, [r7, #15]
 8019422:	011a      	lsls	r2, r3, #4
 8019424:	7bfb      	ldrb	r3, [r7, #15]
 8019426:	011b      	lsls	r3, r3, #4
 8019428:	6879      	ldr	r1, [r7, #4]
 801942a:	440b      	add	r3, r1
 801942c:	6879      	ldr	r1, [r7, #4]
 801942e:	440a      	add	r2, r1
 8019430:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8019432:	7bfb      	ldrb	r3, [r7, #15]
 8019434:	3301      	adds	r3, #1
 8019436:	73fb      	strb	r3, [r7, #15]
 8019438:	7bfb      	ldrb	r3, [r7, #15]
 801943a:	683a      	ldr	r2, [r7, #0]
 801943c:	429a      	cmp	r2, r3
 801943e:	d8ef      	bhi.n	8019420 <mqtt_init_requests+0x24>
  }
}
 8019440:	bf00      	nop
 8019442:	bf00      	nop
 8019444:	3710      	adds	r7, #16
 8019446:	46bd      	mov	sp, r7
 8019448:	bd80      	pop	{r7, pc}
 801944a:	bf00      	nop
 801944c:	0802ce54 	.word	0x0802ce54
 8019450:	0802d000 	.word	0x0802d000
 8019454:	0802cecc 	.word	0x0802cecc

08019458 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8019458:	b580      	push	{r7, lr}
 801945a:	b082      	sub	sp, #8
 801945c:	af00      	add	r7, sp, #0
 801945e:	6078      	str	r0, [r7, #4]
 8019460:	460b      	mov	r3, r1
 8019462:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8019464:	78fb      	ldrb	r3, [r7, #3]
 8019466:	4619      	mov	r1, r3
 8019468:	6878      	ldr	r0, [r7, #4]
 801946a:	f7ff fd2b 	bl	8018ec4 <mqtt_ringbuf_put>
}
 801946e:	bf00      	nop
 8019470:	3708      	adds	r7, #8
 8019472:	46bd      	mov	sp, r7
 8019474:	bd80      	pop	{r7, pc}

08019476 <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 8019476:	b580      	push	{r7, lr}
 8019478:	b082      	sub	sp, #8
 801947a:	af00      	add	r7, sp, #0
 801947c:	6078      	str	r0, [r7, #4]
 801947e:	460b      	mov	r3, r1
 8019480:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8019482:	887b      	ldrh	r3, [r7, #2]
 8019484:	0a1b      	lsrs	r3, r3, #8
 8019486:	b29b      	uxth	r3, r3
 8019488:	b2db      	uxtb	r3, r3
 801948a:	4619      	mov	r1, r3
 801948c:	6878      	ldr	r0, [r7, #4]
 801948e:	f7ff fd19 	bl	8018ec4 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8019492:	887b      	ldrh	r3, [r7, #2]
 8019494:	b2db      	uxtb	r3, r3
 8019496:	4619      	mov	r1, r3
 8019498:	6878      	ldr	r0, [r7, #4]
 801949a:	f7ff fd13 	bl	8018ec4 <mqtt_ringbuf_put>
}
 801949e:	bf00      	nop
 80194a0:	3708      	adds	r7, #8
 80194a2:	46bd      	mov	sp, r7
 80194a4:	bd80      	pop	{r7, pc}

080194a6 <mqtt_output_append_string>:
  }
}

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 80194a6:	b580      	push	{r7, lr}
 80194a8:	b086      	sub	sp, #24
 80194aa:	af00      	add	r7, sp, #0
 80194ac:	60f8      	str	r0, [r7, #12]
 80194ae:	60b9      	str	r1, [r7, #8]
 80194b0:	4613      	mov	r3, r2
 80194b2:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 80194b4:	88fb      	ldrh	r3, [r7, #6]
 80194b6:	0a1b      	lsrs	r3, r3, #8
 80194b8:	b29b      	uxth	r3, r3
 80194ba:	b2db      	uxtb	r3, r3
 80194bc:	4619      	mov	r1, r3
 80194be:	68f8      	ldr	r0, [r7, #12]
 80194c0:	f7ff fd00 	bl	8018ec4 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 80194c4:	88fb      	ldrh	r3, [r7, #6]
 80194c6:	b2db      	uxtb	r3, r3
 80194c8:	4619      	mov	r1, r3
 80194ca:	68f8      	ldr	r0, [r7, #12]
 80194cc:	f7ff fcfa 	bl	8018ec4 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 80194d0:	2300      	movs	r3, #0
 80194d2:	82fb      	strh	r3, [r7, #22]
 80194d4:	e00a      	b.n	80194ec <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 80194d6:	8afb      	ldrh	r3, [r7, #22]
 80194d8:	68ba      	ldr	r2, [r7, #8]
 80194da:	4413      	add	r3, r2
 80194dc:	781b      	ldrb	r3, [r3, #0]
 80194de:	4619      	mov	r1, r3
 80194e0:	68f8      	ldr	r0, [r7, #12]
 80194e2:	f7ff fcef 	bl	8018ec4 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 80194e6:	8afb      	ldrh	r3, [r7, #22]
 80194e8:	3301      	adds	r3, #1
 80194ea:	82fb      	strh	r3, [r7, #22]
 80194ec:	8afa      	ldrh	r2, [r7, #22]
 80194ee:	88fb      	ldrh	r3, [r7, #6]
 80194f0:	429a      	cmp	r2, r3
 80194f2:	d3f0      	bcc.n	80194d6 <mqtt_output_append_string+0x30>
  }
}
 80194f4:	bf00      	nop
 80194f6:	bf00      	nop
 80194f8:	3718      	adds	r7, #24
 80194fa:	46bd      	mov	sp, r7
 80194fc:	bd80      	pop	{r7, pc}

080194fe <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 80194fe:	b580      	push	{r7, lr}
 8019500:	b082      	sub	sp, #8
 8019502:	af00      	add	r7, sp, #0
 8019504:	6078      	str	r0, [r7, #4]
 8019506:	4608      	mov	r0, r1
 8019508:	4611      	mov	r1, r2
 801950a:	461a      	mov	r2, r3
 801950c:	4603      	mov	r3, r0
 801950e:	70fb      	strb	r3, [r7, #3]
 8019510:	460b      	mov	r3, r1
 8019512:	70bb      	strb	r3, [r7, #2]
 8019514:	4613      	mov	r3, r2
 8019516:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8019518:	78fb      	ldrb	r3, [r7, #3]
 801951a:	011b      	lsls	r3, r3, #4
 801951c:	b25a      	sxtb	r2, r3
 801951e:	78bb      	ldrb	r3, [r7, #2]
 8019520:	00db      	lsls	r3, r3, #3
 8019522:	b25b      	sxtb	r3, r3
 8019524:	f003 0308 	and.w	r3, r3, #8
 8019528:	b25b      	sxtb	r3, r3
 801952a:	4313      	orrs	r3, r2
 801952c:	b25a      	sxtb	r2, r3
 801952e:	787b      	ldrb	r3, [r7, #1]
 8019530:	005b      	lsls	r3, r3, #1
 8019532:	b25b      	sxtb	r3, r3
 8019534:	f003 0306 	and.w	r3, r3, #6
 8019538:	b25b      	sxtb	r3, r3
 801953a:	4313      	orrs	r3, r2
 801953c:	b25a      	sxtb	r2, r3
 801953e:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8019542:	f003 0301 	and.w	r3, r3, #1
 8019546:	b25b      	sxtb	r3, r3
 8019548:	4313      	orrs	r3, r2
 801954a:	b25b      	sxtb	r3, r3
 801954c:	b2db      	uxtb	r3, r3
 801954e:	4619      	mov	r1, r3
 8019550:	6878      	ldr	r0, [r7, #4]
 8019552:	f7ff ff81 	bl	8019458 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8019556:	8abb      	ldrh	r3, [r7, #20]
 8019558:	b25b      	sxtb	r3, r3
 801955a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801955e:	b25b      	sxtb	r3, r3
 8019560:	8aba      	ldrh	r2, [r7, #20]
 8019562:	2a7f      	cmp	r2, #127	; 0x7f
 8019564:	d902      	bls.n	801956c <mqtt_output_append_fixed_header+0x6e>
 8019566:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 801956a:	e000      	b.n	801956e <mqtt_output_append_fixed_header+0x70>
 801956c:	2200      	movs	r2, #0
 801956e:	4313      	orrs	r3, r2
 8019570:	b25b      	sxtb	r3, r3
 8019572:	b2db      	uxtb	r3, r3
 8019574:	4619      	mov	r1, r3
 8019576:	6878      	ldr	r0, [r7, #4]
 8019578:	f7ff ff6e 	bl	8019458 <mqtt_output_append_u8>
    r_length >>= 7;
 801957c:	8abb      	ldrh	r3, [r7, #20]
 801957e:	09db      	lsrs	r3, r3, #7
 8019580:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8019582:	8abb      	ldrh	r3, [r7, #20]
 8019584:	2b00      	cmp	r3, #0
 8019586:	d1e6      	bne.n	8019556 <mqtt_output_append_fixed_header+0x58>
}
 8019588:	bf00      	nop
 801958a:	bf00      	nop
 801958c:	3708      	adds	r7, #8
 801958e:	46bd      	mov	sp, r7
 8019590:	bd80      	pop	{r7, pc}
	...

08019594 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8019594:	b590      	push	{r4, r7, lr}
 8019596:	b085      	sub	sp, #20
 8019598:	af00      	add	r7, sp, #0
 801959a:	6078      	str	r0, [r7, #4]
 801959c:	460b      	mov	r3, r1
 801959e:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 80195a0:	887b      	ldrh	r3, [r7, #2]
 80195a2:	3301      	adds	r3, #1
 80195a4:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d106      	bne.n	80195ba <mqtt_output_check_space+0x26>
 80195ac:	4b0f      	ldr	r3, [pc, #60]	; (80195ec <mqtt_output_check_space+0x58>)
 80195ae:	f240 2207 	movw	r2, #519	; 0x207
 80195b2:	490f      	ldr	r1, [pc, #60]	; (80195f0 <mqtt_output_check_space+0x5c>)
 80195b4:	480f      	ldr	r0, [pc, #60]	; (80195f4 <mqtt_output_check_space+0x60>)
 80195b6:	f00d fb4f 	bl	8026c58 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 80195ba:	89fb      	ldrh	r3, [r7, #14]
 80195bc:	3301      	adds	r3, #1
 80195be:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 80195c0:	887b      	ldrh	r3, [r7, #2]
 80195c2:	09db      	lsrs	r3, r3, #7
 80195c4:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 80195c6:	887b      	ldrh	r3, [r7, #2]
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d1f6      	bne.n	80195ba <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 80195cc:	89fc      	ldrh	r4, [r7, #14]
 80195ce:	6878      	ldr	r0, [r7, #4]
 80195d0:	f7ff fcd4 	bl	8018f7c <mqtt_ringbuf_len>
 80195d4:	4603      	mov	r3, r0
 80195d6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80195da:	429c      	cmp	r4, r3
 80195dc:	bfd4      	ite	le
 80195de:	2301      	movle	r3, #1
 80195e0:	2300      	movgt	r3, #0
 80195e2:	b2db      	uxtb	r3, r3
}
 80195e4:	4618      	mov	r0, r3
 80195e6:	3714      	adds	r7, #20
 80195e8:	46bd      	mov	sp, r7
 80195ea:	bd90      	pop	{r4, r7, pc}
 80195ec:	0802ce54 	.word	0x0802ce54
 80195f0:	0802d024 	.word	0x0802d024
 80195f4:	0802cecc 	.word	0x0802cecc

080195f8 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 80195f8:	b580      	push	{r7, lr}
 80195fa:	b084      	sub	sp, #16
 80195fc:	af00      	add	r7, sp, #0
 80195fe:	6078      	str	r0, [r7, #4]
 8019600:	460b      	mov	r3, r1
 8019602:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	2b00      	cmp	r3, #0
 8019608:	d106      	bne.n	8019618 <mqtt_close+0x20>
 801960a:	4b27      	ldr	r3, [pc, #156]	; (80196a8 <mqtt_close+0xb0>)
 801960c:	f240 221b 	movw	r2, #539	; 0x21b
 8019610:	4926      	ldr	r1, [pc, #152]	; (80196ac <mqtt_close+0xb4>)
 8019612:	4827      	ldr	r0, [pc, #156]	; (80196b0 <mqtt_close+0xb8>)
 8019614:	f00d fb20 	bl	8026c58 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	68db      	ldr	r3, [r3, #12]
 801961c:	2b00      	cmp	r3, #0
 801961e:	d024      	beq.n	801966a <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	68db      	ldr	r3, [r3, #12]
 8019624:	2100      	movs	r1, #0
 8019626:	4618      	mov	r0, r3
 8019628:	f004 fede 	bl	801e3e8 <tcp_recv>
    altcp_err(client->conn,  NULL);
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	68db      	ldr	r3, [r3, #12]
 8019630:	2100      	movs	r1, #0
 8019632:	4618      	mov	r0, r3
 8019634:	f004 ff1c 	bl	801e470 <tcp_err>
    altcp_sent(client->conn, NULL);
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	68db      	ldr	r3, [r3, #12]
 801963c:	2100      	movs	r1, #0
 801963e:	4618      	mov	r0, r3
 8019640:	f004 fef4 	bl	801e42c <tcp_sent>
    res = altcp_close(client->conn);
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	68db      	ldr	r3, [r3, #12]
 8019648:	4618      	mov	r0, r3
 801964a:	f003 fbfb 	bl	801ce44 <tcp_close>
 801964e:	4603      	mov	r3, r0
 8019650:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 8019652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019656:	2b00      	cmp	r3, #0
 8019658:	d004      	beq.n	8019664 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	68db      	ldr	r3, [r3, #12]
 801965e:	4618      	mov	r0, r3
 8019660:	f003 fcda 	bl	801d018 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	2200      	movs	r2, #0
 8019668:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	3318      	adds	r3, #24
 801966e:	4618      	mov	r0, r3
 8019670:	f7ff fe9a 	bl	80193a8 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 8019674:	6879      	ldr	r1, [r7, #4]
 8019676:	480f      	ldr	r0, [pc, #60]	; (80196b4 <mqtt_close+0xbc>)
 8019678:	f009 fc4a 	bl	8022f10 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	7a9b      	ldrb	r3, [r3, #10]
 8019680:	2b00      	cmp	r3, #0
 8019682:	d00d      	beq.n	80196a0 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	2200      	movs	r2, #0
 8019688:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	695b      	ldr	r3, [r3, #20]
 801968e:	2b00      	cmp	r3, #0
 8019690:	d006      	beq.n	80196a0 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	695b      	ldr	r3, [r3, #20]
 8019696:	687a      	ldr	r2, [r7, #4]
 8019698:	6911      	ldr	r1, [r2, #16]
 801969a:	887a      	ldrh	r2, [r7, #2]
 801969c:	6878      	ldr	r0, [r7, #4]
 801969e:	4798      	blx	r3
    }
  }
}
 80196a0:	bf00      	nop
 80196a2:	3710      	adds	r7, #16
 80196a4:	46bd      	mov	sp, r7
 80196a6:	bd80      	pop	{r7, pc}
 80196a8:	0802ce54 	.word	0x0802ce54
 80196ac:	0802d048 	.word	0x0802d048
 80196b0:	0802cecc 	.word	0x0802cecc
 80196b4:	080196b9 	.word	0x080196b9

080196b8 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 80196b8:	b580      	push	{r7, lr}
 80196ba:	b086      	sub	sp, #24
 80196bc:	af02      	add	r7, sp, #8
 80196be:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 80196c0:	2301      	movs	r3, #1
 80196c2:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 80196c8:	68bb      	ldr	r3, [r7, #8]
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d106      	bne.n	80196dc <mqtt_cyclic_timer+0x24>
 80196ce:	4b42      	ldr	r3, [pc, #264]	; (80197d8 <mqtt_cyclic_timer+0x120>)
 80196d0:	f44f 7211 	mov.w	r2, #580	; 0x244
 80196d4:	4941      	ldr	r1, [pc, #260]	; (80197dc <mqtt_cyclic_timer+0x124>)
 80196d6:	4842      	ldr	r0, [pc, #264]	; (80197e0 <mqtt_cyclic_timer+0x128>)
 80196d8:	f00d fabe 	bl	8026c58 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 80196dc:	68bb      	ldr	r3, [r7, #8]
 80196de:	7a9b      	ldrb	r3, [r3, #10]
 80196e0:	2b02      	cmp	r3, #2
 80196e2:	d115      	bne.n	8019710 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 80196e4:	68bb      	ldr	r3, [r7, #8]
 80196e6:	881b      	ldrh	r3, [r3, #0]
 80196e8:	3301      	adds	r3, #1
 80196ea:	b29a      	uxth	r2, r3
 80196ec:	68bb      	ldr	r3, [r7, #8]
 80196ee:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 80196f0:	68bb      	ldr	r3, [r7, #8]
 80196f2:	881b      	ldrh	r3, [r3, #0]
 80196f4:	461a      	mov	r2, r3
 80196f6:	4613      	mov	r3, r2
 80196f8:	009b      	lsls	r3, r3, #2
 80196fa:	4413      	add	r3, r2
 80196fc:	2b63      	cmp	r3, #99	; 0x63
 80196fe:	dd5e      	ble.n	80197be <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8019700:	f240 1101 	movw	r1, #257	; 0x101
 8019704:	68b8      	ldr	r0, [r7, #8]
 8019706:	f7ff ff77 	bl	80195f8 <mqtt_close>
      restart_timer = 0;
 801970a:	2300      	movs	r3, #0
 801970c:	73fb      	strb	r3, [r7, #15]
 801970e:	e056      	b.n	80197be <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8019710:	68bb      	ldr	r3, [r7, #8]
 8019712:	7a9b      	ldrb	r3, [r3, #10]
 8019714:	2b03      	cmp	r3, #3
 8019716:	d150      	bne.n	80197ba <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8019718:	68bb      	ldr	r3, [r7, #8]
 801971a:	3318      	adds	r3, #24
 801971c:	2105      	movs	r1, #5
 801971e:	4618      	mov	r0, r3
 8019720:	f7ff fdf0 	bl	8019304 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8019724:	68bb      	ldr	r3, [r7, #8]
 8019726:	885b      	ldrh	r3, [r3, #2]
 8019728:	2b00      	cmp	r3, #0
 801972a:	d048      	beq.n	80197be <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 801972c:	68bb      	ldr	r3, [r7, #8]
 801972e:	889b      	ldrh	r3, [r3, #4]
 8019730:	3301      	adds	r3, #1
 8019732:	b29a      	uxth	r2, r3
 8019734:	68bb      	ldr	r3, [r7, #8]
 8019736:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 8019738:	68bb      	ldr	r3, [r7, #8]
 801973a:	889b      	ldrh	r3, [r3, #4]
 801973c:	461a      	mov	r2, r3
 801973e:	4613      	mov	r3, r2
 8019740:	009b      	lsls	r3, r3, #2
 8019742:	441a      	add	r2, r3
 8019744:	68bb      	ldr	r3, [r7, #8]
 8019746:	885b      	ldrh	r3, [r3, #2]
 8019748:	4619      	mov	r1, r3
 801974a:	68bb      	ldr	r3, [r7, #8]
 801974c:	885b      	ldrh	r3, [r3, #2]
 801974e:	085b      	lsrs	r3, r3, #1
 8019750:	b29b      	uxth	r3, r3
 8019752:	440b      	add	r3, r1
 8019754:	429a      	cmp	r2, r3
 8019756:	dd06      	ble.n	8019766 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8019758:	f240 1101 	movw	r1, #257	; 0x101
 801975c:	68b8      	ldr	r0, [r7, #8]
 801975e:	f7ff ff4b 	bl	80195f8 <mqtt_close>
        restart_timer = 0;
 8019762:	2300      	movs	r3, #0
 8019764:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 8019766:	68bb      	ldr	r3, [r7, #8]
 8019768:	881b      	ldrh	r3, [r3, #0]
 801976a:	461a      	mov	r2, r3
 801976c:	4613      	mov	r3, r2
 801976e:	009b      	lsls	r3, r3, #2
 8019770:	4413      	add	r3, r2
 8019772:	68ba      	ldr	r2, [r7, #8]
 8019774:	8852      	ldrh	r2, [r2, #2]
 8019776:	4293      	cmp	r3, r2
 8019778:	db18      	blt.n	80197ac <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 801977a:	68bb      	ldr	r3, [r7, #8]
 801977c:	33ec      	adds	r3, #236	; 0xec
 801977e:	2100      	movs	r1, #0
 8019780:	4618      	mov	r0, r3
 8019782:	f7ff ff07 	bl	8019594 <mqtt_output_check_space>
 8019786:	4603      	mov	r3, r0
 8019788:	2b00      	cmp	r3, #0
 801978a:	d018      	beq.n	80197be <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 801978c:	68bb      	ldr	r3, [r7, #8]
 801978e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8019792:	2300      	movs	r3, #0
 8019794:	9301      	str	r3, [sp, #4]
 8019796:	2300      	movs	r3, #0
 8019798:	9300      	str	r3, [sp, #0]
 801979a:	2300      	movs	r3, #0
 801979c:	2200      	movs	r2, #0
 801979e:	210c      	movs	r1, #12
 80197a0:	f7ff fead 	bl	80194fe <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 80197a4:	68bb      	ldr	r3, [r7, #8]
 80197a6:	2200      	movs	r2, #0
 80197a8:	801a      	strh	r2, [r3, #0]
 80197aa:	e008      	b.n	80197be <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 80197ac:	68bb      	ldr	r3, [r7, #8]
 80197ae:	881b      	ldrh	r3, [r3, #0]
 80197b0:	3301      	adds	r3, #1
 80197b2:	b29a      	uxth	r2, r3
 80197b4:	68bb      	ldr	r3, [r7, #8]
 80197b6:	801a      	strh	r2, [r3, #0]
 80197b8:	e001      	b.n	80197be <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 80197ba:	2300      	movs	r3, #0
 80197bc:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 80197be:	7bfb      	ldrb	r3, [r7, #15]
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d005      	beq.n	80197d0 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 80197c4:	687a      	ldr	r2, [r7, #4]
 80197c6:	4907      	ldr	r1, [pc, #28]	; (80197e4 <mqtt_cyclic_timer+0x12c>)
 80197c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80197cc:	f009 fb7a 	bl	8022ec4 <sys_timeout>
  }
}
 80197d0:	bf00      	nop
 80197d2:	3710      	adds	r7, #16
 80197d4:	46bd      	mov	sp, r7
 80197d6:	bd80      	pop	{r7, pc}
 80197d8:	0802ce54 	.word	0x0802ce54
 80197dc:	0802d064 	.word	0x0802d064
 80197e0:	0802cecc 	.word	0x0802cecc
 80197e4:	080196b9 	.word	0x080196b9

080197e8 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 80197e8:	b580      	push	{r7, lr}
 80197ea:	b086      	sub	sp, #24
 80197ec:	af02      	add	r7, sp, #8
 80197ee:	6078      	str	r0, [r7, #4]
 80197f0:	4608      	mov	r0, r1
 80197f2:	4611      	mov	r1, r2
 80197f4:	461a      	mov	r2, r3
 80197f6:	4603      	mov	r3, r0
 80197f8:	70fb      	strb	r3, [r7, #3]
 80197fa:	460b      	mov	r3, r1
 80197fc:	803b      	strh	r3, [r7, #0]
 80197fe:	4613      	mov	r3, r2
 8019800:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 8019802:	2300      	movs	r3, #0
 8019804:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	33ec      	adds	r3, #236	; 0xec
 801980a:	2102      	movs	r1, #2
 801980c:	4618      	mov	r0, r3
 801980e:	f7ff fec1 	bl	8019594 <mqtt_output_check_space>
 8019812:	4603      	mov	r3, r0
 8019814:	2b00      	cmp	r3, #0
 8019816:	d01c      	beq.n	8019852 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 801981e:	78bb      	ldrb	r3, [r7, #2]
 8019820:	78f9      	ldrb	r1, [r7, #3]
 8019822:	2202      	movs	r2, #2
 8019824:	9201      	str	r2, [sp, #4]
 8019826:	2200      	movs	r2, #0
 8019828:	9200      	str	r2, [sp, #0]
 801982a:	2200      	movs	r2, #0
 801982c:	f7ff fe67 	bl	80194fe <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	33ec      	adds	r3, #236	; 0xec
 8019834:	883a      	ldrh	r2, [r7, #0]
 8019836:	4611      	mov	r1, r2
 8019838:	4618      	mov	r0, r3
 801983a:	f7ff fe1c 	bl	8019476 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	68db      	ldr	r3, [r3, #12]
 8019848:	4619      	mov	r1, r3
 801984a:	4610      	mov	r0, r2
 801984c:	f7ff fbb2 	bl	8018fb4 <mqtt_output_send>
 8019850:	e001      	b.n	8019856 <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 8019852:	23ff      	movs	r3, #255	; 0xff
 8019854:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 8019856:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801985a:	4618      	mov	r0, r3
 801985c:	3710      	adds	r7, #16
 801985e:	46bd      	mov	sp, r7
 8019860:	bd80      	pop	{r7, pc}

08019862 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 8019862:	b580      	push	{r7, lr}
 8019864:	b082      	sub	sp, #8
 8019866:	af00      	add	r7, sp, #0
 8019868:	6078      	str	r0, [r7, #4]
 801986a:	460b      	mov	r3, r1
 801986c:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	685b      	ldr	r3, [r3, #4]
 8019872:	2b00      	cmp	r3, #0
 8019874:	d00c      	beq.n	8019890 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	685b      	ldr	r3, [r3, #4]
 801987a:	687a      	ldr	r2, [r7, #4]
 801987c:	6890      	ldr	r0, [r2, #8]
 801987e:	78fa      	ldrb	r2, [r7, #3]
 8019880:	2a02      	cmp	r2, #2
 8019882:	d801      	bhi.n	8019888 <mqtt_incomming_suback+0x26>
 8019884:	2200      	movs	r2, #0
 8019886:	e001      	b.n	801988c <mqtt_incomming_suback+0x2a>
 8019888:	f06f 020c 	mvn.w	r2, #12
 801988c:	4611      	mov	r1, r2
 801988e:	4798      	blx	r3
  }
}
 8019890:	bf00      	nop
 8019892:	3708      	adds	r7, #8
 8019894:	46bd      	mov	sp, r7
 8019896:	bd80      	pop	{r7, pc}

08019898 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 8019898:	b590      	push	{r4, r7, lr}
 801989a:	b08f      	sub	sp, #60	; 0x3c
 801989c:	af00      	add	r7, sp, #0
 801989e:	60f8      	str	r0, [r7, #12]
 80198a0:	607b      	str	r3, [r7, #4]
 80198a2:	460b      	mov	r3, r1
 80198a4:	72fb      	strb	r3, [r7, #11]
 80198a6:	4613      	mov	r3, r2
 80198a8:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 80198aa:	2300      	movs	r3, #0
 80198ac:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80198b4:	7afb      	ldrb	r3, [r7, #11]
 80198b6:	4413      	add	r3, r2
 80198b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 80198ba:	7afb      	ldrb	r3, [r7, #11]
 80198bc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80198c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80198c8:	091b      	lsrs	r3, r3, #4
 80198ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 80198ce:	2300      	movs	r3, #0
 80198d0:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80198d6:	2b7f      	cmp	r3, #127	; 0x7f
 80198d8:	d906      	bls.n	80198e8 <mqtt_message_received+0x50>
 80198da:	4b9c      	ldr	r3, [pc, #624]	; (8019b4c <mqtt_message_received+0x2b4>)
 80198dc:	f240 22ab 	movw	r2, #683	; 0x2ab
 80198e0:	499b      	ldr	r1, [pc, #620]	; (8019b50 <mqtt_message_received+0x2b8>)
 80198e2:	489c      	ldr	r0, [pc, #624]	; (8019b54 <mqtt_message_received+0x2bc>)
 80198e4:	f00d f9b8 	bl	8026c58 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 80198e8:	7afa      	ldrb	r2, [r7, #11]
 80198ea:	68fb      	ldr	r3, [r7, #12]
 80198ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80198ee:	429a      	cmp	r2, r3
 80198f0:	d906      	bls.n	8019900 <mqtt_message_received+0x68>
 80198f2:	4b96      	ldr	r3, [pc, #600]	; (8019b4c <mqtt_message_received+0x2b4>)
 80198f4:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 80198f8:	4997      	ldr	r1, [pc, #604]	; (8019b58 <mqtt_message_received+0x2c0>)
 80198fa:	4896      	ldr	r0, [pc, #600]	; (8019b54 <mqtt_message_received+0x2bc>)
 80198fc:	f00d f9ac 	bl	8026c58 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 8019900:	7afa      	ldrb	r2, [r7, #11]
 8019902:	893b      	ldrh	r3, [r7, #8]
 8019904:	4413      	add	r3, r2
 8019906:	2b80      	cmp	r3, #128	; 0x80
 8019908:	dd09      	ble.n	801991e <mqtt_message_received+0x86>
 801990a:	4b90      	ldr	r3, [pc, #576]	; (8019b4c <mqtt_message_received+0x2b4>)
 801990c:	f240 22ad 	movw	r2, #685	; 0x2ad
 8019910:	4992      	ldr	r1, [pc, #584]	; (8019b5c <mqtt_message_received+0x2c4>)
 8019912:	4890      	ldr	r0, [pc, #576]	; (8019b54 <mqtt_message_received+0x2bc>)
 8019914:	f00d f9a0 	bl	8026c58 <iprintf>
 8019918:	f44f 7380 	mov.w	r3, #256	; 0x100
 801991c:	e16e      	b.n	8019bfc <mqtt_message_received+0x364>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 801991e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019922:	2b02      	cmp	r3, #2
 8019924:	d123      	bne.n	801996e <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 8019926:	68fb      	ldr	r3, [r7, #12]
 8019928:	7a9b      	ldrb	r3, [r3, #10]
 801992a:	2b02      	cmp	r3, #2
 801992c:	f040 8151 	bne.w	8019bd2 <mqtt_message_received+0x33a>
      if (length < 2) {
 8019930:	893b      	ldrh	r3, [r7, #8]
 8019932:	2b01      	cmp	r3, #1
 8019934:	f240 814f 	bls.w	8019bd6 <mqtt_message_received+0x33e>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 8019938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801993a:	3301      	adds	r3, #1
 801993c:	781b      	ldrb	r3, [r3, #0]
 801993e:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 8019940:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8019942:	2b00      	cmp	r3, #0
 8019944:	f040 8145 	bne.w	8019bd2 <mqtt_message_received+0x33a>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	2200      	movs	r2, #0
 801994c:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 801994e:	68fb      	ldr	r3, [r7, #12]
 8019950:	2203      	movs	r2, #3
 8019952:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	695b      	ldr	r3, [r3, #20]
 8019958:	2b00      	cmp	r3, #0
 801995a:	f000 813a 	beq.w	8019bd2 <mqtt_message_received+0x33a>
          client->connect_cb(client, client->connect_arg, res);
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	695b      	ldr	r3, [r3, #20]
 8019962:	68fa      	ldr	r2, [r7, #12]
 8019964:	6911      	ldr	r1, [r2, #16]
 8019966:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019968:	68f8      	ldr	r0, [r7, #12]
 801996a:	4798      	blx	r3
 801996c:	e131      	b.n	8019bd2 <mqtt_message_received+0x33a>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 801996e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019972:	2b0d      	cmp	r3, #13
 8019974:	f000 812d 	beq.w	8019bd2 <mqtt_message_received+0x33a>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 8019978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801997c:	2b03      	cmp	r3, #3
 801997e:	f040 80c0 	bne.w	8019b02 <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 8019982:	2300      	movs	r3, #0
 8019984:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 8019986:	893b      	ldrh	r3, [r7, #8]
 8019988:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8019990:	105b      	asrs	r3, r3, #1
 8019992:	b2db      	uxtb	r3, r3
 8019994:	f003 0303 	and.w	r3, r3, #3
 8019998:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 801999a:	68fb      	ldr	r3, [r7, #12]
 801999c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801999e:	2b80      	cmp	r3, #128	; 0x80
 80199a0:	d87d      	bhi.n	8019a9e <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 80199a2:	7ffb      	ldrb	r3, [r7, #31]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d001      	beq.n	80199ac <mqtt_message_received+0x114>
 80199a8:	2302      	movs	r3, #2
 80199aa:	e000      	b.n	80199ae <mqtt_message_received+0x116>
 80199ac:	2300      	movs	r3, #0
 80199ae:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 80199b0:	8bbb      	ldrh	r3, [r7, #28]
 80199b2:	1c5a      	adds	r2, r3, #1
 80199b4:	893b      	ldrh	r3, [r7, #8]
 80199b6:	429a      	cmp	r2, r3
 80199b8:	f280 810f 	bge.w	8019bda <mqtt_message_received+0x342>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 80199bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199be:	781b      	ldrb	r3, [r3, #0]
 80199c0:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 80199c2:	8b7b      	ldrh	r3, [r7, #26]
 80199c4:	021b      	lsls	r3, r3, #8
 80199c6:	b29a      	uxth	r2, r3
 80199c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199ca:	3301      	adds	r3, #1
 80199cc:	781b      	ldrb	r3, [r3, #0]
 80199ce:	b29b      	uxth	r3, r3
 80199d0:	4413      	add	r3, r2
 80199d2:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 80199d4:	8b7a      	ldrh	r2, [r7, #26]
 80199d6:	8939      	ldrh	r1, [r7, #8]
 80199d8:	8bbb      	ldrh	r3, [r7, #28]
 80199da:	3302      	adds	r3, #2
 80199dc:	1acb      	subs	r3, r1, r3
 80199de:	429a      	cmp	r2, r3
 80199e0:	f300 80fd 	bgt.w	8019bde <mqtt_message_received+0x346>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 80199e4:	8b7a      	ldrh	r2, [r7, #26]
 80199e6:	8bbb      	ldrh	r3, [r7, #28]
 80199e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80199ea:	1acb      	subs	r3, r1, r3
 80199ec:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 80199ee:	429a      	cmp	r2, r3
 80199f0:	f200 80f5 	bhi.w	8019bde <mqtt_message_received+0x346>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 80199f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199f6:	3302      	adds	r3, #2
 80199f8:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 80199fa:	8b7b      	ldrh	r3, [r7, #26]
 80199fc:	3302      	adds	r3, #2
 80199fe:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8019a00:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019a02:	7ffa      	ldrb	r2, [r7, #31]
 8019a04:	2a00      	cmp	r2, #0
 8019a06:	d001      	beq.n	8019a0c <mqtt_message_received+0x174>
 8019a08:	2202      	movs	r2, #2
 8019a0a:	e000      	b.n	8019a0e <mqtt_message_received+0x176>
 8019a0c:	2201      	movs	r2, #1
 8019a0e:	4413      	add	r3, r2
 8019a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a12:	429a      	cmp	r2, r3
 8019a14:	f0c0 80e5 	bcc.w	8019be2 <mqtt_message_received+0x34a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 8019a18:	7ffb      	ldrb	r3, [r7, #31]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d01a      	beq.n	8019a54 <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 8019a1e:	893a      	ldrh	r2, [r7, #8]
 8019a20:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019a22:	3302      	adds	r3, #2
 8019a24:	429a      	cmp	r2, r3
 8019a26:	f0c0 80de 	bcc.w	8019be6 <mqtt_message_received+0x34e>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8019a2a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019a2e:	4413      	add	r3, r2
 8019a30:	781b      	ldrb	r3, [r3, #0]
 8019a32:	b29b      	uxth	r3, r3
 8019a34:	021b      	lsls	r3, r3, #8
 8019a36:	b29a      	uxth	r2, r3
 8019a38:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019a3a:	3301      	adds	r3, #1
 8019a3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019a3e:	440b      	add	r3, r1
 8019a40:	781b      	ldrb	r3, [r3, #0]
 8019a42:	b29b      	uxth	r3, r3
 8019a44:	4413      	add	r3, r2
 8019a46:	b29a      	uxth	r2, r3
 8019a48:	68fb      	ldr	r3, [r7, #12]
 8019a4a:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 8019a4c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019a4e:	3302      	adds	r3, #2
 8019a50:	863b      	strh	r3, [r7, #48]	; 0x30
 8019a52:	e002      	b.n	8019a5a <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 8019a54:	68fb      	ldr	r3, [r7, #12]
 8019a56:	2200      	movs	r2, #0
 8019a58:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 8019a5a:	8b7b      	ldrh	r3, [r7, #26]
 8019a5c:	697a      	ldr	r2, [r7, #20]
 8019a5e:	4413      	add	r3, r2
 8019a60:	781b      	ldrb	r3, [r3, #0]
 8019a62:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 8019a64:	8b7b      	ldrh	r3, [r7, #26]
 8019a66:	697a      	ldr	r2, [r7, #20]
 8019a68:	4413      	add	r3, r2
 8019a6a:	2200      	movs	r2, #0
 8019a6c:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 8019a6e:	893a      	ldrh	r2, [r7, #8]
 8019a70:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019a72:	1ad3      	subs	r3, r2, r3
 8019a74:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 8019a76:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019a78:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 8019a7a:	68fb      	ldr	r3, [r7, #12]
 8019a7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d008      	beq.n	8019a94 <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019a86:	68fa      	ldr	r2, [r7, #12]
 8019a88:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8019a8a:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8019a8c:	687a      	ldr	r2, [r7, #4]
 8019a8e:	440a      	add	r2, r1
 8019a90:	6979      	ldr	r1, [r7, #20]
 8019a92:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 8019a94:	8b7b      	ldrh	r3, [r7, #26]
 8019a96:	697a      	ldr	r2, [r7, #20]
 8019a98:	4413      	add	r3, r2
 8019a9a:	7cfa      	ldrb	r2, [r7, #19]
 8019a9c:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 8019a9e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d103      	bne.n	8019aac <mqtt_message_received+0x214>
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	f040 8093 	bne.w	8019bd2 <mqtt_message_received+0x33a>
      if (length < (size_t)(payload_offset + payload_length)) {
 8019aac:	893b      	ldrh	r3, [r7, #8]
 8019aae:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8019ab0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8019ab2:	440a      	add	r2, r1
 8019ab4:	4293      	cmp	r3, r2
 8019ab6:	f0c0 8098 	bcc.w	8019bea <mqtt_message_received+0x352>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8019abe:	68fb      	ldr	r3, [r7, #12]
 8019ac0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8019ac2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019ac6:	18d1      	adds	r1, r2, r3
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	bf0c      	ite	eq
 8019ace:	2301      	moveq	r3, #1
 8019ad0:	2300      	movne	r3, #0
 8019ad2:	b2db      	uxtb	r3, r3
 8019ad4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8019ad6:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d179      	bne.n	8019bd2 <mqtt_message_received+0x33a>
 8019ade:	7ffb      	ldrb	r3, [r7, #31]
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d076      	beq.n	8019bd2 <mqtt_message_received+0x33a>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8019ae4:	7ffb      	ldrb	r3, [r7, #31]
 8019ae6:	2b01      	cmp	r3, #1
 8019ae8:	d101      	bne.n	8019aee <mqtt_message_received+0x256>
 8019aea:	2304      	movs	r3, #4
 8019aec:	e000      	b.n	8019af0 <mqtt_message_received+0x258>
 8019aee:	2305      	movs	r3, #5
 8019af0:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	891a      	ldrh	r2, [r3, #8]
 8019af6:	7cb9      	ldrb	r1, [r7, #18]
 8019af8:	2300      	movs	r3, #0
 8019afa:	68f8      	ldr	r0, [r7, #12]
 8019afc:	f7ff fe74 	bl	80197e8 <pub_ack_rec_rel_response>
 8019b00:	e067      	b.n	8019bd2 <mqtt_message_received+0x33a>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 8019b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b04:	781b      	ldrb	r3, [r3, #0]
 8019b06:	b29b      	uxth	r3, r3
 8019b08:	021b      	lsls	r3, r3, #8
 8019b0a:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 8019b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b0e:	3301      	adds	r3, #1
 8019b10:	781b      	ldrb	r3, [r3, #0]
 8019b12:	b29a      	uxth	r2, r3
 8019b14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019b16:	4313      	orrs	r3, r2
 8019b18:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 8019b1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d066      	beq.n	8019bee <mqtt_message_received+0x356>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8019b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b24:	2b05      	cmp	r3, #5
 8019b26:	d106      	bne.n	8019b36 <mqtt_message_received+0x29e>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 8019b28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019b2a:	2301      	movs	r3, #1
 8019b2c:	2106      	movs	r1, #6
 8019b2e:	68f8      	ldr	r0, [r7, #12]
 8019b30:	f7ff fe5a 	bl	80197e8 <pub_ack_rec_rel_response>
 8019b34:	e04d      	b.n	8019bd2 <mqtt_message_received+0x33a>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 8019b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b3a:	2b06      	cmp	r3, #6
 8019b3c:	d110      	bne.n	8019b60 <mqtt_message_received+0x2c8>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8019b3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019b40:	2300      	movs	r3, #0
 8019b42:	2107      	movs	r1, #7
 8019b44:	68f8      	ldr	r0, [r7, #12]
 8019b46:	f7ff fe4f 	bl	80197e8 <pub_ack_rec_rel_response>
 8019b4a:	e042      	b.n	8019bd2 <mqtt_message_received+0x33a>
 8019b4c:	0802ce54 	.word	0x0802ce54
 8019b50:	0802d088 	.word	0x0802d088
 8019b54:	0802cecc 	.word	0x0802cecc
 8019b58:	0802d0b8 	.word	0x0802d0b8
 8019b5c:	0802d0dc 	.word	0x0802d0dc

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 8019b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b64:	2b09      	cmp	r3, #9
 8019b66:	d00b      	beq.n	8019b80 <mqtt_message_received+0x2e8>
 8019b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b6c:	2b0b      	cmp	r3, #11
 8019b6e:	d007      	beq.n	8019b80 <mqtt_message_received+0x2e8>
 8019b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b74:	2b07      	cmp	r3, #7
 8019b76:	d003      	beq.n	8019b80 <mqtt_message_received+0x2e8>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8019b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b7c:	2b04      	cmp	r3, #4
 8019b7e:	d138      	bne.n	8019bf2 <mqtt_message_received+0x35a>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	3318      	adds	r3, #24
 8019b84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019b86:	4611      	mov	r1, r2
 8019b88:	4618      	mov	r0, r3
 8019b8a:	f7ff fb69 	bl	8019260 <mqtt_take_request>
 8019b8e:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 8019b90:	6a3b      	ldr	r3, [r7, #32]
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d01c      	beq.n	8019bd0 <mqtt_message_received+0x338>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 8019b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b9a:	2b09      	cmp	r3, #9
 8019b9c:	d10a      	bne.n	8019bb4 <mqtt_message_received+0x31c>
          if (length < 3) {
 8019b9e:	893b      	ldrh	r3, [r7, #8]
 8019ba0:	2b02      	cmp	r3, #2
 8019ba2:	d928      	bls.n	8019bf6 <mqtt_message_received+0x35e>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 8019ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ba6:	3302      	adds	r3, #2
 8019ba8:	781b      	ldrb	r3, [r3, #0]
 8019baa:	4619      	mov	r1, r3
 8019bac:	6a38      	ldr	r0, [r7, #32]
 8019bae:	f7ff fe58 	bl	8019862 <mqtt_incomming_suback>
 8019bb2:	e00a      	b.n	8019bca <mqtt_message_received+0x332>
          }
        } else if (r->cb != NULL) {
 8019bb4:	6a3b      	ldr	r3, [r7, #32]
 8019bb6:	685b      	ldr	r3, [r3, #4]
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d006      	beq.n	8019bca <mqtt_message_received+0x332>
          r->cb(r->arg, ERR_OK);
 8019bbc:	6a3b      	ldr	r3, [r7, #32]
 8019bbe:	685b      	ldr	r3, [r3, #4]
 8019bc0:	6a3a      	ldr	r2, [r7, #32]
 8019bc2:	6892      	ldr	r2, [r2, #8]
 8019bc4:	2100      	movs	r1, #0
 8019bc6:	4610      	mov	r0, r2
 8019bc8:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 8019bca:	6a38      	ldr	r0, [r7, #32]
 8019bcc:	f7ff fb38 	bl	8019240 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8019bd0:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 8019bd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8019bd4:	e012      	b.n	8019bfc <mqtt_message_received+0x364>
        goto out_disconnect;
 8019bd6:	bf00      	nop
 8019bd8:	e00e      	b.n	8019bf8 <mqtt_message_received+0x360>
        goto out_disconnect;
 8019bda:	bf00      	nop
 8019bdc:	e00c      	b.n	8019bf8 <mqtt_message_received+0x360>
        goto out_disconnect;
 8019bde:	bf00      	nop
 8019be0:	e00a      	b.n	8019bf8 <mqtt_message_received+0x360>
        goto out_disconnect;
 8019be2:	bf00      	nop
 8019be4:	e008      	b.n	8019bf8 <mqtt_message_received+0x360>
          goto out_disconnect;
 8019be6:	bf00      	nop
 8019be8:	e006      	b.n	8019bf8 <mqtt_message_received+0x360>
        goto out_disconnect;
 8019bea:	bf00      	nop
 8019bec:	e004      	b.n	8019bf8 <mqtt_message_received+0x360>
      goto out_disconnect;
 8019bee:	bf00      	nop
 8019bf0:	e002      	b.n	8019bf8 <mqtt_message_received+0x360>
      goto out_disconnect;
 8019bf2:	bf00      	nop
 8019bf4:	e000      	b.n	8019bf8 <mqtt_message_received+0x360>
            goto out_disconnect;
 8019bf6:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 8019bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 8019bfc:	4618      	mov	r0, r3
 8019bfe:	373c      	adds	r7, #60	; 0x3c
 8019c00:	46bd      	mov	sp, r7
 8019c02:	bd90      	pop	{r4, r7, pc}

08019c04 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 8019c04:	b580      	push	{r7, lr}
 8019c06:	b088      	sub	sp, #32
 8019c08:	af00      	add	r7, sp, #0
 8019c0a:	6078      	str	r0, [r7, #4]
 8019c0c:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 8019c0e:	2300      	movs	r3, #0
 8019c10:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 8019c12:	2300      	movs	r3, #0
 8019c14:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 8019c16:	2300      	movs	r3, #0
 8019c18:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 8019c1a:	2300      	movs	r3, #0
 8019c1c:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 8019c1e:	e0bc      	b.n	8019d9a <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 8019c20:	7dfb      	ldrb	r3, [r7, #23]
 8019c22:	2b01      	cmp	r3, #1
 8019c24:	d903      	bls.n	8019c2e <mqtt_parse_incoming+0x2a>
 8019c26:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	da4d      	bge.n	8019cca <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 8019c2e:	7dfa      	ldrb	r2, [r7, #23]
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019c34:	429a      	cmp	r2, r3
 8019c36:	d206      	bcs.n	8019c46 <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 8019c38:	7dfb      	ldrb	r3, [r7, #23]
 8019c3a:	687a      	ldr	r2, [r7, #4]
 8019c3c:	4413      	add	r3, r2
 8019c3e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8019c42:	75bb      	strb	r3, [r7, #22]
 8019c44:	e012      	b.n	8019c6c <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 8019c46:	8bfb      	ldrh	r3, [r7, #30]
 8019c48:	1c5a      	adds	r2, r3, #1
 8019c4a:	83fa      	strh	r2, [r7, #30]
 8019c4c:	4619      	mov	r1, r3
 8019c4e:	6838      	ldr	r0, [r7, #0]
 8019c50:	f002 feae 	bl	801c9b0 <pbuf_get_at>
 8019c54:	4603      	mov	r3, r0
 8019c56:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019c5c:	1c59      	adds	r1, r3, #1
 8019c5e:	687a      	ldr	r2, [r7, #4]
 8019c60:	6691      	str	r1, [r2, #104]	; 0x68
 8019c62:	687a      	ldr	r2, [r7, #4]
 8019c64:	4413      	add	r3, r2
 8019c66:	7dba      	ldrb	r2, [r7, #22]
 8019c68:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 8019c6c:	7dfb      	ldrb	r3, [r7, #23]
 8019c6e:	3301      	adds	r3, #1
 8019c70:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 8019c72:	7dfb      	ldrb	r3, [r7, #23]
 8019c74:	2b01      	cmp	r3, #1
 8019c76:	f240 8090 	bls.w	8019d9a <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 8019c7a:	7dbb      	ldrb	r3, [r7, #22]
 8019c7c:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8019c80:	7dfb      	ldrb	r3, [r7, #23]
 8019c82:	1e9a      	subs	r2, r3, #2
 8019c84:	4613      	mov	r3, r2
 8019c86:	00db      	lsls	r3, r3, #3
 8019c88:	1a9b      	subs	r3, r3, r2
 8019c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8019c8e:	69ba      	ldr	r2, [r7, #24]
 8019c90:	4313      	orrs	r3, r2
 8019c92:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 8019c94:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	db7e      	blt.n	8019d9a <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 8019c9c:	69bb      	ldr	r3, [r7, #24]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d10b      	bne.n	8019cba <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 8019ca2:	7df9      	ldrb	r1, [r7, #23]
 8019ca4:	2300      	movs	r3, #0
 8019ca6:	2200      	movs	r2, #0
 8019ca8:	6878      	ldr	r0, [r7, #4]
 8019caa:	f7ff fdf5 	bl	8019898 <mqtt_message_received>
            client->msg_idx = 0;
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	2200      	movs	r2, #0
 8019cb2:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	75fb      	strb	r3, [r7, #23]
 8019cb8:	e06f      	b.n	8019d9a <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 8019cba:	7dfa      	ldrb	r2, [r7, #23]
 8019cbc:	69bb      	ldr	r3, [r7, #24]
 8019cbe:	441a      	add	r2, r3
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019cc4:	1ad3      	subs	r3, r2, r3
 8019cc6:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 8019cc8:	e067      	b.n	8019d9a <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8019cce:	7dfb      	ldrb	r3, [r7, #23]
 8019cd0:	1ad3      	subs	r3, r2, r3
 8019cd2:	7dfa      	ldrb	r2, [r7, #23]
 8019cd4:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 8019cd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8019cdc:	fb02 f201 	mul.w	r2, r2, r1
 8019ce0:	1a9b      	subs	r3, r3, r2
 8019ce2:	b29a      	uxth	r2, r3
 8019ce4:	7dfb      	ldrb	r3, [r7, #23]
 8019ce6:	b29b      	uxth	r3, r3
 8019ce8:	4413      	add	r3, r2
 8019cea:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8019cec:	683b      	ldr	r3, [r7, #0]
 8019cee:	891a      	ldrh	r2, [r3, #8]
 8019cf0:	8bfb      	ldrh	r3, [r7, #30]
 8019cf2:	1ad3      	subs	r3, r2, r3
 8019cf4:	b29b      	uxth	r3, r3
 8019cf6:	461a      	mov	r2, r3
 8019cf8:	69bb      	ldr	r3, [r7, #24]
 8019cfa:	4293      	cmp	r3, r2
 8019cfc:	d905      	bls.n	8019d0a <mqtt_parse_incoming+0x106>
 8019cfe:	683b      	ldr	r3, [r7, #0]
 8019d00:	891a      	ldrh	r2, [r3, #8]
 8019d02:	8bfb      	ldrh	r3, [r7, #30]
 8019d04:	1ad3      	subs	r3, r2, r3
 8019d06:	b29b      	uxth	r3, r3
 8019d08:	e001      	b.n	8019d0e <mqtt_parse_incoming+0x10a>
 8019d0a:	69bb      	ldr	r3, [r7, #24]
 8019d0c:	b29b      	uxth	r3, r3
 8019d0e:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 8019d10:	8a7b      	ldrh	r3, [r7, #18]
 8019d12:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8019d16:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 8019d18:	8aba      	ldrh	r2, [r7, #20]
 8019d1a:	8a3b      	ldrh	r3, [r7, #16]
 8019d1c:	429a      	cmp	r2, r3
 8019d1e:	d901      	bls.n	8019d24 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 8019d20:	8a3b      	ldrh	r3, [r7, #16]
 8019d22:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8019d2a:	8a7b      	ldrh	r3, [r7, #18]
 8019d2c:	18d1      	adds	r1, r2, r3
 8019d2e:	8bfb      	ldrh	r3, [r7, #30]
 8019d30:	8aba      	ldrh	r2, [r7, #20]
 8019d32:	6838      	ldr	r0, [r7, #0]
 8019d34:	f002 fd6e 	bl	801c814 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8019d3c:	8abb      	ldrh	r3, [r7, #20]
 8019d3e:	441a      	add	r2, r3
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 8019d44:	8bfa      	ldrh	r2, [r7, #30]
 8019d46:	8abb      	ldrh	r3, [r7, #20]
 8019d48:	4413      	add	r3, r2
 8019d4a:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 8019d4c:	8abb      	ldrh	r3, [r7, #20]
 8019d4e:	69ba      	ldr	r2, [r7, #24]
 8019d50:	1ad3      	subs	r3, r2, r3
 8019d52:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 8019d54:	69bb      	ldr	r3, [r7, #24]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d003      	beq.n	8019d62 <mqtt_parse_incoming+0x15e>
 8019d5a:	8aba      	ldrh	r2, [r7, #20]
 8019d5c:	8a3b      	ldrh	r3, [r7, #16]
 8019d5e:	429a      	cmp	r2, r3
 8019d60:	d11b      	bne.n	8019d9a <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 8019d62:	8a7a      	ldrh	r2, [r7, #18]
 8019d64:	8abb      	ldrh	r3, [r7, #20]
 8019d66:	4413      	add	r3, r2
 8019d68:	b29a      	uxth	r2, r3
 8019d6a:	7dfb      	ldrb	r3, [r7, #23]
 8019d6c:	b29b      	uxth	r3, r3
 8019d6e:	1ad3      	subs	r3, r2, r3
 8019d70:	b29a      	uxth	r2, r3
 8019d72:	7df9      	ldrb	r1, [r7, #23]
 8019d74:	69bb      	ldr	r3, [r7, #24]
 8019d76:	6878      	ldr	r0, [r7, #4]
 8019d78:	f7ff fd8e 	bl	8019898 <mqtt_message_received>
 8019d7c:	4603      	mov	r3, r0
 8019d7e:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 8019d80:	89fb      	ldrh	r3, [r7, #14]
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d001      	beq.n	8019d8a <mqtt_parse_incoming+0x186>
          return res;
 8019d86:	89fb      	ldrh	r3, [r7, #14]
 8019d88:	e00e      	b.n	8019da8 <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 8019d8a:	69bb      	ldr	r3, [r7, #24]
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d104      	bne.n	8019d9a <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	2200      	movs	r2, #0
 8019d94:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 8019d96:	2300      	movs	r3, #0
 8019d98:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 8019d9a:	683b      	ldr	r3, [r7, #0]
 8019d9c:	891b      	ldrh	r3, [r3, #8]
 8019d9e:	8bfa      	ldrh	r2, [r7, #30]
 8019da0:	429a      	cmp	r2, r3
 8019da2:	f4ff af3d 	bcc.w	8019c20 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 8019da6:	2300      	movs	r3, #0
}
 8019da8:	4618      	mov	r0, r3
 8019daa:	3720      	adds	r7, #32
 8019dac:	46bd      	mov	sp, r7
 8019dae:	bd80      	pop	{r7, pc}

08019db0 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8019db0:	b580      	push	{r7, lr}
 8019db2:	b086      	sub	sp, #24
 8019db4:	af00      	add	r7, sp, #0
 8019db6:	60f8      	str	r0, [r7, #12]
 8019db8:	60b9      	str	r1, [r7, #8]
 8019dba:	607a      	str	r2, [r7, #4]
 8019dbc:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8019dbe:	68fb      	ldr	r3, [r7, #12]
 8019dc0:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 8019dc2:	697b      	ldr	r3, [r7, #20]
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d106      	bne.n	8019dd6 <mqtt_tcp_recv_cb+0x26>
 8019dc8:	4b24      	ldr	r3, [pc, #144]	; (8019e5c <mqtt_tcp_recv_cb+0xac>)
 8019dca:	f240 32a7 	movw	r2, #935	; 0x3a7
 8019dce:	4924      	ldr	r1, [pc, #144]	; (8019e60 <mqtt_tcp_recv_cb+0xb0>)
 8019dd0:	4824      	ldr	r0, [pc, #144]	; (8019e64 <mqtt_tcp_recv_cb+0xb4>)
 8019dd2:	f00c ff41 	bl	8026c58 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 8019dd6:	697b      	ldr	r3, [r7, #20]
 8019dd8:	68db      	ldr	r3, [r3, #12]
 8019dda:	68ba      	ldr	r2, [r7, #8]
 8019ddc:	429a      	cmp	r2, r3
 8019dde:	d006      	beq.n	8019dee <mqtt_tcp_recv_cb+0x3e>
 8019de0:	4b1e      	ldr	r3, [pc, #120]	; (8019e5c <mqtt_tcp_recv_cb+0xac>)
 8019de2:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8019de6:	4920      	ldr	r1, [pc, #128]	; (8019e68 <mqtt_tcp_recv_cb+0xb8>)
 8019de8:	481e      	ldr	r0, [pc, #120]	; (8019e64 <mqtt_tcp_recv_cb+0xb4>)
 8019dea:	f00c ff35 	bl	8026c58 <iprintf>

  if (p == NULL) {
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d105      	bne.n	8019e00 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8019df4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8019df8:	6978      	ldr	r0, [r7, #20]
 8019dfa:	f7ff fbfd 	bl	80195f8 <mqtt_close>
 8019dfe:	e027      	b.n	8019e50 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 8019e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d005      	beq.n	8019e14 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 8019e08:	6878      	ldr	r0, [r7, #4]
 8019e0a:	f002 fafd 	bl	801c408 <pbuf_free>
      return err;
 8019e0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019e12:	e01e      	b.n	8019e52 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	891b      	ldrh	r3, [r3, #8]
 8019e18:	4619      	mov	r1, r3
 8019e1a:	68b8      	ldr	r0, [r7, #8]
 8019e1c:	f003 fad6 	bl	801d3cc <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 8019e20:	6879      	ldr	r1, [r7, #4]
 8019e22:	6978      	ldr	r0, [r7, #20]
 8019e24:	f7ff feee 	bl	8019c04 <mqtt_parse_incoming>
 8019e28:	4603      	mov	r3, r0
 8019e2a:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 8019e2c:	6878      	ldr	r0, [r7, #4]
 8019e2e:	f002 faeb 	bl	801c408 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 8019e32:	8a7b      	ldrh	r3, [r7, #18]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d004      	beq.n	8019e42 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 8019e38:	8a7b      	ldrh	r3, [r7, #18]
 8019e3a:	4619      	mov	r1, r3
 8019e3c:	6978      	ldr	r0, [r7, #20]
 8019e3e:	f7ff fbdb 	bl	80195f8 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 8019e42:	697b      	ldr	r3, [r7, #20]
 8019e44:	885b      	ldrh	r3, [r3, #2]
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d002      	beq.n	8019e50 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 8019e4a:	697b      	ldr	r3, [r7, #20]
 8019e4c:	2200      	movs	r2, #0
 8019e4e:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 8019e50:	2300      	movs	r3, #0
}
 8019e52:	4618      	mov	r0, r3
 8019e54:	3718      	adds	r7, #24
 8019e56:	46bd      	mov	sp, r7
 8019e58:	bd80      	pop	{r7, pc}
 8019e5a:	bf00      	nop
 8019e5c:	0802ce54 	.word	0x0802ce54
 8019e60:	0802d0f4 	.word	0x0802d0f4
 8019e64:	0802cecc 	.word	0x0802cecc
 8019e68:	0802d118 	.word	0x0802d118

08019e6c <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 8019e6c:	b580      	push	{r7, lr}
 8019e6e:	b086      	sub	sp, #24
 8019e70:	af00      	add	r7, sp, #0
 8019e72:	60f8      	str	r0, [r7, #12]
 8019e74:	60b9      	str	r1, [r7, #8]
 8019e76:	4613      	mov	r3, r2
 8019e78:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 8019e7e:	697b      	ldr	r3, [r7, #20]
 8019e80:	7a9b      	ldrb	r3, [r3, #10]
 8019e82:	2b03      	cmp	r3, #3
 8019e84:	d127      	bne.n	8019ed6 <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 8019e86:	697b      	ldr	r3, [r7, #20]
 8019e88:	2200      	movs	r2, #0
 8019e8a:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 8019e8c:	697b      	ldr	r3, [r7, #20]
 8019e8e:	2200      	movs	r2, #0
 8019e90:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8019e92:	e00d      	b.n	8019eb0 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8019e94:	693b      	ldr	r3, [r7, #16]
 8019e96:	685b      	ldr	r3, [r3, #4]
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d006      	beq.n	8019eaa <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 8019e9c:	693b      	ldr	r3, [r7, #16]
 8019e9e:	685b      	ldr	r3, [r3, #4]
 8019ea0:	693a      	ldr	r2, [r7, #16]
 8019ea2:	6892      	ldr	r2, [r2, #8]
 8019ea4:	2100      	movs	r1, #0
 8019ea6:	4610      	mov	r0, r2
 8019ea8:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8019eaa:	6938      	ldr	r0, [r7, #16]
 8019eac:	f7ff f9c8 	bl	8019240 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8019eb0:	697b      	ldr	r3, [r7, #20]
 8019eb2:	3318      	adds	r3, #24
 8019eb4:	2100      	movs	r1, #0
 8019eb6:	4618      	mov	r0, r3
 8019eb8:	f7ff f9d2 	bl	8019260 <mqtt_take_request>
 8019ebc:	6138      	str	r0, [r7, #16]
 8019ebe:	693b      	ldr	r3, [r7, #16]
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d1e7      	bne.n	8019e94 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 8019ec4:	697b      	ldr	r3, [r7, #20]
 8019ec6:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8019eca:	697b      	ldr	r3, [r7, #20]
 8019ecc:	68db      	ldr	r3, [r3, #12]
 8019ece:	4619      	mov	r1, r3
 8019ed0:	4610      	mov	r0, r2
 8019ed2:	f7ff f86f 	bl	8018fb4 <mqtt_output_send>
  }
  return ERR_OK;
 8019ed6:	2300      	movs	r3, #0
}
 8019ed8:	4618      	mov	r0, r3
 8019eda:	3718      	adds	r7, #24
 8019edc:	46bd      	mov	sp, r7
 8019ede:	bd80      	pop	{r7, pc}

08019ee0 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 8019ee0:	b580      	push	{r7, lr}
 8019ee2:	b084      	sub	sp, #16
 8019ee4:	af00      	add	r7, sp, #0
 8019ee6:	6078      	str	r0, [r7, #4]
 8019ee8:	460b      	mov	r3, r1
 8019eea:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d106      	bne.n	8019f04 <mqtt_tcp_err_cb+0x24>
 8019ef6:	4b09      	ldr	r3, [pc, #36]	; (8019f1c <mqtt_tcp_err_cb+0x3c>)
 8019ef8:	f240 32f6 	movw	r2, #1014	; 0x3f6
 8019efc:	4908      	ldr	r1, [pc, #32]	; (8019f20 <mqtt_tcp_err_cb+0x40>)
 8019efe:	4809      	ldr	r0, [pc, #36]	; (8019f24 <mqtt_tcp_err_cb+0x44>)
 8019f00:	f00c feaa 	bl	8026c58 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	2200      	movs	r2, #0
 8019f08:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8019f0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8019f0e:	68f8      	ldr	r0, [r7, #12]
 8019f10:	f7ff fb72 	bl	80195f8 <mqtt_close>
}
 8019f14:	bf00      	nop
 8019f16:	3710      	adds	r7, #16
 8019f18:	46bd      	mov	sp, r7
 8019f1a:	bd80      	pop	{r7, pc}
 8019f1c:	0802ce54 	.word	0x0802ce54
 8019f20:	0802d140 	.word	0x0802d140
 8019f24:	0802cecc 	.word	0x0802cecc

08019f28 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 8019f28:	b580      	push	{r7, lr}
 8019f2a:	b084      	sub	sp, #16
 8019f2c:	af00      	add	r7, sp, #0
 8019f2e:	6078      	str	r0, [r7, #4]
 8019f30:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	7a9b      	ldrb	r3, [r3, #10]
 8019f3a:	2b03      	cmp	r3, #3
 8019f3c:	d105      	bne.n	8019f4a <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	33ec      	adds	r3, #236	; 0xec
 8019f42:	6839      	ldr	r1, [r7, #0]
 8019f44:	4618      	mov	r0, r3
 8019f46:	f7ff f835 	bl	8018fb4 <mqtt_output_send>
  }
  return ERR_OK;
 8019f4a:	2300      	movs	r3, #0
}
 8019f4c:	4618      	mov	r0, r3
 8019f4e:	3710      	adds	r7, #16
 8019f50:	46bd      	mov	sp, r7
 8019f52:	bd80      	pop	{r7, pc}

08019f54 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 8019f54:	b580      	push	{r7, lr}
 8019f56:	b086      	sub	sp, #24
 8019f58:	af00      	add	r7, sp, #0
 8019f5a:	60f8      	str	r0, [r7, #12]
 8019f5c:	60b9      	str	r1, [r7, #8]
 8019f5e:	4613      	mov	r3, r2
 8019f60:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8019f62:	68fb      	ldr	r3, [r7, #12]
 8019f64:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 8019f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d002      	beq.n	8019f74 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 8019f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019f72:	e025      	b.n	8019fc0 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 8019f74:	697b      	ldr	r3, [r7, #20]
 8019f76:	2200      	movs	r2, #0
 8019f78:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 8019f7a:	4913      	ldr	r1, [pc, #76]	; (8019fc8 <mqtt_tcp_connect_cb+0x74>)
 8019f7c:	68b8      	ldr	r0, [r7, #8]
 8019f7e:	f004 fa33 	bl	801e3e8 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 8019f82:	4912      	ldr	r1, [pc, #72]	; (8019fcc <mqtt_tcp_connect_cb+0x78>)
 8019f84:	68b8      	ldr	r0, [r7, #8]
 8019f86:	f004 fa51 	bl	801e42c <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 8019f8a:	2202      	movs	r2, #2
 8019f8c:	4910      	ldr	r1, [pc, #64]	; (8019fd0 <mqtt_tcp_connect_cb+0x7c>)
 8019f8e:	68b8      	ldr	r0, [r7, #8]
 8019f90:	f004 faa8 	bl	801e4e4 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8019f94:	697b      	ldr	r3, [r7, #20]
 8019f96:	2202      	movs	r2, #2
 8019f98:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 8019f9a:	697a      	ldr	r2, [r7, #20]
 8019f9c:	490d      	ldr	r1, [pc, #52]	; (8019fd4 <mqtt_tcp_connect_cb+0x80>)
 8019f9e:	f241 3088 	movw	r0, #5000	; 0x1388
 8019fa2:	f008 ff8f 	bl	8022ec4 <sys_timeout>
  client->cyclic_tick = 0;
 8019fa6:	697b      	ldr	r3, [r7, #20]
 8019fa8:	2200      	movs	r2, #0
 8019faa:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8019fac:	697b      	ldr	r3, [r7, #20]
 8019fae:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8019fb2:	697b      	ldr	r3, [r7, #20]
 8019fb4:	68db      	ldr	r3, [r3, #12]
 8019fb6:	4619      	mov	r1, r3
 8019fb8:	4610      	mov	r0, r2
 8019fba:	f7fe fffb 	bl	8018fb4 <mqtt_output_send>

  return ERR_OK;
 8019fbe:	2300      	movs	r3, #0
}
 8019fc0:	4618      	mov	r0, r3
 8019fc2:	3718      	adds	r7, #24
 8019fc4:	46bd      	mov	sp, r7
 8019fc6:	bd80      	pop	{r7, pc}
 8019fc8:	08019db1 	.word	0x08019db1
 8019fcc:	08019e6d 	.word	0x08019e6d
 8019fd0:	08019f29 	.word	0x08019f29
 8019fd4:	080196b9 	.word	0x080196b9

08019fd8 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	b08c      	sub	sp, #48	; 0x30
 8019fdc:	af02      	add	r7, sp, #8
 8019fde:	60f8      	str	r0, [r7, #12]
 8019fe0:	60b9      	str	r1, [r7, #8]
 8019fe2:	603b      	str	r3, [r7, #0]
 8019fe4:	4613      	mov	r3, r2
 8019fe6:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 8019fe8:	68fb      	ldr	r3, [r7, #12]
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d106      	bne.n	8019ffc <mqtt_sub_unsub+0x24>
 8019fee:	4b5e      	ldr	r3, [pc, #376]	; (801a168 <mqtt_sub_unsub+0x190>)
 8019ff0:	f240 429f 	movw	r2, #1183	; 0x49f
 8019ff4:	495d      	ldr	r1, [pc, #372]	; (801a16c <mqtt_sub_unsub+0x194>)
 8019ff6:	485e      	ldr	r0, [pc, #376]	; (801a170 <mqtt_sub_unsub+0x198>)
 8019ff8:	f00c fe2e 	bl	8026c58 <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 8019ffc:	68bb      	ldr	r3, [r7, #8]
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d106      	bne.n	801a010 <mqtt_sub_unsub+0x38>
 801a002:	4b59      	ldr	r3, [pc, #356]	; (801a168 <mqtt_sub_unsub+0x190>)
 801a004:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 801a008:	495a      	ldr	r1, [pc, #360]	; (801a174 <mqtt_sub_unsub+0x19c>)
 801a00a:	4859      	ldr	r0, [pc, #356]	; (801a170 <mqtt_sub_unsub+0x198>)
 801a00c:	f00c fe24 	bl	8026c58 <iprintf>

  topic_strlen = strlen(topic);
 801a010:	68b8      	ldr	r0, [r7, #8]
 801a012:	f7e6 f8e7 	bl	80001e4 <strlen>
 801a016:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 801a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a01a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801a01e:	4293      	cmp	r3, r2
 801a020:	d909      	bls.n	801a036 <mqtt_sub_unsub+0x5e>
 801a022:	4b51      	ldr	r3, [pc, #324]	; (801a168 <mqtt_sub_unsub+0x190>)
 801a024:	f240 42a3 	movw	r2, #1187	; 0x4a3
 801a028:	4953      	ldr	r1, [pc, #332]	; (801a178 <mqtt_sub_unsub+0x1a0>)
 801a02a:	4851      	ldr	r0, [pc, #324]	; (801a170 <mqtt_sub_unsub+0x198>)
 801a02c:	f00c fe14 	bl	8026c58 <iprintf>
 801a030:	f06f 030f 	mvn.w	r3, #15
 801a034:	e093      	b.n	801a15e <mqtt_sub_unsub+0x186>
  topic_len = (u16_t)topic_strlen;
 801a036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a038:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 801a03a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a03c:	3304      	adds	r3, #4
 801a03e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 801a042:	2a00      	cmp	r2, #0
 801a044:	bf14      	ite	ne
 801a046:	2201      	movne	r2, #1
 801a048:	2200      	moveq	r2, #0
 801a04a:	b2d2      	uxtb	r2, r2
 801a04c:	4413      	add	r3, r2
 801a04e:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 801a050:	69fb      	ldr	r3, [r7, #28]
 801a052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a056:	d309      	bcc.n	801a06c <mqtt_sub_unsub+0x94>
 801a058:	4b43      	ldr	r3, [pc, #268]	; (801a168 <mqtt_sub_unsub+0x190>)
 801a05a:	f240 42a7 	movw	r2, #1191	; 0x4a7
 801a05e:	4947      	ldr	r1, [pc, #284]	; (801a17c <mqtt_sub_unsub+0x1a4>)
 801a060:	4843      	ldr	r0, [pc, #268]	; (801a170 <mqtt_sub_unsub+0x198>)
 801a062:	f00c fdf9 	bl	8026c58 <iprintf>
 801a066:	f06f 030f 	mvn.w	r3, #15
 801a06a:	e078      	b.n	801a15e <mqtt_sub_unsub+0x186>
  remaining_length = (u16_t)total_len;
 801a06c:	69fb      	ldr	r3, [r7, #28]
 801a06e:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 801a070:	79fb      	ldrb	r3, [r7, #7]
 801a072:	2b02      	cmp	r3, #2
 801a074:	d906      	bls.n	801a084 <mqtt_sub_unsub+0xac>
 801a076:	4b3c      	ldr	r3, [pc, #240]	; (801a168 <mqtt_sub_unsub+0x190>)
 801a078:	f240 42aa 	movw	r2, #1194	; 0x4aa
 801a07c:	4940      	ldr	r1, [pc, #256]	; (801a180 <mqtt_sub_unsub+0x1a8>)
 801a07e:	483c      	ldr	r0, [pc, #240]	; (801a170 <mqtt_sub_unsub+0x198>)
 801a080:	f00c fdea 	bl	8026c58 <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 801a084:	68fb      	ldr	r3, [r7, #12]
 801a086:	7a9b      	ldrb	r3, [r3, #10]
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d102      	bne.n	801a092 <mqtt_sub_unsub+0xba>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 801a08c:	f06f 030a 	mvn.w	r3, #10
 801a090:	e065      	b.n	801a15e <mqtt_sub_unsub+0x186>
  }

  pkt_id = msg_generate_packet_id(client);
 801a092:	68f8      	ldr	r0, [r7, #12]
 801a094:	f7fe fefa 	bl	8018e8c <msg_generate_packet_id>
 801a098:	4603      	mov	r3, r0
 801a09a:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 801a09c:	68fb      	ldr	r3, [r7, #12]
 801a09e:	f103 001c 	add.w	r0, r3, #28
 801a0a2:	8b3a      	ldrh	r2, [r7, #24]
 801a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0a6:	9300      	str	r3, [sp, #0]
 801a0a8:	683b      	ldr	r3, [r7, #0]
 801a0aa:	2104      	movs	r1, #4
 801a0ac:	f7ff f836 	bl	801911c <mqtt_create_request>
 801a0b0:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 801a0b2:	697b      	ldr	r3, [r7, #20]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d102      	bne.n	801a0be <mqtt_sub_unsub+0xe6>
    return ERR_MEM;
 801a0b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a0bc:	e04f      	b.n	801a15e <mqtt_sub_unsub+0x186>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	33ec      	adds	r3, #236	; 0xec
 801a0c2:	8b7a      	ldrh	r2, [r7, #26]
 801a0c4:	4611      	mov	r1, r2
 801a0c6:	4618      	mov	r0, r3
 801a0c8:	f7ff fa64 	bl	8019594 <mqtt_output_check_space>
 801a0cc:	4603      	mov	r3, r0
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d105      	bne.n	801a0de <mqtt_sub_unsub+0x106>
    mqtt_delete_request(r);
 801a0d2:	6978      	ldr	r0, [r7, #20]
 801a0d4:	f7ff f8b4 	bl	8019240 <mqtt_delete_request>
    return ERR_MEM;
 801a0d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a0dc:	e03f      	b.n	801a15e <mqtt_sub_unsub+0x186>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 801a0e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d001      	beq.n	801a0f0 <mqtt_sub_unsub+0x118>
 801a0ec:	2108      	movs	r1, #8
 801a0ee:	e000      	b.n	801a0f2 <mqtt_sub_unsub+0x11a>
 801a0f0:	210a      	movs	r1, #10
 801a0f2:	8b7b      	ldrh	r3, [r7, #26]
 801a0f4:	9301      	str	r3, [sp, #4]
 801a0f6:	2300      	movs	r3, #0
 801a0f8:	9300      	str	r3, [sp, #0]
 801a0fa:	2301      	movs	r3, #1
 801a0fc:	2200      	movs	r2, #0
 801a0fe:	f7ff f9fe 	bl	80194fe <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 801a102:	68fb      	ldr	r3, [r7, #12]
 801a104:	33ec      	adds	r3, #236	; 0xec
 801a106:	8b3a      	ldrh	r2, [r7, #24]
 801a108:	4611      	mov	r1, r2
 801a10a:	4618      	mov	r0, r3
 801a10c:	f7ff f9b3 	bl	8019476 <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 801a110:	68fb      	ldr	r3, [r7, #12]
 801a112:	33ec      	adds	r3, #236	; 0xec
 801a114:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a116:	68b9      	ldr	r1, [r7, #8]
 801a118:	4618      	mov	r0, r3
 801a11a:	f7ff f9c4 	bl	80194a6 <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 801a11e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801a122:	2b00      	cmp	r3, #0
 801a124:	d00b      	beq.n	801a13e <mqtt_sub_unsub+0x166>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 801a126:	68fb      	ldr	r3, [r7, #12]
 801a128:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 801a12c:	79fb      	ldrb	r3, [r7, #7]
 801a12e:	2b02      	cmp	r3, #2
 801a130:	bf28      	it	cs
 801a132:	2302      	movcs	r3, #2
 801a134:	b2db      	uxtb	r3, r3
 801a136:	4619      	mov	r1, r3
 801a138:	4610      	mov	r0, r2
 801a13a:	f7ff f98d 	bl	8019458 <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 801a13e:	68fb      	ldr	r3, [r7, #12]
 801a140:	3318      	adds	r3, #24
 801a142:	6979      	ldr	r1, [r7, #20]
 801a144:	4618      	mov	r0, r3
 801a146:	f7ff f82f 	bl	80191a8 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 801a14a:	68fb      	ldr	r3, [r7, #12]
 801a14c:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	68db      	ldr	r3, [r3, #12]
 801a154:	4619      	mov	r1, r3
 801a156:	4610      	mov	r0, r2
 801a158:	f7fe ff2c 	bl	8018fb4 <mqtt_output_send>
  return ERR_OK;
 801a15c:	2300      	movs	r3, #0
}
 801a15e:	4618      	mov	r0, r3
 801a160:	3728      	adds	r7, #40	; 0x28
 801a162:	46bd      	mov	sp, r7
 801a164:	bd80      	pop	{r7, pc}
 801a166:	bf00      	nop
 801a168:	0802ce54 	.word	0x0802ce54
 801a16c:	0802d204 	.word	0x0802d204
 801a170:	0802cecc 	.word	0x0802cecc
 801a174:	0802d224 	.word	0x0802d224
 801a178:	0802d244 	.word	0x0802d244
 801a17c:	0802d26c 	.word	0x0802d26c
 801a180:	0802d294 	.word	0x0802d294

0801a184 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 801a184:	b580      	push	{r7, lr}
 801a186:	b084      	sub	sp, #16
 801a188:	af00      	add	r7, sp, #0
 801a18a:	60f8      	str	r0, [r7, #12]
 801a18c:	60b9      	str	r1, [r7, #8]
 801a18e:	607a      	str	r2, [r7, #4]
 801a190:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 801a192:	68fb      	ldr	r3, [r7, #12]
 801a194:	2b00      	cmp	r3, #0
 801a196:	d106      	bne.n	801a1a6 <mqtt_set_inpub_callback+0x22>
 801a198:	4b09      	ldr	r3, [pc, #36]	; (801a1c0 <mqtt_set_inpub_callback+0x3c>)
 801a19a:	f240 42da 	movw	r2, #1242	; 0x4da
 801a19e:	4909      	ldr	r1, [pc, #36]	; (801a1c4 <mqtt_set_inpub_callback+0x40>)
 801a1a0:	4809      	ldr	r0, [pc, #36]	; (801a1c8 <mqtt_set_inpub_callback+0x44>)
 801a1a2:	f00c fd59 	bl	8026c58 <iprintf>
  client->data_cb = data_cb;
 801a1a6:	68fb      	ldr	r3, [r7, #12]
 801a1a8:	687a      	ldr	r2, [r7, #4]
 801a1aa:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	68ba      	ldr	r2, [r7, #8]
 801a1b0:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	683a      	ldr	r2, [r7, #0]
 801a1b6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801a1b8:	bf00      	nop
 801a1ba:	3710      	adds	r7, #16
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	bd80      	pop	{r7, pc}
 801a1c0:	0802ce54 	.word	0x0802ce54
 801a1c4:	0802d2ac 	.word	0x0802d2ac
 801a1c8:	0802cecc 	.word	0x0802cecc

0801a1cc <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 801a1cc:	b580      	push	{r7, lr}
 801a1ce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 801a1d0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 801a1d4:	2001      	movs	r0, #1
 801a1d6:	f001 f97d 	bl	801b4d4 <mem_calloc>
 801a1da:	4603      	mov	r3, r0
}
 801a1dc:	4618      	mov	r0, r3
 801a1de:	bd80      	pop	{r7, pc}

0801a1e0 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 801a1e0:	b580      	push	{r7, lr}
 801a1e2:	b08c      	sub	sp, #48	; 0x30
 801a1e4:	af02      	add	r7, sp, #8
 801a1e6:	60f8      	str	r0, [r7, #12]
 801a1e8:	60b9      	str	r1, [r7, #8]
 801a1ea:	603b      	str	r3, [r7, #0]
 801a1ec:	4613      	mov	r3, r2
 801a1ee:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 801a1f0:	230a      	movs	r3, #10
 801a1f2:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801a200:	2300      	movs	r3, #0
 801a202:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 801a206:	2300      	movs	r3, #0
 801a208:	83fb      	strh	r3, [r7, #30]
 801a20a:	2300      	movs	r3, #0
 801a20c:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 801a20e:	68fb      	ldr	r3, [r7, #12]
 801a210:	2b00      	cmp	r3, #0
 801a212:	d106      	bne.n	801a222 <mqtt_client_connect+0x42>
 801a214:	4bac      	ldr	r3, [pc, #688]	; (801a4c8 <mqtt_client_connect+0x2e8>)
 801a216:	f240 520f 	movw	r2, #1295	; 0x50f
 801a21a:	49ac      	ldr	r1, [pc, #688]	; (801a4cc <mqtt_client_connect+0x2ec>)
 801a21c:	48ac      	ldr	r0, [pc, #688]	; (801a4d0 <mqtt_client_connect+0x2f0>)
 801a21e:	f00c fd1b 	bl	8026c58 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 801a222:	68bb      	ldr	r3, [r7, #8]
 801a224:	2b00      	cmp	r3, #0
 801a226:	d106      	bne.n	801a236 <mqtt_client_connect+0x56>
 801a228:	4ba7      	ldr	r3, [pc, #668]	; (801a4c8 <mqtt_client_connect+0x2e8>)
 801a22a:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 801a22e:	49a9      	ldr	r1, [pc, #676]	; (801a4d4 <mqtt_client_connect+0x2f4>)
 801a230:	48a7      	ldr	r0, [pc, #668]	; (801a4d0 <mqtt_client_connect+0x2f0>)
 801a232:	f00c fd11 	bl	8026c58 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 801a236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d106      	bne.n	801a24a <mqtt_client_connect+0x6a>
 801a23c:	4ba2      	ldr	r3, [pc, #648]	; (801a4c8 <mqtt_client_connect+0x2e8>)
 801a23e:	f240 5211 	movw	r2, #1297	; 0x511
 801a242:	49a5      	ldr	r1, [pc, #660]	; (801a4d8 <mqtt_client_connect+0x2f8>)
 801a244:	48a2      	ldr	r0, [pc, #648]	; (801a4d0 <mqtt_client_connect+0x2f0>)
 801a246:	f00c fd07 	bl	8026c58 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 801a24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d106      	bne.n	801a260 <mqtt_client_connect+0x80>
 801a252:	4b9d      	ldr	r3, [pc, #628]	; (801a4c8 <mqtt_client_connect+0x2e8>)
 801a254:	f240 5212 	movw	r2, #1298	; 0x512
 801a258:	49a0      	ldr	r1, [pc, #640]	; (801a4dc <mqtt_client_connect+0x2fc>)
 801a25a:	489d      	ldr	r0, [pc, #628]	; (801a4d0 <mqtt_client_connect+0x2f0>)
 801a25c:	f00c fcfc 	bl	8026c58 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	7a9b      	ldrb	r3, [r3, #10]
 801a264:	2b00      	cmp	r3, #0
 801a266:	d002      	beq.n	801a26e <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 801a268:	f06f 0309 	mvn.w	r3, #9
 801a26c:	e221      	b.n	801a6b2 <mqtt_client_connect+0x4d2>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 801a26e:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 801a272:	2100      	movs	r1, #0
 801a274:	68f8      	ldr	r0, [r7, #12]
 801a276:	f00c f9bf 	bl	80265f8 <memset>
  client->connect_arg = arg;
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a27e:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 801a280:	68fb      	ldr	r3, [r7, #12]
 801a282:	683a      	ldr	r2, [r7, #0]
 801a284:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 801a286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a288:	899a      	ldrh	r2, [r3, #12]
 801a28a:	68fb      	ldr	r3, [r7, #12]
 801a28c:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	331c      	adds	r3, #28
 801a292:	2104      	movs	r1, #4
 801a294:	4618      	mov	r0, r3
 801a296:	f7ff f8b1 	bl	80193fc <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 801a29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a29c:	691b      	ldr	r3, [r3, #16]
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d073      	beq.n	801a38a <mqtt_client_connect+0x1aa>
 801a2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2a4:	695b      	ldr	r3, [r3, #20]
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d06f      	beq.n	801a38a <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 801a2aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a2ae:	f043 0304 	orr.w	r3, r3, #4
 801a2b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 801a2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2b8:	7e1b      	ldrb	r3, [r3, #24]
 801a2ba:	00db      	lsls	r3, r3, #3
 801a2bc:	b25b      	sxtb	r3, r3
 801a2be:	f003 0318 	and.w	r3, r3, #24
 801a2c2:	b25a      	sxtb	r2, r3
 801a2c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801a2c8:	4313      	orrs	r3, r2
 801a2ca:	b25b      	sxtb	r3, r3
 801a2cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 801a2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2d2:	7e5b      	ldrb	r3, [r3, #25]
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d005      	beq.n	801a2e4 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 801a2d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a2dc:	f043 0320 	orr.w	r3, r3, #32
 801a2e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 801a2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2e6:	691b      	ldr	r3, [r3, #16]
 801a2e8:	4618      	mov	r0, r3
 801a2ea:	f7e5 ff7b 	bl	80001e4 <strlen>
 801a2ee:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 801a2f0:	69bb      	ldr	r3, [r7, #24]
 801a2f2:	2bff      	cmp	r3, #255	; 0xff
 801a2f4:	d909      	bls.n	801a30a <mqtt_client_connect+0x12a>
 801a2f6:	4b74      	ldr	r3, [pc, #464]	; (801a4c8 <mqtt_client_connect+0x2e8>)
 801a2f8:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 801a2fc:	4978      	ldr	r1, [pc, #480]	; (801a4e0 <mqtt_client_connect+0x300>)
 801a2fe:	4874      	ldr	r0, [pc, #464]	; (801a4d0 <mqtt_client_connect+0x2f0>)
 801a300:	f00c fcaa 	bl	8026c58 <iprintf>
 801a304:	f06f 0305 	mvn.w	r3, #5
 801a308:	e1d3      	b.n	801a6b2 <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 801a30a:	69bb      	ldr	r3, [r7, #24]
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d109      	bne.n	801a324 <mqtt_client_connect+0x144>
 801a310:	4b6d      	ldr	r3, [pc, #436]	; (801a4c8 <mqtt_client_connect+0x2e8>)
 801a312:	f240 5229 	movw	r2, #1321	; 0x529
 801a316:	4973      	ldr	r1, [pc, #460]	; (801a4e4 <mqtt_client_connect+0x304>)
 801a318:	486d      	ldr	r0, [pc, #436]	; (801a4d0 <mqtt_client_connect+0x2f0>)
 801a31a:	f00c fc9d 	bl	8026c58 <iprintf>
 801a31e:	f06f 0305 	mvn.w	r3, #5
 801a322:	e1c6      	b.n	801a6b2 <mqtt_client_connect+0x4d2>
    will_topic_len = (u8_t)len;
 801a324:	69bb      	ldr	r3, [r7, #24]
 801a326:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 801a32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a32c:	695b      	ldr	r3, [r3, #20]
 801a32e:	4618      	mov	r0, r3
 801a330:	f7e5 ff58 	bl	80001e4 <strlen>
 801a334:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 801a336:	69bb      	ldr	r3, [r7, #24]
 801a338:	2bff      	cmp	r3, #255	; 0xff
 801a33a:	d909      	bls.n	801a350 <mqtt_client_connect+0x170>
 801a33c:	4b62      	ldr	r3, [pc, #392]	; (801a4c8 <mqtt_client_connect+0x2e8>)
 801a33e:	f240 522c 	movw	r2, #1324	; 0x52c
 801a342:	4969      	ldr	r1, [pc, #420]	; (801a4e8 <mqtt_client_connect+0x308>)
 801a344:	4862      	ldr	r0, [pc, #392]	; (801a4d0 <mqtt_client_connect+0x2f0>)
 801a346:	f00c fc87 	bl	8026c58 <iprintf>
 801a34a:	f06f 0305 	mvn.w	r3, #5
 801a34e:	e1b0      	b.n	801a6b2 <mqtt_client_connect+0x4d2>
    will_msg_len = (u8_t)len;
 801a350:	69bb      	ldr	r3, [r7, #24]
 801a352:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 801a356:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a358:	1c9a      	adds	r2, r3, #2
 801a35a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a35e:	4413      	add	r3, r2
 801a360:	1c9a      	adds	r2, r3, #2
 801a362:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801a366:	4413      	add	r3, r2
 801a368:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 801a36a:	69bb      	ldr	r3, [r7, #24]
 801a36c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a370:	d309      	bcc.n	801a386 <mqtt_client_connect+0x1a6>
 801a372:	4b55      	ldr	r3, [pc, #340]	; (801a4c8 <mqtt_client_connect+0x2e8>)
 801a374:	f240 522f 	movw	r2, #1327	; 0x52f
 801a378:	495c      	ldr	r1, [pc, #368]	; (801a4ec <mqtt_client_connect+0x30c>)
 801a37a:	4855      	ldr	r0, [pc, #340]	; (801a4d0 <mqtt_client_connect+0x2f0>)
 801a37c:	f00c fc6c 	bl	8026c58 <iprintf>
 801a380:	f06f 0305 	mvn.w	r3, #5
 801a384:	e195      	b.n	801a6b2 <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 801a386:	69bb      	ldr	r3, [r7, #24]
 801a388:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 801a38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a38c:	685b      	ldr	r3, [r3, #4]
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d03d      	beq.n	801a40e <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 801a392:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a396:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a39a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 801a39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3a0:	685b      	ldr	r3, [r3, #4]
 801a3a2:	4618      	mov	r0, r3
 801a3a4:	f7e5 ff1e 	bl	80001e4 <strlen>
 801a3a8:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 801a3aa:	69bb      	ldr	r3, [r7, #24]
 801a3ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a3b0:	d309      	bcc.n	801a3c6 <mqtt_client_connect+0x1e6>
 801a3b2:	4b45      	ldr	r3, [pc, #276]	; (801a4c8 <mqtt_client_connect+0x2e8>)
 801a3b4:	f240 5235 	movw	r2, #1333	; 0x535
 801a3b8:	494d      	ldr	r1, [pc, #308]	; (801a4f0 <mqtt_client_connect+0x310>)
 801a3ba:	4845      	ldr	r0, [pc, #276]	; (801a4d0 <mqtt_client_connect+0x2f0>)
 801a3bc:	f00c fc4c 	bl	8026c58 <iprintf>
 801a3c0:	f06f 0305 	mvn.w	r3, #5
 801a3c4:	e175      	b.n	801a6b2 <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 801a3c6:	69bb      	ldr	r3, [r7, #24]
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d109      	bne.n	801a3e0 <mqtt_client_connect+0x200>
 801a3cc:	4b3e      	ldr	r3, [pc, #248]	; (801a4c8 <mqtt_client_connect+0x2e8>)
 801a3ce:	f240 5236 	movw	r2, #1334	; 0x536
 801a3d2:	4948      	ldr	r1, [pc, #288]	; (801a4f4 <mqtt_client_connect+0x314>)
 801a3d4:	483e      	ldr	r0, [pc, #248]	; (801a4d0 <mqtt_client_connect+0x2f0>)
 801a3d6:	f00c fc3f 	bl	8026c58 <iprintf>
 801a3da:	f06f 0305 	mvn.w	r3, #5
 801a3de:	e168      	b.n	801a6b2 <mqtt_client_connect+0x4d2>
    client_user_len = (u16_t)len;
 801a3e0:	69bb      	ldr	r3, [r7, #24]
 801a3e2:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 801a3e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a3e6:	1c9a      	adds	r2, r3, #2
 801a3e8:	8bfb      	ldrh	r3, [r7, #30]
 801a3ea:	4413      	add	r3, r2
 801a3ec:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 801a3ee:	69bb      	ldr	r3, [r7, #24]
 801a3f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a3f4:	d309      	bcc.n	801a40a <mqtt_client_connect+0x22a>
 801a3f6:	4b34      	ldr	r3, [pc, #208]	; (801a4c8 <mqtt_client_connect+0x2e8>)
 801a3f8:	f240 5239 	movw	r2, #1337	; 0x539
 801a3fc:	493b      	ldr	r1, [pc, #236]	; (801a4ec <mqtt_client_connect+0x30c>)
 801a3fe:	4834      	ldr	r0, [pc, #208]	; (801a4d0 <mqtt_client_connect+0x2f0>)
 801a400:	f00c fc2a 	bl	8026c58 <iprintf>
 801a404:	f06f 0305 	mvn.w	r3, #5
 801a408:	e153      	b.n	801a6b2 <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 801a40a:	69bb      	ldr	r3, [r7, #24]
 801a40c:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 801a40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a410:	689b      	ldr	r3, [r3, #8]
 801a412:	2b00      	cmp	r3, #0
 801a414:	d03d      	beq.n	801a492 <mqtt_client_connect+0x2b2>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 801a416:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a41a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a41e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 801a422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a424:	689b      	ldr	r3, [r3, #8]
 801a426:	4618      	mov	r0, r3
 801a428:	f7e5 fedc 	bl	80001e4 <strlen>
 801a42c:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 801a42e:	69bb      	ldr	r3, [r7, #24]
 801a430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a434:	d309      	bcc.n	801a44a <mqtt_client_connect+0x26a>
 801a436:	4b24      	ldr	r3, [pc, #144]	; (801a4c8 <mqtt_client_connect+0x2e8>)
 801a438:	f240 523f 	movw	r2, #1343	; 0x53f
 801a43c:	492e      	ldr	r1, [pc, #184]	; (801a4f8 <mqtt_client_connect+0x318>)
 801a43e:	4824      	ldr	r0, [pc, #144]	; (801a4d0 <mqtt_client_connect+0x2f0>)
 801a440:	f00c fc0a 	bl	8026c58 <iprintf>
 801a444:	f06f 0305 	mvn.w	r3, #5
 801a448:	e133      	b.n	801a6b2 <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 801a44a:	69bb      	ldr	r3, [r7, #24]
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d109      	bne.n	801a464 <mqtt_client_connect+0x284>
 801a450:	4b1d      	ldr	r3, [pc, #116]	; (801a4c8 <mqtt_client_connect+0x2e8>)
 801a452:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 801a456:	4929      	ldr	r1, [pc, #164]	; (801a4fc <mqtt_client_connect+0x31c>)
 801a458:	481d      	ldr	r0, [pc, #116]	; (801a4d0 <mqtt_client_connect+0x2f0>)
 801a45a:	f00c fbfd 	bl	8026c58 <iprintf>
 801a45e:	f06f 0305 	mvn.w	r3, #5
 801a462:	e126      	b.n	801a6b2 <mqtt_client_connect+0x4d2>
    client_pass_len = (u16_t)len;
 801a464:	69bb      	ldr	r3, [r7, #24]
 801a466:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 801a468:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a46a:	1c9a      	adds	r2, r3, #2
 801a46c:	8bbb      	ldrh	r3, [r7, #28]
 801a46e:	4413      	add	r3, r2
 801a470:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 801a472:	69bb      	ldr	r3, [r7, #24]
 801a474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a478:	d309      	bcc.n	801a48e <mqtt_client_connect+0x2ae>
 801a47a:	4b13      	ldr	r3, [pc, #76]	; (801a4c8 <mqtt_client_connect+0x2e8>)
 801a47c:	f240 5243 	movw	r2, #1347	; 0x543
 801a480:	491a      	ldr	r1, [pc, #104]	; (801a4ec <mqtt_client_connect+0x30c>)
 801a482:	4813      	ldr	r0, [pc, #76]	; (801a4d0 <mqtt_client_connect+0x2f0>)
 801a484:	f00c fbe8 	bl	8026c58 <iprintf>
 801a488:	f06f 0305 	mvn.w	r3, #5
 801a48c:	e111      	b.n	801a6b2 <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 801a48e:	69bb      	ldr	r3, [r7, #24]
 801a490:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 801a492:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a496:	f043 0302 	orr.w	r3, r3, #2
 801a49a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 801a49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	f7e5 fe9e 	bl	80001e4 <strlen>
 801a4a8:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 801a4aa:	69bb      	ldr	r3, [r7, #24]
 801a4ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a4b0:	d328      	bcc.n	801a504 <mqtt_client_connect+0x324>
 801a4b2:	4b05      	ldr	r3, [pc, #20]	; (801a4c8 <mqtt_client_connect+0x2e8>)
 801a4b4:	f240 524b 	movw	r2, #1355	; 0x54b
 801a4b8:	4911      	ldr	r1, [pc, #68]	; (801a500 <mqtt_client_connect+0x320>)
 801a4ba:	4805      	ldr	r0, [pc, #20]	; (801a4d0 <mqtt_client_connect+0x2f0>)
 801a4bc:	f00c fbcc 	bl	8026c58 <iprintf>
 801a4c0:	f06f 0305 	mvn.w	r3, #5
 801a4c4:	e0f5      	b.n	801a6b2 <mqtt_client_connect+0x4d2>
 801a4c6:	bf00      	nop
 801a4c8:	0802ce54 	.word	0x0802ce54
 801a4cc:	0802d2d4 	.word	0x0802d2d4
 801a4d0:	0802cecc 	.word	0x0802cecc
 801a4d4:	0802d2f8 	.word	0x0802d2f8
 801a4d8:	0802d320 	.word	0x0802d320
 801a4dc:	0802d34c 	.word	0x0802d34c
 801a4e0:	0802d380 	.word	0x0802d380
 801a4e4:	0802d3c0 	.word	0x0802d3c0
 801a4e8:	0802d400 	.word	0x0802d400
 801a4ec:	0802d43c 	.word	0x0802d43c
 801a4f0:	0802d46c 	.word	0x0802d46c
 801a4f4:	0802d4ac 	.word	0x0802d4ac
 801a4f8:	0802d4f0 	.word	0x0802d4f0
 801a4fc:	0802d530 	.word	0x0802d530
 801a500:	0802d574 	.word	0x0802d574
  client_id_length = (u16_t)len;
 801a504:	69bb      	ldr	r3, [r7, #24]
 801a506:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 801a508:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a50a:	1c9a      	adds	r2, r3, #2
 801a50c:	8afb      	ldrh	r3, [r7, #22]
 801a50e:	4413      	add	r3, r2
 801a510:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 801a512:	69bb      	ldr	r3, [r7, #24]
 801a514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a518:	d309      	bcc.n	801a52e <mqtt_client_connect+0x34e>
 801a51a:	4b68      	ldr	r3, [pc, #416]	; (801a6bc <mqtt_client_connect+0x4dc>)
 801a51c:	f240 524e 	movw	r2, #1358	; 0x54e
 801a520:	4967      	ldr	r1, [pc, #412]	; (801a6c0 <mqtt_client_connect+0x4e0>)
 801a522:	4868      	ldr	r0, [pc, #416]	; (801a6c4 <mqtt_client_connect+0x4e4>)
 801a524:	f00c fb98 	bl	8026c58 <iprintf>
 801a528:	f06f 0305 	mvn.w	r3, #5
 801a52c:	e0c1      	b.n	801a6b2 <mqtt_client_connect+0x4d2>
  remaining_length = (u16_t)len;
 801a52e:	69bb      	ldr	r3, [r7, #24]
 801a530:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	33ec      	adds	r3, #236	; 0xec
 801a536:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a538:	4611      	mov	r1, r2
 801a53a:	4618      	mov	r0, r3
 801a53c:	f7ff f82a 	bl	8019594 <mqtt_output_check_space>
 801a540:	4603      	mov	r3, r0
 801a542:	2b00      	cmp	r3, #0
 801a544:	d102      	bne.n	801a54c <mqtt_client_connect+0x36c>
    return ERR_MEM;
 801a546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a54a:	e0b2      	b.n	801a6b2 <mqtt_client_connect+0x4d2>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 801a54c:	2000      	movs	r0, #0
 801a54e:	f003 ff2b 	bl	801e3a8 <tcp_new_ip_type>
 801a552:	4602      	mov	r2, r0
 801a554:	68fb      	ldr	r3, [r7, #12]
 801a556:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 801a558:	68fb      	ldr	r3, [r7, #12]
 801a55a:	68db      	ldr	r3, [r3, #12]
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	d102      	bne.n	801a566 <mqtt_client_connect+0x386>
    return ERR_MEM;
 801a560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a564:	e0a5      	b.n	801a6b2 <mqtt_client_connect+0x4d2>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	68db      	ldr	r3, [r3, #12]
 801a56a:	68f9      	ldr	r1, [r7, #12]
 801a56c:	4618      	mov	r0, r3
 801a56e:	f003 ff29 	bl	801e3c4 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 801a572:	68fb      	ldr	r3, [r7, #12]
 801a574:	68db      	ldr	r3, [r3, #12]
 801a576:	2200      	movs	r2, #0
 801a578:	4953      	ldr	r1, [pc, #332]	; (801a6c8 <mqtt_client_connect+0x4e8>)
 801a57a:	4618      	mov	r0, r3
 801a57c:	f002 fd58 	bl	801d030 <tcp_bind>
 801a580:	4603      	mov	r3, r0
 801a582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 801a586:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	f040 8084 	bne.w	801a698 <mqtt_client_connect+0x4b8>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 801a590:	68fb      	ldr	r3, [r7, #12]
 801a592:	68d8      	ldr	r0, [r3, #12]
 801a594:	88fa      	ldrh	r2, [r7, #6]
 801a596:	4b4d      	ldr	r3, [pc, #308]	; (801a6cc <mqtt_client_connect+0x4ec>)
 801a598:	68b9      	ldr	r1, [r7, #8]
 801a59a:	f002 ffad 	bl	801d4f8 <tcp_connect>
 801a59e:	4603      	mov	r3, r0
 801a5a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 801a5a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d177      	bne.n	801a69c <mqtt_client_connect+0x4bc>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 801a5ac:	68fb      	ldr	r3, [r7, #12]
 801a5ae:	68db      	ldr	r3, [r3, #12]
 801a5b0:	4947      	ldr	r1, [pc, #284]	; (801a6d0 <mqtt_client_connect+0x4f0>)
 801a5b2:	4618      	mov	r0, r3
 801a5b4:	f003 ff5c 	bl	801e470 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 801a5b8:	68fb      	ldr	r3, [r7, #12]
 801a5ba:	2201      	movs	r2, #1
 801a5bc:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 801a5be:	68fb      	ldr	r3, [r7, #12]
 801a5c0:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 801a5c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a5c6:	9301      	str	r3, [sp, #4]
 801a5c8:	2300      	movs	r3, #0
 801a5ca:	9300      	str	r3, [sp, #0]
 801a5cc:	2300      	movs	r3, #0
 801a5ce:	2200      	movs	r2, #0
 801a5d0:	2101      	movs	r1, #1
 801a5d2:	f7fe ff94 	bl	80194fe <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 801a5d6:	68fb      	ldr	r3, [r7, #12]
 801a5d8:	33ec      	adds	r3, #236	; 0xec
 801a5da:	2204      	movs	r2, #4
 801a5dc:	493d      	ldr	r1, [pc, #244]	; (801a6d4 <mqtt_client_connect+0x4f4>)
 801a5de:	4618      	mov	r0, r3
 801a5e0:	f7fe ff61 	bl	80194a6 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 801a5e4:	68fb      	ldr	r3, [r7, #12]
 801a5e6:	33ec      	adds	r3, #236	; 0xec
 801a5e8:	2104      	movs	r1, #4
 801a5ea:	4618      	mov	r0, r3
 801a5ec:	f7fe ff34 	bl	8019458 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 801a5f0:	68fb      	ldr	r3, [r7, #12]
 801a5f2:	33ec      	adds	r3, #236	; 0xec
 801a5f4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 801a5f8:	4611      	mov	r1, r2
 801a5fa:	4618      	mov	r0, r3
 801a5fc:	f7fe ff2c 	bl	8019458 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 801a600:	68fb      	ldr	r3, [r7, #12]
 801a602:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 801a606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a608:	899b      	ldrh	r3, [r3, #12]
 801a60a:	4619      	mov	r1, r3
 801a60c:	4610      	mov	r0, r2
 801a60e:	f7fe ff32 	bl	8019476 <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 801a618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	8afa      	ldrh	r2, [r7, #22]
 801a61e:	4619      	mov	r1, r3
 801a620:	f7fe ff41 	bl	80194a6 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 801a624:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a628:	f003 0304 	and.w	r3, r3, #4
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	d015      	beq.n	801a65c <mqtt_client_connect+0x47c>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 801a630:	68fb      	ldr	r3, [r7, #12]
 801a632:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 801a636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a638:	691b      	ldr	r3, [r3, #16]
 801a63a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a63e:	b292      	uxth	r2, r2
 801a640:	4619      	mov	r1, r3
 801a642:	f7fe ff30 	bl	80194a6 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 801a646:	68fb      	ldr	r3, [r7, #12]
 801a648:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 801a64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a64e:	695b      	ldr	r3, [r3, #20]
 801a650:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801a654:	b292      	uxth	r2, r2
 801a656:	4619      	mov	r1, r3
 801a658:	f7fe ff25 	bl	80194a6 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 801a65c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801a660:	2b00      	cmp	r3, #0
 801a662:	da08      	bge.n	801a676 <mqtt_client_connect+0x496>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 801a664:	68fb      	ldr	r3, [r7, #12]
 801a666:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 801a66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a66c:	685b      	ldr	r3, [r3, #4]
 801a66e:	8bfa      	ldrh	r2, [r7, #30]
 801a670:	4619      	mov	r1, r3
 801a672:	f7fe ff18 	bl	80194a6 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 801a676:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a67a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d008      	beq.n	801a694 <mqtt_client_connect+0x4b4>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 801a682:	68fb      	ldr	r3, [r7, #12]
 801a684:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 801a688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a68a:	689b      	ldr	r3, [r3, #8]
 801a68c:	8bba      	ldrh	r2, [r7, #28]
 801a68e:	4619      	mov	r1, r3
 801a690:	f7fe ff09 	bl	80194a6 <mqtt_output_append_string>
  }
  return ERR_OK;
 801a694:	2300      	movs	r3, #0
 801a696:	e00c      	b.n	801a6b2 <mqtt_client_connect+0x4d2>
    goto tcp_fail;
 801a698:	bf00      	nop
 801a69a:	e000      	b.n	801a69e <mqtt_client_connect+0x4be>
    goto tcp_fail;
 801a69c:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	68db      	ldr	r3, [r3, #12]
 801a6a2:	4618      	mov	r0, r3
 801a6a4:	f002 fcb8 	bl	801d018 <tcp_abort>
  client->conn = NULL;
 801a6a8:	68fb      	ldr	r3, [r7, #12]
 801a6aa:	2200      	movs	r2, #0
 801a6ac:	60da      	str	r2, [r3, #12]
  return err;
 801a6ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801a6b2:	4618      	mov	r0, r3
 801a6b4:	3728      	adds	r7, #40	; 0x28
 801a6b6:	46bd      	mov	sp, r7
 801a6b8:	bd80      	pop	{r7, pc}
 801a6ba:	bf00      	nop
 801a6bc:	0802ce54 	.word	0x0802ce54
 801a6c0:	0802d43c 	.word	0x0802d43c
 801a6c4:	0802cecc 	.word	0x0802cecc
 801a6c8:	080608e4 	.word	0x080608e4
 801a6cc:	08019f55 	.word	0x08019f55
 801a6d0:	08019ee1 	.word	0x08019ee1
 801a6d4:	0802d5b0 	.word	0x0802d5b0

0801a6d8 <sntp_process>:
/**
 * SNTP processing of received timestamp
 */
static void
sntp_process(const struct sntp_timestamps *timestamps)
{
 801a6d8:	b580      	push	{r7, lr}
 801a6da:	b084      	sub	sp, #16
 801a6dc:	af00      	add	r7, sp, #0
 801a6de:	6078      	str	r0, [r7, #4]
  s32_t sec;
  u32_t frac;

  sec  = (s32_t)lwip_ntohl(timestamps->xmit.sec);
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	681b      	ldr	r3, [r3, #0]
 801a6e4:	4618      	mov	r0, r3
 801a6e6:	f000 fa66 	bl	801abb6 <lwip_htonl>
 801a6ea:	4603      	mov	r3, r0
 801a6ec:	60fb      	str	r3, [r7, #12]
  frac = lwip_ntohl(timestamps->xmit.frac);
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	685b      	ldr	r3, [r3, #4]
 801a6f2:	4618      	mov	r0, r3
 801a6f4:	f000 fa5f 	bl	801abb6 <lwip_htonl>
 801a6f8:	60b8      	str	r0, [r7, #8]
      frac = (u32_t)((u64_t)t4);
    }
  }
#endif /* SNTP_COMP_ROUNDTRIP */

  SNTP_SET_SYSTEM_TIME_NTP(sec, frac);
 801a6fa:	68fa      	ldr	r2, [r7, #12]
 801a6fc:	4b04      	ldr	r3, [pc, #16]	; (801a710 <sntp_process+0x38>)
 801a6fe:	4413      	add	r3, r2
 801a700:	4618      	mov	r0, r3
 801a702:	f7ea fa77 	bl	8004bf4 <sntp_set_time>
  LWIP_UNUSED_ARG(frac); /* might be unused if only seconds are set */
  LWIP_DEBUGF(SNTP_DEBUG_TRACE, ("sntp_process: %s, %" U32_F " us\n",
                                 sntp_format_time(sec), SNTP_FRAC_TO_US(frac)));
}
 801a706:	bf00      	nop
 801a708:	3710      	adds	r7, #16
 801a70a:	46bd      	mov	sp, r7
 801a70c:	bd80      	pop	{r7, pc}
 801a70e:	bf00      	nop
 801a710:	7c558180 	.word	0x7c558180

0801a714 <sntp_initialize_request>:
/**
 * Initialize request struct to be sent to server.
 */
static void
sntp_initialize_request(struct sntp_msg *req)
{
 801a714:	b580      	push	{r7, lr}
 801a716:	b082      	sub	sp, #8
 801a718:	af00      	add	r7, sp, #0
 801a71a:	6078      	str	r0, [r7, #4]
  memset(req, 0, SNTP_MSG_LEN);
 801a71c:	2230      	movs	r2, #48	; 0x30
 801a71e:	2100      	movs	r1, #0
 801a720:	6878      	ldr	r0, [r7, #4]
 801a722:	f00b ff69 	bl	80265f8 <memset>
  req->li_vn_mode = SNTP_LI_NO_WARNING | SNTP_VERSION | SNTP_MODE_CLIENT;
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	2223      	movs	r2, #35	; 0x23
 801a72a:	701a      	strb	r2, [r3, #0]
# endif
    req->transmit_timestamp[0] = sec;
    req->transmit_timestamp[1] = frac;
  }
#endif /* SNTP_CHECK_RESPONSE >= 2 || SNTP_COMP_ROUNDTRIP */
}
 801a72c:	bf00      	nop
 801a72e:	3708      	adds	r7, #8
 801a730:	46bd      	mov	sp, r7
 801a732:	bd80      	pop	{r7, pc}

0801a734 <sntp_retry>:
 *
 * @param arg is unused (only necessary to conform to sys_timeout)
 */
static void
sntp_retry(void *arg)
{
 801a734:	b580      	push	{r7, lr}
 801a736:	b084      	sub	sp, #16
 801a738:	af00      	add	r7, sp, #0
 801a73a:	6078      	str	r0, [r7, #4]

  LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_retry: Next request will be sent in %"U32_F" ms\n",
                                 sntp_retry_timeout));

  /* set up a timer to send a retry and increase the retry delay */
  sys_timeout(sntp_retry_timeout, sntp_request, NULL);
 801a73c:	4b0d      	ldr	r3, [pc, #52]	; (801a774 <sntp_retry+0x40>)
 801a73e:	681b      	ldr	r3, [r3, #0]
 801a740:	2200      	movs	r2, #0
 801a742:	490d      	ldr	r1, [pc, #52]	; (801a778 <sntp_retry+0x44>)
 801a744:	4618      	mov	r0, r3
 801a746:	f008 fbbd 	bl	8022ec4 <sys_timeout>

#if SNTP_RETRY_TIMEOUT_EXP
  {
    u32_t new_retry_timeout;
    /* increase the timeout for next retry */
    new_retry_timeout = sntp_retry_timeout << 1;
 801a74a:	4b0a      	ldr	r3, [pc, #40]	; (801a774 <sntp_retry+0x40>)
 801a74c:	681b      	ldr	r3, [r3, #0]
 801a74e:	005b      	lsls	r3, r3, #1
 801a750:	60fb      	str	r3, [r7, #12]
    /* limit to maximum timeout and prevent overflow */
    if ((new_retry_timeout <= SNTP_RETRY_TIMEOUT_MAX) &&
 801a752:	68fb      	ldr	r3, [r7, #12]
 801a754:	4a09      	ldr	r2, [pc, #36]	; (801a77c <sntp_retry+0x48>)
 801a756:	4293      	cmp	r3, r2
 801a758:	d807      	bhi.n	801a76a <sntp_retry+0x36>
        (new_retry_timeout > sntp_retry_timeout)) {
 801a75a:	4b06      	ldr	r3, [pc, #24]	; (801a774 <sntp_retry+0x40>)
 801a75c:	681b      	ldr	r3, [r3, #0]
    if ((new_retry_timeout <= SNTP_RETRY_TIMEOUT_MAX) &&
 801a75e:	68fa      	ldr	r2, [r7, #12]
 801a760:	429a      	cmp	r2, r3
 801a762:	d902      	bls.n	801a76a <sntp_retry+0x36>
      sntp_retry_timeout = new_retry_timeout;
 801a764:	4a03      	ldr	r2, [pc, #12]	; (801a774 <sntp_retry+0x40>)
 801a766:	68fb      	ldr	r3, [r7, #12]
 801a768:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* SNTP_RETRY_TIMEOUT_EXP */
}
 801a76a:	bf00      	nop
 801a76c:	3710      	adds	r7, #16
 801a76e:	46bd      	mov	sp, r7
 801a770:	bd80      	pop	{r7, pc}
 801a772:	bf00      	nop
 801a774:	200059dc 	.word	0x200059dc
 801a778:	0801a9c5 	.word	0x0801a9c5
 801a77c:	000249f0 	.word	0x000249f0

0801a780 <sntp_try_next_server>:
 *
 * @param arg is unused (only necessary to conform to sys_timeout)
 */
static void
sntp_try_next_server(void *arg)
{
 801a780:	b580      	push	{r7, lr}
 801a782:	b084      	sub	sp, #16
 801a784:	af00      	add	r7, sp, #0
 801a786:	6078      	str	r0, [r7, #4]
  u8_t old_server, i;
  LWIP_UNUSED_ARG(arg);

  old_server = sntp_current_server;
 801a788:	4b18      	ldr	r3, [pc, #96]	; (801a7ec <sntp_try_next_server+0x6c>)
 801a78a:	781b      	ldrb	r3, [r3, #0]
 801a78c:	73bb      	strb	r3, [r7, #14]
  for (i = 0; i < SNTP_MAX_SERVERS - 1; i++) {
 801a78e:	2300      	movs	r3, #0
 801a790:	73fb      	strb	r3, [r7, #15]
 801a792:	e01f      	b.n	801a7d4 <sntp_try_next_server+0x54>
    sntp_current_server++;
 801a794:	4b15      	ldr	r3, [pc, #84]	; (801a7ec <sntp_try_next_server+0x6c>)
 801a796:	781b      	ldrb	r3, [r3, #0]
 801a798:	3301      	adds	r3, #1
 801a79a:	b2da      	uxtb	r2, r3
 801a79c:	4b13      	ldr	r3, [pc, #76]	; (801a7ec <sntp_try_next_server+0x6c>)
 801a79e:	701a      	strb	r2, [r3, #0]
    if (sntp_current_server >= SNTP_MAX_SERVERS) {
 801a7a0:	4b12      	ldr	r3, [pc, #72]	; (801a7ec <sntp_try_next_server+0x6c>)
 801a7a2:	781b      	ldrb	r3, [r3, #0]
 801a7a4:	2b0a      	cmp	r3, #10
 801a7a6:	d902      	bls.n	801a7ae <sntp_try_next_server+0x2e>
      sntp_current_server = 0;
 801a7a8:	4b10      	ldr	r3, [pc, #64]	; (801a7ec <sntp_try_next_server+0x6c>)
 801a7aa:	2200      	movs	r2, #0
 801a7ac:	701a      	strb	r2, [r3, #0]
    }
    if (!ip_addr_isany(&sntp_servers[sntp_current_server].addr)
 801a7ae:	4b0f      	ldr	r3, [pc, #60]	; (801a7ec <sntp_try_next_server+0x6c>)
 801a7b0:	781b      	ldrb	r3, [r3, #0]
 801a7b2:	461a      	mov	r2, r3
 801a7b4:	4b0e      	ldr	r3, [pc, #56]	; (801a7f0 <sntp_try_next_server+0x70>)
 801a7b6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d007      	beq.n	801a7ce <sntp_try_next_server+0x4e>
#endif
       ) {
      LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_try_next_server: Sending request to server %"U16_F"\n",
                                     (u16_t)sntp_current_server));
      /* new server: reset retry timeout */
      SNTP_RESET_RETRY_TIMEOUT();
 801a7be:	4b0d      	ldr	r3, [pc, #52]	; (801a7f4 <sntp_try_next_server+0x74>)
 801a7c0:	f643 2298 	movw	r2, #15000	; 0x3a98
 801a7c4:	601a      	str	r2, [r3, #0]
      /* instantly send a request to the next server */
      sntp_request(NULL);
 801a7c6:	2000      	movs	r0, #0
 801a7c8:	f000 f8fc 	bl	801a9c4 <sntp_request>
      return;
 801a7cc:	e00b      	b.n	801a7e6 <sntp_try_next_server+0x66>
  for (i = 0; i < SNTP_MAX_SERVERS - 1; i++) {
 801a7ce:	7bfb      	ldrb	r3, [r7, #15]
 801a7d0:	3301      	adds	r3, #1
 801a7d2:	73fb      	strb	r3, [r7, #15]
 801a7d4:	7bfb      	ldrb	r3, [r7, #15]
 801a7d6:	2b09      	cmp	r3, #9
 801a7d8:	d9dc      	bls.n	801a794 <sntp_try_next_server+0x14>
    }
  }
  /* no other valid server found */
  sntp_current_server = old_server;
 801a7da:	4a04      	ldr	r2, [pc, #16]	; (801a7ec <sntp_try_next_server+0x6c>)
 801a7dc:	7bbb      	ldrb	r3, [r7, #14]
 801a7de:	7013      	strb	r3, [r2, #0]
  sntp_retry(NULL);
 801a7e0:	2000      	movs	r0, #0
 801a7e2:	f7ff ffa7 	bl	801a734 <sntp_retry>
}
 801a7e6:	3710      	adds	r7, #16
 801a7e8:	46bd      	mov	sp, r7
 801a7ea:	bd80      	pop	{r7, pc}
 801a7ec:	200059d8 	.word	0x200059d8
 801a7f0:	20005980 	.word	0x20005980
 801a7f4:	200059dc 	.word	0x200059dc

0801a7f8 <sntp_recv>:
#endif /* SNTP_SUPPORT_MULTIPLE_SERVERS */

/** UDP recv callback for the sntp pcb */
static void
sntp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801a7f8:	b580      	push	{r7, lr}
 801a7fa:	b088      	sub	sp, #32
 801a7fc:	af00      	add	r7, sp, #0
 801a7fe:	60f8      	str	r0, [r7, #12]
 801a800:	60b9      	str	r1, [r7, #8]
 801a802:	607a      	str	r2, [r7, #4]
 801a804:	603b      	str	r3, [r7, #0]
  err_t err;

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);

  err = ERR_ARG;
 801a806:	23f0      	movs	r3, #240	; 0xf0
 801a808:	77fb      	strb	r3, [r7, #31]
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);
#endif /* SNTP_CHECK_RESPONSE >= 1 */
  {
    /* process the response */
    if (p->tot_len == SNTP_MSG_LEN) {
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	891b      	ldrh	r3, [r3, #8]
 801a80e:	2b30      	cmp	r3, #48	; 0x30
 801a810:	d12d      	bne.n	801a86e <sntp_recv+0x76>
      mode = pbuf_get_at(p, SNTP_OFFSET_LI_VN_MODE) & SNTP_MODE_MASK;
 801a812:	2100      	movs	r1, #0
 801a814:	6878      	ldr	r0, [r7, #4]
 801a816:	f002 f8cb 	bl	801c9b0 <pbuf_get_at>
 801a81a:	4603      	mov	r3, r0
 801a81c:	f003 0307 	and.w	r3, r3, #7
 801a820:	77bb      	strb	r3, [r7, #30]
      /* if this is a SNTP response... */
      if (((sntp_opmode == SNTP_OPMODE_POLL)       && (mode == SNTP_MODE_SERVER)) ||
 801a822:	4b35      	ldr	r3, [pc, #212]	; (801a8f8 <sntp_recv+0x100>)
 801a824:	781b      	ldrb	r3, [r3, #0]
 801a826:	2b00      	cmp	r3, #0
 801a828:	d102      	bne.n	801a830 <sntp_recv+0x38>
 801a82a:	7fbb      	ldrb	r3, [r7, #30]
 801a82c:	2b04      	cmp	r3, #4
 801a82e:	d006      	beq.n	801a83e <sntp_recv+0x46>
          ((sntp_opmode == SNTP_OPMODE_LISTENONLY) && (mode == SNTP_MODE_BROADCAST))) {
 801a830:	4b31      	ldr	r3, [pc, #196]	; (801a8f8 <sntp_recv+0x100>)
 801a832:	781b      	ldrb	r3, [r3, #0]
      if (((sntp_opmode == SNTP_OPMODE_POLL)       && (mode == SNTP_MODE_SERVER)) ||
 801a834:	2b01      	cmp	r3, #1
 801a836:	d118      	bne.n	801a86a <sntp_recv+0x72>
          ((sntp_opmode == SNTP_OPMODE_LISTENONLY) && (mode == SNTP_MODE_BROADCAST))) {
 801a838:	7fbb      	ldrb	r3, [r7, #30]
 801a83a:	2b05      	cmp	r3, #5
 801a83c:	d115      	bne.n	801a86a <sntp_recv+0x72>
        stratum = pbuf_get_at(p, SNTP_OFFSET_STRATUM);
 801a83e:	2101      	movs	r1, #1
 801a840:	6878      	ldr	r0, [r7, #4]
 801a842:	f002 f8b5 	bl	801c9b0 <pbuf_get_at>
 801a846:	4603      	mov	r3, r0
 801a848:	777b      	strb	r3, [r7, #29]

        if (stratum == SNTP_STRATUM_KOD) {
 801a84a:	7f7b      	ldrb	r3, [r7, #29]
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d102      	bne.n	801a856 <sntp_recv+0x5e>
          /* Kiss-of-death packet. Use another server or increase UPDATE_DELAY. */
          err = SNTP_ERR_KOD;
 801a850:	2301      	movs	r3, #1
 801a852:	77fb      	strb	r3, [r7, #31]
        if (stratum == SNTP_STRATUM_KOD) {
 801a854:	e00b      	b.n	801a86e <sntp_recv+0x76>
          LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_recv: Received Kiss-of-Death\n"));
        } else {
          pbuf_copy_partial(p, &timestamps, sizeof(timestamps), SNTP_OFFSET_TIMESTAMPS);
 801a856:	f107 0110 	add.w	r1, r7, #16
 801a85a:	2328      	movs	r3, #40	; 0x28
 801a85c:	2208      	movs	r2, #8
 801a85e:	6878      	ldr	r0, [r7, #4]
 801a860:	f001 ffd8 	bl	801c814 <pbuf_copy_partial>
          } else
#endif /* SNTP_CHECK_RESPONSE >= 2 */
            /* @todo: add code for SNTP_CHECK_RESPONSE >= 3 and >= 4 here */
          {
            /* correct answer */
            err = ERR_OK;
 801a864:	2300      	movs	r3, #0
 801a866:	77fb      	strb	r3, [r7, #31]
        if (stratum == SNTP_STRATUM_KOD) {
 801a868:	e001      	b.n	801a86e <sntp_recv+0x76>
          }
        }
      } else {
        LWIP_DEBUGF(SNTP_DEBUG_WARN, ("sntp_recv: Invalid mode in response: %"U16_F"\n", (u16_t)mode));
        /* wait for correct response */
        err = ERR_TIMEOUT;
 801a86a:	23fd      	movs	r3, #253	; 0xfd
 801a86c:	77fb      	strb	r3, [r7, #31]
    /* packet from wrong remote address or port, wait for correct response */
    err = ERR_TIMEOUT;
  }
#endif /* SNTP_CHECK_RESPONSE >= 1 */

  pbuf_free(p);
 801a86e:	6878      	ldr	r0, [r7, #4]
 801a870:	f001 fdca 	bl	801c408 <pbuf_free>

  if (err == ERR_OK) {
 801a874:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801a878:	2b00      	cmp	r3, #0
 801a87a:	d12e      	bne.n	801a8da <sntp_recv+0xe2>
    /* correct packet received: process it it */
    sntp_process(&timestamps);
 801a87c:	f107 0310 	add.w	r3, r7, #16
 801a880:	4618      	mov	r0, r3
 801a882:	f7ff ff29 	bl	801a6d8 <sntp_process>

#if SNTP_MONITOR_SERVER_REACHABILITY
    /* indicate that server responded */
    sntp_servers[sntp_current_server].reachability |= 1;
 801a886:	4b1d      	ldr	r3, [pc, #116]	; (801a8fc <sntp_recv+0x104>)
 801a888:	781b      	ldrb	r3, [r3, #0]
 801a88a:	4a1d      	ldr	r2, [pc, #116]	; (801a900 <sntp_recv+0x108>)
 801a88c:	00db      	lsls	r3, r3, #3
 801a88e:	4413      	add	r3, r2
 801a890:	791b      	ldrb	r3, [r3, #4]
 801a892:	4a1a      	ldr	r2, [pc, #104]	; (801a8fc <sntp_recv+0x104>)
 801a894:	7812      	ldrb	r2, [r2, #0]
 801a896:	4610      	mov	r0, r2
 801a898:	f043 0301 	orr.w	r3, r3, #1
 801a89c:	b2d9      	uxtb	r1, r3
 801a89e:	4a18      	ldr	r2, [pc, #96]	; (801a900 <sntp_recv+0x108>)
 801a8a0:	00c3      	lsls	r3, r0, #3
 801a8a2:	4413      	add	r3, r2
 801a8a4:	460a      	mov	r2, r1
 801a8a6:	711a      	strb	r2, [r3, #4]
#endif /* SNTP_MONITOR_SERVER_REACHABILITY */
    /* Set up timeout for next request (only if poll response was received)*/
    if (sntp_opmode == SNTP_OPMODE_POLL) {
 801a8a8:	4b13      	ldr	r3, [pc, #76]	; (801a8f8 <sntp_recv+0x100>)
 801a8aa:	781b      	ldrb	r3, [r3, #0]
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d11f      	bne.n	801a8f0 <sntp_recv+0xf8>
      u32_t sntp_update_delay;
      sys_untimeout(sntp_try_next_server, NULL);
 801a8b0:	2100      	movs	r1, #0
 801a8b2:	4814      	ldr	r0, [pc, #80]	; (801a904 <sntp_recv+0x10c>)
 801a8b4:	f008 fb2c 	bl	8022f10 <sys_untimeout>
      sys_untimeout(sntp_request, NULL);
 801a8b8:	2100      	movs	r1, #0
 801a8ba:	4813      	ldr	r0, [pc, #76]	; (801a908 <sntp_recv+0x110>)
 801a8bc:	f008 fb28 	bl	8022f10 <sys_untimeout>

      /* Correct response, reset retry timeout */
      SNTP_RESET_RETRY_TIMEOUT();
 801a8c0:	4b12      	ldr	r3, [pc, #72]	; (801a90c <sntp_recv+0x114>)
 801a8c2:	f643 2298 	movw	r2, #15000	; 0x3a98
 801a8c6:	601a      	str	r2, [r3, #0]

      sntp_update_delay = (u32_t)SNTP_UPDATE_DELAY;
 801a8c8:	f644 6320 	movw	r3, #20000	; 0x4e20
 801a8cc:	61bb      	str	r3, [r7, #24]
      sys_timeout(sntp_update_delay, sntp_request, NULL);
 801a8ce:	2200      	movs	r2, #0
 801a8d0:	490d      	ldr	r1, [pc, #52]	; (801a908 <sntp_recv+0x110>)
 801a8d2:	69b8      	ldr	r0, [r7, #24]
 801a8d4:	f008 faf6 	bl	8022ec4 <sys_timeout>
      sntp_try_next_server(NULL);
    }
  } else {
    /* ignore any broken packet, poll mode: retry after timeout to avoid flooding */
  }
}
 801a8d8:	e00a      	b.n	801a8f0 <sntp_recv+0xf8>
  } else if (err == SNTP_ERR_KOD) {
 801a8da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801a8de:	2b01      	cmp	r3, #1
 801a8e0:	d106      	bne.n	801a8f0 <sntp_recv+0xf8>
    if (sntp_opmode == SNTP_OPMODE_POLL) {
 801a8e2:	4b05      	ldr	r3, [pc, #20]	; (801a8f8 <sntp_recv+0x100>)
 801a8e4:	781b      	ldrb	r3, [r3, #0]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d102      	bne.n	801a8f0 <sntp_recv+0xf8>
      sntp_try_next_server(NULL);
 801a8ea:	2000      	movs	r0, #0
 801a8ec:	f7ff ff48 	bl	801a780 <sntp_try_next_server>
}
 801a8f0:	bf00      	nop
 801a8f2:	3720      	adds	r7, #32
 801a8f4:	46bd      	mov	sp, r7
 801a8f6:	bd80      	pop	{r7, pc}
 801a8f8:	20005978 	.word	0x20005978
 801a8fc:	200059d8 	.word	0x200059d8
 801a900:	20005980 	.word	0x20005980
 801a904:	0801a781 	.word	0x0801a781
 801a908:	0801a9c5 	.word	0x0801a9c5
 801a90c:	200059dc 	.word	0x200059dc

0801a910 <sntp_send_request>:
 *
 * @param server_addr resolved IP address of the SNTP server
 */
static void
sntp_send_request(const ip_addr_t *server_addr)
{
 801a910:	b580      	push	{r7, lr}
 801a912:	b084      	sub	sp, #16
 801a914:	af00      	add	r7, sp, #0
 801a916:	6078      	str	r0, [r7, #4]
  struct pbuf *p;

  LWIP_ASSERT("server_addr != NULL", server_addr != NULL);
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	d106      	bne.n	801a92c <sntp_send_request+0x1c>
 801a91e:	4b21      	ldr	r3, [pc, #132]	; (801a9a4 <sntp_send_request+0x94>)
 801a920:	f44f 7208 	mov.w	r2, #544	; 0x220
 801a924:	4920      	ldr	r1, [pc, #128]	; (801a9a8 <sntp_send_request+0x98>)
 801a926:	4821      	ldr	r0, [pc, #132]	; (801a9ac <sntp_send_request+0x9c>)
 801a928:	f00c f996 	bl	8026c58 <iprintf>

  p = pbuf_alloc(PBUF_TRANSPORT, SNTP_MSG_LEN, PBUF_RAM);
 801a92c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a930:	2130      	movs	r1, #48	; 0x30
 801a932:	2036      	movs	r0, #54	; 0x36
 801a934:	f001 fa84 	bl	801be40 <pbuf_alloc>
 801a938:	60f8      	str	r0, [r7, #12]
  if (p != NULL) {
 801a93a:	68fb      	ldr	r3, [r7, #12]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d026      	beq.n	801a98e <sntp_send_request+0x7e>
    struct sntp_msg *sntpmsg = (struct sntp_msg *)p->payload;
 801a940:	68fb      	ldr	r3, [r7, #12]
 801a942:	685b      	ldr	r3, [r3, #4]
 801a944:	60bb      	str	r3, [r7, #8]
    LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_send_request: Sending request to server\n"));
    /* initialize request message */
    sntp_initialize_request(sntpmsg);
 801a946:	68b8      	ldr	r0, [r7, #8]
 801a948:	f7ff fee4 	bl	801a714 <sntp_initialize_request>
    /* send request */
    udp_sendto(sntp_pcb, p, server_addr, SNTP_PORT);
 801a94c:	4b18      	ldr	r3, [pc, #96]	; (801a9b0 <sntp_send_request+0xa0>)
 801a94e:	6818      	ldr	r0, [r3, #0]
 801a950:	237b      	movs	r3, #123	; 0x7b
 801a952:	687a      	ldr	r2, [r7, #4]
 801a954:	68f9      	ldr	r1, [r7, #12]
 801a956:	f008 fd49 	bl	80233ec <udp_sendto>
    /* free the pbuf after sending it */
    pbuf_free(p);
 801a95a:	68f8      	ldr	r0, [r7, #12]
 801a95c:	f001 fd54 	bl	801c408 <pbuf_free>
#if SNTP_MONITOR_SERVER_REACHABILITY
    /* indicate new packet has been sent */
    sntp_servers[sntp_current_server].reachability <<= 1;
 801a960:	4b14      	ldr	r3, [pc, #80]	; (801a9b4 <sntp_send_request+0xa4>)
 801a962:	781b      	ldrb	r3, [r3, #0]
 801a964:	4a14      	ldr	r2, [pc, #80]	; (801a9b8 <sntp_send_request+0xa8>)
 801a966:	00db      	lsls	r3, r3, #3
 801a968:	4413      	add	r3, r2
 801a96a:	791b      	ldrb	r3, [r3, #4]
 801a96c:	4a11      	ldr	r2, [pc, #68]	; (801a9b4 <sntp_send_request+0xa4>)
 801a96e:	7812      	ldrb	r2, [r2, #0]
 801a970:	4610      	mov	r0, r2
 801a972:	005b      	lsls	r3, r3, #1
 801a974:	b2d9      	uxtb	r1, r3
 801a976:	4a10      	ldr	r2, [pc, #64]	; (801a9b8 <sntp_send_request+0xa8>)
 801a978:	00c3      	lsls	r3, r0, #3
 801a97a:	4413      	add	r3, r2
 801a97c:	460a      	mov	r2, r1
 801a97e:	711a      	strb	r2, [r3, #4]
#endif /* SNTP_MONITOR_SERVER_REACHABILITY */
    /* set up receive timeout: try next server or retry on timeout */
    sys_timeout((u32_t)SNTP_RECV_TIMEOUT, sntp_try_next_server, NULL);
 801a980:	2200      	movs	r2, #0
 801a982:	490e      	ldr	r1, [pc, #56]	; (801a9bc <sntp_send_request+0xac>)
 801a984:	f643 2098 	movw	r0, #15000	; 0x3a98
 801a988:	f008 fa9c 	bl	8022ec4 <sys_timeout>
    LWIP_DEBUGF(SNTP_DEBUG_SERIOUS, ("sntp_send_request: Out of memory, trying again in %"U32_F" ms\n",
                                     (u32_t)SNTP_RETRY_TIMEOUT));
    /* out of memory: set up a timer to send a retry */
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_request, NULL);
  }
}
 801a98c:	e005      	b.n	801a99a <sntp_send_request+0x8a>
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_request, NULL);
 801a98e:	2200      	movs	r2, #0
 801a990:	490b      	ldr	r1, [pc, #44]	; (801a9c0 <sntp_send_request+0xb0>)
 801a992:	f643 2098 	movw	r0, #15000	; 0x3a98
 801a996:	f008 fa95 	bl	8022ec4 <sys_timeout>
}
 801a99a:	bf00      	nop
 801a99c:	3710      	adds	r7, #16
 801a99e:	46bd      	mov	sp, r7
 801a9a0:	bd80      	pop	{r7, pc}
 801a9a2:	bf00      	nop
 801a9a4:	0802d604 	.word	0x0802d604
 801a9a8:	0802d63c 	.word	0x0802d63c
 801a9ac:	0802d650 	.word	0x0802d650
 801a9b0:	2000597c 	.word	0x2000597c
 801a9b4:	200059d8 	.word	0x200059d8
 801a9b8:	20005980 	.word	0x20005980
 801a9bc:	0801a781 	.word	0x0801a781
 801a9c0:	0801a9c5 	.word	0x0801a9c5

0801a9c4 <sntp_request>:
 *
 * @param arg is unused (only necessary to conform to sys_timeout)
 */
static void
sntp_request(void *arg)
{
 801a9c4:	b580      	push	{r7, lr}
 801a9c6:	b084      	sub	sp, #16
 801a9c8:	af00      	add	r7, sp, #0
 801a9ca:	6078      	str	r0, [r7, #4]
      sntp_servers[sntp_current_server].addr = sntp_server_address;
    }
  } else
#endif /* SNTP_SERVER_DNS */
  {
    sntp_server_address = sntp_servers[sntp_current_server].addr;
 801a9cc:	4b11      	ldr	r3, [pc, #68]	; (801aa14 <sntp_request+0x50>)
 801a9ce:	781b      	ldrb	r3, [r3, #0]
 801a9d0:	461a      	mov	r2, r3
 801a9d2:	4b11      	ldr	r3, [pc, #68]	; (801aa18 <sntp_request+0x54>)
 801a9d4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801a9d8:	60bb      	str	r3, [r7, #8]
    err = (ip_addr_isany_val(sntp_server_address)) ? ERR_ARG : ERR_OK;
 801a9da:	68bb      	ldr	r3, [r7, #8]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d102      	bne.n	801a9e6 <sntp_request+0x22>
 801a9e0:	f06f 030f 	mvn.w	r3, #15
 801a9e4:	e000      	b.n	801a9e8 <sntp_request+0x24>
 801a9e6:	2300      	movs	r3, #0
 801a9e8:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 801a9ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d105      	bne.n	801a9fe <sntp_request+0x3a>
    LWIP_DEBUGF(SNTP_DEBUG_TRACE, ("sntp_request: current server address is %s\n",
                                   ipaddr_ntoa(&sntp_server_address)));
    sntp_send_request(&sntp_server_address);
 801a9f2:	f107 0308 	add.w	r3, r7, #8
 801a9f6:	4618      	mov	r0, r3
 801a9f8:	f7ff ff8a 	bl	801a910 <sntp_send_request>
  } else {
    /* address conversion failed, try another server */
    LWIP_DEBUGF(SNTP_DEBUG_WARN_STATE, ("sntp_request: Invalid server address, trying next server.\n"));
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_try_next_server, NULL);
  }
}
 801a9fc:	e005      	b.n	801aa0a <sntp_request+0x46>
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_try_next_server, NULL);
 801a9fe:	2200      	movs	r2, #0
 801aa00:	4906      	ldr	r1, [pc, #24]	; (801aa1c <sntp_request+0x58>)
 801aa02:	f643 2098 	movw	r0, #15000	; 0x3a98
 801aa06:	f008 fa5d 	bl	8022ec4 <sys_timeout>
}
 801aa0a:	bf00      	nop
 801aa0c:	3710      	adds	r7, #16
 801aa0e:	46bd      	mov	sp, r7
 801aa10:	bd80      	pop	{r7, pc}
 801aa12:	bf00      	nop
 801aa14:	200059d8 	.word	0x200059d8
 801aa18:	20005980 	.word	0x20005980
 801aa1c:	0801a781 	.word	0x0801a781

0801aa20 <sntp_init>:
 * Initialize this module.
 * Send out request instantly or after SNTP_STARTUP_DELAY(_FUNC).
 */
void
sntp_init(void)
{
 801aa20:	b580      	push	{r7, lr}
 801aa22:	af00      	add	r7, sp, #0
#else
#error SNTP_SERVER_ADDRESS string not supported SNTP_SERVER_DNS==0
#endif
#endif /* SNTP_SERVER_ADDRESS */

  if (sntp_pcb == NULL) {
 801aa24:	4b28      	ldr	r3, [pc, #160]	; (801aac8 <sntp_init+0xa8>)
 801aa26:	681b      	ldr	r3, [r3, #0]
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d14a      	bne.n	801aac2 <sntp_init+0xa2>
    sntp_pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 801aa2c:	202e      	movs	r0, #46	; 0x2e
 801aa2e:	f008 ff52 	bl	80238d6 <udp_new_ip_type>
 801aa32:	4603      	mov	r3, r0
 801aa34:	4a24      	ldr	r2, [pc, #144]	; (801aac8 <sntp_init+0xa8>)
 801aa36:	6013      	str	r3, [r2, #0]
    LWIP_ASSERT("Failed to allocate udp pcb for sntp client", sntp_pcb != NULL);
 801aa38:	4b23      	ldr	r3, [pc, #140]	; (801aac8 <sntp_init+0xa8>)
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	d106      	bne.n	801aa4e <sntp_init+0x2e>
 801aa40:	4b22      	ldr	r3, [pc, #136]	; (801aacc <sntp_init+0xac>)
 801aa42:	f240 2296 	movw	r2, #662	; 0x296
 801aa46:	4922      	ldr	r1, [pc, #136]	; (801aad0 <sntp_init+0xb0>)
 801aa48:	4822      	ldr	r0, [pc, #136]	; (801aad4 <sntp_init+0xb4>)
 801aa4a:	f00c f905 	bl	8026c58 <iprintf>
    if (sntp_pcb != NULL) {
 801aa4e:	4b1e      	ldr	r3, [pc, #120]	; (801aac8 <sntp_init+0xa8>)
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d035      	beq.n	801aac2 <sntp_init+0xa2>
      udp_recv(sntp_pcb, sntp_recv, NULL);
 801aa56:	4b1c      	ldr	r3, [pc, #112]	; (801aac8 <sntp_init+0xa8>)
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	491e      	ldr	r1, [pc, #120]	; (801aad8 <sntp_init+0xb8>)
 801aa5e:	4618      	mov	r0, r3
 801aa60:	f008 ff02 	bl	8023868 <udp_recv>

      if (sntp_opmode == SNTP_OPMODE_POLL) {
 801aa64:	4b1d      	ldr	r3, [pc, #116]	; (801aadc <sntp_init+0xbc>)
 801aa66:	781b      	ldrb	r3, [r3, #0]
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d116      	bne.n	801aa9a <sntp_init+0x7a>
        SNTP_RESET_RETRY_TIMEOUT();
 801aa6c:	4b1c      	ldr	r3, [pc, #112]	; (801aae0 <sntp_init+0xc0>)
 801aa6e:	f643 2298 	movw	r2, #15000	; 0x3a98
 801aa72:	601a      	str	r2, [r3, #0]
#if SNTP_STARTUP_DELAY
        sys_timeout((u32_t)SNTP_STARTUP_DELAY_FUNC, sntp_request, NULL);
 801aa74:	f00c f97e 	bl	8026d74 <rand>
 801aa78:	4603      	mov	r3, r0
 801aa7a:	461a      	mov	r2, r3
 801aa7c:	4b19      	ldr	r3, [pc, #100]	; (801aae4 <sntp_init+0xc4>)
 801aa7e:	fba3 1302 	umull	r1, r3, r3, r2
 801aa82:	0b1b      	lsrs	r3, r3, #12
 801aa84:	f241 3188 	movw	r1, #5000	; 0x1388
 801aa88:	fb01 f303 	mul.w	r3, r1, r3
 801aa8c:	1ad3      	subs	r3, r2, r3
 801aa8e:	2200      	movs	r2, #0
 801aa90:	4915      	ldr	r1, [pc, #84]	; (801aae8 <sntp_init+0xc8>)
 801aa92:	4618      	mov	r0, r3
 801aa94:	f008 fa16 	bl	8022ec4 <sys_timeout>
        ip_set_option(sntp_pcb, SOF_BROADCAST);
        udp_bind(sntp_pcb, IP_ANY_TYPE, SNTP_PORT);
      }
    }
  }
}
 801aa98:	e013      	b.n	801aac2 <sntp_init+0xa2>
      } else if (sntp_opmode == SNTP_OPMODE_LISTENONLY) {
 801aa9a:	4b10      	ldr	r3, [pc, #64]	; (801aadc <sntp_init+0xbc>)
 801aa9c:	781b      	ldrb	r3, [r3, #0]
 801aa9e:	2b01      	cmp	r3, #1
 801aaa0:	d10f      	bne.n	801aac2 <sntp_init+0xa2>
        ip_set_option(sntp_pcb, SOF_BROADCAST);
 801aaa2:	4b09      	ldr	r3, [pc, #36]	; (801aac8 <sntp_init+0xa8>)
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	7a5a      	ldrb	r2, [r3, #9]
 801aaa8:	4b07      	ldr	r3, [pc, #28]	; (801aac8 <sntp_init+0xa8>)
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	f042 0220 	orr.w	r2, r2, #32
 801aab0:	b2d2      	uxtb	r2, r2
 801aab2:	725a      	strb	r2, [r3, #9]
        udp_bind(sntp_pcb, IP_ANY_TYPE, SNTP_PORT);
 801aab4:	4b04      	ldr	r3, [pc, #16]	; (801aac8 <sntp_init+0xa8>)
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	227b      	movs	r2, #123	; 0x7b
 801aaba:	490c      	ldr	r1, [pc, #48]	; (801aaec <sntp_init+0xcc>)
 801aabc:	4618      	mov	r0, r3
 801aabe:	f008 fe4b 	bl	8023758 <udp_bind>
}
 801aac2:	bf00      	nop
 801aac4:	bd80      	pop	{r7, pc}
 801aac6:	bf00      	nop
 801aac8:	2000597c 	.word	0x2000597c
 801aacc:	0802d604 	.word	0x0802d604
 801aad0:	0802d678 	.word	0x0802d678
 801aad4:	0802d650 	.word	0x0802d650
 801aad8:	0801a7f9 	.word	0x0801a7f9
 801aadc:	20005978 	.word	0x20005978
 801aae0:	200059dc 	.word	0x200059dc
 801aae4:	d1b71759 	.word	0xd1b71759
 801aae8:	0801a9c5 	.word	0x0801a9c5
 801aaec:	080608e4 	.word	0x080608e4

0801aaf0 <sntp_setoperatingmode>:
 * Sets the operating mode.
 * @param operating_mode one of the available operating modes
 */
void
sntp_setoperatingmode(u8_t operating_mode)
{
 801aaf0:	b580      	push	{r7, lr}
 801aaf2:	b082      	sub	sp, #8
 801aaf4:	af00      	add	r7, sp, #0
 801aaf6:	4603      	mov	r3, r0
 801aaf8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("Invalid operating mode", operating_mode <= SNTP_OPMODE_LISTENONLY);
 801aafa:	79fb      	ldrb	r3, [r7, #7]
 801aafc:	2b01      	cmp	r3, #1
 801aafe:	d906      	bls.n	801ab0e <sntp_setoperatingmode+0x1e>
 801ab00:	4b0c      	ldr	r3, [pc, #48]	; (801ab34 <sntp_setoperatingmode+0x44>)
 801ab02:	f240 22d1 	movw	r2, #721	; 0x2d1
 801ab06:	490c      	ldr	r1, [pc, #48]	; (801ab38 <sntp_setoperatingmode+0x48>)
 801ab08:	480c      	ldr	r0, [pc, #48]	; (801ab3c <sntp_setoperatingmode+0x4c>)
 801ab0a:	f00c f8a5 	bl	8026c58 <iprintf>
  LWIP_ASSERT("Operating mode must not be set while SNTP client is running", sntp_pcb == NULL);
 801ab0e:	4b0c      	ldr	r3, [pc, #48]	; (801ab40 <sntp_setoperatingmode+0x50>)
 801ab10:	681b      	ldr	r3, [r3, #0]
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	d006      	beq.n	801ab24 <sntp_setoperatingmode+0x34>
 801ab16:	4b07      	ldr	r3, [pc, #28]	; (801ab34 <sntp_setoperatingmode+0x44>)
 801ab18:	f240 22d2 	movw	r2, #722	; 0x2d2
 801ab1c:	4909      	ldr	r1, [pc, #36]	; (801ab44 <sntp_setoperatingmode+0x54>)
 801ab1e:	4807      	ldr	r0, [pc, #28]	; (801ab3c <sntp_setoperatingmode+0x4c>)
 801ab20:	f00c f89a 	bl	8026c58 <iprintf>
  sntp_opmode = operating_mode;
 801ab24:	4a08      	ldr	r2, [pc, #32]	; (801ab48 <sntp_setoperatingmode+0x58>)
 801ab26:	79fb      	ldrb	r3, [r7, #7]
 801ab28:	7013      	strb	r3, [r2, #0]
}
 801ab2a:	bf00      	nop
 801ab2c:	3708      	adds	r7, #8
 801ab2e:	46bd      	mov	sp, r7
 801ab30:	bd80      	pop	{r7, pc}
 801ab32:	bf00      	nop
 801ab34:	0802d604 	.word	0x0802d604
 801ab38:	0802d6a4 	.word	0x0802d6a4
 801ab3c:	0802d650 	.word	0x0802d650
 801ab40:	2000597c 	.word	0x2000597c
 801ab44:	0802d6bc 	.word	0x0802d6bc
 801ab48:	20005978 	.word	0x20005978

0801ab4c <sntp_setserver>:
 * @param idx the index of the NTP server to set must be < SNTP_MAX_SERVERS
 * @param server IP address of the NTP server to set
 */
void
sntp_setserver(u8_t idx, const ip_addr_t *server)
{
 801ab4c:	b480      	push	{r7}
 801ab4e:	b083      	sub	sp, #12
 801ab50:	af00      	add	r7, sp, #0
 801ab52:	4603      	mov	r3, r0
 801ab54:	6039      	str	r1, [r7, #0]
 801ab56:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();
  if (idx < SNTP_MAX_SERVERS) {
 801ab58:	79fb      	ldrb	r3, [r7, #7]
 801ab5a:	2b0a      	cmp	r3, #10
 801ab5c:	d80e      	bhi.n	801ab7c <sntp_setserver+0x30>
    if (server != NULL) {
 801ab5e:	683b      	ldr	r3, [r7, #0]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d006      	beq.n	801ab72 <sntp_setserver+0x26>
      sntp_servers[idx].addr = (*server);
 801ab64:	79fb      	ldrb	r3, [r7, #7]
 801ab66:	4908      	ldr	r1, [pc, #32]	; (801ab88 <sntp_setserver+0x3c>)
 801ab68:	683a      	ldr	r2, [r7, #0]
 801ab6a:	6812      	ldr	r2, [r2, #0]
 801ab6c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    }
#if SNTP_SERVER_DNS
    sntp_servers[idx].name = NULL;
#endif
  }
}
 801ab70:	e004      	b.n	801ab7c <sntp_setserver+0x30>
      ip_addr_set_zero(&sntp_servers[idx].addr);
 801ab72:	79fb      	ldrb	r3, [r7, #7]
 801ab74:	4a04      	ldr	r2, [pc, #16]	; (801ab88 <sntp_setserver+0x3c>)
 801ab76:	2100      	movs	r1, #0
 801ab78:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
}
 801ab7c:	bf00      	nop
 801ab7e:	370c      	adds	r7, #12
 801ab80:	46bd      	mov	sp, r7
 801ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab86:	4770      	bx	lr
 801ab88:	20005980 	.word	0x20005980

0801ab8c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801ab8c:	b480      	push	{r7}
 801ab8e:	b083      	sub	sp, #12
 801ab90:	af00      	add	r7, sp, #0
 801ab92:	4603      	mov	r3, r0
 801ab94:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801ab96:	88fb      	ldrh	r3, [r7, #6]
 801ab98:	021b      	lsls	r3, r3, #8
 801ab9a:	b21a      	sxth	r2, r3
 801ab9c:	88fb      	ldrh	r3, [r7, #6]
 801ab9e:	0a1b      	lsrs	r3, r3, #8
 801aba0:	b29b      	uxth	r3, r3
 801aba2:	b21b      	sxth	r3, r3
 801aba4:	4313      	orrs	r3, r2
 801aba6:	b21b      	sxth	r3, r3
 801aba8:	b29b      	uxth	r3, r3
}
 801abaa:	4618      	mov	r0, r3
 801abac:	370c      	adds	r7, #12
 801abae:	46bd      	mov	sp, r7
 801abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abb4:	4770      	bx	lr

0801abb6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801abb6:	b480      	push	{r7}
 801abb8:	b083      	sub	sp, #12
 801abba:	af00      	add	r7, sp, #0
 801abbc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	061a      	lsls	r2, r3, #24
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	021b      	lsls	r3, r3, #8
 801abc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801abca:	431a      	orrs	r2, r3
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	0a1b      	lsrs	r3, r3, #8
 801abd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801abd4:	431a      	orrs	r2, r3
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	0e1b      	lsrs	r3, r3, #24
 801abda:	4313      	orrs	r3, r2
}
 801abdc:	4618      	mov	r0, r3
 801abde:	370c      	adds	r7, #12
 801abe0:	46bd      	mov	sp, r7
 801abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abe6:	4770      	bx	lr

0801abe8 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 801abe8:	b580      	push	{r7, lr}
 801abea:	b086      	sub	sp, #24
 801abec:	af00      	add	r7, sp, #0
 801abee:	60f8      	str	r0, [r7, #12]
 801abf0:	60b9      	str	r1, [r7, #8]
 801abf2:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 801abf4:	68b8      	ldr	r0, [r7, #8]
 801abf6:	f7e5 faf5 	bl	80001e4 <strlen>
 801abfa:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 801abfc:	693b      	ldr	r3, [r7, #16]
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d101      	bne.n	801ac06 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 801ac02:	68fb      	ldr	r3, [r7, #12]
 801ac04:	e022      	b.n	801ac4c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801ac06:	68fb      	ldr	r3, [r7, #12]
 801ac08:	617b      	str	r3, [r7, #20]
 801ac0a:	e012      	b.n	801ac32 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 801ac0c:	697b      	ldr	r3, [r7, #20]
 801ac0e:	781a      	ldrb	r2, [r3, #0]
 801ac10:	68bb      	ldr	r3, [r7, #8]
 801ac12:	781b      	ldrb	r3, [r3, #0]
 801ac14:	429a      	cmp	r2, r3
 801ac16:	d109      	bne.n	801ac2c <lwip_strnstr+0x44>
 801ac18:	693a      	ldr	r2, [r7, #16]
 801ac1a:	68b9      	ldr	r1, [r7, #8]
 801ac1c:	6978      	ldr	r0, [r7, #20]
 801ac1e:	f00c ffb1 	bl	8027b84 <strncmp>
 801ac22:	4603      	mov	r3, r0
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d101      	bne.n	801ac2c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 801ac28:	697b      	ldr	r3, [r7, #20]
 801ac2a:	e00f      	b.n	801ac4c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801ac2c:	697b      	ldr	r3, [r7, #20]
 801ac2e:	3301      	adds	r3, #1
 801ac30:	617b      	str	r3, [r7, #20]
 801ac32:	697b      	ldr	r3, [r7, #20]
 801ac34:	781b      	ldrb	r3, [r3, #0]
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d007      	beq.n	801ac4a <lwip_strnstr+0x62>
 801ac3a:	697a      	ldr	r2, [r7, #20]
 801ac3c:	693b      	ldr	r3, [r7, #16]
 801ac3e:	441a      	add	r2, r3
 801ac40:	68f9      	ldr	r1, [r7, #12]
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	440b      	add	r3, r1
 801ac46:	429a      	cmp	r2, r3
 801ac48:	d9e0      	bls.n	801ac0c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 801ac4a:	2300      	movs	r3, #0
}
 801ac4c:	4618      	mov	r0, r3
 801ac4e:	3718      	adds	r7, #24
 801ac50:	46bd      	mov	sp, r7
 801ac52:	bd80      	pop	{r7, pc}

0801ac54 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 801ac54:	b480      	push	{r7}
 801ac56:	b085      	sub	sp, #20
 801ac58:	af00      	add	r7, sp, #0
 801ac5a:	6078      	str	r0, [r7, #4]
 801ac5c:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	1c5a      	adds	r2, r3, #1
 801ac62:	607a      	str	r2, [r7, #4]
 801ac64:	781b      	ldrb	r3, [r3, #0]
 801ac66:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 801ac68:	683b      	ldr	r3, [r7, #0]
 801ac6a:	1c5a      	adds	r2, r3, #1
 801ac6c:	603a      	str	r2, [r7, #0]
 801ac6e:	781b      	ldrb	r3, [r3, #0]
 801ac70:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 801ac72:	7bfa      	ldrb	r2, [r7, #15]
 801ac74:	7bbb      	ldrb	r3, [r7, #14]
 801ac76:	429a      	cmp	r2, r3
 801ac78:	d016      	beq.n	801aca8 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 801ac7a:	7bfb      	ldrb	r3, [r7, #15]
 801ac7c:	f043 0320 	orr.w	r3, r3, #32
 801ac80:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801ac82:	7b7b      	ldrb	r3, [r7, #13]
 801ac84:	2b60      	cmp	r3, #96	; 0x60
 801ac86:	d90c      	bls.n	801aca2 <lwip_stricmp+0x4e>
 801ac88:	7b7b      	ldrb	r3, [r7, #13]
 801ac8a:	2b7a      	cmp	r3, #122	; 0x7a
 801ac8c:	d809      	bhi.n	801aca2 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 801ac8e:	7bbb      	ldrb	r3, [r7, #14]
 801ac90:	f043 0320 	orr.w	r3, r3, #32
 801ac94:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 801ac96:	7b7a      	ldrb	r2, [r7, #13]
 801ac98:	7b3b      	ldrb	r3, [r7, #12]
 801ac9a:	429a      	cmp	r2, r3
 801ac9c:	d003      	beq.n	801aca6 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 801ac9e:	2301      	movs	r3, #1
 801aca0:	e006      	b.n	801acb0 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 801aca2:	2301      	movs	r3, #1
 801aca4:	e004      	b.n	801acb0 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801aca6:	bf00      	nop
      }
    }
  } while (c1 != 0);
 801aca8:	7bfb      	ldrb	r3, [r7, #15]
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d1d7      	bne.n	801ac5e <lwip_stricmp+0xa>
  return 0;
 801acae:	2300      	movs	r3, #0
}
 801acb0:	4618      	mov	r0, r3
 801acb2:	3714      	adds	r7, #20
 801acb4:	46bd      	mov	sp, r7
 801acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acba:	4770      	bx	lr

0801acbc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801acbc:	b580      	push	{r7, lr}
 801acbe:	b082      	sub	sp, #8
 801acc0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801acc2:	2300      	movs	r3, #0
 801acc4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801acc6:	f00b f98f 	bl	8025fe8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801acca:	f000 f8d5 	bl	801ae78 <mem_init>
  memp_init();
 801acce:	f000 fc59 	bl	801b584 <memp_init>
  pbuf_init();
  netif_init();
 801acd2:	f000 fd1f 	bl	801b714 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801acd6:	f008 f9c7 	bl	8023068 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801acda:	f001 fea3 	bl	801ca24 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801acde:	f008 f8cf 	bl	8022e80 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801ace2:	bf00      	nop
 801ace4:	3708      	adds	r7, #8
 801ace6:	46bd      	mov	sp, r7
 801ace8:	bd80      	pop	{r7, pc}
	...

0801acec <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801acec:	b480      	push	{r7}
 801acee:	b083      	sub	sp, #12
 801acf0:	af00      	add	r7, sp, #0
 801acf2:	4603      	mov	r3, r0
 801acf4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801acf6:	4b05      	ldr	r3, [pc, #20]	; (801ad0c <ptr_to_mem+0x20>)
 801acf8:	681a      	ldr	r2, [r3, #0]
 801acfa:	88fb      	ldrh	r3, [r7, #6]
 801acfc:	4413      	add	r3, r2
}
 801acfe:	4618      	mov	r0, r3
 801ad00:	370c      	adds	r7, #12
 801ad02:	46bd      	mov	sp, r7
 801ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad08:	4770      	bx	lr
 801ad0a:	bf00      	nop
 801ad0c:	200059e0 	.word	0x200059e0

0801ad10 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801ad10:	b480      	push	{r7}
 801ad12:	b083      	sub	sp, #12
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801ad18:	4b05      	ldr	r3, [pc, #20]	; (801ad30 <mem_to_ptr+0x20>)
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	687a      	ldr	r2, [r7, #4]
 801ad1e:	1ad3      	subs	r3, r2, r3
 801ad20:	b29b      	uxth	r3, r3
}
 801ad22:	4618      	mov	r0, r3
 801ad24:	370c      	adds	r7, #12
 801ad26:	46bd      	mov	sp, r7
 801ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad2c:	4770      	bx	lr
 801ad2e:	bf00      	nop
 801ad30:	200059e0 	.word	0x200059e0

0801ad34 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801ad34:	b590      	push	{r4, r7, lr}
 801ad36:	b085      	sub	sp, #20
 801ad38:	af00      	add	r7, sp, #0
 801ad3a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801ad3c:	4b45      	ldr	r3, [pc, #276]	; (801ae54 <plug_holes+0x120>)
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	687a      	ldr	r2, [r7, #4]
 801ad42:	429a      	cmp	r2, r3
 801ad44:	d206      	bcs.n	801ad54 <plug_holes+0x20>
 801ad46:	4b44      	ldr	r3, [pc, #272]	; (801ae58 <plug_holes+0x124>)
 801ad48:	f240 12df 	movw	r2, #479	; 0x1df
 801ad4c:	4943      	ldr	r1, [pc, #268]	; (801ae5c <plug_holes+0x128>)
 801ad4e:	4844      	ldr	r0, [pc, #272]	; (801ae60 <plug_holes+0x12c>)
 801ad50:	f00b ff82 	bl	8026c58 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801ad54:	4b43      	ldr	r3, [pc, #268]	; (801ae64 <plug_holes+0x130>)
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	687a      	ldr	r2, [r7, #4]
 801ad5a:	429a      	cmp	r2, r3
 801ad5c:	d306      	bcc.n	801ad6c <plug_holes+0x38>
 801ad5e:	4b3e      	ldr	r3, [pc, #248]	; (801ae58 <plug_holes+0x124>)
 801ad60:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801ad64:	4940      	ldr	r1, [pc, #256]	; (801ae68 <plug_holes+0x134>)
 801ad66:	483e      	ldr	r0, [pc, #248]	; (801ae60 <plug_holes+0x12c>)
 801ad68:	f00b ff76 	bl	8026c58 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	791b      	ldrb	r3, [r3, #4]
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d006      	beq.n	801ad82 <plug_holes+0x4e>
 801ad74:	4b38      	ldr	r3, [pc, #224]	; (801ae58 <plug_holes+0x124>)
 801ad76:	f240 12e1 	movw	r2, #481	; 0x1e1
 801ad7a:	493c      	ldr	r1, [pc, #240]	; (801ae6c <plug_holes+0x138>)
 801ad7c:	4838      	ldr	r0, [pc, #224]	; (801ae60 <plug_holes+0x12c>)
 801ad7e:	f00b ff6b 	bl	8026c58 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	881b      	ldrh	r3, [r3, #0]
 801ad86:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 801ad8a:	d906      	bls.n	801ad9a <plug_holes+0x66>
 801ad8c:	4b32      	ldr	r3, [pc, #200]	; (801ae58 <plug_holes+0x124>)
 801ad8e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801ad92:	4937      	ldr	r1, [pc, #220]	; (801ae70 <plug_holes+0x13c>)
 801ad94:	4832      	ldr	r0, [pc, #200]	; (801ae60 <plug_holes+0x12c>)
 801ad96:	f00b ff5f 	bl	8026c58 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	881b      	ldrh	r3, [r3, #0]
 801ad9e:	4618      	mov	r0, r3
 801ada0:	f7ff ffa4 	bl	801acec <ptr_to_mem>
 801ada4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801ada6:	687a      	ldr	r2, [r7, #4]
 801ada8:	68fb      	ldr	r3, [r7, #12]
 801adaa:	429a      	cmp	r2, r3
 801adac:	d024      	beq.n	801adf8 <plug_holes+0xc4>
 801adae:	68fb      	ldr	r3, [r7, #12]
 801adb0:	791b      	ldrb	r3, [r3, #4]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d120      	bne.n	801adf8 <plug_holes+0xc4>
 801adb6:	4b2b      	ldr	r3, [pc, #172]	; (801ae64 <plug_holes+0x130>)
 801adb8:	681b      	ldr	r3, [r3, #0]
 801adba:	68fa      	ldr	r2, [r7, #12]
 801adbc:	429a      	cmp	r2, r3
 801adbe:	d01b      	beq.n	801adf8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801adc0:	4b2c      	ldr	r3, [pc, #176]	; (801ae74 <plug_holes+0x140>)
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	68fa      	ldr	r2, [r7, #12]
 801adc6:	429a      	cmp	r2, r3
 801adc8:	d102      	bne.n	801add0 <plug_holes+0x9c>
      lfree = mem;
 801adca:	4a2a      	ldr	r2, [pc, #168]	; (801ae74 <plug_holes+0x140>)
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801add0:	68fb      	ldr	r3, [r7, #12]
 801add2:	881a      	ldrh	r2, [r3, #0]
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801add8:	68fb      	ldr	r3, [r7, #12]
 801adda:	881b      	ldrh	r3, [r3, #0]
 801addc:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 801ade0:	d00a      	beq.n	801adf8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801ade2:	68fb      	ldr	r3, [r7, #12]
 801ade4:	881b      	ldrh	r3, [r3, #0]
 801ade6:	4618      	mov	r0, r3
 801ade8:	f7ff ff80 	bl	801acec <ptr_to_mem>
 801adec:	4604      	mov	r4, r0
 801adee:	6878      	ldr	r0, [r7, #4]
 801adf0:	f7ff ff8e 	bl	801ad10 <mem_to_ptr>
 801adf4:	4603      	mov	r3, r0
 801adf6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	885b      	ldrh	r3, [r3, #2]
 801adfc:	4618      	mov	r0, r3
 801adfe:	f7ff ff75 	bl	801acec <ptr_to_mem>
 801ae02:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801ae04:	68ba      	ldr	r2, [r7, #8]
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	429a      	cmp	r2, r3
 801ae0a:	d01f      	beq.n	801ae4c <plug_holes+0x118>
 801ae0c:	68bb      	ldr	r3, [r7, #8]
 801ae0e:	791b      	ldrb	r3, [r3, #4]
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	d11b      	bne.n	801ae4c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801ae14:	4b17      	ldr	r3, [pc, #92]	; (801ae74 <plug_holes+0x140>)
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	687a      	ldr	r2, [r7, #4]
 801ae1a:	429a      	cmp	r2, r3
 801ae1c:	d102      	bne.n	801ae24 <plug_holes+0xf0>
      lfree = pmem;
 801ae1e:	4a15      	ldr	r2, [pc, #84]	; (801ae74 <plug_holes+0x140>)
 801ae20:	68bb      	ldr	r3, [r7, #8]
 801ae22:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	881a      	ldrh	r2, [r3, #0]
 801ae28:	68bb      	ldr	r3, [r7, #8]
 801ae2a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	881b      	ldrh	r3, [r3, #0]
 801ae30:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 801ae34:	d00a      	beq.n	801ae4c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	881b      	ldrh	r3, [r3, #0]
 801ae3a:	4618      	mov	r0, r3
 801ae3c:	f7ff ff56 	bl	801acec <ptr_to_mem>
 801ae40:	4604      	mov	r4, r0
 801ae42:	68b8      	ldr	r0, [r7, #8]
 801ae44:	f7ff ff64 	bl	801ad10 <mem_to_ptr>
 801ae48:	4603      	mov	r3, r0
 801ae4a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801ae4c:	bf00      	nop
 801ae4e:	3714      	adds	r7, #20
 801ae50:	46bd      	mov	sp, r7
 801ae52:	bd90      	pop	{r4, r7, pc}
 801ae54:	200059e0 	.word	0x200059e0
 801ae58:	0802d6f8 	.word	0x0802d6f8
 801ae5c:	0802d728 	.word	0x0802d728
 801ae60:	0802d740 	.word	0x0802d740
 801ae64:	200059e4 	.word	0x200059e4
 801ae68:	0802d768 	.word	0x0802d768
 801ae6c:	0802d784 	.word	0x0802d784
 801ae70:	0802d7a0 	.word	0x0802d7a0
 801ae74:	200059ec 	.word	0x200059ec

0801ae78 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801ae78:	b580      	push	{r7, lr}
 801ae7a:	b082      	sub	sp, #8
 801ae7c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801ae7e:	4b1f      	ldr	r3, [pc, #124]	; (801aefc <mem_init+0x84>)
 801ae80:	3303      	adds	r3, #3
 801ae82:	f023 0303 	bic.w	r3, r3, #3
 801ae86:	461a      	mov	r2, r3
 801ae88:	4b1d      	ldr	r3, [pc, #116]	; (801af00 <mem_init+0x88>)
 801ae8a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801ae8c:	4b1c      	ldr	r3, [pc, #112]	; (801af00 <mem_init+0x88>)
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 801ae98:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	2200      	movs	r2, #0
 801ae9e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	2200      	movs	r2, #0
 801aea4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801aea6:	f44f 40f0 	mov.w	r0, #30720	; 0x7800
 801aeaa:	f7ff ff1f 	bl	801acec <ptr_to_mem>
 801aeae:	4603      	mov	r3, r0
 801aeb0:	4a14      	ldr	r2, [pc, #80]	; (801af04 <mem_init+0x8c>)
 801aeb2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801aeb4:	4b13      	ldr	r3, [pc, #76]	; (801af04 <mem_init+0x8c>)
 801aeb6:	681b      	ldr	r3, [r3, #0]
 801aeb8:	2201      	movs	r2, #1
 801aeba:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801aebc:	4b11      	ldr	r3, [pc, #68]	; (801af04 <mem_init+0x8c>)
 801aebe:	681b      	ldr	r3, [r3, #0]
 801aec0:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 801aec4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801aec6:	4b0f      	ldr	r3, [pc, #60]	; (801af04 <mem_init+0x8c>)
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 801aece:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801aed0:	4b0b      	ldr	r3, [pc, #44]	; (801af00 <mem_init+0x88>)
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	4a0c      	ldr	r2, [pc, #48]	; (801af08 <mem_init+0x90>)
 801aed6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801aed8:	480c      	ldr	r0, [pc, #48]	; (801af0c <mem_init+0x94>)
 801aeda:	f00b f893 	bl	8026004 <sys_mutex_new>
 801aede:	4603      	mov	r3, r0
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	d006      	beq.n	801aef2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801aee4:	4b0a      	ldr	r3, [pc, #40]	; (801af10 <mem_init+0x98>)
 801aee6:	f240 221f 	movw	r2, #543	; 0x21f
 801aeea:	490a      	ldr	r1, [pc, #40]	; (801af14 <mem_init+0x9c>)
 801aeec:	480a      	ldr	r0, [pc, #40]	; (801af18 <mem_init+0xa0>)
 801aeee:	f00b feb3 	bl	8026c58 <iprintf>
  }
}
 801aef2:	bf00      	nop
 801aef4:	3708      	adds	r7, #8
 801aef6:	46bd      	mov	sp, r7
 801aef8:	bd80      	pop	{r7, pc}
 801aefa:	bf00      	nop
 801aefc:	20012bf0 	.word	0x20012bf0
 801af00:	200059e0 	.word	0x200059e0
 801af04:	200059e4 	.word	0x200059e4
 801af08:	200059ec 	.word	0x200059ec
 801af0c:	200059e8 	.word	0x200059e8
 801af10:	0802d6f8 	.word	0x0802d6f8
 801af14:	0802d7cc 	.word	0x0802d7cc
 801af18:	0802d740 	.word	0x0802d740

0801af1c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801af1c:	b580      	push	{r7, lr}
 801af1e:	b086      	sub	sp, #24
 801af20:	af00      	add	r7, sp, #0
 801af22:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801af24:	6878      	ldr	r0, [r7, #4]
 801af26:	f7ff fef3 	bl	801ad10 <mem_to_ptr>
 801af2a:	4603      	mov	r3, r0
 801af2c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	881b      	ldrh	r3, [r3, #0]
 801af32:	4618      	mov	r0, r3
 801af34:	f7ff feda 	bl	801acec <ptr_to_mem>
 801af38:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	885b      	ldrh	r3, [r3, #2]
 801af3e:	4618      	mov	r0, r3
 801af40:	f7ff fed4 	bl	801acec <ptr_to_mem>
 801af44:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	881b      	ldrh	r3, [r3, #0]
 801af4a:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 801af4e:	d818      	bhi.n	801af82 <mem_link_valid+0x66>
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	885b      	ldrh	r3, [r3, #2]
 801af54:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 801af58:	d813      	bhi.n	801af82 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801af5e:	8afa      	ldrh	r2, [r7, #22]
 801af60:	429a      	cmp	r2, r3
 801af62:	d004      	beq.n	801af6e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801af64:	68fb      	ldr	r3, [r7, #12]
 801af66:	881b      	ldrh	r3, [r3, #0]
 801af68:	8afa      	ldrh	r2, [r7, #22]
 801af6a:	429a      	cmp	r2, r3
 801af6c:	d109      	bne.n	801af82 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801af6e:	4b08      	ldr	r3, [pc, #32]	; (801af90 <mem_link_valid+0x74>)
 801af70:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801af72:	693a      	ldr	r2, [r7, #16]
 801af74:	429a      	cmp	r2, r3
 801af76:	d006      	beq.n	801af86 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801af78:	693b      	ldr	r3, [r7, #16]
 801af7a:	885b      	ldrh	r3, [r3, #2]
 801af7c:	8afa      	ldrh	r2, [r7, #22]
 801af7e:	429a      	cmp	r2, r3
 801af80:	d001      	beq.n	801af86 <mem_link_valid+0x6a>
    return 0;
 801af82:	2300      	movs	r3, #0
 801af84:	e000      	b.n	801af88 <mem_link_valid+0x6c>
  }
  return 1;
 801af86:	2301      	movs	r3, #1
}
 801af88:	4618      	mov	r0, r3
 801af8a:	3718      	adds	r7, #24
 801af8c:	46bd      	mov	sp, r7
 801af8e:	bd80      	pop	{r7, pc}
 801af90:	200059e4 	.word	0x200059e4

0801af94 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801af94:	b580      	push	{r7, lr}
 801af96:	b088      	sub	sp, #32
 801af98:	af00      	add	r7, sp, #0
 801af9a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d070      	beq.n	801b084 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	f003 0303 	and.w	r3, r3, #3
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	d00d      	beq.n	801afc8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801afac:	4b37      	ldr	r3, [pc, #220]	; (801b08c <mem_free+0xf8>)
 801afae:	f240 2273 	movw	r2, #627	; 0x273
 801afb2:	4937      	ldr	r1, [pc, #220]	; (801b090 <mem_free+0xfc>)
 801afb4:	4837      	ldr	r0, [pc, #220]	; (801b094 <mem_free+0x100>)
 801afb6:	f00b fe4f 	bl	8026c58 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801afba:	f00b f881 	bl	80260c0 <sys_arch_protect>
 801afbe:	60f8      	str	r0, [r7, #12]
 801afc0:	68f8      	ldr	r0, [r7, #12]
 801afc2:	f00b f88b 	bl	80260dc <sys_arch_unprotect>
    return;
 801afc6:	e05e      	b.n	801b086 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	3b08      	subs	r3, #8
 801afcc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801afce:	4b32      	ldr	r3, [pc, #200]	; (801b098 <mem_free+0x104>)
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	69fa      	ldr	r2, [r7, #28]
 801afd4:	429a      	cmp	r2, r3
 801afd6:	d306      	bcc.n	801afe6 <mem_free+0x52>
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	f103 020c 	add.w	r2, r3, #12
 801afde:	4b2f      	ldr	r3, [pc, #188]	; (801b09c <mem_free+0x108>)
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	429a      	cmp	r2, r3
 801afe4:	d90d      	bls.n	801b002 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801afe6:	4b29      	ldr	r3, [pc, #164]	; (801b08c <mem_free+0xf8>)
 801afe8:	f240 227f 	movw	r2, #639	; 0x27f
 801afec:	492c      	ldr	r1, [pc, #176]	; (801b0a0 <mem_free+0x10c>)
 801afee:	4829      	ldr	r0, [pc, #164]	; (801b094 <mem_free+0x100>)
 801aff0:	f00b fe32 	bl	8026c58 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801aff4:	f00b f864 	bl	80260c0 <sys_arch_protect>
 801aff8:	6138      	str	r0, [r7, #16]
 801affa:	6938      	ldr	r0, [r7, #16]
 801affc:	f00b f86e 	bl	80260dc <sys_arch_unprotect>
    return;
 801b000:	e041      	b.n	801b086 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801b002:	4828      	ldr	r0, [pc, #160]	; (801b0a4 <mem_free+0x110>)
 801b004:	f00b f81a 	bl	802603c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801b008:	69fb      	ldr	r3, [r7, #28]
 801b00a:	791b      	ldrb	r3, [r3, #4]
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	d110      	bne.n	801b032 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801b010:	4b1e      	ldr	r3, [pc, #120]	; (801b08c <mem_free+0xf8>)
 801b012:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801b016:	4924      	ldr	r1, [pc, #144]	; (801b0a8 <mem_free+0x114>)
 801b018:	481e      	ldr	r0, [pc, #120]	; (801b094 <mem_free+0x100>)
 801b01a:	f00b fe1d 	bl	8026c58 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801b01e:	4821      	ldr	r0, [pc, #132]	; (801b0a4 <mem_free+0x110>)
 801b020:	f00b f81b 	bl	802605a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801b024:	f00b f84c 	bl	80260c0 <sys_arch_protect>
 801b028:	6178      	str	r0, [r7, #20]
 801b02a:	6978      	ldr	r0, [r7, #20]
 801b02c:	f00b f856 	bl	80260dc <sys_arch_unprotect>
    return;
 801b030:	e029      	b.n	801b086 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801b032:	69f8      	ldr	r0, [r7, #28]
 801b034:	f7ff ff72 	bl	801af1c <mem_link_valid>
 801b038:	4603      	mov	r3, r0
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d110      	bne.n	801b060 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801b03e:	4b13      	ldr	r3, [pc, #76]	; (801b08c <mem_free+0xf8>)
 801b040:	f240 2295 	movw	r2, #661	; 0x295
 801b044:	4919      	ldr	r1, [pc, #100]	; (801b0ac <mem_free+0x118>)
 801b046:	4813      	ldr	r0, [pc, #76]	; (801b094 <mem_free+0x100>)
 801b048:	f00b fe06 	bl	8026c58 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801b04c:	4815      	ldr	r0, [pc, #84]	; (801b0a4 <mem_free+0x110>)
 801b04e:	f00b f804 	bl	802605a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801b052:	f00b f835 	bl	80260c0 <sys_arch_protect>
 801b056:	61b8      	str	r0, [r7, #24]
 801b058:	69b8      	ldr	r0, [r7, #24]
 801b05a:	f00b f83f 	bl	80260dc <sys_arch_unprotect>
    return;
 801b05e:	e012      	b.n	801b086 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 801b060:	69fb      	ldr	r3, [r7, #28]
 801b062:	2200      	movs	r2, #0
 801b064:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801b066:	4b12      	ldr	r3, [pc, #72]	; (801b0b0 <mem_free+0x11c>)
 801b068:	681b      	ldr	r3, [r3, #0]
 801b06a:	69fa      	ldr	r2, [r7, #28]
 801b06c:	429a      	cmp	r2, r3
 801b06e:	d202      	bcs.n	801b076 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801b070:	4a0f      	ldr	r2, [pc, #60]	; (801b0b0 <mem_free+0x11c>)
 801b072:	69fb      	ldr	r3, [r7, #28]
 801b074:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801b076:	69f8      	ldr	r0, [r7, #28]
 801b078:	f7ff fe5c 	bl	801ad34 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801b07c:	4809      	ldr	r0, [pc, #36]	; (801b0a4 <mem_free+0x110>)
 801b07e:	f00a ffec 	bl	802605a <sys_mutex_unlock>
 801b082:	e000      	b.n	801b086 <mem_free+0xf2>
    return;
 801b084:	bf00      	nop
}
 801b086:	3720      	adds	r7, #32
 801b088:	46bd      	mov	sp, r7
 801b08a:	bd80      	pop	{r7, pc}
 801b08c:	0802d6f8 	.word	0x0802d6f8
 801b090:	0802d7e8 	.word	0x0802d7e8
 801b094:	0802d740 	.word	0x0802d740
 801b098:	200059e0 	.word	0x200059e0
 801b09c:	200059e4 	.word	0x200059e4
 801b0a0:	0802d80c 	.word	0x0802d80c
 801b0a4:	200059e8 	.word	0x200059e8
 801b0a8:	0802d828 	.word	0x0802d828
 801b0ac:	0802d850 	.word	0x0802d850
 801b0b0:	200059ec 	.word	0x200059ec

0801b0b4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801b0b4:	b580      	push	{r7, lr}
 801b0b6:	b088      	sub	sp, #32
 801b0b8:	af00      	add	r7, sp, #0
 801b0ba:	6078      	str	r0, [r7, #4]
 801b0bc:	460b      	mov	r3, r1
 801b0be:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801b0c0:	887b      	ldrh	r3, [r7, #2]
 801b0c2:	3303      	adds	r3, #3
 801b0c4:	b29b      	uxth	r3, r3
 801b0c6:	f023 0303 	bic.w	r3, r3, #3
 801b0ca:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801b0cc:	8bfb      	ldrh	r3, [r7, #30]
 801b0ce:	2b0b      	cmp	r3, #11
 801b0d0:	d801      	bhi.n	801b0d6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801b0d2:	230c      	movs	r3, #12
 801b0d4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801b0d6:	8bfb      	ldrh	r3, [r7, #30]
 801b0d8:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 801b0dc:	d803      	bhi.n	801b0e6 <mem_trim+0x32>
 801b0de:	8bfa      	ldrh	r2, [r7, #30]
 801b0e0:	887b      	ldrh	r3, [r7, #2]
 801b0e2:	429a      	cmp	r2, r3
 801b0e4:	d201      	bcs.n	801b0ea <mem_trim+0x36>
    return NULL;
 801b0e6:	2300      	movs	r3, #0
 801b0e8:	e0d8      	b.n	801b29c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801b0ea:	4b6e      	ldr	r3, [pc, #440]	; (801b2a4 <mem_trim+0x1f0>)
 801b0ec:	681b      	ldr	r3, [r3, #0]
 801b0ee:	687a      	ldr	r2, [r7, #4]
 801b0f0:	429a      	cmp	r2, r3
 801b0f2:	d304      	bcc.n	801b0fe <mem_trim+0x4a>
 801b0f4:	4b6c      	ldr	r3, [pc, #432]	; (801b2a8 <mem_trim+0x1f4>)
 801b0f6:	681b      	ldr	r3, [r3, #0]
 801b0f8:	687a      	ldr	r2, [r7, #4]
 801b0fa:	429a      	cmp	r2, r3
 801b0fc:	d306      	bcc.n	801b10c <mem_trim+0x58>
 801b0fe:	4b6b      	ldr	r3, [pc, #428]	; (801b2ac <mem_trim+0x1f8>)
 801b100:	f240 22d1 	movw	r2, #721	; 0x2d1
 801b104:	496a      	ldr	r1, [pc, #424]	; (801b2b0 <mem_trim+0x1fc>)
 801b106:	486b      	ldr	r0, [pc, #428]	; (801b2b4 <mem_trim+0x200>)
 801b108:	f00b fda6 	bl	8026c58 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801b10c:	4b65      	ldr	r3, [pc, #404]	; (801b2a4 <mem_trim+0x1f0>)
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	687a      	ldr	r2, [r7, #4]
 801b112:	429a      	cmp	r2, r3
 801b114:	d304      	bcc.n	801b120 <mem_trim+0x6c>
 801b116:	4b64      	ldr	r3, [pc, #400]	; (801b2a8 <mem_trim+0x1f4>)
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	687a      	ldr	r2, [r7, #4]
 801b11c:	429a      	cmp	r2, r3
 801b11e:	d307      	bcc.n	801b130 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801b120:	f00a ffce 	bl	80260c0 <sys_arch_protect>
 801b124:	60b8      	str	r0, [r7, #8]
 801b126:	68b8      	ldr	r0, [r7, #8]
 801b128:	f00a ffd8 	bl	80260dc <sys_arch_unprotect>
    return rmem;
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	e0b5      	b.n	801b29c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	3b08      	subs	r3, #8
 801b134:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801b136:	69b8      	ldr	r0, [r7, #24]
 801b138:	f7ff fdea 	bl	801ad10 <mem_to_ptr>
 801b13c:	4603      	mov	r3, r0
 801b13e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801b140:	69bb      	ldr	r3, [r7, #24]
 801b142:	881a      	ldrh	r2, [r3, #0]
 801b144:	8afb      	ldrh	r3, [r7, #22]
 801b146:	1ad3      	subs	r3, r2, r3
 801b148:	b29b      	uxth	r3, r3
 801b14a:	3b08      	subs	r3, #8
 801b14c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801b14e:	8bfa      	ldrh	r2, [r7, #30]
 801b150:	8abb      	ldrh	r3, [r7, #20]
 801b152:	429a      	cmp	r2, r3
 801b154:	d906      	bls.n	801b164 <mem_trim+0xb0>
 801b156:	4b55      	ldr	r3, [pc, #340]	; (801b2ac <mem_trim+0x1f8>)
 801b158:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801b15c:	4956      	ldr	r1, [pc, #344]	; (801b2b8 <mem_trim+0x204>)
 801b15e:	4855      	ldr	r0, [pc, #340]	; (801b2b4 <mem_trim+0x200>)
 801b160:	f00b fd7a 	bl	8026c58 <iprintf>
  if (newsize > size) {
 801b164:	8bfa      	ldrh	r2, [r7, #30]
 801b166:	8abb      	ldrh	r3, [r7, #20]
 801b168:	429a      	cmp	r2, r3
 801b16a:	d901      	bls.n	801b170 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801b16c:	2300      	movs	r3, #0
 801b16e:	e095      	b.n	801b29c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 801b170:	8bfa      	ldrh	r2, [r7, #30]
 801b172:	8abb      	ldrh	r3, [r7, #20]
 801b174:	429a      	cmp	r2, r3
 801b176:	d101      	bne.n	801b17c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	e08f      	b.n	801b29c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801b17c:	484f      	ldr	r0, [pc, #316]	; (801b2bc <mem_trim+0x208>)
 801b17e:	f00a ff5d 	bl	802603c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801b182:	69bb      	ldr	r3, [r7, #24]
 801b184:	881b      	ldrh	r3, [r3, #0]
 801b186:	4618      	mov	r0, r3
 801b188:	f7ff fdb0 	bl	801acec <ptr_to_mem>
 801b18c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801b18e:	693b      	ldr	r3, [r7, #16]
 801b190:	791b      	ldrb	r3, [r3, #4]
 801b192:	2b00      	cmp	r3, #0
 801b194:	d13f      	bne.n	801b216 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b196:	69bb      	ldr	r3, [r7, #24]
 801b198:	881b      	ldrh	r3, [r3, #0]
 801b19a:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 801b19e:	d106      	bne.n	801b1ae <mem_trim+0xfa>
 801b1a0:	4b42      	ldr	r3, [pc, #264]	; (801b2ac <mem_trim+0x1f8>)
 801b1a2:	f240 22f5 	movw	r2, #757	; 0x2f5
 801b1a6:	4946      	ldr	r1, [pc, #280]	; (801b2c0 <mem_trim+0x20c>)
 801b1a8:	4842      	ldr	r0, [pc, #264]	; (801b2b4 <mem_trim+0x200>)
 801b1aa:	f00b fd55 	bl	8026c58 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801b1ae:	693b      	ldr	r3, [r7, #16]
 801b1b0:	881b      	ldrh	r3, [r3, #0]
 801b1b2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b1b4:	8afa      	ldrh	r2, [r7, #22]
 801b1b6:	8bfb      	ldrh	r3, [r7, #30]
 801b1b8:	4413      	add	r3, r2
 801b1ba:	b29b      	uxth	r3, r3
 801b1bc:	3308      	adds	r3, #8
 801b1be:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801b1c0:	4b40      	ldr	r3, [pc, #256]	; (801b2c4 <mem_trim+0x210>)
 801b1c2:	681b      	ldr	r3, [r3, #0]
 801b1c4:	693a      	ldr	r2, [r7, #16]
 801b1c6:	429a      	cmp	r2, r3
 801b1c8:	d106      	bne.n	801b1d8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801b1ca:	89fb      	ldrh	r3, [r7, #14]
 801b1cc:	4618      	mov	r0, r3
 801b1ce:	f7ff fd8d 	bl	801acec <ptr_to_mem>
 801b1d2:	4603      	mov	r3, r0
 801b1d4:	4a3b      	ldr	r2, [pc, #236]	; (801b2c4 <mem_trim+0x210>)
 801b1d6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801b1d8:	89fb      	ldrh	r3, [r7, #14]
 801b1da:	4618      	mov	r0, r3
 801b1dc:	f7ff fd86 	bl	801acec <ptr_to_mem>
 801b1e0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801b1e2:	693b      	ldr	r3, [r7, #16]
 801b1e4:	2200      	movs	r2, #0
 801b1e6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801b1e8:	693b      	ldr	r3, [r7, #16]
 801b1ea:	89ba      	ldrh	r2, [r7, #12]
 801b1ec:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801b1ee:	693b      	ldr	r3, [r7, #16]
 801b1f0:	8afa      	ldrh	r2, [r7, #22]
 801b1f2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801b1f4:	69bb      	ldr	r3, [r7, #24]
 801b1f6:	89fa      	ldrh	r2, [r7, #14]
 801b1f8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b1fa:	693b      	ldr	r3, [r7, #16]
 801b1fc:	881b      	ldrh	r3, [r3, #0]
 801b1fe:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 801b202:	d047      	beq.n	801b294 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801b204:	693b      	ldr	r3, [r7, #16]
 801b206:	881b      	ldrh	r3, [r3, #0]
 801b208:	4618      	mov	r0, r3
 801b20a:	f7ff fd6f 	bl	801acec <ptr_to_mem>
 801b20e:	4602      	mov	r2, r0
 801b210:	89fb      	ldrh	r3, [r7, #14]
 801b212:	8053      	strh	r3, [r2, #2]
 801b214:	e03e      	b.n	801b294 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801b216:	8bfb      	ldrh	r3, [r7, #30]
 801b218:	f103 0214 	add.w	r2, r3, #20
 801b21c:	8abb      	ldrh	r3, [r7, #20]
 801b21e:	429a      	cmp	r2, r3
 801b220:	d838      	bhi.n	801b294 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b222:	8afa      	ldrh	r2, [r7, #22]
 801b224:	8bfb      	ldrh	r3, [r7, #30]
 801b226:	4413      	add	r3, r2
 801b228:	b29b      	uxth	r3, r3
 801b22a:	3308      	adds	r3, #8
 801b22c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b22e:	69bb      	ldr	r3, [r7, #24]
 801b230:	881b      	ldrh	r3, [r3, #0]
 801b232:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 801b236:	d106      	bne.n	801b246 <mem_trim+0x192>
 801b238:	4b1c      	ldr	r3, [pc, #112]	; (801b2ac <mem_trim+0x1f8>)
 801b23a:	f240 3216 	movw	r2, #790	; 0x316
 801b23e:	4920      	ldr	r1, [pc, #128]	; (801b2c0 <mem_trim+0x20c>)
 801b240:	481c      	ldr	r0, [pc, #112]	; (801b2b4 <mem_trim+0x200>)
 801b242:	f00b fd09 	bl	8026c58 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801b246:	89fb      	ldrh	r3, [r7, #14]
 801b248:	4618      	mov	r0, r3
 801b24a:	f7ff fd4f 	bl	801acec <ptr_to_mem>
 801b24e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801b250:	4b1c      	ldr	r3, [pc, #112]	; (801b2c4 <mem_trim+0x210>)
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	693a      	ldr	r2, [r7, #16]
 801b256:	429a      	cmp	r2, r3
 801b258:	d202      	bcs.n	801b260 <mem_trim+0x1ac>
      lfree = mem2;
 801b25a:	4a1a      	ldr	r2, [pc, #104]	; (801b2c4 <mem_trim+0x210>)
 801b25c:	693b      	ldr	r3, [r7, #16]
 801b25e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801b260:	693b      	ldr	r3, [r7, #16]
 801b262:	2200      	movs	r2, #0
 801b264:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801b266:	69bb      	ldr	r3, [r7, #24]
 801b268:	881a      	ldrh	r2, [r3, #0]
 801b26a:	693b      	ldr	r3, [r7, #16]
 801b26c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801b26e:	693b      	ldr	r3, [r7, #16]
 801b270:	8afa      	ldrh	r2, [r7, #22]
 801b272:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801b274:	69bb      	ldr	r3, [r7, #24]
 801b276:	89fa      	ldrh	r2, [r7, #14]
 801b278:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b27a:	693b      	ldr	r3, [r7, #16]
 801b27c:	881b      	ldrh	r3, [r3, #0]
 801b27e:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 801b282:	d007      	beq.n	801b294 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801b284:	693b      	ldr	r3, [r7, #16]
 801b286:	881b      	ldrh	r3, [r3, #0]
 801b288:	4618      	mov	r0, r3
 801b28a:	f7ff fd2f 	bl	801acec <ptr_to_mem>
 801b28e:	4602      	mov	r2, r0
 801b290:	89fb      	ldrh	r3, [r7, #14]
 801b292:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801b294:	4809      	ldr	r0, [pc, #36]	; (801b2bc <mem_trim+0x208>)
 801b296:	f00a fee0 	bl	802605a <sys_mutex_unlock>
  return rmem;
 801b29a:	687b      	ldr	r3, [r7, #4]
}
 801b29c:	4618      	mov	r0, r3
 801b29e:	3720      	adds	r7, #32
 801b2a0:	46bd      	mov	sp, r7
 801b2a2:	bd80      	pop	{r7, pc}
 801b2a4:	200059e0 	.word	0x200059e0
 801b2a8:	200059e4 	.word	0x200059e4
 801b2ac:	0802d6f8 	.word	0x0802d6f8
 801b2b0:	0802d884 	.word	0x0802d884
 801b2b4:	0802d740 	.word	0x0802d740
 801b2b8:	0802d89c 	.word	0x0802d89c
 801b2bc:	200059e8 	.word	0x200059e8
 801b2c0:	0802d8bc 	.word	0x0802d8bc
 801b2c4:	200059ec 	.word	0x200059ec

0801b2c8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801b2c8:	b580      	push	{r7, lr}
 801b2ca:	b088      	sub	sp, #32
 801b2cc:	af00      	add	r7, sp, #0
 801b2ce:	4603      	mov	r3, r0
 801b2d0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801b2d2:	88fb      	ldrh	r3, [r7, #6]
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d101      	bne.n	801b2dc <mem_malloc+0x14>
    return NULL;
 801b2d8:	2300      	movs	r3, #0
 801b2da:	e0e2      	b.n	801b4a2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801b2dc:	88fb      	ldrh	r3, [r7, #6]
 801b2de:	3303      	adds	r3, #3
 801b2e0:	b29b      	uxth	r3, r3
 801b2e2:	f023 0303 	bic.w	r3, r3, #3
 801b2e6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801b2e8:	8bbb      	ldrh	r3, [r7, #28]
 801b2ea:	2b0b      	cmp	r3, #11
 801b2ec:	d801      	bhi.n	801b2f2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801b2ee:	230c      	movs	r3, #12
 801b2f0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801b2f2:	8bbb      	ldrh	r3, [r7, #28]
 801b2f4:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 801b2f8:	d803      	bhi.n	801b302 <mem_malloc+0x3a>
 801b2fa:	8bba      	ldrh	r2, [r7, #28]
 801b2fc:	88fb      	ldrh	r3, [r7, #6]
 801b2fe:	429a      	cmp	r2, r3
 801b300:	d201      	bcs.n	801b306 <mem_malloc+0x3e>
    return NULL;
 801b302:	2300      	movs	r3, #0
 801b304:	e0cd      	b.n	801b4a2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801b306:	4869      	ldr	r0, [pc, #420]	; (801b4ac <mem_malloc+0x1e4>)
 801b308:	f00a fe98 	bl	802603c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b30c:	4b68      	ldr	r3, [pc, #416]	; (801b4b0 <mem_malloc+0x1e8>)
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	4618      	mov	r0, r3
 801b312:	f7ff fcfd 	bl	801ad10 <mem_to_ptr>
 801b316:	4603      	mov	r3, r0
 801b318:	83fb      	strh	r3, [r7, #30]
 801b31a:	e0b7      	b.n	801b48c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801b31c:	8bfb      	ldrh	r3, [r7, #30]
 801b31e:	4618      	mov	r0, r3
 801b320:	f7ff fce4 	bl	801acec <ptr_to_mem>
 801b324:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801b326:	697b      	ldr	r3, [r7, #20]
 801b328:	791b      	ldrb	r3, [r3, #4]
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	f040 80a7 	bne.w	801b47e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b330:	697b      	ldr	r3, [r7, #20]
 801b332:	881b      	ldrh	r3, [r3, #0]
 801b334:	461a      	mov	r2, r3
 801b336:	8bfb      	ldrh	r3, [r7, #30]
 801b338:	1ad3      	subs	r3, r2, r3
 801b33a:	f1a3 0208 	sub.w	r2, r3, #8
 801b33e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801b340:	429a      	cmp	r2, r3
 801b342:	f0c0 809c 	bcc.w	801b47e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801b346:	697b      	ldr	r3, [r7, #20]
 801b348:	881b      	ldrh	r3, [r3, #0]
 801b34a:	461a      	mov	r2, r3
 801b34c:	8bfb      	ldrh	r3, [r7, #30]
 801b34e:	1ad3      	subs	r3, r2, r3
 801b350:	f1a3 0208 	sub.w	r2, r3, #8
 801b354:	8bbb      	ldrh	r3, [r7, #28]
 801b356:	3314      	adds	r3, #20
 801b358:	429a      	cmp	r2, r3
 801b35a:	d333      	bcc.n	801b3c4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801b35c:	8bfa      	ldrh	r2, [r7, #30]
 801b35e:	8bbb      	ldrh	r3, [r7, #28]
 801b360:	4413      	add	r3, r2
 801b362:	b29b      	uxth	r3, r3
 801b364:	3308      	adds	r3, #8
 801b366:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801b368:	8a7b      	ldrh	r3, [r7, #18]
 801b36a:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 801b36e:	d106      	bne.n	801b37e <mem_malloc+0xb6>
 801b370:	4b50      	ldr	r3, [pc, #320]	; (801b4b4 <mem_malloc+0x1ec>)
 801b372:	f240 3287 	movw	r2, #903	; 0x387
 801b376:	4950      	ldr	r1, [pc, #320]	; (801b4b8 <mem_malloc+0x1f0>)
 801b378:	4850      	ldr	r0, [pc, #320]	; (801b4bc <mem_malloc+0x1f4>)
 801b37a:	f00b fc6d 	bl	8026c58 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801b37e:	8a7b      	ldrh	r3, [r7, #18]
 801b380:	4618      	mov	r0, r3
 801b382:	f7ff fcb3 	bl	801acec <ptr_to_mem>
 801b386:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	2200      	movs	r2, #0
 801b38c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801b38e:	697b      	ldr	r3, [r7, #20]
 801b390:	881a      	ldrh	r2, [r3, #0]
 801b392:	68fb      	ldr	r3, [r7, #12]
 801b394:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801b396:	68fb      	ldr	r3, [r7, #12]
 801b398:	8bfa      	ldrh	r2, [r7, #30]
 801b39a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801b39c:	697b      	ldr	r3, [r7, #20]
 801b39e:	8a7a      	ldrh	r2, [r7, #18]
 801b3a0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801b3a2:	697b      	ldr	r3, [r7, #20]
 801b3a4:	2201      	movs	r2, #1
 801b3a6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801b3a8:	68fb      	ldr	r3, [r7, #12]
 801b3aa:	881b      	ldrh	r3, [r3, #0]
 801b3ac:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 801b3b0:	d00b      	beq.n	801b3ca <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801b3b2:	68fb      	ldr	r3, [r7, #12]
 801b3b4:	881b      	ldrh	r3, [r3, #0]
 801b3b6:	4618      	mov	r0, r3
 801b3b8:	f7ff fc98 	bl	801acec <ptr_to_mem>
 801b3bc:	4602      	mov	r2, r0
 801b3be:	8a7b      	ldrh	r3, [r7, #18]
 801b3c0:	8053      	strh	r3, [r2, #2]
 801b3c2:	e002      	b.n	801b3ca <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801b3c4:	697b      	ldr	r3, [r7, #20]
 801b3c6:	2201      	movs	r2, #1
 801b3c8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801b3ca:	4b39      	ldr	r3, [pc, #228]	; (801b4b0 <mem_malloc+0x1e8>)
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	697a      	ldr	r2, [r7, #20]
 801b3d0:	429a      	cmp	r2, r3
 801b3d2:	d127      	bne.n	801b424 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801b3d4:	4b36      	ldr	r3, [pc, #216]	; (801b4b0 <mem_malloc+0x1e8>)
 801b3d6:	681b      	ldr	r3, [r3, #0]
 801b3d8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801b3da:	e005      	b.n	801b3e8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801b3dc:	69bb      	ldr	r3, [r7, #24]
 801b3de:	881b      	ldrh	r3, [r3, #0]
 801b3e0:	4618      	mov	r0, r3
 801b3e2:	f7ff fc83 	bl	801acec <ptr_to_mem>
 801b3e6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801b3e8:	69bb      	ldr	r3, [r7, #24]
 801b3ea:	791b      	ldrb	r3, [r3, #4]
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	d004      	beq.n	801b3fa <mem_malloc+0x132>
 801b3f0:	4b33      	ldr	r3, [pc, #204]	; (801b4c0 <mem_malloc+0x1f8>)
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	69ba      	ldr	r2, [r7, #24]
 801b3f6:	429a      	cmp	r2, r3
 801b3f8:	d1f0      	bne.n	801b3dc <mem_malloc+0x114>
          }
          lfree = cur;
 801b3fa:	4a2d      	ldr	r2, [pc, #180]	; (801b4b0 <mem_malloc+0x1e8>)
 801b3fc:	69bb      	ldr	r3, [r7, #24]
 801b3fe:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801b400:	4b2b      	ldr	r3, [pc, #172]	; (801b4b0 <mem_malloc+0x1e8>)
 801b402:	681a      	ldr	r2, [r3, #0]
 801b404:	4b2e      	ldr	r3, [pc, #184]	; (801b4c0 <mem_malloc+0x1f8>)
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	429a      	cmp	r2, r3
 801b40a:	d00b      	beq.n	801b424 <mem_malloc+0x15c>
 801b40c:	4b28      	ldr	r3, [pc, #160]	; (801b4b0 <mem_malloc+0x1e8>)
 801b40e:	681b      	ldr	r3, [r3, #0]
 801b410:	791b      	ldrb	r3, [r3, #4]
 801b412:	2b00      	cmp	r3, #0
 801b414:	d006      	beq.n	801b424 <mem_malloc+0x15c>
 801b416:	4b27      	ldr	r3, [pc, #156]	; (801b4b4 <mem_malloc+0x1ec>)
 801b418:	f240 32b5 	movw	r2, #949	; 0x3b5
 801b41c:	4929      	ldr	r1, [pc, #164]	; (801b4c4 <mem_malloc+0x1fc>)
 801b41e:	4827      	ldr	r0, [pc, #156]	; (801b4bc <mem_malloc+0x1f4>)
 801b420:	f00b fc1a 	bl	8026c58 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801b424:	4821      	ldr	r0, [pc, #132]	; (801b4ac <mem_malloc+0x1e4>)
 801b426:	f00a fe18 	bl	802605a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801b42a:	8bba      	ldrh	r2, [r7, #28]
 801b42c:	697b      	ldr	r3, [r7, #20]
 801b42e:	4413      	add	r3, r2
 801b430:	3308      	adds	r3, #8
 801b432:	4a23      	ldr	r2, [pc, #140]	; (801b4c0 <mem_malloc+0x1f8>)
 801b434:	6812      	ldr	r2, [r2, #0]
 801b436:	4293      	cmp	r3, r2
 801b438:	d906      	bls.n	801b448 <mem_malloc+0x180>
 801b43a:	4b1e      	ldr	r3, [pc, #120]	; (801b4b4 <mem_malloc+0x1ec>)
 801b43c:	f240 32b9 	movw	r2, #953	; 0x3b9
 801b440:	4921      	ldr	r1, [pc, #132]	; (801b4c8 <mem_malloc+0x200>)
 801b442:	481e      	ldr	r0, [pc, #120]	; (801b4bc <mem_malloc+0x1f4>)
 801b444:	f00b fc08 	bl	8026c58 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801b448:	697b      	ldr	r3, [r7, #20]
 801b44a:	f003 0303 	and.w	r3, r3, #3
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d006      	beq.n	801b460 <mem_malloc+0x198>
 801b452:	4b18      	ldr	r3, [pc, #96]	; (801b4b4 <mem_malloc+0x1ec>)
 801b454:	f240 32bb 	movw	r2, #955	; 0x3bb
 801b458:	491c      	ldr	r1, [pc, #112]	; (801b4cc <mem_malloc+0x204>)
 801b45a:	4818      	ldr	r0, [pc, #96]	; (801b4bc <mem_malloc+0x1f4>)
 801b45c:	f00b fbfc 	bl	8026c58 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801b460:	697b      	ldr	r3, [r7, #20]
 801b462:	f003 0303 	and.w	r3, r3, #3
 801b466:	2b00      	cmp	r3, #0
 801b468:	d006      	beq.n	801b478 <mem_malloc+0x1b0>
 801b46a:	4b12      	ldr	r3, [pc, #72]	; (801b4b4 <mem_malloc+0x1ec>)
 801b46c:	f240 32bd 	movw	r2, #957	; 0x3bd
 801b470:	4917      	ldr	r1, [pc, #92]	; (801b4d0 <mem_malloc+0x208>)
 801b472:	4812      	ldr	r0, [pc, #72]	; (801b4bc <mem_malloc+0x1f4>)
 801b474:	f00b fbf0 	bl	8026c58 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801b478:	697b      	ldr	r3, [r7, #20]
 801b47a:	3308      	adds	r3, #8
 801b47c:	e011      	b.n	801b4a2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801b47e:	8bfb      	ldrh	r3, [r7, #30]
 801b480:	4618      	mov	r0, r3
 801b482:	f7ff fc33 	bl	801acec <ptr_to_mem>
 801b486:	4603      	mov	r3, r0
 801b488:	881b      	ldrh	r3, [r3, #0]
 801b48a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b48c:	8bfa      	ldrh	r2, [r7, #30]
 801b48e:	8bbb      	ldrh	r3, [r7, #28]
 801b490:	f5c3 43f0 	rsb	r3, r3, #30720	; 0x7800
 801b494:	429a      	cmp	r2, r3
 801b496:	f4ff af41 	bcc.w	801b31c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801b49a:	4804      	ldr	r0, [pc, #16]	; (801b4ac <mem_malloc+0x1e4>)
 801b49c:	f00a fddd 	bl	802605a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801b4a0:	2300      	movs	r3, #0
}
 801b4a2:	4618      	mov	r0, r3
 801b4a4:	3720      	adds	r7, #32
 801b4a6:	46bd      	mov	sp, r7
 801b4a8:	bd80      	pop	{r7, pc}
 801b4aa:	bf00      	nop
 801b4ac:	200059e8 	.word	0x200059e8
 801b4b0:	200059ec 	.word	0x200059ec
 801b4b4:	0802d6f8 	.word	0x0802d6f8
 801b4b8:	0802d8bc 	.word	0x0802d8bc
 801b4bc:	0802d740 	.word	0x0802d740
 801b4c0:	200059e4 	.word	0x200059e4
 801b4c4:	0802d8d0 	.word	0x0802d8d0
 801b4c8:	0802d8ec 	.word	0x0802d8ec
 801b4cc:	0802d91c 	.word	0x0802d91c
 801b4d0:	0802d94c 	.word	0x0802d94c

0801b4d4 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 801b4d4:	b580      	push	{r7, lr}
 801b4d6:	b084      	sub	sp, #16
 801b4d8:	af00      	add	r7, sp, #0
 801b4da:	4603      	mov	r3, r0
 801b4dc:	460a      	mov	r2, r1
 801b4de:	80fb      	strh	r3, [r7, #6]
 801b4e0:	4613      	mov	r3, r2
 801b4e2:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 801b4e4:	88fb      	ldrh	r3, [r7, #6]
 801b4e6:	88ba      	ldrh	r2, [r7, #4]
 801b4e8:	fb02 f303 	mul.w	r3, r2, r3
 801b4ec:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 801b4ee:	68fb      	ldr	r3, [r7, #12]
 801b4f0:	b29b      	uxth	r3, r3
 801b4f2:	461a      	mov	r2, r3
 801b4f4:	68fb      	ldr	r3, [r7, #12]
 801b4f6:	4293      	cmp	r3, r2
 801b4f8:	d001      	beq.n	801b4fe <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 801b4fa:	2300      	movs	r3, #0
 801b4fc:	e00e      	b.n	801b51c <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 801b4fe:	68fb      	ldr	r3, [r7, #12]
 801b500:	b29b      	uxth	r3, r3
 801b502:	4618      	mov	r0, r3
 801b504:	f7ff fee0 	bl	801b2c8 <mem_malloc>
 801b508:	60b8      	str	r0, [r7, #8]
  if (p) {
 801b50a:	68bb      	ldr	r3, [r7, #8]
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d004      	beq.n	801b51a <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 801b510:	68fa      	ldr	r2, [r7, #12]
 801b512:	2100      	movs	r1, #0
 801b514:	68b8      	ldr	r0, [r7, #8]
 801b516:	f00b f86f 	bl	80265f8 <memset>
  }
  return p;
 801b51a:	68bb      	ldr	r3, [r7, #8]
}
 801b51c:	4618      	mov	r0, r3
 801b51e:	3710      	adds	r7, #16
 801b520:	46bd      	mov	sp, r7
 801b522:	bd80      	pop	{r7, pc}

0801b524 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801b524:	b480      	push	{r7}
 801b526:	b085      	sub	sp, #20
 801b528:	af00      	add	r7, sp, #0
 801b52a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	689b      	ldr	r3, [r3, #8]
 801b530:	2200      	movs	r2, #0
 801b532:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	685b      	ldr	r3, [r3, #4]
 801b538:	3303      	adds	r3, #3
 801b53a:	f023 0303 	bic.w	r3, r3, #3
 801b53e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801b540:	2300      	movs	r3, #0
 801b542:	60fb      	str	r3, [r7, #12]
 801b544:	e011      	b.n	801b56a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	689b      	ldr	r3, [r3, #8]
 801b54a:	681a      	ldr	r2, [r3, #0]
 801b54c:	68bb      	ldr	r3, [r7, #8]
 801b54e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	689b      	ldr	r3, [r3, #8]
 801b554:	68ba      	ldr	r2, [r7, #8]
 801b556:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	881b      	ldrh	r3, [r3, #0]
 801b55c:	461a      	mov	r2, r3
 801b55e:	68bb      	ldr	r3, [r7, #8]
 801b560:	4413      	add	r3, r2
 801b562:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801b564:	68fb      	ldr	r3, [r7, #12]
 801b566:	3301      	adds	r3, #1
 801b568:	60fb      	str	r3, [r7, #12]
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	885b      	ldrh	r3, [r3, #2]
 801b56e:	461a      	mov	r2, r3
 801b570:	68fb      	ldr	r3, [r7, #12]
 801b572:	4293      	cmp	r3, r2
 801b574:	dbe7      	blt.n	801b546 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801b576:	bf00      	nop
 801b578:	bf00      	nop
 801b57a:	3714      	adds	r7, #20
 801b57c:	46bd      	mov	sp, r7
 801b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b582:	4770      	bx	lr

0801b584 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801b584:	b580      	push	{r7, lr}
 801b586:	b082      	sub	sp, #8
 801b588:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801b58a:	2300      	movs	r3, #0
 801b58c:	80fb      	strh	r3, [r7, #6]
 801b58e:	e009      	b.n	801b5a4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801b590:	88fb      	ldrh	r3, [r7, #6]
 801b592:	4a08      	ldr	r2, [pc, #32]	; (801b5b4 <memp_init+0x30>)
 801b594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b598:	4618      	mov	r0, r3
 801b59a:	f7ff ffc3 	bl	801b524 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801b59e:	88fb      	ldrh	r3, [r7, #6]
 801b5a0:	3301      	adds	r3, #1
 801b5a2:	80fb      	strh	r3, [r7, #6]
 801b5a4:	88fb      	ldrh	r3, [r7, #6]
 801b5a6:	2b0c      	cmp	r3, #12
 801b5a8:	d9f2      	bls.n	801b590 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801b5aa:	bf00      	nop
 801b5ac:	bf00      	nop
 801b5ae:	3708      	adds	r7, #8
 801b5b0:	46bd      	mov	sp, r7
 801b5b2:	bd80      	pop	{r7, pc}
 801b5b4:	08060870 	.word	0x08060870

0801b5b8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801b5b8:	b580      	push	{r7, lr}
 801b5ba:	b084      	sub	sp, #16
 801b5bc:	af00      	add	r7, sp, #0
 801b5be:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801b5c0:	f00a fd7e 	bl	80260c0 <sys_arch_protect>
 801b5c4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	689b      	ldr	r3, [r3, #8]
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801b5ce:	68bb      	ldr	r3, [r7, #8]
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d015      	beq.n	801b600 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	689b      	ldr	r3, [r3, #8]
 801b5d8:	68ba      	ldr	r2, [r7, #8]
 801b5da:	6812      	ldr	r2, [r2, #0]
 801b5dc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801b5de:	68bb      	ldr	r3, [r7, #8]
 801b5e0:	f003 0303 	and.w	r3, r3, #3
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d006      	beq.n	801b5f6 <do_memp_malloc_pool+0x3e>
 801b5e8:	4b09      	ldr	r3, [pc, #36]	; (801b610 <do_memp_malloc_pool+0x58>)
 801b5ea:	f44f 728c 	mov.w	r2, #280	; 0x118
 801b5ee:	4909      	ldr	r1, [pc, #36]	; (801b614 <do_memp_malloc_pool+0x5c>)
 801b5f0:	4809      	ldr	r0, [pc, #36]	; (801b618 <do_memp_malloc_pool+0x60>)
 801b5f2:	f00b fb31 	bl	8026c58 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801b5f6:	68f8      	ldr	r0, [r7, #12]
 801b5f8:	f00a fd70 	bl	80260dc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801b5fc:	68bb      	ldr	r3, [r7, #8]
 801b5fe:	e003      	b.n	801b608 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801b600:	68f8      	ldr	r0, [r7, #12]
 801b602:	f00a fd6b 	bl	80260dc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801b606:	2300      	movs	r3, #0
}
 801b608:	4618      	mov	r0, r3
 801b60a:	3710      	adds	r7, #16
 801b60c:	46bd      	mov	sp, r7
 801b60e:	bd80      	pop	{r7, pc}
 801b610:	0802d970 	.word	0x0802d970
 801b614:	0802d9a0 	.word	0x0802d9a0
 801b618:	0802d9c4 	.word	0x0802d9c4

0801b61c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801b61c:	b580      	push	{r7, lr}
 801b61e:	b084      	sub	sp, #16
 801b620:	af00      	add	r7, sp, #0
 801b622:	4603      	mov	r3, r0
 801b624:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801b626:	79fb      	ldrb	r3, [r7, #7]
 801b628:	2b0c      	cmp	r3, #12
 801b62a:	d908      	bls.n	801b63e <memp_malloc+0x22>
 801b62c:	4b0a      	ldr	r3, [pc, #40]	; (801b658 <memp_malloc+0x3c>)
 801b62e:	f240 1257 	movw	r2, #343	; 0x157
 801b632:	490a      	ldr	r1, [pc, #40]	; (801b65c <memp_malloc+0x40>)
 801b634:	480a      	ldr	r0, [pc, #40]	; (801b660 <memp_malloc+0x44>)
 801b636:	f00b fb0f 	bl	8026c58 <iprintf>
 801b63a:	2300      	movs	r3, #0
 801b63c:	e008      	b.n	801b650 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801b63e:	79fb      	ldrb	r3, [r7, #7]
 801b640:	4a08      	ldr	r2, [pc, #32]	; (801b664 <memp_malloc+0x48>)
 801b642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b646:	4618      	mov	r0, r3
 801b648:	f7ff ffb6 	bl	801b5b8 <do_memp_malloc_pool>
 801b64c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801b64e:	68fb      	ldr	r3, [r7, #12]
}
 801b650:	4618      	mov	r0, r3
 801b652:	3710      	adds	r7, #16
 801b654:	46bd      	mov	sp, r7
 801b656:	bd80      	pop	{r7, pc}
 801b658:	0802d970 	.word	0x0802d970
 801b65c:	0802da00 	.word	0x0802da00
 801b660:	0802d9c4 	.word	0x0802d9c4
 801b664:	08060870 	.word	0x08060870

0801b668 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801b668:	b580      	push	{r7, lr}
 801b66a:	b084      	sub	sp, #16
 801b66c:	af00      	add	r7, sp, #0
 801b66e:	6078      	str	r0, [r7, #4]
 801b670:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801b672:	683b      	ldr	r3, [r7, #0]
 801b674:	f003 0303 	and.w	r3, r3, #3
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d006      	beq.n	801b68a <do_memp_free_pool+0x22>
 801b67c:	4b0d      	ldr	r3, [pc, #52]	; (801b6b4 <do_memp_free_pool+0x4c>)
 801b67e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801b682:	490d      	ldr	r1, [pc, #52]	; (801b6b8 <do_memp_free_pool+0x50>)
 801b684:	480d      	ldr	r0, [pc, #52]	; (801b6bc <do_memp_free_pool+0x54>)
 801b686:	f00b fae7 	bl	8026c58 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801b68a:	683b      	ldr	r3, [r7, #0]
 801b68c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801b68e:	f00a fd17 	bl	80260c0 <sys_arch_protect>
 801b692:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	689b      	ldr	r3, [r3, #8]
 801b698:	681a      	ldr	r2, [r3, #0]
 801b69a:	68fb      	ldr	r3, [r7, #12]
 801b69c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	689b      	ldr	r3, [r3, #8]
 801b6a2:	68fa      	ldr	r2, [r7, #12]
 801b6a4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801b6a6:	68b8      	ldr	r0, [r7, #8]
 801b6a8:	f00a fd18 	bl	80260dc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801b6ac:	bf00      	nop
 801b6ae:	3710      	adds	r7, #16
 801b6b0:	46bd      	mov	sp, r7
 801b6b2:	bd80      	pop	{r7, pc}
 801b6b4:	0802d970 	.word	0x0802d970
 801b6b8:	0802da20 	.word	0x0802da20
 801b6bc:	0802d9c4 	.word	0x0802d9c4

0801b6c0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801b6c0:	b580      	push	{r7, lr}
 801b6c2:	b082      	sub	sp, #8
 801b6c4:	af00      	add	r7, sp, #0
 801b6c6:	4603      	mov	r3, r0
 801b6c8:	6039      	str	r1, [r7, #0]
 801b6ca:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801b6cc:	79fb      	ldrb	r3, [r7, #7]
 801b6ce:	2b0c      	cmp	r3, #12
 801b6d0:	d907      	bls.n	801b6e2 <memp_free+0x22>
 801b6d2:	4b0c      	ldr	r3, [pc, #48]	; (801b704 <memp_free+0x44>)
 801b6d4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801b6d8:	490b      	ldr	r1, [pc, #44]	; (801b708 <memp_free+0x48>)
 801b6da:	480c      	ldr	r0, [pc, #48]	; (801b70c <memp_free+0x4c>)
 801b6dc:	f00b fabc 	bl	8026c58 <iprintf>
 801b6e0:	e00c      	b.n	801b6fc <memp_free+0x3c>

  if (mem == NULL) {
 801b6e2:	683b      	ldr	r3, [r7, #0]
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	d008      	beq.n	801b6fa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801b6e8:	79fb      	ldrb	r3, [r7, #7]
 801b6ea:	4a09      	ldr	r2, [pc, #36]	; (801b710 <memp_free+0x50>)
 801b6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b6f0:	6839      	ldr	r1, [r7, #0]
 801b6f2:	4618      	mov	r0, r3
 801b6f4:	f7ff ffb8 	bl	801b668 <do_memp_free_pool>
 801b6f8:	e000      	b.n	801b6fc <memp_free+0x3c>
    return;
 801b6fa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801b6fc:	3708      	adds	r7, #8
 801b6fe:	46bd      	mov	sp, r7
 801b700:	bd80      	pop	{r7, pc}
 801b702:	bf00      	nop
 801b704:	0802d970 	.word	0x0802d970
 801b708:	0802da40 	.word	0x0802da40
 801b70c:	0802d9c4 	.word	0x0802d9c4
 801b710:	08060870 	.word	0x08060870

0801b714 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801b714:	b480      	push	{r7}
 801b716:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801b718:	bf00      	nop
 801b71a:	46bd      	mov	sp, r7
 801b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b720:	4770      	bx	lr
	...

0801b724 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801b724:	b580      	push	{r7, lr}
 801b726:	b086      	sub	sp, #24
 801b728:	af00      	add	r7, sp, #0
 801b72a:	60f8      	str	r0, [r7, #12]
 801b72c:	60b9      	str	r1, [r7, #8]
 801b72e:	607a      	str	r2, [r7, #4]
 801b730:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801b732:	68fb      	ldr	r3, [r7, #12]
 801b734:	2b00      	cmp	r3, #0
 801b736:	d108      	bne.n	801b74a <netif_add+0x26>
 801b738:	4b57      	ldr	r3, [pc, #348]	; (801b898 <netif_add+0x174>)
 801b73a:	f240 1227 	movw	r2, #295	; 0x127
 801b73e:	4957      	ldr	r1, [pc, #348]	; (801b89c <netif_add+0x178>)
 801b740:	4857      	ldr	r0, [pc, #348]	; (801b8a0 <netif_add+0x17c>)
 801b742:	f00b fa89 	bl	8026c58 <iprintf>
 801b746:	2300      	movs	r3, #0
 801b748:	e0a2      	b.n	801b890 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801b74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b74c:	2b00      	cmp	r3, #0
 801b74e:	d108      	bne.n	801b762 <netif_add+0x3e>
 801b750:	4b51      	ldr	r3, [pc, #324]	; (801b898 <netif_add+0x174>)
 801b752:	f44f 7294 	mov.w	r2, #296	; 0x128
 801b756:	4953      	ldr	r1, [pc, #332]	; (801b8a4 <netif_add+0x180>)
 801b758:	4851      	ldr	r0, [pc, #324]	; (801b8a0 <netif_add+0x17c>)
 801b75a:	f00b fa7d 	bl	8026c58 <iprintf>
 801b75e:	2300      	movs	r3, #0
 801b760:	e096      	b.n	801b890 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801b762:	68bb      	ldr	r3, [r7, #8]
 801b764:	2b00      	cmp	r3, #0
 801b766:	d101      	bne.n	801b76c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801b768:	4b4f      	ldr	r3, [pc, #316]	; (801b8a8 <netif_add+0x184>)
 801b76a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d101      	bne.n	801b776 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801b772:	4b4d      	ldr	r3, [pc, #308]	; (801b8a8 <netif_add+0x184>)
 801b774:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801b776:	683b      	ldr	r3, [r7, #0]
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d101      	bne.n	801b780 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801b77c:	4b4a      	ldr	r3, [pc, #296]	; (801b8a8 <netif_add+0x184>)
 801b77e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801b780:	68fb      	ldr	r3, [r7, #12]
 801b782:	2200      	movs	r2, #0
 801b784:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801b786:	68fb      	ldr	r3, [r7, #12]
 801b788:	2200      	movs	r2, #0
 801b78a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801b78c:	68fb      	ldr	r3, [r7, #12]
 801b78e:	2200      	movs	r2, #0
 801b790:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801b792:	68fb      	ldr	r3, [r7, #12]
 801b794:	4a45      	ldr	r2, [pc, #276]	; (801b8ac <netif_add+0x188>)
 801b796:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801b798:	68fb      	ldr	r3, [r7, #12]
 801b79a:	2200      	movs	r2, #0
 801b79c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801b79e:	68fb      	ldr	r3, [r7, #12]
 801b7a0:	2200      	movs	r2, #0
 801b7a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801b7a6:	68fb      	ldr	r3, [r7, #12]
 801b7a8:	2200      	movs	r2, #0
 801b7aa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801b7ac:	68fb      	ldr	r3, [r7, #12]
 801b7ae:	6a3a      	ldr	r2, [r7, #32]
 801b7b0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801b7b2:	4b3f      	ldr	r3, [pc, #252]	; (801b8b0 <netif_add+0x18c>)
 801b7b4:	781a      	ldrb	r2, [r3, #0]
 801b7b6:	68fb      	ldr	r3, [r7, #12]
 801b7b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b7c0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801b7c2:	683b      	ldr	r3, [r7, #0]
 801b7c4:	687a      	ldr	r2, [r7, #4]
 801b7c6:	68b9      	ldr	r1, [r7, #8]
 801b7c8:	68f8      	ldr	r0, [r7, #12]
 801b7ca:	f000 f913 	bl	801b9f4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801b7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7d0:	68f8      	ldr	r0, [r7, #12]
 801b7d2:	4798      	blx	r3
 801b7d4:	4603      	mov	r3, r0
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	d001      	beq.n	801b7de <netif_add+0xba>
    return NULL;
 801b7da:	2300      	movs	r3, #0
 801b7dc:	e058      	b.n	801b890 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801b7de:	68fb      	ldr	r3, [r7, #12]
 801b7e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b7e4:	2bff      	cmp	r3, #255	; 0xff
 801b7e6:	d103      	bne.n	801b7f0 <netif_add+0xcc>
        netif->num = 0;
 801b7e8:	68fb      	ldr	r3, [r7, #12]
 801b7ea:	2200      	movs	r2, #0
 801b7ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 801b7f0:	2300      	movs	r3, #0
 801b7f2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801b7f4:	4b2f      	ldr	r3, [pc, #188]	; (801b8b4 <netif_add+0x190>)
 801b7f6:	681b      	ldr	r3, [r3, #0]
 801b7f8:	617b      	str	r3, [r7, #20]
 801b7fa:	e02b      	b.n	801b854 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801b7fc:	697a      	ldr	r2, [r7, #20]
 801b7fe:	68fb      	ldr	r3, [r7, #12]
 801b800:	429a      	cmp	r2, r3
 801b802:	d106      	bne.n	801b812 <netif_add+0xee>
 801b804:	4b24      	ldr	r3, [pc, #144]	; (801b898 <netif_add+0x174>)
 801b806:	f240 128b 	movw	r2, #395	; 0x18b
 801b80a:	492b      	ldr	r1, [pc, #172]	; (801b8b8 <netif_add+0x194>)
 801b80c:	4824      	ldr	r0, [pc, #144]	; (801b8a0 <netif_add+0x17c>)
 801b80e:	f00b fa23 	bl	8026c58 <iprintf>
        num_netifs++;
 801b812:	693b      	ldr	r3, [r7, #16]
 801b814:	3301      	adds	r3, #1
 801b816:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801b818:	693b      	ldr	r3, [r7, #16]
 801b81a:	2bff      	cmp	r3, #255	; 0xff
 801b81c:	dd06      	ble.n	801b82c <netif_add+0x108>
 801b81e:	4b1e      	ldr	r3, [pc, #120]	; (801b898 <netif_add+0x174>)
 801b820:	f240 128d 	movw	r2, #397	; 0x18d
 801b824:	4925      	ldr	r1, [pc, #148]	; (801b8bc <netif_add+0x198>)
 801b826:	481e      	ldr	r0, [pc, #120]	; (801b8a0 <netif_add+0x17c>)
 801b828:	f00b fa16 	bl	8026c58 <iprintf>
        if (netif2->num == netif->num) {
 801b82c:	697b      	ldr	r3, [r7, #20]
 801b82e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b838:	429a      	cmp	r2, r3
 801b83a:	d108      	bne.n	801b84e <netif_add+0x12a>
          netif->num++;
 801b83c:	68fb      	ldr	r3, [r7, #12]
 801b83e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b842:	3301      	adds	r3, #1
 801b844:	b2da      	uxtb	r2, r3
 801b846:	68fb      	ldr	r3, [r7, #12]
 801b848:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 801b84c:	e005      	b.n	801b85a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801b84e:	697b      	ldr	r3, [r7, #20]
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	617b      	str	r3, [r7, #20]
 801b854:	697b      	ldr	r3, [r7, #20]
 801b856:	2b00      	cmp	r3, #0
 801b858:	d1d0      	bne.n	801b7fc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801b85a:	697b      	ldr	r3, [r7, #20]
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	d1be      	bne.n	801b7de <netif_add+0xba>
  }
  if (netif->num == 254) {
 801b860:	68fb      	ldr	r3, [r7, #12]
 801b862:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b866:	2bfe      	cmp	r3, #254	; 0xfe
 801b868:	d103      	bne.n	801b872 <netif_add+0x14e>
    netif_num = 0;
 801b86a:	4b11      	ldr	r3, [pc, #68]	; (801b8b0 <netif_add+0x18c>)
 801b86c:	2200      	movs	r2, #0
 801b86e:	701a      	strb	r2, [r3, #0]
 801b870:	e006      	b.n	801b880 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801b872:	68fb      	ldr	r3, [r7, #12]
 801b874:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b878:	3301      	adds	r3, #1
 801b87a:	b2da      	uxtb	r2, r3
 801b87c:	4b0c      	ldr	r3, [pc, #48]	; (801b8b0 <netif_add+0x18c>)
 801b87e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801b880:	4b0c      	ldr	r3, [pc, #48]	; (801b8b4 <netif_add+0x190>)
 801b882:	681a      	ldr	r2, [r3, #0]
 801b884:	68fb      	ldr	r3, [r7, #12]
 801b886:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801b888:	4a0a      	ldr	r2, [pc, #40]	; (801b8b4 <netif_add+0x190>)
 801b88a:	68fb      	ldr	r3, [r7, #12]
 801b88c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801b88e:	68fb      	ldr	r3, [r7, #12]
}
 801b890:	4618      	mov	r0, r3
 801b892:	3718      	adds	r7, #24
 801b894:	46bd      	mov	sp, r7
 801b896:	bd80      	pop	{r7, pc}
 801b898:	0802da5c 	.word	0x0802da5c
 801b89c:	0802daf0 	.word	0x0802daf0
 801b8a0:	0802daac 	.word	0x0802daac
 801b8a4:	0802db0c 	.word	0x0802db0c
 801b8a8:	080608e4 	.word	0x080608e4
 801b8ac:	0801bccf 	.word	0x0801bccf
 801b8b0:	20005a24 	.word	0x20005a24
 801b8b4:	2001d50c 	.word	0x2001d50c
 801b8b8:	0802db30 	.word	0x0802db30
 801b8bc:	0802db44 	.word	0x0802db44

0801b8c0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b8c0:	b580      	push	{r7, lr}
 801b8c2:	b082      	sub	sp, #8
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	6078      	str	r0, [r7, #4]
 801b8c8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801b8ca:	6839      	ldr	r1, [r7, #0]
 801b8cc:	6878      	ldr	r0, [r7, #4]
 801b8ce:	f002 ffaf 	bl	801e830 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801b8d2:	6839      	ldr	r1, [r7, #0]
 801b8d4:	6878      	ldr	r0, [r7, #4]
 801b8d6:	f008 f80b 	bl	80238f0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801b8da:	bf00      	nop
 801b8dc:	3708      	adds	r7, #8
 801b8de:	46bd      	mov	sp, r7
 801b8e0:	bd80      	pop	{r7, pc}
	...

0801b8e4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801b8e4:	b580      	push	{r7, lr}
 801b8e6:	b086      	sub	sp, #24
 801b8e8:	af00      	add	r7, sp, #0
 801b8ea:	60f8      	str	r0, [r7, #12]
 801b8ec:	60b9      	str	r1, [r7, #8]
 801b8ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801b8f0:	68bb      	ldr	r3, [r7, #8]
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	d106      	bne.n	801b904 <netif_do_set_ipaddr+0x20>
 801b8f6:	4b1d      	ldr	r3, [pc, #116]	; (801b96c <netif_do_set_ipaddr+0x88>)
 801b8f8:	f240 12cb 	movw	r2, #459	; 0x1cb
 801b8fc:	491c      	ldr	r1, [pc, #112]	; (801b970 <netif_do_set_ipaddr+0x8c>)
 801b8fe:	481d      	ldr	r0, [pc, #116]	; (801b974 <netif_do_set_ipaddr+0x90>)
 801b900:	f00b f9aa 	bl	8026c58 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	2b00      	cmp	r3, #0
 801b908:	d106      	bne.n	801b918 <netif_do_set_ipaddr+0x34>
 801b90a:	4b18      	ldr	r3, [pc, #96]	; (801b96c <netif_do_set_ipaddr+0x88>)
 801b90c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801b910:	4917      	ldr	r1, [pc, #92]	; (801b970 <netif_do_set_ipaddr+0x8c>)
 801b912:	4818      	ldr	r0, [pc, #96]	; (801b974 <netif_do_set_ipaddr+0x90>)
 801b914:	f00b f9a0 	bl	8026c58 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801b918:	68bb      	ldr	r3, [r7, #8]
 801b91a:	681a      	ldr	r2, [r3, #0]
 801b91c:	68fb      	ldr	r3, [r7, #12]
 801b91e:	3304      	adds	r3, #4
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	429a      	cmp	r2, r3
 801b924:	d01c      	beq.n	801b960 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801b926:	68bb      	ldr	r3, [r7, #8]
 801b928:	681b      	ldr	r3, [r3, #0]
 801b92a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801b92c:	68fb      	ldr	r3, [r7, #12]
 801b92e:	3304      	adds	r3, #4
 801b930:	681a      	ldr	r2, [r3, #0]
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801b936:	f107 0314 	add.w	r3, r7, #20
 801b93a:	4619      	mov	r1, r3
 801b93c:	6878      	ldr	r0, [r7, #4]
 801b93e:	f7ff ffbf 	bl	801b8c0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801b942:	68bb      	ldr	r3, [r7, #8]
 801b944:	2b00      	cmp	r3, #0
 801b946:	d002      	beq.n	801b94e <netif_do_set_ipaddr+0x6a>
 801b948:	68bb      	ldr	r3, [r7, #8]
 801b94a:	681b      	ldr	r3, [r3, #0]
 801b94c:	e000      	b.n	801b950 <netif_do_set_ipaddr+0x6c>
 801b94e:	2300      	movs	r3, #0
 801b950:	68fa      	ldr	r2, [r7, #12]
 801b952:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801b954:	2101      	movs	r1, #1
 801b956:	68f8      	ldr	r0, [r7, #12]
 801b958:	f000 f8d2 	bl	801bb00 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801b95c:	2301      	movs	r3, #1
 801b95e:	e000      	b.n	801b962 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801b960:	2300      	movs	r3, #0
}
 801b962:	4618      	mov	r0, r3
 801b964:	3718      	adds	r7, #24
 801b966:	46bd      	mov	sp, r7
 801b968:	bd80      	pop	{r7, pc}
 801b96a:	bf00      	nop
 801b96c:	0802da5c 	.word	0x0802da5c
 801b970:	0802db74 	.word	0x0802db74
 801b974:	0802daac 	.word	0x0802daac

0801b978 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801b978:	b480      	push	{r7}
 801b97a:	b085      	sub	sp, #20
 801b97c:	af00      	add	r7, sp, #0
 801b97e:	60f8      	str	r0, [r7, #12]
 801b980:	60b9      	str	r1, [r7, #8]
 801b982:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801b984:	68bb      	ldr	r3, [r7, #8]
 801b986:	681a      	ldr	r2, [r3, #0]
 801b988:	68fb      	ldr	r3, [r7, #12]
 801b98a:	3308      	adds	r3, #8
 801b98c:	681b      	ldr	r3, [r3, #0]
 801b98e:	429a      	cmp	r2, r3
 801b990:	d00a      	beq.n	801b9a8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801b992:	68bb      	ldr	r3, [r7, #8]
 801b994:	2b00      	cmp	r3, #0
 801b996:	d002      	beq.n	801b99e <netif_do_set_netmask+0x26>
 801b998:	68bb      	ldr	r3, [r7, #8]
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	e000      	b.n	801b9a0 <netif_do_set_netmask+0x28>
 801b99e:	2300      	movs	r3, #0
 801b9a0:	68fa      	ldr	r2, [r7, #12]
 801b9a2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801b9a4:	2301      	movs	r3, #1
 801b9a6:	e000      	b.n	801b9aa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801b9a8:	2300      	movs	r3, #0
}
 801b9aa:	4618      	mov	r0, r3
 801b9ac:	3714      	adds	r7, #20
 801b9ae:	46bd      	mov	sp, r7
 801b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9b4:	4770      	bx	lr

0801b9b6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801b9b6:	b480      	push	{r7}
 801b9b8:	b085      	sub	sp, #20
 801b9ba:	af00      	add	r7, sp, #0
 801b9bc:	60f8      	str	r0, [r7, #12]
 801b9be:	60b9      	str	r1, [r7, #8]
 801b9c0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801b9c2:	68bb      	ldr	r3, [r7, #8]
 801b9c4:	681a      	ldr	r2, [r3, #0]
 801b9c6:	68fb      	ldr	r3, [r7, #12]
 801b9c8:	330c      	adds	r3, #12
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	429a      	cmp	r2, r3
 801b9ce:	d00a      	beq.n	801b9e6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801b9d0:	68bb      	ldr	r3, [r7, #8]
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d002      	beq.n	801b9dc <netif_do_set_gw+0x26>
 801b9d6:	68bb      	ldr	r3, [r7, #8]
 801b9d8:	681b      	ldr	r3, [r3, #0]
 801b9da:	e000      	b.n	801b9de <netif_do_set_gw+0x28>
 801b9dc:	2300      	movs	r3, #0
 801b9de:	68fa      	ldr	r2, [r7, #12]
 801b9e0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801b9e2:	2301      	movs	r3, #1
 801b9e4:	e000      	b.n	801b9e8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801b9e6:	2300      	movs	r3, #0
}
 801b9e8:	4618      	mov	r0, r3
 801b9ea:	3714      	adds	r7, #20
 801b9ec:	46bd      	mov	sp, r7
 801b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9f2:	4770      	bx	lr

0801b9f4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801b9f4:	b580      	push	{r7, lr}
 801b9f6:	b088      	sub	sp, #32
 801b9f8:	af00      	add	r7, sp, #0
 801b9fa:	60f8      	str	r0, [r7, #12]
 801b9fc:	60b9      	str	r1, [r7, #8]
 801b9fe:	607a      	str	r2, [r7, #4]
 801ba00:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801ba02:	2300      	movs	r3, #0
 801ba04:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801ba06:	2300      	movs	r3, #0
 801ba08:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801ba0a:	68bb      	ldr	r3, [r7, #8]
 801ba0c:	2b00      	cmp	r3, #0
 801ba0e:	d101      	bne.n	801ba14 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801ba10:	4b1c      	ldr	r3, [pc, #112]	; (801ba84 <netif_set_addr+0x90>)
 801ba12:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d101      	bne.n	801ba1e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801ba1a:	4b1a      	ldr	r3, [pc, #104]	; (801ba84 <netif_set_addr+0x90>)
 801ba1c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801ba1e:	683b      	ldr	r3, [r7, #0]
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	d101      	bne.n	801ba28 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801ba24:	4b17      	ldr	r3, [pc, #92]	; (801ba84 <netif_set_addr+0x90>)
 801ba26:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801ba28:	68bb      	ldr	r3, [r7, #8]
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d003      	beq.n	801ba36 <netif_set_addr+0x42>
 801ba2e:	68bb      	ldr	r3, [r7, #8]
 801ba30:	681b      	ldr	r3, [r3, #0]
 801ba32:	2b00      	cmp	r3, #0
 801ba34:	d101      	bne.n	801ba3a <netif_set_addr+0x46>
 801ba36:	2301      	movs	r3, #1
 801ba38:	e000      	b.n	801ba3c <netif_set_addr+0x48>
 801ba3a:	2300      	movs	r3, #0
 801ba3c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801ba3e:	697b      	ldr	r3, [r7, #20]
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d006      	beq.n	801ba52 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801ba44:	f107 0310 	add.w	r3, r7, #16
 801ba48:	461a      	mov	r2, r3
 801ba4a:	68b9      	ldr	r1, [r7, #8]
 801ba4c:	68f8      	ldr	r0, [r7, #12]
 801ba4e:	f7ff ff49 	bl	801b8e4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801ba52:	69fa      	ldr	r2, [r7, #28]
 801ba54:	6879      	ldr	r1, [r7, #4]
 801ba56:	68f8      	ldr	r0, [r7, #12]
 801ba58:	f7ff ff8e 	bl	801b978 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801ba5c:	69ba      	ldr	r2, [r7, #24]
 801ba5e:	6839      	ldr	r1, [r7, #0]
 801ba60:	68f8      	ldr	r0, [r7, #12]
 801ba62:	f7ff ffa8 	bl	801b9b6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801ba66:	697b      	ldr	r3, [r7, #20]
 801ba68:	2b00      	cmp	r3, #0
 801ba6a:	d106      	bne.n	801ba7a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801ba6c:	f107 0310 	add.w	r3, r7, #16
 801ba70:	461a      	mov	r2, r3
 801ba72:	68b9      	ldr	r1, [r7, #8]
 801ba74:	68f8      	ldr	r0, [r7, #12]
 801ba76:	f7ff ff35 	bl	801b8e4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801ba7a:	bf00      	nop
 801ba7c:	3720      	adds	r7, #32
 801ba7e:	46bd      	mov	sp, r7
 801ba80:	bd80      	pop	{r7, pc}
 801ba82:	bf00      	nop
 801ba84:	080608e4 	.word	0x080608e4

0801ba88 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801ba88:	b480      	push	{r7}
 801ba8a:	b083      	sub	sp, #12
 801ba8c:	af00      	add	r7, sp, #0
 801ba8e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801ba90:	4a04      	ldr	r2, [pc, #16]	; (801baa4 <netif_set_default+0x1c>)
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801ba96:	bf00      	nop
 801ba98:	370c      	adds	r7, #12
 801ba9a:	46bd      	mov	sp, r7
 801ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baa0:	4770      	bx	lr
 801baa2:	bf00      	nop
 801baa4:	2001d510 	.word	0x2001d510

0801baa8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801baa8:	b580      	push	{r7, lr}
 801baaa:	b082      	sub	sp, #8
 801baac:	af00      	add	r7, sp, #0
 801baae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d107      	bne.n	801bac6 <netif_set_up+0x1e>
 801bab6:	4b0f      	ldr	r3, [pc, #60]	; (801baf4 <netif_set_up+0x4c>)
 801bab8:	f44f 7254 	mov.w	r2, #848	; 0x350
 801babc:	490e      	ldr	r1, [pc, #56]	; (801baf8 <netif_set_up+0x50>)
 801babe:	480f      	ldr	r0, [pc, #60]	; (801bafc <netif_set_up+0x54>)
 801bac0:	f00b f8ca 	bl	8026c58 <iprintf>
 801bac4:	e013      	b.n	801baee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bacc:	f003 0301 	and.w	r3, r3, #1
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	d10c      	bne.n	801baee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bada:	f043 0301 	orr.w	r3, r3, #1
 801bade:	b2da      	uxtb	r2, r3
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801bae6:	2103      	movs	r1, #3
 801bae8:	6878      	ldr	r0, [r7, #4]
 801baea:	f000 f809 	bl	801bb00 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801baee:	3708      	adds	r7, #8
 801baf0:	46bd      	mov	sp, r7
 801baf2:	bd80      	pop	{r7, pc}
 801baf4:	0802da5c 	.word	0x0802da5c
 801baf8:	0802dbe4 	.word	0x0802dbe4
 801bafc:	0802daac 	.word	0x0802daac

0801bb00 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801bb00:	b580      	push	{r7, lr}
 801bb02:	b082      	sub	sp, #8
 801bb04:	af00      	add	r7, sp, #0
 801bb06:	6078      	str	r0, [r7, #4]
 801bb08:	460b      	mov	r3, r1
 801bb0a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	d106      	bne.n	801bb20 <netif_issue_reports+0x20>
 801bb12:	4b18      	ldr	r3, [pc, #96]	; (801bb74 <netif_issue_reports+0x74>)
 801bb14:	f240 326d 	movw	r2, #877	; 0x36d
 801bb18:	4917      	ldr	r1, [pc, #92]	; (801bb78 <netif_issue_reports+0x78>)
 801bb1a:	4818      	ldr	r0, [pc, #96]	; (801bb7c <netif_issue_reports+0x7c>)
 801bb1c:	f00b f89c 	bl	8026c58 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bb26:	f003 0304 	and.w	r3, r3, #4
 801bb2a:	2b00      	cmp	r3, #0
 801bb2c:	d01e      	beq.n	801bb6c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801bb2e:	687b      	ldr	r3, [r7, #4]
 801bb30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bb34:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	d017      	beq.n	801bb6c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801bb3c:	78fb      	ldrb	r3, [r7, #3]
 801bb3e:	f003 0301 	and.w	r3, r3, #1
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d013      	beq.n	801bb6e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801bb46:	687b      	ldr	r3, [r7, #4]
 801bb48:	3304      	adds	r3, #4
 801bb4a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d00e      	beq.n	801bb6e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bb56:	f003 0308 	and.w	r3, r3, #8
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	d007      	beq.n	801bb6e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	3304      	adds	r3, #4
 801bb62:	4619      	mov	r1, r3
 801bb64:	6878      	ldr	r0, [r7, #4]
 801bb66:	f008 fe2d 	bl	80247c4 <etharp_request>
 801bb6a:	e000      	b.n	801bb6e <netif_issue_reports+0x6e>
    return;
 801bb6c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801bb6e:	3708      	adds	r7, #8
 801bb70:	46bd      	mov	sp, r7
 801bb72:	bd80      	pop	{r7, pc}
 801bb74:	0802da5c 	.word	0x0802da5c
 801bb78:	0802dc00 	.word	0x0802dc00
 801bb7c:	0802daac 	.word	0x0802daac

0801bb80 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801bb80:	b580      	push	{r7, lr}
 801bb82:	b082      	sub	sp, #8
 801bb84:	af00      	add	r7, sp, #0
 801bb86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d107      	bne.n	801bb9e <netif_set_down+0x1e>
 801bb8e:	4b12      	ldr	r3, [pc, #72]	; (801bbd8 <netif_set_down+0x58>)
 801bb90:	f240 329b 	movw	r2, #923	; 0x39b
 801bb94:	4911      	ldr	r1, [pc, #68]	; (801bbdc <netif_set_down+0x5c>)
 801bb96:	4812      	ldr	r0, [pc, #72]	; (801bbe0 <netif_set_down+0x60>)
 801bb98:	f00b f85e 	bl	8026c58 <iprintf>
 801bb9c:	e019      	b.n	801bbd2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bba4:	f003 0301 	and.w	r3, r3, #1
 801bba8:	2b00      	cmp	r3, #0
 801bbaa:	d012      	beq.n	801bbd2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bbb2:	f023 0301 	bic.w	r3, r3, #1
 801bbb6:	b2da      	uxtb	r2, r3
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bbc4:	f003 0308 	and.w	r3, r3, #8
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d002      	beq.n	801bbd2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801bbcc:	6878      	ldr	r0, [r7, #4]
 801bbce:	f008 f9b7 	bl	8023f40 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801bbd2:	3708      	adds	r7, #8
 801bbd4:	46bd      	mov	sp, r7
 801bbd6:	bd80      	pop	{r7, pc}
 801bbd8:	0802da5c 	.word	0x0802da5c
 801bbdc:	0802dc24 	.word	0x0802dc24
 801bbe0:	0802daac 	.word	0x0802daac

0801bbe4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801bbe4:	b580      	push	{r7, lr}
 801bbe6:	b082      	sub	sp, #8
 801bbe8:	af00      	add	r7, sp, #0
 801bbea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801bbec:	687b      	ldr	r3, [r7, #4]
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	d107      	bne.n	801bc02 <netif_set_link_up+0x1e>
 801bbf2:	4b13      	ldr	r3, [pc, #76]	; (801bc40 <netif_set_link_up+0x5c>)
 801bbf4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801bbf8:	4912      	ldr	r1, [pc, #72]	; (801bc44 <netif_set_link_up+0x60>)
 801bbfa:	4813      	ldr	r0, [pc, #76]	; (801bc48 <netif_set_link_up+0x64>)
 801bbfc:	f00b f82c 	bl	8026c58 <iprintf>
 801bc00:	e01b      	b.n	801bc3a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bc08:	f003 0304 	and.w	r3, r3, #4
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d114      	bne.n	801bc3a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bc16:	f043 0304 	orr.w	r3, r3, #4
 801bc1a:	b2da      	uxtb	r2, r3
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801bc22:	2103      	movs	r1, #3
 801bc24:	6878      	ldr	r0, [r7, #4]
 801bc26:	f7ff ff6b 	bl	801bb00 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	69db      	ldr	r3, [r3, #28]
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d003      	beq.n	801bc3a <netif_set_link_up+0x56>
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	69db      	ldr	r3, [r3, #28]
 801bc36:	6878      	ldr	r0, [r7, #4]
 801bc38:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801bc3a:	3708      	adds	r7, #8
 801bc3c:	46bd      	mov	sp, r7
 801bc3e:	bd80      	pop	{r7, pc}
 801bc40:	0802da5c 	.word	0x0802da5c
 801bc44:	0802dc44 	.word	0x0802dc44
 801bc48:	0802daac 	.word	0x0802daac

0801bc4c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801bc4c:	b580      	push	{r7, lr}
 801bc4e:	b082      	sub	sp, #8
 801bc50:	af00      	add	r7, sp, #0
 801bc52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	d107      	bne.n	801bc6a <netif_set_link_down+0x1e>
 801bc5a:	4b11      	ldr	r3, [pc, #68]	; (801bca0 <netif_set_link_down+0x54>)
 801bc5c:	f240 4206 	movw	r2, #1030	; 0x406
 801bc60:	4910      	ldr	r1, [pc, #64]	; (801bca4 <netif_set_link_down+0x58>)
 801bc62:	4811      	ldr	r0, [pc, #68]	; (801bca8 <netif_set_link_down+0x5c>)
 801bc64:	f00a fff8 	bl	8026c58 <iprintf>
 801bc68:	e017      	b.n	801bc9a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bc70:	f003 0304 	and.w	r3, r3, #4
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	d010      	beq.n	801bc9a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bc7e:	f023 0304 	bic.w	r3, r3, #4
 801bc82:	b2da      	uxtb	r2, r3
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	69db      	ldr	r3, [r3, #28]
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d003      	beq.n	801bc9a <netif_set_link_down+0x4e>
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	69db      	ldr	r3, [r3, #28]
 801bc96:	6878      	ldr	r0, [r7, #4]
 801bc98:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801bc9a:	3708      	adds	r7, #8
 801bc9c:	46bd      	mov	sp, r7
 801bc9e:	bd80      	pop	{r7, pc}
 801bca0:	0802da5c 	.word	0x0802da5c
 801bca4:	0802dc68 	.word	0x0802dc68
 801bca8:	0802daac 	.word	0x0802daac

0801bcac <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801bcac:	b480      	push	{r7}
 801bcae:	b083      	sub	sp, #12
 801bcb0:	af00      	add	r7, sp, #0
 801bcb2:	6078      	str	r0, [r7, #4]
 801bcb4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	d002      	beq.n	801bcc2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	683a      	ldr	r2, [r7, #0]
 801bcc0:	61da      	str	r2, [r3, #28]
  }
}
 801bcc2:	bf00      	nop
 801bcc4:	370c      	adds	r7, #12
 801bcc6:	46bd      	mov	sp, r7
 801bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bccc:	4770      	bx	lr

0801bcce <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801bcce:	b480      	push	{r7}
 801bcd0:	b085      	sub	sp, #20
 801bcd2:	af00      	add	r7, sp, #0
 801bcd4:	60f8      	str	r0, [r7, #12]
 801bcd6:	60b9      	str	r1, [r7, #8]
 801bcd8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801bcda:	f06f 030b 	mvn.w	r3, #11
}
 801bcde:	4618      	mov	r0, r3
 801bce0:	3714      	adds	r7, #20
 801bce2:	46bd      	mov	sp, r7
 801bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bce8:	4770      	bx	lr
	...

0801bcec <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801bcec:	b480      	push	{r7}
 801bcee:	b085      	sub	sp, #20
 801bcf0:	af00      	add	r7, sp, #0
 801bcf2:	4603      	mov	r3, r0
 801bcf4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801bcf6:	79fb      	ldrb	r3, [r7, #7]
 801bcf8:	2b00      	cmp	r3, #0
 801bcfa:	d013      	beq.n	801bd24 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801bcfc:	4b0d      	ldr	r3, [pc, #52]	; (801bd34 <netif_get_by_index+0x48>)
 801bcfe:	681b      	ldr	r3, [r3, #0]
 801bd00:	60fb      	str	r3, [r7, #12]
 801bd02:	e00c      	b.n	801bd1e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801bd04:	68fb      	ldr	r3, [r7, #12]
 801bd06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bd0a:	3301      	adds	r3, #1
 801bd0c:	b2db      	uxtb	r3, r3
 801bd0e:	79fa      	ldrb	r2, [r7, #7]
 801bd10:	429a      	cmp	r2, r3
 801bd12:	d101      	bne.n	801bd18 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801bd14:	68fb      	ldr	r3, [r7, #12]
 801bd16:	e006      	b.n	801bd26 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801bd18:	68fb      	ldr	r3, [r7, #12]
 801bd1a:	681b      	ldr	r3, [r3, #0]
 801bd1c:	60fb      	str	r3, [r7, #12]
 801bd1e:	68fb      	ldr	r3, [r7, #12]
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d1ef      	bne.n	801bd04 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801bd24:	2300      	movs	r3, #0
}
 801bd26:	4618      	mov	r0, r3
 801bd28:	3714      	adds	r7, #20
 801bd2a:	46bd      	mov	sp, r7
 801bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd30:	4770      	bx	lr
 801bd32:	bf00      	nop
 801bd34:	2001d50c 	.word	0x2001d50c

0801bd38 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801bd38:	b580      	push	{r7, lr}
 801bd3a:	b082      	sub	sp, #8
 801bd3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801bd3e:	f00a f9bf 	bl	80260c0 <sys_arch_protect>
 801bd42:	6038      	str	r0, [r7, #0]
 801bd44:	4b0d      	ldr	r3, [pc, #52]	; (801bd7c <pbuf_free_ooseq+0x44>)
 801bd46:	2200      	movs	r2, #0
 801bd48:	701a      	strb	r2, [r3, #0]
 801bd4a:	6838      	ldr	r0, [r7, #0]
 801bd4c:	f00a f9c6 	bl	80260dc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801bd50:	4b0b      	ldr	r3, [pc, #44]	; (801bd80 <pbuf_free_ooseq+0x48>)
 801bd52:	681b      	ldr	r3, [r3, #0]
 801bd54:	607b      	str	r3, [r7, #4]
 801bd56:	e00a      	b.n	801bd6e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	d003      	beq.n	801bd68 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801bd60:	6878      	ldr	r0, [r7, #4]
 801bd62:	f002 fda3 	bl	801e8ac <tcp_free_ooseq>
      return;
 801bd66:	e005      	b.n	801bd74 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	68db      	ldr	r3, [r3, #12]
 801bd6c:	607b      	str	r3, [r7, #4]
 801bd6e:	687b      	ldr	r3, [r7, #4]
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d1f1      	bne.n	801bd58 <pbuf_free_ooseq+0x20>
    }
  }
}
 801bd74:	3708      	adds	r7, #8
 801bd76:	46bd      	mov	sp, r7
 801bd78:	bd80      	pop	{r7, pc}
 801bd7a:	bf00      	nop
 801bd7c:	2001d514 	.word	0x2001d514
 801bd80:	2001d51c 	.word	0x2001d51c

0801bd84 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801bd84:	b580      	push	{r7, lr}
 801bd86:	b082      	sub	sp, #8
 801bd88:	af00      	add	r7, sp, #0
 801bd8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801bd8c:	f7ff ffd4 	bl	801bd38 <pbuf_free_ooseq>
}
 801bd90:	bf00      	nop
 801bd92:	3708      	adds	r7, #8
 801bd94:	46bd      	mov	sp, r7
 801bd96:	bd80      	pop	{r7, pc}

0801bd98 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801bd98:	b580      	push	{r7, lr}
 801bd9a:	b082      	sub	sp, #8
 801bd9c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801bd9e:	f00a f98f 	bl	80260c0 <sys_arch_protect>
 801bda2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801bda4:	4b0f      	ldr	r3, [pc, #60]	; (801bde4 <pbuf_pool_is_empty+0x4c>)
 801bda6:	781b      	ldrb	r3, [r3, #0]
 801bda8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801bdaa:	4b0e      	ldr	r3, [pc, #56]	; (801bde4 <pbuf_pool_is_empty+0x4c>)
 801bdac:	2201      	movs	r2, #1
 801bdae:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801bdb0:	6878      	ldr	r0, [r7, #4]
 801bdb2:	f00a f993 	bl	80260dc <sys_arch_unprotect>

  if (!queued) {
 801bdb6:	78fb      	ldrb	r3, [r7, #3]
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	d10f      	bne.n	801bddc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801bdbc:	2100      	movs	r1, #0
 801bdbe:	480a      	ldr	r0, [pc, #40]	; (801bde8 <pbuf_pool_is_empty+0x50>)
 801bdc0:	f7fb fa3c 	bl	801723c <tcpip_try_callback>
 801bdc4:	4603      	mov	r3, r0
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	d008      	beq.n	801bddc <pbuf_pool_is_empty+0x44>
 801bdca:	f00a f979 	bl	80260c0 <sys_arch_protect>
 801bdce:	6078      	str	r0, [r7, #4]
 801bdd0:	4b04      	ldr	r3, [pc, #16]	; (801bde4 <pbuf_pool_is_empty+0x4c>)
 801bdd2:	2200      	movs	r2, #0
 801bdd4:	701a      	strb	r2, [r3, #0]
 801bdd6:	6878      	ldr	r0, [r7, #4]
 801bdd8:	f00a f980 	bl	80260dc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801bddc:	bf00      	nop
 801bdde:	3708      	adds	r7, #8
 801bde0:	46bd      	mov	sp, r7
 801bde2:	bd80      	pop	{r7, pc}
 801bde4:	2001d514 	.word	0x2001d514
 801bde8:	0801bd85 	.word	0x0801bd85

0801bdec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801bdec:	b480      	push	{r7}
 801bdee:	b085      	sub	sp, #20
 801bdf0:	af00      	add	r7, sp, #0
 801bdf2:	60f8      	str	r0, [r7, #12]
 801bdf4:	60b9      	str	r1, [r7, #8]
 801bdf6:	4611      	mov	r1, r2
 801bdf8:	461a      	mov	r2, r3
 801bdfa:	460b      	mov	r3, r1
 801bdfc:	80fb      	strh	r3, [r7, #6]
 801bdfe:	4613      	mov	r3, r2
 801be00:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801be02:	68fb      	ldr	r3, [r7, #12]
 801be04:	2200      	movs	r2, #0
 801be06:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801be08:	68fb      	ldr	r3, [r7, #12]
 801be0a:	68ba      	ldr	r2, [r7, #8]
 801be0c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801be0e:	68fb      	ldr	r3, [r7, #12]
 801be10:	88fa      	ldrh	r2, [r7, #6]
 801be12:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801be14:	68fb      	ldr	r3, [r7, #12]
 801be16:	88ba      	ldrh	r2, [r7, #4]
 801be18:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801be1a:	8b3b      	ldrh	r3, [r7, #24]
 801be1c:	b2da      	uxtb	r2, r3
 801be1e:	68fb      	ldr	r3, [r7, #12]
 801be20:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801be22:	68fb      	ldr	r3, [r7, #12]
 801be24:	7f3a      	ldrb	r2, [r7, #28]
 801be26:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	2201      	movs	r2, #1
 801be2c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801be2e:	68fb      	ldr	r3, [r7, #12]
 801be30:	2200      	movs	r2, #0
 801be32:	73da      	strb	r2, [r3, #15]
}
 801be34:	bf00      	nop
 801be36:	3714      	adds	r7, #20
 801be38:	46bd      	mov	sp, r7
 801be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be3e:	4770      	bx	lr

0801be40 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801be40:	b580      	push	{r7, lr}
 801be42:	b08c      	sub	sp, #48	; 0x30
 801be44:	af02      	add	r7, sp, #8
 801be46:	4603      	mov	r3, r0
 801be48:	71fb      	strb	r3, [r7, #7]
 801be4a:	460b      	mov	r3, r1
 801be4c:	80bb      	strh	r3, [r7, #4]
 801be4e:	4613      	mov	r3, r2
 801be50:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801be52:	79fb      	ldrb	r3, [r7, #7]
 801be54:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801be56:	887b      	ldrh	r3, [r7, #2]
 801be58:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801be5c:	d07f      	beq.n	801bf5e <pbuf_alloc+0x11e>
 801be5e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801be62:	f300 80c8 	bgt.w	801bff6 <pbuf_alloc+0x1b6>
 801be66:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801be6a:	d010      	beq.n	801be8e <pbuf_alloc+0x4e>
 801be6c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801be70:	f300 80c1 	bgt.w	801bff6 <pbuf_alloc+0x1b6>
 801be74:	2b01      	cmp	r3, #1
 801be76:	d002      	beq.n	801be7e <pbuf_alloc+0x3e>
 801be78:	2b41      	cmp	r3, #65	; 0x41
 801be7a:	f040 80bc 	bne.w	801bff6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801be7e:	887a      	ldrh	r2, [r7, #2]
 801be80:	88bb      	ldrh	r3, [r7, #4]
 801be82:	4619      	mov	r1, r3
 801be84:	2000      	movs	r0, #0
 801be86:	f000 f8d1 	bl	801c02c <pbuf_alloc_reference>
 801be8a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801be8c:	e0bd      	b.n	801c00a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801be8e:	2300      	movs	r3, #0
 801be90:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801be92:	2300      	movs	r3, #0
 801be94:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801be96:	88bb      	ldrh	r3, [r7, #4]
 801be98:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801be9a:	200c      	movs	r0, #12
 801be9c:	f7ff fbbe 	bl	801b61c <memp_malloc>
 801bea0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801bea2:	693b      	ldr	r3, [r7, #16]
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d109      	bne.n	801bebc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801bea8:	f7ff ff76 	bl	801bd98 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801beac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801beae:	2b00      	cmp	r3, #0
 801beb0:	d002      	beq.n	801beb8 <pbuf_alloc+0x78>
            pbuf_free(p);
 801beb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801beb4:	f000 faa8 	bl	801c408 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801beb8:	2300      	movs	r3, #0
 801beba:	e0a7      	b.n	801c00c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801bebc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bebe:	3303      	adds	r3, #3
 801bec0:	b29b      	uxth	r3, r3
 801bec2:	f023 0303 	bic.w	r3, r3, #3
 801bec6:	b29b      	uxth	r3, r3
 801bec8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801becc:	b29b      	uxth	r3, r3
 801bece:	8b7a      	ldrh	r2, [r7, #26]
 801bed0:	4293      	cmp	r3, r2
 801bed2:	bf28      	it	cs
 801bed4:	4613      	movcs	r3, r2
 801bed6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801bed8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801beda:	3310      	adds	r3, #16
 801bedc:	693a      	ldr	r2, [r7, #16]
 801bede:	4413      	add	r3, r2
 801bee0:	3303      	adds	r3, #3
 801bee2:	f023 0303 	bic.w	r3, r3, #3
 801bee6:	4618      	mov	r0, r3
 801bee8:	89f9      	ldrh	r1, [r7, #14]
 801beea:	8b7a      	ldrh	r2, [r7, #26]
 801beec:	2300      	movs	r3, #0
 801beee:	9301      	str	r3, [sp, #4]
 801bef0:	887b      	ldrh	r3, [r7, #2]
 801bef2:	9300      	str	r3, [sp, #0]
 801bef4:	460b      	mov	r3, r1
 801bef6:	4601      	mov	r1, r0
 801bef8:	6938      	ldr	r0, [r7, #16]
 801befa:	f7ff ff77 	bl	801bdec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801befe:	693b      	ldr	r3, [r7, #16]
 801bf00:	685b      	ldr	r3, [r3, #4]
 801bf02:	f003 0303 	and.w	r3, r3, #3
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d006      	beq.n	801bf18 <pbuf_alloc+0xd8>
 801bf0a:	4b42      	ldr	r3, [pc, #264]	; (801c014 <pbuf_alloc+0x1d4>)
 801bf0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bf10:	4941      	ldr	r1, [pc, #260]	; (801c018 <pbuf_alloc+0x1d8>)
 801bf12:	4842      	ldr	r0, [pc, #264]	; (801c01c <pbuf_alloc+0x1dc>)
 801bf14:	f00a fea0 	bl	8026c58 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801bf18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bf1a:	3303      	adds	r3, #3
 801bf1c:	f023 0303 	bic.w	r3, r3, #3
 801bf20:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801bf24:	d106      	bne.n	801bf34 <pbuf_alloc+0xf4>
 801bf26:	4b3b      	ldr	r3, [pc, #236]	; (801c014 <pbuf_alloc+0x1d4>)
 801bf28:	f44f 7281 	mov.w	r2, #258	; 0x102
 801bf2c:	493c      	ldr	r1, [pc, #240]	; (801c020 <pbuf_alloc+0x1e0>)
 801bf2e:	483b      	ldr	r0, [pc, #236]	; (801c01c <pbuf_alloc+0x1dc>)
 801bf30:	f00a fe92 	bl	8026c58 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801bf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d102      	bne.n	801bf40 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801bf3a:	693b      	ldr	r3, [r7, #16]
 801bf3c:	627b      	str	r3, [r7, #36]	; 0x24
 801bf3e:	e002      	b.n	801bf46 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801bf40:	69fb      	ldr	r3, [r7, #28]
 801bf42:	693a      	ldr	r2, [r7, #16]
 801bf44:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801bf46:	693b      	ldr	r3, [r7, #16]
 801bf48:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801bf4a:	8b7a      	ldrh	r2, [r7, #26]
 801bf4c:	89fb      	ldrh	r3, [r7, #14]
 801bf4e:	1ad3      	subs	r3, r2, r3
 801bf50:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801bf52:	2300      	movs	r3, #0
 801bf54:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801bf56:	8b7b      	ldrh	r3, [r7, #26]
 801bf58:	2b00      	cmp	r3, #0
 801bf5a:	d19e      	bne.n	801be9a <pbuf_alloc+0x5a>
      break;
 801bf5c:	e055      	b.n	801c00a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801bf5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bf60:	3303      	adds	r3, #3
 801bf62:	b29b      	uxth	r3, r3
 801bf64:	f023 0303 	bic.w	r3, r3, #3
 801bf68:	b29a      	uxth	r2, r3
 801bf6a:	88bb      	ldrh	r3, [r7, #4]
 801bf6c:	3303      	adds	r3, #3
 801bf6e:	b29b      	uxth	r3, r3
 801bf70:	f023 0303 	bic.w	r3, r3, #3
 801bf74:	b29b      	uxth	r3, r3
 801bf76:	4413      	add	r3, r2
 801bf78:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801bf7a:	8b3b      	ldrh	r3, [r7, #24]
 801bf7c:	3310      	adds	r3, #16
 801bf7e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801bf80:	8b3a      	ldrh	r2, [r7, #24]
 801bf82:	88bb      	ldrh	r3, [r7, #4]
 801bf84:	3303      	adds	r3, #3
 801bf86:	f023 0303 	bic.w	r3, r3, #3
 801bf8a:	429a      	cmp	r2, r3
 801bf8c:	d306      	bcc.n	801bf9c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801bf8e:	8afa      	ldrh	r2, [r7, #22]
 801bf90:	88bb      	ldrh	r3, [r7, #4]
 801bf92:	3303      	adds	r3, #3
 801bf94:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801bf98:	429a      	cmp	r2, r3
 801bf9a:	d201      	bcs.n	801bfa0 <pbuf_alloc+0x160>
        return NULL;
 801bf9c:	2300      	movs	r3, #0
 801bf9e:	e035      	b.n	801c00c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801bfa0:	8afb      	ldrh	r3, [r7, #22]
 801bfa2:	4618      	mov	r0, r3
 801bfa4:	f7ff f990 	bl	801b2c8 <mem_malloc>
 801bfa8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801bfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	d101      	bne.n	801bfb4 <pbuf_alloc+0x174>
        return NULL;
 801bfb0:	2300      	movs	r3, #0
 801bfb2:	e02b      	b.n	801c00c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801bfb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bfb6:	3310      	adds	r3, #16
 801bfb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bfba:	4413      	add	r3, r2
 801bfbc:	3303      	adds	r3, #3
 801bfbe:	f023 0303 	bic.w	r3, r3, #3
 801bfc2:	4618      	mov	r0, r3
 801bfc4:	88b9      	ldrh	r1, [r7, #4]
 801bfc6:	88ba      	ldrh	r2, [r7, #4]
 801bfc8:	2300      	movs	r3, #0
 801bfca:	9301      	str	r3, [sp, #4]
 801bfcc:	887b      	ldrh	r3, [r7, #2]
 801bfce:	9300      	str	r3, [sp, #0]
 801bfd0:	460b      	mov	r3, r1
 801bfd2:	4601      	mov	r1, r0
 801bfd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bfd6:	f7ff ff09 	bl	801bdec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfdc:	685b      	ldr	r3, [r3, #4]
 801bfde:	f003 0303 	and.w	r3, r3, #3
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	d010      	beq.n	801c008 <pbuf_alloc+0x1c8>
 801bfe6:	4b0b      	ldr	r3, [pc, #44]	; (801c014 <pbuf_alloc+0x1d4>)
 801bfe8:	f44f 7291 	mov.w	r2, #290	; 0x122
 801bfec:	490d      	ldr	r1, [pc, #52]	; (801c024 <pbuf_alloc+0x1e4>)
 801bfee:	480b      	ldr	r0, [pc, #44]	; (801c01c <pbuf_alloc+0x1dc>)
 801bff0:	f00a fe32 	bl	8026c58 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801bff4:	e008      	b.n	801c008 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801bff6:	4b07      	ldr	r3, [pc, #28]	; (801c014 <pbuf_alloc+0x1d4>)
 801bff8:	f240 1227 	movw	r2, #295	; 0x127
 801bffc:	490a      	ldr	r1, [pc, #40]	; (801c028 <pbuf_alloc+0x1e8>)
 801bffe:	4807      	ldr	r0, [pc, #28]	; (801c01c <pbuf_alloc+0x1dc>)
 801c000:	f00a fe2a 	bl	8026c58 <iprintf>
      return NULL;
 801c004:	2300      	movs	r3, #0
 801c006:	e001      	b.n	801c00c <pbuf_alloc+0x1cc>
      break;
 801c008:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801c00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801c00c:	4618      	mov	r0, r3
 801c00e:	3728      	adds	r7, #40	; 0x28
 801c010:	46bd      	mov	sp, r7
 801c012:	bd80      	pop	{r7, pc}
 801c014:	0802dc8c 	.word	0x0802dc8c
 801c018:	0802dcbc 	.word	0x0802dcbc
 801c01c:	0802dcec 	.word	0x0802dcec
 801c020:	0802dd14 	.word	0x0802dd14
 801c024:	0802dd48 	.word	0x0802dd48
 801c028:	0802dd74 	.word	0x0802dd74

0801c02c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801c02c:	b580      	push	{r7, lr}
 801c02e:	b086      	sub	sp, #24
 801c030:	af02      	add	r7, sp, #8
 801c032:	6078      	str	r0, [r7, #4]
 801c034:	460b      	mov	r3, r1
 801c036:	807b      	strh	r3, [r7, #2]
 801c038:	4613      	mov	r3, r2
 801c03a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801c03c:	883b      	ldrh	r3, [r7, #0]
 801c03e:	2b41      	cmp	r3, #65	; 0x41
 801c040:	d009      	beq.n	801c056 <pbuf_alloc_reference+0x2a>
 801c042:	883b      	ldrh	r3, [r7, #0]
 801c044:	2b01      	cmp	r3, #1
 801c046:	d006      	beq.n	801c056 <pbuf_alloc_reference+0x2a>
 801c048:	4b0f      	ldr	r3, [pc, #60]	; (801c088 <pbuf_alloc_reference+0x5c>)
 801c04a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801c04e:	490f      	ldr	r1, [pc, #60]	; (801c08c <pbuf_alloc_reference+0x60>)
 801c050:	480f      	ldr	r0, [pc, #60]	; (801c090 <pbuf_alloc_reference+0x64>)
 801c052:	f00a fe01 	bl	8026c58 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801c056:	200b      	movs	r0, #11
 801c058:	f7ff fae0 	bl	801b61c <memp_malloc>
 801c05c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801c05e:	68fb      	ldr	r3, [r7, #12]
 801c060:	2b00      	cmp	r3, #0
 801c062:	d101      	bne.n	801c068 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801c064:	2300      	movs	r3, #0
 801c066:	e00b      	b.n	801c080 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801c068:	8879      	ldrh	r1, [r7, #2]
 801c06a:	887a      	ldrh	r2, [r7, #2]
 801c06c:	2300      	movs	r3, #0
 801c06e:	9301      	str	r3, [sp, #4]
 801c070:	883b      	ldrh	r3, [r7, #0]
 801c072:	9300      	str	r3, [sp, #0]
 801c074:	460b      	mov	r3, r1
 801c076:	6879      	ldr	r1, [r7, #4]
 801c078:	68f8      	ldr	r0, [r7, #12]
 801c07a:	f7ff feb7 	bl	801bdec <pbuf_init_alloced_pbuf>
  return p;
 801c07e:	68fb      	ldr	r3, [r7, #12]
}
 801c080:	4618      	mov	r0, r3
 801c082:	3710      	adds	r7, #16
 801c084:	46bd      	mov	sp, r7
 801c086:	bd80      	pop	{r7, pc}
 801c088:	0802dc8c 	.word	0x0802dc8c
 801c08c:	0802dd90 	.word	0x0802dd90
 801c090:	0802dcec 	.word	0x0802dcec

0801c094 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801c094:	b580      	push	{r7, lr}
 801c096:	b088      	sub	sp, #32
 801c098:	af02      	add	r7, sp, #8
 801c09a:	607b      	str	r3, [r7, #4]
 801c09c:	4603      	mov	r3, r0
 801c09e:	73fb      	strb	r3, [r7, #15]
 801c0a0:	460b      	mov	r3, r1
 801c0a2:	81bb      	strh	r3, [r7, #12]
 801c0a4:	4613      	mov	r3, r2
 801c0a6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801c0a8:	7bfb      	ldrb	r3, [r7, #15]
 801c0aa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801c0ac:	8a7b      	ldrh	r3, [r7, #18]
 801c0ae:	3303      	adds	r3, #3
 801c0b0:	f023 0203 	bic.w	r2, r3, #3
 801c0b4:	89bb      	ldrh	r3, [r7, #12]
 801c0b6:	441a      	add	r2, r3
 801c0b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c0ba:	429a      	cmp	r2, r3
 801c0bc:	d901      	bls.n	801c0c2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801c0be:	2300      	movs	r3, #0
 801c0c0:	e018      	b.n	801c0f4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801c0c2:	6a3b      	ldr	r3, [r7, #32]
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	d007      	beq.n	801c0d8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801c0c8:	8a7b      	ldrh	r3, [r7, #18]
 801c0ca:	3303      	adds	r3, #3
 801c0cc:	f023 0303 	bic.w	r3, r3, #3
 801c0d0:	6a3a      	ldr	r2, [r7, #32]
 801c0d2:	4413      	add	r3, r2
 801c0d4:	617b      	str	r3, [r7, #20]
 801c0d6:	e001      	b.n	801c0dc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801c0d8:	2300      	movs	r3, #0
 801c0da:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801c0dc:	6878      	ldr	r0, [r7, #4]
 801c0de:	89b9      	ldrh	r1, [r7, #12]
 801c0e0:	89ba      	ldrh	r2, [r7, #12]
 801c0e2:	2302      	movs	r3, #2
 801c0e4:	9301      	str	r3, [sp, #4]
 801c0e6:	897b      	ldrh	r3, [r7, #10]
 801c0e8:	9300      	str	r3, [sp, #0]
 801c0ea:	460b      	mov	r3, r1
 801c0ec:	6979      	ldr	r1, [r7, #20]
 801c0ee:	f7ff fe7d 	bl	801bdec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801c0f2:	687b      	ldr	r3, [r7, #4]
}
 801c0f4:	4618      	mov	r0, r3
 801c0f6:	3718      	adds	r7, #24
 801c0f8:	46bd      	mov	sp, r7
 801c0fa:	bd80      	pop	{r7, pc}

0801c0fc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801c0fc:	b580      	push	{r7, lr}
 801c0fe:	b084      	sub	sp, #16
 801c100:	af00      	add	r7, sp, #0
 801c102:	6078      	str	r0, [r7, #4]
 801c104:	460b      	mov	r3, r1
 801c106:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d106      	bne.n	801c11c <pbuf_realloc+0x20>
 801c10e:	4b3a      	ldr	r3, [pc, #232]	; (801c1f8 <pbuf_realloc+0xfc>)
 801c110:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801c114:	4939      	ldr	r1, [pc, #228]	; (801c1fc <pbuf_realloc+0x100>)
 801c116:	483a      	ldr	r0, [pc, #232]	; (801c200 <pbuf_realloc+0x104>)
 801c118:	f00a fd9e 	bl	8026c58 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	891b      	ldrh	r3, [r3, #8]
 801c120:	887a      	ldrh	r2, [r7, #2]
 801c122:	429a      	cmp	r2, r3
 801c124:	d263      	bcs.n	801c1ee <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	891a      	ldrh	r2, [r3, #8]
 801c12a:	887b      	ldrh	r3, [r7, #2]
 801c12c:	1ad3      	subs	r3, r2, r3
 801c12e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801c130:	887b      	ldrh	r3, [r7, #2]
 801c132:	817b      	strh	r3, [r7, #10]
  q = p;
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801c138:	e018      	b.n	801c16c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801c13a:	68fb      	ldr	r3, [r7, #12]
 801c13c:	895b      	ldrh	r3, [r3, #10]
 801c13e:	897a      	ldrh	r2, [r7, #10]
 801c140:	1ad3      	subs	r3, r2, r3
 801c142:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	891a      	ldrh	r2, [r3, #8]
 801c148:	893b      	ldrh	r3, [r7, #8]
 801c14a:	1ad3      	subs	r3, r2, r3
 801c14c:	b29a      	uxth	r2, r3
 801c14e:	68fb      	ldr	r3, [r7, #12]
 801c150:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801c152:	68fb      	ldr	r3, [r7, #12]
 801c154:	681b      	ldr	r3, [r3, #0]
 801c156:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801c158:	68fb      	ldr	r3, [r7, #12]
 801c15a:	2b00      	cmp	r3, #0
 801c15c:	d106      	bne.n	801c16c <pbuf_realloc+0x70>
 801c15e:	4b26      	ldr	r3, [pc, #152]	; (801c1f8 <pbuf_realloc+0xfc>)
 801c160:	f240 12af 	movw	r2, #431	; 0x1af
 801c164:	4927      	ldr	r1, [pc, #156]	; (801c204 <pbuf_realloc+0x108>)
 801c166:	4826      	ldr	r0, [pc, #152]	; (801c200 <pbuf_realloc+0x104>)
 801c168:	f00a fd76 	bl	8026c58 <iprintf>
  while (rem_len > q->len) {
 801c16c:	68fb      	ldr	r3, [r7, #12]
 801c16e:	895b      	ldrh	r3, [r3, #10]
 801c170:	897a      	ldrh	r2, [r7, #10]
 801c172:	429a      	cmp	r2, r3
 801c174:	d8e1      	bhi.n	801c13a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801c176:	68fb      	ldr	r3, [r7, #12]
 801c178:	7b1b      	ldrb	r3, [r3, #12]
 801c17a:	f003 030f 	and.w	r3, r3, #15
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d121      	bne.n	801c1c6 <pbuf_realloc+0xca>
 801c182:	68fb      	ldr	r3, [r7, #12]
 801c184:	895b      	ldrh	r3, [r3, #10]
 801c186:	897a      	ldrh	r2, [r7, #10]
 801c188:	429a      	cmp	r2, r3
 801c18a:	d01c      	beq.n	801c1c6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801c18c:	68fb      	ldr	r3, [r7, #12]
 801c18e:	7b5b      	ldrb	r3, [r3, #13]
 801c190:	f003 0302 	and.w	r3, r3, #2
 801c194:	2b00      	cmp	r3, #0
 801c196:	d116      	bne.n	801c1c6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801c198:	68fb      	ldr	r3, [r7, #12]
 801c19a:	685a      	ldr	r2, [r3, #4]
 801c19c:	68fb      	ldr	r3, [r7, #12]
 801c19e:	1ad3      	subs	r3, r2, r3
 801c1a0:	b29a      	uxth	r2, r3
 801c1a2:	897b      	ldrh	r3, [r7, #10]
 801c1a4:	4413      	add	r3, r2
 801c1a6:	b29b      	uxth	r3, r3
 801c1a8:	4619      	mov	r1, r3
 801c1aa:	68f8      	ldr	r0, [r7, #12]
 801c1ac:	f7fe ff82 	bl	801b0b4 <mem_trim>
 801c1b0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801c1b2:	68fb      	ldr	r3, [r7, #12]
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d106      	bne.n	801c1c6 <pbuf_realloc+0xca>
 801c1b8:	4b0f      	ldr	r3, [pc, #60]	; (801c1f8 <pbuf_realloc+0xfc>)
 801c1ba:	f240 12bd 	movw	r2, #445	; 0x1bd
 801c1be:	4912      	ldr	r1, [pc, #72]	; (801c208 <pbuf_realloc+0x10c>)
 801c1c0:	480f      	ldr	r0, [pc, #60]	; (801c200 <pbuf_realloc+0x104>)
 801c1c2:	f00a fd49 	bl	8026c58 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801c1c6:	68fb      	ldr	r3, [r7, #12]
 801c1c8:	897a      	ldrh	r2, [r7, #10]
 801c1ca:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801c1cc:	68fb      	ldr	r3, [r7, #12]
 801c1ce:	895a      	ldrh	r2, [r3, #10]
 801c1d0:	68fb      	ldr	r3, [r7, #12]
 801c1d2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801c1d4:	68fb      	ldr	r3, [r7, #12]
 801c1d6:	681b      	ldr	r3, [r3, #0]
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	d004      	beq.n	801c1e6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801c1dc:	68fb      	ldr	r3, [r7, #12]
 801c1de:	681b      	ldr	r3, [r3, #0]
 801c1e0:	4618      	mov	r0, r3
 801c1e2:	f000 f911 	bl	801c408 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801c1e6:	68fb      	ldr	r3, [r7, #12]
 801c1e8:	2200      	movs	r2, #0
 801c1ea:	601a      	str	r2, [r3, #0]
 801c1ec:	e000      	b.n	801c1f0 <pbuf_realloc+0xf4>
    return;
 801c1ee:	bf00      	nop

}
 801c1f0:	3710      	adds	r7, #16
 801c1f2:	46bd      	mov	sp, r7
 801c1f4:	bd80      	pop	{r7, pc}
 801c1f6:	bf00      	nop
 801c1f8:	0802dc8c 	.word	0x0802dc8c
 801c1fc:	0802dda4 	.word	0x0802dda4
 801c200:	0802dcec 	.word	0x0802dcec
 801c204:	0802ddbc 	.word	0x0802ddbc
 801c208:	0802ddd4 	.word	0x0802ddd4

0801c20c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801c20c:	b580      	push	{r7, lr}
 801c20e:	b086      	sub	sp, #24
 801c210:	af00      	add	r7, sp, #0
 801c212:	60f8      	str	r0, [r7, #12]
 801c214:	60b9      	str	r1, [r7, #8]
 801c216:	4613      	mov	r3, r2
 801c218:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801c21a:	68fb      	ldr	r3, [r7, #12]
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d106      	bne.n	801c22e <pbuf_add_header_impl+0x22>
 801c220:	4b2b      	ldr	r3, [pc, #172]	; (801c2d0 <pbuf_add_header_impl+0xc4>)
 801c222:	f240 12df 	movw	r2, #479	; 0x1df
 801c226:	492b      	ldr	r1, [pc, #172]	; (801c2d4 <pbuf_add_header_impl+0xc8>)
 801c228:	482b      	ldr	r0, [pc, #172]	; (801c2d8 <pbuf_add_header_impl+0xcc>)
 801c22a:	f00a fd15 	bl	8026c58 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801c22e:	68fb      	ldr	r3, [r7, #12]
 801c230:	2b00      	cmp	r3, #0
 801c232:	d003      	beq.n	801c23c <pbuf_add_header_impl+0x30>
 801c234:	68bb      	ldr	r3, [r7, #8]
 801c236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c23a:	d301      	bcc.n	801c240 <pbuf_add_header_impl+0x34>
    return 1;
 801c23c:	2301      	movs	r3, #1
 801c23e:	e043      	b.n	801c2c8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801c240:	68bb      	ldr	r3, [r7, #8]
 801c242:	2b00      	cmp	r3, #0
 801c244:	d101      	bne.n	801c24a <pbuf_add_header_impl+0x3e>
    return 0;
 801c246:	2300      	movs	r3, #0
 801c248:	e03e      	b.n	801c2c8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801c24a:	68bb      	ldr	r3, [r7, #8]
 801c24c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801c24e:	68fb      	ldr	r3, [r7, #12]
 801c250:	891a      	ldrh	r2, [r3, #8]
 801c252:	8a7b      	ldrh	r3, [r7, #18]
 801c254:	4413      	add	r3, r2
 801c256:	b29b      	uxth	r3, r3
 801c258:	8a7a      	ldrh	r2, [r7, #18]
 801c25a:	429a      	cmp	r2, r3
 801c25c:	d901      	bls.n	801c262 <pbuf_add_header_impl+0x56>
    return 1;
 801c25e:	2301      	movs	r3, #1
 801c260:	e032      	b.n	801c2c8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801c262:	68fb      	ldr	r3, [r7, #12]
 801c264:	7b1b      	ldrb	r3, [r3, #12]
 801c266:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801c268:	8a3b      	ldrh	r3, [r7, #16]
 801c26a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c26e:	2b00      	cmp	r3, #0
 801c270:	d00c      	beq.n	801c28c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	685a      	ldr	r2, [r3, #4]
 801c276:	68bb      	ldr	r3, [r7, #8]
 801c278:	425b      	negs	r3, r3
 801c27a:	4413      	add	r3, r2
 801c27c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801c27e:	68fb      	ldr	r3, [r7, #12]
 801c280:	3310      	adds	r3, #16
 801c282:	697a      	ldr	r2, [r7, #20]
 801c284:	429a      	cmp	r2, r3
 801c286:	d20d      	bcs.n	801c2a4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801c288:	2301      	movs	r3, #1
 801c28a:	e01d      	b.n	801c2c8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801c28c:	79fb      	ldrb	r3, [r7, #7]
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d006      	beq.n	801c2a0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	685a      	ldr	r2, [r3, #4]
 801c296:	68bb      	ldr	r3, [r7, #8]
 801c298:	425b      	negs	r3, r3
 801c29a:	4413      	add	r3, r2
 801c29c:	617b      	str	r3, [r7, #20]
 801c29e:	e001      	b.n	801c2a4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801c2a0:	2301      	movs	r3, #1
 801c2a2:	e011      	b.n	801c2c8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801c2a4:	68fb      	ldr	r3, [r7, #12]
 801c2a6:	697a      	ldr	r2, [r7, #20]
 801c2a8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c2aa:	68fb      	ldr	r3, [r7, #12]
 801c2ac:	895a      	ldrh	r2, [r3, #10]
 801c2ae:	8a7b      	ldrh	r3, [r7, #18]
 801c2b0:	4413      	add	r3, r2
 801c2b2:	b29a      	uxth	r2, r3
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801c2b8:	68fb      	ldr	r3, [r7, #12]
 801c2ba:	891a      	ldrh	r2, [r3, #8]
 801c2bc:	8a7b      	ldrh	r3, [r7, #18]
 801c2be:	4413      	add	r3, r2
 801c2c0:	b29a      	uxth	r2, r3
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	811a      	strh	r2, [r3, #8]


  return 0;
 801c2c6:	2300      	movs	r3, #0
}
 801c2c8:	4618      	mov	r0, r3
 801c2ca:	3718      	adds	r7, #24
 801c2cc:	46bd      	mov	sp, r7
 801c2ce:	bd80      	pop	{r7, pc}
 801c2d0:	0802dc8c 	.word	0x0802dc8c
 801c2d4:	0802ddf0 	.word	0x0802ddf0
 801c2d8:	0802dcec 	.word	0x0802dcec

0801c2dc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801c2dc:	b580      	push	{r7, lr}
 801c2de:	b082      	sub	sp, #8
 801c2e0:	af00      	add	r7, sp, #0
 801c2e2:	6078      	str	r0, [r7, #4]
 801c2e4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801c2e6:	2200      	movs	r2, #0
 801c2e8:	6839      	ldr	r1, [r7, #0]
 801c2ea:	6878      	ldr	r0, [r7, #4]
 801c2ec:	f7ff ff8e 	bl	801c20c <pbuf_add_header_impl>
 801c2f0:	4603      	mov	r3, r0
}
 801c2f2:	4618      	mov	r0, r3
 801c2f4:	3708      	adds	r7, #8
 801c2f6:	46bd      	mov	sp, r7
 801c2f8:	bd80      	pop	{r7, pc}
	...

0801c2fc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801c2fc:	b580      	push	{r7, lr}
 801c2fe:	b084      	sub	sp, #16
 801c300:	af00      	add	r7, sp, #0
 801c302:	6078      	str	r0, [r7, #4]
 801c304:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801c306:	687b      	ldr	r3, [r7, #4]
 801c308:	2b00      	cmp	r3, #0
 801c30a:	d106      	bne.n	801c31a <pbuf_remove_header+0x1e>
 801c30c:	4b20      	ldr	r3, [pc, #128]	; (801c390 <pbuf_remove_header+0x94>)
 801c30e:	f240 224b 	movw	r2, #587	; 0x24b
 801c312:	4920      	ldr	r1, [pc, #128]	; (801c394 <pbuf_remove_header+0x98>)
 801c314:	4820      	ldr	r0, [pc, #128]	; (801c398 <pbuf_remove_header+0x9c>)
 801c316:	f00a fc9f 	bl	8026c58 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d003      	beq.n	801c328 <pbuf_remove_header+0x2c>
 801c320:	683b      	ldr	r3, [r7, #0]
 801c322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c326:	d301      	bcc.n	801c32c <pbuf_remove_header+0x30>
    return 1;
 801c328:	2301      	movs	r3, #1
 801c32a:	e02c      	b.n	801c386 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801c32c:	683b      	ldr	r3, [r7, #0]
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d101      	bne.n	801c336 <pbuf_remove_header+0x3a>
    return 0;
 801c332:	2300      	movs	r3, #0
 801c334:	e027      	b.n	801c386 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801c336:	683b      	ldr	r3, [r7, #0]
 801c338:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	895b      	ldrh	r3, [r3, #10]
 801c33e:	89fa      	ldrh	r2, [r7, #14]
 801c340:	429a      	cmp	r2, r3
 801c342:	d908      	bls.n	801c356 <pbuf_remove_header+0x5a>
 801c344:	4b12      	ldr	r3, [pc, #72]	; (801c390 <pbuf_remove_header+0x94>)
 801c346:	f240 2255 	movw	r2, #597	; 0x255
 801c34a:	4914      	ldr	r1, [pc, #80]	; (801c39c <pbuf_remove_header+0xa0>)
 801c34c:	4812      	ldr	r0, [pc, #72]	; (801c398 <pbuf_remove_header+0x9c>)
 801c34e:	f00a fc83 	bl	8026c58 <iprintf>
 801c352:	2301      	movs	r3, #1
 801c354:	e017      	b.n	801c386 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	685b      	ldr	r3, [r3, #4]
 801c35a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	685a      	ldr	r2, [r3, #4]
 801c360:	683b      	ldr	r3, [r7, #0]
 801c362:	441a      	add	r2, r3
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	895a      	ldrh	r2, [r3, #10]
 801c36c:	89fb      	ldrh	r3, [r7, #14]
 801c36e:	1ad3      	subs	r3, r2, r3
 801c370:	b29a      	uxth	r2, r3
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801c376:	687b      	ldr	r3, [r7, #4]
 801c378:	891a      	ldrh	r2, [r3, #8]
 801c37a:	89fb      	ldrh	r3, [r7, #14]
 801c37c:	1ad3      	subs	r3, r2, r3
 801c37e:	b29a      	uxth	r2, r3
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801c384:	2300      	movs	r3, #0
}
 801c386:	4618      	mov	r0, r3
 801c388:	3710      	adds	r7, #16
 801c38a:	46bd      	mov	sp, r7
 801c38c:	bd80      	pop	{r7, pc}
 801c38e:	bf00      	nop
 801c390:	0802dc8c 	.word	0x0802dc8c
 801c394:	0802ddf0 	.word	0x0802ddf0
 801c398:	0802dcec 	.word	0x0802dcec
 801c39c:	0802ddfc 	.word	0x0802ddfc

0801c3a0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801c3a0:	b580      	push	{r7, lr}
 801c3a2:	b082      	sub	sp, #8
 801c3a4:	af00      	add	r7, sp, #0
 801c3a6:	6078      	str	r0, [r7, #4]
 801c3a8:	460b      	mov	r3, r1
 801c3aa:	807b      	strh	r3, [r7, #2]
 801c3ac:	4613      	mov	r3, r2
 801c3ae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801c3b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	da08      	bge.n	801c3ca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801c3b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c3bc:	425b      	negs	r3, r3
 801c3be:	4619      	mov	r1, r3
 801c3c0:	6878      	ldr	r0, [r7, #4]
 801c3c2:	f7ff ff9b 	bl	801c2fc <pbuf_remove_header>
 801c3c6:	4603      	mov	r3, r0
 801c3c8:	e007      	b.n	801c3da <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801c3ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c3ce:	787a      	ldrb	r2, [r7, #1]
 801c3d0:	4619      	mov	r1, r3
 801c3d2:	6878      	ldr	r0, [r7, #4]
 801c3d4:	f7ff ff1a 	bl	801c20c <pbuf_add_header_impl>
 801c3d8:	4603      	mov	r3, r0
  }
}
 801c3da:	4618      	mov	r0, r3
 801c3dc:	3708      	adds	r7, #8
 801c3de:	46bd      	mov	sp, r7
 801c3e0:	bd80      	pop	{r7, pc}

0801c3e2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801c3e2:	b580      	push	{r7, lr}
 801c3e4:	b082      	sub	sp, #8
 801c3e6:	af00      	add	r7, sp, #0
 801c3e8:	6078      	str	r0, [r7, #4]
 801c3ea:	460b      	mov	r3, r1
 801c3ec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801c3ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c3f2:	2201      	movs	r2, #1
 801c3f4:	4619      	mov	r1, r3
 801c3f6:	6878      	ldr	r0, [r7, #4]
 801c3f8:	f7ff ffd2 	bl	801c3a0 <pbuf_header_impl>
 801c3fc:	4603      	mov	r3, r0
}
 801c3fe:	4618      	mov	r0, r3
 801c400:	3708      	adds	r7, #8
 801c402:	46bd      	mov	sp, r7
 801c404:	bd80      	pop	{r7, pc}
	...

0801c408 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801c408:	b580      	push	{r7, lr}
 801c40a:	b088      	sub	sp, #32
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	2b00      	cmp	r3, #0
 801c414:	d10b      	bne.n	801c42e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d106      	bne.n	801c42a <pbuf_free+0x22>
 801c41c:	4b3b      	ldr	r3, [pc, #236]	; (801c50c <pbuf_free+0x104>)
 801c41e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801c422:	493b      	ldr	r1, [pc, #236]	; (801c510 <pbuf_free+0x108>)
 801c424:	483b      	ldr	r0, [pc, #236]	; (801c514 <pbuf_free+0x10c>)
 801c426:	f00a fc17 	bl	8026c58 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801c42a:	2300      	movs	r3, #0
 801c42c:	e069      	b.n	801c502 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801c42e:	2300      	movs	r3, #0
 801c430:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801c432:	e062      	b.n	801c4fa <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801c434:	f009 fe44 	bl	80260c0 <sys_arch_protect>
 801c438:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	7b9b      	ldrb	r3, [r3, #14]
 801c43e:	2b00      	cmp	r3, #0
 801c440:	d106      	bne.n	801c450 <pbuf_free+0x48>
 801c442:	4b32      	ldr	r3, [pc, #200]	; (801c50c <pbuf_free+0x104>)
 801c444:	f240 22f1 	movw	r2, #753	; 0x2f1
 801c448:	4933      	ldr	r1, [pc, #204]	; (801c518 <pbuf_free+0x110>)
 801c44a:	4832      	ldr	r0, [pc, #200]	; (801c514 <pbuf_free+0x10c>)
 801c44c:	f00a fc04 	bl	8026c58 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	7b9b      	ldrb	r3, [r3, #14]
 801c454:	3b01      	subs	r3, #1
 801c456:	b2da      	uxtb	r2, r3
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	739a      	strb	r2, [r3, #14]
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	7b9b      	ldrb	r3, [r3, #14]
 801c460:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801c462:	69b8      	ldr	r0, [r7, #24]
 801c464:	f009 fe3a 	bl	80260dc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801c468:	7dfb      	ldrb	r3, [r7, #23]
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d143      	bne.n	801c4f6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	7b1b      	ldrb	r3, [r3, #12]
 801c478:	f003 030f 	and.w	r3, r3, #15
 801c47c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	7b5b      	ldrb	r3, [r3, #13]
 801c482:	f003 0302 	and.w	r3, r3, #2
 801c486:	2b00      	cmp	r3, #0
 801c488:	d011      	beq.n	801c4ae <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801c48a:	687b      	ldr	r3, [r7, #4]
 801c48c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801c48e:	68bb      	ldr	r3, [r7, #8]
 801c490:	691b      	ldr	r3, [r3, #16]
 801c492:	2b00      	cmp	r3, #0
 801c494:	d106      	bne.n	801c4a4 <pbuf_free+0x9c>
 801c496:	4b1d      	ldr	r3, [pc, #116]	; (801c50c <pbuf_free+0x104>)
 801c498:	f240 22ff 	movw	r2, #767	; 0x2ff
 801c49c:	491f      	ldr	r1, [pc, #124]	; (801c51c <pbuf_free+0x114>)
 801c49e:	481d      	ldr	r0, [pc, #116]	; (801c514 <pbuf_free+0x10c>)
 801c4a0:	f00a fbda 	bl	8026c58 <iprintf>
        pc->custom_free_function(p);
 801c4a4:	68bb      	ldr	r3, [r7, #8]
 801c4a6:	691b      	ldr	r3, [r3, #16]
 801c4a8:	6878      	ldr	r0, [r7, #4]
 801c4aa:	4798      	blx	r3
 801c4ac:	e01d      	b.n	801c4ea <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801c4ae:	7bfb      	ldrb	r3, [r7, #15]
 801c4b0:	2b02      	cmp	r3, #2
 801c4b2:	d104      	bne.n	801c4be <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801c4b4:	6879      	ldr	r1, [r7, #4]
 801c4b6:	200c      	movs	r0, #12
 801c4b8:	f7ff f902 	bl	801b6c0 <memp_free>
 801c4bc:	e015      	b.n	801c4ea <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801c4be:	7bfb      	ldrb	r3, [r7, #15]
 801c4c0:	2b01      	cmp	r3, #1
 801c4c2:	d104      	bne.n	801c4ce <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801c4c4:	6879      	ldr	r1, [r7, #4]
 801c4c6:	200b      	movs	r0, #11
 801c4c8:	f7ff f8fa 	bl	801b6c0 <memp_free>
 801c4cc:	e00d      	b.n	801c4ea <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801c4ce:	7bfb      	ldrb	r3, [r7, #15]
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d103      	bne.n	801c4dc <pbuf_free+0xd4>
          mem_free(p);
 801c4d4:	6878      	ldr	r0, [r7, #4]
 801c4d6:	f7fe fd5d 	bl	801af94 <mem_free>
 801c4da:	e006      	b.n	801c4ea <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801c4dc:	4b0b      	ldr	r3, [pc, #44]	; (801c50c <pbuf_free+0x104>)
 801c4de:	f240 320f 	movw	r2, #783	; 0x30f
 801c4e2:	490f      	ldr	r1, [pc, #60]	; (801c520 <pbuf_free+0x118>)
 801c4e4:	480b      	ldr	r0, [pc, #44]	; (801c514 <pbuf_free+0x10c>)
 801c4e6:	f00a fbb7 	bl	8026c58 <iprintf>
        }
      }
      count++;
 801c4ea:	7ffb      	ldrb	r3, [r7, #31]
 801c4ec:	3301      	adds	r3, #1
 801c4ee:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801c4f0:	693b      	ldr	r3, [r7, #16]
 801c4f2:	607b      	str	r3, [r7, #4]
 801c4f4:	e001      	b.n	801c4fa <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801c4f6:	2300      	movs	r3, #0
 801c4f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d199      	bne.n	801c434 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801c500:	7ffb      	ldrb	r3, [r7, #31]
}
 801c502:	4618      	mov	r0, r3
 801c504:	3720      	adds	r7, #32
 801c506:	46bd      	mov	sp, r7
 801c508:	bd80      	pop	{r7, pc}
 801c50a:	bf00      	nop
 801c50c:	0802dc8c 	.word	0x0802dc8c
 801c510:	0802ddf0 	.word	0x0802ddf0
 801c514:	0802dcec 	.word	0x0802dcec
 801c518:	0802de1c 	.word	0x0802de1c
 801c51c:	0802de34 	.word	0x0802de34
 801c520:	0802de58 	.word	0x0802de58

0801c524 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801c524:	b480      	push	{r7}
 801c526:	b085      	sub	sp, #20
 801c528:	af00      	add	r7, sp, #0
 801c52a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801c52c:	2300      	movs	r3, #0
 801c52e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801c530:	e005      	b.n	801c53e <pbuf_clen+0x1a>
    ++len;
 801c532:	89fb      	ldrh	r3, [r7, #14]
 801c534:	3301      	adds	r3, #1
 801c536:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	681b      	ldr	r3, [r3, #0]
 801c53c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	2b00      	cmp	r3, #0
 801c542:	d1f6      	bne.n	801c532 <pbuf_clen+0xe>
  }
  return len;
 801c544:	89fb      	ldrh	r3, [r7, #14]
}
 801c546:	4618      	mov	r0, r3
 801c548:	3714      	adds	r7, #20
 801c54a:	46bd      	mov	sp, r7
 801c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c550:	4770      	bx	lr
	...

0801c554 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801c554:	b580      	push	{r7, lr}
 801c556:	b084      	sub	sp, #16
 801c558:	af00      	add	r7, sp, #0
 801c55a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d016      	beq.n	801c590 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801c562:	f009 fdad 	bl	80260c0 <sys_arch_protect>
 801c566:	60f8      	str	r0, [r7, #12]
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	7b9b      	ldrb	r3, [r3, #14]
 801c56c:	3301      	adds	r3, #1
 801c56e:	b2da      	uxtb	r2, r3
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	739a      	strb	r2, [r3, #14]
 801c574:	68f8      	ldr	r0, [r7, #12]
 801c576:	f009 fdb1 	bl	80260dc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	7b9b      	ldrb	r3, [r3, #14]
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d106      	bne.n	801c590 <pbuf_ref+0x3c>
 801c582:	4b05      	ldr	r3, [pc, #20]	; (801c598 <pbuf_ref+0x44>)
 801c584:	f240 3242 	movw	r2, #834	; 0x342
 801c588:	4904      	ldr	r1, [pc, #16]	; (801c59c <pbuf_ref+0x48>)
 801c58a:	4805      	ldr	r0, [pc, #20]	; (801c5a0 <pbuf_ref+0x4c>)
 801c58c:	f00a fb64 	bl	8026c58 <iprintf>
  }
}
 801c590:	bf00      	nop
 801c592:	3710      	adds	r7, #16
 801c594:	46bd      	mov	sp, r7
 801c596:	bd80      	pop	{r7, pc}
 801c598:	0802dc8c 	.word	0x0802dc8c
 801c59c:	0802de6c 	.word	0x0802de6c
 801c5a0:	0802dcec 	.word	0x0802dcec

0801c5a4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801c5a4:	b580      	push	{r7, lr}
 801c5a6:	b084      	sub	sp, #16
 801c5a8:	af00      	add	r7, sp, #0
 801c5aa:	6078      	str	r0, [r7, #4]
 801c5ac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d002      	beq.n	801c5ba <pbuf_cat+0x16>
 801c5b4:	683b      	ldr	r3, [r7, #0]
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d107      	bne.n	801c5ca <pbuf_cat+0x26>
 801c5ba:	4b20      	ldr	r3, [pc, #128]	; (801c63c <pbuf_cat+0x98>)
 801c5bc:	f240 3259 	movw	r2, #857	; 0x359
 801c5c0:	491f      	ldr	r1, [pc, #124]	; (801c640 <pbuf_cat+0x9c>)
 801c5c2:	4820      	ldr	r0, [pc, #128]	; (801c644 <pbuf_cat+0xa0>)
 801c5c4:	f00a fb48 	bl	8026c58 <iprintf>
 801c5c8:	e034      	b.n	801c634 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	60fb      	str	r3, [r7, #12]
 801c5ce:	e00a      	b.n	801c5e6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801c5d0:	68fb      	ldr	r3, [r7, #12]
 801c5d2:	891a      	ldrh	r2, [r3, #8]
 801c5d4:	683b      	ldr	r3, [r7, #0]
 801c5d6:	891b      	ldrh	r3, [r3, #8]
 801c5d8:	4413      	add	r3, r2
 801c5da:	b29a      	uxth	r2, r3
 801c5dc:	68fb      	ldr	r3, [r7, #12]
 801c5de:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801c5e0:	68fb      	ldr	r3, [r7, #12]
 801c5e2:	681b      	ldr	r3, [r3, #0]
 801c5e4:	60fb      	str	r3, [r7, #12]
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	681b      	ldr	r3, [r3, #0]
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	d1f0      	bne.n	801c5d0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801c5ee:	68fb      	ldr	r3, [r7, #12]
 801c5f0:	891a      	ldrh	r2, [r3, #8]
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	895b      	ldrh	r3, [r3, #10]
 801c5f6:	429a      	cmp	r2, r3
 801c5f8:	d006      	beq.n	801c608 <pbuf_cat+0x64>
 801c5fa:	4b10      	ldr	r3, [pc, #64]	; (801c63c <pbuf_cat+0x98>)
 801c5fc:	f240 3262 	movw	r2, #866	; 0x362
 801c600:	4911      	ldr	r1, [pc, #68]	; (801c648 <pbuf_cat+0xa4>)
 801c602:	4810      	ldr	r0, [pc, #64]	; (801c644 <pbuf_cat+0xa0>)
 801c604:	f00a fb28 	bl	8026c58 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801c608:	68fb      	ldr	r3, [r7, #12]
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	d006      	beq.n	801c61e <pbuf_cat+0x7a>
 801c610:	4b0a      	ldr	r3, [pc, #40]	; (801c63c <pbuf_cat+0x98>)
 801c612:	f240 3263 	movw	r2, #867	; 0x363
 801c616:	490d      	ldr	r1, [pc, #52]	; (801c64c <pbuf_cat+0xa8>)
 801c618:	480a      	ldr	r0, [pc, #40]	; (801c644 <pbuf_cat+0xa0>)
 801c61a:	f00a fb1d 	bl	8026c58 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801c61e:	68fb      	ldr	r3, [r7, #12]
 801c620:	891a      	ldrh	r2, [r3, #8]
 801c622:	683b      	ldr	r3, [r7, #0]
 801c624:	891b      	ldrh	r3, [r3, #8]
 801c626:	4413      	add	r3, r2
 801c628:	b29a      	uxth	r2, r3
 801c62a:	68fb      	ldr	r3, [r7, #12]
 801c62c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801c62e:	68fb      	ldr	r3, [r7, #12]
 801c630:	683a      	ldr	r2, [r7, #0]
 801c632:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801c634:	3710      	adds	r7, #16
 801c636:	46bd      	mov	sp, r7
 801c638:	bd80      	pop	{r7, pc}
 801c63a:	bf00      	nop
 801c63c:	0802dc8c 	.word	0x0802dc8c
 801c640:	0802de80 	.word	0x0802de80
 801c644:	0802dcec 	.word	0x0802dcec
 801c648:	0802deb8 	.word	0x0802deb8
 801c64c:	0802dee8 	.word	0x0802dee8

0801c650 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801c650:	b580      	push	{r7, lr}
 801c652:	b082      	sub	sp, #8
 801c654:	af00      	add	r7, sp, #0
 801c656:	6078      	str	r0, [r7, #4]
 801c658:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801c65a:	6839      	ldr	r1, [r7, #0]
 801c65c:	6878      	ldr	r0, [r7, #4]
 801c65e:	f7ff ffa1 	bl	801c5a4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801c662:	6838      	ldr	r0, [r7, #0]
 801c664:	f7ff ff76 	bl	801c554 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801c668:	bf00      	nop
 801c66a:	3708      	adds	r7, #8
 801c66c:	46bd      	mov	sp, r7
 801c66e:	bd80      	pop	{r7, pc}

0801c670 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801c670:	b580      	push	{r7, lr}
 801c672:	b086      	sub	sp, #24
 801c674:	af00      	add	r7, sp, #0
 801c676:	6078      	str	r0, [r7, #4]
 801c678:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801c67a:	2300      	movs	r3, #0
 801c67c:	617b      	str	r3, [r7, #20]
 801c67e:	2300      	movs	r3, #0
 801c680:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	2b00      	cmp	r3, #0
 801c686:	d008      	beq.n	801c69a <pbuf_copy+0x2a>
 801c688:	683b      	ldr	r3, [r7, #0]
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d005      	beq.n	801c69a <pbuf_copy+0x2a>
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	891a      	ldrh	r2, [r3, #8]
 801c692:	683b      	ldr	r3, [r7, #0]
 801c694:	891b      	ldrh	r3, [r3, #8]
 801c696:	429a      	cmp	r2, r3
 801c698:	d209      	bcs.n	801c6ae <pbuf_copy+0x3e>
 801c69a:	4b57      	ldr	r3, [pc, #348]	; (801c7f8 <pbuf_copy+0x188>)
 801c69c:	f240 32c9 	movw	r2, #969	; 0x3c9
 801c6a0:	4956      	ldr	r1, [pc, #344]	; (801c7fc <pbuf_copy+0x18c>)
 801c6a2:	4857      	ldr	r0, [pc, #348]	; (801c800 <pbuf_copy+0x190>)
 801c6a4:	f00a fad8 	bl	8026c58 <iprintf>
 801c6a8:	f06f 030f 	mvn.w	r3, #15
 801c6ac:	e09f      	b.n	801c7ee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	895b      	ldrh	r3, [r3, #10]
 801c6b2:	461a      	mov	r2, r3
 801c6b4:	697b      	ldr	r3, [r7, #20]
 801c6b6:	1ad2      	subs	r2, r2, r3
 801c6b8:	683b      	ldr	r3, [r7, #0]
 801c6ba:	895b      	ldrh	r3, [r3, #10]
 801c6bc:	4619      	mov	r1, r3
 801c6be:	693b      	ldr	r3, [r7, #16]
 801c6c0:	1acb      	subs	r3, r1, r3
 801c6c2:	429a      	cmp	r2, r3
 801c6c4:	d306      	bcc.n	801c6d4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801c6c6:	683b      	ldr	r3, [r7, #0]
 801c6c8:	895b      	ldrh	r3, [r3, #10]
 801c6ca:	461a      	mov	r2, r3
 801c6cc:	693b      	ldr	r3, [r7, #16]
 801c6ce:	1ad3      	subs	r3, r2, r3
 801c6d0:	60fb      	str	r3, [r7, #12]
 801c6d2:	e005      	b.n	801c6e0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801c6d4:	687b      	ldr	r3, [r7, #4]
 801c6d6:	895b      	ldrh	r3, [r3, #10]
 801c6d8:	461a      	mov	r2, r3
 801c6da:	697b      	ldr	r3, [r7, #20]
 801c6dc:	1ad3      	subs	r3, r2, r3
 801c6de:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	685a      	ldr	r2, [r3, #4]
 801c6e4:	697b      	ldr	r3, [r7, #20]
 801c6e6:	18d0      	adds	r0, r2, r3
 801c6e8:	683b      	ldr	r3, [r7, #0]
 801c6ea:	685a      	ldr	r2, [r3, #4]
 801c6ec:	693b      	ldr	r3, [r7, #16]
 801c6ee:	4413      	add	r3, r2
 801c6f0:	68fa      	ldr	r2, [r7, #12]
 801c6f2:	4619      	mov	r1, r3
 801c6f4:	f009 ff58 	bl	80265a8 <memcpy>
    offset_to += len;
 801c6f8:	697a      	ldr	r2, [r7, #20]
 801c6fa:	68fb      	ldr	r3, [r7, #12]
 801c6fc:	4413      	add	r3, r2
 801c6fe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801c700:	693a      	ldr	r2, [r7, #16]
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	4413      	add	r3, r2
 801c706:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	895b      	ldrh	r3, [r3, #10]
 801c70c:	461a      	mov	r2, r3
 801c70e:	697b      	ldr	r3, [r7, #20]
 801c710:	4293      	cmp	r3, r2
 801c712:	d906      	bls.n	801c722 <pbuf_copy+0xb2>
 801c714:	4b38      	ldr	r3, [pc, #224]	; (801c7f8 <pbuf_copy+0x188>)
 801c716:	f240 32d9 	movw	r2, #985	; 0x3d9
 801c71a:	493a      	ldr	r1, [pc, #232]	; (801c804 <pbuf_copy+0x194>)
 801c71c:	4838      	ldr	r0, [pc, #224]	; (801c800 <pbuf_copy+0x190>)
 801c71e:	f00a fa9b 	bl	8026c58 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801c722:	683b      	ldr	r3, [r7, #0]
 801c724:	895b      	ldrh	r3, [r3, #10]
 801c726:	461a      	mov	r2, r3
 801c728:	693b      	ldr	r3, [r7, #16]
 801c72a:	4293      	cmp	r3, r2
 801c72c:	d906      	bls.n	801c73c <pbuf_copy+0xcc>
 801c72e:	4b32      	ldr	r3, [pc, #200]	; (801c7f8 <pbuf_copy+0x188>)
 801c730:	f240 32da 	movw	r2, #986	; 0x3da
 801c734:	4934      	ldr	r1, [pc, #208]	; (801c808 <pbuf_copy+0x198>)
 801c736:	4832      	ldr	r0, [pc, #200]	; (801c800 <pbuf_copy+0x190>)
 801c738:	f00a fa8e 	bl	8026c58 <iprintf>
    if (offset_from >= p_from->len) {
 801c73c:	683b      	ldr	r3, [r7, #0]
 801c73e:	895b      	ldrh	r3, [r3, #10]
 801c740:	461a      	mov	r2, r3
 801c742:	693b      	ldr	r3, [r7, #16]
 801c744:	4293      	cmp	r3, r2
 801c746:	d304      	bcc.n	801c752 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801c748:	2300      	movs	r3, #0
 801c74a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801c74c:	683b      	ldr	r3, [r7, #0]
 801c74e:	681b      	ldr	r3, [r3, #0]
 801c750:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	895b      	ldrh	r3, [r3, #10]
 801c756:	461a      	mov	r2, r3
 801c758:	697b      	ldr	r3, [r7, #20]
 801c75a:	4293      	cmp	r3, r2
 801c75c:	d114      	bne.n	801c788 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801c75e:	2300      	movs	r3, #0
 801c760:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	681b      	ldr	r3, [r3, #0]
 801c766:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d10c      	bne.n	801c788 <pbuf_copy+0x118>
 801c76e:	683b      	ldr	r3, [r7, #0]
 801c770:	2b00      	cmp	r3, #0
 801c772:	d009      	beq.n	801c788 <pbuf_copy+0x118>
 801c774:	4b20      	ldr	r3, [pc, #128]	; (801c7f8 <pbuf_copy+0x188>)
 801c776:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801c77a:	4924      	ldr	r1, [pc, #144]	; (801c80c <pbuf_copy+0x19c>)
 801c77c:	4820      	ldr	r0, [pc, #128]	; (801c800 <pbuf_copy+0x190>)
 801c77e:	f00a fa6b 	bl	8026c58 <iprintf>
 801c782:	f06f 030f 	mvn.w	r3, #15
 801c786:	e032      	b.n	801c7ee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801c788:	683b      	ldr	r3, [r7, #0]
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d013      	beq.n	801c7b6 <pbuf_copy+0x146>
 801c78e:	683b      	ldr	r3, [r7, #0]
 801c790:	895a      	ldrh	r2, [r3, #10]
 801c792:	683b      	ldr	r3, [r7, #0]
 801c794:	891b      	ldrh	r3, [r3, #8]
 801c796:	429a      	cmp	r2, r3
 801c798:	d10d      	bne.n	801c7b6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801c79a:	683b      	ldr	r3, [r7, #0]
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d009      	beq.n	801c7b6 <pbuf_copy+0x146>
 801c7a2:	4b15      	ldr	r3, [pc, #84]	; (801c7f8 <pbuf_copy+0x188>)
 801c7a4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801c7a8:	4919      	ldr	r1, [pc, #100]	; (801c810 <pbuf_copy+0x1a0>)
 801c7aa:	4815      	ldr	r0, [pc, #84]	; (801c800 <pbuf_copy+0x190>)
 801c7ac:	f00a fa54 	bl	8026c58 <iprintf>
 801c7b0:	f06f 0305 	mvn.w	r3, #5
 801c7b4:	e01b      	b.n	801c7ee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d013      	beq.n	801c7e4 <pbuf_copy+0x174>
 801c7bc:	687b      	ldr	r3, [r7, #4]
 801c7be:	895a      	ldrh	r2, [r3, #10]
 801c7c0:	687b      	ldr	r3, [r7, #4]
 801c7c2:	891b      	ldrh	r3, [r3, #8]
 801c7c4:	429a      	cmp	r2, r3
 801c7c6:	d10d      	bne.n	801c7e4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d009      	beq.n	801c7e4 <pbuf_copy+0x174>
 801c7d0:	4b09      	ldr	r3, [pc, #36]	; (801c7f8 <pbuf_copy+0x188>)
 801c7d2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801c7d6:	490e      	ldr	r1, [pc, #56]	; (801c810 <pbuf_copy+0x1a0>)
 801c7d8:	4809      	ldr	r0, [pc, #36]	; (801c800 <pbuf_copy+0x190>)
 801c7da:	f00a fa3d 	bl	8026c58 <iprintf>
 801c7de:	f06f 0305 	mvn.w	r3, #5
 801c7e2:	e004      	b.n	801c7ee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801c7e4:	683b      	ldr	r3, [r7, #0]
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	f47f af61 	bne.w	801c6ae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801c7ec:	2300      	movs	r3, #0
}
 801c7ee:	4618      	mov	r0, r3
 801c7f0:	3718      	adds	r7, #24
 801c7f2:	46bd      	mov	sp, r7
 801c7f4:	bd80      	pop	{r7, pc}
 801c7f6:	bf00      	nop
 801c7f8:	0802dc8c 	.word	0x0802dc8c
 801c7fc:	0802df34 	.word	0x0802df34
 801c800:	0802dcec 	.word	0x0802dcec
 801c804:	0802df64 	.word	0x0802df64
 801c808:	0802df7c 	.word	0x0802df7c
 801c80c:	0802df98 	.word	0x0802df98
 801c810:	0802dfa8 	.word	0x0802dfa8

0801c814 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801c814:	b580      	push	{r7, lr}
 801c816:	b088      	sub	sp, #32
 801c818:	af00      	add	r7, sp, #0
 801c81a:	60f8      	str	r0, [r7, #12]
 801c81c:	60b9      	str	r1, [r7, #8]
 801c81e:	4611      	mov	r1, r2
 801c820:	461a      	mov	r2, r3
 801c822:	460b      	mov	r3, r1
 801c824:	80fb      	strh	r3, [r7, #6]
 801c826:	4613      	mov	r3, r2
 801c828:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801c82a:	2300      	movs	r3, #0
 801c82c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801c82e:	2300      	movs	r3, #0
 801c830:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	2b00      	cmp	r3, #0
 801c836:	d108      	bne.n	801c84a <pbuf_copy_partial+0x36>
 801c838:	4b2b      	ldr	r3, [pc, #172]	; (801c8e8 <pbuf_copy_partial+0xd4>)
 801c83a:	f240 420a 	movw	r2, #1034	; 0x40a
 801c83e:	492b      	ldr	r1, [pc, #172]	; (801c8ec <pbuf_copy_partial+0xd8>)
 801c840:	482b      	ldr	r0, [pc, #172]	; (801c8f0 <pbuf_copy_partial+0xdc>)
 801c842:	f00a fa09 	bl	8026c58 <iprintf>
 801c846:	2300      	movs	r3, #0
 801c848:	e04a      	b.n	801c8e0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801c84a:	68bb      	ldr	r3, [r7, #8]
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	d108      	bne.n	801c862 <pbuf_copy_partial+0x4e>
 801c850:	4b25      	ldr	r3, [pc, #148]	; (801c8e8 <pbuf_copy_partial+0xd4>)
 801c852:	f240 420b 	movw	r2, #1035	; 0x40b
 801c856:	4927      	ldr	r1, [pc, #156]	; (801c8f4 <pbuf_copy_partial+0xe0>)
 801c858:	4825      	ldr	r0, [pc, #148]	; (801c8f0 <pbuf_copy_partial+0xdc>)
 801c85a:	f00a f9fd 	bl	8026c58 <iprintf>
 801c85e:	2300      	movs	r3, #0
 801c860:	e03e      	b.n	801c8e0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801c862:	68fb      	ldr	r3, [r7, #12]
 801c864:	61fb      	str	r3, [r7, #28]
 801c866:	e034      	b.n	801c8d2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801c868:	88bb      	ldrh	r3, [r7, #4]
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	d00a      	beq.n	801c884 <pbuf_copy_partial+0x70>
 801c86e:	69fb      	ldr	r3, [r7, #28]
 801c870:	895b      	ldrh	r3, [r3, #10]
 801c872:	88ba      	ldrh	r2, [r7, #4]
 801c874:	429a      	cmp	r2, r3
 801c876:	d305      	bcc.n	801c884 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801c878:	69fb      	ldr	r3, [r7, #28]
 801c87a:	895b      	ldrh	r3, [r3, #10]
 801c87c:	88ba      	ldrh	r2, [r7, #4]
 801c87e:	1ad3      	subs	r3, r2, r3
 801c880:	80bb      	strh	r3, [r7, #4]
 801c882:	e023      	b.n	801c8cc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801c884:	69fb      	ldr	r3, [r7, #28]
 801c886:	895a      	ldrh	r2, [r3, #10]
 801c888:	88bb      	ldrh	r3, [r7, #4]
 801c88a:	1ad3      	subs	r3, r2, r3
 801c88c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801c88e:	8b3a      	ldrh	r2, [r7, #24]
 801c890:	88fb      	ldrh	r3, [r7, #6]
 801c892:	429a      	cmp	r2, r3
 801c894:	d901      	bls.n	801c89a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801c896:	88fb      	ldrh	r3, [r7, #6]
 801c898:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801c89a:	8b7b      	ldrh	r3, [r7, #26]
 801c89c:	68ba      	ldr	r2, [r7, #8]
 801c89e:	18d0      	adds	r0, r2, r3
 801c8a0:	69fb      	ldr	r3, [r7, #28]
 801c8a2:	685a      	ldr	r2, [r3, #4]
 801c8a4:	88bb      	ldrh	r3, [r7, #4]
 801c8a6:	4413      	add	r3, r2
 801c8a8:	8b3a      	ldrh	r2, [r7, #24]
 801c8aa:	4619      	mov	r1, r3
 801c8ac:	f009 fe7c 	bl	80265a8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801c8b0:	8afa      	ldrh	r2, [r7, #22]
 801c8b2:	8b3b      	ldrh	r3, [r7, #24]
 801c8b4:	4413      	add	r3, r2
 801c8b6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801c8b8:	8b7a      	ldrh	r2, [r7, #26]
 801c8ba:	8b3b      	ldrh	r3, [r7, #24]
 801c8bc:	4413      	add	r3, r2
 801c8be:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801c8c0:	88fa      	ldrh	r2, [r7, #6]
 801c8c2:	8b3b      	ldrh	r3, [r7, #24]
 801c8c4:	1ad3      	subs	r3, r2, r3
 801c8c6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801c8c8:	2300      	movs	r3, #0
 801c8ca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801c8cc:	69fb      	ldr	r3, [r7, #28]
 801c8ce:	681b      	ldr	r3, [r3, #0]
 801c8d0:	61fb      	str	r3, [r7, #28]
 801c8d2:	88fb      	ldrh	r3, [r7, #6]
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	d002      	beq.n	801c8de <pbuf_copy_partial+0xca>
 801c8d8:	69fb      	ldr	r3, [r7, #28]
 801c8da:	2b00      	cmp	r3, #0
 801c8dc:	d1c4      	bne.n	801c868 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801c8de:	8afb      	ldrh	r3, [r7, #22]
}
 801c8e0:	4618      	mov	r0, r3
 801c8e2:	3720      	adds	r7, #32
 801c8e4:	46bd      	mov	sp, r7
 801c8e6:	bd80      	pop	{r7, pc}
 801c8e8:	0802dc8c 	.word	0x0802dc8c
 801c8ec:	0802dfd4 	.word	0x0802dfd4
 801c8f0:	0802dcec 	.word	0x0802dcec
 801c8f4:	0802dff4 	.word	0x0802dff4

0801c8f8 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 801c8f8:	b480      	push	{r7}
 801c8fa:	b087      	sub	sp, #28
 801c8fc:	af00      	add	r7, sp, #0
 801c8fe:	60f8      	str	r0, [r7, #12]
 801c900:	460b      	mov	r3, r1
 801c902:	607a      	str	r2, [r7, #4]
 801c904:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 801c906:	897b      	ldrh	r3, [r7, #10]
 801c908:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 801c90a:	68fb      	ldr	r3, [r7, #12]
 801c90c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 801c90e:	e007      	b.n	801c920 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 801c910:	693b      	ldr	r3, [r7, #16]
 801c912:	895b      	ldrh	r3, [r3, #10]
 801c914:	8afa      	ldrh	r2, [r7, #22]
 801c916:	1ad3      	subs	r3, r2, r3
 801c918:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 801c91a:	693b      	ldr	r3, [r7, #16]
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 801c920:	693b      	ldr	r3, [r7, #16]
 801c922:	2b00      	cmp	r3, #0
 801c924:	d004      	beq.n	801c930 <pbuf_skip_const+0x38>
 801c926:	693b      	ldr	r3, [r7, #16]
 801c928:	895b      	ldrh	r3, [r3, #10]
 801c92a:	8afa      	ldrh	r2, [r7, #22]
 801c92c:	429a      	cmp	r2, r3
 801c92e:	d2ef      	bcs.n	801c910 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	2b00      	cmp	r3, #0
 801c934:	d002      	beq.n	801c93c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	8afa      	ldrh	r2, [r7, #22]
 801c93a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 801c93c:	693b      	ldr	r3, [r7, #16]
}
 801c93e:	4618      	mov	r0, r3
 801c940:	371c      	adds	r7, #28
 801c942:	46bd      	mov	sp, r7
 801c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c948:	4770      	bx	lr
	...

0801c94c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801c94c:	b580      	push	{r7, lr}
 801c94e:	b084      	sub	sp, #16
 801c950:	af00      	add	r7, sp, #0
 801c952:	4603      	mov	r3, r0
 801c954:	603a      	str	r2, [r7, #0]
 801c956:	71fb      	strb	r3, [r7, #7]
 801c958:	460b      	mov	r3, r1
 801c95a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801c95c:	683b      	ldr	r3, [r7, #0]
 801c95e:	8919      	ldrh	r1, [r3, #8]
 801c960:	88ba      	ldrh	r2, [r7, #4]
 801c962:	79fb      	ldrb	r3, [r7, #7]
 801c964:	4618      	mov	r0, r3
 801c966:	f7ff fa6b 	bl	801be40 <pbuf_alloc>
 801c96a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801c96c:	68fb      	ldr	r3, [r7, #12]
 801c96e:	2b00      	cmp	r3, #0
 801c970:	d101      	bne.n	801c976 <pbuf_clone+0x2a>
    return NULL;
 801c972:	2300      	movs	r3, #0
 801c974:	e011      	b.n	801c99a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801c976:	6839      	ldr	r1, [r7, #0]
 801c978:	68f8      	ldr	r0, [r7, #12]
 801c97a:	f7ff fe79 	bl	801c670 <pbuf_copy>
 801c97e:	4603      	mov	r3, r0
 801c980:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801c982:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801c986:	2b00      	cmp	r3, #0
 801c988:	d006      	beq.n	801c998 <pbuf_clone+0x4c>
 801c98a:	4b06      	ldr	r3, [pc, #24]	; (801c9a4 <pbuf_clone+0x58>)
 801c98c:	f240 5224 	movw	r2, #1316	; 0x524
 801c990:	4905      	ldr	r1, [pc, #20]	; (801c9a8 <pbuf_clone+0x5c>)
 801c992:	4806      	ldr	r0, [pc, #24]	; (801c9ac <pbuf_clone+0x60>)
 801c994:	f00a f960 	bl	8026c58 <iprintf>
  return q;
 801c998:	68fb      	ldr	r3, [r7, #12]
}
 801c99a:	4618      	mov	r0, r3
 801c99c:	3710      	adds	r7, #16
 801c99e:	46bd      	mov	sp, r7
 801c9a0:	bd80      	pop	{r7, pc}
 801c9a2:	bf00      	nop
 801c9a4:	0802dc8c 	.word	0x0802dc8c
 801c9a8:	0802e100 	.word	0x0802e100
 801c9ac:	0802dcec 	.word	0x0802dcec

0801c9b0 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 801c9b0:	b580      	push	{r7, lr}
 801c9b2:	b084      	sub	sp, #16
 801c9b4:	af00      	add	r7, sp, #0
 801c9b6:	6078      	str	r0, [r7, #4]
 801c9b8:	460b      	mov	r3, r1
 801c9ba:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 801c9bc:	887b      	ldrh	r3, [r7, #2]
 801c9be:	4619      	mov	r1, r3
 801c9c0:	6878      	ldr	r0, [r7, #4]
 801c9c2:	f000 f80c 	bl	801c9de <pbuf_try_get_at>
 801c9c6:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 801c9c8:	68fb      	ldr	r3, [r7, #12]
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	db02      	blt.n	801c9d4 <pbuf_get_at+0x24>
    return (u8_t)ret;
 801c9ce:	68fb      	ldr	r3, [r7, #12]
 801c9d0:	b2db      	uxtb	r3, r3
 801c9d2:	e000      	b.n	801c9d6 <pbuf_get_at+0x26>
  }
  return 0;
 801c9d4:	2300      	movs	r3, #0
}
 801c9d6:	4618      	mov	r0, r3
 801c9d8:	3710      	adds	r7, #16
 801c9da:	46bd      	mov	sp, r7
 801c9dc:	bd80      	pop	{r7, pc}

0801c9de <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 801c9de:	b580      	push	{r7, lr}
 801c9e0:	b084      	sub	sp, #16
 801c9e2:	af00      	add	r7, sp, #0
 801c9e4:	6078      	str	r0, [r7, #4]
 801c9e6:	460b      	mov	r3, r1
 801c9e8:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 801c9ea:	f107 020a 	add.w	r2, r7, #10
 801c9ee:	887b      	ldrh	r3, [r7, #2]
 801c9f0:	4619      	mov	r1, r3
 801c9f2:	6878      	ldr	r0, [r7, #4]
 801c9f4:	f7ff ff80 	bl	801c8f8 <pbuf_skip_const>
 801c9f8:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 801c9fa:	68fb      	ldr	r3, [r7, #12]
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	d00a      	beq.n	801ca16 <pbuf_try_get_at+0x38>
 801ca00:	68fb      	ldr	r3, [r7, #12]
 801ca02:	895a      	ldrh	r2, [r3, #10]
 801ca04:	897b      	ldrh	r3, [r7, #10]
 801ca06:	429a      	cmp	r2, r3
 801ca08:	d905      	bls.n	801ca16 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 801ca0a:	68fb      	ldr	r3, [r7, #12]
 801ca0c:	685b      	ldr	r3, [r3, #4]
 801ca0e:	897a      	ldrh	r2, [r7, #10]
 801ca10:	4413      	add	r3, r2
 801ca12:	781b      	ldrb	r3, [r3, #0]
 801ca14:	e001      	b.n	801ca1a <pbuf_try_get_at+0x3c>
  }
  return -1;
 801ca16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801ca1a:	4618      	mov	r0, r3
 801ca1c:	3710      	adds	r7, #16
 801ca1e:	46bd      	mov	sp, r7
 801ca20:	bd80      	pop	{r7, pc}
	...

0801ca24 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801ca24:	b580      	push	{r7, lr}
 801ca26:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ca28:	f00a f9a4 	bl	8026d74 <rand>
 801ca2c:	4603      	mov	r3, r0
 801ca2e:	b29b      	uxth	r3, r3
 801ca30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ca34:	b29b      	uxth	r3, r3
 801ca36:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801ca3a:	b29a      	uxth	r2, r3
 801ca3c:	4b01      	ldr	r3, [pc, #4]	; (801ca44 <tcp_init+0x20>)
 801ca3e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ca40:	bf00      	nop
 801ca42:	bd80      	pop	{r7, pc}
 801ca44:	20000058 	.word	0x20000058

0801ca48 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801ca48:	b580      	push	{r7, lr}
 801ca4a:	b082      	sub	sp, #8
 801ca4c:	af00      	add	r7, sp, #0
 801ca4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	7d1b      	ldrb	r3, [r3, #20]
 801ca54:	2b01      	cmp	r3, #1
 801ca56:	d105      	bne.n	801ca64 <tcp_free+0x1c>
 801ca58:	4b06      	ldr	r3, [pc, #24]	; (801ca74 <tcp_free+0x2c>)
 801ca5a:	22d4      	movs	r2, #212	; 0xd4
 801ca5c:	4906      	ldr	r1, [pc, #24]	; (801ca78 <tcp_free+0x30>)
 801ca5e:	4807      	ldr	r0, [pc, #28]	; (801ca7c <tcp_free+0x34>)
 801ca60:	f00a f8fa 	bl	8026c58 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801ca64:	6879      	ldr	r1, [r7, #4]
 801ca66:	2001      	movs	r0, #1
 801ca68:	f7fe fe2a 	bl	801b6c0 <memp_free>
}
 801ca6c:	bf00      	nop
 801ca6e:	3708      	adds	r7, #8
 801ca70:	46bd      	mov	sp, r7
 801ca72:	bd80      	pop	{r7, pc}
 801ca74:	0802e18c 	.word	0x0802e18c
 801ca78:	0802e1bc 	.word	0x0802e1bc
 801ca7c:	0802e1d0 	.word	0x0802e1d0

0801ca80 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801ca80:	b580      	push	{r7, lr}
 801ca82:	b082      	sub	sp, #8
 801ca84:	af00      	add	r7, sp, #0
 801ca86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	7d1b      	ldrb	r3, [r3, #20]
 801ca8c:	2b01      	cmp	r3, #1
 801ca8e:	d105      	bne.n	801ca9c <tcp_free_listen+0x1c>
 801ca90:	4b06      	ldr	r3, [pc, #24]	; (801caac <tcp_free_listen+0x2c>)
 801ca92:	22df      	movs	r2, #223	; 0xdf
 801ca94:	4906      	ldr	r1, [pc, #24]	; (801cab0 <tcp_free_listen+0x30>)
 801ca96:	4807      	ldr	r0, [pc, #28]	; (801cab4 <tcp_free_listen+0x34>)
 801ca98:	f00a f8de 	bl	8026c58 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801ca9c:	6879      	ldr	r1, [r7, #4]
 801ca9e:	2002      	movs	r0, #2
 801caa0:	f7fe fe0e 	bl	801b6c0 <memp_free>
}
 801caa4:	bf00      	nop
 801caa6:	3708      	adds	r7, #8
 801caa8:	46bd      	mov	sp, r7
 801caaa:	bd80      	pop	{r7, pc}
 801caac:	0802e18c 	.word	0x0802e18c
 801cab0:	0802e1f8 	.word	0x0802e1f8
 801cab4:	0802e1d0 	.word	0x0802e1d0

0801cab8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801cab8:	b580      	push	{r7, lr}
 801caba:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801cabc:	f001 f974 	bl	801dda8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801cac0:	4b07      	ldr	r3, [pc, #28]	; (801cae0 <tcp_tmr+0x28>)
 801cac2:	781b      	ldrb	r3, [r3, #0]
 801cac4:	3301      	adds	r3, #1
 801cac6:	b2da      	uxtb	r2, r3
 801cac8:	4b05      	ldr	r3, [pc, #20]	; (801cae0 <tcp_tmr+0x28>)
 801caca:	701a      	strb	r2, [r3, #0]
 801cacc:	4b04      	ldr	r3, [pc, #16]	; (801cae0 <tcp_tmr+0x28>)
 801cace:	781b      	ldrb	r3, [r3, #0]
 801cad0:	f003 0301 	and.w	r3, r3, #1
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	d001      	beq.n	801cadc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801cad8:	f000 fe26 	bl	801d728 <tcp_slowtmr>
  }
}
 801cadc:	bf00      	nop
 801cade:	bd80      	pop	{r7, pc}
 801cae0:	20005a25 	.word	0x20005a25

0801cae4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801cae4:	b580      	push	{r7, lr}
 801cae6:	b084      	sub	sp, #16
 801cae8:	af00      	add	r7, sp, #0
 801caea:	6078      	str	r0, [r7, #4]
 801caec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801caee:	683b      	ldr	r3, [r7, #0]
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	d105      	bne.n	801cb00 <tcp_remove_listener+0x1c>
 801caf4:	4b0d      	ldr	r3, [pc, #52]	; (801cb2c <tcp_remove_listener+0x48>)
 801caf6:	22ff      	movs	r2, #255	; 0xff
 801caf8:	490d      	ldr	r1, [pc, #52]	; (801cb30 <tcp_remove_listener+0x4c>)
 801cafa:	480e      	ldr	r0, [pc, #56]	; (801cb34 <tcp_remove_listener+0x50>)
 801cafc:	f00a f8ac 	bl	8026c58 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801cb00:	687b      	ldr	r3, [r7, #4]
 801cb02:	60fb      	str	r3, [r7, #12]
 801cb04:	e00a      	b.n	801cb1c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801cb06:	68fb      	ldr	r3, [r7, #12]
 801cb08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801cb0a:	683a      	ldr	r2, [r7, #0]
 801cb0c:	429a      	cmp	r2, r3
 801cb0e:	d102      	bne.n	801cb16 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801cb10:	68fb      	ldr	r3, [r7, #12]
 801cb12:	2200      	movs	r2, #0
 801cb14:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801cb16:	68fb      	ldr	r3, [r7, #12]
 801cb18:	68db      	ldr	r3, [r3, #12]
 801cb1a:	60fb      	str	r3, [r7, #12]
 801cb1c:	68fb      	ldr	r3, [r7, #12]
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	d1f1      	bne.n	801cb06 <tcp_remove_listener+0x22>
    }
  }
}
 801cb22:	bf00      	nop
 801cb24:	bf00      	nop
 801cb26:	3710      	adds	r7, #16
 801cb28:	46bd      	mov	sp, r7
 801cb2a:	bd80      	pop	{r7, pc}
 801cb2c:	0802e18c 	.word	0x0802e18c
 801cb30:	0802e214 	.word	0x0802e214
 801cb34:	0802e1d0 	.word	0x0802e1d0

0801cb38 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801cb38:	b580      	push	{r7, lr}
 801cb3a:	b084      	sub	sp, #16
 801cb3c:	af00      	add	r7, sp, #0
 801cb3e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801cb40:	687b      	ldr	r3, [r7, #4]
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d106      	bne.n	801cb54 <tcp_listen_closed+0x1c>
 801cb46:	4b14      	ldr	r3, [pc, #80]	; (801cb98 <tcp_listen_closed+0x60>)
 801cb48:	f240 1211 	movw	r2, #273	; 0x111
 801cb4c:	4913      	ldr	r1, [pc, #76]	; (801cb9c <tcp_listen_closed+0x64>)
 801cb4e:	4814      	ldr	r0, [pc, #80]	; (801cba0 <tcp_listen_closed+0x68>)
 801cb50:	f00a f882 	bl	8026c58 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	7d1b      	ldrb	r3, [r3, #20]
 801cb58:	2b01      	cmp	r3, #1
 801cb5a:	d006      	beq.n	801cb6a <tcp_listen_closed+0x32>
 801cb5c:	4b0e      	ldr	r3, [pc, #56]	; (801cb98 <tcp_listen_closed+0x60>)
 801cb5e:	f44f 7289 	mov.w	r2, #274	; 0x112
 801cb62:	4910      	ldr	r1, [pc, #64]	; (801cba4 <tcp_listen_closed+0x6c>)
 801cb64:	480e      	ldr	r0, [pc, #56]	; (801cba0 <tcp_listen_closed+0x68>)
 801cb66:	f00a f877 	bl	8026c58 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801cb6a:	2301      	movs	r3, #1
 801cb6c:	60fb      	str	r3, [r7, #12]
 801cb6e:	e00b      	b.n	801cb88 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801cb70:	4a0d      	ldr	r2, [pc, #52]	; (801cba8 <tcp_listen_closed+0x70>)
 801cb72:	68fb      	ldr	r3, [r7, #12]
 801cb74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cb78:	681b      	ldr	r3, [r3, #0]
 801cb7a:	6879      	ldr	r1, [r7, #4]
 801cb7c:	4618      	mov	r0, r3
 801cb7e:	f7ff ffb1 	bl	801cae4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801cb82:	68fb      	ldr	r3, [r7, #12]
 801cb84:	3301      	adds	r3, #1
 801cb86:	60fb      	str	r3, [r7, #12]
 801cb88:	68fb      	ldr	r3, [r7, #12]
 801cb8a:	2b03      	cmp	r3, #3
 801cb8c:	d9f0      	bls.n	801cb70 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801cb8e:	bf00      	nop
 801cb90:	bf00      	nop
 801cb92:	3710      	adds	r7, #16
 801cb94:	46bd      	mov	sp, r7
 801cb96:	bd80      	pop	{r7, pc}
 801cb98:	0802e18c 	.word	0x0802e18c
 801cb9c:	0802e23c 	.word	0x0802e23c
 801cba0:	0802e1d0 	.word	0x0802e1d0
 801cba4:	0802e248 	.word	0x0802e248
 801cba8:	080608bc 	.word	0x080608bc

0801cbac <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801cbac:	b5b0      	push	{r4, r5, r7, lr}
 801cbae:	b088      	sub	sp, #32
 801cbb0:	af04      	add	r7, sp, #16
 801cbb2:	6078      	str	r0, [r7, #4]
 801cbb4:	460b      	mov	r3, r1
 801cbb6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	d106      	bne.n	801cbcc <tcp_close_shutdown+0x20>
 801cbbe:	4b63      	ldr	r3, [pc, #396]	; (801cd4c <tcp_close_shutdown+0x1a0>)
 801cbc0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801cbc4:	4962      	ldr	r1, [pc, #392]	; (801cd50 <tcp_close_shutdown+0x1a4>)
 801cbc6:	4863      	ldr	r0, [pc, #396]	; (801cd54 <tcp_close_shutdown+0x1a8>)
 801cbc8:	f00a f846 	bl	8026c58 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801cbcc:	78fb      	ldrb	r3, [r7, #3]
 801cbce:	2b00      	cmp	r3, #0
 801cbd0:	d066      	beq.n	801cca0 <tcp_close_shutdown+0xf4>
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	7d1b      	ldrb	r3, [r3, #20]
 801cbd6:	2b04      	cmp	r3, #4
 801cbd8:	d003      	beq.n	801cbe2 <tcp_close_shutdown+0x36>
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	7d1b      	ldrb	r3, [r3, #20]
 801cbde:	2b07      	cmp	r3, #7
 801cbe0:	d15e      	bne.n	801cca0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	d104      	bne.n	801cbf4 <tcp_close_shutdown+0x48>
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cbee:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801cbf2:	d055      	beq.n	801cca0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	8b5b      	ldrh	r3, [r3, #26]
 801cbf8:	f003 0310 	and.w	r3, r3, #16
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d106      	bne.n	801cc0e <tcp_close_shutdown+0x62>
 801cc00:	4b52      	ldr	r3, [pc, #328]	; (801cd4c <tcp_close_shutdown+0x1a0>)
 801cc02:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801cc06:	4954      	ldr	r1, [pc, #336]	; (801cd58 <tcp_close_shutdown+0x1ac>)
 801cc08:	4852      	ldr	r0, [pc, #328]	; (801cd54 <tcp_close_shutdown+0x1a8>)
 801cc0a:	f00a f825 	bl	8026c58 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801cc0e:	687b      	ldr	r3, [r7, #4]
 801cc10:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801cc16:	687d      	ldr	r5, [r7, #4]
 801cc18:	687b      	ldr	r3, [r7, #4]
 801cc1a:	3304      	adds	r3, #4
 801cc1c:	687a      	ldr	r2, [r7, #4]
 801cc1e:	8ad2      	ldrh	r2, [r2, #22]
 801cc20:	6879      	ldr	r1, [r7, #4]
 801cc22:	8b09      	ldrh	r1, [r1, #24]
 801cc24:	9102      	str	r1, [sp, #8]
 801cc26:	9201      	str	r2, [sp, #4]
 801cc28:	9300      	str	r3, [sp, #0]
 801cc2a:	462b      	mov	r3, r5
 801cc2c:	4622      	mov	r2, r4
 801cc2e:	4601      	mov	r1, r0
 801cc30:	6878      	ldr	r0, [r7, #4]
 801cc32:	f005 fea3 	bl	802297c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801cc36:	6878      	ldr	r0, [r7, #4]
 801cc38:	f001 fc84 	bl	801e544 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801cc3c:	4b47      	ldr	r3, [pc, #284]	; (801cd5c <tcp_close_shutdown+0x1b0>)
 801cc3e:	681b      	ldr	r3, [r3, #0]
 801cc40:	687a      	ldr	r2, [r7, #4]
 801cc42:	429a      	cmp	r2, r3
 801cc44:	d105      	bne.n	801cc52 <tcp_close_shutdown+0xa6>
 801cc46:	4b45      	ldr	r3, [pc, #276]	; (801cd5c <tcp_close_shutdown+0x1b0>)
 801cc48:	681b      	ldr	r3, [r3, #0]
 801cc4a:	68db      	ldr	r3, [r3, #12]
 801cc4c:	4a43      	ldr	r2, [pc, #268]	; (801cd5c <tcp_close_shutdown+0x1b0>)
 801cc4e:	6013      	str	r3, [r2, #0]
 801cc50:	e013      	b.n	801cc7a <tcp_close_shutdown+0xce>
 801cc52:	4b42      	ldr	r3, [pc, #264]	; (801cd5c <tcp_close_shutdown+0x1b0>)
 801cc54:	681b      	ldr	r3, [r3, #0]
 801cc56:	60fb      	str	r3, [r7, #12]
 801cc58:	e00c      	b.n	801cc74 <tcp_close_shutdown+0xc8>
 801cc5a:	68fb      	ldr	r3, [r7, #12]
 801cc5c:	68db      	ldr	r3, [r3, #12]
 801cc5e:	687a      	ldr	r2, [r7, #4]
 801cc60:	429a      	cmp	r2, r3
 801cc62:	d104      	bne.n	801cc6e <tcp_close_shutdown+0xc2>
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	68da      	ldr	r2, [r3, #12]
 801cc68:	68fb      	ldr	r3, [r7, #12]
 801cc6a:	60da      	str	r2, [r3, #12]
 801cc6c:	e005      	b.n	801cc7a <tcp_close_shutdown+0xce>
 801cc6e:	68fb      	ldr	r3, [r7, #12]
 801cc70:	68db      	ldr	r3, [r3, #12]
 801cc72:	60fb      	str	r3, [r7, #12]
 801cc74:	68fb      	ldr	r3, [r7, #12]
 801cc76:	2b00      	cmp	r3, #0
 801cc78:	d1ef      	bne.n	801cc5a <tcp_close_shutdown+0xae>
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	2200      	movs	r2, #0
 801cc7e:	60da      	str	r2, [r3, #12]
 801cc80:	4b37      	ldr	r3, [pc, #220]	; (801cd60 <tcp_close_shutdown+0x1b4>)
 801cc82:	2201      	movs	r2, #1
 801cc84:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801cc86:	4b37      	ldr	r3, [pc, #220]	; (801cd64 <tcp_close_shutdown+0x1b8>)
 801cc88:	681b      	ldr	r3, [r3, #0]
 801cc8a:	687a      	ldr	r2, [r7, #4]
 801cc8c:	429a      	cmp	r2, r3
 801cc8e:	d102      	bne.n	801cc96 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801cc90:	f004 f918 	bl	8020ec4 <tcp_trigger_input_pcb_close>
 801cc94:	e002      	b.n	801cc9c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801cc96:	6878      	ldr	r0, [r7, #4]
 801cc98:	f7ff fed6 	bl	801ca48 <tcp_free>
      }
      return ERR_OK;
 801cc9c:	2300      	movs	r3, #0
 801cc9e:	e050      	b.n	801cd42 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	7d1b      	ldrb	r3, [r3, #20]
 801cca4:	2b02      	cmp	r3, #2
 801cca6:	d03b      	beq.n	801cd20 <tcp_close_shutdown+0x174>
 801cca8:	2b02      	cmp	r3, #2
 801ccaa:	dc44      	bgt.n	801cd36 <tcp_close_shutdown+0x18a>
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d002      	beq.n	801ccb6 <tcp_close_shutdown+0x10a>
 801ccb0:	2b01      	cmp	r3, #1
 801ccb2:	d02a      	beq.n	801cd0a <tcp_close_shutdown+0x15e>
 801ccb4:	e03f      	b.n	801cd36 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	8adb      	ldrh	r3, [r3, #22]
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d021      	beq.n	801cd02 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801ccbe:	4b2a      	ldr	r3, [pc, #168]	; (801cd68 <tcp_close_shutdown+0x1bc>)
 801ccc0:	681b      	ldr	r3, [r3, #0]
 801ccc2:	687a      	ldr	r2, [r7, #4]
 801ccc4:	429a      	cmp	r2, r3
 801ccc6:	d105      	bne.n	801ccd4 <tcp_close_shutdown+0x128>
 801ccc8:	4b27      	ldr	r3, [pc, #156]	; (801cd68 <tcp_close_shutdown+0x1bc>)
 801ccca:	681b      	ldr	r3, [r3, #0]
 801cccc:	68db      	ldr	r3, [r3, #12]
 801ccce:	4a26      	ldr	r2, [pc, #152]	; (801cd68 <tcp_close_shutdown+0x1bc>)
 801ccd0:	6013      	str	r3, [r2, #0]
 801ccd2:	e013      	b.n	801ccfc <tcp_close_shutdown+0x150>
 801ccd4:	4b24      	ldr	r3, [pc, #144]	; (801cd68 <tcp_close_shutdown+0x1bc>)
 801ccd6:	681b      	ldr	r3, [r3, #0]
 801ccd8:	60bb      	str	r3, [r7, #8]
 801ccda:	e00c      	b.n	801ccf6 <tcp_close_shutdown+0x14a>
 801ccdc:	68bb      	ldr	r3, [r7, #8]
 801ccde:	68db      	ldr	r3, [r3, #12]
 801cce0:	687a      	ldr	r2, [r7, #4]
 801cce2:	429a      	cmp	r2, r3
 801cce4:	d104      	bne.n	801ccf0 <tcp_close_shutdown+0x144>
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	68da      	ldr	r2, [r3, #12]
 801ccea:	68bb      	ldr	r3, [r7, #8]
 801ccec:	60da      	str	r2, [r3, #12]
 801ccee:	e005      	b.n	801ccfc <tcp_close_shutdown+0x150>
 801ccf0:	68bb      	ldr	r3, [r7, #8]
 801ccf2:	68db      	ldr	r3, [r3, #12]
 801ccf4:	60bb      	str	r3, [r7, #8]
 801ccf6:	68bb      	ldr	r3, [r7, #8]
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d1ef      	bne.n	801ccdc <tcp_close_shutdown+0x130>
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	2200      	movs	r2, #0
 801cd00:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801cd02:	6878      	ldr	r0, [r7, #4]
 801cd04:	f7ff fea0 	bl	801ca48 <tcp_free>
      break;
 801cd08:	e01a      	b.n	801cd40 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801cd0a:	6878      	ldr	r0, [r7, #4]
 801cd0c:	f7ff ff14 	bl	801cb38 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801cd10:	6879      	ldr	r1, [r7, #4]
 801cd12:	4816      	ldr	r0, [pc, #88]	; (801cd6c <tcp_close_shutdown+0x1c0>)
 801cd14:	f001 fc66 	bl	801e5e4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801cd18:	6878      	ldr	r0, [r7, #4]
 801cd1a:	f7ff feb1 	bl	801ca80 <tcp_free_listen>
      break;
 801cd1e:	e00f      	b.n	801cd40 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801cd20:	6879      	ldr	r1, [r7, #4]
 801cd22:	480e      	ldr	r0, [pc, #56]	; (801cd5c <tcp_close_shutdown+0x1b0>)
 801cd24:	f001 fc5e 	bl	801e5e4 <tcp_pcb_remove>
 801cd28:	4b0d      	ldr	r3, [pc, #52]	; (801cd60 <tcp_close_shutdown+0x1b4>)
 801cd2a:	2201      	movs	r2, #1
 801cd2c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801cd2e:	6878      	ldr	r0, [r7, #4]
 801cd30:	f7ff fe8a 	bl	801ca48 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801cd34:	e004      	b.n	801cd40 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801cd36:	6878      	ldr	r0, [r7, #4]
 801cd38:	f000 f81a 	bl	801cd70 <tcp_close_shutdown_fin>
 801cd3c:	4603      	mov	r3, r0
 801cd3e:	e000      	b.n	801cd42 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801cd40:	2300      	movs	r3, #0
}
 801cd42:	4618      	mov	r0, r3
 801cd44:	3710      	adds	r7, #16
 801cd46:	46bd      	mov	sp, r7
 801cd48:	bdb0      	pop	{r4, r5, r7, pc}
 801cd4a:	bf00      	nop
 801cd4c:	0802e18c 	.word	0x0802e18c
 801cd50:	0802e260 	.word	0x0802e260
 801cd54:	0802e1d0 	.word	0x0802e1d0
 801cd58:	0802e280 	.word	0x0802e280
 801cd5c:	2001d51c 	.word	0x2001d51c
 801cd60:	2001d518 	.word	0x2001d518
 801cd64:	2001d530 	.word	0x2001d530
 801cd68:	2001d528 	.word	0x2001d528
 801cd6c:	2001d524 	.word	0x2001d524

0801cd70 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801cd70:	b580      	push	{r7, lr}
 801cd72:	b084      	sub	sp, #16
 801cd74:	af00      	add	r7, sp, #0
 801cd76:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	d106      	bne.n	801cd8c <tcp_close_shutdown_fin+0x1c>
 801cd7e:	4b2e      	ldr	r3, [pc, #184]	; (801ce38 <tcp_close_shutdown_fin+0xc8>)
 801cd80:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801cd84:	492d      	ldr	r1, [pc, #180]	; (801ce3c <tcp_close_shutdown_fin+0xcc>)
 801cd86:	482e      	ldr	r0, [pc, #184]	; (801ce40 <tcp_close_shutdown_fin+0xd0>)
 801cd88:	f009 ff66 	bl	8026c58 <iprintf>

  switch (pcb->state) {
 801cd8c:	687b      	ldr	r3, [r7, #4]
 801cd8e:	7d1b      	ldrb	r3, [r3, #20]
 801cd90:	2b07      	cmp	r3, #7
 801cd92:	d020      	beq.n	801cdd6 <tcp_close_shutdown_fin+0x66>
 801cd94:	2b07      	cmp	r3, #7
 801cd96:	dc2b      	bgt.n	801cdf0 <tcp_close_shutdown_fin+0x80>
 801cd98:	2b03      	cmp	r3, #3
 801cd9a:	d002      	beq.n	801cda2 <tcp_close_shutdown_fin+0x32>
 801cd9c:	2b04      	cmp	r3, #4
 801cd9e:	d00d      	beq.n	801cdbc <tcp_close_shutdown_fin+0x4c>
 801cda0:	e026      	b.n	801cdf0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801cda2:	6878      	ldr	r0, [r7, #4]
 801cda4:	f004 fef8 	bl	8021b98 <tcp_send_fin>
 801cda8:	4603      	mov	r3, r0
 801cdaa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801cdac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d11f      	bne.n	801cdf4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	2205      	movs	r2, #5
 801cdb8:	751a      	strb	r2, [r3, #20]
      }
      break;
 801cdba:	e01b      	b.n	801cdf4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801cdbc:	6878      	ldr	r0, [r7, #4]
 801cdbe:	f004 feeb 	bl	8021b98 <tcp_send_fin>
 801cdc2:	4603      	mov	r3, r0
 801cdc4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801cdc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d114      	bne.n	801cdf8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801cdce:	687b      	ldr	r3, [r7, #4]
 801cdd0:	2205      	movs	r2, #5
 801cdd2:	751a      	strb	r2, [r3, #20]
      }
      break;
 801cdd4:	e010      	b.n	801cdf8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801cdd6:	6878      	ldr	r0, [r7, #4]
 801cdd8:	f004 fede 	bl	8021b98 <tcp_send_fin>
 801cddc:	4603      	mov	r3, r0
 801cdde:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801cde0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d109      	bne.n	801cdfc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	2209      	movs	r2, #9
 801cdec:	751a      	strb	r2, [r3, #20]
      }
      break;
 801cdee:	e005      	b.n	801cdfc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801cdf0:	2300      	movs	r3, #0
 801cdf2:	e01c      	b.n	801ce2e <tcp_close_shutdown_fin+0xbe>
      break;
 801cdf4:	bf00      	nop
 801cdf6:	e002      	b.n	801cdfe <tcp_close_shutdown_fin+0x8e>
      break;
 801cdf8:	bf00      	nop
 801cdfa:	e000      	b.n	801cdfe <tcp_close_shutdown_fin+0x8e>
      break;
 801cdfc:	bf00      	nop
  }

  if (err == ERR_OK) {
 801cdfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d103      	bne.n	801ce0e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801ce06:	6878      	ldr	r0, [r7, #4]
 801ce08:	f005 f804 	bl	8021e14 <tcp_output>
 801ce0c:	e00d      	b.n	801ce2a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801ce0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ce12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ce16:	d108      	bne.n	801ce2a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	8b5b      	ldrh	r3, [r3, #26]
 801ce1c:	f043 0308 	orr.w	r3, r3, #8
 801ce20:	b29a      	uxth	r2, r3
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801ce26:	2300      	movs	r3, #0
 801ce28:	e001      	b.n	801ce2e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801ce2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ce2e:	4618      	mov	r0, r3
 801ce30:	3710      	adds	r7, #16
 801ce32:	46bd      	mov	sp, r7
 801ce34:	bd80      	pop	{r7, pc}
 801ce36:	bf00      	nop
 801ce38:	0802e18c 	.word	0x0802e18c
 801ce3c:	0802e23c 	.word	0x0802e23c
 801ce40:	0802e1d0 	.word	0x0802e1d0

0801ce44 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801ce44:	b580      	push	{r7, lr}
 801ce46:	b082      	sub	sp, #8
 801ce48:	af00      	add	r7, sp, #0
 801ce4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	2b00      	cmp	r3, #0
 801ce50:	d109      	bne.n	801ce66 <tcp_close+0x22>
 801ce52:	4b0f      	ldr	r3, [pc, #60]	; (801ce90 <tcp_close+0x4c>)
 801ce54:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801ce58:	490e      	ldr	r1, [pc, #56]	; (801ce94 <tcp_close+0x50>)
 801ce5a:	480f      	ldr	r0, [pc, #60]	; (801ce98 <tcp_close+0x54>)
 801ce5c:	f009 fefc 	bl	8026c58 <iprintf>
 801ce60:	f06f 030f 	mvn.w	r3, #15
 801ce64:	e00f      	b.n	801ce86 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	7d1b      	ldrb	r3, [r3, #20]
 801ce6a:	2b01      	cmp	r3, #1
 801ce6c:	d006      	beq.n	801ce7c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	8b5b      	ldrh	r3, [r3, #26]
 801ce72:	f043 0310 	orr.w	r3, r3, #16
 801ce76:	b29a      	uxth	r2, r3
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801ce7c:	2101      	movs	r1, #1
 801ce7e:	6878      	ldr	r0, [r7, #4]
 801ce80:	f7ff fe94 	bl	801cbac <tcp_close_shutdown>
 801ce84:	4603      	mov	r3, r0
}
 801ce86:	4618      	mov	r0, r3
 801ce88:	3708      	adds	r7, #8
 801ce8a:	46bd      	mov	sp, r7
 801ce8c:	bd80      	pop	{r7, pc}
 801ce8e:	bf00      	nop
 801ce90:	0802e18c 	.word	0x0802e18c
 801ce94:	0802e29c 	.word	0x0802e29c
 801ce98:	0802e1d0 	.word	0x0802e1d0

0801ce9c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801ce9c:	b580      	push	{r7, lr}
 801ce9e:	b08e      	sub	sp, #56	; 0x38
 801cea0:	af04      	add	r7, sp, #16
 801cea2:	6078      	str	r0, [r7, #4]
 801cea4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	2b00      	cmp	r3, #0
 801ceaa:	d107      	bne.n	801cebc <tcp_abandon+0x20>
 801ceac:	4b52      	ldr	r3, [pc, #328]	; (801cff8 <tcp_abandon+0x15c>)
 801ceae:	f240 223d 	movw	r2, #573	; 0x23d
 801ceb2:	4952      	ldr	r1, [pc, #328]	; (801cffc <tcp_abandon+0x160>)
 801ceb4:	4852      	ldr	r0, [pc, #328]	; (801d000 <tcp_abandon+0x164>)
 801ceb6:	f009 fecf 	bl	8026c58 <iprintf>
 801ceba:	e099      	b.n	801cff0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	7d1b      	ldrb	r3, [r3, #20]
 801cec0:	2b01      	cmp	r3, #1
 801cec2:	d106      	bne.n	801ced2 <tcp_abandon+0x36>
 801cec4:	4b4c      	ldr	r3, [pc, #304]	; (801cff8 <tcp_abandon+0x15c>)
 801cec6:	f44f 7210 	mov.w	r2, #576	; 0x240
 801ceca:	494e      	ldr	r1, [pc, #312]	; (801d004 <tcp_abandon+0x168>)
 801cecc:	484c      	ldr	r0, [pc, #304]	; (801d000 <tcp_abandon+0x164>)
 801cece:	f009 fec3 	bl	8026c58 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	7d1b      	ldrb	r3, [r3, #20]
 801ced6:	2b0a      	cmp	r3, #10
 801ced8:	d107      	bne.n	801ceea <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801ceda:	6879      	ldr	r1, [r7, #4]
 801cedc:	484a      	ldr	r0, [pc, #296]	; (801d008 <tcp_abandon+0x16c>)
 801cede:	f001 fb81 	bl	801e5e4 <tcp_pcb_remove>
    tcp_free(pcb);
 801cee2:	6878      	ldr	r0, [r7, #4]
 801cee4:	f7ff fdb0 	bl	801ca48 <tcp_free>
 801cee8:	e082      	b.n	801cff0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801ceea:	2300      	movs	r3, #0
 801ceec:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801ceee:	2300      	movs	r3, #0
 801cef0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cef6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cefc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801cefe:	687b      	ldr	r3, [r7, #4]
 801cf00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cf04:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	691b      	ldr	r3, [r3, #16]
 801cf0a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	7d1b      	ldrb	r3, [r3, #20]
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	d126      	bne.n	801cf62 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	8adb      	ldrh	r3, [r3, #22]
 801cf18:	2b00      	cmp	r3, #0
 801cf1a:	d02e      	beq.n	801cf7a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801cf1c:	4b3b      	ldr	r3, [pc, #236]	; (801d00c <tcp_abandon+0x170>)
 801cf1e:	681b      	ldr	r3, [r3, #0]
 801cf20:	687a      	ldr	r2, [r7, #4]
 801cf22:	429a      	cmp	r2, r3
 801cf24:	d105      	bne.n	801cf32 <tcp_abandon+0x96>
 801cf26:	4b39      	ldr	r3, [pc, #228]	; (801d00c <tcp_abandon+0x170>)
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	68db      	ldr	r3, [r3, #12]
 801cf2c:	4a37      	ldr	r2, [pc, #220]	; (801d00c <tcp_abandon+0x170>)
 801cf2e:	6013      	str	r3, [r2, #0]
 801cf30:	e013      	b.n	801cf5a <tcp_abandon+0xbe>
 801cf32:	4b36      	ldr	r3, [pc, #216]	; (801d00c <tcp_abandon+0x170>)
 801cf34:	681b      	ldr	r3, [r3, #0]
 801cf36:	61fb      	str	r3, [r7, #28]
 801cf38:	e00c      	b.n	801cf54 <tcp_abandon+0xb8>
 801cf3a:	69fb      	ldr	r3, [r7, #28]
 801cf3c:	68db      	ldr	r3, [r3, #12]
 801cf3e:	687a      	ldr	r2, [r7, #4]
 801cf40:	429a      	cmp	r2, r3
 801cf42:	d104      	bne.n	801cf4e <tcp_abandon+0xb2>
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	68da      	ldr	r2, [r3, #12]
 801cf48:	69fb      	ldr	r3, [r7, #28]
 801cf4a:	60da      	str	r2, [r3, #12]
 801cf4c:	e005      	b.n	801cf5a <tcp_abandon+0xbe>
 801cf4e:	69fb      	ldr	r3, [r7, #28]
 801cf50:	68db      	ldr	r3, [r3, #12]
 801cf52:	61fb      	str	r3, [r7, #28]
 801cf54:	69fb      	ldr	r3, [r7, #28]
 801cf56:	2b00      	cmp	r3, #0
 801cf58:	d1ef      	bne.n	801cf3a <tcp_abandon+0x9e>
 801cf5a:	687b      	ldr	r3, [r7, #4]
 801cf5c:	2200      	movs	r2, #0
 801cf5e:	60da      	str	r2, [r3, #12]
 801cf60:	e00b      	b.n	801cf7a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801cf62:	683b      	ldr	r3, [r7, #0]
 801cf64:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	8adb      	ldrh	r3, [r3, #22]
 801cf6a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801cf6c:	6879      	ldr	r1, [r7, #4]
 801cf6e:	4828      	ldr	r0, [pc, #160]	; (801d010 <tcp_abandon+0x174>)
 801cf70:	f001 fb38 	bl	801e5e4 <tcp_pcb_remove>
 801cf74:	4b27      	ldr	r3, [pc, #156]	; (801d014 <tcp_abandon+0x178>)
 801cf76:	2201      	movs	r2, #1
 801cf78:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d004      	beq.n	801cf8c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801cf82:	687b      	ldr	r3, [r7, #4]
 801cf84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cf86:	4618      	mov	r0, r3
 801cf88:	f000 ffee 	bl	801df68 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	d004      	beq.n	801cf9e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cf98:	4618      	mov	r0, r3
 801cf9a:	f000 ffe5 	bl	801df68 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	d004      	beq.n	801cfb0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cfaa:	4618      	mov	r0, r3
 801cfac:	f000 ffdc 	bl	801df68 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801cfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	d00e      	beq.n	801cfd4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801cfb6:	6879      	ldr	r1, [r7, #4]
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	3304      	adds	r3, #4
 801cfbc:	687a      	ldr	r2, [r7, #4]
 801cfbe:	8b12      	ldrh	r2, [r2, #24]
 801cfc0:	9202      	str	r2, [sp, #8]
 801cfc2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801cfc4:	9201      	str	r2, [sp, #4]
 801cfc6:	9300      	str	r3, [sp, #0]
 801cfc8:	460b      	mov	r3, r1
 801cfca:	697a      	ldr	r2, [r7, #20]
 801cfcc:	69b9      	ldr	r1, [r7, #24]
 801cfce:	6878      	ldr	r0, [r7, #4]
 801cfd0:	f005 fcd4 	bl	802297c <tcp_rst>
    }
    last_state = pcb->state;
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	7d1b      	ldrb	r3, [r3, #20]
 801cfd8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801cfda:	6878      	ldr	r0, [r7, #4]
 801cfdc:	f7ff fd34 	bl	801ca48 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801cfe0:	693b      	ldr	r3, [r7, #16]
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d004      	beq.n	801cff0 <tcp_abandon+0x154>
 801cfe6:	693b      	ldr	r3, [r7, #16]
 801cfe8:	f06f 010c 	mvn.w	r1, #12
 801cfec:	68f8      	ldr	r0, [r7, #12]
 801cfee:	4798      	blx	r3
  }
}
 801cff0:	3728      	adds	r7, #40	; 0x28
 801cff2:	46bd      	mov	sp, r7
 801cff4:	bd80      	pop	{r7, pc}
 801cff6:	bf00      	nop
 801cff8:	0802e18c 	.word	0x0802e18c
 801cffc:	0802e2d0 	.word	0x0802e2d0
 801d000:	0802e1d0 	.word	0x0802e1d0
 801d004:	0802e2ec 	.word	0x0802e2ec
 801d008:	2001d52c 	.word	0x2001d52c
 801d00c:	2001d528 	.word	0x2001d528
 801d010:	2001d51c 	.word	0x2001d51c
 801d014:	2001d518 	.word	0x2001d518

0801d018 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801d018:	b580      	push	{r7, lr}
 801d01a:	b082      	sub	sp, #8
 801d01c:	af00      	add	r7, sp, #0
 801d01e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801d020:	2101      	movs	r1, #1
 801d022:	6878      	ldr	r0, [r7, #4]
 801d024:	f7ff ff3a 	bl	801ce9c <tcp_abandon>
}
 801d028:	bf00      	nop
 801d02a:	3708      	adds	r7, #8
 801d02c:	46bd      	mov	sp, r7
 801d02e:	bd80      	pop	{r7, pc}

0801d030 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801d030:	b580      	push	{r7, lr}
 801d032:	b088      	sub	sp, #32
 801d034:	af00      	add	r7, sp, #0
 801d036:	60f8      	str	r0, [r7, #12]
 801d038:	60b9      	str	r1, [r7, #8]
 801d03a:	4613      	mov	r3, r2
 801d03c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801d03e:	2304      	movs	r3, #4
 801d040:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801d042:	68bb      	ldr	r3, [r7, #8]
 801d044:	2b00      	cmp	r3, #0
 801d046:	d101      	bne.n	801d04c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801d048:	4b3e      	ldr	r3, [pc, #248]	; (801d144 <tcp_bind+0x114>)
 801d04a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801d04c:	68fb      	ldr	r3, [r7, #12]
 801d04e:	2b00      	cmp	r3, #0
 801d050:	d109      	bne.n	801d066 <tcp_bind+0x36>
 801d052:	4b3d      	ldr	r3, [pc, #244]	; (801d148 <tcp_bind+0x118>)
 801d054:	f240 22a9 	movw	r2, #681	; 0x2a9
 801d058:	493c      	ldr	r1, [pc, #240]	; (801d14c <tcp_bind+0x11c>)
 801d05a:	483d      	ldr	r0, [pc, #244]	; (801d150 <tcp_bind+0x120>)
 801d05c:	f009 fdfc 	bl	8026c58 <iprintf>
 801d060:	f06f 030f 	mvn.w	r3, #15
 801d064:	e06a      	b.n	801d13c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801d066:	68fb      	ldr	r3, [r7, #12]
 801d068:	7d1b      	ldrb	r3, [r3, #20]
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	d009      	beq.n	801d082 <tcp_bind+0x52>
 801d06e:	4b36      	ldr	r3, [pc, #216]	; (801d148 <tcp_bind+0x118>)
 801d070:	f240 22ab 	movw	r2, #683	; 0x2ab
 801d074:	4937      	ldr	r1, [pc, #220]	; (801d154 <tcp_bind+0x124>)
 801d076:	4836      	ldr	r0, [pc, #216]	; (801d150 <tcp_bind+0x120>)
 801d078:	f009 fdee 	bl	8026c58 <iprintf>
 801d07c:	f06f 0305 	mvn.w	r3, #5
 801d080:	e05c      	b.n	801d13c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801d082:	88fb      	ldrh	r3, [r7, #6]
 801d084:	2b00      	cmp	r3, #0
 801d086:	d109      	bne.n	801d09c <tcp_bind+0x6c>
    port = tcp_new_port();
 801d088:	f000 f9f0 	bl	801d46c <tcp_new_port>
 801d08c:	4603      	mov	r3, r0
 801d08e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801d090:	88fb      	ldrh	r3, [r7, #6]
 801d092:	2b00      	cmp	r3, #0
 801d094:	d135      	bne.n	801d102 <tcp_bind+0xd2>
      return ERR_BUF;
 801d096:	f06f 0301 	mvn.w	r3, #1
 801d09a:	e04f      	b.n	801d13c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801d09c:	2300      	movs	r3, #0
 801d09e:	61fb      	str	r3, [r7, #28]
 801d0a0:	e02b      	b.n	801d0fa <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801d0a2:	4a2d      	ldr	r2, [pc, #180]	; (801d158 <tcp_bind+0x128>)
 801d0a4:	69fb      	ldr	r3, [r7, #28]
 801d0a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d0aa:	681b      	ldr	r3, [r3, #0]
 801d0ac:	61bb      	str	r3, [r7, #24]
 801d0ae:	e01e      	b.n	801d0ee <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801d0b0:	69bb      	ldr	r3, [r7, #24]
 801d0b2:	8adb      	ldrh	r3, [r3, #22]
 801d0b4:	88fa      	ldrh	r2, [r7, #6]
 801d0b6:	429a      	cmp	r2, r3
 801d0b8:	d116      	bne.n	801d0e8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801d0ba:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801d0bc:	2b00      	cmp	r3, #0
 801d0be:	d010      	beq.n	801d0e2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801d0c0:	69bb      	ldr	r3, [r7, #24]
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	2b00      	cmp	r3, #0
 801d0c6:	d00c      	beq.n	801d0e2 <tcp_bind+0xb2>
 801d0c8:	68bb      	ldr	r3, [r7, #8]
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	d009      	beq.n	801d0e2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801d0ce:	68bb      	ldr	r3, [r7, #8]
 801d0d0:	681b      	ldr	r3, [r3, #0]
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	d005      	beq.n	801d0e2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801d0d6:	69bb      	ldr	r3, [r7, #24]
 801d0d8:	681a      	ldr	r2, [r3, #0]
 801d0da:	68bb      	ldr	r3, [r7, #8]
 801d0dc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801d0de:	429a      	cmp	r2, r3
 801d0e0:	d102      	bne.n	801d0e8 <tcp_bind+0xb8>
              return ERR_USE;
 801d0e2:	f06f 0307 	mvn.w	r3, #7
 801d0e6:	e029      	b.n	801d13c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801d0e8:	69bb      	ldr	r3, [r7, #24]
 801d0ea:	68db      	ldr	r3, [r3, #12]
 801d0ec:	61bb      	str	r3, [r7, #24]
 801d0ee:	69bb      	ldr	r3, [r7, #24]
 801d0f0:	2b00      	cmp	r3, #0
 801d0f2:	d1dd      	bne.n	801d0b0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801d0f4:	69fb      	ldr	r3, [r7, #28]
 801d0f6:	3301      	adds	r3, #1
 801d0f8:	61fb      	str	r3, [r7, #28]
 801d0fa:	69fa      	ldr	r2, [r7, #28]
 801d0fc:	697b      	ldr	r3, [r7, #20]
 801d0fe:	429a      	cmp	r2, r3
 801d100:	dbcf      	blt.n	801d0a2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801d102:	68bb      	ldr	r3, [r7, #8]
 801d104:	2b00      	cmp	r3, #0
 801d106:	d00c      	beq.n	801d122 <tcp_bind+0xf2>
 801d108:	68bb      	ldr	r3, [r7, #8]
 801d10a:	681b      	ldr	r3, [r3, #0]
 801d10c:	2b00      	cmp	r3, #0
 801d10e:	d008      	beq.n	801d122 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801d110:	68bb      	ldr	r3, [r7, #8]
 801d112:	2b00      	cmp	r3, #0
 801d114:	d002      	beq.n	801d11c <tcp_bind+0xec>
 801d116:	68bb      	ldr	r3, [r7, #8]
 801d118:	681b      	ldr	r3, [r3, #0]
 801d11a:	e000      	b.n	801d11e <tcp_bind+0xee>
 801d11c:	2300      	movs	r3, #0
 801d11e:	68fa      	ldr	r2, [r7, #12]
 801d120:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801d122:	68fb      	ldr	r3, [r7, #12]
 801d124:	88fa      	ldrh	r2, [r7, #6]
 801d126:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801d128:	4b0c      	ldr	r3, [pc, #48]	; (801d15c <tcp_bind+0x12c>)
 801d12a:	681a      	ldr	r2, [r3, #0]
 801d12c:	68fb      	ldr	r3, [r7, #12]
 801d12e:	60da      	str	r2, [r3, #12]
 801d130:	4a0a      	ldr	r2, [pc, #40]	; (801d15c <tcp_bind+0x12c>)
 801d132:	68fb      	ldr	r3, [r7, #12]
 801d134:	6013      	str	r3, [r2, #0]
 801d136:	f005 fde3 	bl	8022d00 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801d13a:	2300      	movs	r3, #0
}
 801d13c:	4618      	mov	r0, r3
 801d13e:	3720      	adds	r7, #32
 801d140:	46bd      	mov	sp, r7
 801d142:	bd80      	pop	{r7, pc}
 801d144:	080608e4 	.word	0x080608e4
 801d148:	0802e18c 	.word	0x0802e18c
 801d14c:	0802e320 	.word	0x0802e320
 801d150:	0802e1d0 	.word	0x0802e1d0
 801d154:	0802e338 	.word	0x0802e338
 801d158:	080608bc 	.word	0x080608bc
 801d15c:	2001d528 	.word	0x2001d528

0801d160 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801d160:	b580      	push	{r7, lr}
 801d162:	b084      	sub	sp, #16
 801d164:	af00      	add	r7, sp, #0
 801d166:	60f8      	str	r0, [r7, #12]
 801d168:	60b9      	str	r1, [r7, #8]
 801d16a:	4613      	mov	r3, r2
 801d16c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801d16e:	68bb      	ldr	r3, [r7, #8]
 801d170:	2b00      	cmp	r3, #0
 801d172:	d106      	bne.n	801d182 <tcp_accept_null+0x22>
 801d174:	4b07      	ldr	r3, [pc, #28]	; (801d194 <tcp_accept_null+0x34>)
 801d176:	f240 320f 	movw	r2, #783	; 0x30f
 801d17a:	4907      	ldr	r1, [pc, #28]	; (801d198 <tcp_accept_null+0x38>)
 801d17c:	4807      	ldr	r0, [pc, #28]	; (801d19c <tcp_accept_null+0x3c>)
 801d17e:	f009 fd6b 	bl	8026c58 <iprintf>

  tcp_abort(pcb);
 801d182:	68b8      	ldr	r0, [r7, #8]
 801d184:	f7ff ff48 	bl	801d018 <tcp_abort>

  return ERR_ABRT;
 801d188:	f06f 030c 	mvn.w	r3, #12
}
 801d18c:	4618      	mov	r0, r3
 801d18e:	3710      	adds	r7, #16
 801d190:	46bd      	mov	sp, r7
 801d192:	bd80      	pop	{r7, pc}
 801d194:	0802e18c 	.word	0x0802e18c
 801d198:	0802e360 	.word	0x0802e360
 801d19c:	0802e1d0 	.word	0x0802e1d0

0801d1a0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 801d1a0:	b580      	push	{r7, lr}
 801d1a2:	b082      	sub	sp, #8
 801d1a4:	af00      	add	r7, sp, #0
 801d1a6:	6078      	str	r0, [r7, #4]
 801d1a8:	460b      	mov	r3, r1
 801d1aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 801d1ac:	78fb      	ldrb	r3, [r7, #3]
 801d1ae:	2200      	movs	r2, #0
 801d1b0:	4619      	mov	r1, r3
 801d1b2:	6878      	ldr	r0, [r7, #4]
 801d1b4:	f000 f806 	bl	801d1c4 <tcp_listen_with_backlog_and_err>
 801d1b8:	4603      	mov	r3, r0
}
 801d1ba:	4618      	mov	r0, r3
 801d1bc:	3708      	adds	r7, #8
 801d1be:	46bd      	mov	sp, r7
 801d1c0:	bd80      	pop	{r7, pc}
	...

0801d1c4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801d1c4:	b580      	push	{r7, lr}
 801d1c6:	b088      	sub	sp, #32
 801d1c8:	af00      	add	r7, sp, #0
 801d1ca:	60f8      	str	r0, [r7, #12]
 801d1cc:	460b      	mov	r3, r1
 801d1ce:	607a      	str	r2, [r7, #4]
 801d1d0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801d1d2:	2300      	movs	r3, #0
 801d1d4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801d1d6:	68fb      	ldr	r3, [r7, #12]
 801d1d8:	2b00      	cmp	r3, #0
 801d1da:	d109      	bne.n	801d1f0 <tcp_listen_with_backlog_and_err+0x2c>
 801d1dc:	4b47      	ldr	r3, [pc, #284]	; (801d2fc <tcp_listen_with_backlog_and_err+0x138>)
 801d1de:	f240 3259 	movw	r2, #857	; 0x359
 801d1e2:	4947      	ldr	r1, [pc, #284]	; (801d300 <tcp_listen_with_backlog_and_err+0x13c>)
 801d1e4:	4847      	ldr	r0, [pc, #284]	; (801d304 <tcp_listen_with_backlog_and_err+0x140>)
 801d1e6:	f009 fd37 	bl	8026c58 <iprintf>
 801d1ea:	23f0      	movs	r3, #240	; 0xf0
 801d1ec:	76fb      	strb	r3, [r7, #27]
 801d1ee:	e079      	b.n	801d2e4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801d1f0:	68fb      	ldr	r3, [r7, #12]
 801d1f2:	7d1b      	ldrb	r3, [r3, #20]
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d009      	beq.n	801d20c <tcp_listen_with_backlog_and_err+0x48>
 801d1f8:	4b40      	ldr	r3, [pc, #256]	; (801d2fc <tcp_listen_with_backlog_and_err+0x138>)
 801d1fa:	f240 325a 	movw	r2, #858	; 0x35a
 801d1fe:	4942      	ldr	r1, [pc, #264]	; (801d308 <tcp_listen_with_backlog_and_err+0x144>)
 801d200:	4840      	ldr	r0, [pc, #256]	; (801d304 <tcp_listen_with_backlog_and_err+0x140>)
 801d202:	f009 fd29 	bl	8026c58 <iprintf>
 801d206:	23f1      	movs	r3, #241	; 0xf1
 801d208:	76fb      	strb	r3, [r7, #27]
 801d20a:	e06b      	b.n	801d2e4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801d20c:	68fb      	ldr	r3, [r7, #12]
 801d20e:	7d1b      	ldrb	r3, [r3, #20]
 801d210:	2b01      	cmp	r3, #1
 801d212:	d104      	bne.n	801d21e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801d214:	68fb      	ldr	r3, [r7, #12]
 801d216:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801d218:	23f7      	movs	r3, #247	; 0xf7
 801d21a:	76fb      	strb	r3, [r7, #27]
    goto done;
 801d21c:	e062      	b.n	801d2e4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801d21e:	2002      	movs	r0, #2
 801d220:	f7fe f9fc 	bl	801b61c <memp_malloc>
 801d224:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801d226:	69fb      	ldr	r3, [r7, #28]
 801d228:	2b00      	cmp	r3, #0
 801d22a:	d102      	bne.n	801d232 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 801d22c:	23ff      	movs	r3, #255	; 0xff
 801d22e:	76fb      	strb	r3, [r7, #27]
    goto done;
 801d230:	e058      	b.n	801d2e4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801d232:	68fb      	ldr	r3, [r7, #12]
 801d234:	691a      	ldr	r2, [r3, #16]
 801d236:	69fb      	ldr	r3, [r7, #28]
 801d238:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801d23a:	68fb      	ldr	r3, [r7, #12]
 801d23c:	8ada      	ldrh	r2, [r3, #22]
 801d23e:	69fb      	ldr	r3, [r7, #28]
 801d240:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801d242:	69fb      	ldr	r3, [r7, #28]
 801d244:	2201      	movs	r2, #1
 801d246:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801d248:	68fb      	ldr	r3, [r7, #12]
 801d24a:	7d5a      	ldrb	r2, [r3, #21]
 801d24c:	69fb      	ldr	r3, [r7, #28]
 801d24e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801d250:	68fb      	ldr	r3, [r7, #12]
 801d252:	7a5a      	ldrb	r2, [r3, #9]
 801d254:	69fb      	ldr	r3, [r7, #28]
 801d256:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801d258:	69fb      	ldr	r3, [r7, #28]
 801d25a:	2200      	movs	r2, #0
 801d25c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801d25e:	68fb      	ldr	r3, [r7, #12]
 801d260:	7ada      	ldrb	r2, [r3, #11]
 801d262:	69fb      	ldr	r3, [r7, #28]
 801d264:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801d266:	68fb      	ldr	r3, [r7, #12]
 801d268:	7a9a      	ldrb	r2, [r3, #10]
 801d26a:	69fb      	ldr	r3, [r7, #28]
 801d26c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801d26e:	68fb      	ldr	r3, [r7, #12]
 801d270:	681a      	ldr	r2, [r3, #0]
 801d272:	69fb      	ldr	r3, [r7, #28]
 801d274:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801d276:	68fb      	ldr	r3, [r7, #12]
 801d278:	8adb      	ldrh	r3, [r3, #22]
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d021      	beq.n	801d2c2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801d27e:	4b23      	ldr	r3, [pc, #140]	; (801d30c <tcp_listen_with_backlog_and_err+0x148>)
 801d280:	681b      	ldr	r3, [r3, #0]
 801d282:	68fa      	ldr	r2, [r7, #12]
 801d284:	429a      	cmp	r2, r3
 801d286:	d105      	bne.n	801d294 <tcp_listen_with_backlog_and_err+0xd0>
 801d288:	4b20      	ldr	r3, [pc, #128]	; (801d30c <tcp_listen_with_backlog_and_err+0x148>)
 801d28a:	681b      	ldr	r3, [r3, #0]
 801d28c:	68db      	ldr	r3, [r3, #12]
 801d28e:	4a1f      	ldr	r2, [pc, #124]	; (801d30c <tcp_listen_with_backlog_and_err+0x148>)
 801d290:	6013      	str	r3, [r2, #0]
 801d292:	e013      	b.n	801d2bc <tcp_listen_with_backlog_and_err+0xf8>
 801d294:	4b1d      	ldr	r3, [pc, #116]	; (801d30c <tcp_listen_with_backlog_and_err+0x148>)
 801d296:	681b      	ldr	r3, [r3, #0]
 801d298:	617b      	str	r3, [r7, #20]
 801d29a:	e00c      	b.n	801d2b6 <tcp_listen_with_backlog_and_err+0xf2>
 801d29c:	697b      	ldr	r3, [r7, #20]
 801d29e:	68db      	ldr	r3, [r3, #12]
 801d2a0:	68fa      	ldr	r2, [r7, #12]
 801d2a2:	429a      	cmp	r2, r3
 801d2a4:	d104      	bne.n	801d2b0 <tcp_listen_with_backlog_and_err+0xec>
 801d2a6:	68fb      	ldr	r3, [r7, #12]
 801d2a8:	68da      	ldr	r2, [r3, #12]
 801d2aa:	697b      	ldr	r3, [r7, #20]
 801d2ac:	60da      	str	r2, [r3, #12]
 801d2ae:	e005      	b.n	801d2bc <tcp_listen_with_backlog_and_err+0xf8>
 801d2b0:	697b      	ldr	r3, [r7, #20]
 801d2b2:	68db      	ldr	r3, [r3, #12]
 801d2b4:	617b      	str	r3, [r7, #20]
 801d2b6:	697b      	ldr	r3, [r7, #20]
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	d1ef      	bne.n	801d29c <tcp_listen_with_backlog_and_err+0xd8>
 801d2bc:	68fb      	ldr	r3, [r7, #12]
 801d2be:	2200      	movs	r2, #0
 801d2c0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801d2c2:	68f8      	ldr	r0, [r7, #12]
 801d2c4:	f7ff fbc0 	bl	801ca48 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801d2c8:	69fb      	ldr	r3, [r7, #28]
 801d2ca:	4a11      	ldr	r2, [pc, #68]	; (801d310 <tcp_listen_with_backlog_and_err+0x14c>)
 801d2cc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801d2ce:	4b11      	ldr	r3, [pc, #68]	; (801d314 <tcp_listen_with_backlog_and_err+0x150>)
 801d2d0:	681a      	ldr	r2, [r3, #0]
 801d2d2:	69fb      	ldr	r3, [r7, #28]
 801d2d4:	60da      	str	r2, [r3, #12]
 801d2d6:	4a0f      	ldr	r2, [pc, #60]	; (801d314 <tcp_listen_with_backlog_and_err+0x150>)
 801d2d8:	69fb      	ldr	r3, [r7, #28]
 801d2da:	6013      	str	r3, [r2, #0]
 801d2dc:	f005 fd10 	bl	8022d00 <tcp_timer_needed>
  res = ERR_OK;
 801d2e0:	2300      	movs	r3, #0
 801d2e2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	d002      	beq.n	801d2f0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	7efa      	ldrb	r2, [r7, #27]
 801d2ee:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801d2f0:	69fb      	ldr	r3, [r7, #28]
}
 801d2f2:	4618      	mov	r0, r3
 801d2f4:	3720      	adds	r7, #32
 801d2f6:	46bd      	mov	sp, r7
 801d2f8:	bd80      	pop	{r7, pc}
 801d2fa:	bf00      	nop
 801d2fc:	0802e18c 	.word	0x0802e18c
 801d300:	0802e380 	.word	0x0802e380
 801d304:	0802e1d0 	.word	0x0802e1d0
 801d308:	0802e3b0 	.word	0x0802e3b0
 801d30c:	2001d528 	.word	0x2001d528
 801d310:	0801d161 	.word	0x0801d161
 801d314:	2001d524 	.word	0x2001d524

0801d318 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801d318:	b580      	push	{r7, lr}
 801d31a:	b084      	sub	sp, #16
 801d31c:	af00      	add	r7, sp, #0
 801d31e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	2b00      	cmp	r3, #0
 801d324:	d106      	bne.n	801d334 <tcp_update_rcv_ann_wnd+0x1c>
 801d326:	4b25      	ldr	r3, [pc, #148]	; (801d3bc <tcp_update_rcv_ann_wnd+0xa4>)
 801d328:	f240 32a6 	movw	r2, #934	; 0x3a6
 801d32c:	4924      	ldr	r1, [pc, #144]	; (801d3c0 <tcp_update_rcv_ann_wnd+0xa8>)
 801d32e:	4825      	ldr	r0, [pc, #148]	; (801d3c4 <tcp_update_rcv_ann_wnd+0xac>)
 801d330:	f009 fc92 	bl	8026c58 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d338:	687a      	ldr	r2, [r7, #4]
 801d33a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801d33c:	4413      	add	r3, r2
 801d33e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801d340:	687b      	ldr	r3, [r7, #4]
 801d342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d344:	687a      	ldr	r2, [r7, #4]
 801d346:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801d348:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801d34c:	bf28      	it	cs
 801d34e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801d352:	b292      	uxth	r2, r2
 801d354:	4413      	add	r3, r2
 801d356:	68fa      	ldr	r2, [r7, #12]
 801d358:	1ad3      	subs	r3, r2, r3
 801d35a:	2b00      	cmp	r3, #0
 801d35c:	db08      	blt.n	801d370 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801d35e:	687b      	ldr	r3, [r7, #4]
 801d360:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d362:	687b      	ldr	r3, [r7, #4]
 801d364:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801d366:	687b      	ldr	r3, [r7, #4]
 801d368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d36a:	68fa      	ldr	r2, [r7, #12]
 801d36c:	1ad3      	subs	r3, r2, r3
 801d36e:	e020      	b.n	801d3b2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d374:	687b      	ldr	r3, [r7, #4]
 801d376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d378:	1ad3      	subs	r3, r2, r3
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	dd03      	ble.n	801d386 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801d37e:	687b      	ldr	r3, [r7, #4]
 801d380:	2200      	movs	r2, #0
 801d382:	855a      	strh	r2, [r3, #42]	; 0x2a
 801d384:	e014      	b.n	801d3b0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d38a:	687b      	ldr	r3, [r7, #4]
 801d38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d38e:	1ad3      	subs	r3, r2, r3
 801d390:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801d392:	68bb      	ldr	r3, [r7, #8]
 801d394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d398:	d306      	bcc.n	801d3a8 <tcp_update_rcv_ann_wnd+0x90>
 801d39a:	4b08      	ldr	r3, [pc, #32]	; (801d3bc <tcp_update_rcv_ann_wnd+0xa4>)
 801d39c:	f240 32b6 	movw	r2, #950	; 0x3b6
 801d3a0:	4909      	ldr	r1, [pc, #36]	; (801d3c8 <tcp_update_rcv_ann_wnd+0xb0>)
 801d3a2:	4808      	ldr	r0, [pc, #32]	; (801d3c4 <tcp_update_rcv_ann_wnd+0xac>)
 801d3a4:	f009 fc58 	bl	8026c58 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801d3a8:	68bb      	ldr	r3, [r7, #8]
 801d3aa:	b29a      	uxth	r2, r3
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801d3b0:	2300      	movs	r3, #0
  }
}
 801d3b2:	4618      	mov	r0, r3
 801d3b4:	3710      	adds	r7, #16
 801d3b6:	46bd      	mov	sp, r7
 801d3b8:	bd80      	pop	{r7, pc}
 801d3ba:	bf00      	nop
 801d3bc:	0802e18c 	.word	0x0802e18c
 801d3c0:	0802e3e8 	.word	0x0802e3e8
 801d3c4:	0802e1d0 	.word	0x0802e1d0
 801d3c8:	0802e40c 	.word	0x0802e40c

0801d3cc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801d3cc:	b580      	push	{r7, lr}
 801d3ce:	b084      	sub	sp, #16
 801d3d0:	af00      	add	r7, sp, #0
 801d3d2:	6078      	str	r0, [r7, #4]
 801d3d4:	460b      	mov	r3, r1
 801d3d6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d107      	bne.n	801d3ee <tcp_recved+0x22>
 801d3de:	4b1f      	ldr	r3, [pc, #124]	; (801d45c <tcp_recved+0x90>)
 801d3e0:	f240 32cf 	movw	r2, #975	; 0x3cf
 801d3e4:	491e      	ldr	r1, [pc, #120]	; (801d460 <tcp_recved+0x94>)
 801d3e6:	481f      	ldr	r0, [pc, #124]	; (801d464 <tcp_recved+0x98>)
 801d3e8:	f009 fc36 	bl	8026c58 <iprintf>
 801d3ec:	e032      	b.n	801d454 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801d3ee:	687b      	ldr	r3, [r7, #4]
 801d3f0:	7d1b      	ldrb	r3, [r3, #20]
 801d3f2:	2b01      	cmp	r3, #1
 801d3f4:	d106      	bne.n	801d404 <tcp_recved+0x38>
 801d3f6:	4b19      	ldr	r3, [pc, #100]	; (801d45c <tcp_recved+0x90>)
 801d3f8:	f240 32d2 	movw	r2, #978	; 0x3d2
 801d3fc:	491a      	ldr	r1, [pc, #104]	; (801d468 <tcp_recved+0x9c>)
 801d3fe:	4819      	ldr	r0, [pc, #100]	; (801d464 <tcp_recved+0x98>)
 801d400:	f009 fc2a 	bl	8026c58 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d408:	887b      	ldrh	r3, [r7, #2]
 801d40a:	4413      	add	r3, r2
 801d40c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801d40e:	89fb      	ldrh	r3, [r7, #14]
 801d410:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801d414:	d804      	bhi.n	801d420 <tcp_recved+0x54>
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d41a:	89fa      	ldrh	r2, [r7, #14]
 801d41c:	429a      	cmp	r2, r3
 801d41e:	d204      	bcs.n	801d42a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801d420:	687b      	ldr	r3, [r7, #4]
 801d422:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801d426:	851a      	strh	r2, [r3, #40]	; 0x28
 801d428:	e002      	b.n	801d430 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	89fa      	ldrh	r2, [r7, #14]
 801d42e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801d430:	6878      	ldr	r0, [r7, #4]
 801d432:	f7ff ff71 	bl	801d318 <tcp_update_rcv_ann_wnd>
 801d436:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801d438:	68bb      	ldr	r3, [r7, #8]
 801d43a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801d43e:	d309      	bcc.n	801d454 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	8b5b      	ldrh	r3, [r3, #26]
 801d444:	f043 0302 	orr.w	r3, r3, #2
 801d448:	b29a      	uxth	r2, r3
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801d44e:	6878      	ldr	r0, [r7, #4]
 801d450:	f004 fce0 	bl	8021e14 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801d454:	3710      	adds	r7, #16
 801d456:	46bd      	mov	sp, r7
 801d458:	bd80      	pop	{r7, pc}
 801d45a:	bf00      	nop
 801d45c:	0802e18c 	.word	0x0802e18c
 801d460:	0802e428 	.word	0x0802e428
 801d464:	0802e1d0 	.word	0x0802e1d0
 801d468:	0802e440 	.word	0x0802e440

0801d46c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801d46c:	b480      	push	{r7}
 801d46e:	b083      	sub	sp, #12
 801d470:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801d472:	2300      	movs	r3, #0
 801d474:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801d476:	4b1e      	ldr	r3, [pc, #120]	; (801d4f0 <tcp_new_port+0x84>)
 801d478:	881b      	ldrh	r3, [r3, #0]
 801d47a:	3301      	adds	r3, #1
 801d47c:	b29a      	uxth	r2, r3
 801d47e:	4b1c      	ldr	r3, [pc, #112]	; (801d4f0 <tcp_new_port+0x84>)
 801d480:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801d482:	4b1b      	ldr	r3, [pc, #108]	; (801d4f0 <tcp_new_port+0x84>)
 801d484:	881b      	ldrh	r3, [r3, #0]
 801d486:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d48a:	4293      	cmp	r3, r2
 801d48c:	d103      	bne.n	801d496 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801d48e:	4b18      	ldr	r3, [pc, #96]	; (801d4f0 <tcp_new_port+0x84>)
 801d490:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801d494:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801d496:	2300      	movs	r3, #0
 801d498:	71fb      	strb	r3, [r7, #7]
 801d49a:	e01e      	b.n	801d4da <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801d49c:	79fb      	ldrb	r3, [r7, #7]
 801d49e:	4a15      	ldr	r2, [pc, #84]	; (801d4f4 <tcp_new_port+0x88>)
 801d4a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d4a4:	681b      	ldr	r3, [r3, #0]
 801d4a6:	603b      	str	r3, [r7, #0]
 801d4a8:	e011      	b.n	801d4ce <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801d4aa:	683b      	ldr	r3, [r7, #0]
 801d4ac:	8ada      	ldrh	r2, [r3, #22]
 801d4ae:	4b10      	ldr	r3, [pc, #64]	; (801d4f0 <tcp_new_port+0x84>)
 801d4b0:	881b      	ldrh	r3, [r3, #0]
 801d4b2:	429a      	cmp	r2, r3
 801d4b4:	d108      	bne.n	801d4c8 <tcp_new_port+0x5c>
        n++;
 801d4b6:	88bb      	ldrh	r3, [r7, #4]
 801d4b8:	3301      	adds	r3, #1
 801d4ba:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801d4bc:	88bb      	ldrh	r3, [r7, #4]
 801d4be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d4c2:	d3d8      	bcc.n	801d476 <tcp_new_port+0xa>
          return 0;
 801d4c4:	2300      	movs	r3, #0
 801d4c6:	e00d      	b.n	801d4e4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801d4c8:	683b      	ldr	r3, [r7, #0]
 801d4ca:	68db      	ldr	r3, [r3, #12]
 801d4cc:	603b      	str	r3, [r7, #0]
 801d4ce:	683b      	ldr	r3, [r7, #0]
 801d4d0:	2b00      	cmp	r3, #0
 801d4d2:	d1ea      	bne.n	801d4aa <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801d4d4:	79fb      	ldrb	r3, [r7, #7]
 801d4d6:	3301      	adds	r3, #1
 801d4d8:	71fb      	strb	r3, [r7, #7]
 801d4da:	79fb      	ldrb	r3, [r7, #7]
 801d4dc:	2b03      	cmp	r3, #3
 801d4de:	d9dd      	bls.n	801d49c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801d4e0:	4b03      	ldr	r3, [pc, #12]	; (801d4f0 <tcp_new_port+0x84>)
 801d4e2:	881b      	ldrh	r3, [r3, #0]
}
 801d4e4:	4618      	mov	r0, r3
 801d4e6:	370c      	adds	r7, #12
 801d4e8:	46bd      	mov	sp, r7
 801d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4ee:	4770      	bx	lr
 801d4f0:	20000058 	.word	0x20000058
 801d4f4:	080608bc 	.word	0x080608bc

0801d4f8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801d4f8:	b580      	push	{r7, lr}
 801d4fa:	b08a      	sub	sp, #40	; 0x28
 801d4fc:	af00      	add	r7, sp, #0
 801d4fe:	60f8      	str	r0, [r7, #12]
 801d500:	60b9      	str	r1, [r7, #8]
 801d502:	603b      	str	r3, [r7, #0]
 801d504:	4613      	mov	r3, r2
 801d506:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 801d508:	2300      	movs	r3, #0
 801d50a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801d50c:	68fb      	ldr	r3, [r7, #12]
 801d50e:	2b00      	cmp	r3, #0
 801d510:	d109      	bne.n	801d526 <tcp_connect+0x2e>
 801d512:	4b7d      	ldr	r3, [pc, #500]	; (801d708 <tcp_connect+0x210>)
 801d514:	f240 4235 	movw	r2, #1077	; 0x435
 801d518:	497c      	ldr	r1, [pc, #496]	; (801d70c <tcp_connect+0x214>)
 801d51a:	487d      	ldr	r0, [pc, #500]	; (801d710 <tcp_connect+0x218>)
 801d51c:	f009 fb9c 	bl	8026c58 <iprintf>
 801d520:	f06f 030f 	mvn.w	r3, #15
 801d524:	e0ec      	b.n	801d700 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801d526:	68bb      	ldr	r3, [r7, #8]
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d109      	bne.n	801d540 <tcp_connect+0x48>
 801d52c:	4b76      	ldr	r3, [pc, #472]	; (801d708 <tcp_connect+0x210>)
 801d52e:	f240 4236 	movw	r2, #1078	; 0x436
 801d532:	4978      	ldr	r1, [pc, #480]	; (801d714 <tcp_connect+0x21c>)
 801d534:	4876      	ldr	r0, [pc, #472]	; (801d710 <tcp_connect+0x218>)
 801d536:	f009 fb8f 	bl	8026c58 <iprintf>
 801d53a:	f06f 030f 	mvn.w	r3, #15
 801d53e:	e0df      	b.n	801d700 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801d540:	68fb      	ldr	r3, [r7, #12]
 801d542:	7d1b      	ldrb	r3, [r3, #20]
 801d544:	2b00      	cmp	r3, #0
 801d546:	d009      	beq.n	801d55c <tcp_connect+0x64>
 801d548:	4b6f      	ldr	r3, [pc, #444]	; (801d708 <tcp_connect+0x210>)
 801d54a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801d54e:	4972      	ldr	r1, [pc, #456]	; (801d718 <tcp_connect+0x220>)
 801d550:	486f      	ldr	r0, [pc, #444]	; (801d710 <tcp_connect+0x218>)
 801d552:	f009 fb81 	bl	8026c58 <iprintf>
 801d556:	f06f 0309 	mvn.w	r3, #9
 801d55a:	e0d1      	b.n	801d700 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801d55c:	68bb      	ldr	r3, [r7, #8]
 801d55e:	2b00      	cmp	r3, #0
 801d560:	d002      	beq.n	801d568 <tcp_connect+0x70>
 801d562:	68bb      	ldr	r3, [r7, #8]
 801d564:	681b      	ldr	r3, [r3, #0]
 801d566:	e000      	b.n	801d56a <tcp_connect+0x72>
 801d568:	2300      	movs	r3, #0
 801d56a:	68fa      	ldr	r2, [r7, #12]
 801d56c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801d56e:	68fb      	ldr	r3, [r7, #12]
 801d570:	88fa      	ldrh	r2, [r7, #6]
 801d572:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801d574:	68fb      	ldr	r3, [r7, #12]
 801d576:	7a1b      	ldrb	r3, [r3, #8]
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d006      	beq.n	801d58a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 801d57c:	68fb      	ldr	r3, [r7, #12]
 801d57e:	7a1b      	ldrb	r3, [r3, #8]
 801d580:	4618      	mov	r0, r3
 801d582:	f7fe fbb3 	bl	801bcec <netif_get_by_index>
 801d586:	6278      	str	r0, [r7, #36]	; 0x24
 801d588:	e005      	b.n	801d596 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801d58a:	68fb      	ldr	r3, [r7, #12]
 801d58c:	3304      	adds	r3, #4
 801d58e:	4618      	mov	r0, r3
 801d590:	f007 fab8 	bl	8024b04 <ip4_route>
 801d594:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 801d596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d102      	bne.n	801d5a2 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 801d59c:	f06f 0303 	mvn.w	r3, #3
 801d5a0:	e0ae      	b.n	801d700 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801d5a2:	68fb      	ldr	r3, [r7, #12]
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	d003      	beq.n	801d5b0 <tcp_connect+0xb8>
 801d5a8:	68fb      	ldr	r3, [r7, #12]
 801d5aa:	681b      	ldr	r3, [r3, #0]
 801d5ac:	2b00      	cmp	r3, #0
 801d5ae:	d111      	bne.n	801d5d4 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 801d5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5b2:	2b00      	cmp	r3, #0
 801d5b4:	d002      	beq.n	801d5bc <tcp_connect+0xc4>
 801d5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5b8:	3304      	adds	r3, #4
 801d5ba:	e000      	b.n	801d5be <tcp_connect+0xc6>
 801d5bc:	2300      	movs	r3, #0
 801d5be:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 801d5c0:	69fb      	ldr	r3, [r7, #28]
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	d102      	bne.n	801d5cc <tcp_connect+0xd4>
      return ERR_RTE;
 801d5c6:	f06f 0303 	mvn.w	r3, #3
 801d5ca:	e099      	b.n	801d700 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801d5cc:	69fb      	ldr	r3, [r7, #28]
 801d5ce:	681a      	ldr	r2, [r3, #0]
 801d5d0:	68fb      	ldr	r3, [r7, #12]
 801d5d2:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801d5d4:	68fb      	ldr	r3, [r7, #12]
 801d5d6:	8adb      	ldrh	r3, [r3, #22]
 801d5d8:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 801d5da:	68fb      	ldr	r3, [r7, #12]
 801d5dc:	8adb      	ldrh	r3, [r3, #22]
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	d10c      	bne.n	801d5fc <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801d5e2:	f7ff ff43 	bl	801d46c <tcp_new_port>
 801d5e6:	4603      	mov	r3, r0
 801d5e8:	461a      	mov	r2, r3
 801d5ea:	68fb      	ldr	r3, [r7, #12]
 801d5ec:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	8adb      	ldrh	r3, [r3, #22]
 801d5f2:	2b00      	cmp	r3, #0
 801d5f4:	d102      	bne.n	801d5fc <tcp_connect+0x104>
      return ERR_BUF;
 801d5f6:	f06f 0301 	mvn.w	r3, #1
 801d5fa:	e081      	b.n	801d700 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 801d5fc:	68f8      	ldr	r0, [r7, #12]
 801d5fe:	f001 f885 	bl	801e70c <tcp_next_iss>
 801d602:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 801d604:	68fb      	ldr	r3, [r7, #12]
 801d606:	2200      	movs	r2, #0
 801d608:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	697a      	ldr	r2, [r7, #20]
 801d60e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 801d610:	697b      	ldr	r3, [r7, #20]
 801d612:	1e5a      	subs	r2, r3, #1
 801d614:	68fb      	ldr	r3, [r7, #12]
 801d616:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 801d618:	697b      	ldr	r3, [r7, #20]
 801d61a:	1e5a      	subs	r2, r3, #1
 801d61c:	68fb      	ldr	r3, [r7, #12]
 801d61e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 801d620:	697b      	ldr	r3, [r7, #20]
 801d622:	1e5a      	subs	r2, r3, #1
 801d624:	68fb      	ldr	r3, [r7, #12]
 801d626:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801d628:	68fb      	ldr	r3, [r7, #12]
 801d62a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801d62e:	855a      	strh	r2, [r3, #42]	; 0x2a
 801d630:	68fb      	ldr	r3, [r7, #12]
 801d632:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801d634:	68fb      	ldr	r3, [r7, #12]
 801d636:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801d638:	68fb      	ldr	r3, [r7, #12]
 801d63a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d63c:	68fb      	ldr	r3, [r7, #12]
 801d63e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801d640:	68fb      	ldr	r3, [r7, #12]
 801d642:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801d646:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 801d64a:	68fb      	ldr	r3, [r7, #12]
 801d64c:	f44f 7206 	mov.w	r2, #536	; 0x218
 801d650:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801d652:	68fb      	ldr	r3, [r7, #12]
 801d654:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801d656:	68fb      	ldr	r3, [r7, #12]
 801d658:	3304      	adds	r3, #4
 801d65a:	461a      	mov	r2, r3
 801d65c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d65e:	f001 f87b 	bl	801e758 <tcp_eff_send_mss_netif>
 801d662:	4603      	mov	r3, r0
 801d664:	461a      	mov	r2, r3
 801d666:	68fb      	ldr	r3, [r7, #12]
 801d668:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 801d66a:	68fb      	ldr	r3, [r7, #12]
 801d66c:	2201      	movs	r2, #1
 801d66e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801d672:	68fb      	ldr	r3, [r7, #12]
 801d674:	683a      	ldr	r2, [r7, #0]
 801d676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801d67a:	2102      	movs	r1, #2
 801d67c:	68f8      	ldr	r0, [r7, #12]
 801d67e:	f004 fadb 	bl	8021c38 <tcp_enqueue_flags>
 801d682:	4603      	mov	r3, r0
 801d684:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801d686:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d68a:	2b00      	cmp	r3, #0
 801d68c:	d136      	bne.n	801d6fc <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 801d68e:	68fb      	ldr	r3, [r7, #12]
 801d690:	2202      	movs	r2, #2
 801d692:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 801d694:	8b7b      	ldrh	r3, [r7, #26]
 801d696:	2b00      	cmp	r3, #0
 801d698:	d021      	beq.n	801d6de <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801d69a:	4b20      	ldr	r3, [pc, #128]	; (801d71c <tcp_connect+0x224>)
 801d69c:	681b      	ldr	r3, [r3, #0]
 801d69e:	68fa      	ldr	r2, [r7, #12]
 801d6a0:	429a      	cmp	r2, r3
 801d6a2:	d105      	bne.n	801d6b0 <tcp_connect+0x1b8>
 801d6a4:	4b1d      	ldr	r3, [pc, #116]	; (801d71c <tcp_connect+0x224>)
 801d6a6:	681b      	ldr	r3, [r3, #0]
 801d6a8:	68db      	ldr	r3, [r3, #12]
 801d6aa:	4a1c      	ldr	r2, [pc, #112]	; (801d71c <tcp_connect+0x224>)
 801d6ac:	6013      	str	r3, [r2, #0]
 801d6ae:	e013      	b.n	801d6d8 <tcp_connect+0x1e0>
 801d6b0:	4b1a      	ldr	r3, [pc, #104]	; (801d71c <tcp_connect+0x224>)
 801d6b2:	681b      	ldr	r3, [r3, #0]
 801d6b4:	623b      	str	r3, [r7, #32]
 801d6b6:	e00c      	b.n	801d6d2 <tcp_connect+0x1da>
 801d6b8:	6a3b      	ldr	r3, [r7, #32]
 801d6ba:	68db      	ldr	r3, [r3, #12]
 801d6bc:	68fa      	ldr	r2, [r7, #12]
 801d6be:	429a      	cmp	r2, r3
 801d6c0:	d104      	bne.n	801d6cc <tcp_connect+0x1d4>
 801d6c2:	68fb      	ldr	r3, [r7, #12]
 801d6c4:	68da      	ldr	r2, [r3, #12]
 801d6c6:	6a3b      	ldr	r3, [r7, #32]
 801d6c8:	60da      	str	r2, [r3, #12]
 801d6ca:	e005      	b.n	801d6d8 <tcp_connect+0x1e0>
 801d6cc:	6a3b      	ldr	r3, [r7, #32]
 801d6ce:	68db      	ldr	r3, [r3, #12]
 801d6d0:	623b      	str	r3, [r7, #32]
 801d6d2:	6a3b      	ldr	r3, [r7, #32]
 801d6d4:	2b00      	cmp	r3, #0
 801d6d6:	d1ef      	bne.n	801d6b8 <tcp_connect+0x1c0>
 801d6d8:	68fb      	ldr	r3, [r7, #12]
 801d6da:	2200      	movs	r2, #0
 801d6dc:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801d6de:	4b10      	ldr	r3, [pc, #64]	; (801d720 <tcp_connect+0x228>)
 801d6e0:	681a      	ldr	r2, [r3, #0]
 801d6e2:	68fb      	ldr	r3, [r7, #12]
 801d6e4:	60da      	str	r2, [r3, #12]
 801d6e6:	4a0e      	ldr	r2, [pc, #56]	; (801d720 <tcp_connect+0x228>)
 801d6e8:	68fb      	ldr	r3, [r7, #12]
 801d6ea:	6013      	str	r3, [r2, #0]
 801d6ec:	f005 fb08 	bl	8022d00 <tcp_timer_needed>
 801d6f0:	4b0c      	ldr	r3, [pc, #48]	; (801d724 <tcp_connect+0x22c>)
 801d6f2:	2201      	movs	r2, #1
 801d6f4:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801d6f6:	68f8      	ldr	r0, [r7, #12]
 801d6f8:	f004 fb8c 	bl	8021e14 <tcp_output>
  }
  return ret;
 801d6fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801d700:	4618      	mov	r0, r3
 801d702:	3728      	adds	r7, #40	; 0x28
 801d704:	46bd      	mov	sp, r7
 801d706:	bd80      	pop	{r7, pc}
 801d708:	0802e18c 	.word	0x0802e18c
 801d70c:	0802e468 	.word	0x0802e468
 801d710:	0802e1d0 	.word	0x0802e1d0
 801d714:	0802e484 	.word	0x0802e484
 801d718:	0802e4a0 	.word	0x0802e4a0
 801d71c:	2001d528 	.word	0x2001d528
 801d720:	2001d51c 	.word	0x2001d51c
 801d724:	2001d518 	.word	0x2001d518

0801d728 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801d728:	b5b0      	push	{r4, r5, r7, lr}
 801d72a:	b090      	sub	sp, #64	; 0x40
 801d72c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801d72e:	2300      	movs	r3, #0
 801d730:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801d734:	4b94      	ldr	r3, [pc, #592]	; (801d988 <tcp_slowtmr+0x260>)
 801d736:	681b      	ldr	r3, [r3, #0]
 801d738:	3301      	adds	r3, #1
 801d73a:	4a93      	ldr	r2, [pc, #588]	; (801d988 <tcp_slowtmr+0x260>)
 801d73c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801d73e:	4b93      	ldr	r3, [pc, #588]	; (801d98c <tcp_slowtmr+0x264>)
 801d740:	781b      	ldrb	r3, [r3, #0]
 801d742:	3301      	adds	r3, #1
 801d744:	b2da      	uxtb	r2, r3
 801d746:	4b91      	ldr	r3, [pc, #580]	; (801d98c <tcp_slowtmr+0x264>)
 801d748:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801d74a:	2300      	movs	r3, #0
 801d74c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801d74e:	4b90      	ldr	r3, [pc, #576]	; (801d990 <tcp_slowtmr+0x268>)
 801d750:	681b      	ldr	r3, [r3, #0]
 801d752:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801d754:	e29f      	b.n	801dc96 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801d756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d758:	7d1b      	ldrb	r3, [r3, #20]
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	d106      	bne.n	801d76c <tcp_slowtmr+0x44>
 801d75e:	4b8d      	ldr	r3, [pc, #564]	; (801d994 <tcp_slowtmr+0x26c>)
 801d760:	f240 42be 	movw	r2, #1214	; 0x4be
 801d764:	498c      	ldr	r1, [pc, #560]	; (801d998 <tcp_slowtmr+0x270>)
 801d766:	488d      	ldr	r0, [pc, #564]	; (801d99c <tcp_slowtmr+0x274>)
 801d768:	f009 fa76 	bl	8026c58 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801d76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d76e:	7d1b      	ldrb	r3, [r3, #20]
 801d770:	2b01      	cmp	r3, #1
 801d772:	d106      	bne.n	801d782 <tcp_slowtmr+0x5a>
 801d774:	4b87      	ldr	r3, [pc, #540]	; (801d994 <tcp_slowtmr+0x26c>)
 801d776:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801d77a:	4989      	ldr	r1, [pc, #548]	; (801d9a0 <tcp_slowtmr+0x278>)
 801d77c:	4887      	ldr	r0, [pc, #540]	; (801d99c <tcp_slowtmr+0x274>)
 801d77e:	f009 fa6b 	bl	8026c58 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801d782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d784:	7d1b      	ldrb	r3, [r3, #20]
 801d786:	2b0a      	cmp	r3, #10
 801d788:	d106      	bne.n	801d798 <tcp_slowtmr+0x70>
 801d78a:	4b82      	ldr	r3, [pc, #520]	; (801d994 <tcp_slowtmr+0x26c>)
 801d78c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801d790:	4984      	ldr	r1, [pc, #528]	; (801d9a4 <tcp_slowtmr+0x27c>)
 801d792:	4882      	ldr	r0, [pc, #520]	; (801d99c <tcp_slowtmr+0x274>)
 801d794:	f009 fa60 	bl	8026c58 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801d798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d79a:	7f9a      	ldrb	r2, [r3, #30]
 801d79c:	4b7b      	ldr	r3, [pc, #492]	; (801d98c <tcp_slowtmr+0x264>)
 801d79e:	781b      	ldrb	r3, [r3, #0]
 801d7a0:	429a      	cmp	r2, r3
 801d7a2:	d105      	bne.n	801d7b0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801d7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7a6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801d7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7aa:	68db      	ldr	r3, [r3, #12]
 801d7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801d7ae:	e272      	b.n	801dc96 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 801d7b0:	4b76      	ldr	r3, [pc, #472]	; (801d98c <tcp_slowtmr+0x264>)
 801d7b2:	781a      	ldrb	r2, [r3, #0]
 801d7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7b6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801d7b8:	2300      	movs	r3, #0
 801d7ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801d7be:	2300      	movs	r3, #0
 801d7c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801d7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7c6:	7d1b      	ldrb	r3, [r3, #20]
 801d7c8:	2b02      	cmp	r3, #2
 801d7ca:	d10a      	bne.n	801d7e2 <tcp_slowtmr+0xba>
 801d7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d7d2:	2b05      	cmp	r3, #5
 801d7d4:	d905      	bls.n	801d7e2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801d7d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d7da:	3301      	adds	r3, #1
 801d7dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d7e0:	e11e      	b.n	801da20 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801d7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d7e8:	2b0b      	cmp	r3, #11
 801d7ea:	d905      	bls.n	801d7f8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801d7ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d7f0:	3301      	adds	r3, #1
 801d7f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d7f6:	e113      	b.n	801da20 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801d7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801d7fe:	2b00      	cmp	r3, #0
 801d800:	d075      	beq.n	801d8ee <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801d802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d806:	2b00      	cmp	r3, #0
 801d808:	d006      	beq.n	801d818 <tcp_slowtmr+0xf0>
 801d80a:	4b62      	ldr	r3, [pc, #392]	; (801d994 <tcp_slowtmr+0x26c>)
 801d80c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801d810:	4965      	ldr	r1, [pc, #404]	; (801d9a8 <tcp_slowtmr+0x280>)
 801d812:	4862      	ldr	r0, [pc, #392]	; (801d99c <tcp_slowtmr+0x274>)
 801d814:	f009 fa20 	bl	8026c58 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801d818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d81a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	d106      	bne.n	801d82e <tcp_slowtmr+0x106>
 801d820:	4b5c      	ldr	r3, [pc, #368]	; (801d994 <tcp_slowtmr+0x26c>)
 801d822:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801d826:	4961      	ldr	r1, [pc, #388]	; (801d9ac <tcp_slowtmr+0x284>)
 801d828:	485c      	ldr	r0, [pc, #368]	; (801d99c <tcp_slowtmr+0x274>)
 801d82a:	f009 fa15 	bl	8026c58 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801d82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d830:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801d834:	2b0b      	cmp	r3, #11
 801d836:	d905      	bls.n	801d844 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801d838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d83c:	3301      	adds	r3, #1
 801d83e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d842:	e0ed      	b.n	801da20 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d846:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801d84a:	3b01      	subs	r3, #1
 801d84c:	4a58      	ldr	r2, [pc, #352]	; (801d9b0 <tcp_slowtmr+0x288>)
 801d84e:	5cd3      	ldrb	r3, [r2, r3]
 801d850:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801d852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d854:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801d858:	7c7a      	ldrb	r2, [r7, #17]
 801d85a:	429a      	cmp	r2, r3
 801d85c:	d907      	bls.n	801d86e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801d85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d860:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801d864:	3301      	adds	r3, #1
 801d866:	b2da      	uxtb	r2, r3
 801d868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d86a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801d86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d870:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801d874:	7c7a      	ldrb	r2, [r7, #17]
 801d876:	429a      	cmp	r2, r3
 801d878:	f200 80d2 	bhi.w	801da20 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801d87c:	2301      	movs	r3, #1
 801d87e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801d880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d882:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d886:	2b00      	cmp	r3, #0
 801d888:	d108      	bne.n	801d89c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801d88a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d88c:	f005 f96a 	bl	8022b64 <tcp_zero_window_probe>
 801d890:	4603      	mov	r3, r0
 801d892:	2b00      	cmp	r3, #0
 801d894:	d014      	beq.n	801d8c0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801d896:	2300      	movs	r3, #0
 801d898:	623b      	str	r3, [r7, #32]
 801d89a:	e011      	b.n	801d8c0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801d89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d89e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d8a2:	4619      	mov	r1, r3
 801d8a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d8a6:	f004 f82f 	bl	8021908 <tcp_split_unsent_seg>
 801d8aa:	4603      	mov	r3, r0
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	d107      	bne.n	801d8c0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801d8b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d8b2:	f004 faaf 	bl	8021e14 <tcp_output>
 801d8b6:	4603      	mov	r3, r0
 801d8b8:	2b00      	cmp	r3, #0
 801d8ba:	d101      	bne.n	801d8c0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801d8bc:	2300      	movs	r3, #0
 801d8be:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801d8c0:	6a3b      	ldr	r3, [r7, #32]
 801d8c2:	2b00      	cmp	r3, #0
 801d8c4:	f000 80ac 	beq.w	801da20 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801d8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8ca:	2200      	movs	r2, #0
 801d8cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801d8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801d8d6:	2b06      	cmp	r3, #6
 801d8d8:	f200 80a2 	bhi.w	801da20 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801d8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801d8e2:	3301      	adds	r3, #1
 801d8e4:	b2da      	uxtb	r2, r3
 801d8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8e8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801d8ec:	e098      	b.n	801da20 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801d8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801d8f4:	2b00      	cmp	r3, #0
 801d8f6:	db0f      	blt.n	801d918 <tcp_slowtmr+0x1f0>
 801d8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801d8fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801d902:	4293      	cmp	r3, r2
 801d904:	d008      	beq.n	801d918 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801d906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d908:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801d90c:	b29b      	uxth	r3, r3
 801d90e:	3301      	adds	r3, #1
 801d910:	b29b      	uxth	r3, r3
 801d912:	b21a      	sxth	r2, r3
 801d914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d916:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801d918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d91a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801d91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d920:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801d924:	429a      	cmp	r2, r3
 801d926:	db7b      	blt.n	801da20 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801d928:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d92a:	f004 fd65 	bl	80223f8 <tcp_rexmit_rto_prepare>
 801d92e:	4603      	mov	r3, r0
 801d930:	2b00      	cmp	r3, #0
 801d932:	d007      	beq.n	801d944 <tcp_slowtmr+0x21c>
 801d934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d938:	2b00      	cmp	r3, #0
 801d93a:	d171      	bne.n	801da20 <tcp_slowtmr+0x2f8>
 801d93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d93e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d940:	2b00      	cmp	r3, #0
 801d942:	d06d      	beq.n	801da20 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801d944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d946:	7d1b      	ldrb	r3, [r3, #20]
 801d948:	2b02      	cmp	r3, #2
 801d94a:	d03a      	beq.n	801d9c2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801d94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d94e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d952:	2b0c      	cmp	r3, #12
 801d954:	bf28      	it	cs
 801d956:	230c      	movcs	r3, #12
 801d958:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801d95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d95c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801d960:	10db      	asrs	r3, r3, #3
 801d962:	b21b      	sxth	r3, r3
 801d964:	461a      	mov	r2, r3
 801d966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d968:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801d96c:	4413      	add	r3, r2
 801d96e:	7efa      	ldrb	r2, [r7, #27]
 801d970:	4910      	ldr	r1, [pc, #64]	; (801d9b4 <tcp_slowtmr+0x28c>)
 801d972:	5c8a      	ldrb	r2, [r1, r2]
 801d974:	4093      	lsls	r3, r2
 801d976:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801d978:	697b      	ldr	r3, [r7, #20]
 801d97a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801d97e:	4293      	cmp	r3, r2
 801d980:	dc1a      	bgt.n	801d9b8 <tcp_slowtmr+0x290>
 801d982:	697b      	ldr	r3, [r7, #20]
 801d984:	b21a      	sxth	r2, r3
 801d986:	e019      	b.n	801d9bc <tcp_slowtmr+0x294>
 801d988:	2001d520 	.word	0x2001d520
 801d98c:	20005a26 	.word	0x20005a26
 801d990:	2001d51c 	.word	0x2001d51c
 801d994:	0802e18c 	.word	0x0802e18c
 801d998:	0802e4d0 	.word	0x0802e4d0
 801d99c:	0802e1d0 	.word	0x0802e1d0
 801d9a0:	0802e4fc 	.word	0x0802e4fc
 801d9a4:	0802e528 	.word	0x0802e528
 801d9a8:	0802e558 	.word	0x0802e558
 801d9ac:	0802e58c 	.word	0x0802e58c
 801d9b0:	080608b4 	.word	0x080608b4
 801d9b4:	080608a4 	.word	0x080608a4
 801d9b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801d9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801d9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9c4:	2200      	movs	r2, #0
 801d9c6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801d9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801d9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801d9d4:	4293      	cmp	r3, r2
 801d9d6:	bf28      	it	cs
 801d9d8:	4613      	movcs	r3, r2
 801d9da:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801d9dc:	8a7b      	ldrh	r3, [r7, #18]
 801d9de:	085b      	lsrs	r3, r3, #1
 801d9e0:	b29a      	uxth	r2, r3
 801d9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801d9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801d9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d9f2:	005b      	lsls	r3, r3, #1
 801d9f4:	b29b      	uxth	r3, r3
 801d9f6:	429a      	cmp	r2, r3
 801d9f8:	d206      	bcs.n	801da08 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801d9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d9fe:	005b      	lsls	r3, r3, #1
 801da00:	b29a      	uxth	r2, r3
 801da02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801da08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da0a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801da0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801da12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da14:	2200      	movs	r2, #0
 801da16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801da1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801da1c:	f004 fd5c 	bl	80224d8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801da20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da22:	7d1b      	ldrb	r3, [r3, #20]
 801da24:	2b06      	cmp	r3, #6
 801da26:	d111      	bne.n	801da4c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801da28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da2a:	8b5b      	ldrh	r3, [r3, #26]
 801da2c:	f003 0310 	and.w	r3, r3, #16
 801da30:	2b00      	cmp	r3, #0
 801da32:	d00b      	beq.n	801da4c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801da34:	4b9d      	ldr	r3, [pc, #628]	; (801dcac <tcp_slowtmr+0x584>)
 801da36:	681a      	ldr	r2, [r3, #0]
 801da38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da3a:	6a1b      	ldr	r3, [r3, #32]
 801da3c:	1ad3      	subs	r3, r2, r3
 801da3e:	2b28      	cmp	r3, #40	; 0x28
 801da40:	d904      	bls.n	801da4c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801da42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801da46:	3301      	adds	r3, #1
 801da48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801da4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da4e:	7a5b      	ldrb	r3, [r3, #9]
 801da50:	f003 0308 	and.w	r3, r3, #8
 801da54:	2b00      	cmp	r3, #0
 801da56:	d04c      	beq.n	801daf2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801da58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da5a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801da5c:	2b04      	cmp	r3, #4
 801da5e:	d003      	beq.n	801da68 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801da60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da62:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801da64:	2b07      	cmp	r3, #7
 801da66:	d144      	bne.n	801daf2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801da68:	4b90      	ldr	r3, [pc, #576]	; (801dcac <tcp_slowtmr+0x584>)
 801da6a:	681a      	ldr	r2, [r3, #0]
 801da6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da6e:	6a1b      	ldr	r3, [r3, #32]
 801da70:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801da72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801da78:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 801da7c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801da80:	498b      	ldr	r1, [pc, #556]	; (801dcb0 <tcp_slowtmr+0x588>)
 801da82:	fba1 1303 	umull	r1, r3, r1, r3
 801da86:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801da88:	429a      	cmp	r2, r3
 801da8a:	d90a      	bls.n	801daa2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801da8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801da90:	3301      	adds	r3, #1
 801da92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801da96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801da9a:	3301      	adds	r3, #1
 801da9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801daa0:	e027      	b.n	801daf2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801daa2:	4b82      	ldr	r3, [pc, #520]	; (801dcac <tcp_slowtmr+0x584>)
 801daa4:	681a      	ldr	r2, [r3, #0]
 801daa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801daa8:	6a1b      	ldr	r3, [r3, #32]
 801daaa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801daac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801daae:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801dab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dab4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801dab8:	4618      	mov	r0, r3
 801daba:	4b7e      	ldr	r3, [pc, #504]	; (801dcb4 <tcp_slowtmr+0x58c>)
 801dabc:	fb03 f300 	mul.w	r3, r3, r0
 801dac0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801dac2:	497b      	ldr	r1, [pc, #492]	; (801dcb0 <tcp_slowtmr+0x588>)
 801dac4:	fba1 1303 	umull	r1, r3, r1, r3
 801dac8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801daca:	429a      	cmp	r2, r3
 801dacc:	d911      	bls.n	801daf2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801dace:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801dad0:	f005 f808 	bl	8022ae4 <tcp_keepalive>
 801dad4:	4603      	mov	r3, r0
 801dad6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801dada:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801dade:	2b00      	cmp	r3, #0
 801dae0:	d107      	bne.n	801daf2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801dae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dae4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801dae8:	3301      	adds	r3, #1
 801daea:	b2da      	uxtb	r2, r3
 801daec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801daee:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801daf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801daf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	d011      	beq.n	801db1e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801dafa:	4b6c      	ldr	r3, [pc, #432]	; (801dcac <tcp_slowtmr+0x584>)
 801dafc:	681a      	ldr	r2, [r3, #0]
 801dafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db00:	6a1b      	ldr	r3, [r3, #32]
 801db02:	1ad2      	subs	r2, r2, r3
 801db04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db06:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801db0a:	4619      	mov	r1, r3
 801db0c:	460b      	mov	r3, r1
 801db0e:	005b      	lsls	r3, r3, #1
 801db10:	440b      	add	r3, r1
 801db12:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801db14:	429a      	cmp	r2, r3
 801db16:	d302      	bcc.n	801db1e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801db18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801db1a:	f000 fec7 	bl	801e8ac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801db1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db20:	7d1b      	ldrb	r3, [r3, #20]
 801db22:	2b03      	cmp	r3, #3
 801db24:	d10b      	bne.n	801db3e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801db26:	4b61      	ldr	r3, [pc, #388]	; (801dcac <tcp_slowtmr+0x584>)
 801db28:	681a      	ldr	r2, [r3, #0]
 801db2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db2c:	6a1b      	ldr	r3, [r3, #32]
 801db2e:	1ad3      	subs	r3, r2, r3
 801db30:	2b28      	cmp	r3, #40	; 0x28
 801db32:	d904      	bls.n	801db3e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801db34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801db38:	3301      	adds	r3, #1
 801db3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801db3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db40:	7d1b      	ldrb	r3, [r3, #20]
 801db42:	2b09      	cmp	r3, #9
 801db44:	d10b      	bne.n	801db5e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801db46:	4b59      	ldr	r3, [pc, #356]	; (801dcac <tcp_slowtmr+0x584>)
 801db48:	681a      	ldr	r2, [r3, #0]
 801db4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db4c:	6a1b      	ldr	r3, [r3, #32]
 801db4e:	1ad3      	subs	r3, r2, r3
 801db50:	2bf0      	cmp	r3, #240	; 0xf0
 801db52:	d904      	bls.n	801db5e <tcp_slowtmr+0x436>
        ++pcb_remove;
 801db54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801db58:	3301      	adds	r3, #1
 801db5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801db5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801db62:	2b00      	cmp	r3, #0
 801db64:	d060      	beq.n	801dc28 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801db66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801db6c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801db6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801db70:	f000 fce8 	bl	801e544 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801db74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db76:	2b00      	cmp	r3, #0
 801db78:	d010      	beq.n	801db9c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801db7a:	4b4f      	ldr	r3, [pc, #316]	; (801dcb8 <tcp_slowtmr+0x590>)
 801db7c:	681b      	ldr	r3, [r3, #0]
 801db7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801db80:	429a      	cmp	r2, r3
 801db82:	d106      	bne.n	801db92 <tcp_slowtmr+0x46a>
 801db84:	4b4d      	ldr	r3, [pc, #308]	; (801dcbc <tcp_slowtmr+0x594>)
 801db86:	f240 526d 	movw	r2, #1389	; 0x56d
 801db8a:	494d      	ldr	r1, [pc, #308]	; (801dcc0 <tcp_slowtmr+0x598>)
 801db8c:	484d      	ldr	r0, [pc, #308]	; (801dcc4 <tcp_slowtmr+0x59c>)
 801db8e:	f009 f863 	bl	8026c58 <iprintf>
        prev->next = pcb->next;
 801db92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db94:	68da      	ldr	r2, [r3, #12]
 801db96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db98:	60da      	str	r2, [r3, #12]
 801db9a:	e00f      	b.n	801dbbc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801db9c:	4b46      	ldr	r3, [pc, #280]	; (801dcb8 <tcp_slowtmr+0x590>)
 801db9e:	681b      	ldr	r3, [r3, #0]
 801dba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dba2:	429a      	cmp	r2, r3
 801dba4:	d006      	beq.n	801dbb4 <tcp_slowtmr+0x48c>
 801dba6:	4b45      	ldr	r3, [pc, #276]	; (801dcbc <tcp_slowtmr+0x594>)
 801dba8:	f240 5271 	movw	r2, #1393	; 0x571
 801dbac:	4946      	ldr	r1, [pc, #280]	; (801dcc8 <tcp_slowtmr+0x5a0>)
 801dbae:	4845      	ldr	r0, [pc, #276]	; (801dcc4 <tcp_slowtmr+0x59c>)
 801dbb0:	f009 f852 	bl	8026c58 <iprintf>
        tcp_active_pcbs = pcb->next;
 801dbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbb6:	68db      	ldr	r3, [r3, #12]
 801dbb8:	4a3f      	ldr	r2, [pc, #252]	; (801dcb8 <tcp_slowtmr+0x590>)
 801dbba:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801dbbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801dbc0:	2b00      	cmp	r3, #0
 801dbc2:	d013      	beq.n	801dbec <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801dbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbc6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801dbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801dbcc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801dbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbd0:	3304      	adds	r3, #4
 801dbd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dbd4:	8ad2      	ldrh	r2, [r2, #22]
 801dbd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801dbd8:	8b09      	ldrh	r1, [r1, #24]
 801dbda:	9102      	str	r1, [sp, #8]
 801dbdc:	9201      	str	r2, [sp, #4]
 801dbde:	9300      	str	r3, [sp, #0]
 801dbe0:	462b      	mov	r3, r5
 801dbe2:	4622      	mov	r2, r4
 801dbe4:	4601      	mov	r1, r0
 801dbe6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801dbe8:	f004 fec8 	bl	802297c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801dbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbee:	691b      	ldr	r3, [r3, #16]
 801dbf0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801dbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbf4:	7d1b      	ldrb	r3, [r3, #20]
 801dbf6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801dbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbfa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801dbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbfe:	68db      	ldr	r3, [r3, #12]
 801dc00:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801dc02:	6838      	ldr	r0, [r7, #0]
 801dc04:	f7fe ff20 	bl	801ca48 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801dc08:	4b30      	ldr	r3, [pc, #192]	; (801dccc <tcp_slowtmr+0x5a4>)
 801dc0a:	2200      	movs	r2, #0
 801dc0c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801dc0e:	68fb      	ldr	r3, [r7, #12]
 801dc10:	2b00      	cmp	r3, #0
 801dc12:	d004      	beq.n	801dc1e <tcp_slowtmr+0x4f6>
 801dc14:	68fb      	ldr	r3, [r7, #12]
 801dc16:	f06f 010c 	mvn.w	r1, #12
 801dc1a:	68b8      	ldr	r0, [r7, #8]
 801dc1c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801dc1e:	4b2b      	ldr	r3, [pc, #172]	; (801dccc <tcp_slowtmr+0x5a4>)
 801dc20:	781b      	ldrb	r3, [r3, #0]
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	d037      	beq.n	801dc96 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801dc26:	e590      	b.n	801d74a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801dc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc2a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801dc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc2e:	68db      	ldr	r3, [r3, #12]
 801dc30:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801dc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc34:	7f1b      	ldrb	r3, [r3, #28]
 801dc36:	3301      	adds	r3, #1
 801dc38:	b2da      	uxtb	r2, r3
 801dc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc3c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801dc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc40:	7f1a      	ldrb	r2, [r3, #28]
 801dc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc44:	7f5b      	ldrb	r3, [r3, #29]
 801dc46:	429a      	cmp	r2, r3
 801dc48:	d325      	bcc.n	801dc96 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801dc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc4c:	2200      	movs	r2, #0
 801dc4e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801dc50:	4b1e      	ldr	r3, [pc, #120]	; (801dccc <tcp_slowtmr+0x5a4>)
 801dc52:	2200      	movs	r2, #0
 801dc54:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801dc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dc5c:	2b00      	cmp	r3, #0
 801dc5e:	d00b      	beq.n	801dc78 <tcp_slowtmr+0x550>
 801dc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dc66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dc68:	6912      	ldr	r2, [r2, #16]
 801dc6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801dc6c:	4610      	mov	r0, r2
 801dc6e:	4798      	blx	r3
 801dc70:	4603      	mov	r3, r0
 801dc72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801dc76:	e002      	b.n	801dc7e <tcp_slowtmr+0x556>
 801dc78:	2300      	movs	r3, #0
 801dc7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801dc7e:	4b13      	ldr	r3, [pc, #76]	; (801dccc <tcp_slowtmr+0x5a4>)
 801dc80:	781b      	ldrb	r3, [r3, #0]
 801dc82:	2b00      	cmp	r3, #0
 801dc84:	d000      	beq.n	801dc88 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801dc86:	e560      	b.n	801d74a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801dc88:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801dc8c:	2b00      	cmp	r3, #0
 801dc8e:	d102      	bne.n	801dc96 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801dc90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dc92:	f004 f8bf 	bl	8021e14 <tcp_output>
  while (pcb != NULL) {
 801dc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc98:	2b00      	cmp	r3, #0
 801dc9a:	f47f ad5c 	bne.w	801d756 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801dc9e:	2300      	movs	r3, #0
 801dca0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801dca2:	4b0b      	ldr	r3, [pc, #44]	; (801dcd0 <tcp_slowtmr+0x5a8>)
 801dca4:	681b      	ldr	r3, [r3, #0]
 801dca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801dca8:	e067      	b.n	801dd7a <tcp_slowtmr+0x652>
 801dcaa:	bf00      	nop
 801dcac:	2001d520 	.word	0x2001d520
 801dcb0:	10624dd3 	.word	0x10624dd3
 801dcb4:	000124f8 	.word	0x000124f8
 801dcb8:	2001d51c 	.word	0x2001d51c
 801dcbc:	0802e18c 	.word	0x0802e18c
 801dcc0:	0802e5c4 	.word	0x0802e5c4
 801dcc4:	0802e1d0 	.word	0x0802e1d0
 801dcc8:	0802e5f0 	.word	0x0802e5f0
 801dccc:	2001d518 	.word	0x2001d518
 801dcd0:	2001d52c 	.word	0x2001d52c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801dcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dcd6:	7d1b      	ldrb	r3, [r3, #20]
 801dcd8:	2b0a      	cmp	r3, #10
 801dcda:	d006      	beq.n	801dcea <tcp_slowtmr+0x5c2>
 801dcdc:	4b2b      	ldr	r3, [pc, #172]	; (801dd8c <tcp_slowtmr+0x664>)
 801dcde:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801dce2:	492b      	ldr	r1, [pc, #172]	; (801dd90 <tcp_slowtmr+0x668>)
 801dce4:	482b      	ldr	r0, [pc, #172]	; (801dd94 <tcp_slowtmr+0x66c>)
 801dce6:	f008 ffb7 	bl	8026c58 <iprintf>
    pcb_remove = 0;
 801dcea:	2300      	movs	r3, #0
 801dcec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801dcf0:	4b29      	ldr	r3, [pc, #164]	; (801dd98 <tcp_slowtmr+0x670>)
 801dcf2:	681a      	ldr	r2, [r3, #0]
 801dcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dcf6:	6a1b      	ldr	r3, [r3, #32]
 801dcf8:	1ad3      	subs	r3, r2, r3
 801dcfa:	2bf0      	cmp	r3, #240	; 0xf0
 801dcfc:	d904      	bls.n	801dd08 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801dcfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dd02:	3301      	adds	r3, #1
 801dd04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801dd08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	d02f      	beq.n	801dd70 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801dd10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801dd12:	f000 fc17 	bl	801e544 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801dd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd18:	2b00      	cmp	r3, #0
 801dd1a:	d010      	beq.n	801dd3e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801dd1c:	4b1f      	ldr	r3, [pc, #124]	; (801dd9c <tcp_slowtmr+0x674>)
 801dd1e:	681b      	ldr	r3, [r3, #0]
 801dd20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dd22:	429a      	cmp	r2, r3
 801dd24:	d106      	bne.n	801dd34 <tcp_slowtmr+0x60c>
 801dd26:	4b19      	ldr	r3, [pc, #100]	; (801dd8c <tcp_slowtmr+0x664>)
 801dd28:	f240 52af 	movw	r2, #1455	; 0x5af
 801dd2c:	491c      	ldr	r1, [pc, #112]	; (801dda0 <tcp_slowtmr+0x678>)
 801dd2e:	4819      	ldr	r0, [pc, #100]	; (801dd94 <tcp_slowtmr+0x66c>)
 801dd30:	f008 ff92 	bl	8026c58 <iprintf>
        prev->next = pcb->next;
 801dd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd36:	68da      	ldr	r2, [r3, #12]
 801dd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd3a:	60da      	str	r2, [r3, #12]
 801dd3c:	e00f      	b.n	801dd5e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801dd3e:	4b17      	ldr	r3, [pc, #92]	; (801dd9c <tcp_slowtmr+0x674>)
 801dd40:	681b      	ldr	r3, [r3, #0]
 801dd42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dd44:	429a      	cmp	r2, r3
 801dd46:	d006      	beq.n	801dd56 <tcp_slowtmr+0x62e>
 801dd48:	4b10      	ldr	r3, [pc, #64]	; (801dd8c <tcp_slowtmr+0x664>)
 801dd4a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801dd4e:	4915      	ldr	r1, [pc, #84]	; (801dda4 <tcp_slowtmr+0x67c>)
 801dd50:	4810      	ldr	r0, [pc, #64]	; (801dd94 <tcp_slowtmr+0x66c>)
 801dd52:	f008 ff81 	bl	8026c58 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801dd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd58:	68db      	ldr	r3, [r3, #12]
 801dd5a:	4a10      	ldr	r2, [pc, #64]	; (801dd9c <tcp_slowtmr+0x674>)
 801dd5c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801dd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd60:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801dd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd64:	68db      	ldr	r3, [r3, #12]
 801dd66:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801dd68:	69f8      	ldr	r0, [r7, #28]
 801dd6a:	f7fe fe6d 	bl	801ca48 <tcp_free>
 801dd6e:	e004      	b.n	801dd7a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801dd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd72:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801dd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd76:	68db      	ldr	r3, [r3, #12]
 801dd78:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801dd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd7c:	2b00      	cmp	r3, #0
 801dd7e:	d1a9      	bne.n	801dcd4 <tcp_slowtmr+0x5ac>
    }
  }
}
 801dd80:	bf00      	nop
 801dd82:	bf00      	nop
 801dd84:	3730      	adds	r7, #48	; 0x30
 801dd86:	46bd      	mov	sp, r7
 801dd88:	bdb0      	pop	{r4, r5, r7, pc}
 801dd8a:	bf00      	nop
 801dd8c:	0802e18c 	.word	0x0802e18c
 801dd90:	0802e61c 	.word	0x0802e61c
 801dd94:	0802e1d0 	.word	0x0802e1d0
 801dd98:	2001d520 	.word	0x2001d520
 801dd9c:	2001d52c 	.word	0x2001d52c
 801dda0:	0802e64c 	.word	0x0802e64c
 801dda4:	0802e674 	.word	0x0802e674

0801dda8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801dda8:	b580      	push	{r7, lr}
 801ddaa:	b082      	sub	sp, #8
 801ddac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801ddae:	4b2d      	ldr	r3, [pc, #180]	; (801de64 <tcp_fasttmr+0xbc>)
 801ddb0:	781b      	ldrb	r3, [r3, #0]
 801ddb2:	3301      	adds	r3, #1
 801ddb4:	b2da      	uxtb	r2, r3
 801ddb6:	4b2b      	ldr	r3, [pc, #172]	; (801de64 <tcp_fasttmr+0xbc>)
 801ddb8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801ddba:	4b2b      	ldr	r3, [pc, #172]	; (801de68 <tcp_fasttmr+0xc0>)
 801ddbc:	681b      	ldr	r3, [r3, #0]
 801ddbe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801ddc0:	e048      	b.n	801de54 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801ddc2:	687b      	ldr	r3, [r7, #4]
 801ddc4:	7f9a      	ldrb	r2, [r3, #30]
 801ddc6:	4b27      	ldr	r3, [pc, #156]	; (801de64 <tcp_fasttmr+0xbc>)
 801ddc8:	781b      	ldrb	r3, [r3, #0]
 801ddca:	429a      	cmp	r2, r3
 801ddcc:	d03f      	beq.n	801de4e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801ddce:	4b25      	ldr	r3, [pc, #148]	; (801de64 <tcp_fasttmr+0xbc>)
 801ddd0:	781a      	ldrb	r2, [r3, #0]
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	8b5b      	ldrh	r3, [r3, #26]
 801ddda:	f003 0301 	and.w	r3, r3, #1
 801ddde:	2b00      	cmp	r3, #0
 801dde0:	d010      	beq.n	801de04 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	8b5b      	ldrh	r3, [r3, #26]
 801dde6:	f043 0302 	orr.w	r3, r3, #2
 801ddea:	b29a      	uxth	r2, r3
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801ddf0:	6878      	ldr	r0, [r7, #4]
 801ddf2:	f004 f80f 	bl	8021e14 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ddf6:	687b      	ldr	r3, [r7, #4]
 801ddf8:	8b5b      	ldrh	r3, [r3, #26]
 801ddfa:	f023 0303 	bic.w	r3, r3, #3
 801ddfe:	b29a      	uxth	r2, r3
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801de04:	687b      	ldr	r3, [r7, #4]
 801de06:	8b5b      	ldrh	r3, [r3, #26]
 801de08:	f003 0308 	and.w	r3, r3, #8
 801de0c:	2b00      	cmp	r3, #0
 801de0e:	d009      	beq.n	801de24 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	8b5b      	ldrh	r3, [r3, #26]
 801de14:	f023 0308 	bic.w	r3, r3, #8
 801de18:	b29a      	uxth	r2, r3
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801de1e:	6878      	ldr	r0, [r7, #4]
 801de20:	f7fe ffa6 	bl	801cd70 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801de24:	687b      	ldr	r3, [r7, #4]
 801de26:	68db      	ldr	r3, [r3, #12]
 801de28:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d00a      	beq.n	801de48 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801de32:	4b0e      	ldr	r3, [pc, #56]	; (801de6c <tcp_fasttmr+0xc4>)
 801de34:	2200      	movs	r2, #0
 801de36:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801de38:	6878      	ldr	r0, [r7, #4]
 801de3a:	f000 f819 	bl	801de70 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801de3e:	4b0b      	ldr	r3, [pc, #44]	; (801de6c <tcp_fasttmr+0xc4>)
 801de40:	781b      	ldrb	r3, [r3, #0]
 801de42:	2b00      	cmp	r3, #0
 801de44:	d000      	beq.n	801de48 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801de46:	e7b8      	b.n	801ddba <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801de48:	683b      	ldr	r3, [r7, #0]
 801de4a:	607b      	str	r3, [r7, #4]
 801de4c:	e002      	b.n	801de54 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801de4e:	687b      	ldr	r3, [r7, #4]
 801de50:	68db      	ldr	r3, [r3, #12]
 801de52:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801de54:	687b      	ldr	r3, [r7, #4]
 801de56:	2b00      	cmp	r3, #0
 801de58:	d1b3      	bne.n	801ddc2 <tcp_fasttmr+0x1a>
    }
  }
}
 801de5a:	bf00      	nop
 801de5c:	bf00      	nop
 801de5e:	3708      	adds	r7, #8
 801de60:	46bd      	mov	sp, r7
 801de62:	bd80      	pop	{r7, pc}
 801de64:	20005a26 	.word	0x20005a26
 801de68:	2001d51c 	.word	0x2001d51c
 801de6c:	2001d518 	.word	0x2001d518

0801de70 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801de70:	b590      	push	{r4, r7, lr}
 801de72:	b085      	sub	sp, #20
 801de74:	af00      	add	r7, sp, #0
 801de76:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801de78:	687b      	ldr	r3, [r7, #4]
 801de7a:	2b00      	cmp	r3, #0
 801de7c:	d109      	bne.n	801de92 <tcp_process_refused_data+0x22>
 801de7e:	4b37      	ldr	r3, [pc, #220]	; (801df5c <tcp_process_refused_data+0xec>)
 801de80:	f240 6209 	movw	r2, #1545	; 0x609
 801de84:	4936      	ldr	r1, [pc, #216]	; (801df60 <tcp_process_refused_data+0xf0>)
 801de86:	4837      	ldr	r0, [pc, #220]	; (801df64 <tcp_process_refused_data+0xf4>)
 801de88:	f008 fee6 	bl	8026c58 <iprintf>
 801de8c:	f06f 030f 	mvn.w	r3, #15
 801de90:	e060      	b.n	801df54 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801de92:	687b      	ldr	r3, [r7, #4]
 801de94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801de96:	7b5b      	ldrb	r3, [r3, #13]
 801de98:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801de9a:	687b      	ldr	r3, [r7, #4]
 801de9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801de9e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801dea0:	687b      	ldr	r3, [r7, #4]
 801dea2:	2200      	movs	r2, #0
 801dea4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801dea6:	687b      	ldr	r3, [r7, #4]
 801dea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801deac:	2b00      	cmp	r3, #0
 801deae:	d00b      	beq.n	801dec8 <tcp_process_refused_data+0x58>
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	6918      	ldr	r0, [r3, #16]
 801deba:	2300      	movs	r3, #0
 801debc:	68ba      	ldr	r2, [r7, #8]
 801debe:	6879      	ldr	r1, [r7, #4]
 801dec0:	47a0      	blx	r4
 801dec2:	4603      	mov	r3, r0
 801dec4:	73fb      	strb	r3, [r7, #15]
 801dec6:	e007      	b.n	801ded8 <tcp_process_refused_data+0x68>
 801dec8:	2300      	movs	r3, #0
 801deca:	68ba      	ldr	r2, [r7, #8]
 801decc:	6879      	ldr	r1, [r7, #4]
 801dece:	2000      	movs	r0, #0
 801ded0:	f000 f8c2 	bl	801e058 <tcp_recv_null>
 801ded4:	4603      	mov	r3, r0
 801ded6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801ded8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dedc:	2b00      	cmp	r3, #0
 801dede:	d12a      	bne.n	801df36 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801dee0:	7bbb      	ldrb	r3, [r7, #14]
 801dee2:	f003 0320 	and.w	r3, r3, #32
 801dee6:	2b00      	cmp	r3, #0
 801dee8:	d033      	beq.n	801df52 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801deea:	687b      	ldr	r3, [r7, #4]
 801deec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801deee:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801def2:	d005      	beq.n	801df00 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801def8:	3301      	adds	r3, #1
 801defa:	b29a      	uxth	r2, r3
 801defc:	687b      	ldr	r3, [r7, #4]
 801defe:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801df06:	2b00      	cmp	r3, #0
 801df08:	d00b      	beq.n	801df22 <tcp_process_refused_data+0xb2>
 801df0a:	687b      	ldr	r3, [r7, #4]
 801df0c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801df10:	687b      	ldr	r3, [r7, #4]
 801df12:	6918      	ldr	r0, [r3, #16]
 801df14:	2300      	movs	r3, #0
 801df16:	2200      	movs	r2, #0
 801df18:	6879      	ldr	r1, [r7, #4]
 801df1a:	47a0      	blx	r4
 801df1c:	4603      	mov	r3, r0
 801df1e:	73fb      	strb	r3, [r7, #15]
 801df20:	e001      	b.n	801df26 <tcp_process_refused_data+0xb6>
 801df22:	2300      	movs	r3, #0
 801df24:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801df26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801df2a:	f113 0f0d 	cmn.w	r3, #13
 801df2e:	d110      	bne.n	801df52 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801df30:	f06f 030c 	mvn.w	r3, #12
 801df34:	e00e      	b.n	801df54 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801df36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801df3a:	f113 0f0d 	cmn.w	r3, #13
 801df3e:	d102      	bne.n	801df46 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801df40:	f06f 030c 	mvn.w	r3, #12
 801df44:	e006      	b.n	801df54 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	68ba      	ldr	r2, [r7, #8]
 801df4a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801df4c:	f06f 0304 	mvn.w	r3, #4
 801df50:	e000      	b.n	801df54 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801df52:	2300      	movs	r3, #0
}
 801df54:	4618      	mov	r0, r3
 801df56:	3714      	adds	r7, #20
 801df58:	46bd      	mov	sp, r7
 801df5a:	bd90      	pop	{r4, r7, pc}
 801df5c:	0802e18c 	.word	0x0802e18c
 801df60:	0802e69c 	.word	0x0802e69c
 801df64:	0802e1d0 	.word	0x0802e1d0

0801df68 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801df68:	b580      	push	{r7, lr}
 801df6a:	b084      	sub	sp, #16
 801df6c:	af00      	add	r7, sp, #0
 801df6e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801df70:	e007      	b.n	801df82 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801df72:	687b      	ldr	r3, [r7, #4]
 801df74:	681b      	ldr	r3, [r3, #0]
 801df76:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801df78:	6878      	ldr	r0, [r7, #4]
 801df7a:	f000 f80a 	bl	801df92 <tcp_seg_free>
    seg = next;
 801df7e:	68fb      	ldr	r3, [r7, #12]
 801df80:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801df82:	687b      	ldr	r3, [r7, #4]
 801df84:	2b00      	cmp	r3, #0
 801df86:	d1f4      	bne.n	801df72 <tcp_segs_free+0xa>
  }
}
 801df88:	bf00      	nop
 801df8a:	bf00      	nop
 801df8c:	3710      	adds	r7, #16
 801df8e:	46bd      	mov	sp, r7
 801df90:	bd80      	pop	{r7, pc}

0801df92 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801df92:	b580      	push	{r7, lr}
 801df94:	b082      	sub	sp, #8
 801df96:	af00      	add	r7, sp, #0
 801df98:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801df9a:	687b      	ldr	r3, [r7, #4]
 801df9c:	2b00      	cmp	r3, #0
 801df9e:	d00c      	beq.n	801dfba <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801dfa0:	687b      	ldr	r3, [r7, #4]
 801dfa2:	685b      	ldr	r3, [r3, #4]
 801dfa4:	2b00      	cmp	r3, #0
 801dfa6:	d004      	beq.n	801dfb2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	685b      	ldr	r3, [r3, #4]
 801dfac:	4618      	mov	r0, r3
 801dfae:	f7fe fa2b 	bl	801c408 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801dfb2:	6879      	ldr	r1, [r7, #4]
 801dfb4:	2003      	movs	r0, #3
 801dfb6:	f7fd fb83 	bl	801b6c0 <memp_free>
  }
}
 801dfba:	bf00      	nop
 801dfbc:	3708      	adds	r7, #8
 801dfbe:	46bd      	mov	sp, r7
 801dfc0:	bd80      	pop	{r7, pc}
	...

0801dfc4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 801dfc4:	b580      	push	{r7, lr}
 801dfc6:	b082      	sub	sp, #8
 801dfc8:	af00      	add	r7, sp, #0
 801dfca:	6078      	str	r0, [r7, #4]
 801dfcc:	460b      	mov	r3, r1
 801dfce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801dfd0:	687b      	ldr	r3, [r7, #4]
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	d107      	bne.n	801dfe6 <tcp_setprio+0x22>
 801dfd6:	4b07      	ldr	r3, [pc, #28]	; (801dff4 <tcp_setprio+0x30>)
 801dfd8:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 801dfdc:	4906      	ldr	r1, [pc, #24]	; (801dff8 <tcp_setprio+0x34>)
 801dfde:	4807      	ldr	r0, [pc, #28]	; (801dffc <tcp_setprio+0x38>)
 801dfe0:	f008 fe3a 	bl	8026c58 <iprintf>
 801dfe4:	e002      	b.n	801dfec <tcp_setprio+0x28>

  pcb->prio = prio;
 801dfe6:	687b      	ldr	r3, [r7, #4]
 801dfe8:	78fa      	ldrb	r2, [r7, #3]
 801dfea:	755a      	strb	r2, [r3, #21]
}
 801dfec:	3708      	adds	r7, #8
 801dfee:	46bd      	mov	sp, r7
 801dff0:	bd80      	pop	{r7, pc}
 801dff2:	bf00      	nop
 801dff4:	0802e18c 	.word	0x0802e18c
 801dff8:	0802e6c4 	.word	0x0802e6c4
 801dffc:	0802e1d0 	.word	0x0802e1d0

0801e000 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801e000:	b580      	push	{r7, lr}
 801e002:	b084      	sub	sp, #16
 801e004:	af00      	add	r7, sp, #0
 801e006:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	2b00      	cmp	r3, #0
 801e00c:	d106      	bne.n	801e01c <tcp_seg_copy+0x1c>
 801e00e:	4b0f      	ldr	r3, [pc, #60]	; (801e04c <tcp_seg_copy+0x4c>)
 801e010:	f240 6282 	movw	r2, #1666	; 0x682
 801e014:	490e      	ldr	r1, [pc, #56]	; (801e050 <tcp_seg_copy+0x50>)
 801e016:	480f      	ldr	r0, [pc, #60]	; (801e054 <tcp_seg_copy+0x54>)
 801e018:	f008 fe1e 	bl	8026c58 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801e01c:	2003      	movs	r0, #3
 801e01e:	f7fd fafd 	bl	801b61c <memp_malloc>
 801e022:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801e024:	68fb      	ldr	r3, [r7, #12]
 801e026:	2b00      	cmp	r3, #0
 801e028:	d101      	bne.n	801e02e <tcp_seg_copy+0x2e>
    return NULL;
 801e02a:	2300      	movs	r3, #0
 801e02c:	e00a      	b.n	801e044 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801e02e:	2210      	movs	r2, #16
 801e030:	6879      	ldr	r1, [r7, #4]
 801e032:	68f8      	ldr	r0, [r7, #12]
 801e034:	f008 fab8 	bl	80265a8 <memcpy>
  pbuf_ref(cseg->p);
 801e038:	68fb      	ldr	r3, [r7, #12]
 801e03a:	685b      	ldr	r3, [r3, #4]
 801e03c:	4618      	mov	r0, r3
 801e03e:	f7fe fa89 	bl	801c554 <pbuf_ref>
  return cseg;
 801e042:	68fb      	ldr	r3, [r7, #12]
}
 801e044:	4618      	mov	r0, r3
 801e046:	3710      	adds	r7, #16
 801e048:	46bd      	mov	sp, r7
 801e04a:	bd80      	pop	{r7, pc}
 801e04c:	0802e18c 	.word	0x0802e18c
 801e050:	0802e6e0 	.word	0x0802e6e0
 801e054:	0802e1d0 	.word	0x0802e1d0

0801e058 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801e058:	b580      	push	{r7, lr}
 801e05a:	b084      	sub	sp, #16
 801e05c:	af00      	add	r7, sp, #0
 801e05e:	60f8      	str	r0, [r7, #12]
 801e060:	60b9      	str	r1, [r7, #8]
 801e062:	607a      	str	r2, [r7, #4]
 801e064:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801e066:	68bb      	ldr	r3, [r7, #8]
 801e068:	2b00      	cmp	r3, #0
 801e06a:	d109      	bne.n	801e080 <tcp_recv_null+0x28>
 801e06c:	4b12      	ldr	r3, [pc, #72]	; (801e0b8 <tcp_recv_null+0x60>)
 801e06e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801e072:	4912      	ldr	r1, [pc, #72]	; (801e0bc <tcp_recv_null+0x64>)
 801e074:	4812      	ldr	r0, [pc, #72]	; (801e0c0 <tcp_recv_null+0x68>)
 801e076:	f008 fdef 	bl	8026c58 <iprintf>
 801e07a:	f06f 030f 	mvn.w	r3, #15
 801e07e:	e016      	b.n	801e0ae <tcp_recv_null+0x56>

  if (p != NULL) {
 801e080:	687b      	ldr	r3, [r7, #4]
 801e082:	2b00      	cmp	r3, #0
 801e084:	d009      	beq.n	801e09a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801e086:	687b      	ldr	r3, [r7, #4]
 801e088:	891b      	ldrh	r3, [r3, #8]
 801e08a:	4619      	mov	r1, r3
 801e08c:	68b8      	ldr	r0, [r7, #8]
 801e08e:	f7ff f99d 	bl	801d3cc <tcp_recved>
    pbuf_free(p);
 801e092:	6878      	ldr	r0, [r7, #4]
 801e094:	f7fe f9b8 	bl	801c408 <pbuf_free>
 801e098:	e008      	b.n	801e0ac <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801e09a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	d104      	bne.n	801e0ac <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801e0a2:	68b8      	ldr	r0, [r7, #8]
 801e0a4:	f7fe fece 	bl	801ce44 <tcp_close>
 801e0a8:	4603      	mov	r3, r0
 801e0aa:	e000      	b.n	801e0ae <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801e0ac:	2300      	movs	r3, #0
}
 801e0ae:	4618      	mov	r0, r3
 801e0b0:	3710      	adds	r7, #16
 801e0b2:	46bd      	mov	sp, r7
 801e0b4:	bd80      	pop	{r7, pc}
 801e0b6:	bf00      	nop
 801e0b8:	0802e18c 	.word	0x0802e18c
 801e0bc:	0802e6fc 	.word	0x0802e6fc
 801e0c0:	0802e1d0 	.word	0x0802e1d0

0801e0c4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801e0c4:	b580      	push	{r7, lr}
 801e0c6:	b086      	sub	sp, #24
 801e0c8:	af00      	add	r7, sp, #0
 801e0ca:	4603      	mov	r3, r0
 801e0cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801e0ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e0d2:	2b00      	cmp	r3, #0
 801e0d4:	db01      	blt.n	801e0da <tcp_kill_prio+0x16>
 801e0d6:	79fb      	ldrb	r3, [r7, #7]
 801e0d8:	e000      	b.n	801e0dc <tcp_kill_prio+0x18>
 801e0da:	237f      	movs	r3, #127	; 0x7f
 801e0dc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801e0de:	7afb      	ldrb	r3, [r7, #11]
 801e0e0:	2b00      	cmp	r3, #0
 801e0e2:	d034      	beq.n	801e14e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801e0e4:	7afb      	ldrb	r3, [r7, #11]
 801e0e6:	3b01      	subs	r3, #1
 801e0e8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801e0ea:	2300      	movs	r3, #0
 801e0ec:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801e0ee:	2300      	movs	r3, #0
 801e0f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e0f2:	4b19      	ldr	r3, [pc, #100]	; (801e158 <tcp_kill_prio+0x94>)
 801e0f4:	681b      	ldr	r3, [r3, #0]
 801e0f6:	617b      	str	r3, [r7, #20]
 801e0f8:	e01f      	b.n	801e13a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801e0fa:	697b      	ldr	r3, [r7, #20]
 801e0fc:	7d5b      	ldrb	r3, [r3, #21]
 801e0fe:	7afa      	ldrb	r2, [r7, #11]
 801e100:	429a      	cmp	r2, r3
 801e102:	d80c      	bhi.n	801e11e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801e104:	697b      	ldr	r3, [r7, #20]
 801e106:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801e108:	7afa      	ldrb	r2, [r7, #11]
 801e10a:	429a      	cmp	r2, r3
 801e10c:	d112      	bne.n	801e134 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801e10e:	4b13      	ldr	r3, [pc, #76]	; (801e15c <tcp_kill_prio+0x98>)
 801e110:	681a      	ldr	r2, [r3, #0]
 801e112:	697b      	ldr	r3, [r7, #20]
 801e114:	6a1b      	ldr	r3, [r3, #32]
 801e116:	1ad3      	subs	r3, r2, r3
 801e118:	68fa      	ldr	r2, [r7, #12]
 801e11a:	429a      	cmp	r2, r3
 801e11c:	d80a      	bhi.n	801e134 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801e11e:	4b0f      	ldr	r3, [pc, #60]	; (801e15c <tcp_kill_prio+0x98>)
 801e120:	681a      	ldr	r2, [r3, #0]
 801e122:	697b      	ldr	r3, [r7, #20]
 801e124:	6a1b      	ldr	r3, [r3, #32]
 801e126:	1ad3      	subs	r3, r2, r3
 801e128:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801e12a:	697b      	ldr	r3, [r7, #20]
 801e12c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801e12e:	697b      	ldr	r3, [r7, #20]
 801e130:	7d5b      	ldrb	r3, [r3, #21]
 801e132:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e134:	697b      	ldr	r3, [r7, #20]
 801e136:	68db      	ldr	r3, [r3, #12]
 801e138:	617b      	str	r3, [r7, #20]
 801e13a:	697b      	ldr	r3, [r7, #20]
 801e13c:	2b00      	cmp	r3, #0
 801e13e:	d1dc      	bne.n	801e0fa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801e140:	693b      	ldr	r3, [r7, #16]
 801e142:	2b00      	cmp	r3, #0
 801e144:	d004      	beq.n	801e150 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801e146:	6938      	ldr	r0, [r7, #16]
 801e148:	f7fe ff66 	bl	801d018 <tcp_abort>
 801e14c:	e000      	b.n	801e150 <tcp_kill_prio+0x8c>
    return;
 801e14e:	bf00      	nop
  }
}
 801e150:	3718      	adds	r7, #24
 801e152:	46bd      	mov	sp, r7
 801e154:	bd80      	pop	{r7, pc}
 801e156:	bf00      	nop
 801e158:	2001d51c 	.word	0x2001d51c
 801e15c:	2001d520 	.word	0x2001d520

0801e160 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801e160:	b580      	push	{r7, lr}
 801e162:	b086      	sub	sp, #24
 801e164:	af00      	add	r7, sp, #0
 801e166:	4603      	mov	r3, r0
 801e168:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801e16a:	79fb      	ldrb	r3, [r7, #7]
 801e16c:	2b08      	cmp	r3, #8
 801e16e:	d009      	beq.n	801e184 <tcp_kill_state+0x24>
 801e170:	79fb      	ldrb	r3, [r7, #7]
 801e172:	2b09      	cmp	r3, #9
 801e174:	d006      	beq.n	801e184 <tcp_kill_state+0x24>
 801e176:	4b1a      	ldr	r3, [pc, #104]	; (801e1e0 <tcp_kill_state+0x80>)
 801e178:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801e17c:	4919      	ldr	r1, [pc, #100]	; (801e1e4 <tcp_kill_state+0x84>)
 801e17e:	481a      	ldr	r0, [pc, #104]	; (801e1e8 <tcp_kill_state+0x88>)
 801e180:	f008 fd6a 	bl	8026c58 <iprintf>

  inactivity = 0;
 801e184:	2300      	movs	r3, #0
 801e186:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801e188:	2300      	movs	r3, #0
 801e18a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e18c:	4b17      	ldr	r3, [pc, #92]	; (801e1ec <tcp_kill_state+0x8c>)
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	617b      	str	r3, [r7, #20]
 801e192:	e017      	b.n	801e1c4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801e194:	697b      	ldr	r3, [r7, #20]
 801e196:	7d1b      	ldrb	r3, [r3, #20]
 801e198:	79fa      	ldrb	r2, [r7, #7]
 801e19a:	429a      	cmp	r2, r3
 801e19c:	d10f      	bne.n	801e1be <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801e19e:	4b14      	ldr	r3, [pc, #80]	; (801e1f0 <tcp_kill_state+0x90>)
 801e1a0:	681a      	ldr	r2, [r3, #0]
 801e1a2:	697b      	ldr	r3, [r7, #20]
 801e1a4:	6a1b      	ldr	r3, [r3, #32]
 801e1a6:	1ad3      	subs	r3, r2, r3
 801e1a8:	68fa      	ldr	r2, [r7, #12]
 801e1aa:	429a      	cmp	r2, r3
 801e1ac:	d807      	bhi.n	801e1be <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801e1ae:	4b10      	ldr	r3, [pc, #64]	; (801e1f0 <tcp_kill_state+0x90>)
 801e1b0:	681a      	ldr	r2, [r3, #0]
 801e1b2:	697b      	ldr	r3, [r7, #20]
 801e1b4:	6a1b      	ldr	r3, [r3, #32]
 801e1b6:	1ad3      	subs	r3, r2, r3
 801e1b8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801e1ba:	697b      	ldr	r3, [r7, #20]
 801e1bc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e1be:	697b      	ldr	r3, [r7, #20]
 801e1c0:	68db      	ldr	r3, [r3, #12]
 801e1c2:	617b      	str	r3, [r7, #20]
 801e1c4:	697b      	ldr	r3, [r7, #20]
 801e1c6:	2b00      	cmp	r3, #0
 801e1c8:	d1e4      	bne.n	801e194 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801e1ca:	693b      	ldr	r3, [r7, #16]
 801e1cc:	2b00      	cmp	r3, #0
 801e1ce:	d003      	beq.n	801e1d8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801e1d0:	2100      	movs	r1, #0
 801e1d2:	6938      	ldr	r0, [r7, #16]
 801e1d4:	f7fe fe62 	bl	801ce9c <tcp_abandon>
  }
}
 801e1d8:	bf00      	nop
 801e1da:	3718      	adds	r7, #24
 801e1dc:	46bd      	mov	sp, r7
 801e1de:	bd80      	pop	{r7, pc}
 801e1e0:	0802e18c 	.word	0x0802e18c
 801e1e4:	0802e718 	.word	0x0802e718
 801e1e8:	0802e1d0 	.word	0x0802e1d0
 801e1ec:	2001d51c 	.word	0x2001d51c
 801e1f0:	2001d520 	.word	0x2001d520

0801e1f4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801e1f4:	b580      	push	{r7, lr}
 801e1f6:	b084      	sub	sp, #16
 801e1f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801e1fa:	2300      	movs	r3, #0
 801e1fc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801e1fe:	2300      	movs	r3, #0
 801e200:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801e202:	4b12      	ldr	r3, [pc, #72]	; (801e24c <tcp_kill_timewait+0x58>)
 801e204:	681b      	ldr	r3, [r3, #0]
 801e206:	60fb      	str	r3, [r7, #12]
 801e208:	e012      	b.n	801e230 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801e20a:	4b11      	ldr	r3, [pc, #68]	; (801e250 <tcp_kill_timewait+0x5c>)
 801e20c:	681a      	ldr	r2, [r3, #0]
 801e20e:	68fb      	ldr	r3, [r7, #12]
 801e210:	6a1b      	ldr	r3, [r3, #32]
 801e212:	1ad3      	subs	r3, r2, r3
 801e214:	687a      	ldr	r2, [r7, #4]
 801e216:	429a      	cmp	r2, r3
 801e218:	d807      	bhi.n	801e22a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801e21a:	4b0d      	ldr	r3, [pc, #52]	; (801e250 <tcp_kill_timewait+0x5c>)
 801e21c:	681a      	ldr	r2, [r3, #0]
 801e21e:	68fb      	ldr	r3, [r7, #12]
 801e220:	6a1b      	ldr	r3, [r3, #32]
 801e222:	1ad3      	subs	r3, r2, r3
 801e224:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801e226:	68fb      	ldr	r3, [r7, #12]
 801e228:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801e22a:	68fb      	ldr	r3, [r7, #12]
 801e22c:	68db      	ldr	r3, [r3, #12]
 801e22e:	60fb      	str	r3, [r7, #12]
 801e230:	68fb      	ldr	r3, [r7, #12]
 801e232:	2b00      	cmp	r3, #0
 801e234:	d1e9      	bne.n	801e20a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801e236:	68bb      	ldr	r3, [r7, #8]
 801e238:	2b00      	cmp	r3, #0
 801e23a:	d002      	beq.n	801e242 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801e23c:	68b8      	ldr	r0, [r7, #8]
 801e23e:	f7fe feeb 	bl	801d018 <tcp_abort>
  }
}
 801e242:	bf00      	nop
 801e244:	3710      	adds	r7, #16
 801e246:	46bd      	mov	sp, r7
 801e248:	bd80      	pop	{r7, pc}
 801e24a:	bf00      	nop
 801e24c:	2001d52c 	.word	0x2001d52c
 801e250:	2001d520 	.word	0x2001d520

0801e254 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801e254:	b580      	push	{r7, lr}
 801e256:	b082      	sub	sp, #8
 801e258:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801e25a:	4b10      	ldr	r3, [pc, #64]	; (801e29c <tcp_handle_closepend+0x48>)
 801e25c:	681b      	ldr	r3, [r3, #0]
 801e25e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801e260:	e014      	b.n	801e28c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801e262:	687b      	ldr	r3, [r7, #4]
 801e264:	68db      	ldr	r3, [r3, #12]
 801e266:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801e268:	687b      	ldr	r3, [r7, #4]
 801e26a:	8b5b      	ldrh	r3, [r3, #26]
 801e26c:	f003 0308 	and.w	r3, r3, #8
 801e270:	2b00      	cmp	r3, #0
 801e272:	d009      	beq.n	801e288 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801e274:	687b      	ldr	r3, [r7, #4]
 801e276:	8b5b      	ldrh	r3, [r3, #26]
 801e278:	f023 0308 	bic.w	r3, r3, #8
 801e27c:	b29a      	uxth	r2, r3
 801e27e:	687b      	ldr	r3, [r7, #4]
 801e280:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801e282:	6878      	ldr	r0, [r7, #4]
 801e284:	f7fe fd74 	bl	801cd70 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801e288:	683b      	ldr	r3, [r7, #0]
 801e28a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801e28c:	687b      	ldr	r3, [r7, #4]
 801e28e:	2b00      	cmp	r3, #0
 801e290:	d1e7      	bne.n	801e262 <tcp_handle_closepend+0xe>
  }
}
 801e292:	bf00      	nop
 801e294:	bf00      	nop
 801e296:	3708      	adds	r7, #8
 801e298:	46bd      	mov	sp, r7
 801e29a:	bd80      	pop	{r7, pc}
 801e29c:	2001d51c 	.word	0x2001d51c

0801e2a0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801e2a0:	b580      	push	{r7, lr}
 801e2a2:	b084      	sub	sp, #16
 801e2a4:	af00      	add	r7, sp, #0
 801e2a6:	4603      	mov	r3, r0
 801e2a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e2aa:	2001      	movs	r0, #1
 801e2ac:	f7fd f9b6 	bl	801b61c <memp_malloc>
 801e2b0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801e2b2:	68fb      	ldr	r3, [r7, #12]
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d126      	bne.n	801e306 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801e2b8:	f7ff ffcc 	bl	801e254 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801e2bc:	f7ff ff9a 	bl	801e1f4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e2c0:	2001      	movs	r0, #1
 801e2c2:	f7fd f9ab 	bl	801b61c <memp_malloc>
 801e2c6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801e2c8:	68fb      	ldr	r3, [r7, #12]
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	d11b      	bne.n	801e306 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801e2ce:	2009      	movs	r0, #9
 801e2d0:	f7ff ff46 	bl	801e160 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e2d4:	2001      	movs	r0, #1
 801e2d6:	f7fd f9a1 	bl	801b61c <memp_malloc>
 801e2da:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801e2dc:	68fb      	ldr	r3, [r7, #12]
 801e2de:	2b00      	cmp	r3, #0
 801e2e0:	d111      	bne.n	801e306 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801e2e2:	2008      	movs	r0, #8
 801e2e4:	f7ff ff3c 	bl	801e160 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e2e8:	2001      	movs	r0, #1
 801e2ea:	f7fd f997 	bl	801b61c <memp_malloc>
 801e2ee:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801e2f0:	68fb      	ldr	r3, [r7, #12]
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	d107      	bne.n	801e306 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801e2f6:	79fb      	ldrb	r3, [r7, #7]
 801e2f8:	4618      	mov	r0, r3
 801e2fa:	f7ff fee3 	bl	801e0c4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e2fe:	2001      	movs	r0, #1
 801e300:	f7fd f98c 	bl	801b61c <memp_malloc>
 801e304:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801e306:	68fb      	ldr	r3, [r7, #12]
 801e308:	2b00      	cmp	r3, #0
 801e30a:	d03f      	beq.n	801e38c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801e30c:	229c      	movs	r2, #156	; 0x9c
 801e30e:	2100      	movs	r1, #0
 801e310:	68f8      	ldr	r0, [r7, #12]
 801e312:	f008 f971 	bl	80265f8 <memset>
    pcb->prio = prio;
 801e316:	68fb      	ldr	r3, [r7, #12]
 801e318:	79fa      	ldrb	r2, [r7, #7]
 801e31a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801e31c:	68fb      	ldr	r3, [r7, #12]
 801e31e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801e322:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801e326:	68fb      	ldr	r3, [r7, #12]
 801e328:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801e32c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801e32e:	68fb      	ldr	r3, [r7, #12]
 801e330:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801e332:	68fb      	ldr	r3, [r7, #12]
 801e334:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801e336:	68fb      	ldr	r3, [r7, #12]
 801e338:	22ff      	movs	r2, #255	; 0xff
 801e33a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801e33c:	68fb      	ldr	r3, [r7, #12]
 801e33e:	f44f 7206 	mov.w	r2, #536	; 0x218
 801e342:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801e344:	68fb      	ldr	r3, [r7, #12]
 801e346:	2206      	movs	r2, #6
 801e348:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801e34c:	68fb      	ldr	r3, [r7, #12]
 801e34e:	2206      	movs	r2, #6
 801e350:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801e352:	68fb      	ldr	r3, [r7, #12]
 801e354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e358:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801e35a:	68fb      	ldr	r3, [r7, #12]
 801e35c:	2201      	movs	r2, #1
 801e35e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801e362:	4b0d      	ldr	r3, [pc, #52]	; (801e398 <tcp_alloc+0xf8>)
 801e364:	681a      	ldr	r2, [r3, #0]
 801e366:	68fb      	ldr	r3, [r7, #12]
 801e368:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801e36a:	4b0c      	ldr	r3, [pc, #48]	; (801e39c <tcp_alloc+0xfc>)
 801e36c:	781a      	ldrb	r2, [r3, #0]
 801e36e:	68fb      	ldr	r3, [r7, #12]
 801e370:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801e372:	68fb      	ldr	r3, [r7, #12]
 801e374:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801e378:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801e37c:	68fb      	ldr	r3, [r7, #12]
 801e37e:	4a08      	ldr	r2, [pc, #32]	; (801e3a0 <tcp_alloc+0x100>)
 801e380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801e384:	68fb      	ldr	r3, [r7, #12]
 801e386:	4a07      	ldr	r2, [pc, #28]	; (801e3a4 <tcp_alloc+0x104>)
 801e388:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801e38c:	68fb      	ldr	r3, [r7, #12]
}
 801e38e:	4618      	mov	r0, r3
 801e390:	3710      	adds	r7, #16
 801e392:	46bd      	mov	sp, r7
 801e394:	bd80      	pop	{r7, pc}
 801e396:	bf00      	nop
 801e398:	2001d520 	.word	0x2001d520
 801e39c:	20005a26 	.word	0x20005a26
 801e3a0:	0801e059 	.word	0x0801e059
 801e3a4:	006ddd00 	.word	0x006ddd00

0801e3a8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801e3a8:	b580      	push	{r7, lr}
 801e3aa:	b084      	sub	sp, #16
 801e3ac:	af00      	add	r7, sp, #0
 801e3ae:	4603      	mov	r3, r0
 801e3b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801e3b2:	2040      	movs	r0, #64	; 0x40
 801e3b4:	f7ff ff74 	bl	801e2a0 <tcp_alloc>
 801e3b8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801e3ba:	68fb      	ldr	r3, [r7, #12]
}
 801e3bc:	4618      	mov	r0, r3
 801e3be:	3710      	adds	r7, #16
 801e3c0:	46bd      	mov	sp, r7
 801e3c2:	bd80      	pop	{r7, pc}

0801e3c4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801e3c4:	b480      	push	{r7}
 801e3c6:	b083      	sub	sp, #12
 801e3c8:	af00      	add	r7, sp, #0
 801e3ca:	6078      	str	r0, [r7, #4]
 801e3cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801e3ce:	687b      	ldr	r3, [r7, #4]
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	d002      	beq.n	801e3da <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	683a      	ldr	r2, [r7, #0]
 801e3d8:	611a      	str	r2, [r3, #16]
  }
}
 801e3da:	bf00      	nop
 801e3dc:	370c      	adds	r7, #12
 801e3de:	46bd      	mov	sp, r7
 801e3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3e4:	4770      	bx	lr
	...

0801e3e8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801e3e8:	b580      	push	{r7, lr}
 801e3ea:	b082      	sub	sp, #8
 801e3ec:	af00      	add	r7, sp, #0
 801e3ee:	6078      	str	r0, [r7, #4]
 801e3f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801e3f2:	687b      	ldr	r3, [r7, #4]
 801e3f4:	2b00      	cmp	r3, #0
 801e3f6:	d00e      	beq.n	801e416 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801e3f8:	687b      	ldr	r3, [r7, #4]
 801e3fa:	7d1b      	ldrb	r3, [r3, #20]
 801e3fc:	2b01      	cmp	r3, #1
 801e3fe:	d106      	bne.n	801e40e <tcp_recv+0x26>
 801e400:	4b07      	ldr	r3, [pc, #28]	; (801e420 <tcp_recv+0x38>)
 801e402:	f240 72df 	movw	r2, #2015	; 0x7df
 801e406:	4907      	ldr	r1, [pc, #28]	; (801e424 <tcp_recv+0x3c>)
 801e408:	4807      	ldr	r0, [pc, #28]	; (801e428 <tcp_recv+0x40>)
 801e40a:	f008 fc25 	bl	8026c58 <iprintf>
    pcb->recv = recv;
 801e40e:	687b      	ldr	r3, [r7, #4]
 801e410:	683a      	ldr	r2, [r7, #0]
 801e412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801e416:	bf00      	nop
 801e418:	3708      	adds	r7, #8
 801e41a:	46bd      	mov	sp, r7
 801e41c:	bd80      	pop	{r7, pc}
 801e41e:	bf00      	nop
 801e420:	0802e18c 	.word	0x0802e18c
 801e424:	0802e728 	.word	0x0802e728
 801e428:	0802e1d0 	.word	0x0802e1d0

0801e42c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801e42c:	b580      	push	{r7, lr}
 801e42e:	b082      	sub	sp, #8
 801e430:	af00      	add	r7, sp, #0
 801e432:	6078      	str	r0, [r7, #4]
 801e434:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	2b00      	cmp	r3, #0
 801e43a:	d00e      	beq.n	801e45a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	7d1b      	ldrb	r3, [r3, #20]
 801e440:	2b01      	cmp	r3, #1
 801e442:	d106      	bne.n	801e452 <tcp_sent+0x26>
 801e444:	4b07      	ldr	r3, [pc, #28]	; (801e464 <tcp_sent+0x38>)
 801e446:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801e44a:	4907      	ldr	r1, [pc, #28]	; (801e468 <tcp_sent+0x3c>)
 801e44c:	4807      	ldr	r0, [pc, #28]	; (801e46c <tcp_sent+0x40>)
 801e44e:	f008 fc03 	bl	8026c58 <iprintf>
    pcb->sent = sent;
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	683a      	ldr	r2, [r7, #0]
 801e456:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801e45a:	bf00      	nop
 801e45c:	3708      	adds	r7, #8
 801e45e:	46bd      	mov	sp, r7
 801e460:	bd80      	pop	{r7, pc}
 801e462:	bf00      	nop
 801e464:	0802e18c 	.word	0x0802e18c
 801e468:	0802e750 	.word	0x0802e750
 801e46c:	0802e1d0 	.word	0x0802e1d0

0801e470 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801e470:	b580      	push	{r7, lr}
 801e472:	b082      	sub	sp, #8
 801e474:	af00      	add	r7, sp, #0
 801e476:	6078      	str	r0, [r7, #4]
 801e478:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	d00e      	beq.n	801e49e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801e480:	687b      	ldr	r3, [r7, #4]
 801e482:	7d1b      	ldrb	r3, [r3, #20]
 801e484:	2b01      	cmp	r3, #1
 801e486:	d106      	bne.n	801e496 <tcp_err+0x26>
 801e488:	4b07      	ldr	r3, [pc, #28]	; (801e4a8 <tcp_err+0x38>)
 801e48a:	f640 020d 	movw	r2, #2061	; 0x80d
 801e48e:	4907      	ldr	r1, [pc, #28]	; (801e4ac <tcp_err+0x3c>)
 801e490:	4807      	ldr	r0, [pc, #28]	; (801e4b0 <tcp_err+0x40>)
 801e492:	f008 fbe1 	bl	8026c58 <iprintf>
    pcb->errf = err;
 801e496:	687b      	ldr	r3, [r7, #4]
 801e498:	683a      	ldr	r2, [r7, #0]
 801e49a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801e49e:	bf00      	nop
 801e4a0:	3708      	adds	r7, #8
 801e4a2:	46bd      	mov	sp, r7
 801e4a4:	bd80      	pop	{r7, pc}
 801e4a6:	bf00      	nop
 801e4a8:	0802e18c 	.word	0x0802e18c
 801e4ac:	0802e778 	.word	0x0802e778
 801e4b0:	0802e1d0 	.word	0x0802e1d0

0801e4b4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801e4b4:	b480      	push	{r7}
 801e4b6:	b085      	sub	sp, #20
 801e4b8:	af00      	add	r7, sp, #0
 801e4ba:	6078      	str	r0, [r7, #4]
 801e4bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	2b00      	cmp	r3, #0
 801e4c2:	d008      	beq.n	801e4d6 <tcp_accept+0x22>
 801e4c4:	687b      	ldr	r3, [r7, #4]
 801e4c6:	7d1b      	ldrb	r3, [r3, #20]
 801e4c8:	2b01      	cmp	r3, #1
 801e4ca:	d104      	bne.n	801e4d6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801e4d0:	68fb      	ldr	r3, [r7, #12]
 801e4d2:	683a      	ldr	r2, [r7, #0]
 801e4d4:	619a      	str	r2, [r3, #24]
  }
}
 801e4d6:	bf00      	nop
 801e4d8:	3714      	adds	r7, #20
 801e4da:	46bd      	mov	sp, r7
 801e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4e0:	4770      	bx	lr
	...

0801e4e4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801e4e4:	b580      	push	{r7, lr}
 801e4e6:	b084      	sub	sp, #16
 801e4e8:	af00      	add	r7, sp, #0
 801e4ea:	60f8      	str	r0, [r7, #12]
 801e4ec:	60b9      	str	r1, [r7, #8]
 801e4ee:	4613      	mov	r3, r2
 801e4f0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801e4f2:	68fb      	ldr	r3, [r7, #12]
 801e4f4:	2b00      	cmp	r3, #0
 801e4f6:	d107      	bne.n	801e508 <tcp_poll+0x24>
 801e4f8:	4b0e      	ldr	r3, [pc, #56]	; (801e534 <tcp_poll+0x50>)
 801e4fa:	f640 023d 	movw	r2, #2109	; 0x83d
 801e4fe:	490e      	ldr	r1, [pc, #56]	; (801e538 <tcp_poll+0x54>)
 801e500:	480e      	ldr	r0, [pc, #56]	; (801e53c <tcp_poll+0x58>)
 801e502:	f008 fba9 	bl	8026c58 <iprintf>
 801e506:	e011      	b.n	801e52c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801e508:	68fb      	ldr	r3, [r7, #12]
 801e50a:	7d1b      	ldrb	r3, [r3, #20]
 801e50c:	2b01      	cmp	r3, #1
 801e50e:	d106      	bne.n	801e51e <tcp_poll+0x3a>
 801e510:	4b08      	ldr	r3, [pc, #32]	; (801e534 <tcp_poll+0x50>)
 801e512:	f640 023e 	movw	r2, #2110	; 0x83e
 801e516:	490a      	ldr	r1, [pc, #40]	; (801e540 <tcp_poll+0x5c>)
 801e518:	4808      	ldr	r0, [pc, #32]	; (801e53c <tcp_poll+0x58>)
 801e51a:	f008 fb9d 	bl	8026c58 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801e51e:	68fb      	ldr	r3, [r7, #12]
 801e520:	68ba      	ldr	r2, [r7, #8]
 801e522:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801e526:	68fb      	ldr	r3, [r7, #12]
 801e528:	79fa      	ldrb	r2, [r7, #7]
 801e52a:	775a      	strb	r2, [r3, #29]
}
 801e52c:	3710      	adds	r7, #16
 801e52e:	46bd      	mov	sp, r7
 801e530:	bd80      	pop	{r7, pc}
 801e532:	bf00      	nop
 801e534:	0802e18c 	.word	0x0802e18c
 801e538:	0802e7a0 	.word	0x0802e7a0
 801e53c:	0802e1d0 	.word	0x0802e1d0
 801e540:	0802e7b8 	.word	0x0802e7b8

0801e544 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801e544:	b580      	push	{r7, lr}
 801e546:	b082      	sub	sp, #8
 801e548:	af00      	add	r7, sp, #0
 801e54a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801e54c:	687b      	ldr	r3, [r7, #4]
 801e54e:	2b00      	cmp	r3, #0
 801e550:	d107      	bne.n	801e562 <tcp_pcb_purge+0x1e>
 801e552:	4b21      	ldr	r3, [pc, #132]	; (801e5d8 <tcp_pcb_purge+0x94>)
 801e554:	f640 0251 	movw	r2, #2129	; 0x851
 801e558:	4920      	ldr	r1, [pc, #128]	; (801e5dc <tcp_pcb_purge+0x98>)
 801e55a:	4821      	ldr	r0, [pc, #132]	; (801e5e0 <tcp_pcb_purge+0x9c>)
 801e55c:	f008 fb7c 	bl	8026c58 <iprintf>
 801e560:	e037      	b.n	801e5d2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801e562:	687b      	ldr	r3, [r7, #4]
 801e564:	7d1b      	ldrb	r3, [r3, #20]
 801e566:	2b00      	cmp	r3, #0
 801e568:	d033      	beq.n	801e5d2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801e56a:	687b      	ldr	r3, [r7, #4]
 801e56c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801e56e:	2b0a      	cmp	r3, #10
 801e570:	d02f      	beq.n	801e5d2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801e576:	2b01      	cmp	r3, #1
 801e578:	d02b      	beq.n	801e5d2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801e57a:	687b      	ldr	r3, [r7, #4]
 801e57c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e57e:	2b00      	cmp	r3, #0
 801e580:	d007      	beq.n	801e592 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e586:	4618      	mov	r0, r3
 801e588:	f7fd ff3e 	bl	801c408 <pbuf_free>
      pcb->refused_data = NULL;
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	2200      	movs	r2, #0
 801e590:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801e592:	687b      	ldr	r3, [r7, #4]
 801e594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e596:	2b00      	cmp	r3, #0
 801e598:	d002      	beq.n	801e5a0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801e59a:	6878      	ldr	r0, [r7, #4]
 801e59c:	f000 f986 	bl	801e8ac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801e5a0:	687b      	ldr	r3, [r7, #4]
 801e5a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e5a6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e5ac:	4618      	mov	r0, r3
 801e5ae:	f7ff fcdb 	bl	801df68 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801e5b2:	687b      	ldr	r3, [r7, #4]
 801e5b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e5b6:	4618      	mov	r0, r3
 801e5b8:	f7ff fcd6 	bl	801df68 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801e5bc:	687b      	ldr	r3, [r7, #4]
 801e5be:	2200      	movs	r2, #0
 801e5c0:	66da      	str	r2, [r3, #108]	; 0x6c
 801e5c2:	687b      	ldr	r3, [r7, #4]
 801e5c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801e5c6:	687b      	ldr	r3, [r7, #4]
 801e5c8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801e5ca:	687b      	ldr	r3, [r7, #4]
 801e5cc:	2200      	movs	r2, #0
 801e5ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801e5d2:	3708      	adds	r7, #8
 801e5d4:	46bd      	mov	sp, r7
 801e5d6:	bd80      	pop	{r7, pc}
 801e5d8:	0802e18c 	.word	0x0802e18c
 801e5dc:	0802e7d8 	.word	0x0802e7d8
 801e5e0:	0802e1d0 	.word	0x0802e1d0

0801e5e4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801e5e4:	b580      	push	{r7, lr}
 801e5e6:	b084      	sub	sp, #16
 801e5e8:	af00      	add	r7, sp, #0
 801e5ea:	6078      	str	r0, [r7, #4]
 801e5ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801e5ee:	683b      	ldr	r3, [r7, #0]
 801e5f0:	2b00      	cmp	r3, #0
 801e5f2:	d106      	bne.n	801e602 <tcp_pcb_remove+0x1e>
 801e5f4:	4b3e      	ldr	r3, [pc, #248]	; (801e6f0 <tcp_pcb_remove+0x10c>)
 801e5f6:	f640 0283 	movw	r2, #2179	; 0x883
 801e5fa:	493e      	ldr	r1, [pc, #248]	; (801e6f4 <tcp_pcb_remove+0x110>)
 801e5fc:	483e      	ldr	r0, [pc, #248]	; (801e6f8 <tcp_pcb_remove+0x114>)
 801e5fe:	f008 fb2b 	bl	8026c58 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801e602:	687b      	ldr	r3, [r7, #4]
 801e604:	2b00      	cmp	r3, #0
 801e606:	d106      	bne.n	801e616 <tcp_pcb_remove+0x32>
 801e608:	4b39      	ldr	r3, [pc, #228]	; (801e6f0 <tcp_pcb_remove+0x10c>)
 801e60a:	f640 0284 	movw	r2, #2180	; 0x884
 801e60e:	493b      	ldr	r1, [pc, #236]	; (801e6fc <tcp_pcb_remove+0x118>)
 801e610:	4839      	ldr	r0, [pc, #228]	; (801e6f8 <tcp_pcb_remove+0x114>)
 801e612:	f008 fb21 	bl	8026c58 <iprintf>

  TCP_RMV(pcblist, pcb);
 801e616:	687b      	ldr	r3, [r7, #4]
 801e618:	681b      	ldr	r3, [r3, #0]
 801e61a:	683a      	ldr	r2, [r7, #0]
 801e61c:	429a      	cmp	r2, r3
 801e61e:	d105      	bne.n	801e62c <tcp_pcb_remove+0x48>
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	681b      	ldr	r3, [r3, #0]
 801e624:	68da      	ldr	r2, [r3, #12]
 801e626:	687b      	ldr	r3, [r7, #4]
 801e628:	601a      	str	r2, [r3, #0]
 801e62a:	e013      	b.n	801e654 <tcp_pcb_remove+0x70>
 801e62c:	687b      	ldr	r3, [r7, #4]
 801e62e:	681b      	ldr	r3, [r3, #0]
 801e630:	60fb      	str	r3, [r7, #12]
 801e632:	e00c      	b.n	801e64e <tcp_pcb_remove+0x6a>
 801e634:	68fb      	ldr	r3, [r7, #12]
 801e636:	68db      	ldr	r3, [r3, #12]
 801e638:	683a      	ldr	r2, [r7, #0]
 801e63a:	429a      	cmp	r2, r3
 801e63c:	d104      	bne.n	801e648 <tcp_pcb_remove+0x64>
 801e63e:	683b      	ldr	r3, [r7, #0]
 801e640:	68da      	ldr	r2, [r3, #12]
 801e642:	68fb      	ldr	r3, [r7, #12]
 801e644:	60da      	str	r2, [r3, #12]
 801e646:	e005      	b.n	801e654 <tcp_pcb_remove+0x70>
 801e648:	68fb      	ldr	r3, [r7, #12]
 801e64a:	68db      	ldr	r3, [r3, #12]
 801e64c:	60fb      	str	r3, [r7, #12]
 801e64e:	68fb      	ldr	r3, [r7, #12]
 801e650:	2b00      	cmp	r3, #0
 801e652:	d1ef      	bne.n	801e634 <tcp_pcb_remove+0x50>
 801e654:	683b      	ldr	r3, [r7, #0]
 801e656:	2200      	movs	r2, #0
 801e658:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801e65a:	6838      	ldr	r0, [r7, #0]
 801e65c:	f7ff ff72 	bl	801e544 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801e660:	683b      	ldr	r3, [r7, #0]
 801e662:	7d1b      	ldrb	r3, [r3, #20]
 801e664:	2b0a      	cmp	r3, #10
 801e666:	d013      	beq.n	801e690 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801e668:	683b      	ldr	r3, [r7, #0]
 801e66a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801e66c:	2b01      	cmp	r3, #1
 801e66e:	d00f      	beq.n	801e690 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801e670:	683b      	ldr	r3, [r7, #0]
 801e672:	8b5b      	ldrh	r3, [r3, #26]
 801e674:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801e678:	2b00      	cmp	r3, #0
 801e67a:	d009      	beq.n	801e690 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801e67c:	683b      	ldr	r3, [r7, #0]
 801e67e:	8b5b      	ldrh	r3, [r3, #26]
 801e680:	f043 0302 	orr.w	r3, r3, #2
 801e684:	b29a      	uxth	r2, r3
 801e686:	683b      	ldr	r3, [r7, #0]
 801e688:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801e68a:	6838      	ldr	r0, [r7, #0]
 801e68c:	f003 fbc2 	bl	8021e14 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801e690:	683b      	ldr	r3, [r7, #0]
 801e692:	7d1b      	ldrb	r3, [r3, #20]
 801e694:	2b01      	cmp	r3, #1
 801e696:	d020      	beq.n	801e6da <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801e698:	683b      	ldr	r3, [r7, #0]
 801e69a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e69c:	2b00      	cmp	r3, #0
 801e69e:	d006      	beq.n	801e6ae <tcp_pcb_remove+0xca>
 801e6a0:	4b13      	ldr	r3, [pc, #76]	; (801e6f0 <tcp_pcb_remove+0x10c>)
 801e6a2:	f640 0293 	movw	r2, #2195	; 0x893
 801e6a6:	4916      	ldr	r1, [pc, #88]	; (801e700 <tcp_pcb_remove+0x11c>)
 801e6a8:	4813      	ldr	r0, [pc, #76]	; (801e6f8 <tcp_pcb_remove+0x114>)
 801e6aa:	f008 fad5 	bl	8026c58 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801e6ae:	683b      	ldr	r3, [r7, #0]
 801e6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e6b2:	2b00      	cmp	r3, #0
 801e6b4:	d006      	beq.n	801e6c4 <tcp_pcb_remove+0xe0>
 801e6b6:	4b0e      	ldr	r3, [pc, #56]	; (801e6f0 <tcp_pcb_remove+0x10c>)
 801e6b8:	f640 0294 	movw	r2, #2196	; 0x894
 801e6bc:	4911      	ldr	r1, [pc, #68]	; (801e704 <tcp_pcb_remove+0x120>)
 801e6be:	480e      	ldr	r0, [pc, #56]	; (801e6f8 <tcp_pcb_remove+0x114>)
 801e6c0:	f008 faca 	bl	8026c58 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801e6c4:	683b      	ldr	r3, [r7, #0]
 801e6c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e6c8:	2b00      	cmp	r3, #0
 801e6ca:	d006      	beq.n	801e6da <tcp_pcb_remove+0xf6>
 801e6cc:	4b08      	ldr	r3, [pc, #32]	; (801e6f0 <tcp_pcb_remove+0x10c>)
 801e6ce:	f640 0296 	movw	r2, #2198	; 0x896
 801e6d2:	490d      	ldr	r1, [pc, #52]	; (801e708 <tcp_pcb_remove+0x124>)
 801e6d4:	4808      	ldr	r0, [pc, #32]	; (801e6f8 <tcp_pcb_remove+0x114>)
 801e6d6:	f008 fabf 	bl	8026c58 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801e6da:	683b      	ldr	r3, [r7, #0]
 801e6dc:	2200      	movs	r2, #0
 801e6de:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801e6e0:	683b      	ldr	r3, [r7, #0]
 801e6e2:	2200      	movs	r2, #0
 801e6e4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801e6e6:	bf00      	nop
 801e6e8:	3710      	adds	r7, #16
 801e6ea:	46bd      	mov	sp, r7
 801e6ec:	bd80      	pop	{r7, pc}
 801e6ee:	bf00      	nop
 801e6f0:	0802e18c 	.word	0x0802e18c
 801e6f4:	0802e7f4 	.word	0x0802e7f4
 801e6f8:	0802e1d0 	.word	0x0802e1d0
 801e6fc:	0802e810 	.word	0x0802e810
 801e700:	0802e830 	.word	0x0802e830
 801e704:	0802e848 	.word	0x0802e848
 801e708:	0802e864 	.word	0x0802e864

0801e70c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801e70c:	b580      	push	{r7, lr}
 801e70e:	b082      	sub	sp, #8
 801e710:	af00      	add	r7, sp, #0
 801e712:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801e714:	687b      	ldr	r3, [r7, #4]
 801e716:	2b00      	cmp	r3, #0
 801e718:	d106      	bne.n	801e728 <tcp_next_iss+0x1c>
 801e71a:	4b0a      	ldr	r3, [pc, #40]	; (801e744 <tcp_next_iss+0x38>)
 801e71c:	f640 02af 	movw	r2, #2223	; 0x8af
 801e720:	4909      	ldr	r1, [pc, #36]	; (801e748 <tcp_next_iss+0x3c>)
 801e722:	480a      	ldr	r0, [pc, #40]	; (801e74c <tcp_next_iss+0x40>)
 801e724:	f008 fa98 	bl	8026c58 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801e728:	4b09      	ldr	r3, [pc, #36]	; (801e750 <tcp_next_iss+0x44>)
 801e72a:	681a      	ldr	r2, [r3, #0]
 801e72c:	4b09      	ldr	r3, [pc, #36]	; (801e754 <tcp_next_iss+0x48>)
 801e72e:	681b      	ldr	r3, [r3, #0]
 801e730:	4413      	add	r3, r2
 801e732:	4a07      	ldr	r2, [pc, #28]	; (801e750 <tcp_next_iss+0x44>)
 801e734:	6013      	str	r3, [r2, #0]
  return iss;
 801e736:	4b06      	ldr	r3, [pc, #24]	; (801e750 <tcp_next_iss+0x44>)
 801e738:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801e73a:	4618      	mov	r0, r3
 801e73c:	3708      	adds	r7, #8
 801e73e:	46bd      	mov	sp, r7
 801e740:	bd80      	pop	{r7, pc}
 801e742:	bf00      	nop
 801e744:	0802e18c 	.word	0x0802e18c
 801e748:	0802e87c 	.word	0x0802e87c
 801e74c:	0802e1d0 	.word	0x0802e1d0
 801e750:	2000005c 	.word	0x2000005c
 801e754:	2001d520 	.word	0x2001d520

0801e758 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801e758:	b580      	push	{r7, lr}
 801e75a:	b086      	sub	sp, #24
 801e75c:	af00      	add	r7, sp, #0
 801e75e:	4603      	mov	r3, r0
 801e760:	60b9      	str	r1, [r7, #8]
 801e762:	607a      	str	r2, [r7, #4]
 801e764:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801e766:	687b      	ldr	r3, [r7, #4]
 801e768:	2b00      	cmp	r3, #0
 801e76a:	d106      	bne.n	801e77a <tcp_eff_send_mss_netif+0x22>
 801e76c:	4b14      	ldr	r3, [pc, #80]	; (801e7c0 <tcp_eff_send_mss_netif+0x68>)
 801e76e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801e772:	4914      	ldr	r1, [pc, #80]	; (801e7c4 <tcp_eff_send_mss_netif+0x6c>)
 801e774:	4814      	ldr	r0, [pc, #80]	; (801e7c8 <tcp_eff_send_mss_netif+0x70>)
 801e776:	f008 fa6f 	bl	8026c58 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801e77a:	68bb      	ldr	r3, [r7, #8]
 801e77c:	2b00      	cmp	r3, #0
 801e77e:	d101      	bne.n	801e784 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801e780:	89fb      	ldrh	r3, [r7, #14]
 801e782:	e019      	b.n	801e7b8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801e784:	68bb      	ldr	r3, [r7, #8]
 801e786:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801e788:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801e78a:	8afb      	ldrh	r3, [r7, #22]
 801e78c:	2b00      	cmp	r3, #0
 801e78e:	d012      	beq.n	801e7b6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801e790:	2328      	movs	r3, #40	; 0x28
 801e792:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801e794:	8afa      	ldrh	r2, [r7, #22]
 801e796:	8abb      	ldrh	r3, [r7, #20]
 801e798:	429a      	cmp	r2, r3
 801e79a:	d904      	bls.n	801e7a6 <tcp_eff_send_mss_netif+0x4e>
 801e79c:	8afa      	ldrh	r2, [r7, #22]
 801e79e:	8abb      	ldrh	r3, [r7, #20]
 801e7a0:	1ad3      	subs	r3, r2, r3
 801e7a2:	b29b      	uxth	r3, r3
 801e7a4:	e000      	b.n	801e7a8 <tcp_eff_send_mss_netif+0x50>
 801e7a6:	2300      	movs	r3, #0
 801e7a8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801e7aa:	8a7a      	ldrh	r2, [r7, #18]
 801e7ac:	89fb      	ldrh	r3, [r7, #14]
 801e7ae:	4293      	cmp	r3, r2
 801e7b0:	bf28      	it	cs
 801e7b2:	4613      	movcs	r3, r2
 801e7b4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801e7b6:	89fb      	ldrh	r3, [r7, #14]
}
 801e7b8:	4618      	mov	r0, r3
 801e7ba:	3718      	adds	r7, #24
 801e7bc:	46bd      	mov	sp, r7
 801e7be:	bd80      	pop	{r7, pc}
 801e7c0:	0802e18c 	.word	0x0802e18c
 801e7c4:	0802e898 	.word	0x0802e898
 801e7c8:	0802e1d0 	.word	0x0802e1d0

0801e7cc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801e7cc:	b580      	push	{r7, lr}
 801e7ce:	b084      	sub	sp, #16
 801e7d0:	af00      	add	r7, sp, #0
 801e7d2:	6078      	str	r0, [r7, #4]
 801e7d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801e7d6:	683b      	ldr	r3, [r7, #0]
 801e7d8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801e7da:	687b      	ldr	r3, [r7, #4]
 801e7dc:	2b00      	cmp	r3, #0
 801e7de:	d119      	bne.n	801e814 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801e7e0:	4b10      	ldr	r3, [pc, #64]	; (801e824 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801e7e2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801e7e6:	4910      	ldr	r1, [pc, #64]	; (801e828 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801e7e8:	4810      	ldr	r0, [pc, #64]	; (801e82c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801e7ea:	f008 fa35 	bl	8026c58 <iprintf>

  while (pcb != NULL) {
 801e7ee:	e011      	b.n	801e814 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801e7f0:	68fb      	ldr	r3, [r7, #12]
 801e7f2:	681a      	ldr	r2, [r3, #0]
 801e7f4:	687b      	ldr	r3, [r7, #4]
 801e7f6:	681b      	ldr	r3, [r3, #0]
 801e7f8:	429a      	cmp	r2, r3
 801e7fa:	d108      	bne.n	801e80e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801e7fc:	68fb      	ldr	r3, [r7, #12]
 801e7fe:	68db      	ldr	r3, [r3, #12]
 801e800:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801e802:	68f8      	ldr	r0, [r7, #12]
 801e804:	f7fe fc08 	bl	801d018 <tcp_abort>
      pcb = next;
 801e808:	68bb      	ldr	r3, [r7, #8]
 801e80a:	60fb      	str	r3, [r7, #12]
 801e80c:	e002      	b.n	801e814 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801e80e:	68fb      	ldr	r3, [r7, #12]
 801e810:	68db      	ldr	r3, [r3, #12]
 801e812:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801e814:	68fb      	ldr	r3, [r7, #12]
 801e816:	2b00      	cmp	r3, #0
 801e818:	d1ea      	bne.n	801e7f0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801e81a:	bf00      	nop
 801e81c:	bf00      	nop
 801e81e:	3710      	adds	r7, #16
 801e820:	46bd      	mov	sp, r7
 801e822:	bd80      	pop	{r7, pc}
 801e824:	0802e18c 	.word	0x0802e18c
 801e828:	0802e8c0 	.word	0x0802e8c0
 801e82c:	0802e1d0 	.word	0x0802e1d0

0801e830 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801e830:	b580      	push	{r7, lr}
 801e832:	b084      	sub	sp, #16
 801e834:	af00      	add	r7, sp, #0
 801e836:	6078      	str	r0, [r7, #4]
 801e838:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801e83a:	687b      	ldr	r3, [r7, #4]
 801e83c:	2b00      	cmp	r3, #0
 801e83e:	d02a      	beq.n	801e896 <tcp_netif_ip_addr_changed+0x66>
 801e840:	687b      	ldr	r3, [r7, #4]
 801e842:	681b      	ldr	r3, [r3, #0]
 801e844:	2b00      	cmp	r3, #0
 801e846:	d026      	beq.n	801e896 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801e848:	4b15      	ldr	r3, [pc, #84]	; (801e8a0 <tcp_netif_ip_addr_changed+0x70>)
 801e84a:	681b      	ldr	r3, [r3, #0]
 801e84c:	4619      	mov	r1, r3
 801e84e:	6878      	ldr	r0, [r7, #4]
 801e850:	f7ff ffbc 	bl	801e7cc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801e854:	4b13      	ldr	r3, [pc, #76]	; (801e8a4 <tcp_netif_ip_addr_changed+0x74>)
 801e856:	681b      	ldr	r3, [r3, #0]
 801e858:	4619      	mov	r1, r3
 801e85a:	6878      	ldr	r0, [r7, #4]
 801e85c:	f7ff ffb6 	bl	801e7cc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801e860:	683b      	ldr	r3, [r7, #0]
 801e862:	2b00      	cmp	r3, #0
 801e864:	d017      	beq.n	801e896 <tcp_netif_ip_addr_changed+0x66>
 801e866:	683b      	ldr	r3, [r7, #0]
 801e868:	681b      	ldr	r3, [r3, #0]
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d013      	beq.n	801e896 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801e86e:	4b0e      	ldr	r3, [pc, #56]	; (801e8a8 <tcp_netif_ip_addr_changed+0x78>)
 801e870:	681b      	ldr	r3, [r3, #0]
 801e872:	60fb      	str	r3, [r7, #12]
 801e874:	e00c      	b.n	801e890 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801e876:	68fb      	ldr	r3, [r7, #12]
 801e878:	681a      	ldr	r2, [r3, #0]
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	681b      	ldr	r3, [r3, #0]
 801e87e:	429a      	cmp	r2, r3
 801e880:	d103      	bne.n	801e88a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801e882:	683b      	ldr	r3, [r7, #0]
 801e884:	681a      	ldr	r2, [r3, #0]
 801e886:	68fb      	ldr	r3, [r7, #12]
 801e888:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801e88a:	68fb      	ldr	r3, [r7, #12]
 801e88c:	68db      	ldr	r3, [r3, #12]
 801e88e:	60fb      	str	r3, [r7, #12]
 801e890:	68fb      	ldr	r3, [r7, #12]
 801e892:	2b00      	cmp	r3, #0
 801e894:	d1ef      	bne.n	801e876 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801e896:	bf00      	nop
 801e898:	3710      	adds	r7, #16
 801e89a:	46bd      	mov	sp, r7
 801e89c:	bd80      	pop	{r7, pc}
 801e89e:	bf00      	nop
 801e8a0:	2001d51c 	.word	0x2001d51c
 801e8a4:	2001d528 	.word	0x2001d528
 801e8a8:	2001d524 	.word	0x2001d524

0801e8ac <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801e8ac:	b580      	push	{r7, lr}
 801e8ae:	b082      	sub	sp, #8
 801e8b0:	af00      	add	r7, sp, #0
 801e8b2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801e8b4:	687b      	ldr	r3, [r7, #4]
 801e8b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e8b8:	2b00      	cmp	r3, #0
 801e8ba:	d007      	beq.n	801e8cc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801e8bc:	687b      	ldr	r3, [r7, #4]
 801e8be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e8c0:	4618      	mov	r0, r3
 801e8c2:	f7ff fb51 	bl	801df68 <tcp_segs_free>
    pcb->ooseq = NULL;
 801e8c6:	687b      	ldr	r3, [r7, #4]
 801e8c8:	2200      	movs	r2, #0
 801e8ca:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801e8cc:	bf00      	nop
 801e8ce:	3708      	adds	r7, #8
 801e8d0:	46bd      	mov	sp, r7
 801e8d2:	bd80      	pop	{r7, pc}

0801e8d4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801e8d4:	b590      	push	{r4, r7, lr}
 801e8d6:	b08d      	sub	sp, #52	; 0x34
 801e8d8:	af04      	add	r7, sp, #16
 801e8da:	6078      	str	r0, [r7, #4]
 801e8dc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801e8de:	687b      	ldr	r3, [r7, #4]
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	d105      	bne.n	801e8f0 <tcp_input+0x1c>
 801e8e4:	4b9b      	ldr	r3, [pc, #620]	; (801eb54 <tcp_input+0x280>)
 801e8e6:	2283      	movs	r2, #131	; 0x83
 801e8e8:	499b      	ldr	r1, [pc, #620]	; (801eb58 <tcp_input+0x284>)
 801e8ea:	489c      	ldr	r0, [pc, #624]	; (801eb5c <tcp_input+0x288>)
 801e8ec:	f008 f9b4 	bl	8026c58 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	685b      	ldr	r3, [r3, #4]
 801e8f4:	4a9a      	ldr	r2, [pc, #616]	; (801eb60 <tcp_input+0x28c>)
 801e8f6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801e8f8:	687b      	ldr	r3, [r7, #4]
 801e8fa:	895b      	ldrh	r3, [r3, #10]
 801e8fc:	2b13      	cmp	r3, #19
 801e8fe:	f240 83c4 	bls.w	801f08a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801e902:	4b98      	ldr	r3, [pc, #608]	; (801eb64 <tcp_input+0x290>)
 801e904:	695b      	ldr	r3, [r3, #20]
 801e906:	4a97      	ldr	r2, [pc, #604]	; (801eb64 <tcp_input+0x290>)
 801e908:	6812      	ldr	r2, [r2, #0]
 801e90a:	4611      	mov	r1, r2
 801e90c:	4618      	mov	r0, r3
 801e90e:	f006 fb8f 	bl	8025030 <ip4_addr_isbroadcast_u32>
 801e912:	4603      	mov	r3, r0
 801e914:	2b00      	cmp	r3, #0
 801e916:	f040 83ba 	bne.w	801f08e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801e91a:	4b92      	ldr	r3, [pc, #584]	; (801eb64 <tcp_input+0x290>)
 801e91c:	695b      	ldr	r3, [r3, #20]
 801e91e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801e922:	2be0      	cmp	r3, #224	; 0xe0
 801e924:	f000 83b3 	beq.w	801f08e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801e928:	4b8d      	ldr	r3, [pc, #564]	; (801eb60 <tcp_input+0x28c>)
 801e92a:	681b      	ldr	r3, [r3, #0]
 801e92c:	899b      	ldrh	r3, [r3, #12]
 801e92e:	b29b      	uxth	r3, r3
 801e930:	4618      	mov	r0, r3
 801e932:	f7fc f92b 	bl	801ab8c <lwip_htons>
 801e936:	4603      	mov	r3, r0
 801e938:	0b1b      	lsrs	r3, r3, #12
 801e93a:	b29b      	uxth	r3, r3
 801e93c:	b2db      	uxtb	r3, r3
 801e93e:	009b      	lsls	r3, r3, #2
 801e940:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801e942:	7cbb      	ldrb	r3, [r7, #18]
 801e944:	2b13      	cmp	r3, #19
 801e946:	f240 83a4 	bls.w	801f092 <tcp_input+0x7be>
 801e94a:	7cbb      	ldrb	r3, [r7, #18]
 801e94c:	b29a      	uxth	r2, r3
 801e94e:	687b      	ldr	r3, [r7, #4]
 801e950:	891b      	ldrh	r3, [r3, #8]
 801e952:	429a      	cmp	r2, r3
 801e954:	f200 839d 	bhi.w	801f092 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801e958:	7cbb      	ldrb	r3, [r7, #18]
 801e95a:	b29b      	uxth	r3, r3
 801e95c:	3b14      	subs	r3, #20
 801e95e:	b29a      	uxth	r2, r3
 801e960:	4b81      	ldr	r3, [pc, #516]	; (801eb68 <tcp_input+0x294>)
 801e962:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801e964:	4b81      	ldr	r3, [pc, #516]	; (801eb6c <tcp_input+0x298>)
 801e966:	2200      	movs	r2, #0
 801e968:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801e96a:	687b      	ldr	r3, [r7, #4]
 801e96c:	895a      	ldrh	r2, [r3, #10]
 801e96e:	7cbb      	ldrb	r3, [r7, #18]
 801e970:	b29b      	uxth	r3, r3
 801e972:	429a      	cmp	r2, r3
 801e974:	d309      	bcc.n	801e98a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801e976:	4b7c      	ldr	r3, [pc, #496]	; (801eb68 <tcp_input+0x294>)
 801e978:	881a      	ldrh	r2, [r3, #0]
 801e97a:	4b7d      	ldr	r3, [pc, #500]	; (801eb70 <tcp_input+0x29c>)
 801e97c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801e97e:	7cbb      	ldrb	r3, [r7, #18]
 801e980:	4619      	mov	r1, r3
 801e982:	6878      	ldr	r0, [r7, #4]
 801e984:	f7fd fcba 	bl	801c2fc <pbuf_remove_header>
 801e988:	e04e      	b.n	801ea28 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801e98a:	687b      	ldr	r3, [r7, #4]
 801e98c:	681b      	ldr	r3, [r3, #0]
 801e98e:	2b00      	cmp	r3, #0
 801e990:	d105      	bne.n	801e99e <tcp_input+0xca>
 801e992:	4b70      	ldr	r3, [pc, #448]	; (801eb54 <tcp_input+0x280>)
 801e994:	22c2      	movs	r2, #194	; 0xc2
 801e996:	4977      	ldr	r1, [pc, #476]	; (801eb74 <tcp_input+0x2a0>)
 801e998:	4870      	ldr	r0, [pc, #448]	; (801eb5c <tcp_input+0x288>)
 801e99a:	f008 f95d 	bl	8026c58 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801e99e:	2114      	movs	r1, #20
 801e9a0:	6878      	ldr	r0, [r7, #4]
 801e9a2:	f7fd fcab 	bl	801c2fc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801e9a6:	687b      	ldr	r3, [r7, #4]
 801e9a8:	895a      	ldrh	r2, [r3, #10]
 801e9aa:	4b71      	ldr	r3, [pc, #452]	; (801eb70 <tcp_input+0x29c>)
 801e9ac:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801e9ae:	4b6e      	ldr	r3, [pc, #440]	; (801eb68 <tcp_input+0x294>)
 801e9b0:	881a      	ldrh	r2, [r3, #0]
 801e9b2:	4b6f      	ldr	r3, [pc, #444]	; (801eb70 <tcp_input+0x29c>)
 801e9b4:	881b      	ldrh	r3, [r3, #0]
 801e9b6:	1ad3      	subs	r3, r2, r3
 801e9b8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801e9ba:	4b6d      	ldr	r3, [pc, #436]	; (801eb70 <tcp_input+0x29c>)
 801e9bc:	881b      	ldrh	r3, [r3, #0]
 801e9be:	4619      	mov	r1, r3
 801e9c0:	6878      	ldr	r0, [r7, #4]
 801e9c2:	f7fd fc9b 	bl	801c2fc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801e9c6:	687b      	ldr	r3, [r7, #4]
 801e9c8:	681b      	ldr	r3, [r3, #0]
 801e9ca:	895b      	ldrh	r3, [r3, #10]
 801e9cc:	8a3a      	ldrh	r2, [r7, #16]
 801e9ce:	429a      	cmp	r2, r3
 801e9d0:	f200 8361 	bhi.w	801f096 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801e9d4:	687b      	ldr	r3, [r7, #4]
 801e9d6:	681b      	ldr	r3, [r3, #0]
 801e9d8:	685b      	ldr	r3, [r3, #4]
 801e9da:	4a64      	ldr	r2, [pc, #400]	; (801eb6c <tcp_input+0x298>)
 801e9dc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801e9de:	687b      	ldr	r3, [r7, #4]
 801e9e0:	681b      	ldr	r3, [r3, #0]
 801e9e2:	8a3a      	ldrh	r2, [r7, #16]
 801e9e4:	4611      	mov	r1, r2
 801e9e6:	4618      	mov	r0, r3
 801e9e8:	f7fd fc88 	bl	801c2fc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	891a      	ldrh	r2, [r3, #8]
 801e9f0:	8a3b      	ldrh	r3, [r7, #16]
 801e9f2:	1ad3      	subs	r3, r2, r3
 801e9f4:	b29a      	uxth	r2, r3
 801e9f6:	687b      	ldr	r3, [r7, #4]
 801e9f8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801e9fa:	687b      	ldr	r3, [r7, #4]
 801e9fc:	895b      	ldrh	r3, [r3, #10]
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	d005      	beq.n	801ea0e <tcp_input+0x13a>
 801ea02:	4b54      	ldr	r3, [pc, #336]	; (801eb54 <tcp_input+0x280>)
 801ea04:	22df      	movs	r2, #223	; 0xdf
 801ea06:	495c      	ldr	r1, [pc, #368]	; (801eb78 <tcp_input+0x2a4>)
 801ea08:	4854      	ldr	r0, [pc, #336]	; (801eb5c <tcp_input+0x288>)
 801ea0a:	f008 f925 	bl	8026c58 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801ea0e:	687b      	ldr	r3, [r7, #4]
 801ea10:	891a      	ldrh	r2, [r3, #8]
 801ea12:	687b      	ldr	r3, [r7, #4]
 801ea14:	681b      	ldr	r3, [r3, #0]
 801ea16:	891b      	ldrh	r3, [r3, #8]
 801ea18:	429a      	cmp	r2, r3
 801ea1a:	d005      	beq.n	801ea28 <tcp_input+0x154>
 801ea1c:	4b4d      	ldr	r3, [pc, #308]	; (801eb54 <tcp_input+0x280>)
 801ea1e:	22e0      	movs	r2, #224	; 0xe0
 801ea20:	4956      	ldr	r1, [pc, #344]	; (801eb7c <tcp_input+0x2a8>)
 801ea22:	484e      	ldr	r0, [pc, #312]	; (801eb5c <tcp_input+0x288>)
 801ea24:	f008 f918 	bl	8026c58 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801ea28:	4b4d      	ldr	r3, [pc, #308]	; (801eb60 <tcp_input+0x28c>)
 801ea2a:	681b      	ldr	r3, [r3, #0]
 801ea2c:	881b      	ldrh	r3, [r3, #0]
 801ea2e:	b29b      	uxth	r3, r3
 801ea30:	4a4b      	ldr	r2, [pc, #300]	; (801eb60 <tcp_input+0x28c>)
 801ea32:	6814      	ldr	r4, [r2, #0]
 801ea34:	4618      	mov	r0, r3
 801ea36:	f7fc f8a9 	bl	801ab8c <lwip_htons>
 801ea3a:	4603      	mov	r3, r0
 801ea3c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801ea3e:	4b48      	ldr	r3, [pc, #288]	; (801eb60 <tcp_input+0x28c>)
 801ea40:	681b      	ldr	r3, [r3, #0]
 801ea42:	885b      	ldrh	r3, [r3, #2]
 801ea44:	b29b      	uxth	r3, r3
 801ea46:	4a46      	ldr	r2, [pc, #280]	; (801eb60 <tcp_input+0x28c>)
 801ea48:	6814      	ldr	r4, [r2, #0]
 801ea4a:	4618      	mov	r0, r3
 801ea4c:	f7fc f89e 	bl	801ab8c <lwip_htons>
 801ea50:	4603      	mov	r3, r0
 801ea52:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801ea54:	4b42      	ldr	r3, [pc, #264]	; (801eb60 <tcp_input+0x28c>)
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	685b      	ldr	r3, [r3, #4]
 801ea5a:	4a41      	ldr	r2, [pc, #260]	; (801eb60 <tcp_input+0x28c>)
 801ea5c:	6814      	ldr	r4, [r2, #0]
 801ea5e:	4618      	mov	r0, r3
 801ea60:	f7fc f8a9 	bl	801abb6 <lwip_htonl>
 801ea64:	4603      	mov	r3, r0
 801ea66:	6063      	str	r3, [r4, #4]
 801ea68:	6863      	ldr	r3, [r4, #4]
 801ea6a:	4a45      	ldr	r2, [pc, #276]	; (801eb80 <tcp_input+0x2ac>)
 801ea6c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801ea6e:	4b3c      	ldr	r3, [pc, #240]	; (801eb60 <tcp_input+0x28c>)
 801ea70:	681b      	ldr	r3, [r3, #0]
 801ea72:	689b      	ldr	r3, [r3, #8]
 801ea74:	4a3a      	ldr	r2, [pc, #232]	; (801eb60 <tcp_input+0x28c>)
 801ea76:	6814      	ldr	r4, [r2, #0]
 801ea78:	4618      	mov	r0, r3
 801ea7a:	f7fc f89c 	bl	801abb6 <lwip_htonl>
 801ea7e:	4603      	mov	r3, r0
 801ea80:	60a3      	str	r3, [r4, #8]
 801ea82:	68a3      	ldr	r3, [r4, #8]
 801ea84:	4a3f      	ldr	r2, [pc, #252]	; (801eb84 <tcp_input+0x2b0>)
 801ea86:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ea88:	4b35      	ldr	r3, [pc, #212]	; (801eb60 <tcp_input+0x28c>)
 801ea8a:	681b      	ldr	r3, [r3, #0]
 801ea8c:	89db      	ldrh	r3, [r3, #14]
 801ea8e:	b29b      	uxth	r3, r3
 801ea90:	4a33      	ldr	r2, [pc, #204]	; (801eb60 <tcp_input+0x28c>)
 801ea92:	6814      	ldr	r4, [r2, #0]
 801ea94:	4618      	mov	r0, r3
 801ea96:	f7fc f879 	bl	801ab8c <lwip_htons>
 801ea9a:	4603      	mov	r3, r0
 801ea9c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801ea9e:	4b30      	ldr	r3, [pc, #192]	; (801eb60 <tcp_input+0x28c>)
 801eaa0:	681b      	ldr	r3, [r3, #0]
 801eaa2:	899b      	ldrh	r3, [r3, #12]
 801eaa4:	b29b      	uxth	r3, r3
 801eaa6:	4618      	mov	r0, r3
 801eaa8:	f7fc f870 	bl	801ab8c <lwip_htons>
 801eaac:	4603      	mov	r3, r0
 801eaae:	b2db      	uxtb	r3, r3
 801eab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801eab4:	b2da      	uxtb	r2, r3
 801eab6:	4b34      	ldr	r3, [pc, #208]	; (801eb88 <tcp_input+0x2b4>)
 801eab8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801eaba:	687b      	ldr	r3, [r7, #4]
 801eabc:	891a      	ldrh	r2, [r3, #8]
 801eabe:	4b33      	ldr	r3, [pc, #204]	; (801eb8c <tcp_input+0x2b8>)
 801eac0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801eac2:	4b31      	ldr	r3, [pc, #196]	; (801eb88 <tcp_input+0x2b4>)
 801eac4:	781b      	ldrb	r3, [r3, #0]
 801eac6:	f003 0303 	and.w	r3, r3, #3
 801eaca:	2b00      	cmp	r3, #0
 801eacc:	d00c      	beq.n	801eae8 <tcp_input+0x214>
    tcplen++;
 801eace:	4b2f      	ldr	r3, [pc, #188]	; (801eb8c <tcp_input+0x2b8>)
 801ead0:	881b      	ldrh	r3, [r3, #0]
 801ead2:	3301      	adds	r3, #1
 801ead4:	b29a      	uxth	r2, r3
 801ead6:	4b2d      	ldr	r3, [pc, #180]	; (801eb8c <tcp_input+0x2b8>)
 801ead8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801eada:	687b      	ldr	r3, [r7, #4]
 801eadc:	891a      	ldrh	r2, [r3, #8]
 801eade:	4b2b      	ldr	r3, [pc, #172]	; (801eb8c <tcp_input+0x2b8>)
 801eae0:	881b      	ldrh	r3, [r3, #0]
 801eae2:	429a      	cmp	r2, r3
 801eae4:	f200 82d9 	bhi.w	801f09a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801eae8:	2300      	movs	r3, #0
 801eaea:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801eaec:	4b28      	ldr	r3, [pc, #160]	; (801eb90 <tcp_input+0x2bc>)
 801eaee:	681b      	ldr	r3, [r3, #0]
 801eaf0:	61fb      	str	r3, [r7, #28]
 801eaf2:	e09d      	b.n	801ec30 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801eaf4:	69fb      	ldr	r3, [r7, #28]
 801eaf6:	7d1b      	ldrb	r3, [r3, #20]
 801eaf8:	2b00      	cmp	r3, #0
 801eafa:	d105      	bne.n	801eb08 <tcp_input+0x234>
 801eafc:	4b15      	ldr	r3, [pc, #84]	; (801eb54 <tcp_input+0x280>)
 801eafe:	22fb      	movs	r2, #251	; 0xfb
 801eb00:	4924      	ldr	r1, [pc, #144]	; (801eb94 <tcp_input+0x2c0>)
 801eb02:	4816      	ldr	r0, [pc, #88]	; (801eb5c <tcp_input+0x288>)
 801eb04:	f008 f8a8 	bl	8026c58 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801eb08:	69fb      	ldr	r3, [r7, #28]
 801eb0a:	7d1b      	ldrb	r3, [r3, #20]
 801eb0c:	2b0a      	cmp	r3, #10
 801eb0e:	d105      	bne.n	801eb1c <tcp_input+0x248>
 801eb10:	4b10      	ldr	r3, [pc, #64]	; (801eb54 <tcp_input+0x280>)
 801eb12:	22fc      	movs	r2, #252	; 0xfc
 801eb14:	4920      	ldr	r1, [pc, #128]	; (801eb98 <tcp_input+0x2c4>)
 801eb16:	4811      	ldr	r0, [pc, #68]	; (801eb5c <tcp_input+0x288>)
 801eb18:	f008 f89e 	bl	8026c58 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801eb1c:	69fb      	ldr	r3, [r7, #28]
 801eb1e:	7d1b      	ldrb	r3, [r3, #20]
 801eb20:	2b01      	cmp	r3, #1
 801eb22:	d105      	bne.n	801eb30 <tcp_input+0x25c>
 801eb24:	4b0b      	ldr	r3, [pc, #44]	; (801eb54 <tcp_input+0x280>)
 801eb26:	22fd      	movs	r2, #253	; 0xfd
 801eb28:	491c      	ldr	r1, [pc, #112]	; (801eb9c <tcp_input+0x2c8>)
 801eb2a:	480c      	ldr	r0, [pc, #48]	; (801eb5c <tcp_input+0x288>)
 801eb2c:	f008 f894 	bl	8026c58 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801eb30:	69fb      	ldr	r3, [r7, #28]
 801eb32:	7a1b      	ldrb	r3, [r3, #8]
 801eb34:	2b00      	cmp	r3, #0
 801eb36:	d033      	beq.n	801eba0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801eb38:	69fb      	ldr	r3, [r7, #28]
 801eb3a:	7a1a      	ldrb	r2, [r3, #8]
 801eb3c:	4b09      	ldr	r3, [pc, #36]	; (801eb64 <tcp_input+0x290>)
 801eb3e:	685b      	ldr	r3, [r3, #4]
 801eb40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801eb44:	3301      	adds	r3, #1
 801eb46:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801eb48:	429a      	cmp	r2, r3
 801eb4a:	d029      	beq.n	801eba0 <tcp_input+0x2cc>
      prev = pcb;
 801eb4c:	69fb      	ldr	r3, [r7, #28]
 801eb4e:	61bb      	str	r3, [r7, #24]
      continue;
 801eb50:	e06b      	b.n	801ec2a <tcp_input+0x356>
 801eb52:	bf00      	nop
 801eb54:	0802e8f4 	.word	0x0802e8f4
 801eb58:	0802e928 	.word	0x0802e928
 801eb5c:	0802e940 	.word	0x0802e940
 801eb60:	20005a38 	.word	0x20005a38
 801eb64:	20012bd8 	.word	0x20012bd8
 801eb68:	20005a3c 	.word	0x20005a3c
 801eb6c:	20005a40 	.word	0x20005a40
 801eb70:	20005a3e 	.word	0x20005a3e
 801eb74:	0802e968 	.word	0x0802e968
 801eb78:	0802e978 	.word	0x0802e978
 801eb7c:	0802e984 	.word	0x0802e984
 801eb80:	20005a48 	.word	0x20005a48
 801eb84:	20005a4c 	.word	0x20005a4c
 801eb88:	20005a54 	.word	0x20005a54
 801eb8c:	20005a52 	.word	0x20005a52
 801eb90:	2001d51c 	.word	0x2001d51c
 801eb94:	0802e9a4 	.word	0x0802e9a4
 801eb98:	0802e9cc 	.word	0x0802e9cc
 801eb9c:	0802e9f8 	.word	0x0802e9f8
    }

    if (pcb->remote_port == tcphdr->src &&
 801eba0:	69fb      	ldr	r3, [r7, #28]
 801eba2:	8b1a      	ldrh	r2, [r3, #24]
 801eba4:	4b94      	ldr	r3, [pc, #592]	; (801edf8 <tcp_input+0x524>)
 801eba6:	681b      	ldr	r3, [r3, #0]
 801eba8:	881b      	ldrh	r3, [r3, #0]
 801ebaa:	b29b      	uxth	r3, r3
 801ebac:	429a      	cmp	r2, r3
 801ebae:	d13a      	bne.n	801ec26 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801ebb0:	69fb      	ldr	r3, [r7, #28]
 801ebb2:	8ada      	ldrh	r2, [r3, #22]
 801ebb4:	4b90      	ldr	r3, [pc, #576]	; (801edf8 <tcp_input+0x524>)
 801ebb6:	681b      	ldr	r3, [r3, #0]
 801ebb8:	885b      	ldrh	r3, [r3, #2]
 801ebba:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801ebbc:	429a      	cmp	r2, r3
 801ebbe:	d132      	bne.n	801ec26 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ebc0:	69fb      	ldr	r3, [r7, #28]
 801ebc2:	685a      	ldr	r2, [r3, #4]
 801ebc4:	4b8d      	ldr	r3, [pc, #564]	; (801edfc <tcp_input+0x528>)
 801ebc6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801ebc8:	429a      	cmp	r2, r3
 801ebca:	d12c      	bne.n	801ec26 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ebcc:	69fb      	ldr	r3, [r7, #28]
 801ebce:	681a      	ldr	r2, [r3, #0]
 801ebd0:	4b8a      	ldr	r3, [pc, #552]	; (801edfc <tcp_input+0x528>)
 801ebd2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ebd4:	429a      	cmp	r2, r3
 801ebd6:	d126      	bne.n	801ec26 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801ebd8:	69fb      	ldr	r3, [r7, #28]
 801ebda:	68db      	ldr	r3, [r3, #12]
 801ebdc:	69fa      	ldr	r2, [r7, #28]
 801ebde:	429a      	cmp	r2, r3
 801ebe0:	d106      	bne.n	801ebf0 <tcp_input+0x31c>
 801ebe2:	4b87      	ldr	r3, [pc, #540]	; (801ee00 <tcp_input+0x52c>)
 801ebe4:	f240 120d 	movw	r2, #269	; 0x10d
 801ebe8:	4986      	ldr	r1, [pc, #536]	; (801ee04 <tcp_input+0x530>)
 801ebea:	4887      	ldr	r0, [pc, #540]	; (801ee08 <tcp_input+0x534>)
 801ebec:	f008 f834 	bl	8026c58 <iprintf>
      if (prev != NULL) {
 801ebf0:	69bb      	ldr	r3, [r7, #24]
 801ebf2:	2b00      	cmp	r3, #0
 801ebf4:	d00a      	beq.n	801ec0c <tcp_input+0x338>
        prev->next = pcb->next;
 801ebf6:	69fb      	ldr	r3, [r7, #28]
 801ebf8:	68da      	ldr	r2, [r3, #12]
 801ebfa:	69bb      	ldr	r3, [r7, #24]
 801ebfc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801ebfe:	4b83      	ldr	r3, [pc, #524]	; (801ee0c <tcp_input+0x538>)
 801ec00:	681a      	ldr	r2, [r3, #0]
 801ec02:	69fb      	ldr	r3, [r7, #28]
 801ec04:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801ec06:	4a81      	ldr	r2, [pc, #516]	; (801ee0c <tcp_input+0x538>)
 801ec08:	69fb      	ldr	r3, [r7, #28]
 801ec0a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801ec0c:	69fb      	ldr	r3, [r7, #28]
 801ec0e:	68db      	ldr	r3, [r3, #12]
 801ec10:	69fa      	ldr	r2, [r7, #28]
 801ec12:	429a      	cmp	r2, r3
 801ec14:	d111      	bne.n	801ec3a <tcp_input+0x366>
 801ec16:	4b7a      	ldr	r3, [pc, #488]	; (801ee00 <tcp_input+0x52c>)
 801ec18:	f240 1215 	movw	r2, #277	; 0x115
 801ec1c:	497c      	ldr	r1, [pc, #496]	; (801ee10 <tcp_input+0x53c>)
 801ec1e:	487a      	ldr	r0, [pc, #488]	; (801ee08 <tcp_input+0x534>)
 801ec20:	f008 f81a 	bl	8026c58 <iprintf>
      break;
 801ec24:	e009      	b.n	801ec3a <tcp_input+0x366>
    }
    prev = pcb;
 801ec26:	69fb      	ldr	r3, [r7, #28]
 801ec28:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ec2a:	69fb      	ldr	r3, [r7, #28]
 801ec2c:	68db      	ldr	r3, [r3, #12]
 801ec2e:	61fb      	str	r3, [r7, #28]
 801ec30:	69fb      	ldr	r3, [r7, #28]
 801ec32:	2b00      	cmp	r3, #0
 801ec34:	f47f af5e 	bne.w	801eaf4 <tcp_input+0x220>
 801ec38:	e000      	b.n	801ec3c <tcp_input+0x368>
      break;
 801ec3a:	bf00      	nop
  }

  if (pcb == NULL) {
 801ec3c:	69fb      	ldr	r3, [r7, #28]
 801ec3e:	2b00      	cmp	r3, #0
 801ec40:	f040 8095 	bne.w	801ed6e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ec44:	4b73      	ldr	r3, [pc, #460]	; (801ee14 <tcp_input+0x540>)
 801ec46:	681b      	ldr	r3, [r3, #0]
 801ec48:	61fb      	str	r3, [r7, #28]
 801ec4a:	e03f      	b.n	801eccc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801ec4c:	69fb      	ldr	r3, [r7, #28]
 801ec4e:	7d1b      	ldrb	r3, [r3, #20]
 801ec50:	2b0a      	cmp	r3, #10
 801ec52:	d006      	beq.n	801ec62 <tcp_input+0x38e>
 801ec54:	4b6a      	ldr	r3, [pc, #424]	; (801ee00 <tcp_input+0x52c>)
 801ec56:	f240 121f 	movw	r2, #287	; 0x11f
 801ec5a:	496f      	ldr	r1, [pc, #444]	; (801ee18 <tcp_input+0x544>)
 801ec5c:	486a      	ldr	r0, [pc, #424]	; (801ee08 <tcp_input+0x534>)
 801ec5e:	f007 fffb 	bl	8026c58 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ec62:	69fb      	ldr	r3, [r7, #28]
 801ec64:	7a1b      	ldrb	r3, [r3, #8]
 801ec66:	2b00      	cmp	r3, #0
 801ec68:	d009      	beq.n	801ec7e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ec6a:	69fb      	ldr	r3, [r7, #28]
 801ec6c:	7a1a      	ldrb	r2, [r3, #8]
 801ec6e:	4b63      	ldr	r3, [pc, #396]	; (801edfc <tcp_input+0x528>)
 801ec70:	685b      	ldr	r3, [r3, #4]
 801ec72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ec76:	3301      	adds	r3, #1
 801ec78:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ec7a:	429a      	cmp	r2, r3
 801ec7c:	d122      	bne.n	801ecc4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801ec7e:	69fb      	ldr	r3, [r7, #28]
 801ec80:	8b1a      	ldrh	r2, [r3, #24]
 801ec82:	4b5d      	ldr	r3, [pc, #372]	; (801edf8 <tcp_input+0x524>)
 801ec84:	681b      	ldr	r3, [r3, #0]
 801ec86:	881b      	ldrh	r3, [r3, #0]
 801ec88:	b29b      	uxth	r3, r3
 801ec8a:	429a      	cmp	r2, r3
 801ec8c:	d11b      	bne.n	801ecc6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801ec8e:	69fb      	ldr	r3, [r7, #28]
 801ec90:	8ada      	ldrh	r2, [r3, #22]
 801ec92:	4b59      	ldr	r3, [pc, #356]	; (801edf8 <tcp_input+0x524>)
 801ec94:	681b      	ldr	r3, [r3, #0]
 801ec96:	885b      	ldrh	r3, [r3, #2]
 801ec98:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801ec9a:	429a      	cmp	r2, r3
 801ec9c:	d113      	bne.n	801ecc6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ec9e:	69fb      	ldr	r3, [r7, #28]
 801eca0:	685a      	ldr	r2, [r3, #4]
 801eca2:	4b56      	ldr	r3, [pc, #344]	; (801edfc <tcp_input+0x528>)
 801eca4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801eca6:	429a      	cmp	r2, r3
 801eca8:	d10d      	bne.n	801ecc6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ecaa:	69fb      	ldr	r3, [r7, #28]
 801ecac:	681a      	ldr	r2, [r3, #0]
 801ecae:	4b53      	ldr	r3, [pc, #332]	; (801edfc <tcp_input+0x528>)
 801ecb0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ecb2:	429a      	cmp	r2, r3
 801ecb4:	d107      	bne.n	801ecc6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801ecb6:	69f8      	ldr	r0, [r7, #28]
 801ecb8:	f000 fb54 	bl	801f364 <tcp_timewait_input>
        }
        pbuf_free(p);
 801ecbc:	6878      	ldr	r0, [r7, #4]
 801ecbe:	f7fd fba3 	bl	801c408 <pbuf_free>
        return;
 801ecc2:	e1f0      	b.n	801f0a6 <tcp_input+0x7d2>
        continue;
 801ecc4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ecc6:	69fb      	ldr	r3, [r7, #28]
 801ecc8:	68db      	ldr	r3, [r3, #12]
 801ecca:	61fb      	str	r3, [r7, #28]
 801eccc:	69fb      	ldr	r3, [r7, #28]
 801ecce:	2b00      	cmp	r3, #0
 801ecd0:	d1bc      	bne.n	801ec4c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801ecd2:	2300      	movs	r3, #0
 801ecd4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ecd6:	4b51      	ldr	r3, [pc, #324]	; (801ee1c <tcp_input+0x548>)
 801ecd8:	681b      	ldr	r3, [r3, #0]
 801ecda:	617b      	str	r3, [r7, #20]
 801ecdc:	e02a      	b.n	801ed34 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801ecde:	697b      	ldr	r3, [r7, #20]
 801ece0:	7a1b      	ldrb	r3, [r3, #8]
 801ece2:	2b00      	cmp	r3, #0
 801ece4:	d00c      	beq.n	801ed00 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ece6:	697b      	ldr	r3, [r7, #20]
 801ece8:	7a1a      	ldrb	r2, [r3, #8]
 801ecea:	4b44      	ldr	r3, [pc, #272]	; (801edfc <tcp_input+0x528>)
 801ecec:	685b      	ldr	r3, [r3, #4]
 801ecee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ecf2:	3301      	adds	r3, #1
 801ecf4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801ecf6:	429a      	cmp	r2, r3
 801ecf8:	d002      	beq.n	801ed00 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801ecfa:	697b      	ldr	r3, [r7, #20]
 801ecfc:	61bb      	str	r3, [r7, #24]
        continue;
 801ecfe:	e016      	b.n	801ed2e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801ed00:	697b      	ldr	r3, [r7, #20]
 801ed02:	8ada      	ldrh	r2, [r3, #22]
 801ed04:	4b3c      	ldr	r3, [pc, #240]	; (801edf8 <tcp_input+0x524>)
 801ed06:	681b      	ldr	r3, [r3, #0]
 801ed08:	885b      	ldrh	r3, [r3, #2]
 801ed0a:	b29b      	uxth	r3, r3
 801ed0c:	429a      	cmp	r2, r3
 801ed0e:	d10c      	bne.n	801ed2a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801ed10:	697b      	ldr	r3, [r7, #20]
 801ed12:	681a      	ldr	r2, [r3, #0]
 801ed14:	4b39      	ldr	r3, [pc, #228]	; (801edfc <tcp_input+0x528>)
 801ed16:	695b      	ldr	r3, [r3, #20]
 801ed18:	429a      	cmp	r2, r3
 801ed1a:	d00f      	beq.n	801ed3c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801ed1c:	697b      	ldr	r3, [r7, #20]
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	d00d      	beq.n	801ed3e <tcp_input+0x46a>
 801ed22:	697b      	ldr	r3, [r7, #20]
 801ed24:	681b      	ldr	r3, [r3, #0]
 801ed26:	2b00      	cmp	r3, #0
 801ed28:	d009      	beq.n	801ed3e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801ed2a:	697b      	ldr	r3, [r7, #20]
 801ed2c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ed2e:	697b      	ldr	r3, [r7, #20]
 801ed30:	68db      	ldr	r3, [r3, #12]
 801ed32:	617b      	str	r3, [r7, #20]
 801ed34:	697b      	ldr	r3, [r7, #20]
 801ed36:	2b00      	cmp	r3, #0
 801ed38:	d1d1      	bne.n	801ecde <tcp_input+0x40a>
 801ed3a:	e000      	b.n	801ed3e <tcp_input+0x46a>
            break;
 801ed3c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801ed3e:	697b      	ldr	r3, [r7, #20]
 801ed40:	2b00      	cmp	r3, #0
 801ed42:	d014      	beq.n	801ed6e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801ed44:	69bb      	ldr	r3, [r7, #24]
 801ed46:	2b00      	cmp	r3, #0
 801ed48:	d00a      	beq.n	801ed60 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801ed4a:	697b      	ldr	r3, [r7, #20]
 801ed4c:	68da      	ldr	r2, [r3, #12]
 801ed4e:	69bb      	ldr	r3, [r7, #24]
 801ed50:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801ed52:	4b32      	ldr	r3, [pc, #200]	; (801ee1c <tcp_input+0x548>)
 801ed54:	681a      	ldr	r2, [r3, #0]
 801ed56:	697b      	ldr	r3, [r7, #20]
 801ed58:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801ed5a:	4a30      	ldr	r2, [pc, #192]	; (801ee1c <tcp_input+0x548>)
 801ed5c:	697b      	ldr	r3, [r7, #20]
 801ed5e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801ed60:	6978      	ldr	r0, [r7, #20]
 801ed62:	f000 fa01 	bl	801f168 <tcp_listen_input>
      }
      pbuf_free(p);
 801ed66:	6878      	ldr	r0, [r7, #4]
 801ed68:	f7fd fb4e 	bl	801c408 <pbuf_free>
      return;
 801ed6c:	e19b      	b.n	801f0a6 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801ed6e:	69fb      	ldr	r3, [r7, #28]
 801ed70:	2b00      	cmp	r3, #0
 801ed72:	f000 8160 	beq.w	801f036 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801ed76:	4b2a      	ldr	r3, [pc, #168]	; (801ee20 <tcp_input+0x54c>)
 801ed78:	2200      	movs	r2, #0
 801ed7a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	891a      	ldrh	r2, [r3, #8]
 801ed80:	4b27      	ldr	r3, [pc, #156]	; (801ee20 <tcp_input+0x54c>)
 801ed82:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801ed84:	4a26      	ldr	r2, [pc, #152]	; (801ee20 <tcp_input+0x54c>)
 801ed86:	687b      	ldr	r3, [r7, #4]
 801ed88:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801ed8a:	4b1b      	ldr	r3, [pc, #108]	; (801edf8 <tcp_input+0x524>)
 801ed8c:	681b      	ldr	r3, [r3, #0]
 801ed8e:	4a24      	ldr	r2, [pc, #144]	; (801ee20 <tcp_input+0x54c>)
 801ed90:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801ed92:	4b24      	ldr	r3, [pc, #144]	; (801ee24 <tcp_input+0x550>)
 801ed94:	2200      	movs	r2, #0
 801ed96:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801ed98:	4b23      	ldr	r3, [pc, #140]	; (801ee28 <tcp_input+0x554>)
 801ed9a:	2200      	movs	r2, #0
 801ed9c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801ed9e:	4b23      	ldr	r3, [pc, #140]	; (801ee2c <tcp_input+0x558>)
 801eda0:	2200      	movs	r2, #0
 801eda2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801eda4:	4b22      	ldr	r3, [pc, #136]	; (801ee30 <tcp_input+0x55c>)
 801eda6:	781b      	ldrb	r3, [r3, #0]
 801eda8:	f003 0308 	and.w	r3, r3, #8
 801edac:	2b00      	cmp	r3, #0
 801edae:	d006      	beq.n	801edbe <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 801edb0:	687b      	ldr	r3, [r7, #4]
 801edb2:	7b5b      	ldrb	r3, [r3, #13]
 801edb4:	f043 0301 	orr.w	r3, r3, #1
 801edb8:	b2da      	uxtb	r2, r3
 801edba:	687b      	ldr	r3, [r7, #4]
 801edbc:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801edbe:	69fb      	ldr	r3, [r7, #28]
 801edc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801edc2:	2b00      	cmp	r3, #0
 801edc4:	d038      	beq.n	801ee38 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801edc6:	69f8      	ldr	r0, [r7, #28]
 801edc8:	f7ff f852 	bl	801de70 <tcp_process_refused_data>
 801edcc:	4603      	mov	r3, r0
 801edce:	f113 0f0d 	cmn.w	r3, #13
 801edd2:	d007      	beq.n	801ede4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801edd4:	69fb      	ldr	r3, [r7, #28]
 801edd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801edd8:	2b00      	cmp	r3, #0
 801edda:	d02d      	beq.n	801ee38 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801eddc:	4b15      	ldr	r3, [pc, #84]	; (801ee34 <tcp_input+0x560>)
 801edde:	881b      	ldrh	r3, [r3, #0]
 801ede0:	2b00      	cmp	r3, #0
 801ede2:	d029      	beq.n	801ee38 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801ede4:	69fb      	ldr	r3, [r7, #28]
 801ede6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ede8:	2b00      	cmp	r3, #0
 801edea:	f040 8104 	bne.w	801eff6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801edee:	69f8      	ldr	r0, [r7, #28]
 801edf0:	f003 fe16 	bl	8022a20 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801edf4:	e0ff      	b.n	801eff6 <tcp_input+0x722>
 801edf6:	bf00      	nop
 801edf8:	20005a38 	.word	0x20005a38
 801edfc:	20012bd8 	.word	0x20012bd8
 801ee00:	0802e8f4 	.word	0x0802e8f4
 801ee04:	0802ea20 	.word	0x0802ea20
 801ee08:	0802e940 	.word	0x0802e940
 801ee0c:	2001d51c 	.word	0x2001d51c
 801ee10:	0802ea4c 	.word	0x0802ea4c
 801ee14:	2001d52c 	.word	0x2001d52c
 801ee18:	0802ea78 	.word	0x0802ea78
 801ee1c:	2001d524 	.word	0x2001d524
 801ee20:	20005a28 	.word	0x20005a28
 801ee24:	20005a58 	.word	0x20005a58
 801ee28:	20005a55 	.word	0x20005a55
 801ee2c:	20005a50 	.word	0x20005a50
 801ee30:	20005a54 	.word	0x20005a54
 801ee34:	20005a52 	.word	0x20005a52
      }
    }
    tcp_input_pcb = pcb;
 801ee38:	4a9c      	ldr	r2, [pc, #624]	; (801f0ac <tcp_input+0x7d8>)
 801ee3a:	69fb      	ldr	r3, [r7, #28]
 801ee3c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801ee3e:	69f8      	ldr	r0, [r7, #28]
 801ee40:	f000 fb0a 	bl	801f458 <tcp_process>
 801ee44:	4603      	mov	r3, r0
 801ee46:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801ee48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ee4c:	f113 0f0d 	cmn.w	r3, #13
 801ee50:	f000 80d3 	beq.w	801effa <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801ee54:	4b96      	ldr	r3, [pc, #600]	; (801f0b0 <tcp_input+0x7dc>)
 801ee56:	781b      	ldrb	r3, [r3, #0]
 801ee58:	f003 0308 	and.w	r3, r3, #8
 801ee5c:	2b00      	cmp	r3, #0
 801ee5e:	d015      	beq.n	801ee8c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801ee60:	69fb      	ldr	r3, [r7, #28]
 801ee62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ee66:	2b00      	cmp	r3, #0
 801ee68:	d008      	beq.n	801ee7c <tcp_input+0x5a8>
 801ee6a:	69fb      	ldr	r3, [r7, #28]
 801ee6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ee70:	69fa      	ldr	r2, [r7, #28]
 801ee72:	6912      	ldr	r2, [r2, #16]
 801ee74:	f06f 010d 	mvn.w	r1, #13
 801ee78:	4610      	mov	r0, r2
 801ee7a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801ee7c:	69f9      	ldr	r1, [r7, #28]
 801ee7e:	488d      	ldr	r0, [pc, #564]	; (801f0b4 <tcp_input+0x7e0>)
 801ee80:	f7ff fbb0 	bl	801e5e4 <tcp_pcb_remove>
        tcp_free(pcb);
 801ee84:	69f8      	ldr	r0, [r7, #28]
 801ee86:	f7fd fddf 	bl	801ca48 <tcp_free>
 801ee8a:	e0c1      	b.n	801f010 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801ee8c:	2300      	movs	r3, #0
 801ee8e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801ee90:	4b89      	ldr	r3, [pc, #548]	; (801f0b8 <tcp_input+0x7e4>)
 801ee92:	881b      	ldrh	r3, [r3, #0]
 801ee94:	2b00      	cmp	r3, #0
 801ee96:	d01d      	beq.n	801eed4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801ee98:	4b87      	ldr	r3, [pc, #540]	; (801f0b8 <tcp_input+0x7e4>)
 801ee9a:	881b      	ldrh	r3, [r3, #0]
 801ee9c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801ee9e:	69fb      	ldr	r3, [r7, #28]
 801eea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801eea4:	2b00      	cmp	r3, #0
 801eea6:	d00a      	beq.n	801eebe <tcp_input+0x5ea>
 801eea8:	69fb      	ldr	r3, [r7, #28]
 801eeaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801eeae:	69fa      	ldr	r2, [r7, #28]
 801eeb0:	6910      	ldr	r0, [r2, #16]
 801eeb2:	89fa      	ldrh	r2, [r7, #14]
 801eeb4:	69f9      	ldr	r1, [r7, #28]
 801eeb6:	4798      	blx	r3
 801eeb8:	4603      	mov	r3, r0
 801eeba:	74fb      	strb	r3, [r7, #19]
 801eebc:	e001      	b.n	801eec2 <tcp_input+0x5ee>
 801eebe:	2300      	movs	r3, #0
 801eec0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801eec2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801eec6:	f113 0f0d 	cmn.w	r3, #13
 801eeca:	f000 8098 	beq.w	801effe <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801eece:	4b7a      	ldr	r3, [pc, #488]	; (801f0b8 <tcp_input+0x7e4>)
 801eed0:	2200      	movs	r2, #0
 801eed2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801eed4:	69f8      	ldr	r0, [r7, #28]
 801eed6:	f000 f907 	bl	801f0e8 <tcp_input_delayed_close>
 801eeda:	4603      	mov	r3, r0
 801eedc:	2b00      	cmp	r3, #0
 801eede:	f040 8090 	bne.w	801f002 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801eee2:	4b76      	ldr	r3, [pc, #472]	; (801f0bc <tcp_input+0x7e8>)
 801eee4:	681b      	ldr	r3, [r3, #0]
 801eee6:	2b00      	cmp	r3, #0
 801eee8:	d041      	beq.n	801ef6e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801eeea:	69fb      	ldr	r3, [r7, #28]
 801eeec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	d006      	beq.n	801ef00 <tcp_input+0x62c>
 801eef2:	4b73      	ldr	r3, [pc, #460]	; (801f0c0 <tcp_input+0x7ec>)
 801eef4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801eef8:	4972      	ldr	r1, [pc, #456]	; (801f0c4 <tcp_input+0x7f0>)
 801eefa:	4873      	ldr	r0, [pc, #460]	; (801f0c8 <tcp_input+0x7f4>)
 801eefc:	f007 feac 	bl	8026c58 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801ef00:	69fb      	ldr	r3, [r7, #28]
 801ef02:	8b5b      	ldrh	r3, [r3, #26]
 801ef04:	f003 0310 	and.w	r3, r3, #16
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	d008      	beq.n	801ef1e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801ef0c:	4b6b      	ldr	r3, [pc, #428]	; (801f0bc <tcp_input+0x7e8>)
 801ef0e:	681b      	ldr	r3, [r3, #0]
 801ef10:	4618      	mov	r0, r3
 801ef12:	f7fd fa79 	bl	801c408 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801ef16:	69f8      	ldr	r0, [r7, #28]
 801ef18:	f7fe f87e 	bl	801d018 <tcp_abort>
            goto aborted;
 801ef1c:	e078      	b.n	801f010 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801ef1e:	69fb      	ldr	r3, [r7, #28]
 801ef20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ef24:	2b00      	cmp	r3, #0
 801ef26:	d00c      	beq.n	801ef42 <tcp_input+0x66e>
 801ef28:	69fb      	ldr	r3, [r7, #28]
 801ef2a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801ef2e:	69fb      	ldr	r3, [r7, #28]
 801ef30:	6918      	ldr	r0, [r3, #16]
 801ef32:	4b62      	ldr	r3, [pc, #392]	; (801f0bc <tcp_input+0x7e8>)
 801ef34:	681a      	ldr	r2, [r3, #0]
 801ef36:	2300      	movs	r3, #0
 801ef38:	69f9      	ldr	r1, [r7, #28]
 801ef3a:	47a0      	blx	r4
 801ef3c:	4603      	mov	r3, r0
 801ef3e:	74fb      	strb	r3, [r7, #19]
 801ef40:	e008      	b.n	801ef54 <tcp_input+0x680>
 801ef42:	4b5e      	ldr	r3, [pc, #376]	; (801f0bc <tcp_input+0x7e8>)
 801ef44:	681a      	ldr	r2, [r3, #0]
 801ef46:	2300      	movs	r3, #0
 801ef48:	69f9      	ldr	r1, [r7, #28]
 801ef4a:	2000      	movs	r0, #0
 801ef4c:	f7ff f884 	bl	801e058 <tcp_recv_null>
 801ef50:	4603      	mov	r3, r0
 801ef52:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801ef54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ef58:	f113 0f0d 	cmn.w	r3, #13
 801ef5c:	d053      	beq.n	801f006 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801ef5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ef62:	2b00      	cmp	r3, #0
 801ef64:	d003      	beq.n	801ef6e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801ef66:	4b55      	ldr	r3, [pc, #340]	; (801f0bc <tcp_input+0x7e8>)
 801ef68:	681a      	ldr	r2, [r3, #0]
 801ef6a:	69fb      	ldr	r3, [r7, #28]
 801ef6c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801ef6e:	4b50      	ldr	r3, [pc, #320]	; (801f0b0 <tcp_input+0x7dc>)
 801ef70:	781b      	ldrb	r3, [r3, #0]
 801ef72:	f003 0320 	and.w	r3, r3, #32
 801ef76:	2b00      	cmp	r3, #0
 801ef78:	d030      	beq.n	801efdc <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801ef7a:	69fb      	ldr	r3, [r7, #28]
 801ef7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ef7e:	2b00      	cmp	r3, #0
 801ef80:	d009      	beq.n	801ef96 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801ef82:	69fb      	ldr	r3, [r7, #28]
 801ef84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ef86:	7b5a      	ldrb	r2, [r3, #13]
 801ef88:	69fb      	ldr	r3, [r7, #28]
 801ef8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ef8c:	f042 0220 	orr.w	r2, r2, #32
 801ef90:	b2d2      	uxtb	r2, r2
 801ef92:	735a      	strb	r2, [r3, #13]
 801ef94:	e022      	b.n	801efdc <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801ef96:	69fb      	ldr	r3, [r7, #28]
 801ef98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ef9a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801ef9e:	d005      	beq.n	801efac <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 801efa0:	69fb      	ldr	r3, [r7, #28]
 801efa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801efa4:	3301      	adds	r3, #1
 801efa6:	b29a      	uxth	r2, r3
 801efa8:	69fb      	ldr	r3, [r7, #28]
 801efaa:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801efac:	69fb      	ldr	r3, [r7, #28]
 801efae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801efb2:	2b00      	cmp	r3, #0
 801efb4:	d00b      	beq.n	801efce <tcp_input+0x6fa>
 801efb6:	69fb      	ldr	r3, [r7, #28]
 801efb8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801efbc:	69fb      	ldr	r3, [r7, #28]
 801efbe:	6918      	ldr	r0, [r3, #16]
 801efc0:	2300      	movs	r3, #0
 801efc2:	2200      	movs	r2, #0
 801efc4:	69f9      	ldr	r1, [r7, #28]
 801efc6:	47a0      	blx	r4
 801efc8:	4603      	mov	r3, r0
 801efca:	74fb      	strb	r3, [r7, #19]
 801efcc:	e001      	b.n	801efd2 <tcp_input+0x6fe>
 801efce:	2300      	movs	r3, #0
 801efd0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801efd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801efd6:	f113 0f0d 	cmn.w	r3, #13
 801efda:	d016      	beq.n	801f00a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801efdc:	4b33      	ldr	r3, [pc, #204]	; (801f0ac <tcp_input+0x7d8>)
 801efde:	2200      	movs	r2, #0
 801efe0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801efe2:	69f8      	ldr	r0, [r7, #28]
 801efe4:	f000 f880 	bl	801f0e8 <tcp_input_delayed_close>
 801efe8:	4603      	mov	r3, r0
 801efea:	2b00      	cmp	r3, #0
 801efec:	d10f      	bne.n	801f00e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801efee:	69f8      	ldr	r0, [r7, #28]
 801eff0:	f002 ff10 	bl	8021e14 <tcp_output>
 801eff4:	e00c      	b.n	801f010 <tcp_input+0x73c>
        goto aborted;
 801eff6:	bf00      	nop
 801eff8:	e00a      	b.n	801f010 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801effa:	bf00      	nop
 801effc:	e008      	b.n	801f010 <tcp_input+0x73c>
              goto aborted;
 801effe:	bf00      	nop
 801f000:	e006      	b.n	801f010 <tcp_input+0x73c>
          goto aborted;
 801f002:	bf00      	nop
 801f004:	e004      	b.n	801f010 <tcp_input+0x73c>
            goto aborted;
 801f006:	bf00      	nop
 801f008:	e002      	b.n	801f010 <tcp_input+0x73c>
              goto aborted;
 801f00a:	bf00      	nop
 801f00c:	e000      	b.n	801f010 <tcp_input+0x73c>
          goto aborted;
 801f00e:	bf00      	nop
    tcp_input_pcb = NULL;
 801f010:	4b26      	ldr	r3, [pc, #152]	; (801f0ac <tcp_input+0x7d8>)
 801f012:	2200      	movs	r2, #0
 801f014:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801f016:	4b29      	ldr	r3, [pc, #164]	; (801f0bc <tcp_input+0x7e8>)
 801f018:	2200      	movs	r2, #0
 801f01a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801f01c:	4b2b      	ldr	r3, [pc, #172]	; (801f0cc <tcp_input+0x7f8>)
 801f01e:	685b      	ldr	r3, [r3, #4]
 801f020:	2b00      	cmp	r3, #0
 801f022:	d03f      	beq.n	801f0a4 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 801f024:	4b29      	ldr	r3, [pc, #164]	; (801f0cc <tcp_input+0x7f8>)
 801f026:	685b      	ldr	r3, [r3, #4]
 801f028:	4618      	mov	r0, r3
 801f02a:	f7fd f9ed 	bl	801c408 <pbuf_free>
      inseg.p = NULL;
 801f02e:	4b27      	ldr	r3, [pc, #156]	; (801f0cc <tcp_input+0x7f8>)
 801f030:	2200      	movs	r2, #0
 801f032:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801f034:	e036      	b.n	801f0a4 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801f036:	4b26      	ldr	r3, [pc, #152]	; (801f0d0 <tcp_input+0x7fc>)
 801f038:	681b      	ldr	r3, [r3, #0]
 801f03a:	899b      	ldrh	r3, [r3, #12]
 801f03c:	b29b      	uxth	r3, r3
 801f03e:	4618      	mov	r0, r3
 801f040:	f7fb fda4 	bl	801ab8c <lwip_htons>
 801f044:	4603      	mov	r3, r0
 801f046:	b2db      	uxtb	r3, r3
 801f048:	f003 0304 	and.w	r3, r3, #4
 801f04c:	2b00      	cmp	r3, #0
 801f04e:	d118      	bne.n	801f082 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f050:	4b20      	ldr	r3, [pc, #128]	; (801f0d4 <tcp_input+0x800>)
 801f052:	6819      	ldr	r1, [r3, #0]
 801f054:	4b20      	ldr	r3, [pc, #128]	; (801f0d8 <tcp_input+0x804>)
 801f056:	881b      	ldrh	r3, [r3, #0]
 801f058:	461a      	mov	r2, r3
 801f05a:	4b20      	ldr	r3, [pc, #128]	; (801f0dc <tcp_input+0x808>)
 801f05c:	681b      	ldr	r3, [r3, #0]
 801f05e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f060:	4b1b      	ldr	r3, [pc, #108]	; (801f0d0 <tcp_input+0x7fc>)
 801f062:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f064:	885b      	ldrh	r3, [r3, #2]
 801f066:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f068:	4a19      	ldr	r2, [pc, #100]	; (801f0d0 <tcp_input+0x7fc>)
 801f06a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f06c:	8812      	ldrh	r2, [r2, #0]
 801f06e:	b292      	uxth	r2, r2
 801f070:	9202      	str	r2, [sp, #8]
 801f072:	9301      	str	r3, [sp, #4]
 801f074:	4b1a      	ldr	r3, [pc, #104]	; (801f0e0 <tcp_input+0x80c>)
 801f076:	9300      	str	r3, [sp, #0]
 801f078:	4b1a      	ldr	r3, [pc, #104]	; (801f0e4 <tcp_input+0x810>)
 801f07a:	4602      	mov	r2, r0
 801f07c:	2000      	movs	r0, #0
 801f07e:	f003 fc7d 	bl	802297c <tcp_rst>
    pbuf_free(p);
 801f082:	6878      	ldr	r0, [r7, #4]
 801f084:	f7fd f9c0 	bl	801c408 <pbuf_free>
  return;
 801f088:	e00c      	b.n	801f0a4 <tcp_input+0x7d0>
    goto dropped;
 801f08a:	bf00      	nop
 801f08c:	e006      	b.n	801f09c <tcp_input+0x7c8>
    goto dropped;
 801f08e:	bf00      	nop
 801f090:	e004      	b.n	801f09c <tcp_input+0x7c8>
    goto dropped;
 801f092:	bf00      	nop
 801f094:	e002      	b.n	801f09c <tcp_input+0x7c8>
      goto dropped;
 801f096:	bf00      	nop
 801f098:	e000      	b.n	801f09c <tcp_input+0x7c8>
      goto dropped;
 801f09a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801f09c:	6878      	ldr	r0, [r7, #4]
 801f09e:	f7fd f9b3 	bl	801c408 <pbuf_free>
 801f0a2:	e000      	b.n	801f0a6 <tcp_input+0x7d2>
  return;
 801f0a4:	bf00      	nop
}
 801f0a6:	3724      	adds	r7, #36	; 0x24
 801f0a8:	46bd      	mov	sp, r7
 801f0aa:	bd90      	pop	{r4, r7, pc}
 801f0ac:	2001d530 	.word	0x2001d530
 801f0b0:	20005a55 	.word	0x20005a55
 801f0b4:	2001d51c 	.word	0x2001d51c
 801f0b8:	20005a50 	.word	0x20005a50
 801f0bc:	20005a58 	.word	0x20005a58
 801f0c0:	0802e8f4 	.word	0x0802e8f4
 801f0c4:	0802eaa8 	.word	0x0802eaa8
 801f0c8:	0802e940 	.word	0x0802e940
 801f0cc:	20005a28 	.word	0x20005a28
 801f0d0:	20005a38 	.word	0x20005a38
 801f0d4:	20005a4c 	.word	0x20005a4c
 801f0d8:	20005a52 	.word	0x20005a52
 801f0dc:	20005a48 	.word	0x20005a48
 801f0e0:	20012be8 	.word	0x20012be8
 801f0e4:	20012bec 	.word	0x20012bec

0801f0e8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801f0e8:	b580      	push	{r7, lr}
 801f0ea:	b082      	sub	sp, #8
 801f0ec:	af00      	add	r7, sp, #0
 801f0ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801f0f0:	687b      	ldr	r3, [r7, #4]
 801f0f2:	2b00      	cmp	r3, #0
 801f0f4:	d106      	bne.n	801f104 <tcp_input_delayed_close+0x1c>
 801f0f6:	4b17      	ldr	r3, [pc, #92]	; (801f154 <tcp_input_delayed_close+0x6c>)
 801f0f8:	f240 225a 	movw	r2, #602	; 0x25a
 801f0fc:	4916      	ldr	r1, [pc, #88]	; (801f158 <tcp_input_delayed_close+0x70>)
 801f0fe:	4817      	ldr	r0, [pc, #92]	; (801f15c <tcp_input_delayed_close+0x74>)
 801f100:	f007 fdaa 	bl	8026c58 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801f104:	4b16      	ldr	r3, [pc, #88]	; (801f160 <tcp_input_delayed_close+0x78>)
 801f106:	781b      	ldrb	r3, [r3, #0]
 801f108:	f003 0310 	and.w	r3, r3, #16
 801f10c:	2b00      	cmp	r3, #0
 801f10e:	d01c      	beq.n	801f14a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801f110:	687b      	ldr	r3, [r7, #4]
 801f112:	8b5b      	ldrh	r3, [r3, #26]
 801f114:	f003 0310 	and.w	r3, r3, #16
 801f118:	2b00      	cmp	r3, #0
 801f11a:	d10d      	bne.n	801f138 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801f11c:	687b      	ldr	r3, [r7, #4]
 801f11e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f122:	2b00      	cmp	r3, #0
 801f124:	d008      	beq.n	801f138 <tcp_input_delayed_close+0x50>
 801f126:	687b      	ldr	r3, [r7, #4]
 801f128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f12c:	687a      	ldr	r2, [r7, #4]
 801f12e:	6912      	ldr	r2, [r2, #16]
 801f130:	f06f 010e 	mvn.w	r1, #14
 801f134:	4610      	mov	r0, r2
 801f136:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801f138:	6879      	ldr	r1, [r7, #4]
 801f13a:	480a      	ldr	r0, [pc, #40]	; (801f164 <tcp_input_delayed_close+0x7c>)
 801f13c:	f7ff fa52 	bl	801e5e4 <tcp_pcb_remove>
    tcp_free(pcb);
 801f140:	6878      	ldr	r0, [r7, #4]
 801f142:	f7fd fc81 	bl	801ca48 <tcp_free>
    return 1;
 801f146:	2301      	movs	r3, #1
 801f148:	e000      	b.n	801f14c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801f14a:	2300      	movs	r3, #0
}
 801f14c:	4618      	mov	r0, r3
 801f14e:	3708      	adds	r7, #8
 801f150:	46bd      	mov	sp, r7
 801f152:	bd80      	pop	{r7, pc}
 801f154:	0802e8f4 	.word	0x0802e8f4
 801f158:	0802eac4 	.word	0x0802eac4
 801f15c:	0802e940 	.word	0x0802e940
 801f160:	20005a55 	.word	0x20005a55
 801f164:	2001d51c 	.word	0x2001d51c

0801f168 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801f168:	b590      	push	{r4, r7, lr}
 801f16a:	b08b      	sub	sp, #44	; 0x2c
 801f16c:	af04      	add	r7, sp, #16
 801f16e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801f170:	4b6f      	ldr	r3, [pc, #444]	; (801f330 <tcp_listen_input+0x1c8>)
 801f172:	781b      	ldrb	r3, [r3, #0]
 801f174:	f003 0304 	and.w	r3, r3, #4
 801f178:	2b00      	cmp	r3, #0
 801f17a:	f040 80d2 	bne.w	801f322 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801f17e:	687b      	ldr	r3, [r7, #4]
 801f180:	2b00      	cmp	r3, #0
 801f182:	d106      	bne.n	801f192 <tcp_listen_input+0x2a>
 801f184:	4b6b      	ldr	r3, [pc, #428]	; (801f334 <tcp_listen_input+0x1cc>)
 801f186:	f240 2281 	movw	r2, #641	; 0x281
 801f18a:	496b      	ldr	r1, [pc, #428]	; (801f338 <tcp_listen_input+0x1d0>)
 801f18c:	486b      	ldr	r0, [pc, #428]	; (801f33c <tcp_listen_input+0x1d4>)
 801f18e:	f007 fd63 	bl	8026c58 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801f192:	4b67      	ldr	r3, [pc, #412]	; (801f330 <tcp_listen_input+0x1c8>)
 801f194:	781b      	ldrb	r3, [r3, #0]
 801f196:	f003 0310 	and.w	r3, r3, #16
 801f19a:	2b00      	cmp	r3, #0
 801f19c:	d019      	beq.n	801f1d2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f19e:	4b68      	ldr	r3, [pc, #416]	; (801f340 <tcp_listen_input+0x1d8>)
 801f1a0:	6819      	ldr	r1, [r3, #0]
 801f1a2:	4b68      	ldr	r3, [pc, #416]	; (801f344 <tcp_listen_input+0x1dc>)
 801f1a4:	881b      	ldrh	r3, [r3, #0]
 801f1a6:	461a      	mov	r2, r3
 801f1a8:	4b67      	ldr	r3, [pc, #412]	; (801f348 <tcp_listen_input+0x1e0>)
 801f1aa:	681b      	ldr	r3, [r3, #0]
 801f1ac:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f1ae:	4b67      	ldr	r3, [pc, #412]	; (801f34c <tcp_listen_input+0x1e4>)
 801f1b0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f1b2:	885b      	ldrh	r3, [r3, #2]
 801f1b4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f1b6:	4a65      	ldr	r2, [pc, #404]	; (801f34c <tcp_listen_input+0x1e4>)
 801f1b8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f1ba:	8812      	ldrh	r2, [r2, #0]
 801f1bc:	b292      	uxth	r2, r2
 801f1be:	9202      	str	r2, [sp, #8]
 801f1c0:	9301      	str	r3, [sp, #4]
 801f1c2:	4b63      	ldr	r3, [pc, #396]	; (801f350 <tcp_listen_input+0x1e8>)
 801f1c4:	9300      	str	r3, [sp, #0]
 801f1c6:	4b63      	ldr	r3, [pc, #396]	; (801f354 <tcp_listen_input+0x1ec>)
 801f1c8:	4602      	mov	r2, r0
 801f1ca:	6878      	ldr	r0, [r7, #4]
 801f1cc:	f003 fbd6 	bl	802297c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801f1d0:	e0a9      	b.n	801f326 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801f1d2:	4b57      	ldr	r3, [pc, #348]	; (801f330 <tcp_listen_input+0x1c8>)
 801f1d4:	781b      	ldrb	r3, [r3, #0]
 801f1d6:	f003 0302 	and.w	r3, r3, #2
 801f1da:	2b00      	cmp	r3, #0
 801f1dc:	f000 80a3 	beq.w	801f326 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	7d5b      	ldrb	r3, [r3, #21]
 801f1e4:	4618      	mov	r0, r3
 801f1e6:	f7ff f85b 	bl	801e2a0 <tcp_alloc>
 801f1ea:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801f1ec:	697b      	ldr	r3, [r7, #20]
 801f1ee:	2b00      	cmp	r3, #0
 801f1f0:	d111      	bne.n	801f216 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801f1f2:	687b      	ldr	r3, [r7, #4]
 801f1f4:	699b      	ldr	r3, [r3, #24]
 801f1f6:	2b00      	cmp	r3, #0
 801f1f8:	d00a      	beq.n	801f210 <tcp_listen_input+0xa8>
 801f1fa:	687b      	ldr	r3, [r7, #4]
 801f1fc:	699b      	ldr	r3, [r3, #24]
 801f1fe:	687a      	ldr	r2, [r7, #4]
 801f200:	6910      	ldr	r0, [r2, #16]
 801f202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f206:	2100      	movs	r1, #0
 801f208:	4798      	blx	r3
 801f20a:	4603      	mov	r3, r0
 801f20c:	73bb      	strb	r3, [r7, #14]
      return;
 801f20e:	e08b      	b.n	801f328 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801f210:	23f0      	movs	r3, #240	; 0xf0
 801f212:	73bb      	strb	r3, [r7, #14]
      return;
 801f214:	e088      	b.n	801f328 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801f216:	4b50      	ldr	r3, [pc, #320]	; (801f358 <tcp_listen_input+0x1f0>)
 801f218:	695a      	ldr	r2, [r3, #20]
 801f21a:	697b      	ldr	r3, [r7, #20]
 801f21c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801f21e:	4b4e      	ldr	r3, [pc, #312]	; (801f358 <tcp_listen_input+0x1f0>)
 801f220:	691a      	ldr	r2, [r3, #16]
 801f222:	697b      	ldr	r3, [r7, #20]
 801f224:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	8ada      	ldrh	r2, [r3, #22]
 801f22a:	697b      	ldr	r3, [r7, #20]
 801f22c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801f22e:	4b47      	ldr	r3, [pc, #284]	; (801f34c <tcp_listen_input+0x1e4>)
 801f230:	681b      	ldr	r3, [r3, #0]
 801f232:	881b      	ldrh	r3, [r3, #0]
 801f234:	b29a      	uxth	r2, r3
 801f236:	697b      	ldr	r3, [r7, #20]
 801f238:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801f23a:	697b      	ldr	r3, [r7, #20]
 801f23c:	2203      	movs	r2, #3
 801f23e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801f240:	4b41      	ldr	r3, [pc, #260]	; (801f348 <tcp_listen_input+0x1e0>)
 801f242:	681b      	ldr	r3, [r3, #0]
 801f244:	1c5a      	adds	r2, r3, #1
 801f246:	697b      	ldr	r3, [r7, #20]
 801f248:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801f24a:	697b      	ldr	r3, [r7, #20]
 801f24c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f24e:	697b      	ldr	r3, [r7, #20]
 801f250:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801f252:	6978      	ldr	r0, [r7, #20]
 801f254:	f7ff fa5a 	bl	801e70c <tcp_next_iss>
 801f258:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801f25a:	697b      	ldr	r3, [r7, #20]
 801f25c:	693a      	ldr	r2, [r7, #16]
 801f25e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801f260:	697b      	ldr	r3, [r7, #20]
 801f262:	693a      	ldr	r2, [r7, #16]
 801f264:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801f266:	697b      	ldr	r3, [r7, #20]
 801f268:	693a      	ldr	r2, [r7, #16]
 801f26a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801f26c:	697b      	ldr	r3, [r7, #20]
 801f26e:	693a      	ldr	r2, [r7, #16]
 801f270:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801f272:	4b35      	ldr	r3, [pc, #212]	; (801f348 <tcp_listen_input+0x1e0>)
 801f274:	681b      	ldr	r3, [r3, #0]
 801f276:	1e5a      	subs	r2, r3, #1
 801f278:	697b      	ldr	r3, [r7, #20]
 801f27a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801f27c:	687b      	ldr	r3, [r7, #4]
 801f27e:	691a      	ldr	r2, [r3, #16]
 801f280:	697b      	ldr	r3, [r7, #20]
 801f282:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801f284:	697b      	ldr	r3, [r7, #20]
 801f286:	687a      	ldr	r2, [r7, #4]
 801f288:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801f28a:	687b      	ldr	r3, [r7, #4]
 801f28c:	7a5b      	ldrb	r3, [r3, #9]
 801f28e:	f003 030c 	and.w	r3, r3, #12
 801f292:	b2da      	uxtb	r2, r3
 801f294:	697b      	ldr	r3, [r7, #20]
 801f296:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801f298:	687b      	ldr	r3, [r7, #4]
 801f29a:	7a1a      	ldrb	r2, [r3, #8]
 801f29c:	697b      	ldr	r3, [r7, #20]
 801f29e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801f2a0:	4b2e      	ldr	r3, [pc, #184]	; (801f35c <tcp_listen_input+0x1f4>)
 801f2a2:	681a      	ldr	r2, [r3, #0]
 801f2a4:	697b      	ldr	r3, [r7, #20]
 801f2a6:	60da      	str	r2, [r3, #12]
 801f2a8:	4a2c      	ldr	r2, [pc, #176]	; (801f35c <tcp_listen_input+0x1f4>)
 801f2aa:	697b      	ldr	r3, [r7, #20]
 801f2ac:	6013      	str	r3, [r2, #0]
 801f2ae:	f003 fd27 	bl	8022d00 <tcp_timer_needed>
 801f2b2:	4b2b      	ldr	r3, [pc, #172]	; (801f360 <tcp_listen_input+0x1f8>)
 801f2b4:	2201      	movs	r2, #1
 801f2b6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801f2b8:	6978      	ldr	r0, [r7, #20]
 801f2ba:	f001 fd8d 	bl	8020dd8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801f2be:	4b23      	ldr	r3, [pc, #140]	; (801f34c <tcp_listen_input+0x1e4>)
 801f2c0:	681b      	ldr	r3, [r3, #0]
 801f2c2:	89db      	ldrh	r3, [r3, #14]
 801f2c4:	b29a      	uxth	r2, r3
 801f2c6:	697b      	ldr	r3, [r7, #20]
 801f2c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801f2cc:	697b      	ldr	r3, [r7, #20]
 801f2ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801f2d2:	697b      	ldr	r3, [r7, #20]
 801f2d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801f2d8:	697b      	ldr	r3, [r7, #20]
 801f2da:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801f2dc:	697b      	ldr	r3, [r7, #20]
 801f2de:	3304      	adds	r3, #4
 801f2e0:	4618      	mov	r0, r3
 801f2e2:	f005 fc0f 	bl	8024b04 <ip4_route>
 801f2e6:	4601      	mov	r1, r0
 801f2e8:	697b      	ldr	r3, [r7, #20]
 801f2ea:	3304      	adds	r3, #4
 801f2ec:	461a      	mov	r2, r3
 801f2ee:	4620      	mov	r0, r4
 801f2f0:	f7ff fa32 	bl	801e758 <tcp_eff_send_mss_netif>
 801f2f4:	4603      	mov	r3, r0
 801f2f6:	461a      	mov	r2, r3
 801f2f8:	697b      	ldr	r3, [r7, #20]
 801f2fa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801f2fc:	2112      	movs	r1, #18
 801f2fe:	6978      	ldr	r0, [r7, #20]
 801f300:	f002 fc9a 	bl	8021c38 <tcp_enqueue_flags>
 801f304:	4603      	mov	r3, r0
 801f306:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801f308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f30c:	2b00      	cmp	r3, #0
 801f30e:	d004      	beq.n	801f31a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801f310:	2100      	movs	r1, #0
 801f312:	6978      	ldr	r0, [r7, #20]
 801f314:	f7fd fdc2 	bl	801ce9c <tcp_abandon>
      return;
 801f318:	e006      	b.n	801f328 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801f31a:	6978      	ldr	r0, [r7, #20]
 801f31c:	f002 fd7a 	bl	8021e14 <tcp_output>
  return;
 801f320:	e001      	b.n	801f326 <tcp_listen_input+0x1be>
    return;
 801f322:	bf00      	nop
 801f324:	e000      	b.n	801f328 <tcp_listen_input+0x1c0>
  return;
 801f326:	bf00      	nop
}
 801f328:	371c      	adds	r7, #28
 801f32a:	46bd      	mov	sp, r7
 801f32c:	bd90      	pop	{r4, r7, pc}
 801f32e:	bf00      	nop
 801f330:	20005a54 	.word	0x20005a54
 801f334:	0802e8f4 	.word	0x0802e8f4
 801f338:	0802eaec 	.word	0x0802eaec
 801f33c:	0802e940 	.word	0x0802e940
 801f340:	20005a4c 	.word	0x20005a4c
 801f344:	20005a52 	.word	0x20005a52
 801f348:	20005a48 	.word	0x20005a48
 801f34c:	20005a38 	.word	0x20005a38
 801f350:	20012be8 	.word	0x20012be8
 801f354:	20012bec 	.word	0x20012bec
 801f358:	20012bd8 	.word	0x20012bd8
 801f35c:	2001d51c 	.word	0x2001d51c
 801f360:	2001d518 	.word	0x2001d518

0801f364 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801f364:	b580      	push	{r7, lr}
 801f366:	b086      	sub	sp, #24
 801f368:	af04      	add	r7, sp, #16
 801f36a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801f36c:	4b2f      	ldr	r3, [pc, #188]	; (801f42c <tcp_timewait_input+0xc8>)
 801f36e:	781b      	ldrb	r3, [r3, #0]
 801f370:	f003 0304 	and.w	r3, r3, #4
 801f374:	2b00      	cmp	r3, #0
 801f376:	d153      	bne.n	801f420 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801f378:	687b      	ldr	r3, [r7, #4]
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	d106      	bne.n	801f38c <tcp_timewait_input+0x28>
 801f37e:	4b2c      	ldr	r3, [pc, #176]	; (801f430 <tcp_timewait_input+0xcc>)
 801f380:	f240 22ee 	movw	r2, #750	; 0x2ee
 801f384:	492b      	ldr	r1, [pc, #172]	; (801f434 <tcp_timewait_input+0xd0>)
 801f386:	482c      	ldr	r0, [pc, #176]	; (801f438 <tcp_timewait_input+0xd4>)
 801f388:	f007 fc66 	bl	8026c58 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801f38c:	4b27      	ldr	r3, [pc, #156]	; (801f42c <tcp_timewait_input+0xc8>)
 801f38e:	781b      	ldrb	r3, [r3, #0]
 801f390:	f003 0302 	and.w	r3, r3, #2
 801f394:	2b00      	cmp	r3, #0
 801f396:	d02a      	beq.n	801f3ee <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801f398:	4b28      	ldr	r3, [pc, #160]	; (801f43c <tcp_timewait_input+0xd8>)
 801f39a:	681a      	ldr	r2, [r3, #0]
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3a0:	1ad3      	subs	r3, r2, r3
 801f3a2:	2b00      	cmp	r3, #0
 801f3a4:	db2d      	blt.n	801f402 <tcp_timewait_input+0x9e>
 801f3a6:	4b25      	ldr	r3, [pc, #148]	; (801f43c <tcp_timewait_input+0xd8>)
 801f3a8:	681a      	ldr	r2, [r3, #0]
 801f3aa:	687b      	ldr	r3, [r7, #4]
 801f3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3ae:	6879      	ldr	r1, [r7, #4]
 801f3b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801f3b2:	440b      	add	r3, r1
 801f3b4:	1ad3      	subs	r3, r2, r3
 801f3b6:	2b00      	cmp	r3, #0
 801f3b8:	dc23      	bgt.n	801f402 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f3ba:	4b21      	ldr	r3, [pc, #132]	; (801f440 <tcp_timewait_input+0xdc>)
 801f3bc:	6819      	ldr	r1, [r3, #0]
 801f3be:	4b21      	ldr	r3, [pc, #132]	; (801f444 <tcp_timewait_input+0xe0>)
 801f3c0:	881b      	ldrh	r3, [r3, #0]
 801f3c2:	461a      	mov	r2, r3
 801f3c4:	4b1d      	ldr	r3, [pc, #116]	; (801f43c <tcp_timewait_input+0xd8>)
 801f3c6:	681b      	ldr	r3, [r3, #0]
 801f3c8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f3ca:	4b1f      	ldr	r3, [pc, #124]	; (801f448 <tcp_timewait_input+0xe4>)
 801f3cc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f3ce:	885b      	ldrh	r3, [r3, #2]
 801f3d0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f3d2:	4a1d      	ldr	r2, [pc, #116]	; (801f448 <tcp_timewait_input+0xe4>)
 801f3d4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f3d6:	8812      	ldrh	r2, [r2, #0]
 801f3d8:	b292      	uxth	r2, r2
 801f3da:	9202      	str	r2, [sp, #8]
 801f3dc:	9301      	str	r3, [sp, #4]
 801f3de:	4b1b      	ldr	r3, [pc, #108]	; (801f44c <tcp_timewait_input+0xe8>)
 801f3e0:	9300      	str	r3, [sp, #0]
 801f3e2:	4b1b      	ldr	r3, [pc, #108]	; (801f450 <tcp_timewait_input+0xec>)
 801f3e4:	4602      	mov	r2, r0
 801f3e6:	6878      	ldr	r0, [r7, #4]
 801f3e8:	f003 fac8 	bl	802297c <tcp_rst>
      return;
 801f3ec:	e01b      	b.n	801f426 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801f3ee:	4b0f      	ldr	r3, [pc, #60]	; (801f42c <tcp_timewait_input+0xc8>)
 801f3f0:	781b      	ldrb	r3, [r3, #0]
 801f3f2:	f003 0301 	and.w	r3, r3, #1
 801f3f6:	2b00      	cmp	r3, #0
 801f3f8:	d003      	beq.n	801f402 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801f3fa:	4b16      	ldr	r3, [pc, #88]	; (801f454 <tcp_timewait_input+0xf0>)
 801f3fc:	681a      	ldr	r2, [r3, #0]
 801f3fe:	687b      	ldr	r3, [r7, #4]
 801f400:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801f402:	4b10      	ldr	r3, [pc, #64]	; (801f444 <tcp_timewait_input+0xe0>)
 801f404:	881b      	ldrh	r3, [r3, #0]
 801f406:	2b00      	cmp	r3, #0
 801f408:	d00c      	beq.n	801f424 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801f40a:	687b      	ldr	r3, [r7, #4]
 801f40c:	8b5b      	ldrh	r3, [r3, #26]
 801f40e:	f043 0302 	orr.w	r3, r3, #2
 801f412:	b29a      	uxth	r2, r3
 801f414:	687b      	ldr	r3, [r7, #4]
 801f416:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801f418:	6878      	ldr	r0, [r7, #4]
 801f41a:	f002 fcfb 	bl	8021e14 <tcp_output>
  }
  return;
 801f41e:	e001      	b.n	801f424 <tcp_timewait_input+0xc0>
    return;
 801f420:	bf00      	nop
 801f422:	e000      	b.n	801f426 <tcp_timewait_input+0xc2>
  return;
 801f424:	bf00      	nop
}
 801f426:	3708      	adds	r7, #8
 801f428:	46bd      	mov	sp, r7
 801f42a:	bd80      	pop	{r7, pc}
 801f42c:	20005a54 	.word	0x20005a54
 801f430:	0802e8f4 	.word	0x0802e8f4
 801f434:	0802eb0c 	.word	0x0802eb0c
 801f438:	0802e940 	.word	0x0802e940
 801f43c:	20005a48 	.word	0x20005a48
 801f440:	20005a4c 	.word	0x20005a4c
 801f444:	20005a52 	.word	0x20005a52
 801f448:	20005a38 	.word	0x20005a38
 801f44c:	20012be8 	.word	0x20012be8
 801f450:	20012bec 	.word	0x20012bec
 801f454:	2001d520 	.word	0x2001d520

0801f458 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801f458:	b590      	push	{r4, r7, lr}
 801f45a:	b08d      	sub	sp, #52	; 0x34
 801f45c:	af04      	add	r7, sp, #16
 801f45e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801f460:	2300      	movs	r3, #0
 801f462:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801f464:	2300      	movs	r3, #0
 801f466:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801f468:	687b      	ldr	r3, [r7, #4]
 801f46a:	2b00      	cmp	r3, #0
 801f46c:	d106      	bne.n	801f47c <tcp_process+0x24>
 801f46e:	4ba5      	ldr	r3, [pc, #660]	; (801f704 <tcp_process+0x2ac>)
 801f470:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801f474:	49a4      	ldr	r1, [pc, #656]	; (801f708 <tcp_process+0x2b0>)
 801f476:	48a5      	ldr	r0, [pc, #660]	; (801f70c <tcp_process+0x2b4>)
 801f478:	f007 fbee 	bl	8026c58 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801f47c:	4ba4      	ldr	r3, [pc, #656]	; (801f710 <tcp_process+0x2b8>)
 801f47e:	781b      	ldrb	r3, [r3, #0]
 801f480:	f003 0304 	and.w	r3, r3, #4
 801f484:	2b00      	cmp	r3, #0
 801f486:	d04e      	beq.n	801f526 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801f488:	687b      	ldr	r3, [r7, #4]
 801f48a:	7d1b      	ldrb	r3, [r3, #20]
 801f48c:	2b02      	cmp	r3, #2
 801f48e:	d108      	bne.n	801f4a2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801f490:	687b      	ldr	r3, [r7, #4]
 801f492:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f494:	4b9f      	ldr	r3, [pc, #636]	; (801f714 <tcp_process+0x2bc>)
 801f496:	681b      	ldr	r3, [r3, #0]
 801f498:	429a      	cmp	r2, r3
 801f49a:	d123      	bne.n	801f4e4 <tcp_process+0x8c>
        acceptable = 1;
 801f49c:	2301      	movs	r3, #1
 801f49e:	76fb      	strb	r3, [r7, #27]
 801f4a0:	e020      	b.n	801f4e4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801f4a2:	687b      	ldr	r3, [r7, #4]
 801f4a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f4a6:	4b9c      	ldr	r3, [pc, #624]	; (801f718 <tcp_process+0x2c0>)
 801f4a8:	681b      	ldr	r3, [r3, #0]
 801f4aa:	429a      	cmp	r2, r3
 801f4ac:	d102      	bne.n	801f4b4 <tcp_process+0x5c>
        acceptable = 1;
 801f4ae:	2301      	movs	r3, #1
 801f4b0:	76fb      	strb	r3, [r7, #27]
 801f4b2:	e017      	b.n	801f4e4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801f4b4:	4b98      	ldr	r3, [pc, #608]	; (801f718 <tcp_process+0x2c0>)
 801f4b6:	681a      	ldr	r2, [r3, #0]
 801f4b8:	687b      	ldr	r3, [r7, #4]
 801f4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4bc:	1ad3      	subs	r3, r2, r3
 801f4be:	2b00      	cmp	r3, #0
 801f4c0:	db10      	blt.n	801f4e4 <tcp_process+0x8c>
 801f4c2:	4b95      	ldr	r3, [pc, #596]	; (801f718 <tcp_process+0x2c0>)
 801f4c4:	681a      	ldr	r2, [r3, #0]
 801f4c6:	687b      	ldr	r3, [r7, #4]
 801f4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4ca:	6879      	ldr	r1, [r7, #4]
 801f4cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801f4ce:	440b      	add	r3, r1
 801f4d0:	1ad3      	subs	r3, r2, r3
 801f4d2:	2b00      	cmp	r3, #0
 801f4d4:	dc06      	bgt.n	801f4e4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801f4d6:	687b      	ldr	r3, [r7, #4]
 801f4d8:	8b5b      	ldrh	r3, [r3, #26]
 801f4da:	f043 0302 	orr.w	r3, r3, #2
 801f4de:	b29a      	uxth	r2, r3
 801f4e0:	687b      	ldr	r3, [r7, #4]
 801f4e2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801f4e4:	7efb      	ldrb	r3, [r7, #27]
 801f4e6:	2b00      	cmp	r3, #0
 801f4e8:	d01b      	beq.n	801f522 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801f4ea:	687b      	ldr	r3, [r7, #4]
 801f4ec:	7d1b      	ldrb	r3, [r3, #20]
 801f4ee:	2b00      	cmp	r3, #0
 801f4f0:	d106      	bne.n	801f500 <tcp_process+0xa8>
 801f4f2:	4b84      	ldr	r3, [pc, #528]	; (801f704 <tcp_process+0x2ac>)
 801f4f4:	f44f 724e 	mov.w	r2, #824	; 0x338
 801f4f8:	4988      	ldr	r1, [pc, #544]	; (801f71c <tcp_process+0x2c4>)
 801f4fa:	4884      	ldr	r0, [pc, #528]	; (801f70c <tcp_process+0x2b4>)
 801f4fc:	f007 fbac 	bl	8026c58 <iprintf>
      recv_flags |= TF_RESET;
 801f500:	4b87      	ldr	r3, [pc, #540]	; (801f720 <tcp_process+0x2c8>)
 801f502:	781b      	ldrb	r3, [r3, #0]
 801f504:	f043 0308 	orr.w	r3, r3, #8
 801f508:	b2da      	uxtb	r2, r3
 801f50a:	4b85      	ldr	r3, [pc, #532]	; (801f720 <tcp_process+0x2c8>)
 801f50c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801f50e:	687b      	ldr	r3, [r7, #4]
 801f510:	8b5b      	ldrh	r3, [r3, #26]
 801f512:	f023 0301 	bic.w	r3, r3, #1
 801f516:	b29a      	uxth	r2, r3
 801f518:	687b      	ldr	r3, [r7, #4]
 801f51a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801f51c:	f06f 030d 	mvn.w	r3, #13
 801f520:	e37a      	b.n	801fc18 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801f522:	2300      	movs	r3, #0
 801f524:	e378      	b.n	801fc18 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801f526:	4b7a      	ldr	r3, [pc, #488]	; (801f710 <tcp_process+0x2b8>)
 801f528:	781b      	ldrb	r3, [r3, #0]
 801f52a:	f003 0302 	and.w	r3, r3, #2
 801f52e:	2b00      	cmp	r3, #0
 801f530:	d010      	beq.n	801f554 <tcp_process+0xfc>
 801f532:	687b      	ldr	r3, [r7, #4]
 801f534:	7d1b      	ldrb	r3, [r3, #20]
 801f536:	2b02      	cmp	r3, #2
 801f538:	d00c      	beq.n	801f554 <tcp_process+0xfc>
 801f53a:	687b      	ldr	r3, [r7, #4]
 801f53c:	7d1b      	ldrb	r3, [r3, #20]
 801f53e:	2b03      	cmp	r3, #3
 801f540:	d008      	beq.n	801f554 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801f542:	687b      	ldr	r3, [r7, #4]
 801f544:	8b5b      	ldrh	r3, [r3, #26]
 801f546:	f043 0302 	orr.w	r3, r3, #2
 801f54a:	b29a      	uxth	r2, r3
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801f550:	2300      	movs	r3, #0
 801f552:	e361      	b.n	801fc18 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801f554:	687b      	ldr	r3, [r7, #4]
 801f556:	8b5b      	ldrh	r3, [r3, #26]
 801f558:	f003 0310 	and.w	r3, r3, #16
 801f55c:	2b00      	cmp	r3, #0
 801f55e:	d103      	bne.n	801f568 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801f560:	4b70      	ldr	r3, [pc, #448]	; (801f724 <tcp_process+0x2cc>)
 801f562:	681a      	ldr	r2, [r3, #0]
 801f564:	687b      	ldr	r3, [r7, #4]
 801f566:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801f568:	687b      	ldr	r3, [r7, #4]
 801f56a:	2200      	movs	r2, #0
 801f56c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801f570:	687b      	ldr	r3, [r7, #4]
 801f572:	2200      	movs	r2, #0
 801f574:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801f578:	6878      	ldr	r0, [r7, #4]
 801f57a:	f001 fc2d 	bl	8020dd8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801f57e:	687b      	ldr	r3, [r7, #4]
 801f580:	7d1b      	ldrb	r3, [r3, #20]
 801f582:	3b02      	subs	r3, #2
 801f584:	2b07      	cmp	r3, #7
 801f586:	f200 8337 	bhi.w	801fbf8 <tcp_process+0x7a0>
 801f58a:	a201      	add	r2, pc, #4	; (adr r2, 801f590 <tcp_process+0x138>)
 801f58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f590:	0801f5b1 	.word	0x0801f5b1
 801f594:	0801f7e1 	.word	0x0801f7e1
 801f598:	0801f959 	.word	0x0801f959
 801f59c:	0801f983 	.word	0x0801f983
 801f5a0:	0801faa7 	.word	0x0801faa7
 801f5a4:	0801f959 	.word	0x0801f959
 801f5a8:	0801fb33 	.word	0x0801fb33
 801f5ac:	0801fbc3 	.word	0x0801fbc3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801f5b0:	4b57      	ldr	r3, [pc, #348]	; (801f710 <tcp_process+0x2b8>)
 801f5b2:	781b      	ldrb	r3, [r3, #0]
 801f5b4:	f003 0310 	and.w	r3, r3, #16
 801f5b8:	2b00      	cmp	r3, #0
 801f5ba:	f000 80e4 	beq.w	801f786 <tcp_process+0x32e>
 801f5be:	4b54      	ldr	r3, [pc, #336]	; (801f710 <tcp_process+0x2b8>)
 801f5c0:	781b      	ldrb	r3, [r3, #0]
 801f5c2:	f003 0302 	and.w	r3, r3, #2
 801f5c6:	2b00      	cmp	r3, #0
 801f5c8:	f000 80dd 	beq.w	801f786 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801f5cc:	687b      	ldr	r3, [r7, #4]
 801f5ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f5d0:	1c5a      	adds	r2, r3, #1
 801f5d2:	4b50      	ldr	r3, [pc, #320]	; (801f714 <tcp_process+0x2bc>)
 801f5d4:	681b      	ldr	r3, [r3, #0]
 801f5d6:	429a      	cmp	r2, r3
 801f5d8:	f040 80d5 	bne.w	801f786 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801f5dc:	4b4e      	ldr	r3, [pc, #312]	; (801f718 <tcp_process+0x2c0>)
 801f5de:	681b      	ldr	r3, [r3, #0]
 801f5e0:	1c5a      	adds	r2, r3, #1
 801f5e2:	687b      	ldr	r3, [r7, #4]
 801f5e4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801f5e6:	687b      	ldr	r3, [r7, #4]
 801f5e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f5ea:	687b      	ldr	r3, [r7, #4]
 801f5ec:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801f5ee:	4b49      	ldr	r3, [pc, #292]	; (801f714 <tcp_process+0x2bc>)
 801f5f0:	681a      	ldr	r2, [r3, #0]
 801f5f2:	687b      	ldr	r3, [r7, #4]
 801f5f4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801f5f6:	4b4c      	ldr	r3, [pc, #304]	; (801f728 <tcp_process+0x2d0>)
 801f5f8:	681b      	ldr	r3, [r3, #0]
 801f5fa:	89db      	ldrh	r3, [r3, #14]
 801f5fc:	b29a      	uxth	r2, r3
 801f5fe:	687b      	ldr	r3, [r7, #4]
 801f600:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801f604:	687b      	ldr	r3, [r7, #4]
 801f606:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801f60a:	687b      	ldr	r3, [r7, #4]
 801f60c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801f610:	4b41      	ldr	r3, [pc, #260]	; (801f718 <tcp_process+0x2c0>)
 801f612:	681b      	ldr	r3, [r3, #0]
 801f614:	1e5a      	subs	r2, r3, #1
 801f616:	687b      	ldr	r3, [r7, #4]
 801f618:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801f61a:	687b      	ldr	r3, [r7, #4]
 801f61c:	2204      	movs	r2, #4
 801f61e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f620:	687b      	ldr	r3, [r7, #4]
 801f622:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801f624:	687b      	ldr	r3, [r7, #4]
 801f626:	3304      	adds	r3, #4
 801f628:	4618      	mov	r0, r3
 801f62a:	f005 fa6b 	bl	8024b04 <ip4_route>
 801f62e:	4601      	mov	r1, r0
 801f630:	687b      	ldr	r3, [r7, #4]
 801f632:	3304      	adds	r3, #4
 801f634:	461a      	mov	r2, r3
 801f636:	4620      	mov	r0, r4
 801f638:	f7ff f88e 	bl	801e758 <tcp_eff_send_mss_netif>
 801f63c:	4603      	mov	r3, r0
 801f63e:	461a      	mov	r2, r3
 801f640:	687b      	ldr	r3, [r7, #4]
 801f642:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f644:	687b      	ldr	r3, [r7, #4]
 801f646:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f648:	009a      	lsls	r2, r3, #2
 801f64a:	687b      	ldr	r3, [r7, #4]
 801f64c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f64e:	005b      	lsls	r3, r3, #1
 801f650:	f241 111c 	movw	r1, #4380	; 0x111c
 801f654:	428b      	cmp	r3, r1
 801f656:	bf38      	it	cc
 801f658:	460b      	movcc	r3, r1
 801f65a:	429a      	cmp	r2, r3
 801f65c:	d204      	bcs.n	801f668 <tcp_process+0x210>
 801f65e:	687b      	ldr	r3, [r7, #4]
 801f660:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f662:	009b      	lsls	r3, r3, #2
 801f664:	b29b      	uxth	r3, r3
 801f666:	e00d      	b.n	801f684 <tcp_process+0x22c>
 801f668:	687b      	ldr	r3, [r7, #4]
 801f66a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f66c:	005b      	lsls	r3, r3, #1
 801f66e:	f241 121c 	movw	r2, #4380	; 0x111c
 801f672:	4293      	cmp	r3, r2
 801f674:	d904      	bls.n	801f680 <tcp_process+0x228>
 801f676:	687b      	ldr	r3, [r7, #4]
 801f678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f67a:	005b      	lsls	r3, r3, #1
 801f67c:	b29b      	uxth	r3, r3
 801f67e:	e001      	b.n	801f684 <tcp_process+0x22c>
 801f680:	f241 131c 	movw	r3, #4380	; 0x111c
 801f684:	687a      	ldr	r2, [r7, #4]
 801f686:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801f68a:	687b      	ldr	r3, [r7, #4]
 801f68c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801f690:	2b00      	cmp	r3, #0
 801f692:	d106      	bne.n	801f6a2 <tcp_process+0x24a>
 801f694:	4b1b      	ldr	r3, [pc, #108]	; (801f704 <tcp_process+0x2ac>)
 801f696:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801f69a:	4924      	ldr	r1, [pc, #144]	; (801f72c <tcp_process+0x2d4>)
 801f69c:	481b      	ldr	r0, [pc, #108]	; (801f70c <tcp_process+0x2b4>)
 801f69e:	f007 fadb 	bl	8026c58 <iprintf>
        --pcb->snd_queuelen;
 801f6a2:	687b      	ldr	r3, [r7, #4]
 801f6a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801f6a8:	3b01      	subs	r3, #1
 801f6aa:	b29a      	uxth	r2, r3
 801f6ac:	687b      	ldr	r3, [r7, #4]
 801f6ae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801f6b2:	687b      	ldr	r3, [r7, #4]
 801f6b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f6b6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801f6b8:	69fb      	ldr	r3, [r7, #28]
 801f6ba:	2b00      	cmp	r3, #0
 801f6bc:	d111      	bne.n	801f6e2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801f6be:	687b      	ldr	r3, [r7, #4]
 801f6c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f6c2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801f6c4:	69fb      	ldr	r3, [r7, #28]
 801f6c6:	2b00      	cmp	r3, #0
 801f6c8:	d106      	bne.n	801f6d8 <tcp_process+0x280>
 801f6ca:	4b0e      	ldr	r3, [pc, #56]	; (801f704 <tcp_process+0x2ac>)
 801f6cc:	f44f 725d 	mov.w	r2, #884	; 0x374
 801f6d0:	4917      	ldr	r1, [pc, #92]	; (801f730 <tcp_process+0x2d8>)
 801f6d2:	480e      	ldr	r0, [pc, #56]	; (801f70c <tcp_process+0x2b4>)
 801f6d4:	f007 fac0 	bl	8026c58 <iprintf>
          pcb->unsent = rseg->next;
 801f6d8:	69fb      	ldr	r3, [r7, #28]
 801f6da:	681a      	ldr	r2, [r3, #0]
 801f6dc:	687b      	ldr	r3, [r7, #4]
 801f6de:	66da      	str	r2, [r3, #108]	; 0x6c
 801f6e0:	e003      	b.n	801f6ea <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801f6e2:	69fb      	ldr	r3, [r7, #28]
 801f6e4:	681a      	ldr	r2, [r3, #0]
 801f6e6:	687b      	ldr	r3, [r7, #4]
 801f6e8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801f6ea:	69f8      	ldr	r0, [r7, #28]
 801f6ec:	f7fe fc51 	bl	801df92 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801f6f0:	687b      	ldr	r3, [r7, #4]
 801f6f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f6f4:	2b00      	cmp	r3, #0
 801f6f6:	d11d      	bne.n	801f734 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801f6f8:	687b      	ldr	r3, [r7, #4]
 801f6fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f6fe:	861a      	strh	r2, [r3, #48]	; 0x30
 801f700:	e01f      	b.n	801f742 <tcp_process+0x2ea>
 801f702:	bf00      	nop
 801f704:	0802e8f4 	.word	0x0802e8f4
 801f708:	0802eb2c 	.word	0x0802eb2c
 801f70c:	0802e940 	.word	0x0802e940
 801f710:	20005a54 	.word	0x20005a54
 801f714:	20005a4c 	.word	0x20005a4c
 801f718:	20005a48 	.word	0x20005a48
 801f71c:	0802eb48 	.word	0x0802eb48
 801f720:	20005a55 	.word	0x20005a55
 801f724:	2001d520 	.word	0x2001d520
 801f728:	20005a38 	.word	0x20005a38
 801f72c:	0802eb68 	.word	0x0802eb68
 801f730:	0802eb80 	.word	0x0802eb80
        } else {
          pcb->rtime = 0;
 801f734:	687b      	ldr	r3, [r7, #4]
 801f736:	2200      	movs	r2, #0
 801f738:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801f73a:	687b      	ldr	r3, [r7, #4]
 801f73c:	2200      	movs	r2, #0
 801f73e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801f742:	687b      	ldr	r3, [r7, #4]
 801f744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f748:	2b00      	cmp	r3, #0
 801f74a:	d00a      	beq.n	801f762 <tcp_process+0x30a>
 801f74c:	687b      	ldr	r3, [r7, #4]
 801f74e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f752:	687a      	ldr	r2, [r7, #4]
 801f754:	6910      	ldr	r0, [r2, #16]
 801f756:	2200      	movs	r2, #0
 801f758:	6879      	ldr	r1, [r7, #4]
 801f75a:	4798      	blx	r3
 801f75c:	4603      	mov	r3, r0
 801f75e:	76bb      	strb	r3, [r7, #26]
 801f760:	e001      	b.n	801f766 <tcp_process+0x30e>
 801f762:	2300      	movs	r3, #0
 801f764:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801f766:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801f76a:	f113 0f0d 	cmn.w	r3, #13
 801f76e:	d102      	bne.n	801f776 <tcp_process+0x31e>
          return ERR_ABRT;
 801f770:	f06f 030c 	mvn.w	r3, #12
 801f774:	e250      	b.n	801fc18 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801f776:	687b      	ldr	r3, [r7, #4]
 801f778:	8b5b      	ldrh	r3, [r3, #26]
 801f77a:	f043 0302 	orr.w	r3, r3, #2
 801f77e:	b29a      	uxth	r2, r3
 801f780:	687b      	ldr	r3, [r7, #4]
 801f782:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801f784:	e23a      	b.n	801fbfc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801f786:	4b9d      	ldr	r3, [pc, #628]	; (801f9fc <tcp_process+0x5a4>)
 801f788:	781b      	ldrb	r3, [r3, #0]
 801f78a:	f003 0310 	and.w	r3, r3, #16
 801f78e:	2b00      	cmp	r3, #0
 801f790:	f000 8234 	beq.w	801fbfc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f794:	4b9a      	ldr	r3, [pc, #616]	; (801fa00 <tcp_process+0x5a8>)
 801f796:	6819      	ldr	r1, [r3, #0]
 801f798:	4b9a      	ldr	r3, [pc, #616]	; (801fa04 <tcp_process+0x5ac>)
 801f79a:	881b      	ldrh	r3, [r3, #0]
 801f79c:	461a      	mov	r2, r3
 801f79e:	4b9a      	ldr	r3, [pc, #616]	; (801fa08 <tcp_process+0x5b0>)
 801f7a0:	681b      	ldr	r3, [r3, #0]
 801f7a2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f7a4:	4b99      	ldr	r3, [pc, #612]	; (801fa0c <tcp_process+0x5b4>)
 801f7a6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f7a8:	885b      	ldrh	r3, [r3, #2]
 801f7aa:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f7ac:	4a97      	ldr	r2, [pc, #604]	; (801fa0c <tcp_process+0x5b4>)
 801f7ae:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f7b0:	8812      	ldrh	r2, [r2, #0]
 801f7b2:	b292      	uxth	r2, r2
 801f7b4:	9202      	str	r2, [sp, #8]
 801f7b6:	9301      	str	r3, [sp, #4]
 801f7b8:	4b95      	ldr	r3, [pc, #596]	; (801fa10 <tcp_process+0x5b8>)
 801f7ba:	9300      	str	r3, [sp, #0]
 801f7bc:	4b95      	ldr	r3, [pc, #596]	; (801fa14 <tcp_process+0x5bc>)
 801f7be:	4602      	mov	r2, r0
 801f7c0:	6878      	ldr	r0, [r7, #4]
 801f7c2:	f003 f8db 	bl	802297c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801f7c6:	687b      	ldr	r3, [r7, #4]
 801f7c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f7cc:	2b05      	cmp	r3, #5
 801f7ce:	f200 8215 	bhi.w	801fbfc <tcp_process+0x7a4>
          pcb->rtime = 0;
 801f7d2:	687b      	ldr	r3, [r7, #4]
 801f7d4:	2200      	movs	r2, #0
 801f7d6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801f7d8:	6878      	ldr	r0, [r7, #4]
 801f7da:	f002 fea5 	bl	8022528 <tcp_rexmit_rto>
      break;
 801f7de:	e20d      	b.n	801fbfc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801f7e0:	4b86      	ldr	r3, [pc, #536]	; (801f9fc <tcp_process+0x5a4>)
 801f7e2:	781b      	ldrb	r3, [r3, #0]
 801f7e4:	f003 0310 	and.w	r3, r3, #16
 801f7e8:	2b00      	cmp	r3, #0
 801f7ea:	f000 80a1 	beq.w	801f930 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801f7ee:	4b84      	ldr	r3, [pc, #528]	; (801fa00 <tcp_process+0x5a8>)
 801f7f0:	681a      	ldr	r2, [r3, #0]
 801f7f2:	687b      	ldr	r3, [r7, #4]
 801f7f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f7f6:	1ad3      	subs	r3, r2, r3
 801f7f8:	3b01      	subs	r3, #1
 801f7fa:	2b00      	cmp	r3, #0
 801f7fc:	db7e      	blt.n	801f8fc <tcp_process+0x4a4>
 801f7fe:	4b80      	ldr	r3, [pc, #512]	; (801fa00 <tcp_process+0x5a8>)
 801f800:	681a      	ldr	r2, [r3, #0]
 801f802:	687b      	ldr	r3, [r7, #4]
 801f804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f806:	1ad3      	subs	r3, r2, r3
 801f808:	2b00      	cmp	r3, #0
 801f80a:	dc77      	bgt.n	801f8fc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801f80c:	687b      	ldr	r3, [r7, #4]
 801f80e:	2204      	movs	r2, #4
 801f810:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801f812:	687b      	ldr	r3, [r7, #4]
 801f814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801f816:	2b00      	cmp	r3, #0
 801f818:	d102      	bne.n	801f820 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801f81a:	23fa      	movs	r3, #250	; 0xfa
 801f81c:	76bb      	strb	r3, [r7, #26]
 801f81e:	e01d      	b.n	801f85c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801f820:	687b      	ldr	r3, [r7, #4]
 801f822:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801f824:	699b      	ldr	r3, [r3, #24]
 801f826:	2b00      	cmp	r3, #0
 801f828:	d106      	bne.n	801f838 <tcp_process+0x3e0>
 801f82a:	4b7b      	ldr	r3, [pc, #492]	; (801fa18 <tcp_process+0x5c0>)
 801f82c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801f830:	497a      	ldr	r1, [pc, #488]	; (801fa1c <tcp_process+0x5c4>)
 801f832:	487b      	ldr	r0, [pc, #492]	; (801fa20 <tcp_process+0x5c8>)
 801f834:	f007 fa10 	bl	8026c58 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801f838:	687b      	ldr	r3, [r7, #4]
 801f83a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801f83c:	699b      	ldr	r3, [r3, #24]
 801f83e:	2b00      	cmp	r3, #0
 801f840:	d00a      	beq.n	801f858 <tcp_process+0x400>
 801f842:	687b      	ldr	r3, [r7, #4]
 801f844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801f846:	699b      	ldr	r3, [r3, #24]
 801f848:	687a      	ldr	r2, [r7, #4]
 801f84a:	6910      	ldr	r0, [r2, #16]
 801f84c:	2200      	movs	r2, #0
 801f84e:	6879      	ldr	r1, [r7, #4]
 801f850:	4798      	blx	r3
 801f852:	4603      	mov	r3, r0
 801f854:	76bb      	strb	r3, [r7, #26]
 801f856:	e001      	b.n	801f85c <tcp_process+0x404>
 801f858:	23f0      	movs	r3, #240	; 0xf0
 801f85a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801f85c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801f860:	2b00      	cmp	r3, #0
 801f862:	d00a      	beq.n	801f87a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801f864:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801f868:	f113 0f0d 	cmn.w	r3, #13
 801f86c:	d002      	beq.n	801f874 <tcp_process+0x41c>
              tcp_abort(pcb);
 801f86e:	6878      	ldr	r0, [r7, #4]
 801f870:	f7fd fbd2 	bl	801d018 <tcp_abort>
            }
            return ERR_ABRT;
 801f874:	f06f 030c 	mvn.w	r3, #12
 801f878:	e1ce      	b.n	801fc18 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801f87a:	6878      	ldr	r0, [r7, #4]
 801f87c:	f000 fae0 	bl	801fe40 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801f880:	4b68      	ldr	r3, [pc, #416]	; (801fa24 <tcp_process+0x5cc>)
 801f882:	881b      	ldrh	r3, [r3, #0]
 801f884:	2b00      	cmp	r3, #0
 801f886:	d005      	beq.n	801f894 <tcp_process+0x43c>
            recv_acked--;
 801f888:	4b66      	ldr	r3, [pc, #408]	; (801fa24 <tcp_process+0x5cc>)
 801f88a:	881b      	ldrh	r3, [r3, #0]
 801f88c:	3b01      	subs	r3, #1
 801f88e:	b29a      	uxth	r2, r3
 801f890:	4b64      	ldr	r3, [pc, #400]	; (801fa24 <tcp_process+0x5cc>)
 801f892:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f894:	687b      	ldr	r3, [r7, #4]
 801f896:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f898:	009a      	lsls	r2, r3, #2
 801f89a:	687b      	ldr	r3, [r7, #4]
 801f89c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f89e:	005b      	lsls	r3, r3, #1
 801f8a0:	f241 111c 	movw	r1, #4380	; 0x111c
 801f8a4:	428b      	cmp	r3, r1
 801f8a6:	bf38      	it	cc
 801f8a8:	460b      	movcc	r3, r1
 801f8aa:	429a      	cmp	r2, r3
 801f8ac:	d204      	bcs.n	801f8b8 <tcp_process+0x460>
 801f8ae:	687b      	ldr	r3, [r7, #4]
 801f8b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f8b2:	009b      	lsls	r3, r3, #2
 801f8b4:	b29b      	uxth	r3, r3
 801f8b6:	e00d      	b.n	801f8d4 <tcp_process+0x47c>
 801f8b8:	687b      	ldr	r3, [r7, #4]
 801f8ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f8bc:	005b      	lsls	r3, r3, #1
 801f8be:	f241 121c 	movw	r2, #4380	; 0x111c
 801f8c2:	4293      	cmp	r3, r2
 801f8c4:	d904      	bls.n	801f8d0 <tcp_process+0x478>
 801f8c6:	687b      	ldr	r3, [r7, #4]
 801f8c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f8ca:	005b      	lsls	r3, r3, #1
 801f8cc:	b29b      	uxth	r3, r3
 801f8ce:	e001      	b.n	801f8d4 <tcp_process+0x47c>
 801f8d0:	f241 131c 	movw	r3, #4380	; 0x111c
 801f8d4:	687a      	ldr	r2, [r7, #4]
 801f8d6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801f8da:	4b53      	ldr	r3, [pc, #332]	; (801fa28 <tcp_process+0x5d0>)
 801f8dc:	781b      	ldrb	r3, [r3, #0]
 801f8de:	f003 0320 	and.w	r3, r3, #32
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	d037      	beq.n	801f956 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801f8e6:	687b      	ldr	r3, [r7, #4]
 801f8e8:	8b5b      	ldrh	r3, [r3, #26]
 801f8ea:	f043 0302 	orr.w	r3, r3, #2
 801f8ee:	b29a      	uxth	r2, r3
 801f8f0:	687b      	ldr	r3, [r7, #4]
 801f8f2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801f8f4:	687b      	ldr	r3, [r7, #4]
 801f8f6:	2207      	movs	r2, #7
 801f8f8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801f8fa:	e02c      	b.n	801f956 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f8fc:	4b40      	ldr	r3, [pc, #256]	; (801fa00 <tcp_process+0x5a8>)
 801f8fe:	6819      	ldr	r1, [r3, #0]
 801f900:	4b40      	ldr	r3, [pc, #256]	; (801fa04 <tcp_process+0x5ac>)
 801f902:	881b      	ldrh	r3, [r3, #0]
 801f904:	461a      	mov	r2, r3
 801f906:	4b40      	ldr	r3, [pc, #256]	; (801fa08 <tcp_process+0x5b0>)
 801f908:	681b      	ldr	r3, [r3, #0]
 801f90a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f90c:	4b3f      	ldr	r3, [pc, #252]	; (801fa0c <tcp_process+0x5b4>)
 801f90e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f910:	885b      	ldrh	r3, [r3, #2]
 801f912:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f914:	4a3d      	ldr	r2, [pc, #244]	; (801fa0c <tcp_process+0x5b4>)
 801f916:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f918:	8812      	ldrh	r2, [r2, #0]
 801f91a:	b292      	uxth	r2, r2
 801f91c:	9202      	str	r2, [sp, #8]
 801f91e:	9301      	str	r3, [sp, #4]
 801f920:	4b3b      	ldr	r3, [pc, #236]	; (801fa10 <tcp_process+0x5b8>)
 801f922:	9300      	str	r3, [sp, #0]
 801f924:	4b3b      	ldr	r3, [pc, #236]	; (801fa14 <tcp_process+0x5bc>)
 801f926:	4602      	mov	r2, r0
 801f928:	6878      	ldr	r0, [r7, #4]
 801f92a:	f003 f827 	bl	802297c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801f92e:	e167      	b.n	801fc00 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801f930:	4b32      	ldr	r3, [pc, #200]	; (801f9fc <tcp_process+0x5a4>)
 801f932:	781b      	ldrb	r3, [r3, #0]
 801f934:	f003 0302 	and.w	r3, r3, #2
 801f938:	2b00      	cmp	r3, #0
 801f93a:	f000 8161 	beq.w	801fc00 <tcp_process+0x7a8>
 801f93e:	687b      	ldr	r3, [r7, #4]
 801f940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f942:	1e5a      	subs	r2, r3, #1
 801f944:	4b30      	ldr	r3, [pc, #192]	; (801fa08 <tcp_process+0x5b0>)
 801f946:	681b      	ldr	r3, [r3, #0]
 801f948:	429a      	cmp	r2, r3
 801f94a:	f040 8159 	bne.w	801fc00 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801f94e:	6878      	ldr	r0, [r7, #4]
 801f950:	f002 fe0c 	bl	802256c <tcp_rexmit>
      break;
 801f954:	e154      	b.n	801fc00 <tcp_process+0x7a8>
 801f956:	e153      	b.n	801fc00 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801f958:	6878      	ldr	r0, [r7, #4]
 801f95a:	f000 fa71 	bl	801fe40 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801f95e:	4b32      	ldr	r3, [pc, #200]	; (801fa28 <tcp_process+0x5d0>)
 801f960:	781b      	ldrb	r3, [r3, #0]
 801f962:	f003 0320 	and.w	r3, r3, #32
 801f966:	2b00      	cmp	r3, #0
 801f968:	f000 814c 	beq.w	801fc04 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	8b5b      	ldrh	r3, [r3, #26]
 801f970:	f043 0302 	orr.w	r3, r3, #2
 801f974:	b29a      	uxth	r2, r3
 801f976:	687b      	ldr	r3, [r7, #4]
 801f978:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801f97a:	687b      	ldr	r3, [r7, #4]
 801f97c:	2207      	movs	r2, #7
 801f97e:	751a      	strb	r2, [r3, #20]
      }
      break;
 801f980:	e140      	b.n	801fc04 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801f982:	6878      	ldr	r0, [r7, #4]
 801f984:	f000 fa5c 	bl	801fe40 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801f988:	4b27      	ldr	r3, [pc, #156]	; (801fa28 <tcp_process+0x5d0>)
 801f98a:	781b      	ldrb	r3, [r3, #0]
 801f98c:	f003 0320 	and.w	r3, r3, #32
 801f990:	2b00      	cmp	r3, #0
 801f992:	d071      	beq.n	801fa78 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f994:	4b19      	ldr	r3, [pc, #100]	; (801f9fc <tcp_process+0x5a4>)
 801f996:	781b      	ldrb	r3, [r3, #0]
 801f998:	f003 0310 	and.w	r3, r3, #16
 801f99c:	2b00      	cmp	r3, #0
 801f99e:	d060      	beq.n	801fa62 <tcp_process+0x60a>
 801f9a0:	687b      	ldr	r3, [r7, #4]
 801f9a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f9a4:	4b16      	ldr	r3, [pc, #88]	; (801fa00 <tcp_process+0x5a8>)
 801f9a6:	681b      	ldr	r3, [r3, #0]
 801f9a8:	429a      	cmp	r2, r3
 801f9aa:	d15a      	bne.n	801fa62 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801f9ac:	687b      	ldr	r3, [r7, #4]
 801f9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f9b0:	2b00      	cmp	r3, #0
 801f9b2:	d156      	bne.n	801fa62 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801f9b4:	687b      	ldr	r3, [r7, #4]
 801f9b6:	8b5b      	ldrh	r3, [r3, #26]
 801f9b8:	f043 0302 	orr.w	r3, r3, #2
 801f9bc:	b29a      	uxth	r2, r3
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801f9c2:	6878      	ldr	r0, [r7, #4]
 801f9c4:	f7fe fdbe 	bl	801e544 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801f9c8:	4b18      	ldr	r3, [pc, #96]	; (801fa2c <tcp_process+0x5d4>)
 801f9ca:	681b      	ldr	r3, [r3, #0]
 801f9cc:	687a      	ldr	r2, [r7, #4]
 801f9ce:	429a      	cmp	r2, r3
 801f9d0:	d105      	bne.n	801f9de <tcp_process+0x586>
 801f9d2:	4b16      	ldr	r3, [pc, #88]	; (801fa2c <tcp_process+0x5d4>)
 801f9d4:	681b      	ldr	r3, [r3, #0]
 801f9d6:	68db      	ldr	r3, [r3, #12]
 801f9d8:	4a14      	ldr	r2, [pc, #80]	; (801fa2c <tcp_process+0x5d4>)
 801f9da:	6013      	str	r3, [r2, #0]
 801f9dc:	e02e      	b.n	801fa3c <tcp_process+0x5e4>
 801f9de:	4b13      	ldr	r3, [pc, #76]	; (801fa2c <tcp_process+0x5d4>)
 801f9e0:	681b      	ldr	r3, [r3, #0]
 801f9e2:	617b      	str	r3, [r7, #20]
 801f9e4:	e027      	b.n	801fa36 <tcp_process+0x5de>
 801f9e6:	697b      	ldr	r3, [r7, #20]
 801f9e8:	68db      	ldr	r3, [r3, #12]
 801f9ea:	687a      	ldr	r2, [r7, #4]
 801f9ec:	429a      	cmp	r2, r3
 801f9ee:	d11f      	bne.n	801fa30 <tcp_process+0x5d8>
 801f9f0:	687b      	ldr	r3, [r7, #4]
 801f9f2:	68da      	ldr	r2, [r3, #12]
 801f9f4:	697b      	ldr	r3, [r7, #20]
 801f9f6:	60da      	str	r2, [r3, #12]
 801f9f8:	e020      	b.n	801fa3c <tcp_process+0x5e4>
 801f9fa:	bf00      	nop
 801f9fc:	20005a54 	.word	0x20005a54
 801fa00:	20005a4c 	.word	0x20005a4c
 801fa04:	20005a52 	.word	0x20005a52
 801fa08:	20005a48 	.word	0x20005a48
 801fa0c:	20005a38 	.word	0x20005a38
 801fa10:	20012be8 	.word	0x20012be8
 801fa14:	20012bec 	.word	0x20012bec
 801fa18:	0802e8f4 	.word	0x0802e8f4
 801fa1c:	0802eb94 	.word	0x0802eb94
 801fa20:	0802e940 	.word	0x0802e940
 801fa24:	20005a50 	.word	0x20005a50
 801fa28:	20005a55 	.word	0x20005a55
 801fa2c:	2001d51c 	.word	0x2001d51c
 801fa30:	697b      	ldr	r3, [r7, #20]
 801fa32:	68db      	ldr	r3, [r3, #12]
 801fa34:	617b      	str	r3, [r7, #20]
 801fa36:	697b      	ldr	r3, [r7, #20]
 801fa38:	2b00      	cmp	r3, #0
 801fa3a:	d1d4      	bne.n	801f9e6 <tcp_process+0x58e>
 801fa3c:	687b      	ldr	r3, [r7, #4]
 801fa3e:	2200      	movs	r2, #0
 801fa40:	60da      	str	r2, [r3, #12]
 801fa42:	4b77      	ldr	r3, [pc, #476]	; (801fc20 <tcp_process+0x7c8>)
 801fa44:	2201      	movs	r2, #1
 801fa46:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801fa48:	687b      	ldr	r3, [r7, #4]
 801fa4a:	220a      	movs	r2, #10
 801fa4c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801fa4e:	4b75      	ldr	r3, [pc, #468]	; (801fc24 <tcp_process+0x7cc>)
 801fa50:	681a      	ldr	r2, [r3, #0]
 801fa52:	687b      	ldr	r3, [r7, #4]
 801fa54:	60da      	str	r2, [r3, #12]
 801fa56:	4a73      	ldr	r2, [pc, #460]	; (801fc24 <tcp_process+0x7cc>)
 801fa58:	687b      	ldr	r3, [r7, #4]
 801fa5a:	6013      	str	r3, [r2, #0]
 801fa5c:	f003 f950 	bl	8022d00 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801fa60:	e0d2      	b.n	801fc08 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801fa62:	687b      	ldr	r3, [r7, #4]
 801fa64:	8b5b      	ldrh	r3, [r3, #26]
 801fa66:	f043 0302 	orr.w	r3, r3, #2
 801fa6a:	b29a      	uxth	r2, r3
 801fa6c:	687b      	ldr	r3, [r7, #4]
 801fa6e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801fa70:	687b      	ldr	r3, [r7, #4]
 801fa72:	2208      	movs	r2, #8
 801fa74:	751a      	strb	r2, [r3, #20]
      break;
 801fa76:	e0c7      	b.n	801fc08 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801fa78:	4b6b      	ldr	r3, [pc, #428]	; (801fc28 <tcp_process+0x7d0>)
 801fa7a:	781b      	ldrb	r3, [r3, #0]
 801fa7c:	f003 0310 	and.w	r3, r3, #16
 801fa80:	2b00      	cmp	r3, #0
 801fa82:	f000 80c1 	beq.w	801fc08 <tcp_process+0x7b0>
 801fa86:	687b      	ldr	r3, [r7, #4]
 801fa88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801fa8a:	4b68      	ldr	r3, [pc, #416]	; (801fc2c <tcp_process+0x7d4>)
 801fa8c:	681b      	ldr	r3, [r3, #0]
 801fa8e:	429a      	cmp	r2, r3
 801fa90:	f040 80ba 	bne.w	801fc08 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801fa94:	687b      	ldr	r3, [r7, #4]
 801fa96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801fa98:	2b00      	cmp	r3, #0
 801fa9a:	f040 80b5 	bne.w	801fc08 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801fa9e:	687b      	ldr	r3, [r7, #4]
 801faa0:	2206      	movs	r2, #6
 801faa2:	751a      	strb	r2, [r3, #20]
      break;
 801faa4:	e0b0      	b.n	801fc08 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801faa6:	6878      	ldr	r0, [r7, #4]
 801faa8:	f000 f9ca 	bl	801fe40 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801faac:	4b60      	ldr	r3, [pc, #384]	; (801fc30 <tcp_process+0x7d8>)
 801faae:	781b      	ldrb	r3, [r3, #0]
 801fab0:	f003 0320 	and.w	r3, r3, #32
 801fab4:	2b00      	cmp	r3, #0
 801fab6:	f000 80a9 	beq.w	801fc0c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801faba:	687b      	ldr	r3, [r7, #4]
 801fabc:	8b5b      	ldrh	r3, [r3, #26]
 801fabe:	f043 0302 	orr.w	r3, r3, #2
 801fac2:	b29a      	uxth	r2, r3
 801fac4:	687b      	ldr	r3, [r7, #4]
 801fac6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801fac8:	6878      	ldr	r0, [r7, #4]
 801faca:	f7fe fd3b 	bl	801e544 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801face:	4b59      	ldr	r3, [pc, #356]	; (801fc34 <tcp_process+0x7dc>)
 801fad0:	681b      	ldr	r3, [r3, #0]
 801fad2:	687a      	ldr	r2, [r7, #4]
 801fad4:	429a      	cmp	r2, r3
 801fad6:	d105      	bne.n	801fae4 <tcp_process+0x68c>
 801fad8:	4b56      	ldr	r3, [pc, #344]	; (801fc34 <tcp_process+0x7dc>)
 801fada:	681b      	ldr	r3, [r3, #0]
 801fadc:	68db      	ldr	r3, [r3, #12]
 801fade:	4a55      	ldr	r2, [pc, #340]	; (801fc34 <tcp_process+0x7dc>)
 801fae0:	6013      	str	r3, [r2, #0]
 801fae2:	e013      	b.n	801fb0c <tcp_process+0x6b4>
 801fae4:	4b53      	ldr	r3, [pc, #332]	; (801fc34 <tcp_process+0x7dc>)
 801fae6:	681b      	ldr	r3, [r3, #0]
 801fae8:	613b      	str	r3, [r7, #16]
 801faea:	e00c      	b.n	801fb06 <tcp_process+0x6ae>
 801faec:	693b      	ldr	r3, [r7, #16]
 801faee:	68db      	ldr	r3, [r3, #12]
 801faf0:	687a      	ldr	r2, [r7, #4]
 801faf2:	429a      	cmp	r2, r3
 801faf4:	d104      	bne.n	801fb00 <tcp_process+0x6a8>
 801faf6:	687b      	ldr	r3, [r7, #4]
 801faf8:	68da      	ldr	r2, [r3, #12]
 801fafa:	693b      	ldr	r3, [r7, #16]
 801fafc:	60da      	str	r2, [r3, #12]
 801fafe:	e005      	b.n	801fb0c <tcp_process+0x6b4>
 801fb00:	693b      	ldr	r3, [r7, #16]
 801fb02:	68db      	ldr	r3, [r3, #12]
 801fb04:	613b      	str	r3, [r7, #16]
 801fb06:	693b      	ldr	r3, [r7, #16]
 801fb08:	2b00      	cmp	r3, #0
 801fb0a:	d1ef      	bne.n	801faec <tcp_process+0x694>
 801fb0c:	687b      	ldr	r3, [r7, #4]
 801fb0e:	2200      	movs	r2, #0
 801fb10:	60da      	str	r2, [r3, #12]
 801fb12:	4b43      	ldr	r3, [pc, #268]	; (801fc20 <tcp_process+0x7c8>)
 801fb14:	2201      	movs	r2, #1
 801fb16:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801fb18:	687b      	ldr	r3, [r7, #4]
 801fb1a:	220a      	movs	r2, #10
 801fb1c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801fb1e:	4b41      	ldr	r3, [pc, #260]	; (801fc24 <tcp_process+0x7cc>)
 801fb20:	681a      	ldr	r2, [r3, #0]
 801fb22:	687b      	ldr	r3, [r7, #4]
 801fb24:	60da      	str	r2, [r3, #12]
 801fb26:	4a3f      	ldr	r2, [pc, #252]	; (801fc24 <tcp_process+0x7cc>)
 801fb28:	687b      	ldr	r3, [r7, #4]
 801fb2a:	6013      	str	r3, [r2, #0]
 801fb2c:	f003 f8e8 	bl	8022d00 <tcp_timer_needed>
      }
      break;
 801fb30:	e06c      	b.n	801fc0c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801fb32:	6878      	ldr	r0, [r7, #4]
 801fb34:	f000 f984 	bl	801fe40 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801fb38:	4b3b      	ldr	r3, [pc, #236]	; (801fc28 <tcp_process+0x7d0>)
 801fb3a:	781b      	ldrb	r3, [r3, #0]
 801fb3c:	f003 0310 	and.w	r3, r3, #16
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	d065      	beq.n	801fc10 <tcp_process+0x7b8>
 801fb44:	687b      	ldr	r3, [r7, #4]
 801fb46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801fb48:	4b38      	ldr	r3, [pc, #224]	; (801fc2c <tcp_process+0x7d4>)
 801fb4a:	681b      	ldr	r3, [r3, #0]
 801fb4c:	429a      	cmp	r2, r3
 801fb4e:	d15f      	bne.n	801fc10 <tcp_process+0x7b8>
 801fb50:	687b      	ldr	r3, [r7, #4]
 801fb52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fb54:	2b00      	cmp	r3, #0
 801fb56:	d15b      	bne.n	801fc10 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801fb58:	6878      	ldr	r0, [r7, #4]
 801fb5a:	f7fe fcf3 	bl	801e544 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801fb5e:	4b35      	ldr	r3, [pc, #212]	; (801fc34 <tcp_process+0x7dc>)
 801fb60:	681b      	ldr	r3, [r3, #0]
 801fb62:	687a      	ldr	r2, [r7, #4]
 801fb64:	429a      	cmp	r2, r3
 801fb66:	d105      	bne.n	801fb74 <tcp_process+0x71c>
 801fb68:	4b32      	ldr	r3, [pc, #200]	; (801fc34 <tcp_process+0x7dc>)
 801fb6a:	681b      	ldr	r3, [r3, #0]
 801fb6c:	68db      	ldr	r3, [r3, #12]
 801fb6e:	4a31      	ldr	r2, [pc, #196]	; (801fc34 <tcp_process+0x7dc>)
 801fb70:	6013      	str	r3, [r2, #0]
 801fb72:	e013      	b.n	801fb9c <tcp_process+0x744>
 801fb74:	4b2f      	ldr	r3, [pc, #188]	; (801fc34 <tcp_process+0x7dc>)
 801fb76:	681b      	ldr	r3, [r3, #0]
 801fb78:	60fb      	str	r3, [r7, #12]
 801fb7a:	e00c      	b.n	801fb96 <tcp_process+0x73e>
 801fb7c:	68fb      	ldr	r3, [r7, #12]
 801fb7e:	68db      	ldr	r3, [r3, #12]
 801fb80:	687a      	ldr	r2, [r7, #4]
 801fb82:	429a      	cmp	r2, r3
 801fb84:	d104      	bne.n	801fb90 <tcp_process+0x738>
 801fb86:	687b      	ldr	r3, [r7, #4]
 801fb88:	68da      	ldr	r2, [r3, #12]
 801fb8a:	68fb      	ldr	r3, [r7, #12]
 801fb8c:	60da      	str	r2, [r3, #12]
 801fb8e:	e005      	b.n	801fb9c <tcp_process+0x744>
 801fb90:	68fb      	ldr	r3, [r7, #12]
 801fb92:	68db      	ldr	r3, [r3, #12]
 801fb94:	60fb      	str	r3, [r7, #12]
 801fb96:	68fb      	ldr	r3, [r7, #12]
 801fb98:	2b00      	cmp	r3, #0
 801fb9a:	d1ef      	bne.n	801fb7c <tcp_process+0x724>
 801fb9c:	687b      	ldr	r3, [r7, #4]
 801fb9e:	2200      	movs	r2, #0
 801fba0:	60da      	str	r2, [r3, #12]
 801fba2:	4b1f      	ldr	r3, [pc, #124]	; (801fc20 <tcp_process+0x7c8>)
 801fba4:	2201      	movs	r2, #1
 801fba6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801fba8:	687b      	ldr	r3, [r7, #4]
 801fbaa:	220a      	movs	r2, #10
 801fbac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801fbae:	4b1d      	ldr	r3, [pc, #116]	; (801fc24 <tcp_process+0x7cc>)
 801fbb0:	681a      	ldr	r2, [r3, #0]
 801fbb2:	687b      	ldr	r3, [r7, #4]
 801fbb4:	60da      	str	r2, [r3, #12]
 801fbb6:	4a1b      	ldr	r2, [pc, #108]	; (801fc24 <tcp_process+0x7cc>)
 801fbb8:	687b      	ldr	r3, [r7, #4]
 801fbba:	6013      	str	r3, [r2, #0]
 801fbbc:	f003 f8a0 	bl	8022d00 <tcp_timer_needed>
      }
      break;
 801fbc0:	e026      	b.n	801fc10 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801fbc2:	6878      	ldr	r0, [r7, #4]
 801fbc4:	f000 f93c 	bl	801fe40 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801fbc8:	4b17      	ldr	r3, [pc, #92]	; (801fc28 <tcp_process+0x7d0>)
 801fbca:	781b      	ldrb	r3, [r3, #0]
 801fbcc:	f003 0310 	and.w	r3, r3, #16
 801fbd0:	2b00      	cmp	r3, #0
 801fbd2:	d01f      	beq.n	801fc14 <tcp_process+0x7bc>
 801fbd4:	687b      	ldr	r3, [r7, #4]
 801fbd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801fbd8:	4b14      	ldr	r3, [pc, #80]	; (801fc2c <tcp_process+0x7d4>)
 801fbda:	681b      	ldr	r3, [r3, #0]
 801fbdc:	429a      	cmp	r2, r3
 801fbde:	d119      	bne.n	801fc14 <tcp_process+0x7bc>
 801fbe0:	687b      	ldr	r3, [r7, #4]
 801fbe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fbe4:	2b00      	cmp	r3, #0
 801fbe6:	d115      	bne.n	801fc14 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801fbe8:	4b11      	ldr	r3, [pc, #68]	; (801fc30 <tcp_process+0x7d8>)
 801fbea:	781b      	ldrb	r3, [r3, #0]
 801fbec:	f043 0310 	orr.w	r3, r3, #16
 801fbf0:	b2da      	uxtb	r2, r3
 801fbf2:	4b0f      	ldr	r3, [pc, #60]	; (801fc30 <tcp_process+0x7d8>)
 801fbf4:	701a      	strb	r2, [r3, #0]
      }
      break;
 801fbf6:	e00d      	b.n	801fc14 <tcp_process+0x7bc>
    default:
      break;
 801fbf8:	bf00      	nop
 801fbfa:	e00c      	b.n	801fc16 <tcp_process+0x7be>
      break;
 801fbfc:	bf00      	nop
 801fbfe:	e00a      	b.n	801fc16 <tcp_process+0x7be>
      break;
 801fc00:	bf00      	nop
 801fc02:	e008      	b.n	801fc16 <tcp_process+0x7be>
      break;
 801fc04:	bf00      	nop
 801fc06:	e006      	b.n	801fc16 <tcp_process+0x7be>
      break;
 801fc08:	bf00      	nop
 801fc0a:	e004      	b.n	801fc16 <tcp_process+0x7be>
      break;
 801fc0c:	bf00      	nop
 801fc0e:	e002      	b.n	801fc16 <tcp_process+0x7be>
      break;
 801fc10:	bf00      	nop
 801fc12:	e000      	b.n	801fc16 <tcp_process+0x7be>
      break;
 801fc14:	bf00      	nop
  }
  return ERR_OK;
 801fc16:	2300      	movs	r3, #0
}
 801fc18:	4618      	mov	r0, r3
 801fc1a:	3724      	adds	r7, #36	; 0x24
 801fc1c:	46bd      	mov	sp, r7
 801fc1e:	bd90      	pop	{r4, r7, pc}
 801fc20:	2001d518 	.word	0x2001d518
 801fc24:	2001d52c 	.word	0x2001d52c
 801fc28:	20005a54 	.word	0x20005a54
 801fc2c:	20005a4c 	.word	0x20005a4c
 801fc30:	20005a55 	.word	0x20005a55
 801fc34:	2001d51c 	.word	0x2001d51c

0801fc38 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801fc38:	b590      	push	{r4, r7, lr}
 801fc3a:	b085      	sub	sp, #20
 801fc3c:	af00      	add	r7, sp, #0
 801fc3e:	6078      	str	r0, [r7, #4]
 801fc40:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801fc42:	687b      	ldr	r3, [r7, #4]
 801fc44:	2b00      	cmp	r3, #0
 801fc46:	d106      	bne.n	801fc56 <tcp_oos_insert_segment+0x1e>
 801fc48:	4b3b      	ldr	r3, [pc, #236]	; (801fd38 <tcp_oos_insert_segment+0x100>)
 801fc4a:	f240 421f 	movw	r2, #1055	; 0x41f
 801fc4e:	493b      	ldr	r1, [pc, #236]	; (801fd3c <tcp_oos_insert_segment+0x104>)
 801fc50:	483b      	ldr	r0, [pc, #236]	; (801fd40 <tcp_oos_insert_segment+0x108>)
 801fc52:	f007 f801 	bl	8026c58 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801fc56:	687b      	ldr	r3, [r7, #4]
 801fc58:	68db      	ldr	r3, [r3, #12]
 801fc5a:	899b      	ldrh	r3, [r3, #12]
 801fc5c:	b29b      	uxth	r3, r3
 801fc5e:	4618      	mov	r0, r3
 801fc60:	f7fa ff94 	bl	801ab8c <lwip_htons>
 801fc64:	4603      	mov	r3, r0
 801fc66:	b2db      	uxtb	r3, r3
 801fc68:	f003 0301 	and.w	r3, r3, #1
 801fc6c:	2b00      	cmp	r3, #0
 801fc6e:	d028      	beq.n	801fcc2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801fc70:	6838      	ldr	r0, [r7, #0]
 801fc72:	f7fe f979 	bl	801df68 <tcp_segs_free>
    next = NULL;
 801fc76:	2300      	movs	r3, #0
 801fc78:	603b      	str	r3, [r7, #0]
 801fc7a:	e056      	b.n	801fd2a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801fc7c:	683b      	ldr	r3, [r7, #0]
 801fc7e:	68db      	ldr	r3, [r3, #12]
 801fc80:	899b      	ldrh	r3, [r3, #12]
 801fc82:	b29b      	uxth	r3, r3
 801fc84:	4618      	mov	r0, r3
 801fc86:	f7fa ff81 	bl	801ab8c <lwip_htons>
 801fc8a:	4603      	mov	r3, r0
 801fc8c:	b2db      	uxtb	r3, r3
 801fc8e:	f003 0301 	and.w	r3, r3, #1
 801fc92:	2b00      	cmp	r3, #0
 801fc94:	d00d      	beq.n	801fcb2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801fc96:	687b      	ldr	r3, [r7, #4]
 801fc98:	68db      	ldr	r3, [r3, #12]
 801fc9a:	899b      	ldrh	r3, [r3, #12]
 801fc9c:	b29c      	uxth	r4, r3
 801fc9e:	2001      	movs	r0, #1
 801fca0:	f7fa ff74 	bl	801ab8c <lwip_htons>
 801fca4:	4603      	mov	r3, r0
 801fca6:	461a      	mov	r2, r3
 801fca8:	687b      	ldr	r3, [r7, #4]
 801fcaa:	68db      	ldr	r3, [r3, #12]
 801fcac:	4322      	orrs	r2, r4
 801fcae:	b292      	uxth	r2, r2
 801fcb0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801fcb2:	683b      	ldr	r3, [r7, #0]
 801fcb4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801fcb6:	683b      	ldr	r3, [r7, #0]
 801fcb8:	681b      	ldr	r3, [r3, #0]
 801fcba:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801fcbc:	68f8      	ldr	r0, [r7, #12]
 801fcbe:	f7fe f968 	bl	801df92 <tcp_seg_free>
    while (next &&
 801fcc2:	683b      	ldr	r3, [r7, #0]
 801fcc4:	2b00      	cmp	r3, #0
 801fcc6:	d00e      	beq.n	801fce6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801fcc8:	687b      	ldr	r3, [r7, #4]
 801fcca:	891b      	ldrh	r3, [r3, #8]
 801fccc:	461a      	mov	r2, r3
 801fcce:	4b1d      	ldr	r3, [pc, #116]	; (801fd44 <tcp_oos_insert_segment+0x10c>)
 801fcd0:	681b      	ldr	r3, [r3, #0]
 801fcd2:	441a      	add	r2, r3
 801fcd4:	683b      	ldr	r3, [r7, #0]
 801fcd6:	68db      	ldr	r3, [r3, #12]
 801fcd8:	685b      	ldr	r3, [r3, #4]
 801fcda:	6839      	ldr	r1, [r7, #0]
 801fcdc:	8909      	ldrh	r1, [r1, #8]
 801fcde:	440b      	add	r3, r1
 801fce0:	1ad3      	subs	r3, r2, r3
    while (next &&
 801fce2:	2b00      	cmp	r3, #0
 801fce4:	daca      	bge.n	801fc7c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801fce6:	683b      	ldr	r3, [r7, #0]
 801fce8:	2b00      	cmp	r3, #0
 801fcea:	d01e      	beq.n	801fd2a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801fcec:	687b      	ldr	r3, [r7, #4]
 801fcee:	891b      	ldrh	r3, [r3, #8]
 801fcf0:	461a      	mov	r2, r3
 801fcf2:	4b14      	ldr	r3, [pc, #80]	; (801fd44 <tcp_oos_insert_segment+0x10c>)
 801fcf4:	681b      	ldr	r3, [r3, #0]
 801fcf6:	441a      	add	r2, r3
 801fcf8:	683b      	ldr	r3, [r7, #0]
 801fcfa:	68db      	ldr	r3, [r3, #12]
 801fcfc:	685b      	ldr	r3, [r3, #4]
 801fcfe:	1ad3      	subs	r3, r2, r3
    if (next &&
 801fd00:	2b00      	cmp	r3, #0
 801fd02:	dd12      	ble.n	801fd2a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801fd04:	683b      	ldr	r3, [r7, #0]
 801fd06:	68db      	ldr	r3, [r3, #12]
 801fd08:	685b      	ldr	r3, [r3, #4]
 801fd0a:	b29a      	uxth	r2, r3
 801fd0c:	4b0d      	ldr	r3, [pc, #52]	; (801fd44 <tcp_oos_insert_segment+0x10c>)
 801fd0e:	681b      	ldr	r3, [r3, #0]
 801fd10:	b29b      	uxth	r3, r3
 801fd12:	1ad3      	subs	r3, r2, r3
 801fd14:	b29a      	uxth	r2, r3
 801fd16:	687b      	ldr	r3, [r7, #4]
 801fd18:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801fd1a:	687b      	ldr	r3, [r7, #4]
 801fd1c:	685a      	ldr	r2, [r3, #4]
 801fd1e:	687b      	ldr	r3, [r7, #4]
 801fd20:	891b      	ldrh	r3, [r3, #8]
 801fd22:	4619      	mov	r1, r3
 801fd24:	4610      	mov	r0, r2
 801fd26:	f7fc f9e9 	bl	801c0fc <pbuf_realloc>
    }
  }
  cseg->next = next;
 801fd2a:	687b      	ldr	r3, [r7, #4]
 801fd2c:	683a      	ldr	r2, [r7, #0]
 801fd2e:	601a      	str	r2, [r3, #0]
}
 801fd30:	bf00      	nop
 801fd32:	3714      	adds	r7, #20
 801fd34:	46bd      	mov	sp, r7
 801fd36:	bd90      	pop	{r4, r7, pc}
 801fd38:	0802e8f4 	.word	0x0802e8f4
 801fd3c:	0802ebb4 	.word	0x0802ebb4
 801fd40:	0802e940 	.word	0x0802e940
 801fd44:	20005a48 	.word	0x20005a48

0801fd48 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801fd48:	b5b0      	push	{r4, r5, r7, lr}
 801fd4a:	b086      	sub	sp, #24
 801fd4c:	af00      	add	r7, sp, #0
 801fd4e:	60f8      	str	r0, [r7, #12]
 801fd50:	60b9      	str	r1, [r7, #8]
 801fd52:	607a      	str	r2, [r7, #4]
 801fd54:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801fd56:	e03e      	b.n	801fdd6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801fd58:	68bb      	ldr	r3, [r7, #8]
 801fd5a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801fd5c:	68bb      	ldr	r3, [r7, #8]
 801fd5e:	681b      	ldr	r3, [r3, #0]
 801fd60:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801fd62:	697b      	ldr	r3, [r7, #20]
 801fd64:	685b      	ldr	r3, [r3, #4]
 801fd66:	4618      	mov	r0, r3
 801fd68:	f7fc fbdc 	bl	801c524 <pbuf_clen>
 801fd6c:	4603      	mov	r3, r0
 801fd6e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801fd70:	68fb      	ldr	r3, [r7, #12]
 801fd72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801fd76:	8a7a      	ldrh	r2, [r7, #18]
 801fd78:	429a      	cmp	r2, r3
 801fd7a:	d906      	bls.n	801fd8a <tcp_free_acked_segments+0x42>
 801fd7c:	4b2a      	ldr	r3, [pc, #168]	; (801fe28 <tcp_free_acked_segments+0xe0>)
 801fd7e:	f240 4257 	movw	r2, #1111	; 0x457
 801fd82:	492a      	ldr	r1, [pc, #168]	; (801fe2c <tcp_free_acked_segments+0xe4>)
 801fd84:	482a      	ldr	r0, [pc, #168]	; (801fe30 <tcp_free_acked_segments+0xe8>)
 801fd86:	f006 ff67 	bl	8026c58 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801fd8a:	68fb      	ldr	r3, [r7, #12]
 801fd8c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801fd90:	8a7b      	ldrh	r3, [r7, #18]
 801fd92:	1ad3      	subs	r3, r2, r3
 801fd94:	b29a      	uxth	r2, r3
 801fd96:	68fb      	ldr	r3, [r7, #12]
 801fd98:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801fd9c:	697b      	ldr	r3, [r7, #20]
 801fd9e:	891a      	ldrh	r2, [r3, #8]
 801fda0:	4b24      	ldr	r3, [pc, #144]	; (801fe34 <tcp_free_acked_segments+0xec>)
 801fda2:	881b      	ldrh	r3, [r3, #0]
 801fda4:	4413      	add	r3, r2
 801fda6:	b29a      	uxth	r2, r3
 801fda8:	4b22      	ldr	r3, [pc, #136]	; (801fe34 <tcp_free_acked_segments+0xec>)
 801fdaa:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801fdac:	6978      	ldr	r0, [r7, #20]
 801fdae:	f7fe f8f0 	bl	801df92 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801fdb2:	68fb      	ldr	r3, [r7, #12]
 801fdb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	d00c      	beq.n	801fdd6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801fdbc:	68bb      	ldr	r3, [r7, #8]
 801fdbe:	2b00      	cmp	r3, #0
 801fdc0:	d109      	bne.n	801fdd6 <tcp_free_acked_segments+0x8e>
 801fdc2:	683b      	ldr	r3, [r7, #0]
 801fdc4:	2b00      	cmp	r3, #0
 801fdc6:	d106      	bne.n	801fdd6 <tcp_free_acked_segments+0x8e>
 801fdc8:	4b17      	ldr	r3, [pc, #92]	; (801fe28 <tcp_free_acked_segments+0xe0>)
 801fdca:	f240 4261 	movw	r2, #1121	; 0x461
 801fdce:	491a      	ldr	r1, [pc, #104]	; (801fe38 <tcp_free_acked_segments+0xf0>)
 801fdd0:	4817      	ldr	r0, [pc, #92]	; (801fe30 <tcp_free_acked_segments+0xe8>)
 801fdd2:	f006 ff41 	bl	8026c58 <iprintf>
  while (seg_list != NULL &&
 801fdd6:	68bb      	ldr	r3, [r7, #8]
 801fdd8:	2b00      	cmp	r3, #0
 801fdda:	d020      	beq.n	801fe1e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801fddc:	68bb      	ldr	r3, [r7, #8]
 801fdde:	68db      	ldr	r3, [r3, #12]
 801fde0:	685b      	ldr	r3, [r3, #4]
 801fde2:	4618      	mov	r0, r3
 801fde4:	f7fa fee7 	bl	801abb6 <lwip_htonl>
 801fde8:	4604      	mov	r4, r0
 801fdea:	68bb      	ldr	r3, [r7, #8]
 801fdec:	891b      	ldrh	r3, [r3, #8]
 801fdee:	461d      	mov	r5, r3
 801fdf0:	68bb      	ldr	r3, [r7, #8]
 801fdf2:	68db      	ldr	r3, [r3, #12]
 801fdf4:	899b      	ldrh	r3, [r3, #12]
 801fdf6:	b29b      	uxth	r3, r3
 801fdf8:	4618      	mov	r0, r3
 801fdfa:	f7fa fec7 	bl	801ab8c <lwip_htons>
 801fdfe:	4603      	mov	r3, r0
 801fe00:	b2db      	uxtb	r3, r3
 801fe02:	f003 0303 	and.w	r3, r3, #3
 801fe06:	2b00      	cmp	r3, #0
 801fe08:	d001      	beq.n	801fe0e <tcp_free_acked_segments+0xc6>
 801fe0a:	2301      	movs	r3, #1
 801fe0c:	e000      	b.n	801fe10 <tcp_free_acked_segments+0xc8>
 801fe0e:	2300      	movs	r3, #0
 801fe10:	442b      	add	r3, r5
 801fe12:	18e2      	adds	r2, r4, r3
 801fe14:	4b09      	ldr	r3, [pc, #36]	; (801fe3c <tcp_free_acked_segments+0xf4>)
 801fe16:	681b      	ldr	r3, [r3, #0]
 801fe18:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	dd9c      	ble.n	801fd58 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801fe1e:	68bb      	ldr	r3, [r7, #8]
}
 801fe20:	4618      	mov	r0, r3
 801fe22:	3718      	adds	r7, #24
 801fe24:	46bd      	mov	sp, r7
 801fe26:	bdb0      	pop	{r4, r5, r7, pc}
 801fe28:	0802e8f4 	.word	0x0802e8f4
 801fe2c:	0802ebdc 	.word	0x0802ebdc
 801fe30:	0802e940 	.word	0x0802e940
 801fe34:	20005a50 	.word	0x20005a50
 801fe38:	0802ec04 	.word	0x0802ec04
 801fe3c:	20005a4c 	.word	0x20005a4c

0801fe40 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801fe40:	b5b0      	push	{r4, r5, r7, lr}
 801fe42:	b094      	sub	sp, #80	; 0x50
 801fe44:	af00      	add	r7, sp, #0
 801fe46:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801fe48:	2300      	movs	r3, #0
 801fe4a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801fe4c:	687b      	ldr	r3, [r7, #4]
 801fe4e:	2b00      	cmp	r3, #0
 801fe50:	d106      	bne.n	801fe60 <tcp_receive+0x20>
 801fe52:	4ba6      	ldr	r3, [pc, #664]	; (80200ec <tcp_receive+0x2ac>)
 801fe54:	f240 427b 	movw	r2, #1147	; 0x47b
 801fe58:	49a5      	ldr	r1, [pc, #660]	; (80200f0 <tcp_receive+0x2b0>)
 801fe5a:	48a6      	ldr	r0, [pc, #664]	; (80200f4 <tcp_receive+0x2b4>)
 801fe5c:	f006 fefc 	bl	8026c58 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801fe60:	687b      	ldr	r3, [r7, #4]
 801fe62:	7d1b      	ldrb	r3, [r3, #20]
 801fe64:	2b03      	cmp	r3, #3
 801fe66:	d806      	bhi.n	801fe76 <tcp_receive+0x36>
 801fe68:	4ba0      	ldr	r3, [pc, #640]	; (80200ec <tcp_receive+0x2ac>)
 801fe6a:	f240 427c 	movw	r2, #1148	; 0x47c
 801fe6e:	49a2      	ldr	r1, [pc, #648]	; (80200f8 <tcp_receive+0x2b8>)
 801fe70:	48a0      	ldr	r0, [pc, #640]	; (80200f4 <tcp_receive+0x2b4>)
 801fe72:	f006 fef1 	bl	8026c58 <iprintf>

  if (flags & TCP_ACK) {
 801fe76:	4ba1      	ldr	r3, [pc, #644]	; (80200fc <tcp_receive+0x2bc>)
 801fe78:	781b      	ldrb	r3, [r3, #0]
 801fe7a:	f003 0310 	and.w	r3, r3, #16
 801fe7e:	2b00      	cmp	r3, #0
 801fe80:	f000 8263 	beq.w	802034a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801fe84:	687b      	ldr	r3, [r7, #4]
 801fe86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801fe8a:	461a      	mov	r2, r3
 801fe8c:	687b      	ldr	r3, [r7, #4]
 801fe8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801fe90:	4413      	add	r3, r2
 801fe92:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801fe94:	687b      	ldr	r3, [r7, #4]
 801fe96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fe98:	4b99      	ldr	r3, [pc, #612]	; (8020100 <tcp_receive+0x2c0>)
 801fe9a:	681b      	ldr	r3, [r3, #0]
 801fe9c:	1ad3      	subs	r3, r2, r3
 801fe9e:	2b00      	cmp	r3, #0
 801fea0:	db1b      	blt.n	801feda <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801fea2:	687b      	ldr	r3, [r7, #4]
 801fea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fea6:	4b96      	ldr	r3, [pc, #600]	; (8020100 <tcp_receive+0x2c0>)
 801fea8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801feaa:	429a      	cmp	r2, r3
 801feac:	d106      	bne.n	801febc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801feae:	687b      	ldr	r3, [r7, #4]
 801feb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801feb2:	4b94      	ldr	r3, [pc, #592]	; (8020104 <tcp_receive+0x2c4>)
 801feb4:	681b      	ldr	r3, [r3, #0]
 801feb6:	1ad3      	subs	r3, r2, r3
 801feb8:	2b00      	cmp	r3, #0
 801feba:	db0e      	blt.n	801feda <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801febc:	687b      	ldr	r3, [r7, #4]
 801febe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801fec0:	4b90      	ldr	r3, [pc, #576]	; (8020104 <tcp_receive+0x2c4>)
 801fec2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801fec4:	429a      	cmp	r2, r3
 801fec6:	d125      	bne.n	801ff14 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801fec8:	4b8f      	ldr	r3, [pc, #572]	; (8020108 <tcp_receive+0x2c8>)
 801feca:	681b      	ldr	r3, [r3, #0]
 801fecc:	89db      	ldrh	r3, [r3, #14]
 801fece:	b29a      	uxth	r2, r3
 801fed0:	687b      	ldr	r3, [r7, #4]
 801fed2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801fed6:	429a      	cmp	r2, r3
 801fed8:	d91c      	bls.n	801ff14 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801feda:	4b8b      	ldr	r3, [pc, #556]	; (8020108 <tcp_receive+0x2c8>)
 801fedc:	681b      	ldr	r3, [r3, #0]
 801fede:	89db      	ldrh	r3, [r3, #14]
 801fee0:	b29a      	uxth	r2, r3
 801fee2:	687b      	ldr	r3, [r7, #4]
 801fee4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801fee8:	687b      	ldr	r3, [r7, #4]
 801feea:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801feee:	687b      	ldr	r3, [r7, #4]
 801fef0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801fef4:	429a      	cmp	r2, r3
 801fef6:	d205      	bcs.n	801ff04 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801fef8:	687b      	ldr	r3, [r7, #4]
 801fefa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801fefe:	687b      	ldr	r3, [r7, #4]
 801ff00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801ff04:	4b7e      	ldr	r3, [pc, #504]	; (8020100 <tcp_receive+0x2c0>)
 801ff06:	681a      	ldr	r2, [r3, #0]
 801ff08:	687b      	ldr	r3, [r7, #4]
 801ff0a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801ff0c:	4b7d      	ldr	r3, [pc, #500]	; (8020104 <tcp_receive+0x2c4>)
 801ff0e:	681a      	ldr	r2, [r3, #0]
 801ff10:	687b      	ldr	r3, [r7, #4]
 801ff12:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801ff14:	4b7b      	ldr	r3, [pc, #492]	; (8020104 <tcp_receive+0x2c4>)
 801ff16:	681a      	ldr	r2, [r3, #0]
 801ff18:	687b      	ldr	r3, [r7, #4]
 801ff1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ff1c:	1ad3      	subs	r3, r2, r3
 801ff1e:	2b00      	cmp	r3, #0
 801ff20:	dc58      	bgt.n	801ffd4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801ff22:	4b7a      	ldr	r3, [pc, #488]	; (802010c <tcp_receive+0x2cc>)
 801ff24:	881b      	ldrh	r3, [r3, #0]
 801ff26:	2b00      	cmp	r3, #0
 801ff28:	d14b      	bne.n	801ffc2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801ff2a:	687b      	ldr	r3, [r7, #4]
 801ff2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ff2e:	687a      	ldr	r2, [r7, #4]
 801ff30:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801ff34:	4413      	add	r3, r2
 801ff36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ff38:	429a      	cmp	r2, r3
 801ff3a:	d142      	bne.n	801ffc2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801ff3c:	687b      	ldr	r3, [r7, #4]
 801ff3e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801ff42:	2b00      	cmp	r3, #0
 801ff44:	db3d      	blt.n	801ffc2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801ff46:	687b      	ldr	r3, [r7, #4]
 801ff48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ff4a:	4b6e      	ldr	r3, [pc, #440]	; (8020104 <tcp_receive+0x2c4>)
 801ff4c:	681b      	ldr	r3, [r3, #0]
 801ff4e:	429a      	cmp	r2, r3
 801ff50:	d137      	bne.n	801ffc2 <tcp_receive+0x182>
              found_dupack = 1;
 801ff52:	2301      	movs	r3, #1
 801ff54:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801ff56:	687b      	ldr	r3, [r7, #4]
 801ff58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ff5c:	2bff      	cmp	r3, #255	; 0xff
 801ff5e:	d007      	beq.n	801ff70 <tcp_receive+0x130>
                ++pcb->dupacks;
 801ff60:	687b      	ldr	r3, [r7, #4]
 801ff62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ff66:	3301      	adds	r3, #1
 801ff68:	b2da      	uxtb	r2, r3
 801ff6a:	687b      	ldr	r3, [r7, #4]
 801ff6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801ff70:	687b      	ldr	r3, [r7, #4]
 801ff72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ff76:	2b03      	cmp	r3, #3
 801ff78:	d91b      	bls.n	801ffb2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ff7a:	687b      	ldr	r3, [r7, #4]
 801ff7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ff80:	687b      	ldr	r3, [r7, #4]
 801ff82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ff84:	4413      	add	r3, r2
 801ff86:	b29a      	uxth	r2, r3
 801ff88:	687b      	ldr	r3, [r7, #4]
 801ff8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ff8e:	429a      	cmp	r2, r3
 801ff90:	d30a      	bcc.n	801ffa8 <tcp_receive+0x168>
 801ff92:	687b      	ldr	r3, [r7, #4]
 801ff94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ff98:	687b      	ldr	r3, [r7, #4]
 801ff9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ff9c:	4413      	add	r3, r2
 801ff9e:	b29a      	uxth	r2, r3
 801ffa0:	687b      	ldr	r3, [r7, #4]
 801ffa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801ffa6:	e004      	b.n	801ffb2 <tcp_receive+0x172>
 801ffa8:	687b      	ldr	r3, [r7, #4]
 801ffaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ffae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801ffb2:	687b      	ldr	r3, [r7, #4]
 801ffb4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ffb8:	2b02      	cmp	r3, #2
 801ffba:	d902      	bls.n	801ffc2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801ffbc:	6878      	ldr	r0, [r7, #4]
 801ffbe:	f002 fb41 	bl	8022644 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801ffc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ffc4:	2b00      	cmp	r3, #0
 801ffc6:	f040 8160 	bne.w	802028a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801ffca:	687b      	ldr	r3, [r7, #4]
 801ffcc:	2200      	movs	r2, #0
 801ffce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ffd2:	e15a      	b.n	802028a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ffd4:	4b4b      	ldr	r3, [pc, #300]	; (8020104 <tcp_receive+0x2c4>)
 801ffd6:	681a      	ldr	r2, [r3, #0]
 801ffd8:	687b      	ldr	r3, [r7, #4]
 801ffda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ffdc:	1ad3      	subs	r3, r2, r3
 801ffde:	3b01      	subs	r3, #1
 801ffe0:	2b00      	cmp	r3, #0
 801ffe2:	f2c0 814d 	blt.w	8020280 <tcp_receive+0x440>
 801ffe6:	4b47      	ldr	r3, [pc, #284]	; (8020104 <tcp_receive+0x2c4>)
 801ffe8:	681a      	ldr	r2, [r3, #0]
 801ffea:	687b      	ldr	r3, [r7, #4]
 801ffec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ffee:	1ad3      	subs	r3, r2, r3
 801fff0:	2b00      	cmp	r3, #0
 801fff2:	f300 8145 	bgt.w	8020280 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801fff6:	687b      	ldr	r3, [r7, #4]
 801fff8:	8b5b      	ldrh	r3, [r3, #26]
 801fffa:	f003 0304 	and.w	r3, r3, #4
 801fffe:	2b00      	cmp	r3, #0
 8020000:	d010      	beq.n	8020024 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8020002:	687b      	ldr	r3, [r7, #4]
 8020004:	8b5b      	ldrh	r3, [r3, #26]
 8020006:	f023 0304 	bic.w	r3, r3, #4
 802000a:	b29a      	uxth	r2, r3
 802000c:	687b      	ldr	r3, [r7, #4]
 802000e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8020010:	687b      	ldr	r3, [r7, #4]
 8020012:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8020016:	687b      	ldr	r3, [r7, #4]
 8020018:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 802001c:	687b      	ldr	r3, [r7, #4]
 802001e:	2200      	movs	r2, #0
 8020020:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8020024:	687b      	ldr	r3, [r7, #4]
 8020026:	2200      	movs	r2, #0
 8020028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 802002c:	687b      	ldr	r3, [r7, #4]
 802002e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8020032:	10db      	asrs	r3, r3, #3
 8020034:	b21b      	sxth	r3, r3
 8020036:	b29a      	uxth	r2, r3
 8020038:	687b      	ldr	r3, [r7, #4]
 802003a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 802003e:	b29b      	uxth	r3, r3
 8020040:	4413      	add	r3, r2
 8020042:	b29b      	uxth	r3, r3
 8020044:	b21a      	sxth	r2, r3
 8020046:	687b      	ldr	r3, [r7, #4]
 8020048:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 802004c:	4b2d      	ldr	r3, [pc, #180]	; (8020104 <tcp_receive+0x2c4>)
 802004e:	681b      	ldr	r3, [r3, #0]
 8020050:	b29a      	uxth	r2, r3
 8020052:	687b      	ldr	r3, [r7, #4]
 8020054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020056:	b29b      	uxth	r3, r3
 8020058:	1ad3      	subs	r3, r2, r3
 802005a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 802005c:	687b      	ldr	r3, [r7, #4]
 802005e:	2200      	movs	r2, #0
 8020060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8020064:	4b27      	ldr	r3, [pc, #156]	; (8020104 <tcp_receive+0x2c4>)
 8020066:	681a      	ldr	r2, [r3, #0]
 8020068:	687b      	ldr	r3, [r7, #4]
 802006a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 802006c:	687b      	ldr	r3, [r7, #4]
 802006e:	7d1b      	ldrb	r3, [r3, #20]
 8020070:	2b03      	cmp	r3, #3
 8020072:	f240 8096 	bls.w	80201a2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8020076:	687b      	ldr	r3, [r7, #4]
 8020078:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802007c:	687b      	ldr	r3, [r7, #4]
 802007e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8020082:	429a      	cmp	r2, r3
 8020084:	d244      	bcs.n	8020110 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8020086:	687b      	ldr	r3, [r7, #4]
 8020088:	8b5b      	ldrh	r3, [r3, #26]
 802008a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802008e:	2b00      	cmp	r3, #0
 8020090:	d001      	beq.n	8020096 <tcp_receive+0x256>
 8020092:	2301      	movs	r3, #1
 8020094:	e000      	b.n	8020098 <tcp_receive+0x258>
 8020096:	2302      	movs	r3, #2
 8020098:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 802009c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80200a0:	b29a      	uxth	r2, r3
 80200a2:	687b      	ldr	r3, [r7, #4]
 80200a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80200a6:	fb12 f303 	smulbb	r3, r2, r3
 80200aa:	b29b      	uxth	r3, r3
 80200ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80200ae:	4293      	cmp	r3, r2
 80200b0:	bf28      	it	cs
 80200b2:	4613      	movcs	r3, r2
 80200b4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80200b6:	687b      	ldr	r3, [r7, #4]
 80200b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80200bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80200be:	4413      	add	r3, r2
 80200c0:	b29a      	uxth	r2, r3
 80200c2:	687b      	ldr	r3, [r7, #4]
 80200c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80200c8:	429a      	cmp	r2, r3
 80200ca:	d309      	bcc.n	80200e0 <tcp_receive+0x2a0>
 80200cc:	687b      	ldr	r3, [r7, #4]
 80200ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80200d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80200d4:	4413      	add	r3, r2
 80200d6:	b29a      	uxth	r2, r3
 80200d8:	687b      	ldr	r3, [r7, #4]
 80200da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80200de:	e060      	b.n	80201a2 <tcp_receive+0x362>
 80200e0:	687b      	ldr	r3, [r7, #4]
 80200e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80200e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80200ea:	e05a      	b.n	80201a2 <tcp_receive+0x362>
 80200ec:	0802e8f4 	.word	0x0802e8f4
 80200f0:	0802ec24 	.word	0x0802ec24
 80200f4:	0802e940 	.word	0x0802e940
 80200f8:	0802ec40 	.word	0x0802ec40
 80200fc:	20005a54 	.word	0x20005a54
 8020100:	20005a48 	.word	0x20005a48
 8020104:	20005a4c 	.word	0x20005a4c
 8020108:	20005a38 	.word	0x20005a38
 802010c:	20005a52 	.word	0x20005a52
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8020110:	687b      	ldr	r3, [r7, #4]
 8020112:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8020116:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8020118:	4413      	add	r3, r2
 802011a:	b29a      	uxth	r2, r3
 802011c:	687b      	ldr	r3, [r7, #4]
 802011e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8020122:	429a      	cmp	r2, r3
 8020124:	d309      	bcc.n	802013a <tcp_receive+0x2fa>
 8020126:	687b      	ldr	r3, [r7, #4]
 8020128:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 802012c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802012e:	4413      	add	r3, r2
 8020130:	b29a      	uxth	r2, r3
 8020132:	687b      	ldr	r3, [r7, #4]
 8020134:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8020138:	e004      	b.n	8020144 <tcp_receive+0x304>
 802013a:	687b      	ldr	r3, [r7, #4]
 802013c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8020144:	687b      	ldr	r3, [r7, #4]
 8020146:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 802014a:	687b      	ldr	r3, [r7, #4]
 802014c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8020150:	429a      	cmp	r2, r3
 8020152:	d326      	bcc.n	80201a2 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8020154:	687b      	ldr	r3, [r7, #4]
 8020156:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 802015a:	687b      	ldr	r3, [r7, #4]
 802015c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8020160:	1ad3      	subs	r3, r2, r3
 8020162:	b29a      	uxth	r2, r3
 8020164:	687b      	ldr	r3, [r7, #4]
 8020166:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 802016a:	687b      	ldr	r3, [r7, #4]
 802016c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8020170:	687b      	ldr	r3, [r7, #4]
 8020172:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8020174:	4413      	add	r3, r2
 8020176:	b29a      	uxth	r2, r3
 8020178:	687b      	ldr	r3, [r7, #4]
 802017a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 802017e:	429a      	cmp	r2, r3
 8020180:	d30a      	bcc.n	8020198 <tcp_receive+0x358>
 8020182:	687b      	ldr	r3, [r7, #4]
 8020184:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8020188:	687b      	ldr	r3, [r7, #4]
 802018a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802018c:	4413      	add	r3, r2
 802018e:	b29a      	uxth	r2, r3
 8020190:	687b      	ldr	r3, [r7, #4]
 8020192:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8020196:	e004      	b.n	80201a2 <tcp_receive+0x362>
 8020198:	687b      	ldr	r3, [r7, #4]
 802019a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802019e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80201a2:	687b      	ldr	r3, [r7, #4]
 80201a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80201a6:	687b      	ldr	r3, [r7, #4]
 80201a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80201aa:	4a98      	ldr	r2, [pc, #608]	; (802040c <tcp_receive+0x5cc>)
 80201ac:	6878      	ldr	r0, [r7, #4]
 80201ae:	f7ff fdcb 	bl	801fd48 <tcp_free_acked_segments>
 80201b2:	4602      	mov	r2, r0
 80201b4:	687b      	ldr	r3, [r7, #4]
 80201b6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80201b8:	687b      	ldr	r3, [r7, #4]
 80201ba:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80201bc:	687b      	ldr	r3, [r7, #4]
 80201be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80201c0:	4a93      	ldr	r2, [pc, #588]	; (8020410 <tcp_receive+0x5d0>)
 80201c2:	6878      	ldr	r0, [r7, #4]
 80201c4:	f7ff fdc0 	bl	801fd48 <tcp_free_acked_segments>
 80201c8:	4602      	mov	r2, r0
 80201ca:	687b      	ldr	r3, [r7, #4]
 80201cc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80201ce:	687b      	ldr	r3, [r7, #4]
 80201d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80201d2:	2b00      	cmp	r3, #0
 80201d4:	d104      	bne.n	80201e0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80201d6:	687b      	ldr	r3, [r7, #4]
 80201d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80201dc:	861a      	strh	r2, [r3, #48]	; 0x30
 80201de:	e002      	b.n	80201e6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80201e0:	687b      	ldr	r3, [r7, #4]
 80201e2:	2200      	movs	r2, #0
 80201e4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80201e6:	687b      	ldr	r3, [r7, #4]
 80201e8:	2200      	movs	r2, #0
 80201ea:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80201ec:	687b      	ldr	r3, [r7, #4]
 80201ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80201f0:	2b00      	cmp	r3, #0
 80201f2:	d103      	bne.n	80201fc <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80201f4:	687b      	ldr	r3, [r7, #4]
 80201f6:	2200      	movs	r2, #0
 80201f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80201fc:	687b      	ldr	r3, [r7, #4]
 80201fe:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8020202:	4b84      	ldr	r3, [pc, #528]	; (8020414 <tcp_receive+0x5d4>)
 8020204:	881b      	ldrh	r3, [r3, #0]
 8020206:	4413      	add	r3, r2
 8020208:	b29a      	uxth	r2, r3
 802020a:	687b      	ldr	r3, [r7, #4]
 802020c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8020210:	687b      	ldr	r3, [r7, #4]
 8020212:	8b5b      	ldrh	r3, [r3, #26]
 8020214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8020218:	2b00      	cmp	r3, #0
 802021a:	d035      	beq.n	8020288 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 802021c:	687b      	ldr	r3, [r7, #4]
 802021e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020220:	2b00      	cmp	r3, #0
 8020222:	d118      	bne.n	8020256 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8020224:	687b      	ldr	r3, [r7, #4]
 8020226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020228:	2b00      	cmp	r3, #0
 802022a:	d00c      	beq.n	8020246 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 802022c:	687b      	ldr	r3, [r7, #4]
 802022e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8020230:	687b      	ldr	r3, [r7, #4]
 8020232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020234:	68db      	ldr	r3, [r3, #12]
 8020236:	685b      	ldr	r3, [r3, #4]
 8020238:	4618      	mov	r0, r3
 802023a:	f7fa fcbc 	bl	801abb6 <lwip_htonl>
 802023e:	4603      	mov	r3, r0
 8020240:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8020242:	2b00      	cmp	r3, #0
 8020244:	dc20      	bgt.n	8020288 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8020246:	687b      	ldr	r3, [r7, #4]
 8020248:	8b5b      	ldrh	r3, [r3, #26]
 802024a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802024e:	b29a      	uxth	r2, r3
 8020250:	687b      	ldr	r3, [r7, #4]
 8020252:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8020254:	e018      	b.n	8020288 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8020256:	687b      	ldr	r3, [r7, #4]
 8020258:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 802025a:	687b      	ldr	r3, [r7, #4]
 802025c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802025e:	68db      	ldr	r3, [r3, #12]
 8020260:	685b      	ldr	r3, [r3, #4]
 8020262:	4618      	mov	r0, r3
 8020264:	f7fa fca7 	bl	801abb6 <lwip_htonl>
 8020268:	4603      	mov	r3, r0
 802026a:	1ae3      	subs	r3, r4, r3
 802026c:	2b00      	cmp	r3, #0
 802026e:	dc0b      	bgt.n	8020288 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8020270:	687b      	ldr	r3, [r7, #4]
 8020272:	8b5b      	ldrh	r3, [r3, #26]
 8020274:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8020278:	b29a      	uxth	r2, r3
 802027a:	687b      	ldr	r3, [r7, #4]
 802027c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 802027e:	e003      	b.n	8020288 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8020280:	6878      	ldr	r0, [r7, #4]
 8020282:	f002 fbcd 	bl	8022a20 <tcp_send_empty_ack>
 8020286:	e000      	b.n	802028a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8020288:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 802028a:	687b      	ldr	r3, [r7, #4]
 802028c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802028e:	2b00      	cmp	r3, #0
 8020290:	d05b      	beq.n	802034a <tcp_receive+0x50a>
 8020292:	687b      	ldr	r3, [r7, #4]
 8020294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020296:	4b60      	ldr	r3, [pc, #384]	; (8020418 <tcp_receive+0x5d8>)
 8020298:	681b      	ldr	r3, [r3, #0]
 802029a:	1ad3      	subs	r3, r2, r3
 802029c:	2b00      	cmp	r3, #0
 802029e:	da54      	bge.n	802034a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80202a0:	4b5e      	ldr	r3, [pc, #376]	; (802041c <tcp_receive+0x5dc>)
 80202a2:	681b      	ldr	r3, [r3, #0]
 80202a4:	b29a      	uxth	r2, r3
 80202a6:	687b      	ldr	r3, [r7, #4]
 80202a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80202aa:	b29b      	uxth	r3, r3
 80202ac:	1ad3      	subs	r3, r2, r3
 80202ae:	b29b      	uxth	r3, r3
 80202b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80202b4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80202be:	10db      	asrs	r3, r3, #3
 80202c0:	b21b      	sxth	r3, r3
 80202c2:	b29b      	uxth	r3, r3
 80202c4:	1ad3      	subs	r3, r2, r3
 80202c6:	b29b      	uxth	r3, r3
 80202c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80202cc:	687b      	ldr	r3, [r7, #4]
 80202ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80202d2:	b29a      	uxth	r2, r3
 80202d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80202d8:	4413      	add	r3, r2
 80202da:	b29b      	uxth	r3, r3
 80202dc:	b21a      	sxth	r2, r3
 80202de:	687b      	ldr	r3, [r7, #4]
 80202e0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80202e2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80202e6:	2b00      	cmp	r3, #0
 80202e8:	da05      	bge.n	80202f6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80202ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80202ee:	425b      	negs	r3, r3
 80202f0:	b29b      	uxth	r3, r3
 80202f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80202f6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80202fa:	687b      	ldr	r3, [r7, #4]
 80202fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8020300:	109b      	asrs	r3, r3, #2
 8020302:	b21b      	sxth	r3, r3
 8020304:	b29b      	uxth	r3, r3
 8020306:	1ad3      	subs	r3, r2, r3
 8020308:	b29b      	uxth	r3, r3
 802030a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 802030e:	687b      	ldr	r3, [r7, #4]
 8020310:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8020314:	b29a      	uxth	r2, r3
 8020316:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 802031a:	4413      	add	r3, r2
 802031c:	b29b      	uxth	r3, r3
 802031e:	b21a      	sxth	r2, r3
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8020324:	687b      	ldr	r3, [r7, #4]
 8020326:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 802032a:	10db      	asrs	r3, r3, #3
 802032c:	b21b      	sxth	r3, r3
 802032e:	b29a      	uxth	r2, r3
 8020330:	687b      	ldr	r3, [r7, #4]
 8020332:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8020336:	b29b      	uxth	r3, r3
 8020338:	4413      	add	r3, r2
 802033a:	b29b      	uxth	r3, r3
 802033c:	b21a      	sxth	r2, r3
 802033e:	687b      	ldr	r3, [r7, #4]
 8020340:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8020344:	687b      	ldr	r3, [r7, #4]
 8020346:	2200      	movs	r2, #0
 8020348:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 802034a:	4b35      	ldr	r3, [pc, #212]	; (8020420 <tcp_receive+0x5e0>)
 802034c:	881b      	ldrh	r3, [r3, #0]
 802034e:	2b00      	cmp	r3, #0
 8020350:	f000 84e1 	beq.w	8020d16 <tcp_receive+0xed6>
 8020354:	687b      	ldr	r3, [r7, #4]
 8020356:	7d1b      	ldrb	r3, [r3, #20]
 8020358:	2b06      	cmp	r3, #6
 802035a:	f200 84dc 	bhi.w	8020d16 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 802035e:	687b      	ldr	r3, [r7, #4]
 8020360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020362:	4b30      	ldr	r3, [pc, #192]	; (8020424 <tcp_receive+0x5e4>)
 8020364:	681b      	ldr	r3, [r3, #0]
 8020366:	1ad3      	subs	r3, r2, r3
 8020368:	3b01      	subs	r3, #1
 802036a:	2b00      	cmp	r3, #0
 802036c:	f2c0 808e 	blt.w	802048c <tcp_receive+0x64c>
 8020370:	687b      	ldr	r3, [r7, #4]
 8020372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020374:	4b2a      	ldr	r3, [pc, #168]	; (8020420 <tcp_receive+0x5e0>)
 8020376:	881b      	ldrh	r3, [r3, #0]
 8020378:	4619      	mov	r1, r3
 802037a:	4b2a      	ldr	r3, [pc, #168]	; (8020424 <tcp_receive+0x5e4>)
 802037c:	681b      	ldr	r3, [r3, #0]
 802037e:	440b      	add	r3, r1
 8020380:	1ad3      	subs	r3, r2, r3
 8020382:	3301      	adds	r3, #1
 8020384:	2b00      	cmp	r3, #0
 8020386:	f300 8081 	bgt.w	802048c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 802038a:	4b27      	ldr	r3, [pc, #156]	; (8020428 <tcp_receive+0x5e8>)
 802038c:	685b      	ldr	r3, [r3, #4]
 802038e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8020390:	687b      	ldr	r3, [r7, #4]
 8020392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020394:	4b23      	ldr	r3, [pc, #140]	; (8020424 <tcp_receive+0x5e4>)
 8020396:	681b      	ldr	r3, [r3, #0]
 8020398:	1ad3      	subs	r3, r2, r3
 802039a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 802039c:	4b22      	ldr	r3, [pc, #136]	; (8020428 <tcp_receive+0x5e8>)
 802039e:	685b      	ldr	r3, [r3, #4]
 80203a0:	2b00      	cmp	r3, #0
 80203a2:	d106      	bne.n	80203b2 <tcp_receive+0x572>
 80203a4:	4b21      	ldr	r3, [pc, #132]	; (802042c <tcp_receive+0x5ec>)
 80203a6:	f240 5294 	movw	r2, #1428	; 0x594
 80203aa:	4921      	ldr	r1, [pc, #132]	; (8020430 <tcp_receive+0x5f0>)
 80203ac:	4821      	ldr	r0, [pc, #132]	; (8020434 <tcp_receive+0x5f4>)
 80203ae:	f006 fc53 	bl	8026c58 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80203b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80203b8:	4293      	cmp	r3, r2
 80203ba:	d906      	bls.n	80203ca <tcp_receive+0x58a>
 80203bc:	4b1b      	ldr	r3, [pc, #108]	; (802042c <tcp_receive+0x5ec>)
 80203be:	f240 5295 	movw	r2, #1429	; 0x595
 80203c2:	491d      	ldr	r1, [pc, #116]	; (8020438 <tcp_receive+0x5f8>)
 80203c4:	481b      	ldr	r0, [pc, #108]	; (8020434 <tcp_receive+0x5f4>)
 80203c6:	f006 fc47 	bl	8026c58 <iprintf>
      off = (u16_t)off32;
 80203ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80203d0:	4b15      	ldr	r3, [pc, #84]	; (8020428 <tcp_receive+0x5e8>)
 80203d2:	685b      	ldr	r3, [r3, #4]
 80203d4:	891b      	ldrh	r3, [r3, #8]
 80203d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80203da:	429a      	cmp	r2, r3
 80203dc:	d906      	bls.n	80203ec <tcp_receive+0x5ac>
 80203de:	4b13      	ldr	r3, [pc, #76]	; (802042c <tcp_receive+0x5ec>)
 80203e0:	f240 5297 	movw	r2, #1431	; 0x597
 80203e4:	4915      	ldr	r1, [pc, #84]	; (802043c <tcp_receive+0x5fc>)
 80203e6:	4813      	ldr	r0, [pc, #76]	; (8020434 <tcp_receive+0x5f4>)
 80203e8:	f006 fc36 	bl	8026c58 <iprintf>
      inseg.len -= off;
 80203ec:	4b0e      	ldr	r3, [pc, #56]	; (8020428 <tcp_receive+0x5e8>)
 80203ee:	891a      	ldrh	r2, [r3, #8]
 80203f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80203f4:	1ad3      	subs	r3, r2, r3
 80203f6:	b29a      	uxth	r2, r3
 80203f8:	4b0b      	ldr	r3, [pc, #44]	; (8020428 <tcp_receive+0x5e8>)
 80203fa:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80203fc:	4b0a      	ldr	r3, [pc, #40]	; (8020428 <tcp_receive+0x5e8>)
 80203fe:	685b      	ldr	r3, [r3, #4]
 8020400:	891a      	ldrh	r2, [r3, #8]
 8020402:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8020406:	1ad3      	subs	r3, r2, r3
 8020408:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 802040a:	e029      	b.n	8020460 <tcp_receive+0x620>
 802040c:	0802ec5c 	.word	0x0802ec5c
 8020410:	0802ec64 	.word	0x0802ec64
 8020414:	20005a50 	.word	0x20005a50
 8020418:	20005a4c 	.word	0x20005a4c
 802041c:	2001d520 	.word	0x2001d520
 8020420:	20005a52 	.word	0x20005a52
 8020424:	20005a48 	.word	0x20005a48
 8020428:	20005a28 	.word	0x20005a28
 802042c:	0802e8f4 	.word	0x0802e8f4
 8020430:	0802ec6c 	.word	0x0802ec6c
 8020434:	0802e940 	.word	0x0802e940
 8020438:	0802ec7c 	.word	0x0802ec7c
 802043c:	0802ec8c 	.word	0x0802ec8c
        off -= p->len;
 8020440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020442:	895b      	ldrh	r3, [r3, #10]
 8020444:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8020448:	1ad3      	subs	r3, r2, r3
 802044a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 802044e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020450:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8020452:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8020454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020456:	2200      	movs	r2, #0
 8020458:	815a      	strh	r2, [r3, #10]
        p = p->next;
 802045a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802045c:	681b      	ldr	r3, [r3, #0]
 802045e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8020460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020462:	895b      	ldrh	r3, [r3, #10]
 8020464:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8020468:	429a      	cmp	r2, r3
 802046a:	d8e9      	bhi.n	8020440 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 802046c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8020470:	4619      	mov	r1, r3
 8020472:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8020474:	f7fb ff42 	bl	801c2fc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8020478:	687b      	ldr	r3, [r7, #4]
 802047a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802047c:	4a91      	ldr	r2, [pc, #580]	; (80206c4 <tcp_receive+0x884>)
 802047e:	6013      	str	r3, [r2, #0]
 8020480:	4b91      	ldr	r3, [pc, #580]	; (80206c8 <tcp_receive+0x888>)
 8020482:	68db      	ldr	r3, [r3, #12]
 8020484:	4a8f      	ldr	r2, [pc, #572]	; (80206c4 <tcp_receive+0x884>)
 8020486:	6812      	ldr	r2, [r2, #0]
 8020488:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 802048a:	e00d      	b.n	80204a8 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 802048c:	4b8d      	ldr	r3, [pc, #564]	; (80206c4 <tcp_receive+0x884>)
 802048e:	681a      	ldr	r2, [r3, #0]
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020494:	1ad3      	subs	r3, r2, r3
 8020496:	2b00      	cmp	r3, #0
 8020498:	da06      	bge.n	80204a8 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 802049a:	687b      	ldr	r3, [r7, #4]
 802049c:	8b5b      	ldrh	r3, [r3, #26]
 802049e:	f043 0302 	orr.w	r3, r3, #2
 80204a2:	b29a      	uxth	r2, r3
 80204a4:	687b      	ldr	r3, [r7, #4]
 80204a6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80204a8:	4b86      	ldr	r3, [pc, #536]	; (80206c4 <tcp_receive+0x884>)
 80204aa:	681a      	ldr	r2, [r3, #0]
 80204ac:	687b      	ldr	r3, [r7, #4]
 80204ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80204b0:	1ad3      	subs	r3, r2, r3
 80204b2:	2b00      	cmp	r3, #0
 80204b4:	f2c0 842a 	blt.w	8020d0c <tcp_receive+0xecc>
 80204b8:	4b82      	ldr	r3, [pc, #520]	; (80206c4 <tcp_receive+0x884>)
 80204ba:	681a      	ldr	r2, [r3, #0]
 80204bc:	687b      	ldr	r3, [r7, #4]
 80204be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80204c0:	6879      	ldr	r1, [r7, #4]
 80204c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80204c4:	440b      	add	r3, r1
 80204c6:	1ad3      	subs	r3, r2, r3
 80204c8:	3301      	adds	r3, #1
 80204ca:	2b00      	cmp	r3, #0
 80204cc:	f300 841e 	bgt.w	8020d0c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80204d0:	687b      	ldr	r3, [r7, #4]
 80204d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80204d4:	4b7b      	ldr	r3, [pc, #492]	; (80206c4 <tcp_receive+0x884>)
 80204d6:	681b      	ldr	r3, [r3, #0]
 80204d8:	429a      	cmp	r2, r3
 80204da:	f040 829a 	bne.w	8020a12 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80204de:	4b7a      	ldr	r3, [pc, #488]	; (80206c8 <tcp_receive+0x888>)
 80204e0:	891c      	ldrh	r4, [r3, #8]
 80204e2:	4b79      	ldr	r3, [pc, #484]	; (80206c8 <tcp_receive+0x888>)
 80204e4:	68db      	ldr	r3, [r3, #12]
 80204e6:	899b      	ldrh	r3, [r3, #12]
 80204e8:	b29b      	uxth	r3, r3
 80204ea:	4618      	mov	r0, r3
 80204ec:	f7fa fb4e 	bl	801ab8c <lwip_htons>
 80204f0:	4603      	mov	r3, r0
 80204f2:	b2db      	uxtb	r3, r3
 80204f4:	f003 0303 	and.w	r3, r3, #3
 80204f8:	2b00      	cmp	r3, #0
 80204fa:	d001      	beq.n	8020500 <tcp_receive+0x6c0>
 80204fc:	2301      	movs	r3, #1
 80204fe:	e000      	b.n	8020502 <tcp_receive+0x6c2>
 8020500:	2300      	movs	r3, #0
 8020502:	4423      	add	r3, r4
 8020504:	b29a      	uxth	r2, r3
 8020506:	4b71      	ldr	r3, [pc, #452]	; (80206cc <tcp_receive+0x88c>)
 8020508:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 802050a:	687b      	ldr	r3, [r7, #4]
 802050c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802050e:	4b6f      	ldr	r3, [pc, #444]	; (80206cc <tcp_receive+0x88c>)
 8020510:	881b      	ldrh	r3, [r3, #0]
 8020512:	429a      	cmp	r2, r3
 8020514:	d275      	bcs.n	8020602 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8020516:	4b6c      	ldr	r3, [pc, #432]	; (80206c8 <tcp_receive+0x888>)
 8020518:	68db      	ldr	r3, [r3, #12]
 802051a:	899b      	ldrh	r3, [r3, #12]
 802051c:	b29b      	uxth	r3, r3
 802051e:	4618      	mov	r0, r3
 8020520:	f7fa fb34 	bl	801ab8c <lwip_htons>
 8020524:	4603      	mov	r3, r0
 8020526:	b2db      	uxtb	r3, r3
 8020528:	f003 0301 	and.w	r3, r3, #1
 802052c:	2b00      	cmp	r3, #0
 802052e:	d01f      	beq.n	8020570 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8020530:	4b65      	ldr	r3, [pc, #404]	; (80206c8 <tcp_receive+0x888>)
 8020532:	68db      	ldr	r3, [r3, #12]
 8020534:	899b      	ldrh	r3, [r3, #12]
 8020536:	b29b      	uxth	r3, r3
 8020538:	b21b      	sxth	r3, r3
 802053a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 802053e:	b21c      	sxth	r4, r3
 8020540:	4b61      	ldr	r3, [pc, #388]	; (80206c8 <tcp_receive+0x888>)
 8020542:	68db      	ldr	r3, [r3, #12]
 8020544:	899b      	ldrh	r3, [r3, #12]
 8020546:	b29b      	uxth	r3, r3
 8020548:	4618      	mov	r0, r3
 802054a:	f7fa fb1f 	bl	801ab8c <lwip_htons>
 802054e:	4603      	mov	r3, r0
 8020550:	b2db      	uxtb	r3, r3
 8020552:	b29b      	uxth	r3, r3
 8020554:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8020558:	b29b      	uxth	r3, r3
 802055a:	4618      	mov	r0, r3
 802055c:	f7fa fb16 	bl	801ab8c <lwip_htons>
 8020560:	4603      	mov	r3, r0
 8020562:	b21b      	sxth	r3, r3
 8020564:	4323      	orrs	r3, r4
 8020566:	b21a      	sxth	r2, r3
 8020568:	4b57      	ldr	r3, [pc, #348]	; (80206c8 <tcp_receive+0x888>)
 802056a:	68db      	ldr	r3, [r3, #12]
 802056c:	b292      	uxth	r2, r2
 802056e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8020570:	687b      	ldr	r3, [r7, #4]
 8020572:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020574:	4b54      	ldr	r3, [pc, #336]	; (80206c8 <tcp_receive+0x888>)
 8020576:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8020578:	4b53      	ldr	r3, [pc, #332]	; (80206c8 <tcp_receive+0x888>)
 802057a:	68db      	ldr	r3, [r3, #12]
 802057c:	899b      	ldrh	r3, [r3, #12]
 802057e:	b29b      	uxth	r3, r3
 8020580:	4618      	mov	r0, r3
 8020582:	f7fa fb03 	bl	801ab8c <lwip_htons>
 8020586:	4603      	mov	r3, r0
 8020588:	b2db      	uxtb	r3, r3
 802058a:	f003 0302 	and.w	r3, r3, #2
 802058e:	2b00      	cmp	r3, #0
 8020590:	d005      	beq.n	802059e <tcp_receive+0x75e>
            inseg.len -= 1;
 8020592:	4b4d      	ldr	r3, [pc, #308]	; (80206c8 <tcp_receive+0x888>)
 8020594:	891b      	ldrh	r3, [r3, #8]
 8020596:	3b01      	subs	r3, #1
 8020598:	b29a      	uxth	r2, r3
 802059a:	4b4b      	ldr	r3, [pc, #300]	; (80206c8 <tcp_receive+0x888>)
 802059c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 802059e:	4b4a      	ldr	r3, [pc, #296]	; (80206c8 <tcp_receive+0x888>)
 80205a0:	685b      	ldr	r3, [r3, #4]
 80205a2:	4a49      	ldr	r2, [pc, #292]	; (80206c8 <tcp_receive+0x888>)
 80205a4:	8912      	ldrh	r2, [r2, #8]
 80205a6:	4611      	mov	r1, r2
 80205a8:	4618      	mov	r0, r3
 80205aa:	f7fb fda7 	bl	801c0fc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80205ae:	4b46      	ldr	r3, [pc, #280]	; (80206c8 <tcp_receive+0x888>)
 80205b0:	891c      	ldrh	r4, [r3, #8]
 80205b2:	4b45      	ldr	r3, [pc, #276]	; (80206c8 <tcp_receive+0x888>)
 80205b4:	68db      	ldr	r3, [r3, #12]
 80205b6:	899b      	ldrh	r3, [r3, #12]
 80205b8:	b29b      	uxth	r3, r3
 80205ba:	4618      	mov	r0, r3
 80205bc:	f7fa fae6 	bl	801ab8c <lwip_htons>
 80205c0:	4603      	mov	r3, r0
 80205c2:	b2db      	uxtb	r3, r3
 80205c4:	f003 0303 	and.w	r3, r3, #3
 80205c8:	2b00      	cmp	r3, #0
 80205ca:	d001      	beq.n	80205d0 <tcp_receive+0x790>
 80205cc:	2301      	movs	r3, #1
 80205ce:	e000      	b.n	80205d2 <tcp_receive+0x792>
 80205d0:	2300      	movs	r3, #0
 80205d2:	4423      	add	r3, r4
 80205d4:	b29a      	uxth	r2, r3
 80205d6:	4b3d      	ldr	r3, [pc, #244]	; (80206cc <tcp_receive+0x88c>)
 80205d8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80205da:	4b3c      	ldr	r3, [pc, #240]	; (80206cc <tcp_receive+0x88c>)
 80205dc:	881b      	ldrh	r3, [r3, #0]
 80205de:	461a      	mov	r2, r3
 80205e0:	4b38      	ldr	r3, [pc, #224]	; (80206c4 <tcp_receive+0x884>)
 80205e2:	681b      	ldr	r3, [r3, #0]
 80205e4:	441a      	add	r2, r3
 80205e6:	687b      	ldr	r3, [r7, #4]
 80205e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80205ea:	6879      	ldr	r1, [r7, #4]
 80205ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80205ee:	440b      	add	r3, r1
 80205f0:	429a      	cmp	r2, r3
 80205f2:	d006      	beq.n	8020602 <tcp_receive+0x7c2>
 80205f4:	4b36      	ldr	r3, [pc, #216]	; (80206d0 <tcp_receive+0x890>)
 80205f6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80205fa:	4936      	ldr	r1, [pc, #216]	; (80206d4 <tcp_receive+0x894>)
 80205fc:	4836      	ldr	r0, [pc, #216]	; (80206d8 <tcp_receive+0x898>)
 80205fe:	f006 fb2b 	bl	8026c58 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8020602:	687b      	ldr	r3, [r7, #4]
 8020604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020606:	2b00      	cmp	r3, #0
 8020608:	f000 80e7 	beq.w	80207da <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 802060c:	4b2e      	ldr	r3, [pc, #184]	; (80206c8 <tcp_receive+0x888>)
 802060e:	68db      	ldr	r3, [r3, #12]
 8020610:	899b      	ldrh	r3, [r3, #12]
 8020612:	b29b      	uxth	r3, r3
 8020614:	4618      	mov	r0, r3
 8020616:	f7fa fab9 	bl	801ab8c <lwip_htons>
 802061a:	4603      	mov	r3, r0
 802061c:	b2db      	uxtb	r3, r3
 802061e:	f003 0301 	and.w	r3, r3, #1
 8020622:	2b00      	cmp	r3, #0
 8020624:	d010      	beq.n	8020648 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8020626:	e00a      	b.n	802063e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8020628:	687b      	ldr	r3, [r7, #4]
 802062a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802062c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 802062e:	687b      	ldr	r3, [r7, #4]
 8020630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020632:	681a      	ldr	r2, [r3, #0]
 8020634:	687b      	ldr	r3, [r7, #4]
 8020636:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8020638:	68f8      	ldr	r0, [r7, #12]
 802063a:	f7fd fcaa 	bl	801df92 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 802063e:	687b      	ldr	r3, [r7, #4]
 8020640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020642:	2b00      	cmp	r3, #0
 8020644:	d1f0      	bne.n	8020628 <tcp_receive+0x7e8>
 8020646:	e0c8      	b.n	80207da <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8020648:	687b      	ldr	r3, [r7, #4]
 802064a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802064c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 802064e:	e052      	b.n	80206f6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8020650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020652:	68db      	ldr	r3, [r3, #12]
 8020654:	899b      	ldrh	r3, [r3, #12]
 8020656:	b29b      	uxth	r3, r3
 8020658:	4618      	mov	r0, r3
 802065a:	f7fa fa97 	bl	801ab8c <lwip_htons>
 802065e:	4603      	mov	r3, r0
 8020660:	b2db      	uxtb	r3, r3
 8020662:	f003 0301 	and.w	r3, r3, #1
 8020666:	2b00      	cmp	r3, #0
 8020668:	d03d      	beq.n	80206e6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 802066a:	4b17      	ldr	r3, [pc, #92]	; (80206c8 <tcp_receive+0x888>)
 802066c:	68db      	ldr	r3, [r3, #12]
 802066e:	899b      	ldrh	r3, [r3, #12]
 8020670:	b29b      	uxth	r3, r3
 8020672:	4618      	mov	r0, r3
 8020674:	f7fa fa8a 	bl	801ab8c <lwip_htons>
 8020678:	4603      	mov	r3, r0
 802067a:	b2db      	uxtb	r3, r3
 802067c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8020680:	2b00      	cmp	r3, #0
 8020682:	d130      	bne.n	80206e6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8020684:	4b10      	ldr	r3, [pc, #64]	; (80206c8 <tcp_receive+0x888>)
 8020686:	68db      	ldr	r3, [r3, #12]
 8020688:	899b      	ldrh	r3, [r3, #12]
 802068a:	b29c      	uxth	r4, r3
 802068c:	2001      	movs	r0, #1
 802068e:	f7fa fa7d 	bl	801ab8c <lwip_htons>
 8020692:	4603      	mov	r3, r0
 8020694:	461a      	mov	r2, r3
 8020696:	4b0c      	ldr	r3, [pc, #48]	; (80206c8 <tcp_receive+0x888>)
 8020698:	68db      	ldr	r3, [r3, #12]
 802069a:	4322      	orrs	r2, r4
 802069c:	b292      	uxth	r2, r2
 802069e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80206a0:	4b09      	ldr	r3, [pc, #36]	; (80206c8 <tcp_receive+0x888>)
 80206a2:	891c      	ldrh	r4, [r3, #8]
 80206a4:	4b08      	ldr	r3, [pc, #32]	; (80206c8 <tcp_receive+0x888>)
 80206a6:	68db      	ldr	r3, [r3, #12]
 80206a8:	899b      	ldrh	r3, [r3, #12]
 80206aa:	b29b      	uxth	r3, r3
 80206ac:	4618      	mov	r0, r3
 80206ae:	f7fa fa6d 	bl	801ab8c <lwip_htons>
 80206b2:	4603      	mov	r3, r0
 80206b4:	b2db      	uxtb	r3, r3
 80206b6:	f003 0303 	and.w	r3, r3, #3
 80206ba:	2b00      	cmp	r3, #0
 80206bc:	d00e      	beq.n	80206dc <tcp_receive+0x89c>
 80206be:	2301      	movs	r3, #1
 80206c0:	e00d      	b.n	80206de <tcp_receive+0x89e>
 80206c2:	bf00      	nop
 80206c4:	20005a48 	.word	0x20005a48
 80206c8:	20005a28 	.word	0x20005a28
 80206cc:	20005a52 	.word	0x20005a52
 80206d0:	0802e8f4 	.word	0x0802e8f4
 80206d4:	0802ec9c 	.word	0x0802ec9c
 80206d8:	0802e940 	.word	0x0802e940
 80206dc:	2300      	movs	r3, #0
 80206de:	4423      	add	r3, r4
 80206e0:	b29a      	uxth	r2, r3
 80206e2:	4b98      	ldr	r3, [pc, #608]	; (8020944 <tcp_receive+0xb04>)
 80206e4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80206e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80206e8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80206ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80206ec:	681b      	ldr	r3, [r3, #0]
 80206ee:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80206f0:	6938      	ldr	r0, [r7, #16]
 80206f2:	f7fd fc4e 	bl	801df92 <tcp_seg_free>
            while (next &&
 80206f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80206f8:	2b00      	cmp	r3, #0
 80206fa:	d00e      	beq.n	802071a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80206fc:	4b91      	ldr	r3, [pc, #580]	; (8020944 <tcp_receive+0xb04>)
 80206fe:	881b      	ldrh	r3, [r3, #0]
 8020700:	461a      	mov	r2, r3
 8020702:	4b91      	ldr	r3, [pc, #580]	; (8020948 <tcp_receive+0xb08>)
 8020704:	681b      	ldr	r3, [r3, #0]
 8020706:	441a      	add	r2, r3
 8020708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802070a:	68db      	ldr	r3, [r3, #12]
 802070c:	685b      	ldr	r3, [r3, #4]
 802070e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8020710:	8909      	ldrh	r1, [r1, #8]
 8020712:	440b      	add	r3, r1
 8020714:	1ad3      	subs	r3, r2, r3
            while (next &&
 8020716:	2b00      	cmp	r3, #0
 8020718:	da9a      	bge.n	8020650 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 802071a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802071c:	2b00      	cmp	r3, #0
 802071e:	d059      	beq.n	80207d4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8020720:	4b88      	ldr	r3, [pc, #544]	; (8020944 <tcp_receive+0xb04>)
 8020722:	881b      	ldrh	r3, [r3, #0]
 8020724:	461a      	mov	r2, r3
 8020726:	4b88      	ldr	r3, [pc, #544]	; (8020948 <tcp_receive+0xb08>)
 8020728:	681b      	ldr	r3, [r3, #0]
 802072a:	441a      	add	r2, r3
 802072c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802072e:	68db      	ldr	r3, [r3, #12]
 8020730:	685b      	ldr	r3, [r3, #4]
 8020732:	1ad3      	subs	r3, r2, r3
            if (next &&
 8020734:	2b00      	cmp	r3, #0
 8020736:	dd4d      	ble.n	80207d4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8020738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802073a:	68db      	ldr	r3, [r3, #12]
 802073c:	685b      	ldr	r3, [r3, #4]
 802073e:	b29a      	uxth	r2, r3
 8020740:	4b81      	ldr	r3, [pc, #516]	; (8020948 <tcp_receive+0xb08>)
 8020742:	681b      	ldr	r3, [r3, #0]
 8020744:	b29b      	uxth	r3, r3
 8020746:	1ad3      	subs	r3, r2, r3
 8020748:	b29a      	uxth	r2, r3
 802074a:	4b80      	ldr	r3, [pc, #512]	; (802094c <tcp_receive+0xb0c>)
 802074c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 802074e:	4b7f      	ldr	r3, [pc, #508]	; (802094c <tcp_receive+0xb0c>)
 8020750:	68db      	ldr	r3, [r3, #12]
 8020752:	899b      	ldrh	r3, [r3, #12]
 8020754:	b29b      	uxth	r3, r3
 8020756:	4618      	mov	r0, r3
 8020758:	f7fa fa18 	bl	801ab8c <lwip_htons>
 802075c:	4603      	mov	r3, r0
 802075e:	b2db      	uxtb	r3, r3
 8020760:	f003 0302 	and.w	r3, r3, #2
 8020764:	2b00      	cmp	r3, #0
 8020766:	d005      	beq.n	8020774 <tcp_receive+0x934>
                inseg.len -= 1;
 8020768:	4b78      	ldr	r3, [pc, #480]	; (802094c <tcp_receive+0xb0c>)
 802076a:	891b      	ldrh	r3, [r3, #8]
 802076c:	3b01      	subs	r3, #1
 802076e:	b29a      	uxth	r2, r3
 8020770:	4b76      	ldr	r3, [pc, #472]	; (802094c <tcp_receive+0xb0c>)
 8020772:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8020774:	4b75      	ldr	r3, [pc, #468]	; (802094c <tcp_receive+0xb0c>)
 8020776:	685b      	ldr	r3, [r3, #4]
 8020778:	4a74      	ldr	r2, [pc, #464]	; (802094c <tcp_receive+0xb0c>)
 802077a:	8912      	ldrh	r2, [r2, #8]
 802077c:	4611      	mov	r1, r2
 802077e:	4618      	mov	r0, r3
 8020780:	f7fb fcbc 	bl	801c0fc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8020784:	4b71      	ldr	r3, [pc, #452]	; (802094c <tcp_receive+0xb0c>)
 8020786:	891c      	ldrh	r4, [r3, #8]
 8020788:	4b70      	ldr	r3, [pc, #448]	; (802094c <tcp_receive+0xb0c>)
 802078a:	68db      	ldr	r3, [r3, #12]
 802078c:	899b      	ldrh	r3, [r3, #12]
 802078e:	b29b      	uxth	r3, r3
 8020790:	4618      	mov	r0, r3
 8020792:	f7fa f9fb 	bl	801ab8c <lwip_htons>
 8020796:	4603      	mov	r3, r0
 8020798:	b2db      	uxtb	r3, r3
 802079a:	f003 0303 	and.w	r3, r3, #3
 802079e:	2b00      	cmp	r3, #0
 80207a0:	d001      	beq.n	80207a6 <tcp_receive+0x966>
 80207a2:	2301      	movs	r3, #1
 80207a4:	e000      	b.n	80207a8 <tcp_receive+0x968>
 80207a6:	2300      	movs	r3, #0
 80207a8:	4423      	add	r3, r4
 80207aa:	b29a      	uxth	r2, r3
 80207ac:	4b65      	ldr	r3, [pc, #404]	; (8020944 <tcp_receive+0xb04>)
 80207ae:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80207b0:	4b64      	ldr	r3, [pc, #400]	; (8020944 <tcp_receive+0xb04>)
 80207b2:	881b      	ldrh	r3, [r3, #0]
 80207b4:	461a      	mov	r2, r3
 80207b6:	4b64      	ldr	r3, [pc, #400]	; (8020948 <tcp_receive+0xb08>)
 80207b8:	681b      	ldr	r3, [r3, #0]
 80207ba:	441a      	add	r2, r3
 80207bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80207be:	68db      	ldr	r3, [r3, #12]
 80207c0:	685b      	ldr	r3, [r3, #4]
 80207c2:	429a      	cmp	r2, r3
 80207c4:	d006      	beq.n	80207d4 <tcp_receive+0x994>
 80207c6:	4b62      	ldr	r3, [pc, #392]	; (8020950 <tcp_receive+0xb10>)
 80207c8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80207cc:	4961      	ldr	r1, [pc, #388]	; (8020954 <tcp_receive+0xb14>)
 80207ce:	4862      	ldr	r0, [pc, #392]	; (8020958 <tcp_receive+0xb18>)
 80207d0:	f006 fa42 	bl	8026c58 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80207d4:	687b      	ldr	r3, [r7, #4]
 80207d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80207d8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80207da:	4b5a      	ldr	r3, [pc, #360]	; (8020944 <tcp_receive+0xb04>)
 80207dc:	881b      	ldrh	r3, [r3, #0]
 80207de:	461a      	mov	r2, r3
 80207e0:	4b59      	ldr	r3, [pc, #356]	; (8020948 <tcp_receive+0xb08>)
 80207e2:	681b      	ldr	r3, [r3, #0]
 80207e4:	441a      	add	r2, r3
 80207e6:	687b      	ldr	r3, [r7, #4]
 80207e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80207ea:	687b      	ldr	r3, [r7, #4]
 80207ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80207ee:	4b55      	ldr	r3, [pc, #340]	; (8020944 <tcp_receive+0xb04>)
 80207f0:	881b      	ldrh	r3, [r3, #0]
 80207f2:	429a      	cmp	r2, r3
 80207f4:	d206      	bcs.n	8020804 <tcp_receive+0x9c4>
 80207f6:	4b56      	ldr	r3, [pc, #344]	; (8020950 <tcp_receive+0xb10>)
 80207f8:	f240 6207 	movw	r2, #1543	; 0x607
 80207fc:	4957      	ldr	r1, [pc, #348]	; (802095c <tcp_receive+0xb1c>)
 80207fe:	4856      	ldr	r0, [pc, #344]	; (8020958 <tcp_receive+0xb18>)
 8020800:	f006 fa2a 	bl	8026c58 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8020804:	687b      	ldr	r3, [r7, #4]
 8020806:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020808:	4b4e      	ldr	r3, [pc, #312]	; (8020944 <tcp_receive+0xb04>)
 802080a:	881b      	ldrh	r3, [r3, #0]
 802080c:	1ad3      	subs	r3, r2, r3
 802080e:	b29a      	uxth	r2, r3
 8020810:	687b      	ldr	r3, [r7, #4]
 8020812:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8020814:	6878      	ldr	r0, [r7, #4]
 8020816:	f7fc fd7f 	bl	801d318 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 802081a:	4b4c      	ldr	r3, [pc, #304]	; (802094c <tcp_receive+0xb0c>)
 802081c:	685b      	ldr	r3, [r3, #4]
 802081e:	891b      	ldrh	r3, [r3, #8]
 8020820:	2b00      	cmp	r3, #0
 8020822:	d006      	beq.n	8020832 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8020824:	4b49      	ldr	r3, [pc, #292]	; (802094c <tcp_receive+0xb0c>)
 8020826:	685b      	ldr	r3, [r3, #4]
 8020828:	4a4d      	ldr	r2, [pc, #308]	; (8020960 <tcp_receive+0xb20>)
 802082a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 802082c:	4b47      	ldr	r3, [pc, #284]	; (802094c <tcp_receive+0xb0c>)
 802082e:	2200      	movs	r2, #0
 8020830:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8020832:	4b46      	ldr	r3, [pc, #280]	; (802094c <tcp_receive+0xb0c>)
 8020834:	68db      	ldr	r3, [r3, #12]
 8020836:	899b      	ldrh	r3, [r3, #12]
 8020838:	b29b      	uxth	r3, r3
 802083a:	4618      	mov	r0, r3
 802083c:	f7fa f9a6 	bl	801ab8c <lwip_htons>
 8020840:	4603      	mov	r3, r0
 8020842:	b2db      	uxtb	r3, r3
 8020844:	f003 0301 	and.w	r3, r3, #1
 8020848:	2b00      	cmp	r3, #0
 802084a:	f000 80b8 	beq.w	80209be <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 802084e:	4b45      	ldr	r3, [pc, #276]	; (8020964 <tcp_receive+0xb24>)
 8020850:	781b      	ldrb	r3, [r3, #0]
 8020852:	f043 0320 	orr.w	r3, r3, #32
 8020856:	b2da      	uxtb	r2, r3
 8020858:	4b42      	ldr	r3, [pc, #264]	; (8020964 <tcp_receive+0xb24>)
 802085a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 802085c:	e0af      	b.n	80209be <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 802085e:	687b      	ldr	r3, [r7, #4]
 8020860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020862:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8020864:	687b      	ldr	r3, [r7, #4]
 8020866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020868:	68db      	ldr	r3, [r3, #12]
 802086a:	685b      	ldr	r3, [r3, #4]
 802086c:	4a36      	ldr	r2, [pc, #216]	; (8020948 <tcp_receive+0xb08>)
 802086e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8020870:	68bb      	ldr	r3, [r7, #8]
 8020872:	891b      	ldrh	r3, [r3, #8]
 8020874:	461c      	mov	r4, r3
 8020876:	68bb      	ldr	r3, [r7, #8]
 8020878:	68db      	ldr	r3, [r3, #12]
 802087a:	899b      	ldrh	r3, [r3, #12]
 802087c:	b29b      	uxth	r3, r3
 802087e:	4618      	mov	r0, r3
 8020880:	f7fa f984 	bl	801ab8c <lwip_htons>
 8020884:	4603      	mov	r3, r0
 8020886:	b2db      	uxtb	r3, r3
 8020888:	f003 0303 	and.w	r3, r3, #3
 802088c:	2b00      	cmp	r3, #0
 802088e:	d001      	beq.n	8020894 <tcp_receive+0xa54>
 8020890:	2301      	movs	r3, #1
 8020892:	e000      	b.n	8020896 <tcp_receive+0xa56>
 8020894:	2300      	movs	r3, #0
 8020896:	191a      	adds	r2, r3, r4
 8020898:	687b      	ldr	r3, [r7, #4]
 802089a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802089c:	441a      	add	r2, r3
 802089e:	687b      	ldr	r3, [r7, #4]
 80208a0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80208a2:	687b      	ldr	r3, [r7, #4]
 80208a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80208a6:	461c      	mov	r4, r3
 80208a8:	68bb      	ldr	r3, [r7, #8]
 80208aa:	891b      	ldrh	r3, [r3, #8]
 80208ac:	461d      	mov	r5, r3
 80208ae:	68bb      	ldr	r3, [r7, #8]
 80208b0:	68db      	ldr	r3, [r3, #12]
 80208b2:	899b      	ldrh	r3, [r3, #12]
 80208b4:	b29b      	uxth	r3, r3
 80208b6:	4618      	mov	r0, r3
 80208b8:	f7fa f968 	bl	801ab8c <lwip_htons>
 80208bc:	4603      	mov	r3, r0
 80208be:	b2db      	uxtb	r3, r3
 80208c0:	f003 0303 	and.w	r3, r3, #3
 80208c4:	2b00      	cmp	r3, #0
 80208c6:	d001      	beq.n	80208cc <tcp_receive+0xa8c>
 80208c8:	2301      	movs	r3, #1
 80208ca:	e000      	b.n	80208ce <tcp_receive+0xa8e>
 80208cc:	2300      	movs	r3, #0
 80208ce:	442b      	add	r3, r5
 80208d0:	429c      	cmp	r4, r3
 80208d2:	d206      	bcs.n	80208e2 <tcp_receive+0xaa2>
 80208d4:	4b1e      	ldr	r3, [pc, #120]	; (8020950 <tcp_receive+0xb10>)
 80208d6:	f240 622b 	movw	r2, #1579	; 0x62b
 80208da:	4923      	ldr	r1, [pc, #140]	; (8020968 <tcp_receive+0xb28>)
 80208dc:	481e      	ldr	r0, [pc, #120]	; (8020958 <tcp_receive+0xb18>)
 80208de:	f006 f9bb 	bl	8026c58 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80208e2:	68bb      	ldr	r3, [r7, #8]
 80208e4:	891b      	ldrh	r3, [r3, #8]
 80208e6:	461c      	mov	r4, r3
 80208e8:	68bb      	ldr	r3, [r7, #8]
 80208ea:	68db      	ldr	r3, [r3, #12]
 80208ec:	899b      	ldrh	r3, [r3, #12]
 80208ee:	b29b      	uxth	r3, r3
 80208f0:	4618      	mov	r0, r3
 80208f2:	f7fa f94b 	bl	801ab8c <lwip_htons>
 80208f6:	4603      	mov	r3, r0
 80208f8:	b2db      	uxtb	r3, r3
 80208fa:	f003 0303 	and.w	r3, r3, #3
 80208fe:	2b00      	cmp	r3, #0
 8020900:	d001      	beq.n	8020906 <tcp_receive+0xac6>
 8020902:	2301      	movs	r3, #1
 8020904:	e000      	b.n	8020908 <tcp_receive+0xac8>
 8020906:	2300      	movs	r3, #0
 8020908:	1919      	adds	r1, r3, r4
 802090a:	687b      	ldr	r3, [r7, #4]
 802090c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802090e:	b28b      	uxth	r3, r1
 8020910:	1ad3      	subs	r3, r2, r3
 8020912:	b29a      	uxth	r2, r3
 8020914:	687b      	ldr	r3, [r7, #4]
 8020916:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8020918:	6878      	ldr	r0, [r7, #4]
 802091a:	f7fc fcfd 	bl	801d318 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 802091e:	68bb      	ldr	r3, [r7, #8]
 8020920:	685b      	ldr	r3, [r3, #4]
 8020922:	891b      	ldrh	r3, [r3, #8]
 8020924:	2b00      	cmp	r3, #0
 8020926:	d028      	beq.n	802097a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8020928:	4b0d      	ldr	r3, [pc, #52]	; (8020960 <tcp_receive+0xb20>)
 802092a:	681b      	ldr	r3, [r3, #0]
 802092c:	2b00      	cmp	r3, #0
 802092e:	d01d      	beq.n	802096c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8020930:	4b0b      	ldr	r3, [pc, #44]	; (8020960 <tcp_receive+0xb20>)
 8020932:	681a      	ldr	r2, [r3, #0]
 8020934:	68bb      	ldr	r3, [r7, #8]
 8020936:	685b      	ldr	r3, [r3, #4]
 8020938:	4619      	mov	r1, r3
 802093a:	4610      	mov	r0, r2
 802093c:	f7fb fe32 	bl	801c5a4 <pbuf_cat>
 8020940:	e018      	b.n	8020974 <tcp_receive+0xb34>
 8020942:	bf00      	nop
 8020944:	20005a52 	.word	0x20005a52
 8020948:	20005a48 	.word	0x20005a48
 802094c:	20005a28 	.word	0x20005a28
 8020950:	0802e8f4 	.word	0x0802e8f4
 8020954:	0802ecd4 	.word	0x0802ecd4
 8020958:	0802e940 	.word	0x0802e940
 802095c:	0802ed10 	.word	0x0802ed10
 8020960:	20005a58 	.word	0x20005a58
 8020964:	20005a55 	.word	0x20005a55
 8020968:	0802ed30 	.word	0x0802ed30
            } else {
              recv_data = cseg->p;
 802096c:	68bb      	ldr	r3, [r7, #8]
 802096e:	685b      	ldr	r3, [r3, #4]
 8020970:	4a70      	ldr	r2, [pc, #448]	; (8020b34 <tcp_receive+0xcf4>)
 8020972:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8020974:	68bb      	ldr	r3, [r7, #8]
 8020976:	2200      	movs	r2, #0
 8020978:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 802097a:	68bb      	ldr	r3, [r7, #8]
 802097c:	68db      	ldr	r3, [r3, #12]
 802097e:	899b      	ldrh	r3, [r3, #12]
 8020980:	b29b      	uxth	r3, r3
 8020982:	4618      	mov	r0, r3
 8020984:	f7fa f902 	bl	801ab8c <lwip_htons>
 8020988:	4603      	mov	r3, r0
 802098a:	b2db      	uxtb	r3, r3
 802098c:	f003 0301 	and.w	r3, r3, #1
 8020990:	2b00      	cmp	r3, #0
 8020992:	d00d      	beq.n	80209b0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8020994:	4b68      	ldr	r3, [pc, #416]	; (8020b38 <tcp_receive+0xcf8>)
 8020996:	781b      	ldrb	r3, [r3, #0]
 8020998:	f043 0320 	orr.w	r3, r3, #32
 802099c:	b2da      	uxtb	r2, r3
 802099e:	4b66      	ldr	r3, [pc, #408]	; (8020b38 <tcp_receive+0xcf8>)
 80209a0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80209a2:	687b      	ldr	r3, [r7, #4]
 80209a4:	7d1b      	ldrb	r3, [r3, #20]
 80209a6:	2b04      	cmp	r3, #4
 80209a8:	d102      	bne.n	80209b0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	2207      	movs	r2, #7
 80209ae:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80209b0:	68bb      	ldr	r3, [r7, #8]
 80209b2:	681a      	ldr	r2, [r3, #0]
 80209b4:	687b      	ldr	r3, [r7, #4]
 80209b6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80209b8:	68b8      	ldr	r0, [r7, #8]
 80209ba:	f7fd faea 	bl	801df92 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80209be:	687b      	ldr	r3, [r7, #4]
 80209c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80209c2:	2b00      	cmp	r3, #0
 80209c4:	d008      	beq.n	80209d8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80209c6:	687b      	ldr	r3, [r7, #4]
 80209c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80209ca:	68db      	ldr	r3, [r3, #12]
 80209cc:	685a      	ldr	r2, [r3, #4]
 80209ce:	687b      	ldr	r3, [r7, #4]
 80209d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80209d2:	429a      	cmp	r2, r3
 80209d4:	f43f af43 	beq.w	802085e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80209d8:	687b      	ldr	r3, [r7, #4]
 80209da:	8b5b      	ldrh	r3, [r3, #26]
 80209dc:	f003 0301 	and.w	r3, r3, #1
 80209e0:	2b00      	cmp	r3, #0
 80209e2:	d00e      	beq.n	8020a02 <tcp_receive+0xbc2>
 80209e4:	687b      	ldr	r3, [r7, #4]
 80209e6:	8b5b      	ldrh	r3, [r3, #26]
 80209e8:	f023 0301 	bic.w	r3, r3, #1
 80209ec:	b29a      	uxth	r2, r3
 80209ee:	687b      	ldr	r3, [r7, #4]
 80209f0:	835a      	strh	r2, [r3, #26]
 80209f2:	687b      	ldr	r3, [r7, #4]
 80209f4:	8b5b      	ldrh	r3, [r3, #26]
 80209f6:	f043 0302 	orr.w	r3, r3, #2
 80209fa:	b29a      	uxth	r2, r3
 80209fc:	687b      	ldr	r3, [r7, #4]
 80209fe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8020a00:	e188      	b.n	8020d14 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8020a02:	687b      	ldr	r3, [r7, #4]
 8020a04:	8b5b      	ldrh	r3, [r3, #26]
 8020a06:	f043 0301 	orr.w	r3, r3, #1
 8020a0a:	b29a      	uxth	r2, r3
 8020a0c:	687b      	ldr	r3, [r7, #4]
 8020a0e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8020a10:	e180      	b.n	8020d14 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8020a12:	687b      	ldr	r3, [r7, #4]
 8020a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020a16:	2b00      	cmp	r3, #0
 8020a18:	d106      	bne.n	8020a28 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8020a1a:	4848      	ldr	r0, [pc, #288]	; (8020b3c <tcp_receive+0xcfc>)
 8020a1c:	f7fd faf0 	bl	801e000 <tcp_seg_copy>
 8020a20:	4602      	mov	r2, r0
 8020a22:	687b      	ldr	r3, [r7, #4]
 8020a24:	675a      	str	r2, [r3, #116]	; 0x74
 8020a26:	e16d      	b.n	8020d04 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8020a28:	2300      	movs	r3, #0
 8020a2a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8020a2c:	687b      	ldr	r3, [r7, #4]
 8020a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020a30:	63bb      	str	r3, [r7, #56]	; 0x38
 8020a32:	e157      	b.n	8020ce4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8020a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020a36:	68db      	ldr	r3, [r3, #12]
 8020a38:	685a      	ldr	r2, [r3, #4]
 8020a3a:	4b41      	ldr	r3, [pc, #260]	; (8020b40 <tcp_receive+0xd00>)
 8020a3c:	681b      	ldr	r3, [r3, #0]
 8020a3e:	429a      	cmp	r2, r3
 8020a40:	d11d      	bne.n	8020a7e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8020a42:	4b3e      	ldr	r3, [pc, #248]	; (8020b3c <tcp_receive+0xcfc>)
 8020a44:	891a      	ldrh	r2, [r3, #8]
 8020a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020a48:	891b      	ldrh	r3, [r3, #8]
 8020a4a:	429a      	cmp	r2, r3
 8020a4c:	f240 814f 	bls.w	8020cee <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8020a50:	483a      	ldr	r0, [pc, #232]	; (8020b3c <tcp_receive+0xcfc>)
 8020a52:	f7fd fad5 	bl	801e000 <tcp_seg_copy>
 8020a56:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8020a58:	697b      	ldr	r3, [r7, #20]
 8020a5a:	2b00      	cmp	r3, #0
 8020a5c:	f000 8149 	beq.w	8020cf2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8020a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a62:	2b00      	cmp	r3, #0
 8020a64:	d003      	beq.n	8020a6e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8020a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a68:	697a      	ldr	r2, [r7, #20]
 8020a6a:	601a      	str	r2, [r3, #0]
 8020a6c:	e002      	b.n	8020a74 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8020a6e:	687b      	ldr	r3, [r7, #4]
 8020a70:	697a      	ldr	r2, [r7, #20]
 8020a72:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8020a74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8020a76:	6978      	ldr	r0, [r7, #20]
 8020a78:	f7ff f8de 	bl	801fc38 <tcp_oos_insert_segment>
                }
                break;
 8020a7c:	e139      	b.n	8020cf2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8020a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a80:	2b00      	cmp	r3, #0
 8020a82:	d117      	bne.n	8020ab4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8020a84:	4b2e      	ldr	r3, [pc, #184]	; (8020b40 <tcp_receive+0xd00>)
 8020a86:	681a      	ldr	r2, [r3, #0]
 8020a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020a8a:	68db      	ldr	r3, [r3, #12]
 8020a8c:	685b      	ldr	r3, [r3, #4]
 8020a8e:	1ad3      	subs	r3, r2, r3
 8020a90:	2b00      	cmp	r3, #0
 8020a92:	da57      	bge.n	8020b44 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8020a94:	4829      	ldr	r0, [pc, #164]	; (8020b3c <tcp_receive+0xcfc>)
 8020a96:	f7fd fab3 	bl	801e000 <tcp_seg_copy>
 8020a9a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8020a9c:	69bb      	ldr	r3, [r7, #24]
 8020a9e:	2b00      	cmp	r3, #0
 8020aa0:	f000 8129 	beq.w	8020cf6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8020aa4:	687b      	ldr	r3, [r7, #4]
 8020aa6:	69ba      	ldr	r2, [r7, #24]
 8020aa8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8020aaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8020aac:	69b8      	ldr	r0, [r7, #24]
 8020aae:	f7ff f8c3 	bl	801fc38 <tcp_oos_insert_segment>
                  }
                  break;
 8020ab2:	e120      	b.n	8020cf6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8020ab4:	4b22      	ldr	r3, [pc, #136]	; (8020b40 <tcp_receive+0xd00>)
 8020ab6:	681a      	ldr	r2, [r3, #0]
 8020ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020aba:	68db      	ldr	r3, [r3, #12]
 8020abc:	685b      	ldr	r3, [r3, #4]
 8020abe:	1ad3      	subs	r3, r2, r3
 8020ac0:	3b01      	subs	r3, #1
 8020ac2:	2b00      	cmp	r3, #0
 8020ac4:	db3e      	blt.n	8020b44 <tcp_receive+0xd04>
 8020ac6:	4b1e      	ldr	r3, [pc, #120]	; (8020b40 <tcp_receive+0xd00>)
 8020ac8:	681a      	ldr	r2, [r3, #0]
 8020aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020acc:	68db      	ldr	r3, [r3, #12]
 8020ace:	685b      	ldr	r3, [r3, #4]
 8020ad0:	1ad3      	subs	r3, r2, r3
 8020ad2:	3301      	adds	r3, #1
 8020ad4:	2b00      	cmp	r3, #0
 8020ad6:	dc35      	bgt.n	8020b44 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8020ad8:	4818      	ldr	r0, [pc, #96]	; (8020b3c <tcp_receive+0xcfc>)
 8020ada:	f7fd fa91 	bl	801e000 <tcp_seg_copy>
 8020ade:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8020ae0:	69fb      	ldr	r3, [r7, #28]
 8020ae2:	2b00      	cmp	r3, #0
 8020ae4:	f000 8109 	beq.w	8020cfa <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8020ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020aea:	68db      	ldr	r3, [r3, #12]
 8020aec:	685b      	ldr	r3, [r3, #4]
 8020aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020af0:	8912      	ldrh	r2, [r2, #8]
 8020af2:	441a      	add	r2, r3
 8020af4:	4b12      	ldr	r3, [pc, #72]	; (8020b40 <tcp_receive+0xd00>)
 8020af6:	681b      	ldr	r3, [r3, #0]
 8020af8:	1ad3      	subs	r3, r2, r3
 8020afa:	2b00      	cmp	r3, #0
 8020afc:	dd12      	ble.n	8020b24 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8020afe:	4b10      	ldr	r3, [pc, #64]	; (8020b40 <tcp_receive+0xd00>)
 8020b00:	681b      	ldr	r3, [r3, #0]
 8020b02:	b29a      	uxth	r2, r3
 8020b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020b06:	68db      	ldr	r3, [r3, #12]
 8020b08:	685b      	ldr	r3, [r3, #4]
 8020b0a:	b29b      	uxth	r3, r3
 8020b0c:	1ad3      	subs	r3, r2, r3
 8020b0e:	b29a      	uxth	r2, r3
 8020b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020b12:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8020b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020b16:	685a      	ldr	r2, [r3, #4]
 8020b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020b1a:	891b      	ldrh	r3, [r3, #8]
 8020b1c:	4619      	mov	r1, r3
 8020b1e:	4610      	mov	r0, r2
 8020b20:	f7fb faec 	bl	801c0fc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8020b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020b26:	69fa      	ldr	r2, [r7, #28]
 8020b28:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8020b2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8020b2c:	69f8      	ldr	r0, [r7, #28]
 8020b2e:	f7ff f883 	bl	801fc38 <tcp_oos_insert_segment>
                  }
                  break;
 8020b32:	e0e2      	b.n	8020cfa <tcp_receive+0xeba>
 8020b34:	20005a58 	.word	0x20005a58
 8020b38:	20005a55 	.word	0x20005a55
 8020b3c:	20005a28 	.word	0x20005a28
 8020b40:	20005a48 	.word	0x20005a48
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8020b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b46:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8020b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b4a:	681b      	ldr	r3, [r3, #0]
 8020b4c:	2b00      	cmp	r3, #0
 8020b4e:	f040 80c6 	bne.w	8020cde <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8020b52:	4b80      	ldr	r3, [pc, #512]	; (8020d54 <tcp_receive+0xf14>)
 8020b54:	681a      	ldr	r2, [r3, #0]
 8020b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b58:	68db      	ldr	r3, [r3, #12]
 8020b5a:	685b      	ldr	r3, [r3, #4]
 8020b5c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8020b5e:	2b00      	cmp	r3, #0
 8020b60:	f340 80bd 	ble.w	8020cde <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8020b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b66:	68db      	ldr	r3, [r3, #12]
 8020b68:	899b      	ldrh	r3, [r3, #12]
 8020b6a:	b29b      	uxth	r3, r3
 8020b6c:	4618      	mov	r0, r3
 8020b6e:	f7fa f80d 	bl	801ab8c <lwip_htons>
 8020b72:	4603      	mov	r3, r0
 8020b74:	b2db      	uxtb	r3, r3
 8020b76:	f003 0301 	and.w	r3, r3, #1
 8020b7a:	2b00      	cmp	r3, #0
 8020b7c:	f040 80bf 	bne.w	8020cfe <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8020b80:	4875      	ldr	r0, [pc, #468]	; (8020d58 <tcp_receive+0xf18>)
 8020b82:	f7fd fa3d 	bl	801e000 <tcp_seg_copy>
 8020b86:	4602      	mov	r2, r0
 8020b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b8a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8020b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b8e:	681b      	ldr	r3, [r3, #0]
 8020b90:	2b00      	cmp	r3, #0
 8020b92:	f000 80b6 	beq.w	8020d02 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8020b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b98:	68db      	ldr	r3, [r3, #12]
 8020b9a:	685b      	ldr	r3, [r3, #4]
 8020b9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8020b9e:	8912      	ldrh	r2, [r2, #8]
 8020ba0:	441a      	add	r2, r3
 8020ba2:	4b6c      	ldr	r3, [pc, #432]	; (8020d54 <tcp_receive+0xf14>)
 8020ba4:	681b      	ldr	r3, [r3, #0]
 8020ba6:	1ad3      	subs	r3, r2, r3
 8020ba8:	2b00      	cmp	r3, #0
 8020baa:	dd12      	ble.n	8020bd2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8020bac:	4b69      	ldr	r3, [pc, #420]	; (8020d54 <tcp_receive+0xf14>)
 8020bae:	681b      	ldr	r3, [r3, #0]
 8020bb0:	b29a      	uxth	r2, r3
 8020bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020bb4:	68db      	ldr	r3, [r3, #12]
 8020bb6:	685b      	ldr	r3, [r3, #4]
 8020bb8:	b29b      	uxth	r3, r3
 8020bba:	1ad3      	subs	r3, r2, r3
 8020bbc:	b29a      	uxth	r2, r3
 8020bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020bc0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8020bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020bc4:	685a      	ldr	r2, [r3, #4]
 8020bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020bc8:	891b      	ldrh	r3, [r3, #8]
 8020bca:	4619      	mov	r1, r3
 8020bcc:	4610      	mov	r0, r2
 8020bce:	f7fb fa95 	bl	801c0fc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8020bd2:	4b62      	ldr	r3, [pc, #392]	; (8020d5c <tcp_receive+0xf1c>)
 8020bd4:	881b      	ldrh	r3, [r3, #0]
 8020bd6:	461a      	mov	r2, r3
 8020bd8:	4b5e      	ldr	r3, [pc, #376]	; (8020d54 <tcp_receive+0xf14>)
 8020bda:	681b      	ldr	r3, [r3, #0]
 8020bdc:	441a      	add	r2, r3
 8020bde:	687b      	ldr	r3, [r7, #4]
 8020be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020be2:	6879      	ldr	r1, [r7, #4]
 8020be4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020be6:	440b      	add	r3, r1
 8020be8:	1ad3      	subs	r3, r2, r3
 8020bea:	2b00      	cmp	r3, #0
 8020bec:	f340 8089 	ble.w	8020d02 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8020bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020bf2:	681b      	ldr	r3, [r3, #0]
 8020bf4:	68db      	ldr	r3, [r3, #12]
 8020bf6:	899b      	ldrh	r3, [r3, #12]
 8020bf8:	b29b      	uxth	r3, r3
 8020bfa:	4618      	mov	r0, r3
 8020bfc:	f7f9 ffc6 	bl	801ab8c <lwip_htons>
 8020c00:	4603      	mov	r3, r0
 8020c02:	b2db      	uxtb	r3, r3
 8020c04:	f003 0301 	and.w	r3, r3, #1
 8020c08:	2b00      	cmp	r3, #0
 8020c0a:	d022      	beq.n	8020c52 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8020c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c0e:	681b      	ldr	r3, [r3, #0]
 8020c10:	68db      	ldr	r3, [r3, #12]
 8020c12:	899b      	ldrh	r3, [r3, #12]
 8020c14:	b29b      	uxth	r3, r3
 8020c16:	b21b      	sxth	r3, r3
 8020c18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8020c1c:	b21c      	sxth	r4, r3
 8020c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c20:	681b      	ldr	r3, [r3, #0]
 8020c22:	68db      	ldr	r3, [r3, #12]
 8020c24:	899b      	ldrh	r3, [r3, #12]
 8020c26:	b29b      	uxth	r3, r3
 8020c28:	4618      	mov	r0, r3
 8020c2a:	f7f9 ffaf 	bl	801ab8c <lwip_htons>
 8020c2e:	4603      	mov	r3, r0
 8020c30:	b2db      	uxtb	r3, r3
 8020c32:	b29b      	uxth	r3, r3
 8020c34:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8020c38:	b29b      	uxth	r3, r3
 8020c3a:	4618      	mov	r0, r3
 8020c3c:	f7f9 ffa6 	bl	801ab8c <lwip_htons>
 8020c40:	4603      	mov	r3, r0
 8020c42:	b21b      	sxth	r3, r3
 8020c44:	4323      	orrs	r3, r4
 8020c46:	b21a      	sxth	r2, r3
 8020c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c4a:	681b      	ldr	r3, [r3, #0]
 8020c4c:	68db      	ldr	r3, [r3, #12]
 8020c4e:	b292      	uxth	r2, r2
 8020c50:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8020c52:	687b      	ldr	r3, [r7, #4]
 8020c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c56:	b29a      	uxth	r2, r3
 8020c58:	687b      	ldr	r3, [r7, #4]
 8020c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020c5c:	4413      	add	r3, r2
 8020c5e:	b299      	uxth	r1, r3
 8020c60:	4b3c      	ldr	r3, [pc, #240]	; (8020d54 <tcp_receive+0xf14>)
 8020c62:	681b      	ldr	r3, [r3, #0]
 8020c64:	b29a      	uxth	r2, r3
 8020c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c68:	681b      	ldr	r3, [r3, #0]
 8020c6a:	1a8a      	subs	r2, r1, r2
 8020c6c:	b292      	uxth	r2, r2
 8020c6e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8020c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c72:	681b      	ldr	r3, [r3, #0]
 8020c74:	685a      	ldr	r2, [r3, #4]
 8020c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c78:	681b      	ldr	r3, [r3, #0]
 8020c7a:	891b      	ldrh	r3, [r3, #8]
 8020c7c:	4619      	mov	r1, r3
 8020c7e:	4610      	mov	r0, r2
 8020c80:	f7fb fa3c 	bl	801c0fc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8020c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c86:	681b      	ldr	r3, [r3, #0]
 8020c88:	891c      	ldrh	r4, [r3, #8]
 8020c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c8c:	681b      	ldr	r3, [r3, #0]
 8020c8e:	68db      	ldr	r3, [r3, #12]
 8020c90:	899b      	ldrh	r3, [r3, #12]
 8020c92:	b29b      	uxth	r3, r3
 8020c94:	4618      	mov	r0, r3
 8020c96:	f7f9 ff79 	bl	801ab8c <lwip_htons>
 8020c9a:	4603      	mov	r3, r0
 8020c9c:	b2db      	uxtb	r3, r3
 8020c9e:	f003 0303 	and.w	r3, r3, #3
 8020ca2:	2b00      	cmp	r3, #0
 8020ca4:	d001      	beq.n	8020caa <tcp_receive+0xe6a>
 8020ca6:	2301      	movs	r3, #1
 8020ca8:	e000      	b.n	8020cac <tcp_receive+0xe6c>
 8020caa:	2300      	movs	r3, #0
 8020cac:	4423      	add	r3, r4
 8020cae:	b29a      	uxth	r2, r3
 8020cb0:	4b2a      	ldr	r3, [pc, #168]	; (8020d5c <tcp_receive+0xf1c>)
 8020cb2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8020cb4:	4b29      	ldr	r3, [pc, #164]	; (8020d5c <tcp_receive+0xf1c>)
 8020cb6:	881b      	ldrh	r3, [r3, #0]
 8020cb8:	461a      	mov	r2, r3
 8020cba:	4b26      	ldr	r3, [pc, #152]	; (8020d54 <tcp_receive+0xf14>)
 8020cbc:	681b      	ldr	r3, [r3, #0]
 8020cbe:	441a      	add	r2, r3
 8020cc0:	687b      	ldr	r3, [r7, #4]
 8020cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020cc4:	6879      	ldr	r1, [r7, #4]
 8020cc6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020cc8:	440b      	add	r3, r1
 8020cca:	429a      	cmp	r2, r3
 8020ccc:	d019      	beq.n	8020d02 <tcp_receive+0xec2>
 8020cce:	4b24      	ldr	r3, [pc, #144]	; (8020d60 <tcp_receive+0xf20>)
 8020cd0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8020cd4:	4923      	ldr	r1, [pc, #140]	; (8020d64 <tcp_receive+0xf24>)
 8020cd6:	4824      	ldr	r0, [pc, #144]	; (8020d68 <tcp_receive+0xf28>)
 8020cd8:	f005 ffbe 	bl	8026c58 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8020cdc:	e011      	b.n	8020d02 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8020cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020ce0:	681b      	ldr	r3, [r3, #0]
 8020ce2:	63bb      	str	r3, [r7, #56]	; 0x38
 8020ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020ce6:	2b00      	cmp	r3, #0
 8020ce8:	f47f aea4 	bne.w	8020a34 <tcp_receive+0xbf4>
 8020cec:	e00a      	b.n	8020d04 <tcp_receive+0xec4>
                break;
 8020cee:	bf00      	nop
 8020cf0:	e008      	b.n	8020d04 <tcp_receive+0xec4>
                break;
 8020cf2:	bf00      	nop
 8020cf4:	e006      	b.n	8020d04 <tcp_receive+0xec4>
                  break;
 8020cf6:	bf00      	nop
 8020cf8:	e004      	b.n	8020d04 <tcp_receive+0xec4>
                  break;
 8020cfa:	bf00      	nop
 8020cfc:	e002      	b.n	8020d04 <tcp_receive+0xec4>
                  break;
 8020cfe:	bf00      	nop
 8020d00:	e000      	b.n	8020d04 <tcp_receive+0xec4>
                break;
 8020d02:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8020d04:	6878      	ldr	r0, [r7, #4]
 8020d06:	f001 fe8b 	bl	8022a20 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8020d0a:	e003      	b.n	8020d14 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8020d0c:	6878      	ldr	r0, [r7, #4]
 8020d0e:	f001 fe87 	bl	8022a20 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8020d12:	e01a      	b.n	8020d4a <tcp_receive+0xf0a>
 8020d14:	e019      	b.n	8020d4a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8020d16:	4b0f      	ldr	r3, [pc, #60]	; (8020d54 <tcp_receive+0xf14>)
 8020d18:	681a      	ldr	r2, [r3, #0]
 8020d1a:	687b      	ldr	r3, [r7, #4]
 8020d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d1e:	1ad3      	subs	r3, r2, r3
 8020d20:	2b00      	cmp	r3, #0
 8020d22:	db0a      	blt.n	8020d3a <tcp_receive+0xefa>
 8020d24:	4b0b      	ldr	r3, [pc, #44]	; (8020d54 <tcp_receive+0xf14>)
 8020d26:	681a      	ldr	r2, [r3, #0]
 8020d28:	687b      	ldr	r3, [r7, #4]
 8020d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d2c:	6879      	ldr	r1, [r7, #4]
 8020d2e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020d30:	440b      	add	r3, r1
 8020d32:	1ad3      	subs	r3, r2, r3
 8020d34:	3301      	adds	r3, #1
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	dd07      	ble.n	8020d4a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8020d3a:	687b      	ldr	r3, [r7, #4]
 8020d3c:	8b5b      	ldrh	r3, [r3, #26]
 8020d3e:	f043 0302 	orr.w	r3, r3, #2
 8020d42:	b29a      	uxth	r2, r3
 8020d44:	687b      	ldr	r3, [r7, #4]
 8020d46:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8020d48:	e7ff      	b.n	8020d4a <tcp_receive+0xf0a>
 8020d4a:	bf00      	nop
 8020d4c:	3750      	adds	r7, #80	; 0x50
 8020d4e:	46bd      	mov	sp, r7
 8020d50:	bdb0      	pop	{r4, r5, r7, pc}
 8020d52:	bf00      	nop
 8020d54:	20005a48 	.word	0x20005a48
 8020d58:	20005a28 	.word	0x20005a28
 8020d5c:	20005a52 	.word	0x20005a52
 8020d60:	0802e8f4 	.word	0x0802e8f4
 8020d64:	0802ec9c 	.word	0x0802ec9c
 8020d68:	0802e940 	.word	0x0802e940

08020d6c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8020d6c:	b480      	push	{r7}
 8020d6e:	b083      	sub	sp, #12
 8020d70:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8020d72:	4b15      	ldr	r3, [pc, #84]	; (8020dc8 <tcp_get_next_optbyte+0x5c>)
 8020d74:	881b      	ldrh	r3, [r3, #0]
 8020d76:	1c5a      	adds	r2, r3, #1
 8020d78:	b291      	uxth	r1, r2
 8020d7a:	4a13      	ldr	r2, [pc, #76]	; (8020dc8 <tcp_get_next_optbyte+0x5c>)
 8020d7c:	8011      	strh	r1, [r2, #0]
 8020d7e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8020d80:	4b12      	ldr	r3, [pc, #72]	; (8020dcc <tcp_get_next_optbyte+0x60>)
 8020d82:	681b      	ldr	r3, [r3, #0]
 8020d84:	2b00      	cmp	r3, #0
 8020d86:	d004      	beq.n	8020d92 <tcp_get_next_optbyte+0x26>
 8020d88:	4b11      	ldr	r3, [pc, #68]	; (8020dd0 <tcp_get_next_optbyte+0x64>)
 8020d8a:	881b      	ldrh	r3, [r3, #0]
 8020d8c:	88fa      	ldrh	r2, [r7, #6]
 8020d8e:	429a      	cmp	r2, r3
 8020d90:	d208      	bcs.n	8020da4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8020d92:	4b10      	ldr	r3, [pc, #64]	; (8020dd4 <tcp_get_next_optbyte+0x68>)
 8020d94:	681b      	ldr	r3, [r3, #0]
 8020d96:	3314      	adds	r3, #20
 8020d98:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8020d9a:	88fb      	ldrh	r3, [r7, #6]
 8020d9c:	683a      	ldr	r2, [r7, #0]
 8020d9e:	4413      	add	r3, r2
 8020da0:	781b      	ldrb	r3, [r3, #0]
 8020da2:	e00b      	b.n	8020dbc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8020da4:	88fb      	ldrh	r3, [r7, #6]
 8020da6:	b2da      	uxtb	r2, r3
 8020da8:	4b09      	ldr	r3, [pc, #36]	; (8020dd0 <tcp_get_next_optbyte+0x64>)
 8020daa:	881b      	ldrh	r3, [r3, #0]
 8020dac:	b2db      	uxtb	r3, r3
 8020dae:	1ad3      	subs	r3, r2, r3
 8020db0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8020db2:	4b06      	ldr	r3, [pc, #24]	; (8020dcc <tcp_get_next_optbyte+0x60>)
 8020db4:	681a      	ldr	r2, [r3, #0]
 8020db6:	797b      	ldrb	r3, [r7, #5]
 8020db8:	4413      	add	r3, r2
 8020dba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8020dbc:	4618      	mov	r0, r3
 8020dbe:	370c      	adds	r7, #12
 8020dc0:	46bd      	mov	sp, r7
 8020dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dc6:	4770      	bx	lr
 8020dc8:	20005a44 	.word	0x20005a44
 8020dcc:	20005a40 	.word	0x20005a40
 8020dd0:	20005a3e 	.word	0x20005a3e
 8020dd4:	20005a38 	.word	0x20005a38

08020dd8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8020dd8:	b580      	push	{r7, lr}
 8020dda:	b084      	sub	sp, #16
 8020ddc:	af00      	add	r7, sp, #0
 8020dde:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8020de0:	687b      	ldr	r3, [r7, #4]
 8020de2:	2b00      	cmp	r3, #0
 8020de4:	d106      	bne.n	8020df4 <tcp_parseopt+0x1c>
 8020de6:	4b32      	ldr	r3, [pc, #200]	; (8020eb0 <tcp_parseopt+0xd8>)
 8020de8:	f240 727d 	movw	r2, #1917	; 0x77d
 8020dec:	4931      	ldr	r1, [pc, #196]	; (8020eb4 <tcp_parseopt+0xdc>)
 8020dee:	4832      	ldr	r0, [pc, #200]	; (8020eb8 <tcp_parseopt+0xe0>)
 8020df0:	f005 ff32 	bl	8026c58 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8020df4:	4b31      	ldr	r3, [pc, #196]	; (8020ebc <tcp_parseopt+0xe4>)
 8020df6:	881b      	ldrh	r3, [r3, #0]
 8020df8:	2b00      	cmp	r3, #0
 8020dfa:	d055      	beq.n	8020ea8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8020dfc:	4b30      	ldr	r3, [pc, #192]	; (8020ec0 <tcp_parseopt+0xe8>)
 8020dfe:	2200      	movs	r2, #0
 8020e00:	801a      	strh	r2, [r3, #0]
 8020e02:	e045      	b.n	8020e90 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8020e04:	f7ff ffb2 	bl	8020d6c <tcp_get_next_optbyte>
 8020e08:	4603      	mov	r3, r0
 8020e0a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8020e0c:	7bfb      	ldrb	r3, [r7, #15]
 8020e0e:	2b02      	cmp	r3, #2
 8020e10:	d006      	beq.n	8020e20 <tcp_parseopt+0x48>
 8020e12:	2b02      	cmp	r3, #2
 8020e14:	dc2b      	bgt.n	8020e6e <tcp_parseopt+0x96>
 8020e16:	2b00      	cmp	r3, #0
 8020e18:	d041      	beq.n	8020e9e <tcp_parseopt+0xc6>
 8020e1a:	2b01      	cmp	r3, #1
 8020e1c:	d127      	bne.n	8020e6e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8020e1e:	e037      	b.n	8020e90 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8020e20:	f7ff ffa4 	bl	8020d6c <tcp_get_next_optbyte>
 8020e24:	4603      	mov	r3, r0
 8020e26:	2b04      	cmp	r3, #4
 8020e28:	d13b      	bne.n	8020ea2 <tcp_parseopt+0xca>
 8020e2a:	4b25      	ldr	r3, [pc, #148]	; (8020ec0 <tcp_parseopt+0xe8>)
 8020e2c:	881b      	ldrh	r3, [r3, #0]
 8020e2e:	3301      	adds	r3, #1
 8020e30:	4a22      	ldr	r2, [pc, #136]	; (8020ebc <tcp_parseopt+0xe4>)
 8020e32:	8812      	ldrh	r2, [r2, #0]
 8020e34:	4293      	cmp	r3, r2
 8020e36:	da34      	bge.n	8020ea2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8020e38:	f7ff ff98 	bl	8020d6c <tcp_get_next_optbyte>
 8020e3c:	4603      	mov	r3, r0
 8020e3e:	b29b      	uxth	r3, r3
 8020e40:	021b      	lsls	r3, r3, #8
 8020e42:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8020e44:	f7ff ff92 	bl	8020d6c <tcp_get_next_optbyte>
 8020e48:	4603      	mov	r3, r0
 8020e4a:	b29a      	uxth	r2, r3
 8020e4c:	89bb      	ldrh	r3, [r7, #12]
 8020e4e:	4313      	orrs	r3, r2
 8020e50:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8020e52:	89bb      	ldrh	r3, [r7, #12]
 8020e54:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8020e58:	d804      	bhi.n	8020e64 <tcp_parseopt+0x8c>
 8020e5a:	89bb      	ldrh	r3, [r7, #12]
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	d001      	beq.n	8020e64 <tcp_parseopt+0x8c>
 8020e60:	89ba      	ldrh	r2, [r7, #12]
 8020e62:	e001      	b.n	8020e68 <tcp_parseopt+0x90>
 8020e64:	f44f 7206 	mov.w	r2, #536	; 0x218
 8020e68:	687b      	ldr	r3, [r7, #4]
 8020e6a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8020e6c:	e010      	b.n	8020e90 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8020e6e:	f7ff ff7d 	bl	8020d6c <tcp_get_next_optbyte>
 8020e72:	4603      	mov	r3, r0
 8020e74:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8020e76:	7afb      	ldrb	r3, [r7, #11]
 8020e78:	2b01      	cmp	r3, #1
 8020e7a:	d914      	bls.n	8020ea6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8020e7c:	7afb      	ldrb	r3, [r7, #11]
 8020e7e:	b29a      	uxth	r2, r3
 8020e80:	4b0f      	ldr	r3, [pc, #60]	; (8020ec0 <tcp_parseopt+0xe8>)
 8020e82:	881b      	ldrh	r3, [r3, #0]
 8020e84:	4413      	add	r3, r2
 8020e86:	b29b      	uxth	r3, r3
 8020e88:	3b02      	subs	r3, #2
 8020e8a:	b29a      	uxth	r2, r3
 8020e8c:	4b0c      	ldr	r3, [pc, #48]	; (8020ec0 <tcp_parseopt+0xe8>)
 8020e8e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8020e90:	4b0b      	ldr	r3, [pc, #44]	; (8020ec0 <tcp_parseopt+0xe8>)
 8020e92:	881a      	ldrh	r2, [r3, #0]
 8020e94:	4b09      	ldr	r3, [pc, #36]	; (8020ebc <tcp_parseopt+0xe4>)
 8020e96:	881b      	ldrh	r3, [r3, #0]
 8020e98:	429a      	cmp	r2, r3
 8020e9a:	d3b3      	bcc.n	8020e04 <tcp_parseopt+0x2c>
 8020e9c:	e004      	b.n	8020ea8 <tcp_parseopt+0xd0>
          return;
 8020e9e:	bf00      	nop
 8020ea0:	e002      	b.n	8020ea8 <tcp_parseopt+0xd0>
            return;
 8020ea2:	bf00      	nop
 8020ea4:	e000      	b.n	8020ea8 <tcp_parseopt+0xd0>
            return;
 8020ea6:	bf00      	nop
      }
    }
  }
}
 8020ea8:	3710      	adds	r7, #16
 8020eaa:	46bd      	mov	sp, r7
 8020eac:	bd80      	pop	{r7, pc}
 8020eae:	bf00      	nop
 8020eb0:	0802e8f4 	.word	0x0802e8f4
 8020eb4:	0802ed58 	.word	0x0802ed58
 8020eb8:	0802e940 	.word	0x0802e940
 8020ebc:	20005a3c 	.word	0x20005a3c
 8020ec0:	20005a44 	.word	0x20005a44

08020ec4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8020ec4:	b480      	push	{r7}
 8020ec6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8020ec8:	4b05      	ldr	r3, [pc, #20]	; (8020ee0 <tcp_trigger_input_pcb_close+0x1c>)
 8020eca:	781b      	ldrb	r3, [r3, #0]
 8020ecc:	f043 0310 	orr.w	r3, r3, #16
 8020ed0:	b2da      	uxtb	r2, r3
 8020ed2:	4b03      	ldr	r3, [pc, #12]	; (8020ee0 <tcp_trigger_input_pcb_close+0x1c>)
 8020ed4:	701a      	strb	r2, [r3, #0]
}
 8020ed6:	bf00      	nop
 8020ed8:	46bd      	mov	sp, r7
 8020eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ede:	4770      	bx	lr
 8020ee0:	20005a55 	.word	0x20005a55

08020ee4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8020ee4:	b580      	push	{r7, lr}
 8020ee6:	b084      	sub	sp, #16
 8020ee8:	af00      	add	r7, sp, #0
 8020eea:	60f8      	str	r0, [r7, #12]
 8020eec:	60b9      	str	r1, [r7, #8]
 8020eee:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8020ef0:	68fb      	ldr	r3, [r7, #12]
 8020ef2:	2b00      	cmp	r3, #0
 8020ef4:	d00a      	beq.n	8020f0c <tcp_route+0x28>
 8020ef6:	68fb      	ldr	r3, [r7, #12]
 8020ef8:	7a1b      	ldrb	r3, [r3, #8]
 8020efa:	2b00      	cmp	r3, #0
 8020efc:	d006      	beq.n	8020f0c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8020efe:	68fb      	ldr	r3, [r7, #12]
 8020f00:	7a1b      	ldrb	r3, [r3, #8]
 8020f02:	4618      	mov	r0, r3
 8020f04:	f7fa fef2 	bl	801bcec <netif_get_by_index>
 8020f08:	4603      	mov	r3, r0
 8020f0a:	e003      	b.n	8020f14 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8020f0c:	6878      	ldr	r0, [r7, #4]
 8020f0e:	f003 fdf9 	bl	8024b04 <ip4_route>
 8020f12:	4603      	mov	r3, r0
  }
}
 8020f14:	4618      	mov	r0, r3
 8020f16:	3710      	adds	r7, #16
 8020f18:	46bd      	mov	sp, r7
 8020f1a:	bd80      	pop	{r7, pc}

08020f1c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8020f1c:	b590      	push	{r4, r7, lr}
 8020f1e:	b087      	sub	sp, #28
 8020f20:	af00      	add	r7, sp, #0
 8020f22:	60f8      	str	r0, [r7, #12]
 8020f24:	60b9      	str	r1, [r7, #8]
 8020f26:	603b      	str	r3, [r7, #0]
 8020f28:	4613      	mov	r3, r2
 8020f2a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8020f2c:	68fb      	ldr	r3, [r7, #12]
 8020f2e:	2b00      	cmp	r3, #0
 8020f30:	d105      	bne.n	8020f3e <tcp_create_segment+0x22>
 8020f32:	4b44      	ldr	r3, [pc, #272]	; (8021044 <tcp_create_segment+0x128>)
 8020f34:	22a3      	movs	r2, #163	; 0xa3
 8020f36:	4944      	ldr	r1, [pc, #272]	; (8021048 <tcp_create_segment+0x12c>)
 8020f38:	4844      	ldr	r0, [pc, #272]	; (802104c <tcp_create_segment+0x130>)
 8020f3a:	f005 fe8d 	bl	8026c58 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8020f3e:	68bb      	ldr	r3, [r7, #8]
 8020f40:	2b00      	cmp	r3, #0
 8020f42:	d105      	bne.n	8020f50 <tcp_create_segment+0x34>
 8020f44:	4b3f      	ldr	r3, [pc, #252]	; (8021044 <tcp_create_segment+0x128>)
 8020f46:	22a4      	movs	r2, #164	; 0xa4
 8020f48:	4941      	ldr	r1, [pc, #260]	; (8021050 <tcp_create_segment+0x134>)
 8020f4a:	4840      	ldr	r0, [pc, #256]	; (802104c <tcp_create_segment+0x130>)
 8020f4c:	f005 fe84 	bl	8026c58 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8020f50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8020f54:	009b      	lsls	r3, r3, #2
 8020f56:	b2db      	uxtb	r3, r3
 8020f58:	f003 0304 	and.w	r3, r3, #4
 8020f5c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8020f5e:	2003      	movs	r0, #3
 8020f60:	f7fa fb5c 	bl	801b61c <memp_malloc>
 8020f64:	6138      	str	r0, [r7, #16]
 8020f66:	693b      	ldr	r3, [r7, #16]
 8020f68:	2b00      	cmp	r3, #0
 8020f6a:	d104      	bne.n	8020f76 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8020f6c:	68b8      	ldr	r0, [r7, #8]
 8020f6e:	f7fb fa4b 	bl	801c408 <pbuf_free>
    return NULL;
 8020f72:	2300      	movs	r3, #0
 8020f74:	e061      	b.n	802103a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8020f76:	693b      	ldr	r3, [r7, #16]
 8020f78:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8020f7c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8020f7e:	693b      	ldr	r3, [r7, #16]
 8020f80:	2200      	movs	r2, #0
 8020f82:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8020f84:	693b      	ldr	r3, [r7, #16]
 8020f86:	68ba      	ldr	r2, [r7, #8]
 8020f88:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8020f8a:	68bb      	ldr	r3, [r7, #8]
 8020f8c:	891a      	ldrh	r2, [r3, #8]
 8020f8e:	7dfb      	ldrb	r3, [r7, #23]
 8020f90:	b29b      	uxth	r3, r3
 8020f92:	429a      	cmp	r2, r3
 8020f94:	d205      	bcs.n	8020fa2 <tcp_create_segment+0x86>
 8020f96:	4b2b      	ldr	r3, [pc, #172]	; (8021044 <tcp_create_segment+0x128>)
 8020f98:	22b0      	movs	r2, #176	; 0xb0
 8020f9a:	492e      	ldr	r1, [pc, #184]	; (8021054 <tcp_create_segment+0x138>)
 8020f9c:	482b      	ldr	r0, [pc, #172]	; (802104c <tcp_create_segment+0x130>)
 8020f9e:	f005 fe5b 	bl	8026c58 <iprintf>
  seg->len = p->tot_len - optlen;
 8020fa2:	68bb      	ldr	r3, [r7, #8]
 8020fa4:	891a      	ldrh	r2, [r3, #8]
 8020fa6:	7dfb      	ldrb	r3, [r7, #23]
 8020fa8:	b29b      	uxth	r3, r3
 8020faa:	1ad3      	subs	r3, r2, r3
 8020fac:	b29a      	uxth	r2, r3
 8020fae:	693b      	ldr	r3, [r7, #16]
 8020fb0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8020fb2:	2114      	movs	r1, #20
 8020fb4:	68b8      	ldr	r0, [r7, #8]
 8020fb6:	f7fb f991 	bl	801c2dc <pbuf_add_header>
 8020fba:	4603      	mov	r3, r0
 8020fbc:	2b00      	cmp	r3, #0
 8020fbe:	d004      	beq.n	8020fca <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8020fc0:	6938      	ldr	r0, [r7, #16]
 8020fc2:	f7fc ffe6 	bl	801df92 <tcp_seg_free>
    return NULL;
 8020fc6:	2300      	movs	r3, #0
 8020fc8:	e037      	b.n	802103a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8020fca:	693b      	ldr	r3, [r7, #16]
 8020fcc:	685b      	ldr	r3, [r3, #4]
 8020fce:	685a      	ldr	r2, [r3, #4]
 8020fd0:	693b      	ldr	r3, [r7, #16]
 8020fd2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8020fd4:	68fb      	ldr	r3, [r7, #12]
 8020fd6:	8ada      	ldrh	r2, [r3, #22]
 8020fd8:	693b      	ldr	r3, [r7, #16]
 8020fda:	68dc      	ldr	r4, [r3, #12]
 8020fdc:	4610      	mov	r0, r2
 8020fde:	f7f9 fdd5 	bl	801ab8c <lwip_htons>
 8020fe2:	4603      	mov	r3, r0
 8020fe4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8020fe6:	68fb      	ldr	r3, [r7, #12]
 8020fe8:	8b1a      	ldrh	r2, [r3, #24]
 8020fea:	693b      	ldr	r3, [r7, #16]
 8020fec:	68dc      	ldr	r4, [r3, #12]
 8020fee:	4610      	mov	r0, r2
 8020ff0:	f7f9 fdcc 	bl	801ab8c <lwip_htons>
 8020ff4:	4603      	mov	r3, r0
 8020ff6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8020ff8:	693b      	ldr	r3, [r7, #16]
 8020ffa:	68dc      	ldr	r4, [r3, #12]
 8020ffc:	6838      	ldr	r0, [r7, #0]
 8020ffe:	f7f9 fdda 	bl	801abb6 <lwip_htonl>
 8021002:	4603      	mov	r3, r0
 8021004:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8021006:	7dfb      	ldrb	r3, [r7, #23]
 8021008:	089b      	lsrs	r3, r3, #2
 802100a:	b2db      	uxtb	r3, r3
 802100c:	b29b      	uxth	r3, r3
 802100e:	3305      	adds	r3, #5
 8021010:	b29b      	uxth	r3, r3
 8021012:	031b      	lsls	r3, r3, #12
 8021014:	b29a      	uxth	r2, r3
 8021016:	79fb      	ldrb	r3, [r7, #7]
 8021018:	b29b      	uxth	r3, r3
 802101a:	4313      	orrs	r3, r2
 802101c:	b29a      	uxth	r2, r3
 802101e:	693b      	ldr	r3, [r7, #16]
 8021020:	68dc      	ldr	r4, [r3, #12]
 8021022:	4610      	mov	r0, r2
 8021024:	f7f9 fdb2 	bl	801ab8c <lwip_htons>
 8021028:	4603      	mov	r3, r0
 802102a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 802102c:	693b      	ldr	r3, [r7, #16]
 802102e:	68db      	ldr	r3, [r3, #12]
 8021030:	2200      	movs	r2, #0
 8021032:	749a      	strb	r2, [r3, #18]
 8021034:	2200      	movs	r2, #0
 8021036:	74da      	strb	r2, [r3, #19]
  return seg;
 8021038:	693b      	ldr	r3, [r7, #16]
}
 802103a:	4618      	mov	r0, r3
 802103c:	371c      	adds	r7, #28
 802103e:	46bd      	mov	sp, r7
 8021040:	bd90      	pop	{r4, r7, pc}
 8021042:	bf00      	nop
 8021044:	0802ed74 	.word	0x0802ed74
 8021048:	0802eda8 	.word	0x0802eda8
 802104c:	0802edc8 	.word	0x0802edc8
 8021050:	0802edf0 	.word	0x0802edf0
 8021054:	0802ee14 	.word	0x0802ee14

08021058 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8021058:	b580      	push	{r7, lr}
 802105a:	b086      	sub	sp, #24
 802105c:	af00      	add	r7, sp, #0
 802105e:	607b      	str	r3, [r7, #4]
 8021060:	4603      	mov	r3, r0
 8021062:	73fb      	strb	r3, [r7, #15]
 8021064:	460b      	mov	r3, r1
 8021066:	81bb      	strh	r3, [r7, #12]
 8021068:	4613      	mov	r3, r2
 802106a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 802106c:	89bb      	ldrh	r3, [r7, #12]
 802106e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8021070:	687b      	ldr	r3, [r7, #4]
 8021072:	2b00      	cmp	r3, #0
 8021074:	d105      	bne.n	8021082 <tcp_pbuf_prealloc+0x2a>
 8021076:	4b30      	ldr	r3, [pc, #192]	; (8021138 <tcp_pbuf_prealloc+0xe0>)
 8021078:	22e8      	movs	r2, #232	; 0xe8
 802107a:	4930      	ldr	r1, [pc, #192]	; (802113c <tcp_pbuf_prealloc+0xe4>)
 802107c:	4830      	ldr	r0, [pc, #192]	; (8021140 <tcp_pbuf_prealloc+0xe8>)
 802107e:	f005 fdeb 	bl	8026c58 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8021082:	6a3b      	ldr	r3, [r7, #32]
 8021084:	2b00      	cmp	r3, #0
 8021086:	d105      	bne.n	8021094 <tcp_pbuf_prealloc+0x3c>
 8021088:	4b2b      	ldr	r3, [pc, #172]	; (8021138 <tcp_pbuf_prealloc+0xe0>)
 802108a:	22e9      	movs	r2, #233	; 0xe9
 802108c:	492d      	ldr	r1, [pc, #180]	; (8021144 <tcp_pbuf_prealloc+0xec>)
 802108e:	482c      	ldr	r0, [pc, #176]	; (8021140 <tcp_pbuf_prealloc+0xe8>)
 8021090:	f005 fde2 	bl	8026c58 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8021094:	89ba      	ldrh	r2, [r7, #12]
 8021096:	897b      	ldrh	r3, [r7, #10]
 8021098:	429a      	cmp	r2, r3
 802109a:	d221      	bcs.n	80210e0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 802109c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80210a0:	f003 0302 	and.w	r3, r3, #2
 80210a4:	2b00      	cmp	r3, #0
 80210a6:	d111      	bne.n	80210cc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80210a8:	6a3b      	ldr	r3, [r7, #32]
 80210aa:	8b5b      	ldrh	r3, [r3, #26]
 80210ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80210b0:	2b00      	cmp	r3, #0
 80210b2:	d115      	bne.n	80210e0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80210b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80210b8:	2b00      	cmp	r3, #0
 80210ba:	d007      	beq.n	80210cc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80210bc:	6a3b      	ldr	r3, [r7, #32]
 80210be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80210c0:	2b00      	cmp	r3, #0
 80210c2:	d103      	bne.n	80210cc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80210c4:	6a3b      	ldr	r3, [r7, #32]
 80210c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80210c8:	2b00      	cmp	r3, #0
 80210ca:	d009      	beq.n	80210e0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80210cc:	89bb      	ldrh	r3, [r7, #12]
 80210ce:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80210d2:	f023 0203 	bic.w	r2, r3, #3
 80210d6:	897b      	ldrh	r3, [r7, #10]
 80210d8:	4293      	cmp	r3, r2
 80210da:	bf28      	it	cs
 80210dc:	4613      	movcs	r3, r2
 80210de:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80210e0:	8af9      	ldrh	r1, [r7, #22]
 80210e2:	7bfb      	ldrb	r3, [r7, #15]
 80210e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80210e8:	4618      	mov	r0, r3
 80210ea:	f7fa fea9 	bl	801be40 <pbuf_alloc>
 80210ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80210f0:	693b      	ldr	r3, [r7, #16]
 80210f2:	2b00      	cmp	r3, #0
 80210f4:	d101      	bne.n	80210fa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80210f6:	2300      	movs	r3, #0
 80210f8:	e019      	b.n	802112e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80210fa:	693b      	ldr	r3, [r7, #16]
 80210fc:	681b      	ldr	r3, [r3, #0]
 80210fe:	2b00      	cmp	r3, #0
 8021100:	d006      	beq.n	8021110 <tcp_pbuf_prealloc+0xb8>
 8021102:	4b0d      	ldr	r3, [pc, #52]	; (8021138 <tcp_pbuf_prealloc+0xe0>)
 8021104:	f240 120b 	movw	r2, #267	; 0x10b
 8021108:	490f      	ldr	r1, [pc, #60]	; (8021148 <tcp_pbuf_prealloc+0xf0>)
 802110a:	480d      	ldr	r0, [pc, #52]	; (8021140 <tcp_pbuf_prealloc+0xe8>)
 802110c:	f005 fda4 	bl	8026c58 <iprintf>
  *oversize = p->len - length;
 8021110:	693b      	ldr	r3, [r7, #16]
 8021112:	895a      	ldrh	r2, [r3, #10]
 8021114:	89bb      	ldrh	r3, [r7, #12]
 8021116:	1ad3      	subs	r3, r2, r3
 8021118:	b29a      	uxth	r2, r3
 802111a:	687b      	ldr	r3, [r7, #4]
 802111c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 802111e:	693b      	ldr	r3, [r7, #16]
 8021120:	89ba      	ldrh	r2, [r7, #12]
 8021122:	811a      	strh	r2, [r3, #8]
 8021124:	693b      	ldr	r3, [r7, #16]
 8021126:	891a      	ldrh	r2, [r3, #8]
 8021128:	693b      	ldr	r3, [r7, #16]
 802112a:	815a      	strh	r2, [r3, #10]
  return p;
 802112c:	693b      	ldr	r3, [r7, #16]
}
 802112e:	4618      	mov	r0, r3
 8021130:	3718      	adds	r7, #24
 8021132:	46bd      	mov	sp, r7
 8021134:	bd80      	pop	{r7, pc}
 8021136:	bf00      	nop
 8021138:	0802ed74 	.word	0x0802ed74
 802113c:	0802ee2c 	.word	0x0802ee2c
 8021140:	0802edc8 	.word	0x0802edc8
 8021144:	0802ee50 	.word	0x0802ee50
 8021148:	0802ee70 	.word	0x0802ee70

0802114c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 802114c:	b580      	push	{r7, lr}
 802114e:	b082      	sub	sp, #8
 8021150:	af00      	add	r7, sp, #0
 8021152:	6078      	str	r0, [r7, #4]
 8021154:	460b      	mov	r3, r1
 8021156:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8021158:	687b      	ldr	r3, [r7, #4]
 802115a:	2b00      	cmp	r3, #0
 802115c:	d106      	bne.n	802116c <tcp_write_checks+0x20>
 802115e:	4b33      	ldr	r3, [pc, #204]	; (802122c <tcp_write_checks+0xe0>)
 8021160:	f240 1233 	movw	r2, #307	; 0x133
 8021164:	4932      	ldr	r1, [pc, #200]	; (8021230 <tcp_write_checks+0xe4>)
 8021166:	4833      	ldr	r0, [pc, #204]	; (8021234 <tcp_write_checks+0xe8>)
 8021168:	f005 fd76 	bl	8026c58 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	7d1b      	ldrb	r3, [r3, #20]
 8021170:	2b04      	cmp	r3, #4
 8021172:	d00e      	beq.n	8021192 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8021174:	687b      	ldr	r3, [r7, #4]
 8021176:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8021178:	2b07      	cmp	r3, #7
 802117a:	d00a      	beq.n	8021192 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 802117c:	687b      	ldr	r3, [r7, #4]
 802117e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8021180:	2b02      	cmp	r3, #2
 8021182:	d006      	beq.n	8021192 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8021184:	687b      	ldr	r3, [r7, #4]
 8021186:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8021188:	2b03      	cmp	r3, #3
 802118a:	d002      	beq.n	8021192 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 802118c:	f06f 030a 	mvn.w	r3, #10
 8021190:	e048      	b.n	8021224 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8021192:	887b      	ldrh	r3, [r7, #2]
 8021194:	2b00      	cmp	r3, #0
 8021196:	d101      	bne.n	802119c <tcp_write_checks+0x50>
    return ERR_OK;
 8021198:	2300      	movs	r3, #0
 802119a:	e043      	b.n	8021224 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 802119c:	687b      	ldr	r3, [r7, #4]
 802119e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80211a2:	887a      	ldrh	r2, [r7, #2]
 80211a4:	429a      	cmp	r2, r3
 80211a6:	d909      	bls.n	80211bc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80211a8:	687b      	ldr	r3, [r7, #4]
 80211aa:	8b5b      	ldrh	r3, [r3, #26]
 80211ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80211b0:	b29a      	uxth	r2, r3
 80211b2:	687b      	ldr	r3, [r7, #4]
 80211b4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80211b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80211ba:	e033      	b.n	8021224 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80211bc:	687b      	ldr	r3, [r7, #4]
 80211be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80211c2:	2b08      	cmp	r3, #8
 80211c4:	d909      	bls.n	80211da <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80211c6:	687b      	ldr	r3, [r7, #4]
 80211c8:	8b5b      	ldrh	r3, [r3, #26]
 80211ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80211ce:	b29a      	uxth	r2, r3
 80211d0:	687b      	ldr	r3, [r7, #4]
 80211d2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80211d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80211d8:	e024      	b.n	8021224 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80211da:	687b      	ldr	r3, [r7, #4]
 80211dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80211e0:	2b00      	cmp	r3, #0
 80211e2:	d00f      	beq.n	8021204 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80211e4:	687b      	ldr	r3, [r7, #4]
 80211e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80211e8:	2b00      	cmp	r3, #0
 80211ea:	d11a      	bne.n	8021222 <tcp_write_checks+0xd6>
 80211ec:	687b      	ldr	r3, [r7, #4]
 80211ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80211f0:	2b00      	cmp	r3, #0
 80211f2:	d116      	bne.n	8021222 <tcp_write_checks+0xd6>
 80211f4:	4b0d      	ldr	r3, [pc, #52]	; (802122c <tcp_write_checks+0xe0>)
 80211f6:	f240 1255 	movw	r2, #341	; 0x155
 80211fa:	490f      	ldr	r1, [pc, #60]	; (8021238 <tcp_write_checks+0xec>)
 80211fc:	480d      	ldr	r0, [pc, #52]	; (8021234 <tcp_write_checks+0xe8>)
 80211fe:	f005 fd2b 	bl	8026c58 <iprintf>
 8021202:	e00e      	b.n	8021222 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8021204:	687b      	ldr	r3, [r7, #4]
 8021206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021208:	2b00      	cmp	r3, #0
 802120a:	d103      	bne.n	8021214 <tcp_write_checks+0xc8>
 802120c:	687b      	ldr	r3, [r7, #4]
 802120e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021210:	2b00      	cmp	r3, #0
 8021212:	d006      	beq.n	8021222 <tcp_write_checks+0xd6>
 8021214:	4b05      	ldr	r3, [pc, #20]	; (802122c <tcp_write_checks+0xe0>)
 8021216:	f44f 72ac 	mov.w	r2, #344	; 0x158
 802121a:	4908      	ldr	r1, [pc, #32]	; (802123c <tcp_write_checks+0xf0>)
 802121c:	4805      	ldr	r0, [pc, #20]	; (8021234 <tcp_write_checks+0xe8>)
 802121e:	f005 fd1b 	bl	8026c58 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8021222:	2300      	movs	r3, #0
}
 8021224:	4618      	mov	r0, r3
 8021226:	3708      	adds	r7, #8
 8021228:	46bd      	mov	sp, r7
 802122a:	bd80      	pop	{r7, pc}
 802122c:	0802ed74 	.word	0x0802ed74
 8021230:	0802ee84 	.word	0x0802ee84
 8021234:	0802edc8 	.word	0x0802edc8
 8021238:	0802eea4 	.word	0x0802eea4
 802123c:	0802eee0 	.word	0x0802eee0

08021240 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8021240:	b590      	push	{r4, r7, lr}
 8021242:	b09b      	sub	sp, #108	; 0x6c
 8021244:	af04      	add	r7, sp, #16
 8021246:	60f8      	str	r0, [r7, #12]
 8021248:	60b9      	str	r1, [r7, #8]
 802124a:	4611      	mov	r1, r2
 802124c:	461a      	mov	r2, r3
 802124e:	460b      	mov	r3, r1
 8021250:	80fb      	strh	r3, [r7, #6]
 8021252:	4613      	mov	r3, r2
 8021254:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8021256:	2300      	movs	r3, #0
 8021258:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 802125a:	2300      	movs	r3, #0
 802125c:	653b      	str	r3, [r7, #80]	; 0x50
 802125e:	2300      	movs	r3, #0
 8021260:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021262:	2300      	movs	r3, #0
 8021264:	64bb      	str	r3, [r7, #72]	; 0x48
 8021266:	2300      	movs	r3, #0
 8021268:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 802126a:	2300      	movs	r3, #0
 802126c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8021270:	2300      	movs	r3, #0
 8021272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8021276:	2300      	movs	r3, #0
 8021278:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 802127a:	2300      	movs	r3, #0
 802127c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 802127e:	2300      	movs	r3, #0
 8021280:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8021282:	68fb      	ldr	r3, [r7, #12]
 8021284:	2b00      	cmp	r3, #0
 8021286:	d109      	bne.n	802129c <tcp_write+0x5c>
 8021288:	4ba4      	ldr	r3, [pc, #656]	; (802151c <tcp_write+0x2dc>)
 802128a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 802128e:	49a4      	ldr	r1, [pc, #656]	; (8021520 <tcp_write+0x2e0>)
 8021290:	48a4      	ldr	r0, [pc, #656]	; (8021524 <tcp_write+0x2e4>)
 8021292:	f005 fce1 	bl	8026c58 <iprintf>
 8021296:	f06f 030f 	mvn.w	r3, #15
 802129a:	e32a      	b.n	80218f2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 802129c:	68fb      	ldr	r3, [r7, #12]
 802129e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80212a2:	085b      	lsrs	r3, r3, #1
 80212a4:	b29a      	uxth	r2, r3
 80212a6:	68fb      	ldr	r3, [r7, #12]
 80212a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80212aa:	4293      	cmp	r3, r2
 80212ac:	bf28      	it	cs
 80212ae:	4613      	movcs	r3, r2
 80212b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80212b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80212b4:	2b00      	cmp	r3, #0
 80212b6:	d102      	bne.n	80212be <tcp_write+0x7e>
 80212b8:	68fb      	ldr	r3, [r7, #12]
 80212ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80212bc:	e000      	b.n	80212c0 <tcp_write+0x80>
 80212be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80212c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80212c2:	68bb      	ldr	r3, [r7, #8]
 80212c4:	2b00      	cmp	r3, #0
 80212c6:	d109      	bne.n	80212dc <tcp_write+0x9c>
 80212c8:	4b94      	ldr	r3, [pc, #592]	; (802151c <tcp_write+0x2dc>)
 80212ca:	f240 12ad 	movw	r2, #429	; 0x1ad
 80212ce:	4996      	ldr	r1, [pc, #600]	; (8021528 <tcp_write+0x2e8>)
 80212d0:	4894      	ldr	r0, [pc, #592]	; (8021524 <tcp_write+0x2e4>)
 80212d2:	f005 fcc1 	bl	8026c58 <iprintf>
 80212d6:	f06f 030f 	mvn.w	r3, #15
 80212da:	e30a      	b.n	80218f2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80212dc:	88fb      	ldrh	r3, [r7, #6]
 80212de:	4619      	mov	r1, r3
 80212e0:	68f8      	ldr	r0, [r7, #12]
 80212e2:	f7ff ff33 	bl	802114c <tcp_write_checks>
 80212e6:	4603      	mov	r3, r0
 80212e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80212ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80212f0:	2b00      	cmp	r3, #0
 80212f2:	d002      	beq.n	80212fa <tcp_write+0xba>
    return err;
 80212f4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80212f8:	e2fb      	b.n	80218f2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80212fa:	68fb      	ldr	r3, [r7, #12]
 80212fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8021300:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8021304:	2300      	movs	r3, #0
 8021306:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 802130a:	68fb      	ldr	r3, [r7, #12]
 802130c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802130e:	2b00      	cmp	r3, #0
 8021310:	f000 80f6 	beq.w	8021500 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8021314:	68fb      	ldr	r3, [r7, #12]
 8021316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021318:	653b      	str	r3, [r7, #80]	; 0x50
 802131a:	e002      	b.n	8021322 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 802131c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802131e:	681b      	ldr	r3, [r3, #0]
 8021320:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8021322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021324:	681b      	ldr	r3, [r3, #0]
 8021326:	2b00      	cmp	r3, #0
 8021328:	d1f8      	bne.n	802131c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 802132a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802132c:	7a9b      	ldrb	r3, [r3, #10]
 802132e:	009b      	lsls	r3, r3, #2
 8021330:	b29b      	uxth	r3, r3
 8021332:	f003 0304 	and.w	r3, r3, #4
 8021336:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8021338:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802133a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802133c:	891b      	ldrh	r3, [r3, #8]
 802133e:	4619      	mov	r1, r3
 8021340:	8c3b      	ldrh	r3, [r7, #32]
 8021342:	440b      	add	r3, r1
 8021344:	429a      	cmp	r2, r3
 8021346:	da06      	bge.n	8021356 <tcp_write+0x116>
 8021348:	4b74      	ldr	r3, [pc, #464]	; (802151c <tcp_write+0x2dc>)
 802134a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 802134e:	4977      	ldr	r1, [pc, #476]	; (802152c <tcp_write+0x2ec>)
 8021350:	4874      	ldr	r0, [pc, #464]	; (8021524 <tcp_write+0x2e4>)
 8021352:	f005 fc81 	bl	8026c58 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8021356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021358:	891a      	ldrh	r2, [r3, #8]
 802135a:	8c3b      	ldrh	r3, [r7, #32]
 802135c:	4413      	add	r3, r2
 802135e:	b29b      	uxth	r3, r3
 8021360:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021362:	1ad3      	subs	r3, r2, r3
 8021364:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8021366:	68fb      	ldr	r3, [r7, #12]
 8021368:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 802136c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 802136e:	8a7b      	ldrh	r3, [r7, #18]
 8021370:	2b00      	cmp	r3, #0
 8021372:	d026      	beq.n	80213c2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8021374:	8a7b      	ldrh	r3, [r7, #18]
 8021376:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8021378:	429a      	cmp	r2, r3
 802137a:	d206      	bcs.n	802138a <tcp_write+0x14a>
 802137c:	4b67      	ldr	r3, [pc, #412]	; (802151c <tcp_write+0x2dc>)
 802137e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8021382:	496b      	ldr	r1, [pc, #428]	; (8021530 <tcp_write+0x2f0>)
 8021384:	4867      	ldr	r0, [pc, #412]	; (8021524 <tcp_write+0x2e4>)
 8021386:	f005 fc67 	bl	8026c58 <iprintf>
      seg = last_unsent;
 802138a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802138c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 802138e:	8a7b      	ldrh	r3, [r7, #18]
 8021390:	88fa      	ldrh	r2, [r7, #6]
 8021392:	4293      	cmp	r3, r2
 8021394:	bf28      	it	cs
 8021396:	4613      	movcs	r3, r2
 8021398:	b29b      	uxth	r3, r3
 802139a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 802139c:	4293      	cmp	r3, r2
 802139e:	bf28      	it	cs
 80213a0:	4613      	movcs	r3, r2
 80213a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80213a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80213a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80213aa:	4413      	add	r3, r2
 80213ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80213b0:	8a7a      	ldrh	r2, [r7, #18]
 80213b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80213b4:	1ad3      	subs	r3, r2, r3
 80213b6:	b29b      	uxth	r3, r3
 80213b8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80213ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80213bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80213be:	1ad3      	subs	r3, r2, r3
 80213c0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80213c2:	8a7b      	ldrh	r3, [r7, #18]
 80213c4:	2b00      	cmp	r3, #0
 80213c6:	d00b      	beq.n	80213e0 <tcp_write+0x1a0>
 80213c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80213cc:	88fb      	ldrh	r3, [r7, #6]
 80213ce:	429a      	cmp	r2, r3
 80213d0:	d006      	beq.n	80213e0 <tcp_write+0x1a0>
 80213d2:	4b52      	ldr	r3, [pc, #328]	; (802151c <tcp_write+0x2dc>)
 80213d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80213d8:	4956      	ldr	r1, [pc, #344]	; (8021534 <tcp_write+0x2f4>)
 80213da:	4852      	ldr	r0, [pc, #328]	; (8021524 <tcp_write+0x2e4>)
 80213dc:	f005 fc3c 	bl	8026c58 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80213e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80213e4:	88fb      	ldrh	r3, [r7, #6]
 80213e6:	429a      	cmp	r2, r3
 80213e8:	f080 8167 	bcs.w	80216ba <tcp_write+0x47a>
 80213ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	f000 8163 	beq.w	80216ba <tcp_write+0x47a>
 80213f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80213f6:	891b      	ldrh	r3, [r3, #8]
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	f000 815e 	beq.w	80216ba <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80213fe:	88fa      	ldrh	r2, [r7, #6]
 8021400:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021404:	1ad2      	subs	r2, r2, r3
 8021406:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021408:	4293      	cmp	r3, r2
 802140a:	bfa8      	it	ge
 802140c:	4613      	movge	r3, r2
 802140e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8021410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021412:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8021414:	797b      	ldrb	r3, [r7, #5]
 8021416:	f003 0301 	and.w	r3, r3, #1
 802141a:	2b00      	cmp	r3, #0
 802141c:	d027      	beq.n	802146e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 802141e:	f107 0012 	add.w	r0, r7, #18
 8021422:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8021424:	8bf9      	ldrh	r1, [r7, #30]
 8021426:	2301      	movs	r3, #1
 8021428:	9302      	str	r3, [sp, #8]
 802142a:	797b      	ldrb	r3, [r7, #5]
 802142c:	9301      	str	r3, [sp, #4]
 802142e:	68fb      	ldr	r3, [r7, #12]
 8021430:	9300      	str	r3, [sp, #0]
 8021432:	4603      	mov	r3, r0
 8021434:	2000      	movs	r0, #0
 8021436:	f7ff fe0f 	bl	8021058 <tcp_pbuf_prealloc>
 802143a:	6578      	str	r0, [r7, #84]	; 0x54
 802143c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802143e:	2b00      	cmp	r3, #0
 8021440:	f000 8225 	beq.w	802188e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8021444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021446:	6858      	ldr	r0, [r3, #4]
 8021448:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802144c:	68ba      	ldr	r2, [r7, #8]
 802144e:	4413      	add	r3, r2
 8021450:	8bfa      	ldrh	r2, [r7, #30]
 8021452:	4619      	mov	r1, r3
 8021454:	f005 f8a8 	bl	80265a8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8021458:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802145a:	f7fb f863 	bl	801c524 <pbuf_clen>
 802145e:	4603      	mov	r3, r0
 8021460:	461a      	mov	r2, r3
 8021462:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8021466:	4413      	add	r3, r2
 8021468:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 802146c:	e041      	b.n	80214f2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 802146e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021470:	685b      	ldr	r3, [r3, #4]
 8021472:	637b      	str	r3, [r7, #52]	; 0x34
 8021474:	e002      	b.n	802147c <tcp_write+0x23c>
 8021476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021478:	681b      	ldr	r3, [r3, #0]
 802147a:	637b      	str	r3, [r7, #52]	; 0x34
 802147c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802147e:	681b      	ldr	r3, [r3, #0]
 8021480:	2b00      	cmp	r3, #0
 8021482:	d1f8      	bne.n	8021476 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8021484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021486:	7b1b      	ldrb	r3, [r3, #12]
 8021488:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 802148c:	2b00      	cmp	r3, #0
 802148e:	d115      	bne.n	80214bc <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8021490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021492:	685b      	ldr	r3, [r3, #4]
 8021494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021496:	8952      	ldrh	r2, [r2, #10]
 8021498:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 802149a:	68ba      	ldr	r2, [r7, #8]
 802149c:	429a      	cmp	r2, r3
 802149e:	d10d      	bne.n	80214bc <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80214a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80214a4:	2b00      	cmp	r3, #0
 80214a6:	d006      	beq.n	80214b6 <tcp_write+0x276>
 80214a8:	4b1c      	ldr	r3, [pc, #112]	; (802151c <tcp_write+0x2dc>)
 80214aa:	f240 2231 	movw	r2, #561	; 0x231
 80214ae:	4922      	ldr	r1, [pc, #136]	; (8021538 <tcp_write+0x2f8>)
 80214b0:	481c      	ldr	r0, [pc, #112]	; (8021524 <tcp_write+0x2e4>)
 80214b2:	f005 fbd1 	bl	8026c58 <iprintf>
          extendlen = seglen;
 80214b6:	8bfb      	ldrh	r3, [r7, #30]
 80214b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80214ba:	e01a      	b.n	80214f2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80214bc:	8bfb      	ldrh	r3, [r7, #30]
 80214be:	2201      	movs	r2, #1
 80214c0:	4619      	mov	r1, r3
 80214c2:	2000      	movs	r0, #0
 80214c4:	f7fa fcbc 	bl	801be40 <pbuf_alloc>
 80214c8:	6578      	str	r0, [r7, #84]	; 0x54
 80214ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80214cc:	2b00      	cmp	r3, #0
 80214ce:	f000 81e0 	beq.w	8021892 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80214d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80214d6:	68ba      	ldr	r2, [r7, #8]
 80214d8:	441a      	add	r2, r3
 80214da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80214dc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80214de:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80214e0:	f7fb f820 	bl	801c524 <pbuf_clen>
 80214e4:	4603      	mov	r3, r0
 80214e6:	461a      	mov	r2, r3
 80214e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80214ec:	4413      	add	r3, r2
 80214ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80214f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80214f6:	8bfb      	ldrh	r3, [r7, #30]
 80214f8:	4413      	add	r3, r2
 80214fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80214fe:	e0dc      	b.n	80216ba <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8021500:	68fb      	ldr	r3, [r7, #12]
 8021502:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8021506:	2b00      	cmp	r3, #0
 8021508:	f000 80d7 	beq.w	80216ba <tcp_write+0x47a>
 802150c:	4b03      	ldr	r3, [pc, #12]	; (802151c <tcp_write+0x2dc>)
 802150e:	f240 224a 	movw	r2, #586	; 0x24a
 8021512:	490a      	ldr	r1, [pc, #40]	; (802153c <tcp_write+0x2fc>)
 8021514:	4803      	ldr	r0, [pc, #12]	; (8021524 <tcp_write+0x2e4>)
 8021516:	f005 fb9f 	bl	8026c58 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 802151a:	e0ce      	b.n	80216ba <tcp_write+0x47a>
 802151c:	0802ed74 	.word	0x0802ed74
 8021520:	0802ef14 	.word	0x0802ef14
 8021524:	0802edc8 	.word	0x0802edc8
 8021528:	0802ef2c 	.word	0x0802ef2c
 802152c:	0802ef60 	.word	0x0802ef60
 8021530:	0802ef78 	.word	0x0802ef78
 8021534:	0802ef98 	.word	0x0802ef98
 8021538:	0802efb8 	.word	0x0802efb8
 802153c:	0802efe4 	.word	0x0802efe4
    struct pbuf *p;
    u16_t left = len - pos;
 8021540:	88fa      	ldrh	r2, [r7, #6]
 8021542:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021546:	1ad3      	subs	r3, r2, r3
 8021548:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 802154a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 802154e:	b29b      	uxth	r3, r3
 8021550:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021552:	1ad3      	subs	r3, r2, r3
 8021554:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8021556:	8b7a      	ldrh	r2, [r7, #26]
 8021558:	8bbb      	ldrh	r3, [r7, #28]
 802155a:	4293      	cmp	r3, r2
 802155c:	bf28      	it	cs
 802155e:	4613      	movcs	r3, r2
 8021560:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8021562:	797b      	ldrb	r3, [r7, #5]
 8021564:	f003 0301 	and.w	r3, r3, #1
 8021568:	2b00      	cmp	r3, #0
 802156a:	d036      	beq.n	80215da <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 802156c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8021570:	b29a      	uxth	r2, r3
 8021572:	8b3b      	ldrh	r3, [r7, #24]
 8021574:	4413      	add	r3, r2
 8021576:	b299      	uxth	r1, r3
 8021578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802157a:	2b00      	cmp	r3, #0
 802157c:	bf0c      	ite	eq
 802157e:	2301      	moveq	r3, #1
 8021580:	2300      	movne	r3, #0
 8021582:	b2db      	uxtb	r3, r3
 8021584:	f107 0012 	add.w	r0, r7, #18
 8021588:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802158a:	9302      	str	r3, [sp, #8]
 802158c:	797b      	ldrb	r3, [r7, #5]
 802158e:	9301      	str	r3, [sp, #4]
 8021590:	68fb      	ldr	r3, [r7, #12]
 8021592:	9300      	str	r3, [sp, #0]
 8021594:	4603      	mov	r3, r0
 8021596:	2036      	movs	r0, #54	; 0x36
 8021598:	f7ff fd5e 	bl	8021058 <tcp_pbuf_prealloc>
 802159c:	6338      	str	r0, [r7, #48]	; 0x30
 802159e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215a0:	2b00      	cmp	r3, #0
 80215a2:	f000 8178 	beq.w	8021896 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80215a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215a8:	895b      	ldrh	r3, [r3, #10]
 80215aa:	8b3a      	ldrh	r2, [r7, #24]
 80215ac:	429a      	cmp	r2, r3
 80215ae:	d906      	bls.n	80215be <tcp_write+0x37e>
 80215b0:	4b8c      	ldr	r3, [pc, #560]	; (80217e4 <tcp_write+0x5a4>)
 80215b2:	f240 2266 	movw	r2, #614	; 0x266
 80215b6:	498c      	ldr	r1, [pc, #560]	; (80217e8 <tcp_write+0x5a8>)
 80215b8:	488c      	ldr	r0, [pc, #560]	; (80217ec <tcp_write+0x5ac>)
 80215ba:	f005 fb4d 	bl	8026c58 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80215be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215c0:	685a      	ldr	r2, [r3, #4]
 80215c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80215c6:	18d0      	adds	r0, r2, r3
 80215c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80215cc:	68ba      	ldr	r2, [r7, #8]
 80215ce:	4413      	add	r3, r2
 80215d0:	8b3a      	ldrh	r2, [r7, #24]
 80215d2:	4619      	mov	r1, r3
 80215d4:	f004 ffe8 	bl	80265a8 <memcpy>
 80215d8:	e02f      	b.n	802163a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80215da:	8a7b      	ldrh	r3, [r7, #18]
 80215dc:	2b00      	cmp	r3, #0
 80215de:	d006      	beq.n	80215ee <tcp_write+0x3ae>
 80215e0:	4b80      	ldr	r3, [pc, #512]	; (80217e4 <tcp_write+0x5a4>)
 80215e2:	f240 2271 	movw	r2, #625	; 0x271
 80215e6:	4982      	ldr	r1, [pc, #520]	; (80217f0 <tcp_write+0x5b0>)
 80215e8:	4880      	ldr	r0, [pc, #512]	; (80217ec <tcp_write+0x5ac>)
 80215ea:	f005 fb35 	bl	8026c58 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80215ee:	8b3b      	ldrh	r3, [r7, #24]
 80215f0:	2201      	movs	r2, #1
 80215f2:	4619      	mov	r1, r3
 80215f4:	2036      	movs	r0, #54	; 0x36
 80215f6:	f7fa fc23 	bl	801be40 <pbuf_alloc>
 80215fa:	6178      	str	r0, [r7, #20]
 80215fc:	697b      	ldr	r3, [r7, #20]
 80215fe:	2b00      	cmp	r3, #0
 8021600:	f000 814b 	beq.w	802189a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8021604:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021608:	68ba      	ldr	r2, [r7, #8]
 802160a:	441a      	add	r2, r3
 802160c:	697b      	ldr	r3, [r7, #20]
 802160e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8021610:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8021614:	b29b      	uxth	r3, r3
 8021616:	f44f 7220 	mov.w	r2, #640	; 0x280
 802161a:	4619      	mov	r1, r3
 802161c:	2036      	movs	r0, #54	; 0x36
 802161e:	f7fa fc0f 	bl	801be40 <pbuf_alloc>
 8021622:	6338      	str	r0, [r7, #48]	; 0x30
 8021624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021626:	2b00      	cmp	r3, #0
 8021628:	d103      	bne.n	8021632 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 802162a:	6978      	ldr	r0, [r7, #20]
 802162c:	f7fa feec 	bl	801c408 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8021630:	e136      	b.n	80218a0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8021632:	6979      	ldr	r1, [r7, #20]
 8021634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021636:	f7fa ffb5 	bl	801c5a4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 802163a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802163c:	f7fa ff72 	bl	801c524 <pbuf_clen>
 8021640:	4603      	mov	r3, r0
 8021642:	461a      	mov	r2, r3
 8021644:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8021648:	4413      	add	r3, r2
 802164a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 802164e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8021652:	2b09      	cmp	r3, #9
 8021654:	d903      	bls.n	802165e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8021656:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021658:	f7fa fed6 	bl	801c408 <pbuf_free>
      goto memerr;
 802165c:	e120      	b.n	80218a0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 802165e:	68fb      	ldr	r3, [r7, #12]
 8021660:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8021662:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021666:	441a      	add	r2, r3
 8021668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802166c:	9300      	str	r3, [sp, #0]
 802166e:	4613      	mov	r3, r2
 8021670:	2200      	movs	r2, #0
 8021672:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8021674:	68f8      	ldr	r0, [r7, #12]
 8021676:	f7ff fc51 	bl	8020f1c <tcp_create_segment>
 802167a:	64f8      	str	r0, [r7, #76]	; 0x4c
 802167c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802167e:	2b00      	cmp	r3, #0
 8021680:	f000 810d 	beq.w	802189e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8021684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021686:	2b00      	cmp	r3, #0
 8021688:	d102      	bne.n	8021690 <tcp_write+0x450>
      queue = seg;
 802168a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802168c:	647b      	str	r3, [r7, #68]	; 0x44
 802168e:	e00c      	b.n	80216aa <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8021690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021692:	2b00      	cmp	r3, #0
 8021694:	d106      	bne.n	80216a4 <tcp_write+0x464>
 8021696:	4b53      	ldr	r3, [pc, #332]	; (80217e4 <tcp_write+0x5a4>)
 8021698:	f240 22ab 	movw	r2, #683	; 0x2ab
 802169c:	4955      	ldr	r1, [pc, #340]	; (80217f4 <tcp_write+0x5b4>)
 802169e:	4853      	ldr	r0, [pc, #332]	; (80217ec <tcp_write+0x5ac>)
 80216a0:	f005 fada 	bl	8026c58 <iprintf>
      prev_seg->next = seg;
 80216a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80216a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80216a8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80216aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80216ac:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80216ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80216b2:	8b3b      	ldrh	r3, [r7, #24]
 80216b4:	4413      	add	r3, r2
 80216b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80216ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80216be:	88fb      	ldrh	r3, [r7, #6]
 80216c0:	429a      	cmp	r2, r3
 80216c2:	f4ff af3d 	bcc.w	8021540 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80216c6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80216c8:	2b00      	cmp	r3, #0
 80216ca:	d02c      	beq.n	8021726 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80216cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80216ce:	685b      	ldr	r3, [r3, #4]
 80216d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80216d2:	e01e      	b.n	8021712 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80216d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216d6:	891a      	ldrh	r2, [r3, #8]
 80216d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80216da:	4413      	add	r3, r2
 80216dc:	b29a      	uxth	r2, r3
 80216de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216e0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80216e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216e4:	681b      	ldr	r3, [r3, #0]
 80216e6:	2b00      	cmp	r3, #0
 80216e8:	d110      	bne.n	802170c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80216ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216ec:	685b      	ldr	r3, [r3, #4]
 80216ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80216f0:	8952      	ldrh	r2, [r2, #10]
 80216f2:	4413      	add	r3, r2
 80216f4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80216f6:	68b9      	ldr	r1, [r7, #8]
 80216f8:	4618      	mov	r0, r3
 80216fa:	f004 ff55 	bl	80265a8 <memcpy>
        p->len += oversize_used;
 80216fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021700:	895a      	ldrh	r2, [r3, #10]
 8021702:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021704:	4413      	add	r3, r2
 8021706:	b29a      	uxth	r2, r3
 8021708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802170a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 802170c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802170e:	681b      	ldr	r3, [r3, #0]
 8021710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021714:	2b00      	cmp	r3, #0
 8021716:	d1dd      	bne.n	80216d4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8021718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802171a:	891a      	ldrh	r2, [r3, #8]
 802171c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802171e:	4413      	add	r3, r2
 8021720:	b29a      	uxth	r2, r3
 8021722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021724:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8021726:	8a7a      	ldrh	r2, [r7, #18]
 8021728:	68fb      	ldr	r3, [r7, #12]
 802172a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 802172e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021730:	2b00      	cmp	r3, #0
 8021732:	d018      	beq.n	8021766 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8021734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021736:	2b00      	cmp	r3, #0
 8021738:	d106      	bne.n	8021748 <tcp_write+0x508>
 802173a:	4b2a      	ldr	r3, [pc, #168]	; (80217e4 <tcp_write+0x5a4>)
 802173c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8021740:	492d      	ldr	r1, [pc, #180]	; (80217f8 <tcp_write+0x5b8>)
 8021742:	482a      	ldr	r0, [pc, #168]	; (80217ec <tcp_write+0x5ac>)
 8021744:	f005 fa88 	bl	8026c58 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8021748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802174a:	685b      	ldr	r3, [r3, #4]
 802174c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802174e:	4618      	mov	r0, r3
 8021750:	f7fa ff28 	bl	801c5a4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8021754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021756:	891a      	ldrh	r2, [r3, #8]
 8021758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802175a:	891b      	ldrh	r3, [r3, #8]
 802175c:	4413      	add	r3, r2
 802175e:	b29a      	uxth	r2, r3
 8021760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021762:	811a      	strh	r2, [r3, #8]
 8021764:	e037      	b.n	80217d6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8021766:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021768:	2b00      	cmp	r3, #0
 802176a:	d034      	beq.n	80217d6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 802176c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802176e:	2b00      	cmp	r3, #0
 8021770:	d003      	beq.n	802177a <tcp_write+0x53a>
 8021772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021774:	685b      	ldr	r3, [r3, #4]
 8021776:	2b00      	cmp	r3, #0
 8021778:	d106      	bne.n	8021788 <tcp_write+0x548>
 802177a:	4b1a      	ldr	r3, [pc, #104]	; (80217e4 <tcp_write+0x5a4>)
 802177c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8021780:	491e      	ldr	r1, [pc, #120]	; (80217fc <tcp_write+0x5bc>)
 8021782:	481a      	ldr	r0, [pc, #104]	; (80217ec <tcp_write+0x5ac>)
 8021784:	f005 fa68 	bl	8026c58 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8021788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802178a:	685b      	ldr	r3, [r3, #4]
 802178c:	62bb      	str	r3, [r7, #40]	; 0x28
 802178e:	e009      	b.n	80217a4 <tcp_write+0x564>
      p->tot_len += extendlen;
 8021790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021792:	891a      	ldrh	r2, [r3, #8]
 8021794:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021796:	4413      	add	r3, r2
 8021798:	b29a      	uxth	r2, r3
 802179a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802179c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 802179e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217a0:	681b      	ldr	r3, [r3, #0]
 80217a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80217a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217a6:	681b      	ldr	r3, [r3, #0]
 80217a8:	2b00      	cmp	r3, #0
 80217aa:	d1f1      	bne.n	8021790 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80217ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217ae:	891a      	ldrh	r2, [r3, #8]
 80217b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80217b2:	4413      	add	r3, r2
 80217b4:	b29a      	uxth	r2, r3
 80217b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217b8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80217ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217bc:	895a      	ldrh	r2, [r3, #10]
 80217be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80217c0:	4413      	add	r3, r2
 80217c2:	b29a      	uxth	r2, r3
 80217c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217c6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80217c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80217ca:	891a      	ldrh	r2, [r3, #8]
 80217cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80217ce:	4413      	add	r3, r2
 80217d0:	b29a      	uxth	r2, r3
 80217d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80217d4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80217d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80217d8:	2b00      	cmp	r3, #0
 80217da:	d111      	bne.n	8021800 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80217dc:	68fb      	ldr	r3, [r7, #12]
 80217de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80217e0:	66da      	str	r2, [r3, #108]	; 0x6c
 80217e2:	e010      	b.n	8021806 <tcp_write+0x5c6>
 80217e4:	0802ed74 	.word	0x0802ed74
 80217e8:	0802f014 	.word	0x0802f014
 80217ec:	0802edc8 	.word	0x0802edc8
 80217f0:	0802f054 	.word	0x0802f054
 80217f4:	0802f064 	.word	0x0802f064
 80217f8:	0802f078 	.word	0x0802f078
 80217fc:	0802f0b0 	.word	0x0802f0b0
  } else {
    last_unsent->next = queue;
 8021800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021804:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8021806:	68fb      	ldr	r3, [r7, #12]
 8021808:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802180a:	88fb      	ldrh	r3, [r7, #6]
 802180c:	441a      	add	r2, r3
 802180e:	68fb      	ldr	r3, [r7, #12]
 8021810:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8021812:	68fb      	ldr	r3, [r7, #12]
 8021814:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8021818:	88fb      	ldrh	r3, [r7, #6]
 802181a:	1ad3      	subs	r3, r2, r3
 802181c:	b29a      	uxth	r2, r3
 802181e:	68fb      	ldr	r3, [r7, #12]
 8021820:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8021824:	68fb      	ldr	r3, [r7, #12]
 8021826:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 802182a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 802182e:	68fb      	ldr	r3, [r7, #12]
 8021830:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8021834:	2b00      	cmp	r3, #0
 8021836:	d00e      	beq.n	8021856 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8021838:	68fb      	ldr	r3, [r7, #12]
 802183a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802183c:	2b00      	cmp	r3, #0
 802183e:	d10a      	bne.n	8021856 <tcp_write+0x616>
 8021840:	68fb      	ldr	r3, [r7, #12]
 8021842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021844:	2b00      	cmp	r3, #0
 8021846:	d106      	bne.n	8021856 <tcp_write+0x616>
 8021848:	4b2c      	ldr	r3, [pc, #176]	; (80218fc <tcp_write+0x6bc>)
 802184a:	f240 3212 	movw	r2, #786	; 0x312
 802184e:	492c      	ldr	r1, [pc, #176]	; (8021900 <tcp_write+0x6c0>)
 8021850:	482c      	ldr	r0, [pc, #176]	; (8021904 <tcp_write+0x6c4>)
 8021852:	f005 fa01 	bl	8026c58 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8021856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021858:	2b00      	cmp	r3, #0
 802185a:	d016      	beq.n	802188a <tcp_write+0x64a>
 802185c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802185e:	68db      	ldr	r3, [r3, #12]
 8021860:	2b00      	cmp	r3, #0
 8021862:	d012      	beq.n	802188a <tcp_write+0x64a>
 8021864:	797b      	ldrb	r3, [r7, #5]
 8021866:	f003 0302 	and.w	r3, r3, #2
 802186a:	2b00      	cmp	r3, #0
 802186c:	d10d      	bne.n	802188a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 802186e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021870:	68db      	ldr	r3, [r3, #12]
 8021872:	899b      	ldrh	r3, [r3, #12]
 8021874:	b29c      	uxth	r4, r3
 8021876:	2008      	movs	r0, #8
 8021878:	f7f9 f988 	bl	801ab8c <lwip_htons>
 802187c:	4603      	mov	r3, r0
 802187e:	461a      	mov	r2, r3
 8021880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021882:	68db      	ldr	r3, [r3, #12]
 8021884:	4322      	orrs	r2, r4
 8021886:	b292      	uxth	r2, r2
 8021888:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 802188a:	2300      	movs	r3, #0
 802188c:	e031      	b.n	80218f2 <tcp_write+0x6b2>
          goto memerr;
 802188e:	bf00      	nop
 8021890:	e006      	b.n	80218a0 <tcp_write+0x660>
            goto memerr;
 8021892:	bf00      	nop
 8021894:	e004      	b.n	80218a0 <tcp_write+0x660>
        goto memerr;
 8021896:	bf00      	nop
 8021898:	e002      	b.n	80218a0 <tcp_write+0x660>
        goto memerr;
 802189a:	bf00      	nop
 802189c:	e000      	b.n	80218a0 <tcp_write+0x660>
      goto memerr;
 802189e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80218a0:	68fb      	ldr	r3, [r7, #12]
 80218a2:	8b5b      	ldrh	r3, [r3, #26]
 80218a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80218a8:	b29a      	uxth	r2, r3
 80218aa:	68fb      	ldr	r3, [r7, #12]
 80218ac:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80218ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80218b0:	2b00      	cmp	r3, #0
 80218b2:	d002      	beq.n	80218ba <tcp_write+0x67a>
    pbuf_free(concat_p);
 80218b4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80218b6:	f7fa fda7 	bl	801c408 <pbuf_free>
  }
  if (queue != NULL) {
 80218ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80218bc:	2b00      	cmp	r3, #0
 80218be:	d002      	beq.n	80218c6 <tcp_write+0x686>
    tcp_segs_free(queue);
 80218c0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80218c2:	f7fc fb51 	bl	801df68 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80218c6:	68fb      	ldr	r3, [r7, #12]
 80218c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80218cc:	2b00      	cmp	r3, #0
 80218ce:	d00e      	beq.n	80218ee <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80218d0:	68fb      	ldr	r3, [r7, #12]
 80218d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	d10a      	bne.n	80218ee <tcp_write+0x6ae>
 80218d8:	68fb      	ldr	r3, [r7, #12]
 80218da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80218dc:	2b00      	cmp	r3, #0
 80218de:	d106      	bne.n	80218ee <tcp_write+0x6ae>
 80218e0:	4b06      	ldr	r3, [pc, #24]	; (80218fc <tcp_write+0x6bc>)
 80218e2:	f240 3227 	movw	r2, #807	; 0x327
 80218e6:	4906      	ldr	r1, [pc, #24]	; (8021900 <tcp_write+0x6c0>)
 80218e8:	4806      	ldr	r0, [pc, #24]	; (8021904 <tcp_write+0x6c4>)
 80218ea:	f005 f9b5 	bl	8026c58 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80218ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80218f2:	4618      	mov	r0, r3
 80218f4:	375c      	adds	r7, #92	; 0x5c
 80218f6:	46bd      	mov	sp, r7
 80218f8:	bd90      	pop	{r4, r7, pc}
 80218fa:	bf00      	nop
 80218fc:	0802ed74 	.word	0x0802ed74
 8021900:	0802f0e8 	.word	0x0802f0e8
 8021904:	0802edc8 	.word	0x0802edc8

08021908 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8021908:	b590      	push	{r4, r7, lr}
 802190a:	b08b      	sub	sp, #44	; 0x2c
 802190c:	af02      	add	r7, sp, #8
 802190e:	6078      	str	r0, [r7, #4]
 8021910:	460b      	mov	r3, r1
 8021912:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8021914:	2300      	movs	r3, #0
 8021916:	61fb      	str	r3, [r7, #28]
 8021918:	2300      	movs	r3, #0
 802191a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 802191c:	2300      	movs	r3, #0
 802191e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8021920:	687b      	ldr	r3, [r7, #4]
 8021922:	2b00      	cmp	r3, #0
 8021924:	d106      	bne.n	8021934 <tcp_split_unsent_seg+0x2c>
 8021926:	4b95      	ldr	r3, [pc, #596]	; (8021b7c <tcp_split_unsent_seg+0x274>)
 8021928:	f240 324b 	movw	r2, #843	; 0x34b
 802192c:	4994      	ldr	r1, [pc, #592]	; (8021b80 <tcp_split_unsent_seg+0x278>)
 802192e:	4895      	ldr	r0, [pc, #596]	; (8021b84 <tcp_split_unsent_seg+0x27c>)
 8021930:	f005 f992 	bl	8026c58 <iprintf>

  useg = pcb->unsent;
 8021934:	687b      	ldr	r3, [r7, #4]
 8021936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021938:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 802193a:	697b      	ldr	r3, [r7, #20]
 802193c:	2b00      	cmp	r3, #0
 802193e:	d102      	bne.n	8021946 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8021940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021944:	e116      	b.n	8021b74 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8021946:	887b      	ldrh	r3, [r7, #2]
 8021948:	2b00      	cmp	r3, #0
 802194a:	d109      	bne.n	8021960 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 802194c:	4b8b      	ldr	r3, [pc, #556]	; (8021b7c <tcp_split_unsent_seg+0x274>)
 802194e:	f240 3253 	movw	r2, #851	; 0x353
 8021952:	498d      	ldr	r1, [pc, #564]	; (8021b88 <tcp_split_unsent_seg+0x280>)
 8021954:	488b      	ldr	r0, [pc, #556]	; (8021b84 <tcp_split_unsent_seg+0x27c>)
 8021956:	f005 f97f 	bl	8026c58 <iprintf>
    return ERR_VAL;
 802195a:	f06f 0305 	mvn.w	r3, #5
 802195e:	e109      	b.n	8021b74 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8021960:	697b      	ldr	r3, [r7, #20]
 8021962:	891b      	ldrh	r3, [r3, #8]
 8021964:	887a      	ldrh	r2, [r7, #2]
 8021966:	429a      	cmp	r2, r3
 8021968:	d301      	bcc.n	802196e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 802196a:	2300      	movs	r3, #0
 802196c:	e102      	b.n	8021b74 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 802196e:	687b      	ldr	r3, [r7, #4]
 8021970:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8021972:	887a      	ldrh	r2, [r7, #2]
 8021974:	429a      	cmp	r2, r3
 8021976:	d906      	bls.n	8021986 <tcp_split_unsent_seg+0x7e>
 8021978:	4b80      	ldr	r3, [pc, #512]	; (8021b7c <tcp_split_unsent_seg+0x274>)
 802197a:	f240 325b 	movw	r2, #859	; 0x35b
 802197e:	4983      	ldr	r1, [pc, #524]	; (8021b8c <tcp_split_unsent_seg+0x284>)
 8021980:	4880      	ldr	r0, [pc, #512]	; (8021b84 <tcp_split_unsent_seg+0x27c>)
 8021982:	f005 f969 	bl	8026c58 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8021986:	697b      	ldr	r3, [r7, #20]
 8021988:	891b      	ldrh	r3, [r3, #8]
 802198a:	2b00      	cmp	r3, #0
 802198c:	d106      	bne.n	802199c <tcp_split_unsent_seg+0x94>
 802198e:	4b7b      	ldr	r3, [pc, #492]	; (8021b7c <tcp_split_unsent_seg+0x274>)
 8021990:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8021994:	497e      	ldr	r1, [pc, #504]	; (8021b90 <tcp_split_unsent_seg+0x288>)
 8021996:	487b      	ldr	r0, [pc, #492]	; (8021b84 <tcp_split_unsent_seg+0x27c>)
 8021998:	f005 f95e 	bl	8026c58 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 802199c:	697b      	ldr	r3, [r7, #20]
 802199e:	7a9b      	ldrb	r3, [r3, #10]
 80219a0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80219a2:	7bfb      	ldrb	r3, [r7, #15]
 80219a4:	009b      	lsls	r3, r3, #2
 80219a6:	b2db      	uxtb	r3, r3
 80219a8:	f003 0304 	and.w	r3, r3, #4
 80219ac:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80219ae:	697b      	ldr	r3, [r7, #20]
 80219b0:	891a      	ldrh	r2, [r3, #8]
 80219b2:	887b      	ldrh	r3, [r7, #2]
 80219b4:	1ad3      	subs	r3, r2, r3
 80219b6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80219b8:	7bbb      	ldrb	r3, [r7, #14]
 80219ba:	b29a      	uxth	r2, r3
 80219bc:	89bb      	ldrh	r3, [r7, #12]
 80219be:	4413      	add	r3, r2
 80219c0:	b29b      	uxth	r3, r3
 80219c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80219c6:	4619      	mov	r1, r3
 80219c8:	2036      	movs	r0, #54	; 0x36
 80219ca:	f7fa fa39 	bl	801be40 <pbuf_alloc>
 80219ce:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80219d0:	693b      	ldr	r3, [r7, #16]
 80219d2:	2b00      	cmp	r3, #0
 80219d4:	f000 80b7 	beq.w	8021b46 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80219d8:	697b      	ldr	r3, [r7, #20]
 80219da:	685b      	ldr	r3, [r3, #4]
 80219dc:	891a      	ldrh	r2, [r3, #8]
 80219de:	697b      	ldr	r3, [r7, #20]
 80219e0:	891b      	ldrh	r3, [r3, #8]
 80219e2:	1ad3      	subs	r3, r2, r3
 80219e4:	b29a      	uxth	r2, r3
 80219e6:	887b      	ldrh	r3, [r7, #2]
 80219e8:	4413      	add	r3, r2
 80219ea:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80219ec:	697b      	ldr	r3, [r7, #20]
 80219ee:	6858      	ldr	r0, [r3, #4]
 80219f0:	693b      	ldr	r3, [r7, #16]
 80219f2:	685a      	ldr	r2, [r3, #4]
 80219f4:	7bbb      	ldrb	r3, [r7, #14]
 80219f6:	18d1      	adds	r1, r2, r3
 80219f8:	897b      	ldrh	r3, [r7, #10]
 80219fa:	89ba      	ldrh	r2, [r7, #12]
 80219fc:	f7fa ff0a 	bl	801c814 <pbuf_copy_partial>
 8021a00:	4603      	mov	r3, r0
 8021a02:	461a      	mov	r2, r3
 8021a04:	89bb      	ldrh	r3, [r7, #12]
 8021a06:	4293      	cmp	r3, r2
 8021a08:	f040 809f 	bne.w	8021b4a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8021a0c:	697b      	ldr	r3, [r7, #20]
 8021a0e:	68db      	ldr	r3, [r3, #12]
 8021a10:	899b      	ldrh	r3, [r3, #12]
 8021a12:	b29b      	uxth	r3, r3
 8021a14:	4618      	mov	r0, r3
 8021a16:	f7f9 f8b9 	bl	801ab8c <lwip_htons>
 8021a1a:	4603      	mov	r3, r0
 8021a1c:	b2db      	uxtb	r3, r3
 8021a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8021a22:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8021a24:	2300      	movs	r3, #0
 8021a26:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8021a28:	7efb      	ldrb	r3, [r7, #27]
 8021a2a:	f003 0308 	and.w	r3, r3, #8
 8021a2e:	2b00      	cmp	r3, #0
 8021a30:	d007      	beq.n	8021a42 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8021a32:	7efb      	ldrb	r3, [r7, #27]
 8021a34:	f023 0308 	bic.w	r3, r3, #8
 8021a38:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8021a3a:	7ebb      	ldrb	r3, [r7, #26]
 8021a3c:	f043 0308 	orr.w	r3, r3, #8
 8021a40:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8021a42:	7efb      	ldrb	r3, [r7, #27]
 8021a44:	f003 0301 	and.w	r3, r3, #1
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	d007      	beq.n	8021a5c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8021a4c:	7efb      	ldrb	r3, [r7, #27]
 8021a4e:	f023 0301 	bic.w	r3, r3, #1
 8021a52:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8021a54:	7ebb      	ldrb	r3, [r7, #26]
 8021a56:	f043 0301 	orr.w	r3, r3, #1
 8021a5a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8021a5c:	697b      	ldr	r3, [r7, #20]
 8021a5e:	68db      	ldr	r3, [r3, #12]
 8021a60:	685b      	ldr	r3, [r3, #4]
 8021a62:	4618      	mov	r0, r3
 8021a64:	f7f9 f8a7 	bl	801abb6 <lwip_htonl>
 8021a68:	4602      	mov	r2, r0
 8021a6a:	887b      	ldrh	r3, [r7, #2]
 8021a6c:	18d1      	adds	r1, r2, r3
 8021a6e:	7eba      	ldrb	r2, [r7, #26]
 8021a70:	7bfb      	ldrb	r3, [r7, #15]
 8021a72:	9300      	str	r3, [sp, #0]
 8021a74:	460b      	mov	r3, r1
 8021a76:	6939      	ldr	r1, [r7, #16]
 8021a78:	6878      	ldr	r0, [r7, #4]
 8021a7a:	f7ff fa4f 	bl	8020f1c <tcp_create_segment>
 8021a7e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8021a80:	69fb      	ldr	r3, [r7, #28]
 8021a82:	2b00      	cmp	r3, #0
 8021a84:	d063      	beq.n	8021b4e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8021a86:	697b      	ldr	r3, [r7, #20]
 8021a88:	685b      	ldr	r3, [r3, #4]
 8021a8a:	4618      	mov	r0, r3
 8021a8c:	f7fa fd4a 	bl	801c524 <pbuf_clen>
 8021a90:	4603      	mov	r3, r0
 8021a92:	461a      	mov	r2, r3
 8021a94:	687b      	ldr	r3, [r7, #4]
 8021a96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8021a9a:	1a9b      	subs	r3, r3, r2
 8021a9c:	b29a      	uxth	r2, r3
 8021a9e:	687b      	ldr	r3, [r7, #4]
 8021aa0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8021aa4:	697b      	ldr	r3, [r7, #20]
 8021aa6:	6858      	ldr	r0, [r3, #4]
 8021aa8:	697b      	ldr	r3, [r7, #20]
 8021aaa:	685b      	ldr	r3, [r3, #4]
 8021aac:	891a      	ldrh	r2, [r3, #8]
 8021aae:	89bb      	ldrh	r3, [r7, #12]
 8021ab0:	1ad3      	subs	r3, r2, r3
 8021ab2:	b29b      	uxth	r3, r3
 8021ab4:	4619      	mov	r1, r3
 8021ab6:	f7fa fb21 	bl	801c0fc <pbuf_realloc>
  useg->len -= remainder;
 8021aba:	697b      	ldr	r3, [r7, #20]
 8021abc:	891a      	ldrh	r2, [r3, #8]
 8021abe:	89bb      	ldrh	r3, [r7, #12]
 8021ac0:	1ad3      	subs	r3, r2, r3
 8021ac2:	b29a      	uxth	r2, r3
 8021ac4:	697b      	ldr	r3, [r7, #20]
 8021ac6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8021ac8:	697b      	ldr	r3, [r7, #20]
 8021aca:	68db      	ldr	r3, [r3, #12]
 8021acc:	899b      	ldrh	r3, [r3, #12]
 8021ace:	b29c      	uxth	r4, r3
 8021ad0:	7efb      	ldrb	r3, [r7, #27]
 8021ad2:	b29b      	uxth	r3, r3
 8021ad4:	4618      	mov	r0, r3
 8021ad6:	f7f9 f859 	bl	801ab8c <lwip_htons>
 8021ada:	4603      	mov	r3, r0
 8021adc:	461a      	mov	r2, r3
 8021ade:	697b      	ldr	r3, [r7, #20]
 8021ae0:	68db      	ldr	r3, [r3, #12]
 8021ae2:	4322      	orrs	r2, r4
 8021ae4:	b292      	uxth	r2, r2
 8021ae6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8021ae8:	697b      	ldr	r3, [r7, #20]
 8021aea:	685b      	ldr	r3, [r3, #4]
 8021aec:	4618      	mov	r0, r3
 8021aee:	f7fa fd19 	bl	801c524 <pbuf_clen>
 8021af2:	4603      	mov	r3, r0
 8021af4:	461a      	mov	r2, r3
 8021af6:	687b      	ldr	r3, [r7, #4]
 8021af8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8021afc:	4413      	add	r3, r2
 8021afe:	b29a      	uxth	r2, r3
 8021b00:	687b      	ldr	r3, [r7, #4]
 8021b02:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8021b06:	69fb      	ldr	r3, [r7, #28]
 8021b08:	685b      	ldr	r3, [r3, #4]
 8021b0a:	4618      	mov	r0, r3
 8021b0c:	f7fa fd0a 	bl	801c524 <pbuf_clen>
 8021b10:	4603      	mov	r3, r0
 8021b12:	461a      	mov	r2, r3
 8021b14:	687b      	ldr	r3, [r7, #4]
 8021b16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8021b1a:	4413      	add	r3, r2
 8021b1c:	b29a      	uxth	r2, r3
 8021b1e:	687b      	ldr	r3, [r7, #4]
 8021b20:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8021b24:	697b      	ldr	r3, [r7, #20]
 8021b26:	681a      	ldr	r2, [r3, #0]
 8021b28:	69fb      	ldr	r3, [r7, #28]
 8021b2a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8021b2c:	697b      	ldr	r3, [r7, #20]
 8021b2e:	69fa      	ldr	r2, [r7, #28]
 8021b30:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8021b32:	69fb      	ldr	r3, [r7, #28]
 8021b34:	681b      	ldr	r3, [r3, #0]
 8021b36:	2b00      	cmp	r3, #0
 8021b38:	d103      	bne.n	8021b42 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8021b3a:	687b      	ldr	r3, [r7, #4]
 8021b3c:	2200      	movs	r2, #0
 8021b3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8021b42:	2300      	movs	r3, #0
 8021b44:	e016      	b.n	8021b74 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8021b46:	bf00      	nop
 8021b48:	e002      	b.n	8021b50 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8021b4a:	bf00      	nop
 8021b4c:	e000      	b.n	8021b50 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8021b4e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8021b50:	69fb      	ldr	r3, [r7, #28]
 8021b52:	2b00      	cmp	r3, #0
 8021b54:	d006      	beq.n	8021b64 <tcp_split_unsent_seg+0x25c>
 8021b56:	4b09      	ldr	r3, [pc, #36]	; (8021b7c <tcp_split_unsent_seg+0x274>)
 8021b58:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8021b5c:	490d      	ldr	r1, [pc, #52]	; (8021b94 <tcp_split_unsent_seg+0x28c>)
 8021b5e:	4809      	ldr	r0, [pc, #36]	; (8021b84 <tcp_split_unsent_seg+0x27c>)
 8021b60:	f005 f87a 	bl	8026c58 <iprintf>
  if (p != NULL) {
 8021b64:	693b      	ldr	r3, [r7, #16]
 8021b66:	2b00      	cmp	r3, #0
 8021b68:	d002      	beq.n	8021b70 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8021b6a:	6938      	ldr	r0, [r7, #16]
 8021b6c:	f7fa fc4c 	bl	801c408 <pbuf_free>
  }

  return ERR_MEM;
 8021b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8021b74:	4618      	mov	r0, r3
 8021b76:	3724      	adds	r7, #36	; 0x24
 8021b78:	46bd      	mov	sp, r7
 8021b7a:	bd90      	pop	{r4, r7, pc}
 8021b7c:	0802ed74 	.word	0x0802ed74
 8021b80:	0802f108 	.word	0x0802f108
 8021b84:	0802edc8 	.word	0x0802edc8
 8021b88:	0802f12c 	.word	0x0802f12c
 8021b8c:	0802f150 	.word	0x0802f150
 8021b90:	0802f160 	.word	0x0802f160
 8021b94:	0802f170 	.word	0x0802f170

08021b98 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8021b98:	b590      	push	{r4, r7, lr}
 8021b9a:	b085      	sub	sp, #20
 8021b9c:	af00      	add	r7, sp, #0
 8021b9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8021ba0:	687b      	ldr	r3, [r7, #4]
 8021ba2:	2b00      	cmp	r3, #0
 8021ba4:	d106      	bne.n	8021bb4 <tcp_send_fin+0x1c>
 8021ba6:	4b21      	ldr	r3, [pc, #132]	; (8021c2c <tcp_send_fin+0x94>)
 8021ba8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8021bac:	4920      	ldr	r1, [pc, #128]	; (8021c30 <tcp_send_fin+0x98>)
 8021bae:	4821      	ldr	r0, [pc, #132]	; (8021c34 <tcp_send_fin+0x9c>)
 8021bb0:	f005 f852 	bl	8026c58 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8021bb4:	687b      	ldr	r3, [r7, #4]
 8021bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021bb8:	2b00      	cmp	r3, #0
 8021bba:	d02e      	beq.n	8021c1a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8021bbc:	687b      	ldr	r3, [r7, #4]
 8021bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021bc0:	60fb      	str	r3, [r7, #12]
 8021bc2:	e002      	b.n	8021bca <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8021bc4:	68fb      	ldr	r3, [r7, #12]
 8021bc6:	681b      	ldr	r3, [r3, #0]
 8021bc8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8021bca:	68fb      	ldr	r3, [r7, #12]
 8021bcc:	681b      	ldr	r3, [r3, #0]
 8021bce:	2b00      	cmp	r3, #0
 8021bd0:	d1f8      	bne.n	8021bc4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8021bd2:	68fb      	ldr	r3, [r7, #12]
 8021bd4:	68db      	ldr	r3, [r3, #12]
 8021bd6:	899b      	ldrh	r3, [r3, #12]
 8021bd8:	b29b      	uxth	r3, r3
 8021bda:	4618      	mov	r0, r3
 8021bdc:	f7f8 ffd6 	bl	801ab8c <lwip_htons>
 8021be0:	4603      	mov	r3, r0
 8021be2:	b2db      	uxtb	r3, r3
 8021be4:	f003 0307 	and.w	r3, r3, #7
 8021be8:	2b00      	cmp	r3, #0
 8021bea:	d116      	bne.n	8021c1a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8021bec:	68fb      	ldr	r3, [r7, #12]
 8021bee:	68db      	ldr	r3, [r3, #12]
 8021bf0:	899b      	ldrh	r3, [r3, #12]
 8021bf2:	b29c      	uxth	r4, r3
 8021bf4:	2001      	movs	r0, #1
 8021bf6:	f7f8 ffc9 	bl	801ab8c <lwip_htons>
 8021bfa:	4603      	mov	r3, r0
 8021bfc:	461a      	mov	r2, r3
 8021bfe:	68fb      	ldr	r3, [r7, #12]
 8021c00:	68db      	ldr	r3, [r3, #12]
 8021c02:	4322      	orrs	r2, r4
 8021c04:	b292      	uxth	r2, r2
 8021c06:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8021c08:	687b      	ldr	r3, [r7, #4]
 8021c0a:	8b5b      	ldrh	r3, [r3, #26]
 8021c0c:	f043 0320 	orr.w	r3, r3, #32
 8021c10:	b29a      	uxth	r2, r3
 8021c12:	687b      	ldr	r3, [r7, #4]
 8021c14:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8021c16:	2300      	movs	r3, #0
 8021c18:	e004      	b.n	8021c24 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8021c1a:	2101      	movs	r1, #1
 8021c1c:	6878      	ldr	r0, [r7, #4]
 8021c1e:	f000 f80b 	bl	8021c38 <tcp_enqueue_flags>
 8021c22:	4603      	mov	r3, r0
}
 8021c24:	4618      	mov	r0, r3
 8021c26:	3714      	adds	r7, #20
 8021c28:	46bd      	mov	sp, r7
 8021c2a:	bd90      	pop	{r4, r7, pc}
 8021c2c:	0802ed74 	.word	0x0802ed74
 8021c30:	0802f17c 	.word	0x0802f17c
 8021c34:	0802edc8 	.word	0x0802edc8

08021c38 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8021c38:	b580      	push	{r7, lr}
 8021c3a:	b08a      	sub	sp, #40	; 0x28
 8021c3c:	af02      	add	r7, sp, #8
 8021c3e:	6078      	str	r0, [r7, #4]
 8021c40:	460b      	mov	r3, r1
 8021c42:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8021c44:	2300      	movs	r3, #0
 8021c46:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8021c48:	2300      	movs	r3, #0
 8021c4a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8021c4c:	78fb      	ldrb	r3, [r7, #3]
 8021c4e:	f003 0303 	and.w	r3, r3, #3
 8021c52:	2b00      	cmp	r3, #0
 8021c54:	d106      	bne.n	8021c64 <tcp_enqueue_flags+0x2c>
 8021c56:	4b67      	ldr	r3, [pc, #412]	; (8021df4 <tcp_enqueue_flags+0x1bc>)
 8021c58:	f240 4211 	movw	r2, #1041	; 0x411
 8021c5c:	4966      	ldr	r1, [pc, #408]	; (8021df8 <tcp_enqueue_flags+0x1c0>)
 8021c5e:	4867      	ldr	r0, [pc, #412]	; (8021dfc <tcp_enqueue_flags+0x1c4>)
 8021c60:	f004 fffa 	bl	8026c58 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8021c64:	687b      	ldr	r3, [r7, #4]
 8021c66:	2b00      	cmp	r3, #0
 8021c68:	d106      	bne.n	8021c78 <tcp_enqueue_flags+0x40>
 8021c6a:	4b62      	ldr	r3, [pc, #392]	; (8021df4 <tcp_enqueue_flags+0x1bc>)
 8021c6c:	f240 4213 	movw	r2, #1043	; 0x413
 8021c70:	4963      	ldr	r1, [pc, #396]	; (8021e00 <tcp_enqueue_flags+0x1c8>)
 8021c72:	4862      	ldr	r0, [pc, #392]	; (8021dfc <tcp_enqueue_flags+0x1c4>)
 8021c74:	f004 fff0 	bl	8026c58 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8021c78:	78fb      	ldrb	r3, [r7, #3]
 8021c7a:	f003 0302 	and.w	r3, r3, #2
 8021c7e:	2b00      	cmp	r3, #0
 8021c80:	d001      	beq.n	8021c86 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8021c82:	2301      	movs	r3, #1
 8021c84:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8021c86:	7ffb      	ldrb	r3, [r7, #31]
 8021c88:	009b      	lsls	r3, r3, #2
 8021c8a:	b2db      	uxtb	r3, r3
 8021c8c:	f003 0304 	and.w	r3, r3, #4
 8021c90:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8021c92:	7dfb      	ldrb	r3, [r7, #23]
 8021c94:	b29b      	uxth	r3, r3
 8021c96:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021c9a:	4619      	mov	r1, r3
 8021c9c:	2036      	movs	r0, #54	; 0x36
 8021c9e:	f7fa f8cf 	bl	801be40 <pbuf_alloc>
 8021ca2:	6138      	str	r0, [r7, #16]
 8021ca4:	693b      	ldr	r3, [r7, #16]
 8021ca6:	2b00      	cmp	r3, #0
 8021ca8:	d109      	bne.n	8021cbe <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8021caa:	687b      	ldr	r3, [r7, #4]
 8021cac:	8b5b      	ldrh	r3, [r3, #26]
 8021cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021cb2:	b29a      	uxth	r2, r3
 8021cb4:	687b      	ldr	r3, [r7, #4]
 8021cb6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8021cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021cbc:	e095      	b.n	8021dea <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8021cbe:	693b      	ldr	r3, [r7, #16]
 8021cc0:	895a      	ldrh	r2, [r3, #10]
 8021cc2:	7dfb      	ldrb	r3, [r7, #23]
 8021cc4:	b29b      	uxth	r3, r3
 8021cc6:	429a      	cmp	r2, r3
 8021cc8:	d206      	bcs.n	8021cd8 <tcp_enqueue_flags+0xa0>
 8021cca:	4b4a      	ldr	r3, [pc, #296]	; (8021df4 <tcp_enqueue_flags+0x1bc>)
 8021ccc:	f240 4239 	movw	r2, #1081	; 0x439
 8021cd0:	494c      	ldr	r1, [pc, #304]	; (8021e04 <tcp_enqueue_flags+0x1cc>)
 8021cd2:	484a      	ldr	r0, [pc, #296]	; (8021dfc <tcp_enqueue_flags+0x1c4>)
 8021cd4:	f004 ffc0 	bl	8026c58 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8021cd8:	687b      	ldr	r3, [r7, #4]
 8021cda:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8021cdc:	78fa      	ldrb	r2, [r7, #3]
 8021cde:	7ffb      	ldrb	r3, [r7, #31]
 8021ce0:	9300      	str	r3, [sp, #0]
 8021ce2:	460b      	mov	r3, r1
 8021ce4:	6939      	ldr	r1, [r7, #16]
 8021ce6:	6878      	ldr	r0, [r7, #4]
 8021ce8:	f7ff f918 	bl	8020f1c <tcp_create_segment>
 8021cec:	60f8      	str	r0, [r7, #12]
 8021cee:	68fb      	ldr	r3, [r7, #12]
 8021cf0:	2b00      	cmp	r3, #0
 8021cf2:	d109      	bne.n	8021d08 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8021cf4:	687b      	ldr	r3, [r7, #4]
 8021cf6:	8b5b      	ldrh	r3, [r3, #26]
 8021cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021cfc:	b29a      	uxth	r2, r3
 8021cfe:	687b      	ldr	r3, [r7, #4]
 8021d00:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8021d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021d06:	e070      	b.n	8021dea <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8021d08:	68fb      	ldr	r3, [r7, #12]
 8021d0a:	68db      	ldr	r3, [r3, #12]
 8021d0c:	f003 0303 	and.w	r3, r3, #3
 8021d10:	2b00      	cmp	r3, #0
 8021d12:	d006      	beq.n	8021d22 <tcp_enqueue_flags+0xea>
 8021d14:	4b37      	ldr	r3, [pc, #220]	; (8021df4 <tcp_enqueue_flags+0x1bc>)
 8021d16:	f240 4242 	movw	r2, #1090	; 0x442
 8021d1a:	493b      	ldr	r1, [pc, #236]	; (8021e08 <tcp_enqueue_flags+0x1d0>)
 8021d1c:	4837      	ldr	r0, [pc, #220]	; (8021dfc <tcp_enqueue_flags+0x1c4>)
 8021d1e:	f004 ff9b 	bl	8026c58 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8021d22:	68fb      	ldr	r3, [r7, #12]
 8021d24:	891b      	ldrh	r3, [r3, #8]
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	d006      	beq.n	8021d38 <tcp_enqueue_flags+0x100>
 8021d2a:	4b32      	ldr	r3, [pc, #200]	; (8021df4 <tcp_enqueue_flags+0x1bc>)
 8021d2c:	f240 4243 	movw	r2, #1091	; 0x443
 8021d30:	4936      	ldr	r1, [pc, #216]	; (8021e0c <tcp_enqueue_flags+0x1d4>)
 8021d32:	4832      	ldr	r0, [pc, #200]	; (8021dfc <tcp_enqueue_flags+0x1c4>)
 8021d34:	f004 ff90 	bl	8026c58 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8021d38:	687b      	ldr	r3, [r7, #4]
 8021d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021d3c:	2b00      	cmp	r3, #0
 8021d3e:	d103      	bne.n	8021d48 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8021d40:	687b      	ldr	r3, [r7, #4]
 8021d42:	68fa      	ldr	r2, [r7, #12]
 8021d44:	66da      	str	r2, [r3, #108]	; 0x6c
 8021d46:	e00d      	b.n	8021d64 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8021d48:	687b      	ldr	r3, [r7, #4]
 8021d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021d4c:	61bb      	str	r3, [r7, #24]
 8021d4e:	e002      	b.n	8021d56 <tcp_enqueue_flags+0x11e>
 8021d50:	69bb      	ldr	r3, [r7, #24]
 8021d52:	681b      	ldr	r3, [r3, #0]
 8021d54:	61bb      	str	r3, [r7, #24]
 8021d56:	69bb      	ldr	r3, [r7, #24]
 8021d58:	681b      	ldr	r3, [r3, #0]
 8021d5a:	2b00      	cmp	r3, #0
 8021d5c:	d1f8      	bne.n	8021d50 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8021d5e:	69bb      	ldr	r3, [r7, #24]
 8021d60:	68fa      	ldr	r2, [r7, #12]
 8021d62:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8021d64:	687b      	ldr	r3, [r7, #4]
 8021d66:	2200      	movs	r2, #0
 8021d68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8021d6c:	78fb      	ldrb	r3, [r7, #3]
 8021d6e:	f003 0302 	and.w	r3, r3, #2
 8021d72:	2b00      	cmp	r3, #0
 8021d74:	d104      	bne.n	8021d80 <tcp_enqueue_flags+0x148>
 8021d76:	78fb      	ldrb	r3, [r7, #3]
 8021d78:	f003 0301 	and.w	r3, r3, #1
 8021d7c:	2b00      	cmp	r3, #0
 8021d7e:	d004      	beq.n	8021d8a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8021d80:	687b      	ldr	r3, [r7, #4]
 8021d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8021d84:	1c5a      	adds	r2, r3, #1
 8021d86:	687b      	ldr	r3, [r7, #4]
 8021d88:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8021d8a:	78fb      	ldrb	r3, [r7, #3]
 8021d8c:	f003 0301 	and.w	r3, r3, #1
 8021d90:	2b00      	cmp	r3, #0
 8021d92:	d006      	beq.n	8021da2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8021d94:	687b      	ldr	r3, [r7, #4]
 8021d96:	8b5b      	ldrh	r3, [r3, #26]
 8021d98:	f043 0320 	orr.w	r3, r3, #32
 8021d9c:	b29a      	uxth	r2, r3
 8021d9e:	687b      	ldr	r3, [r7, #4]
 8021da0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8021da2:	68fb      	ldr	r3, [r7, #12]
 8021da4:	685b      	ldr	r3, [r3, #4]
 8021da6:	4618      	mov	r0, r3
 8021da8:	f7fa fbbc 	bl	801c524 <pbuf_clen>
 8021dac:	4603      	mov	r3, r0
 8021dae:	461a      	mov	r2, r3
 8021db0:	687b      	ldr	r3, [r7, #4]
 8021db2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8021db6:	4413      	add	r3, r2
 8021db8:	b29a      	uxth	r2, r3
 8021dba:	687b      	ldr	r3, [r7, #4]
 8021dbc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8021dc0:	687b      	ldr	r3, [r7, #4]
 8021dc2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8021dc6:	2b00      	cmp	r3, #0
 8021dc8:	d00e      	beq.n	8021de8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8021dca:	687b      	ldr	r3, [r7, #4]
 8021dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021dce:	2b00      	cmp	r3, #0
 8021dd0:	d10a      	bne.n	8021de8 <tcp_enqueue_flags+0x1b0>
 8021dd2:	687b      	ldr	r3, [r7, #4]
 8021dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021dd6:	2b00      	cmp	r3, #0
 8021dd8:	d106      	bne.n	8021de8 <tcp_enqueue_flags+0x1b0>
 8021dda:	4b06      	ldr	r3, [pc, #24]	; (8021df4 <tcp_enqueue_flags+0x1bc>)
 8021ddc:	f240 4265 	movw	r2, #1125	; 0x465
 8021de0:	490b      	ldr	r1, [pc, #44]	; (8021e10 <tcp_enqueue_flags+0x1d8>)
 8021de2:	4806      	ldr	r0, [pc, #24]	; (8021dfc <tcp_enqueue_flags+0x1c4>)
 8021de4:	f004 ff38 	bl	8026c58 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8021de8:	2300      	movs	r3, #0
}
 8021dea:	4618      	mov	r0, r3
 8021dec:	3720      	adds	r7, #32
 8021dee:	46bd      	mov	sp, r7
 8021df0:	bd80      	pop	{r7, pc}
 8021df2:	bf00      	nop
 8021df4:	0802ed74 	.word	0x0802ed74
 8021df8:	0802f198 	.word	0x0802f198
 8021dfc:	0802edc8 	.word	0x0802edc8
 8021e00:	0802f1f0 	.word	0x0802f1f0
 8021e04:	0802f210 	.word	0x0802f210
 8021e08:	0802f24c 	.word	0x0802f24c
 8021e0c:	0802f264 	.word	0x0802f264
 8021e10:	0802f290 	.word	0x0802f290

08021e14 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8021e14:	b5b0      	push	{r4, r5, r7, lr}
 8021e16:	b08a      	sub	sp, #40	; 0x28
 8021e18:	af00      	add	r7, sp, #0
 8021e1a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8021e1c:	687b      	ldr	r3, [r7, #4]
 8021e1e:	2b00      	cmp	r3, #0
 8021e20:	d106      	bne.n	8021e30 <tcp_output+0x1c>
 8021e22:	4b9e      	ldr	r3, [pc, #632]	; (802209c <tcp_output+0x288>)
 8021e24:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8021e28:	499d      	ldr	r1, [pc, #628]	; (80220a0 <tcp_output+0x28c>)
 8021e2a:	489e      	ldr	r0, [pc, #632]	; (80220a4 <tcp_output+0x290>)
 8021e2c:	f004 ff14 	bl	8026c58 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8021e30:	687b      	ldr	r3, [r7, #4]
 8021e32:	7d1b      	ldrb	r3, [r3, #20]
 8021e34:	2b01      	cmp	r3, #1
 8021e36:	d106      	bne.n	8021e46 <tcp_output+0x32>
 8021e38:	4b98      	ldr	r3, [pc, #608]	; (802209c <tcp_output+0x288>)
 8021e3a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8021e3e:	499a      	ldr	r1, [pc, #616]	; (80220a8 <tcp_output+0x294>)
 8021e40:	4898      	ldr	r0, [pc, #608]	; (80220a4 <tcp_output+0x290>)
 8021e42:	f004 ff09 	bl	8026c58 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8021e46:	4b99      	ldr	r3, [pc, #612]	; (80220ac <tcp_output+0x298>)
 8021e48:	681b      	ldr	r3, [r3, #0]
 8021e4a:	687a      	ldr	r2, [r7, #4]
 8021e4c:	429a      	cmp	r2, r3
 8021e4e:	d101      	bne.n	8021e54 <tcp_output+0x40>
    return ERR_OK;
 8021e50:	2300      	movs	r3, #0
 8021e52:	e1ce      	b.n	80221f2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8021e54:	687b      	ldr	r3, [r7, #4]
 8021e56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8021e5a:	687b      	ldr	r3, [r7, #4]
 8021e5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8021e60:	4293      	cmp	r3, r2
 8021e62:	bf28      	it	cs
 8021e64:	4613      	movcs	r3, r2
 8021e66:	b29b      	uxth	r3, r3
 8021e68:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8021e6a:	687b      	ldr	r3, [r7, #4]
 8021e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021e6e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8021e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	d10b      	bne.n	8021e8e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8021e76:	687b      	ldr	r3, [r7, #4]
 8021e78:	8b5b      	ldrh	r3, [r3, #26]
 8021e7a:	f003 0302 	and.w	r3, r3, #2
 8021e7e:	2b00      	cmp	r3, #0
 8021e80:	f000 81aa 	beq.w	80221d8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8021e84:	6878      	ldr	r0, [r7, #4]
 8021e86:	f000 fdcb 	bl	8022a20 <tcp_send_empty_ack>
 8021e8a:	4603      	mov	r3, r0
 8021e8c:	e1b1      	b.n	80221f2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8021e8e:	6879      	ldr	r1, [r7, #4]
 8021e90:	687b      	ldr	r3, [r7, #4]
 8021e92:	3304      	adds	r3, #4
 8021e94:	461a      	mov	r2, r3
 8021e96:	6878      	ldr	r0, [r7, #4]
 8021e98:	f7ff f824 	bl	8020ee4 <tcp_route>
 8021e9c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8021e9e:	697b      	ldr	r3, [r7, #20]
 8021ea0:	2b00      	cmp	r3, #0
 8021ea2:	d102      	bne.n	8021eaa <tcp_output+0x96>
    return ERR_RTE;
 8021ea4:	f06f 0303 	mvn.w	r3, #3
 8021ea8:	e1a3      	b.n	80221f2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8021eaa:	687b      	ldr	r3, [r7, #4]
 8021eac:	2b00      	cmp	r3, #0
 8021eae:	d003      	beq.n	8021eb8 <tcp_output+0xa4>
 8021eb0:	687b      	ldr	r3, [r7, #4]
 8021eb2:	681b      	ldr	r3, [r3, #0]
 8021eb4:	2b00      	cmp	r3, #0
 8021eb6:	d111      	bne.n	8021edc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8021eb8:	697b      	ldr	r3, [r7, #20]
 8021eba:	2b00      	cmp	r3, #0
 8021ebc:	d002      	beq.n	8021ec4 <tcp_output+0xb0>
 8021ebe:	697b      	ldr	r3, [r7, #20]
 8021ec0:	3304      	adds	r3, #4
 8021ec2:	e000      	b.n	8021ec6 <tcp_output+0xb2>
 8021ec4:	2300      	movs	r3, #0
 8021ec6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8021ec8:	693b      	ldr	r3, [r7, #16]
 8021eca:	2b00      	cmp	r3, #0
 8021ecc:	d102      	bne.n	8021ed4 <tcp_output+0xc0>
      return ERR_RTE;
 8021ece:	f06f 0303 	mvn.w	r3, #3
 8021ed2:	e18e      	b.n	80221f2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8021ed4:	693b      	ldr	r3, [r7, #16]
 8021ed6:	681a      	ldr	r2, [r3, #0]
 8021ed8:	687b      	ldr	r3, [r7, #4]
 8021eda:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8021edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ede:	68db      	ldr	r3, [r3, #12]
 8021ee0:	685b      	ldr	r3, [r3, #4]
 8021ee2:	4618      	mov	r0, r3
 8021ee4:	f7f8 fe67 	bl	801abb6 <lwip_htonl>
 8021ee8:	4602      	mov	r2, r0
 8021eea:	687b      	ldr	r3, [r7, #4]
 8021eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021eee:	1ad3      	subs	r3, r2, r3
 8021ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021ef2:	8912      	ldrh	r2, [r2, #8]
 8021ef4:	4413      	add	r3, r2
 8021ef6:	69ba      	ldr	r2, [r7, #24]
 8021ef8:	429a      	cmp	r2, r3
 8021efa:	d227      	bcs.n	8021f4c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8021efc:	687b      	ldr	r3, [r7, #4]
 8021efe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8021f02:	461a      	mov	r2, r3
 8021f04:	69bb      	ldr	r3, [r7, #24]
 8021f06:	4293      	cmp	r3, r2
 8021f08:	d114      	bne.n	8021f34 <tcp_output+0x120>
 8021f0a:	687b      	ldr	r3, [r7, #4]
 8021f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021f0e:	2b00      	cmp	r3, #0
 8021f10:	d110      	bne.n	8021f34 <tcp_output+0x120>
 8021f12:	687b      	ldr	r3, [r7, #4]
 8021f14:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8021f18:	2b00      	cmp	r3, #0
 8021f1a:	d10b      	bne.n	8021f34 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8021f1c:	687b      	ldr	r3, [r7, #4]
 8021f1e:	2200      	movs	r2, #0
 8021f20:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8021f24:	687b      	ldr	r3, [r7, #4]
 8021f26:	2201      	movs	r2, #1
 8021f28:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8021f2c:	687b      	ldr	r3, [r7, #4]
 8021f2e:	2200      	movs	r2, #0
 8021f30:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8021f34:	687b      	ldr	r3, [r7, #4]
 8021f36:	8b5b      	ldrh	r3, [r3, #26]
 8021f38:	f003 0302 	and.w	r3, r3, #2
 8021f3c:	2b00      	cmp	r3, #0
 8021f3e:	f000 814d 	beq.w	80221dc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8021f42:	6878      	ldr	r0, [r7, #4]
 8021f44:	f000 fd6c 	bl	8022a20 <tcp_send_empty_ack>
 8021f48:	4603      	mov	r3, r0
 8021f4a:	e152      	b.n	80221f2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8021f4c:	687b      	ldr	r3, [r7, #4]
 8021f4e:	2200      	movs	r2, #0
 8021f50:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8021f54:	687b      	ldr	r3, [r7, #4]
 8021f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021f58:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8021f5a:	6a3b      	ldr	r3, [r7, #32]
 8021f5c:	2b00      	cmp	r3, #0
 8021f5e:	f000 811c 	beq.w	802219a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8021f62:	e002      	b.n	8021f6a <tcp_output+0x156>
 8021f64:	6a3b      	ldr	r3, [r7, #32]
 8021f66:	681b      	ldr	r3, [r3, #0]
 8021f68:	623b      	str	r3, [r7, #32]
 8021f6a:	6a3b      	ldr	r3, [r7, #32]
 8021f6c:	681b      	ldr	r3, [r3, #0]
 8021f6e:	2b00      	cmp	r3, #0
 8021f70:	d1f8      	bne.n	8021f64 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8021f72:	e112      	b.n	802219a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8021f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f76:	68db      	ldr	r3, [r3, #12]
 8021f78:	899b      	ldrh	r3, [r3, #12]
 8021f7a:	b29b      	uxth	r3, r3
 8021f7c:	4618      	mov	r0, r3
 8021f7e:	f7f8 fe05 	bl	801ab8c <lwip_htons>
 8021f82:	4603      	mov	r3, r0
 8021f84:	b2db      	uxtb	r3, r3
 8021f86:	f003 0304 	and.w	r3, r3, #4
 8021f8a:	2b00      	cmp	r3, #0
 8021f8c:	d006      	beq.n	8021f9c <tcp_output+0x188>
 8021f8e:	4b43      	ldr	r3, [pc, #268]	; (802209c <tcp_output+0x288>)
 8021f90:	f240 5236 	movw	r2, #1334	; 0x536
 8021f94:	4946      	ldr	r1, [pc, #280]	; (80220b0 <tcp_output+0x29c>)
 8021f96:	4843      	ldr	r0, [pc, #268]	; (80220a4 <tcp_output+0x290>)
 8021f98:	f004 fe5e 	bl	8026c58 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8021f9c:	687b      	ldr	r3, [r7, #4]
 8021f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021fa0:	2b00      	cmp	r3, #0
 8021fa2:	d01f      	beq.n	8021fe4 <tcp_output+0x1d0>
 8021fa4:	687b      	ldr	r3, [r7, #4]
 8021fa6:	8b5b      	ldrh	r3, [r3, #26]
 8021fa8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8021fac:	2b00      	cmp	r3, #0
 8021fae:	d119      	bne.n	8021fe4 <tcp_output+0x1d0>
 8021fb0:	687b      	ldr	r3, [r7, #4]
 8021fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021fb4:	2b00      	cmp	r3, #0
 8021fb6:	d00b      	beq.n	8021fd0 <tcp_output+0x1bc>
 8021fb8:	687b      	ldr	r3, [r7, #4]
 8021fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021fbc:	681b      	ldr	r3, [r3, #0]
 8021fbe:	2b00      	cmp	r3, #0
 8021fc0:	d110      	bne.n	8021fe4 <tcp_output+0x1d0>
 8021fc2:	687b      	ldr	r3, [r7, #4]
 8021fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021fc6:	891a      	ldrh	r2, [r3, #8]
 8021fc8:	687b      	ldr	r3, [r7, #4]
 8021fca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8021fcc:	429a      	cmp	r2, r3
 8021fce:	d209      	bcs.n	8021fe4 <tcp_output+0x1d0>
 8021fd0:	687b      	ldr	r3, [r7, #4]
 8021fd2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8021fd6:	2b00      	cmp	r3, #0
 8021fd8:	d004      	beq.n	8021fe4 <tcp_output+0x1d0>
 8021fda:	687b      	ldr	r3, [r7, #4]
 8021fdc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8021fe0:	2b08      	cmp	r3, #8
 8021fe2:	d901      	bls.n	8021fe8 <tcp_output+0x1d4>
 8021fe4:	2301      	movs	r3, #1
 8021fe6:	e000      	b.n	8021fea <tcp_output+0x1d6>
 8021fe8:	2300      	movs	r3, #0
 8021fea:	2b00      	cmp	r3, #0
 8021fec:	d106      	bne.n	8021ffc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8021fee:	687b      	ldr	r3, [r7, #4]
 8021ff0:	8b5b      	ldrh	r3, [r3, #26]
 8021ff2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8021ff6:	2b00      	cmp	r3, #0
 8021ff8:	f000 80e4 	beq.w	80221c4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	7d1b      	ldrb	r3, [r3, #20]
 8022000:	2b02      	cmp	r3, #2
 8022002:	d00d      	beq.n	8022020 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8022004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022006:	68db      	ldr	r3, [r3, #12]
 8022008:	899b      	ldrh	r3, [r3, #12]
 802200a:	b29c      	uxth	r4, r3
 802200c:	2010      	movs	r0, #16
 802200e:	f7f8 fdbd 	bl	801ab8c <lwip_htons>
 8022012:	4603      	mov	r3, r0
 8022014:	461a      	mov	r2, r3
 8022016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022018:	68db      	ldr	r3, [r3, #12]
 802201a:	4322      	orrs	r2, r4
 802201c:	b292      	uxth	r2, r2
 802201e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8022020:	697a      	ldr	r2, [r7, #20]
 8022022:	6879      	ldr	r1, [r7, #4]
 8022024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022026:	f000 f909 	bl	802223c <tcp_output_segment>
 802202a:	4603      	mov	r3, r0
 802202c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 802202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8022032:	2b00      	cmp	r3, #0
 8022034:	d009      	beq.n	802204a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8022036:	687b      	ldr	r3, [r7, #4]
 8022038:	8b5b      	ldrh	r3, [r3, #26]
 802203a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802203e:	b29a      	uxth	r2, r3
 8022040:	687b      	ldr	r3, [r7, #4]
 8022042:	835a      	strh	r2, [r3, #26]
      return err;
 8022044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8022048:	e0d3      	b.n	80221f2 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 802204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802204c:	681a      	ldr	r2, [r3, #0]
 802204e:	687b      	ldr	r3, [r7, #4]
 8022050:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8022052:	687b      	ldr	r3, [r7, #4]
 8022054:	7d1b      	ldrb	r3, [r3, #20]
 8022056:	2b02      	cmp	r3, #2
 8022058:	d006      	beq.n	8022068 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802205a:	687b      	ldr	r3, [r7, #4]
 802205c:	8b5b      	ldrh	r3, [r3, #26]
 802205e:	f023 0303 	bic.w	r3, r3, #3
 8022062:	b29a      	uxth	r2, r3
 8022064:	687b      	ldr	r3, [r7, #4]
 8022066:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8022068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802206a:	68db      	ldr	r3, [r3, #12]
 802206c:	685b      	ldr	r3, [r3, #4]
 802206e:	4618      	mov	r0, r3
 8022070:	f7f8 fda1 	bl	801abb6 <lwip_htonl>
 8022074:	4604      	mov	r4, r0
 8022076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022078:	891b      	ldrh	r3, [r3, #8]
 802207a:	461d      	mov	r5, r3
 802207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802207e:	68db      	ldr	r3, [r3, #12]
 8022080:	899b      	ldrh	r3, [r3, #12]
 8022082:	b29b      	uxth	r3, r3
 8022084:	4618      	mov	r0, r3
 8022086:	f7f8 fd81 	bl	801ab8c <lwip_htons>
 802208a:	4603      	mov	r3, r0
 802208c:	b2db      	uxtb	r3, r3
 802208e:	f003 0303 	and.w	r3, r3, #3
 8022092:	2b00      	cmp	r3, #0
 8022094:	d00e      	beq.n	80220b4 <tcp_output+0x2a0>
 8022096:	2301      	movs	r3, #1
 8022098:	e00d      	b.n	80220b6 <tcp_output+0x2a2>
 802209a:	bf00      	nop
 802209c:	0802ed74 	.word	0x0802ed74
 80220a0:	0802f2b8 	.word	0x0802f2b8
 80220a4:	0802edc8 	.word	0x0802edc8
 80220a8:	0802f2d0 	.word	0x0802f2d0
 80220ac:	2001d530 	.word	0x2001d530
 80220b0:	0802f2f8 	.word	0x0802f2f8
 80220b4:	2300      	movs	r3, #0
 80220b6:	442b      	add	r3, r5
 80220b8:	4423      	add	r3, r4
 80220ba:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80220bc:	687b      	ldr	r3, [r7, #4]
 80220be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80220c0:	68bb      	ldr	r3, [r7, #8]
 80220c2:	1ad3      	subs	r3, r2, r3
 80220c4:	2b00      	cmp	r3, #0
 80220c6:	da02      	bge.n	80220ce <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80220c8:	687b      	ldr	r3, [r7, #4]
 80220ca:	68ba      	ldr	r2, [r7, #8]
 80220cc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80220ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220d0:	891b      	ldrh	r3, [r3, #8]
 80220d2:	461c      	mov	r4, r3
 80220d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220d6:	68db      	ldr	r3, [r3, #12]
 80220d8:	899b      	ldrh	r3, [r3, #12]
 80220da:	b29b      	uxth	r3, r3
 80220dc:	4618      	mov	r0, r3
 80220de:	f7f8 fd55 	bl	801ab8c <lwip_htons>
 80220e2:	4603      	mov	r3, r0
 80220e4:	b2db      	uxtb	r3, r3
 80220e6:	f003 0303 	and.w	r3, r3, #3
 80220ea:	2b00      	cmp	r3, #0
 80220ec:	d001      	beq.n	80220f2 <tcp_output+0x2de>
 80220ee:	2301      	movs	r3, #1
 80220f0:	e000      	b.n	80220f4 <tcp_output+0x2e0>
 80220f2:	2300      	movs	r3, #0
 80220f4:	4423      	add	r3, r4
 80220f6:	2b00      	cmp	r3, #0
 80220f8:	d049      	beq.n	802218e <tcp_output+0x37a>
      seg->next = NULL;
 80220fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220fc:	2200      	movs	r2, #0
 80220fe:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8022100:	687b      	ldr	r3, [r7, #4]
 8022102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022104:	2b00      	cmp	r3, #0
 8022106:	d105      	bne.n	8022114 <tcp_output+0x300>
        pcb->unacked = seg;
 8022108:	687b      	ldr	r3, [r7, #4]
 802210a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802210c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 802210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022110:	623b      	str	r3, [r7, #32]
 8022112:	e03f      	b.n	8022194 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8022114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022116:	68db      	ldr	r3, [r3, #12]
 8022118:	685b      	ldr	r3, [r3, #4]
 802211a:	4618      	mov	r0, r3
 802211c:	f7f8 fd4b 	bl	801abb6 <lwip_htonl>
 8022120:	4604      	mov	r4, r0
 8022122:	6a3b      	ldr	r3, [r7, #32]
 8022124:	68db      	ldr	r3, [r3, #12]
 8022126:	685b      	ldr	r3, [r3, #4]
 8022128:	4618      	mov	r0, r3
 802212a:	f7f8 fd44 	bl	801abb6 <lwip_htonl>
 802212e:	4603      	mov	r3, r0
 8022130:	1ae3      	subs	r3, r4, r3
 8022132:	2b00      	cmp	r3, #0
 8022134:	da24      	bge.n	8022180 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8022136:	687b      	ldr	r3, [r7, #4]
 8022138:	3370      	adds	r3, #112	; 0x70
 802213a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 802213c:	e002      	b.n	8022144 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 802213e:	69fb      	ldr	r3, [r7, #28]
 8022140:	681b      	ldr	r3, [r3, #0]
 8022142:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8022144:	69fb      	ldr	r3, [r7, #28]
 8022146:	681b      	ldr	r3, [r3, #0]
 8022148:	2b00      	cmp	r3, #0
 802214a:	d011      	beq.n	8022170 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 802214c:	69fb      	ldr	r3, [r7, #28]
 802214e:	681b      	ldr	r3, [r3, #0]
 8022150:	68db      	ldr	r3, [r3, #12]
 8022152:	685b      	ldr	r3, [r3, #4]
 8022154:	4618      	mov	r0, r3
 8022156:	f7f8 fd2e 	bl	801abb6 <lwip_htonl>
 802215a:	4604      	mov	r4, r0
 802215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802215e:	68db      	ldr	r3, [r3, #12]
 8022160:	685b      	ldr	r3, [r3, #4]
 8022162:	4618      	mov	r0, r3
 8022164:	f7f8 fd27 	bl	801abb6 <lwip_htonl>
 8022168:	4603      	mov	r3, r0
 802216a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 802216c:	2b00      	cmp	r3, #0
 802216e:	dbe6      	blt.n	802213e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8022170:	69fb      	ldr	r3, [r7, #28]
 8022172:	681a      	ldr	r2, [r3, #0]
 8022174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022176:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8022178:	69fb      	ldr	r3, [r7, #28]
 802217a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802217c:	601a      	str	r2, [r3, #0]
 802217e:	e009      	b.n	8022194 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8022180:	6a3b      	ldr	r3, [r7, #32]
 8022182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022184:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8022186:	6a3b      	ldr	r3, [r7, #32]
 8022188:	681b      	ldr	r3, [r3, #0]
 802218a:	623b      	str	r3, [r7, #32]
 802218c:	e002      	b.n	8022194 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 802218e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022190:	f7fb feff 	bl	801df92 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8022194:	687b      	ldr	r3, [r7, #4]
 8022196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022198:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 802219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802219c:	2b00      	cmp	r3, #0
 802219e:	d012      	beq.n	80221c6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80221a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221a2:	68db      	ldr	r3, [r3, #12]
 80221a4:	685b      	ldr	r3, [r3, #4]
 80221a6:	4618      	mov	r0, r3
 80221a8:	f7f8 fd05 	bl	801abb6 <lwip_htonl>
 80221ac:	4602      	mov	r2, r0
 80221ae:	687b      	ldr	r3, [r7, #4]
 80221b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80221b2:	1ad3      	subs	r3, r2, r3
 80221b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80221b6:	8912      	ldrh	r2, [r2, #8]
 80221b8:	4413      	add	r3, r2
  while (seg != NULL &&
 80221ba:	69ba      	ldr	r2, [r7, #24]
 80221bc:	429a      	cmp	r2, r3
 80221be:	f4bf aed9 	bcs.w	8021f74 <tcp_output+0x160>
 80221c2:	e000      	b.n	80221c6 <tcp_output+0x3b2>
      break;
 80221c4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80221c6:	687b      	ldr	r3, [r7, #4]
 80221c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80221ca:	2b00      	cmp	r3, #0
 80221cc:	d108      	bne.n	80221e0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80221ce:	687b      	ldr	r3, [r7, #4]
 80221d0:	2200      	movs	r2, #0
 80221d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80221d6:	e004      	b.n	80221e2 <tcp_output+0x3ce>
    goto output_done;
 80221d8:	bf00      	nop
 80221da:	e002      	b.n	80221e2 <tcp_output+0x3ce>
    goto output_done;
 80221dc:	bf00      	nop
 80221de:	e000      	b.n	80221e2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80221e0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80221e2:	687b      	ldr	r3, [r7, #4]
 80221e4:	8b5b      	ldrh	r3, [r3, #26]
 80221e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80221ea:	b29a      	uxth	r2, r3
 80221ec:	687b      	ldr	r3, [r7, #4]
 80221ee:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80221f0:	2300      	movs	r3, #0
}
 80221f2:	4618      	mov	r0, r3
 80221f4:	3728      	adds	r7, #40	; 0x28
 80221f6:	46bd      	mov	sp, r7
 80221f8:	bdb0      	pop	{r4, r5, r7, pc}
 80221fa:	bf00      	nop

080221fc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80221fc:	b580      	push	{r7, lr}
 80221fe:	b082      	sub	sp, #8
 8022200:	af00      	add	r7, sp, #0
 8022202:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8022204:	687b      	ldr	r3, [r7, #4]
 8022206:	2b00      	cmp	r3, #0
 8022208:	d106      	bne.n	8022218 <tcp_output_segment_busy+0x1c>
 802220a:	4b09      	ldr	r3, [pc, #36]	; (8022230 <tcp_output_segment_busy+0x34>)
 802220c:	f240 529a 	movw	r2, #1434	; 0x59a
 8022210:	4908      	ldr	r1, [pc, #32]	; (8022234 <tcp_output_segment_busy+0x38>)
 8022212:	4809      	ldr	r0, [pc, #36]	; (8022238 <tcp_output_segment_busy+0x3c>)
 8022214:	f004 fd20 	bl	8026c58 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8022218:	687b      	ldr	r3, [r7, #4]
 802221a:	685b      	ldr	r3, [r3, #4]
 802221c:	7b9b      	ldrb	r3, [r3, #14]
 802221e:	2b01      	cmp	r3, #1
 8022220:	d001      	beq.n	8022226 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8022222:	2301      	movs	r3, #1
 8022224:	e000      	b.n	8022228 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8022226:	2300      	movs	r3, #0
}
 8022228:	4618      	mov	r0, r3
 802222a:	3708      	adds	r7, #8
 802222c:	46bd      	mov	sp, r7
 802222e:	bd80      	pop	{r7, pc}
 8022230:	0802ed74 	.word	0x0802ed74
 8022234:	0802f310 	.word	0x0802f310
 8022238:	0802edc8 	.word	0x0802edc8

0802223c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 802223c:	b5b0      	push	{r4, r5, r7, lr}
 802223e:	b08c      	sub	sp, #48	; 0x30
 8022240:	af04      	add	r7, sp, #16
 8022242:	60f8      	str	r0, [r7, #12]
 8022244:	60b9      	str	r1, [r7, #8]
 8022246:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8022248:	68fb      	ldr	r3, [r7, #12]
 802224a:	2b00      	cmp	r3, #0
 802224c:	d106      	bne.n	802225c <tcp_output_segment+0x20>
 802224e:	4b63      	ldr	r3, [pc, #396]	; (80223dc <tcp_output_segment+0x1a0>)
 8022250:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8022254:	4962      	ldr	r1, [pc, #392]	; (80223e0 <tcp_output_segment+0x1a4>)
 8022256:	4863      	ldr	r0, [pc, #396]	; (80223e4 <tcp_output_segment+0x1a8>)
 8022258:	f004 fcfe 	bl	8026c58 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 802225c:	68bb      	ldr	r3, [r7, #8]
 802225e:	2b00      	cmp	r3, #0
 8022260:	d106      	bne.n	8022270 <tcp_output_segment+0x34>
 8022262:	4b5e      	ldr	r3, [pc, #376]	; (80223dc <tcp_output_segment+0x1a0>)
 8022264:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8022268:	495f      	ldr	r1, [pc, #380]	; (80223e8 <tcp_output_segment+0x1ac>)
 802226a:	485e      	ldr	r0, [pc, #376]	; (80223e4 <tcp_output_segment+0x1a8>)
 802226c:	f004 fcf4 	bl	8026c58 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8022270:	687b      	ldr	r3, [r7, #4]
 8022272:	2b00      	cmp	r3, #0
 8022274:	d106      	bne.n	8022284 <tcp_output_segment+0x48>
 8022276:	4b59      	ldr	r3, [pc, #356]	; (80223dc <tcp_output_segment+0x1a0>)
 8022278:	f240 52ba 	movw	r2, #1466	; 0x5ba
 802227c:	495b      	ldr	r1, [pc, #364]	; (80223ec <tcp_output_segment+0x1b0>)
 802227e:	4859      	ldr	r0, [pc, #356]	; (80223e4 <tcp_output_segment+0x1a8>)
 8022280:	f004 fcea 	bl	8026c58 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8022284:	68f8      	ldr	r0, [r7, #12]
 8022286:	f7ff ffb9 	bl	80221fc <tcp_output_segment_busy>
 802228a:	4603      	mov	r3, r0
 802228c:	2b00      	cmp	r3, #0
 802228e:	d001      	beq.n	8022294 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8022290:	2300      	movs	r3, #0
 8022292:	e09f      	b.n	80223d4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8022294:	68bb      	ldr	r3, [r7, #8]
 8022296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022298:	68fb      	ldr	r3, [r7, #12]
 802229a:	68dc      	ldr	r4, [r3, #12]
 802229c:	4610      	mov	r0, r2
 802229e:	f7f8 fc8a 	bl	801abb6 <lwip_htonl>
 80222a2:	4603      	mov	r3, r0
 80222a4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80222a6:	68bb      	ldr	r3, [r7, #8]
 80222a8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80222aa:	68fb      	ldr	r3, [r7, #12]
 80222ac:	68dc      	ldr	r4, [r3, #12]
 80222ae:	4610      	mov	r0, r2
 80222b0:	f7f8 fc6c 	bl	801ab8c <lwip_htons>
 80222b4:	4603      	mov	r3, r0
 80222b6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80222b8:	68bb      	ldr	r3, [r7, #8]
 80222ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80222bc:	68ba      	ldr	r2, [r7, #8]
 80222be:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80222c0:	441a      	add	r2, r3
 80222c2:	68bb      	ldr	r3, [r7, #8]
 80222c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80222c6:	68fb      	ldr	r3, [r7, #12]
 80222c8:	68db      	ldr	r3, [r3, #12]
 80222ca:	3314      	adds	r3, #20
 80222cc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80222ce:	68fb      	ldr	r3, [r7, #12]
 80222d0:	7a9b      	ldrb	r3, [r3, #10]
 80222d2:	f003 0301 	and.w	r3, r3, #1
 80222d6:	2b00      	cmp	r3, #0
 80222d8:	d015      	beq.n	8022306 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80222da:	68bb      	ldr	r3, [r7, #8]
 80222dc:	3304      	adds	r3, #4
 80222de:	461a      	mov	r2, r3
 80222e0:	6879      	ldr	r1, [r7, #4]
 80222e2:	f44f 7006 	mov.w	r0, #536	; 0x218
 80222e6:	f7fc fa37 	bl	801e758 <tcp_eff_send_mss_netif>
 80222ea:	4603      	mov	r3, r0
 80222ec:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80222ee:	8b7b      	ldrh	r3, [r7, #26]
 80222f0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80222f4:	4618      	mov	r0, r3
 80222f6:	f7f8 fc5e 	bl	801abb6 <lwip_htonl>
 80222fa:	4602      	mov	r2, r0
 80222fc:	69fb      	ldr	r3, [r7, #28]
 80222fe:	601a      	str	r2, [r3, #0]
    opts += 1;
 8022300:	69fb      	ldr	r3, [r7, #28]
 8022302:	3304      	adds	r3, #4
 8022304:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8022306:	68bb      	ldr	r3, [r7, #8]
 8022308:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 802230c:	2b00      	cmp	r3, #0
 802230e:	da02      	bge.n	8022316 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8022310:	68bb      	ldr	r3, [r7, #8]
 8022312:	2200      	movs	r2, #0
 8022314:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8022316:	68bb      	ldr	r3, [r7, #8]
 8022318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802231a:	2b00      	cmp	r3, #0
 802231c:	d10c      	bne.n	8022338 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 802231e:	4b34      	ldr	r3, [pc, #208]	; (80223f0 <tcp_output_segment+0x1b4>)
 8022320:	681a      	ldr	r2, [r3, #0]
 8022322:	68bb      	ldr	r3, [r7, #8]
 8022324:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8022326:	68fb      	ldr	r3, [r7, #12]
 8022328:	68db      	ldr	r3, [r3, #12]
 802232a:	685b      	ldr	r3, [r3, #4]
 802232c:	4618      	mov	r0, r3
 802232e:	f7f8 fc42 	bl	801abb6 <lwip_htonl>
 8022332:	4602      	mov	r2, r0
 8022334:	68bb      	ldr	r3, [r7, #8]
 8022336:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8022338:	68fb      	ldr	r3, [r7, #12]
 802233a:	68da      	ldr	r2, [r3, #12]
 802233c:	68fb      	ldr	r3, [r7, #12]
 802233e:	685b      	ldr	r3, [r3, #4]
 8022340:	685b      	ldr	r3, [r3, #4]
 8022342:	1ad3      	subs	r3, r2, r3
 8022344:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8022346:	68fb      	ldr	r3, [r7, #12]
 8022348:	685b      	ldr	r3, [r3, #4]
 802234a:	8959      	ldrh	r1, [r3, #10]
 802234c:	68fb      	ldr	r3, [r7, #12]
 802234e:	685b      	ldr	r3, [r3, #4]
 8022350:	8b3a      	ldrh	r2, [r7, #24]
 8022352:	1a8a      	subs	r2, r1, r2
 8022354:	b292      	uxth	r2, r2
 8022356:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8022358:	68fb      	ldr	r3, [r7, #12]
 802235a:	685b      	ldr	r3, [r3, #4]
 802235c:	8919      	ldrh	r1, [r3, #8]
 802235e:	68fb      	ldr	r3, [r7, #12]
 8022360:	685b      	ldr	r3, [r3, #4]
 8022362:	8b3a      	ldrh	r2, [r7, #24]
 8022364:	1a8a      	subs	r2, r1, r2
 8022366:	b292      	uxth	r2, r2
 8022368:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 802236a:	68fb      	ldr	r3, [r7, #12]
 802236c:	685b      	ldr	r3, [r3, #4]
 802236e:	68fa      	ldr	r2, [r7, #12]
 8022370:	68d2      	ldr	r2, [r2, #12]
 8022372:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8022374:	68fb      	ldr	r3, [r7, #12]
 8022376:	68db      	ldr	r3, [r3, #12]
 8022378:	2200      	movs	r2, #0
 802237a:	741a      	strb	r2, [r3, #16]
 802237c:	2200      	movs	r2, #0
 802237e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8022380:	68fb      	ldr	r3, [r7, #12]
 8022382:	68db      	ldr	r3, [r3, #12]
 8022384:	f103 0214 	add.w	r2, r3, #20
 8022388:	68fb      	ldr	r3, [r7, #12]
 802238a:	7a9b      	ldrb	r3, [r3, #10]
 802238c:	009b      	lsls	r3, r3, #2
 802238e:	f003 0304 	and.w	r3, r3, #4
 8022392:	4413      	add	r3, r2
 8022394:	69fa      	ldr	r2, [r7, #28]
 8022396:	429a      	cmp	r2, r3
 8022398:	d006      	beq.n	80223a8 <tcp_output_segment+0x16c>
 802239a:	4b10      	ldr	r3, [pc, #64]	; (80223dc <tcp_output_segment+0x1a0>)
 802239c:	f240 621c 	movw	r2, #1564	; 0x61c
 80223a0:	4914      	ldr	r1, [pc, #80]	; (80223f4 <tcp_output_segment+0x1b8>)
 80223a2:	4810      	ldr	r0, [pc, #64]	; (80223e4 <tcp_output_segment+0x1a8>)
 80223a4:	f004 fc58 	bl	8026c58 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80223a8:	68fb      	ldr	r3, [r7, #12]
 80223aa:	6858      	ldr	r0, [r3, #4]
 80223ac:	68b9      	ldr	r1, [r7, #8]
 80223ae:	68bb      	ldr	r3, [r7, #8]
 80223b0:	1d1c      	adds	r4, r3, #4
 80223b2:	68bb      	ldr	r3, [r7, #8]
 80223b4:	7add      	ldrb	r5, [r3, #11]
 80223b6:	68bb      	ldr	r3, [r7, #8]
 80223b8:	7a9b      	ldrb	r3, [r3, #10]
 80223ba:	687a      	ldr	r2, [r7, #4]
 80223bc:	9202      	str	r2, [sp, #8]
 80223be:	2206      	movs	r2, #6
 80223c0:	9201      	str	r2, [sp, #4]
 80223c2:	9300      	str	r3, [sp, #0]
 80223c4:	462b      	mov	r3, r5
 80223c6:	4622      	mov	r2, r4
 80223c8:	f002 fd5a 	bl	8024e80 <ip4_output_if>
 80223cc:	4603      	mov	r3, r0
 80223ce:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80223d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80223d4:	4618      	mov	r0, r3
 80223d6:	3720      	adds	r7, #32
 80223d8:	46bd      	mov	sp, r7
 80223da:	bdb0      	pop	{r4, r5, r7, pc}
 80223dc:	0802ed74 	.word	0x0802ed74
 80223e0:	0802f338 	.word	0x0802f338
 80223e4:	0802edc8 	.word	0x0802edc8
 80223e8:	0802f358 	.word	0x0802f358
 80223ec:	0802f378 	.word	0x0802f378
 80223f0:	2001d520 	.word	0x2001d520
 80223f4:	0802f39c 	.word	0x0802f39c

080223f8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80223f8:	b5b0      	push	{r4, r5, r7, lr}
 80223fa:	b084      	sub	sp, #16
 80223fc:	af00      	add	r7, sp, #0
 80223fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8022400:	687b      	ldr	r3, [r7, #4]
 8022402:	2b00      	cmp	r3, #0
 8022404:	d106      	bne.n	8022414 <tcp_rexmit_rto_prepare+0x1c>
 8022406:	4b31      	ldr	r3, [pc, #196]	; (80224cc <tcp_rexmit_rto_prepare+0xd4>)
 8022408:	f240 6263 	movw	r2, #1635	; 0x663
 802240c:	4930      	ldr	r1, [pc, #192]	; (80224d0 <tcp_rexmit_rto_prepare+0xd8>)
 802240e:	4831      	ldr	r0, [pc, #196]	; (80224d4 <tcp_rexmit_rto_prepare+0xdc>)
 8022410:	f004 fc22 	bl	8026c58 <iprintf>

  if (pcb->unacked == NULL) {
 8022414:	687b      	ldr	r3, [r7, #4]
 8022416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022418:	2b00      	cmp	r3, #0
 802241a:	d102      	bne.n	8022422 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 802241c:	f06f 0305 	mvn.w	r3, #5
 8022420:	e050      	b.n	80224c4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8022422:	687b      	ldr	r3, [r7, #4]
 8022424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022426:	60fb      	str	r3, [r7, #12]
 8022428:	e00b      	b.n	8022442 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 802242a:	68f8      	ldr	r0, [r7, #12]
 802242c:	f7ff fee6 	bl	80221fc <tcp_output_segment_busy>
 8022430:	4603      	mov	r3, r0
 8022432:	2b00      	cmp	r3, #0
 8022434:	d002      	beq.n	802243c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8022436:	f06f 0305 	mvn.w	r3, #5
 802243a:	e043      	b.n	80224c4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 802243c:	68fb      	ldr	r3, [r7, #12]
 802243e:	681b      	ldr	r3, [r3, #0]
 8022440:	60fb      	str	r3, [r7, #12]
 8022442:	68fb      	ldr	r3, [r7, #12]
 8022444:	681b      	ldr	r3, [r3, #0]
 8022446:	2b00      	cmp	r3, #0
 8022448:	d1ef      	bne.n	802242a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 802244a:	68f8      	ldr	r0, [r7, #12]
 802244c:	f7ff fed6 	bl	80221fc <tcp_output_segment_busy>
 8022450:	4603      	mov	r3, r0
 8022452:	2b00      	cmp	r3, #0
 8022454:	d002      	beq.n	802245c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8022456:	f06f 0305 	mvn.w	r3, #5
 802245a:	e033      	b.n	80224c4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 802245c:	687b      	ldr	r3, [r7, #4]
 802245e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8022460:	68fb      	ldr	r3, [r7, #12]
 8022462:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8022464:	687b      	ldr	r3, [r7, #4]
 8022466:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8022468:	687b      	ldr	r3, [r7, #4]
 802246a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 802246c:	687b      	ldr	r3, [r7, #4]
 802246e:	2200      	movs	r2, #0
 8022470:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8022472:	687b      	ldr	r3, [r7, #4]
 8022474:	8b5b      	ldrh	r3, [r3, #26]
 8022476:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802247a:	b29a      	uxth	r2, r3
 802247c:	687b      	ldr	r3, [r7, #4]
 802247e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8022480:	68fb      	ldr	r3, [r7, #12]
 8022482:	68db      	ldr	r3, [r3, #12]
 8022484:	685b      	ldr	r3, [r3, #4]
 8022486:	4618      	mov	r0, r3
 8022488:	f7f8 fb95 	bl	801abb6 <lwip_htonl>
 802248c:	4604      	mov	r4, r0
 802248e:	68fb      	ldr	r3, [r7, #12]
 8022490:	891b      	ldrh	r3, [r3, #8]
 8022492:	461d      	mov	r5, r3
 8022494:	68fb      	ldr	r3, [r7, #12]
 8022496:	68db      	ldr	r3, [r3, #12]
 8022498:	899b      	ldrh	r3, [r3, #12]
 802249a:	b29b      	uxth	r3, r3
 802249c:	4618      	mov	r0, r3
 802249e:	f7f8 fb75 	bl	801ab8c <lwip_htons>
 80224a2:	4603      	mov	r3, r0
 80224a4:	b2db      	uxtb	r3, r3
 80224a6:	f003 0303 	and.w	r3, r3, #3
 80224aa:	2b00      	cmp	r3, #0
 80224ac:	d001      	beq.n	80224b2 <tcp_rexmit_rto_prepare+0xba>
 80224ae:	2301      	movs	r3, #1
 80224b0:	e000      	b.n	80224b4 <tcp_rexmit_rto_prepare+0xbc>
 80224b2:	2300      	movs	r3, #0
 80224b4:	442b      	add	r3, r5
 80224b6:	18e2      	adds	r2, r4, r3
 80224b8:	687b      	ldr	r3, [r7, #4]
 80224ba:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80224bc:	687b      	ldr	r3, [r7, #4]
 80224be:	2200      	movs	r2, #0
 80224c0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80224c2:	2300      	movs	r3, #0
}
 80224c4:	4618      	mov	r0, r3
 80224c6:	3710      	adds	r7, #16
 80224c8:	46bd      	mov	sp, r7
 80224ca:	bdb0      	pop	{r4, r5, r7, pc}
 80224cc:	0802ed74 	.word	0x0802ed74
 80224d0:	0802f3b0 	.word	0x0802f3b0
 80224d4:	0802edc8 	.word	0x0802edc8

080224d8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80224d8:	b580      	push	{r7, lr}
 80224da:	b082      	sub	sp, #8
 80224dc:	af00      	add	r7, sp, #0
 80224de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80224e0:	687b      	ldr	r3, [r7, #4]
 80224e2:	2b00      	cmp	r3, #0
 80224e4:	d106      	bne.n	80224f4 <tcp_rexmit_rto_commit+0x1c>
 80224e6:	4b0d      	ldr	r3, [pc, #52]	; (802251c <tcp_rexmit_rto_commit+0x44>)
 80224e8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80224ec:	490c      	ldr	r1, [pc, #48]	; (8022520 <tcp_rexmit_rto_commit+0x48>)
 80224ee:	480d      	ldr	r0, [pc, #52]	; (8022524 <tcp_rexmit_rto_commit+0x4c>)
 80224f0:	f004 fbb2 	bl	8026c58 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80224f4:	687b      	ldr	r3, [r7, #4]
 80224f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80224fa:	2bff      	cmp	r3, #255	; 0xff
 80224fc:	d007      	beq.n	802250e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80224fe:	687b      	ldr	r3, [r7, #4]
 8022500:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8022504:	3301      	adds	r3, #1
 8022506:	b2da      	uxtb	r2, r3
 8022508:	687b      	ldr	r3, [r7, #4]
 802250a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 802250e:	6878      	ldr	r0, [r7, #4]
 8022510:	f7ff fc80 	bl	8021e14 <tcp_output>
}
 8022514:	bf00      	nop
 8022516:	3708      	adds	r7, #8
 8022518:	46bd      	mov	sp, r7
 802251a:	bd80      	pop	{r7, pc}
 802251c:	0802ed74 	.word	0x0802ed74
 8022520:	0802f3d4 	.word	0x0802f3d4
 8022524:	0802edc8 	.word	0x0802edc8

08022528 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8022528:	b580      	push	{r7, lr}
 802252a:	b082      	sub	sp, #8
 802252c:	af00      	add	r7, sp, #0
 802252e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8022530:	687b      	ldr	r3, [r7, #4]
 8022532:	2b00      	cmp	r3, #0
 8022534:	d106      	bne.n	8022544 <tcp_rexmit_rto+0x1c>
 8022536:	4b0a      	ldr	r3, [pc, #40]	; (8022560 <tcp_rexmit_rto+0x38>)
 8022538:	f240 62ad 	movw	r2, #1709	; 0x6ad
 802253c:	4909      	ldr	r1, [pc, #36]	; (8022564 <tcp_rexmit_rto+0x3c>)
 802253e:	480a      	ldr	r0, [pc, #40]	; (8022568 <tcp_rexmit_rto+0x40>)
 8022540:	f004 fb8a 	bl	8026c58 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8022544:	6878      	ldr	r0, [r7, #4]
 8022546:	f7ff ff57 	bl	80223f8 <tcp_rexmit_rto_prepare>
 802254a:	4603      	mov	r3, r0
 802254c:	2b00      	cmp	r3, #0
 802254e:	d102      	bne.n	8022556 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8022550:	6878      	ldr	r0, [r7, #4]
 8022552:	f7ff ffc1 	bl	80224d8 <tcp_rexmit_rto_commit>
  }
}
 8022556:	bf00      	nop
 8022558:	3708      	adds	r7, #8
 802255a:	46bd      	mov	sp, r7
 802255c:	bd80      	pop	{r7, pc}
 802255e:	bf00      	nop
 8022560:	0802ed74 	.word	0x0802ed74
 8022564:	0802f3f8 	.word	0x0802f3f8
 8022568:	0802edc8 	.word	0x0802edc8

0802256c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 802256c:	b590      	push	{r4, r7, lr}
 802256e:	b085      	sub	sp, #20
 8022570:	af00      	add	r7, sp, #0
 8022572:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8022574:	687b      	ldr	r3, [r7, #4]
 8022576:	2b00      	cmp	r3, #0
 8022578:	d106      	bne.n	8022588 <tcp_rexmit+0x1c>
 802257a:	4b2f      	ldr	r3, [pc, #188]	; (8022638 <tcp_rexmit+0xcc>)
 802257c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8022580:	492e      	ldr	r1, [pc, #184]	; (802263c <tcp_rexmit+0xd0>)
 8022582:	482f      	ldr	r0, [pc, #188]	; (8022640 <tcp_rexmit+0xd4>)
 8022584:	f004 fb68 	bl	8026c58 <iprintf>

  if (pcb->unacked == NULL) {
 8022588:	687b      	ldr	r3, [r7, #4]
 802258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802258c:	2b00      	cmp	r3, #0
 802258e:	d102      	bne.n	8022596 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8022590:	f06f 0305 	mvn.w	r3, #5
 8022594:	e04c      	b.n	8022630 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8022596:	687b      	ldr	r3, [r7, #4]
 8022598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802259a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 802259c:	68b8      	ldr	r0, [r7, #8]
 802259e:	f7ff fe2d 	bl	80221fc <tcp_output_segment_busy>
 80225a2:	4603      	mov	r3, r0
 80225a4:	2b00      	cmp	r3, #0
 80225a6:	d002      	beq.n	80225ae <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80225a8:	f06f 0305 	mvn.w	r3, #5
 80225ac:	e040      	b.n	8022630 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80225ae:	68bb      	ldr	r3, [r7, #8]
 80225b0:	681a      	ldr	r2, [r3, #0]
 80225b2:	687b      	ldr	r3, [r7, #4]
 80225b4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80225b6:	687b      	ldr	r3, [r7, #4]
 80225b8:	336c      	adds	r3, #108	; 0x6c
 80225ba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80225bc:	e002      	b.n	80225c4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80225be:	68fb      	ldr	r3, [r7, #12]
 80225c0:	681b      	ldr	r3, [r3, #0]
 80225c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80225c4:	68fb      	ldr	r3, [r7, #12]
 80225c6:	681b      	ldr	r3, [r3, #0]
 80225c8:	2b00      	cmp	r3, #0
 80225ca:	d011      	beq.n	80225f0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80225cc:	68fb      	ldr	r3, [r7, #12]
 80225ce:	681b      	ldr	r3, [r3, #0]
 80225d0:	68db      	ldr	r3, [r3, #12]
 80225d2:	685b      	ldr	r3, [r3, #4]
 80225d4:	4618      	mov	r0, r3
 80225d6:	f7f8 faee 	bl	801abb6 <lwip_htonl>
 80225da:	4604      	mov	r4, r0
 80225dc:	68bb      	ldr	r3, [r7, #8]
 80225de:	68db      	ldr	r3, [r3, #12]
 80225e0:	685b      	ldr	r3, [r3, #4]
 80225e2:	4618      	mov	r0, r3
 80225e4:	f7f8 fae7 	bl	801abb6 <lwip_htonl>
 80225e8:	4603      	mov	r3, r0
 80225ea:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80225ec:	2b00      	cmp	r3, #0
 80225ee:	dbe6      	blt.n	80225be <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80225f0:	68fb      	ldr	r3, [r7, #12]
 80225f2:	681a      	ldr	r2, [r3, #0]
 80225f4:	68bb      	ldr	r3, [r7, #8]
 80225f6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80225f8:	68fb      	ldr	r3, [r7, #12]
 80225fa:	68ba      	ldr	r2, [r7, #8]
 80225fc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80225fe:	68bb      	ldr	r3, [r7, #8]
 8022600:	681b      	ldr	r3, [r3, #0]
 8022602:	2b00      	cmp	r3, #0
 8022604:	d103      	bne.n	802260e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8022606:	687b      	ldr	r3, [r7, #4]
 8022608:	2200      	movs	r2, #0
 802260a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 802260e:	687b      	ldr	r3, [r7, #4]
 8022610:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8022614:	2bff      	cmp	r3, #255	; 0xff
 8022616:	d007      	beq.n	8022628 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8022618:	687b      	ldr	r3, [r7, #4]
 802261a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802261e:	3301      	adds	r3, #1
 8022620:	b2da      	uxtb	r2, r3
 8022622:	687b      	ldr	r3, [r7, #4]
 8022624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8022628:	687b      	ldr	r3, [r7, #4]
 802262a:	2200      	movs	r2, #0
 802262c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 802262e:	2300      	movs	r3, #0
}
 8022630:	4618      	mov	r0, r3
 8022632:	3714      	adds	r7, #20
 8022634:	46bd      	mov	sp, r7
 8022636:	bd90      	pop	{r4, r7, pc}
 8022638:	0802ed74 	.word	0x0802ed74
 802263c:	0802f414 	.word	0x0802f414
 8022640:	0802edc8 	.word	0x0802edc8

08022644 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8022644:	b580      	push	{r7, lr}
 8022646:	b082      	sub	sp, #8
 8022648:	af00      	add	r7, sp, #0
 802264a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 802264c:	687b      	ldr	r3, [r7, #4]
 802264e:	2b00      	cmp	r3, #0
 8022650:	d106      	bne.n	8022660 <tcp_rexmit_fast+0x1c>
 8022652:	4b2a      	ldr	r3, [pc, #168]	; (80226fc <tcp_rexmit_fast+0xb8>)
 8022654:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8022658:	4929      	ldr	r1, [pc, #164]	; (8022700 <tcp_rexmit_fast+0xbc>)
 802265a:	482a      	ldr	r0, [pc, #168]	; (8022704 <tcp_rexmit_fast+0xc0>)
 802265c:	f004 fafc 	bl	8026c58 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8022660:	687b      	ldr	r3, [r7, #4]
 8022662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022664:	2b00      	cmp	r3, #0
 8022666:	d044      	beq.n	80226f2 <tcp_rexmit_fast+0xae>
 8022668:	687b      	ldr	r3, [r7, #4]
 802266a:	8b5b      	ldrh	r3, [r3, #26]
 802266c:	f003 0304 	and.w	r3, r3, #4
 8022670:	2b00      	cmp	r3, #0
 8022672:	d13e      	bne.n	80226f2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8022674:	6878      	ldr	r0, [r7, #4]
 8022676:	f7ff ff79 	bl	802256c <tcp_rexmit>
 802267a:	4603      	mov	r3, r0
 802267c:	2b00      	cmp	r3, #0
 802267e:	d138      	bne.n	80226f2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8022680:	687b      	ldr	r3, [r7, #4]
 8022682:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8022686:	687b      	ldr	r3, [r7, #4]
 8022688:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 802268c:	4293      	cmp	r3, r2
 802268e:	bf28      	it	cs
 8022690:	4613      	movcs	r3, r2
 8022692:	b29b      	uxth	r3, r3
 8022694:	0fda      	lsrs	r2, r3, #31
 8022696:	4413      	add	r3, r2
 8022698:	105b      	asrs	r3, r3, #1
 802269a:	b29a      	uxth	r2, r3
 802269c:	687b      	ldr	r3, [r7, #4]
 802269e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80226a2:	687b      	ldr	r3, [r7, #4]
 80226a4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80226a8:	461a      	mov	r2, r3
 80226aa:	687b      	ldr	r3, [r7, #4]
 80226ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80226ae:	005b      	lsls	r3, r3, #1
 80226b0:	429a      	cmp	r2, r3
 80226b2:	d206      	bcs.n	80226c2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80226b4:	687b      	ldr	r3, [r7, #4]
 80226b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80226b8:	005b      	lsls	r3, r3, #1
 80226ba:	b29a      	uxth	r2, r3
 80226bc:	687b      	ldr	r3, [r7, #4]
 80226be:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80226c2:	687b      	ldr	r3, [r7, #4]
 80226c4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80226c8:	687b      	ldr	r3, [r7, #4]
 80226ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80226cc:	4619      	mov	r1, r3
 80226ce:	0049      	lsls	r1, r1, #1
 80226d0:	440b      	add	r3, r1
 80226d2:	b29b      	uxth	r3, r3
 80226d4:	4413      	add	r3, r2
 80226d6:	b29a      	uxth	r2, r3
 80226d8:	687b      	ldr	r3, [r7, #4]
 80226da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80226de:	687b      	ldr	r3, [r7, #4]
 80226e0:	8b5b      	ldrh	r3, [r3, #26]
 80226e2:	f043 0304 	orr.w	r3, r3, #4
 80226e6:	b29a      	uxth	r2, r3
 80226e8:	687b      	ldr	r3, [r7, #4]
 80226ea:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80226ec:	687b      	ldr	r3, [r7, #4]
 80226ee:	2200      	movs	r2, #0
 80226f0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80226f2:	bf00      	nop
 80226f4:	3708      	adds	r7, #8
 80226f6:	46bd      	mov	sp, r7
 80226f8:	bd80      	pop	{r7, pc}
 80226fa:	bf00      	nop
 80226fc:	0802ed74 	.word	0x0802ed74
 8022700:	0802f42c 	.word	0x0802f42c
 8022704:	0802edc8 	.word	0x0802edc8

08022708 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8022708:	b580      	push	{r7, lr}
 802270a:	b086      	sub	sp, #24
 802270c:	af00      	add	r7, sp, #0
 802270e:	60f8      	str	r0, [r7, #12]
 8022710:	607b      	str	r3, [r7, #4]
 8022712:	460b      	mov	r3, r1
 8022714:	817b      	strh	r3, [r7, #10]
 8022716:	4613      	mov	r3, r2
 8022718:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 802271a:	897a      	ldrh	r2, [r7, #10]
 802271c:	893b      	ldrh	r3, [r7, #8]
 802271e:	4413      	add	r3, r2
 8022720:	b29b      	uxth	r3, r3
 8022722:	3314      	adds	r3, #20
 8022724:	b29b      	uxth	r3, r3
 8022726:	f44f 7220 	mov.w	r2, #640	; 0x280
 802272a:	4619      	mov	r1, r3
 802272c:	2022      	movs	r0, #34	; 0x22
 802272e:	f7f9 fb87 	bl	801be40 <pbuf_alloc>
 8022732:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8022734:	697b      	ldr	r3, [r7, #20]
 8022736:	2b00      	cmp	r3, #0
 8022738:	d04d      	beq.n	80227d6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 802273a:	897b      	ldrh	r3, [r7, #10]
 802273c:	3313      	adds	r3, #19
 802273e:	697a      	ldr	r2, [r7, #20]
 8022740:	8952      	ldrh	r2, [r2, #10]
 8022742:	4293      	cmp	r3, r2
 8022744:	db06      	blt.n	8022754 <tcp_output_alloc_header_common+0x4c>
 8022746:	4b26      	ldr	r3, [pc, #152]	; (80227e0 <tcp_output_alloc_header_common+0xd8>)
 8022748:	f240 7223 	movw	r2, #1827	; 0x723
 802274c:	4925      	ldr	r1, [pc, #148]	; (80227e4 <tcp_output_alloc_header_common+0xdc>)
 802274e:	4826      	ldr	r0, [pc, #152]	; (80227e8 <tcp_output_alloc_header_common+0xe0>)
 8022750:	f004 fa82 	bl	8026c58 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8022754:	697b      	ldr	r3, [r7, #20]
 8022756:	685b      	ldr	r3, [r3, #4]
 8022758:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 802275a:	8c3b      	ldrh	r3, [r7, #32]
 802275c:	4618      	mov	r0, r3
 802275e:	f7f8 fa15 	bl	801ab8c <lwip_htons>
 8022762:	4603      	mov	r3, r0
 8022764:	461a      	mov	r2, r3
 8022766:	693b      	ldr	r3, [r7, #16]
 8022768:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 802276a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802276c:	4618      	mov	r0, r3
 802276e:	f7f8 fa0d 	bl	801ab8c <lwip_htons>
 8022772:	4603      	mov	r3, r0
 8022774:	461a      	mov	r2, r3
 8022776:	693b      	ldr	r3, [r7, #16]
 8022778:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 802277a:	693b      	ldr	r3, [r7, #16]
 802277c:	687a      	ldr	r2, [r7, #4]
 802277e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8022780:	68f8      	ldr	r0, [r7, #12]
 8022782:	f7f8 fa18 	bl	801abb6 <lwip_htonl>
 8022786:	4602      	mov	r2, r0
 8022788:	693b      	ldr	r3, [r7, #16]
 802278a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 802278c:	897b      	ldrh	r3, [r7, #10]
 802278e:	089b      	lsrs	r3, r3, #2
 8022790:	b29b      	uxth	r3, r3
 8022792:	3305      	adds	r3, #5
 8022794:	b29b      	uxth	r3, r3
 8022796:	031b      	lsls	r3, r3, #12
 8022798:	b29a      	uxth	r2, r3
 802279a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802279e:	b29b      	uxth	r3, r3
 80227a0:	4313      	orrs	r3, r2
 80227a2:	b29b      	uxth	r3, r3
 80227a4:	4618      	mov	r0, r3
 80227a6:	f7f8 f9f1 	bl	801ab8c <lwip_htons>
 80227aa:	4603      	mov	r3, r0
 80227ac:	461a      	mov	r2, r3
 80227ae:	693b      	ldr	r3, [r7, #16]
 80227b0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80227b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80227b4:	4618      	mov	r0, r3
 80227b6:	f7f8 f9e9 	bl	801ab8c <lwip_htons>
 80227ba:	4603      	mov	r3, r0
 80227bc:	461a      	mov	r2, r3
 80227be:	693b      	ldr	r3, [r7, #16]
 80227c0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80227c2:	693b      	ldr	r3, [r7, #16]
 80227c4:	2200      	movs	r2, #0
 80227c6:	741a      	strb	r2, [r3, #16]
 80227c8:	2200      	movs	r2, #0
 80227ca:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80227cc:	693b      	ldr	r3, [r7, #16]
 80227ce:	2200      	movs	r2, #0
 80227d0:	749a      	strb	r2, [r3, #18]
 80227d2:	2200      	movs	r2, #0
 80227d4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80227d6:	697b      	ldr	r3, [r7, #20]
}
 80227d8:	4618      	mov	r0, r3
 80227da:	3718      	adds	r7, #24
 80227dc:	46bd      	mov	sp, r7
 80227de:	bd80      	pop	{r7, pc}
 80227e0:	0802ed74 	.word	0x0802ed74
 80227e4:	0802f44c 	.word	0x0802f44c
 80227e8:	0802edc8 	.word	0x0802edc8

080227ec <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80227ec:	b5b0      	push	{r4, r5, r7, lr}
 80227ee:	b08a      	sub	sp, #40	; 0x28
 80227f0:	af04      	add	r7, sp, #16
 80227f2:	60f8      	str	r0, [r7, #12]
 80227f4:	607b      	str	r3, [r7, #4]
 80227f6:	460b      	mov	r3, r1
 80227f8:	817b      	strh	r3, [r7, #10]
 80227fa:	4613      	mov	r3, r2
 80227fc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80227fe:	68fb      	ldr	r3, [r7, #12]
 8022800:	2b00      	cmp	r3, #0
 8022802:	d106      	bne.n	8022812 <tcp_output_alloc_header+0x26>
 8022804:	4b15      	ldr	r3, [pc, #84]	; (802285c <tcp_output_alloc_header+0x70>)
 8022806:	f240 7242 	movw	r2, #1858	; 0x742
 802280a:	4915      	ldr	r1, [pc, #84]	; (8022860 <tcp_output_alloc_header+0x74>)
 802280c:	4815      	ldr	r0, [pc, #84]	; (8022864 <tcp_output_alloc_header+0x78>)
 802280e:	f004 fa23 	bl	8026c58 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8022812:	68fb      	ldr	r3, [r7, #12]
 8022814:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8022816:	68fb      	ldr	r3, [r7, #12]
 8022818:	8adb      	ldrh	r3, [r3, #22]
 802281a:	68fa      	ldr	r2, [r7, #12]
 802281c:	8b12      	ldrh	r2, [r2, #24]
 802281e:	68f9      	ldr	r1, [r7, #12]
 8022820:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8022822:	893d      	ldrh	r5, [r7, #8]
 8022824:	897c      	ldrh	r4, [r7, #10]
 8022826:	9103      	str	r1, [sp, #12]
 8022828:	2110      	movs	r1, #16
 802282a:	9102      	str	r1, [sp, #8]
 802282c:	9201      	str	r2, [sp, #4]
 802282e:	9300      	str	r3, [sp, #0]
 8022830:	687b      	ldr	r3, [r7, #4]
 8022832:	462a      	mov	r2, r5
 8022834:	4621      	mov	r1, r4
 8022836:	f7ff ff67 	bl	8022708 <tcp_output_alloc_header_common>
 802283a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 802283c:	697b      	ldr	r3, [r7, #20]
 802283e:	2b00      	cmp	r3, #0
 8022840:	d006      	beq.n	8022850 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8022842:	68fb      	ldr	r3, [r7, #12]
 8022844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022846:	68fa      	ldr	r2, [r7, #12]
 8022848:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 802284a:	441a      	add	r2, r3
 802284c:	68fb      	ldr	r3, [r7, #12]
 802284e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8022850:	697b      	ldr	r3, [r7, #20]
}
 8022852:	4618      	mov	r0, r3
 8022854:	3718      	adds	r7, #24
 8022856:	46bd      	mov	sp, r7
 8022858:	bdb0      	pop	{r4, r5, r7, pc}
 802285a:	bf00      	nop
 802285c:	0802ed74 	.word	0x0802ed74
 8022860:	0802f47c 	.word	0x0802f47c
 8022864:	0802edc8 	.word	0x0802edc8

08022868 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8022868:	b580      	push	{r7, lr}
 802286a:	b088      	sub	sp, #32
 802286c:	af00      	add	r7, sp, #0
 802286e:	60f8      	str	r0, [r7, #12]
 8022870:	60b9      	str	r1, [r7, #8]
 8022872:	4611      	mov	r1, r2
 8022874:	461a      	mov	r2, r3
 8022876:	460b      	mov	r3, r1
 8022878:	71fb      	strb	r3, [r7, #7]
 802287a:	4613      	mov	r3, r2
 802287c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 802287e:	2300      	movs	r3, #0
 8022880:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8022882:	68bb      	ldr	r3, [r7, #8]
 8022884:	2b00      	cmp	r3, #0
 8022886:	d106      	bne.n	8022896 <tcp_output_fill_options+0x2e>
 8022888:	4b13      	ldr	r3, [pc, #76]	; (80228d8 <tcp_output_fill_options+0x70>)
 802288a:	f240 7256 	movw	r2, #1878	; 0x756
 802288e:	4913      	ldr	r1, [pc, #76]	; (80228dc <tcp_output_fill_options+0x74>)
 8022890:	4813      	ldr	r0, [pc, #76]	; (80228e0 <tcp_output_fill_options+0x78>)
 8022892:	f004 f9e1 	bl	8026c58 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8022896:	68bb      	ldr	r3, [r7, #8]
 8022898:	685b      	ldr	r3, [r3, #4]
 802289a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 802289c:	69bb      	ldr	r3, [r7, #24]
 802289e:	3314      	adds	r3, #20
 80228a0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80228a2:	69bb      	ldr	r3, [r7, #24]
 80228a4:	f103 0214 	add.w	r2, r3, #20
 80228a8:	8bfb      	ldrh	r3, [r7, #30]
 80228aa:	009b      	lsls	r3, r3, #2
 80228ac:	4619      	mov	r1, r3
 80228ae:	79fb      	ldrb	r3, [r7, #7]
 80228b0:	009b      	lsls	r3, r3, #2
 80228b2:	f003 0304 	and.w	r3, r3, #4
 80228b6:	440b      	add	r3, r1
 80228b8:	4413      	add	r3, r2
 80228ba:	697a      	ldr	r2, [r7, #20]
 80228bc:	429a      	cmp	r2, r3
 80228be:	d006      	beq.n	80228ce <tcp_output_fill_options+0x66>
 80228c0:	4b05      	ldr	r3, [pc, #20]	; (80228d8 <tcp_output_fill_options+0x70>)
 80228c2:	f240 7275 	movw	r2, #1909	; 0x775
 80228c6:	4907      	ldr	r1, [pc, #28]	; (80228e4 <tcp_output_fill_options+0x7c>)
 80228c8:	4805      	ldr	r0, [pc, #20]	; (80228e0 <tcp_output_fill_options+0x78>)
 80228ca:	f004 f9c5 	bl	8026c58 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80228ce:	bf00      	nop
 80228d0:	3720      	adds	r7, #32
 80228d2:	46bd      	mov	sp, r7
 80228d4:	bd80      	pop	{r7, pc}
 80228d6:	bf00      	nop
 80228d8:	0802ed74 	.word	0x0802ed74
 80228dc:	0802f4a4 	.word	0x0802f4a4
 80228e0:	0802edc8 	.word	0x0802edc8
 80228e4:	0802f39c 	.word	0x0802f39c

080228e8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80228e8:	b580      	push	{r7, lr}
 80228ea:	b08a      	sub	sp, #40	; 0x28
 80228ec:	af04      	add	r7, sp, #16
 80228ee:	60f8      	str	r0, [r7, #12]
 80228f0:	60b9      	str	r1, [r7, #8]
 80228f2:	607a      	str	r2, [r7, #4]
 80228f4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80228f6:	68bb      	ldr	r3, [r7, #8]
 80228f8:	2b00      	cmp	r3, #0
 80228fa:	d106      	bne.n	802290a <tcp_output_control_segment+0x22>
 80228fc:	4b1c      	ldr	r3, [pc, #112]	; (8022970 <tcp_output_control_segment+0x88>)
 80228fe:	f240 7287 	movw	r2, #1927	; 0x787
 8022902:	491c      	ldr	r1, [pc, #112]	; (8022974 <tcp_output_control_segment+0x8c>)
 8022904:	481c      	ldr	r0, [pc, #112]	; (8022978 <tcp_output_control_segment+0x90>)
 8022906:	f004 f9a7 	bl	8026c58 <iprintf>

  netif = tcp_route(pcb, src, dst);
 802290a:	683a      	ldr	r2, [r7, #0]
 802290c:	6879      	ldr	r1, [r7, #4]
 802290e:	68f8      	ldr	r0, [r7, #12]
 8022910:	f7fe fae8 	bl	8020ee4 <tcp_route>
 8022914:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8022916:	693b      	ldr	r3, [r7, #16]
 8022918:	2b00      	cmp	r3, #0
 802291a:	d102      	bne.n	8022922 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 802291c:	23fc      	movs	r3, #252	; 0xfc
 802291e:	75fb      	strb	r3, [r7, #23]
 8022920:	e01c      	b.n	802295c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8022922:	68fb      	ldr	r3, [r7, #12]
 8022924:	2b00      	cmp	r3, #0
 8022926:	d006      	beq.n	8022936 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8022928:	68fb      	ldr	r3, [r7, #12]
 802292a:	7adb      	ldrb	r3, [r3, #11]
 802292c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 802292e:	68fb      	ldr	r3, [r7, #12]
 8022930:	7a9b      	ldrb	r3, [r3, #10]
 8022932:	757b      	strb	r3, [r7, #21]
 8022934:	e003      	b.n	802293e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8022936:	23ff      	movs	r3, #255	; 0xff
 8022938:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 802293a:	2300      	movs	r3, #0
 802293c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 802293e:	7dba      	ldrb	r2, [r7, #22]
 8022940:	693b      	ldr	r3, [r7, #16]
 8022942:	9302      	str	r3, [sp, #8]
 8022944:	2306      	movs	r3, #6
 8022946:	9301      	str	r3, [sp, #4]
 8022948:	7d7b      	ldrb	r3, [r7, #21]
 802294a:	9300      	str	r3, [sp, #0]
 802294c:	4613      	mov	r3, r2
 802294e:	683a      	ldr	r2, [r7, #0]
 8022950:	6879      	ldr	r1, [r7, #4]
 8022952:	68b8      	ldr	r0, [r7, #8]
 8022954:	f002 fa94 	bl	8024e80 <ip4_output_if>
 8022958:	4603      	mov	r3, r0
 802295a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 802295c:	68b8      	ldr	r0, [r7, #8]
 802295e:	f7f9 fd53 	bl	801c408 <pbuf_free>
  return err;
 8022962:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8022966:	4618      	mov	r0, r3
 8022968:	3718      	adds	r7, #24
 802296a:	46bd      	mov	sp, r7
 802296c:	bd80      	pop	{r7, pc}
 802296e:	bf00      	nop
 8022970:	0802ed74 	.word	0x0802ed74
 8022974:	0802f4cc 	.word	0x0802f4cc
 8022978:	0802edc8 	.word	0x0802edc8

0802297c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 802297c:	b590      	push	{r4, r7, lr}
 802297e:	b08b      	sub	sp, #44	; 0x2c
 8022980:	af04      	add	r7, sp, #16
 8022982:	60f8      	str	r0, [r7, #12]
 8022984:	60b9      	str	r1, [r7, #8]
 8022986:	607a      	str	r2, [r7, #4]
 8022988:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 802298a:	683b      	ldr	r3, [r7, #0]
 802298c:	2b00      	cmp	r3, #0
 802298e:	d106      	bne.n	802299e <tcp_rst+0x22>
 8022990:	4b1f      	ldr	r3, [pc, #124]	; (8022a10 <tcp_rst+0x94>)
 8022992:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8022996:	491f      	ldr	r1, [pc, #124]	; (8022a14 <tcp_rst+0x98>)
 8022998:	481f      	ldr	r0, [pc, #124]	; (8022a18 <tcp_rst+0x9c>)
 802299a:	f004 f95d 	bl	8026c58 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 802299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229a0:	2b00      	cmp	r3, #0
 80229a2:	d106      	bne.n	80229b2 <tcp_rst+0x36>
 80229a4:	4b1a      	ldr	r3, [pc, #104]	; (8022a10 <tcp_rst+0x94>)
 80229a6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80229aa:	491c      	ldr	r1, [pc, #112]	; (8022a1c <tcp_rst+0xa0>)
 80229ac:	481a      	ldr	r0, [pc, #104]	; (8022a18 <tcp_rst+0x9c>)
 80229ae:	f004 f953 	bl	8026c58 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80229b2:	2300      	movs	r3, #0
 80229b4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80229b6:	f246 0308 	movw	r3, #24584	; 0x6008
 80229ba:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80229bc:	7dfb      	ldrb	r3, [r7, #23]
 80229be:	b29c      	uxth	r4, r3
 80229c0:	68b8      	ldr	r0, [r7, #8]
 80229c2:	f7f8 f8f8 	bl	801abb6 <lwip_htonl>
 80229c6:	4602      	mov	r2, r0
 80229c8:	8abb      	ldrh	r3, [r7, #20]
 80229ca:	9303      	str	r3, [sp, #12]
 80229cc:	2314      	movs	r3, #20
 80229ce:	9302      	str	r3, [sp, #8]
 80229d0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80229d2:	9301      	str	r3, [sp, #4]
 80229d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80229d6:	9300      	str	r3, [sp, #0]
 80229d8:	4613      	mov	r3, r2
 80229da:	2200      	movs	r2, #0
 80229dc:	4621      	mov	r1, r4
 80229de:	6878      	ldr	r0, [r7, #4]
 80229e0:	f7ff fe92 	bl	8022708 <tcp_output_alloc_header_common>
 80229e4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80229e6:	693b      	ldr	r3, [r7, #16]
 80229e8:	2b00      	cmp	r3, #0
 80229ea:	d00c      	beq.n	8022a06 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80229ec:	7dfb      	ldrb	r3, [r7, #23]
 80229ee:	2200      	movs	r2, #0
 80229f0:	6939      	ldr	r1, [r7, #16]
 80229f2:	68f8      	ldr	r0, [r7, #12]
 80229f4:	f7ff ff38 	bl	8022868 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80229f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229fa:	683a      	ldr	r2, [r7, #0]
 80229fc:	6939      	ldr	r1, [r7, #16]
 80229fe:	68f8      	ldr	r0, [r7, #12]
 8022a00:	f7ff ff72 	bl	80228e8 <tcp_output_control_segment>
 8022a04:	e000      	b.n	8022a08 <tcp_rst+0x8c>
    return;
 8022a06:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8022a08:	371c      	adds	r7, #28
 8022a0a:	46bd      	mov	sp, r7
 8022a0c:	bd90      	pop	{r4, r7, pc}
 8022a0e:	bf00      	nop
 8022a10:	0802ed74 	.word	0x0802ed74
 8022a14:	0802f4f8 	.word	0x0802f4f8
 8022a18:	0802edc8 	.word	0x0802edc8
 8022a1c:	0802f514 	.word	0x0802f514

08022a20 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8022a20:	b590      	push	{r4, r7, lr}
 8022a22:	b087      	sub	sp, #28
 8022a24:	af00      	add	r7, sp, #0
 8022a26:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8022a28:	2300      	movs	r3, #0
 8022a2a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8022a2c:	2300      	movs	r3, #0
 8022a2e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8022a30:	687b      	ldr	r3, [r7, #4]
 8022a32:	2b00      	cmp	r3, #0
 8022a34:	d106      	bne.n	8022a44 <tcp_send_empty_ack+0x24>
 8022a36:	4b28      	ldr	r3, [pc, #160]	; (8022ad8 <tcp_send_empty_ack+0xb8>)
 8022a38:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8022a3c:	4927      	ldr	r1, [pc, #156]	; (8022adc <tcp_send_empty_ack+0xbc>)
 8022a3e:	4828      	ldr	r0, [pc, #160]	; (8022ae0 <tcp_send_empty_ack+0xc0>)
 8022a40:	f004 f90a 	bl	8026c58 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8022a44:	7dfb      	ldrb	r3, [r7, #23]
 8022a46:	009b      	lsls	r3, r3, #2
 8022a48:	b2db      	uxtb	r3, r3
 8022a4a:	f003 0304 	and.w	r3, r3, #4
 8022a4e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8022a50:	7d7b      	ldrb	r3, [r7, #21]
 8022a52:	b29c      	uxth	r4, r3
 8022a54:	687b      	ldr	r3, [r7, #4]
 8022a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022a58:	4618      	mov	r0, r3
 8022a5a:	f7f8 f8ac 	bl	801abb6 <lwip_htonl>
 8022a5e:	4603      	mov	r3, r0
 8022a60:	2200      	movs	r2, #0
 8022a62:	4621      	mov	r1, r4
 8022a64:	6878      	ldr	r0, [r7, #4]
 8022a66:	f7ff fec1 	bl	80227ec <tcp_output_alloc_header>
 8022a6a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8022a6c:	693b      	ldr	r3, [r7, #16]
 8022a6e:	2b00      	cmp	r3, #0
 8022a70:	d109      	bne.n	8022a86 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8022a72:	687b      	ldr	r3, [r7, #4]
 8022a74:	8b5b      	ldrh	r3, [r3, #26]
 8022a76:	f043 0303 	orr.w	r3, r3, #3
 8022a7a:	b29a      	uxth	r2, r3
 8022a7c:	687b      	ldr	r3, [r7, #4]
 8022a7e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8022a80:	f06f 0301 	mvn.w	r3, #1
 8022a84:	e023      	b.n	8022ace <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8022a86:	7dbb      	ldrb	r3, [r7, #22]
 8022a88:	7dfa      	ldrb	r2, [r7, #23]
 8022a8a:	6939      	ldr	r1, [r7, #16]
 8022a8c:	6878      	ldr	r0, [r7, #4]
 8022a8e:	f7ff feeb 	bl	8022868 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8022a92:	687a      	ldr	r2, [r7, #4]
 8022a94:	687b      	ldr	r3, [r7, #4]
 8022a96:	3304      	adds	r3, #4
 8022a98:	6939      	ldr	r1, [r7, #16]
 8022a9a:	6878      	ldr	r0, [r7, #4]
 8022a9c:	f7ff ff24 	bl	80228e8 <tcp_output_control_segment>
 8022aa0:	4603      	mov	r3, r0
 8022aa2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8022aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8022aa8:	2b00      	cmp	r3, #0
 8022aaa:	d007      	beq.n	8022abc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8022aac:	687b      	ldr	r3, [r7, #4]
 8022aae:	8b5b      	ldrh	r3, [r3, #26]
 8022ab0:	f043 0303 	orr.w	r3, r3, #3
 8022ab4:	b29a      	uxth	r2, r3
 8022ab6:	687b      	ldr	r3, [r7, #4]
 8022ab8:	835a      	strh	r2, [r3, #26]
 8022aba:	e006      	b.n	8022aca <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8022abc:	687b      	ldr	r3, [r7, #4]
 8022abe:	8b5b      	ldrh	r3, [r3, #26]
 8022ac0:	f023 0303 	bic.w	r3, r3, #3
 8022ac4:	b29a      	uxth	r2, r3
 8022ac6:	687b      	ldr	r3, [r7, #4]
 8022ac8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8022aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8022ace:	4618      	mov	r0, r3
 8022ad0:	371c      	adds	r7, #28
 8022ad2:	46bd      	mov	sp, r7
 8022ad4:	bd90      	pop	{r4, r7, pc}
 8022ad6:	bf00      	nop
 8022ad8:	0802ed74 	.word	0x0802ed74
 8022adc:	0802f530 	.word	0x0802f530
 8022ae0:	0802edc8 	.word	0x0802edc8

08022ae4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8022ae4:	b590      	push	{r4, r7, lr}
 8022ae6:	b087      	sub	sp, #28
 8022ae8:	af00      	add	r7, sp, #0
 8022aea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8022aec:	2300      	movs	r3, #0
 8022aee:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8022af0:	687b      	ldr	r3, [r7, #4]
 8022af2:	2b00      	cmp	r3, #0
 8022af4:	d106      	bne.n	8022b04 <tcp_keepalive+0x20>
 8022af6:	4b18      	ldr	r3, [pc, #96]	; (8022b58 <tcp_keepalive+0x74>)
 8022af8:	f640 0224 	movw	r2, #2084	; 0x824
 8022afc:	4917      	ldr	r1, [pc, #92]	; (8022b5c <tcp_keepalive+0x78>)
 8022afe:	4818      	ldr	r0, [pc, #96]	; (8022b60 <tcp_keepalive+0x7c>)
 8022b00:	f004 f8aa 	bl	8026c58 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8022b04:	7dfb      	ldrb	r3, [r7, #23]
 8022b06:	b29c      	uxth	r4, r3
 8022b08:	687b      	ldr	r3, [r7, #4]
 8022b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022b0c:	3b01      	subs	r3, #1
 8022b0e:	4618      	mov	r0, r3
 8022b10:	f7f8 f851 	bl	801abb6 <lwip_htonl>
 8022b14:	4603      	mov	r3, r0
 8022b16:	2200      	movs	r2, #0
 8022b18:	4621      	mov	r1, r4
 8022b1a:	6878      	ldr	r0, [r7, #4]
 8022b1c:	f7ff fe66 	bl	80227ec <tcp_output_alloc_header>
 8022b20:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8022b22:	693b      	ldr	r3, [r7, #16]
 8022b24:	2b00      	cmp	r3, #0
 8022b26:	d102      	bne.n	8022b2e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8022b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022b2c:	e010      	b.n	8022b50 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8022b2e:	7dfb      	ldrb	r3, [r7, #23]
 8022b30:	2200      	movs	r2, #0
 8022b32:	6939      	ldr	r1, [r7, #16]
 8022b34:	6878      	ldr	r0, [r7, #4]
 8022b36:	f7ff fe97 	bl	8022868 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8022b3a:	687a      	ldr	r2, [r7, #4]
 8022b3c:	687b      	ldr	r3, [r7, #4]
 8022b3e:	3304      	adds	r3, #4
 8022b40:	6939      	ldr	r1, [r7, #16]
 8022b42:	6878      	ldr	r0, [r7, #4]
 8022b44:	f7ff fed0 	bl	80228e8 <tcp_output_control_segment>
 8022b48:	4603      	mov	r3, r0
 8022b4a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8022b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8022b50:	4618      	mov	r0, r3
 8022b52:	371c      	adds	r7, #28
 8022b54:	46bd      	mov	sp, r7
 8022b56:	bd90      	pop	{r4, r7, pc}
 8022b58:	0802ed74 	.word	0x0802ed74
 8022b5c:	0802f550 	.word	0x0802f550
 8022b60:	0802edc8 	.word	0x0802edc8

08022b64 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8022b64:	b590      	push	{r4, r7, lr}
 8022b66:	b08b      	sub	sp, #44	; 0x2c
 8022b68:	af00      	add	r7, sp, #0
 8022b6a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8022b6c:	2300      	movs	r3, #0
 8022b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8022b72:	687b      	ldr	r3, [r7, #4]
 8022b74:	2b00      	cmp	r3, #0
 8022b76:	d106      	bne.n	8022b86 <tcp_zero_window_probe+0x22>
 8022b78:	4b4c      	ldr	r3, [pc, #304]	; (8022cac <tcp_zero_window_probe+0x148>)
 8022b7a:	f640 024f 	movw	r2, #2127	; 0x84f
 8022b7e:	494c      	ldr	r1, [pc, #304]	; (8022cb0 <tcp_zero_window_probe+0x14c>)
 8022b80:	484c      	ldr	r0, [pc, #304]	; (8022cb4 <tcp_zero_window_probe+0x150>)
 8022b82:	f004 f869 	bl	8026c58 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8022b86:	687b      	ldr	r3, [r7, #4]
 8022b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022b8a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8022b8c:	6a3b      	ldr	r3, [r7, #32]
 8022b8e:	2b00      	cmp	r3, #0
 8022b90:	d101      	bne.n	8022b96 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8022b92:	2300      	movs	r3, #0
 8022b94:	e086      	b.n	8022ca4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8022b96:	687b      	ldr	r3, [r7, #4]
 8022b98:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8022b9c:	2bff      	cmp	r3, #255	; 0xff
 8022b9e:	d007      	beq.n	8022bb0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8022ba0:	687b      	ldr	r3, [r7, #4]
 8022ba2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8022ba6:	3301      	adds	r3, #1
 8022ba8:	b2da      	uxtb	r2, r3
 8022baa:	687b      	ldr	r3, [r7, #4]
 8022bac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8022bb0:	6a3b      	ldr	r3, [r7, #32]
 8022bb2:	68db      	ldr	r3, [r3, #12]
 8022bb4:	899b      	ldrh	r3, [r3, #12]
 8022bb6:	b29b      	uxth	r3, r3
 8022bb8:	4618      	mov	r0, r3
 8022bba:	f7f7 ffe7 	bl	801ab8c <lwip_htons>
 8022bbe:	4603      	mov	r3, r0
 8022bc0:	b2db      	uxtb	r3, r3
 8022bc2:	f003 0301 	and.w	r3, r3, #1
 8022bc6:	2b00      	cmp	r3, #0
 8022bc8:	d005      	beq.n	8022bd6 <tcp_zero_window_probe+0x72>
 8022bca:	6a3b      	ldr	r3, [r7, #32]
 8022bcc:	891b      	ldrh	r3, [r3, #8]
 8022bce:	2b00      	cmp	r3, #0
 8022bd0:	d101      	bne.n	8022bd6 <tcp_zero_window_probe+0x72>
 8022bd2:	2301      	movs	r3, #1
 8022bd4:	e000      	b.n	8022bd8 <tcp_zero_window_probe+0x74>
 8022bd6:	2300      	movs	r3, #0
 8022bd8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8022bda:	7ffb      	ldrb	r3, [r7, #31]
 8022bdc:	2b00      	cmp	r3, #0
 8022bde:	bf0c      	ite	eq
 8022be0:	2301      	moveq	r3, #1
 8022be2:	2300      	movne	r3, #0
 8022be4:	b2db      	uxtb	r3, r3
 8022be6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8022be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022bec:	b299      	uxth	r1, r3
 8022bee:	6a3b      	ldr	r3, [r7, #32]
 8022bf0:	68db      	ldr	r3, [r3, #12]
 8022bf2:	685b      	ldr	r3, [r3, #4]
 8022bf4:	8bba      	ldrh	r2, [r7, #28]
 8022bf6:	6878      	ldr	r0, [r7, #4]
 8022bf8:	f7ff fdf8 	bl	80227ec <tcp_output_alloc_header>
 8022bfc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8022bfe:	69bb      	ldr	r3, [r7, #24]
 8022c00:	2b00      	cmp	r3, #0
 8022c02:	d102      	bne.n	8022c0a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8022c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022c08:	e04c      	b.n	8022ca4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8022c0a:	69bb      	ldr	r3, [r7, #24]
 8022c0c:	685b      	ldr	r3, [r3, #4]
 8022c0e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8022c10:	7ffb      	ldrb	r3, [r7, #31]
 8022c12:	2b00      	cmp	r3, #0
 8022c14:	d011      	beq.n	8022c3a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8022c16:	697b      	ldr	r3, [r7, #20]
 8022c18:	899b      	ldrh	r3, [r3, #12]
 8022c1a:	b29b      	uxth	r3, r3
 8022c1c:	b21b      	sxth	r3, r3
 8022c1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8022c22:	b21c      	sxth	r4, r3
 8022c24:	2011      	movs	r0, #17
 8022c26:	f7f7 ffb1 	bl	801ab8c <lwip_htons>
 8022c2a:	4603      	mov	r3, r0
 8022c2c:	b21b      	sxth	r3, r3
 8022c2e:	4323      	orrs	r3, r4
 8022c30:	b21b      	sxth	r3, r3
 8022c32:	b29a      	uxth	r2, r3
 8022c34:	697b      	ldr	r3, [r7, #20]
 8022c36:	819a      	strh	r2, [r3, #12]
 8022c38:	e010      	b.n	8022c5c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8022c3a:	69bb      	ldr	r3, [r7, #24]
 8022c3c:	685b      	ldr	r3, [r3, #4]
 8022c3e:	3314      	adds	r3, #20
 8022c40:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8022c42:	6a3b      	ldr	r3, [r7, #32]
 8022c44:	6858      	ldr	r0, [r3, #4]
 8022c46:	6a3b      	ldr	r3, [r7, #32]
 8022c48:	685b      	ldr	r3, [r3, #4]
 8022c4a:	891a      	ldrh	r2, [r3, #8]
 8022c4c:	6a3b      	ldr	r3, [r7, #32]
 8022c4e:	891b      	ldrh	r3, [r3, #8]
 8022c50:	1ad3      	subs	r3, r2, r3
 8022c52:	b29b      	uxth	r3, r3
 8022c54:	2201      	movs	r2, #1
 8022c56:	6939      	ldr	r1, [r7, #16]
 8022c58:	f7f9 fddc 	bl	801c814 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8022c5c:	6a3b      	ldr	r3, [r7, #32]
 8022c5e:	68db      	ldr	r3, [r3, #12]
 8022c60:	685b      	ldr	r3, [r3, #4]
 8022c62:	4618      	mov	r0, r3
 8022c64:	f7f7 ffa7 	bl	801abb6 <lwip_htonl>
 8022c68:	4603      	mov	r3, r0
 8022c6a:	3301      	adds	r3, #1
 8022c6c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8022c6e:	687b      	ldr	r3, [r7, #4]
 8022c70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8022c72:	68fb      	ldr	r3, [r7, #12]
 8022c74:	1ad3      	subs	r3, r2, r3
 8022c76:	2b00      	cmp	r3, #0
 8022c78:	da02      	bge.n	8022c80 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8022c7a:	687b      	ldr	r3, [r7, #4]
 8022c7c:	68fa      	ldr	r2, [r7, #12]
 8022c7e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8022c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022c84:	2200      	movs	r2, #0
 8022c86:	69b9      	ldr	r1, [r7, #24]
 8022c88:	6878      	ldr	r0, [r7, #4]
 8022c8a:	f7ff fded 	bl	8022868 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8022c8e:	687a      	ldr	r2, [r7, #4]
 8022c90:	687b      	ldr	r3, [r7, #4]
 8022c92:	3304      	adds	r3, #4
 8022c94:	69b9      	ldr	r1, [r7, #24]
 8022c96:	6878      	ldr	r0, [r7, #4]
 8022c98:	f7ff fe26 	bl	80228e8 <tcp_output_control_segment>
 8022c9c:	4603      	mov	r3, r0
 8022c9e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8022ca0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8022ca4:	4618      	mov	r0, r3
 8022ca6:	372c      	adds	r7, #44	; 0x2c
 8022ca8:	46bd      	mov	sp, r7
 8022caa:	bd90      	pop	{r4, r7, pc}
 8022cac:	0802ed74 	.word	0x0802ed74
 8022cb0:	0802f56c 	.word	0x0802f56c
 8022cb4:	0802edc8 	.word	0x0802edc8

08022cb8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8022cb8:	b580      	push	{r7, lr}
 8022cba:	b082      	sub	sp, #8
 8022cbc:	af00      	add	r7, sp, #0
 8022cbe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8022cc0:	f7f9 fefa 	bl	801cab8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8022cc4:	4b0a      	ldr	r3, [pc, #40]	; (8022cf0 <tcpip_tcp_timer+0x38>)
 8022cc6:	681b      	ldr	r3, [r3, #0]
 8022cc8:	2b00      	cmp	r3, #0
 8022cca:	d103      	bne.n	8022cd4 <tcpip_tcp_timer+0x1c>
 8022ccc:	4b09      	ldr	r3, [pc, #36]	; (8022cf4 <tcpip_tcp_timer+0x3c>)
 8022cce:	681b      	ldr	r3, [r3, #0]
 8022cd0:	2b00      	cmp	r3, #0
 8022cd2:	d005      	beq.n	8022ce0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8022cd4:	2200      	movs	r2, #0
 8022cd6:	4908      	ldr	r1, [pc, #32]	; (8022cf8 <tcpip_tcp_timer+0x40>)
 8022cd8:	20fa      	movs	r0, #250	; 0xfa
 8022cda:	f000 f8f3 	bl	8022ec4 <sys_timeout>
 8022cde:	e003      	b.n	8022ce8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8022ce0:	4b06      	ldr	r3, [pc, #24]	; (8022cfc <tcpip_tcp_timer+0x44>)
 8022ce2:	2200      	movs	r2, #0
 8022ce4:	601a      	str	r2, [r3, #0]
  }
}
 8022ce6:	bf00      	nop
 8022ce8:	bf00      	nop
 8022cea:	3708      	adds	r7, #8
 8022cec:	46bd      	mov	sp, r7
 8022cee:	bd80      	pop	{r7, pc}
 8022cf0:	2001d51c 	.word	0x2001d51c
 8022cf4:	2001d52c 	.word	0x2001d52c
 8022cf8:	08022cb9 	.word	0x08022cb9
 8022cfc:	20005a64 	.word	0x20005a64

08022d00 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8022d00:	b580      	push	{r7, lr}
 8022d02:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8022d04:	4b0a      	ldr	r3, [pc, #40]	; (8022d30 <tcp_timer_needed+0x30>)
 8022d06:	681b      	ldr	r3, [r3, #0]
 8022d08:	2b00      	cmp	r3, #0
 8022d0a:	d10f      	bne.n	8022d2c <tcp_timer_needed+0x2c>
 8022d0c:	4b09      	ldr	r3, [pc, #36]	; (8022d34 <tcp_timer_needed+0x34>)
 8022d0e:	681b      	ldr	r3, [r3, #0]
 8022d10:	2b00      	cmp	r3, #0
 8022d12:	d103      	bne.n	8022d1c <tcp_timer_needed+0x1c>
 8022d14:	4b08      	ldr	r3, [pc, #32]	; (8022d38 <tcp_timer_needed+0x38>)
 8022d16:	681b      	ldr	r3, [r3, #0]
 8022d18:	2b00      	cmp	r3, #0
 8022d1a:	d007      	beq.n	8022d2c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8022d1c:	4b04      	ldr	r3, [pc, #16]	; (8022d30 <tcp_timer_needed+0x30>)
 8022d1e:	2201      	movs	r2, #1
 8022d20:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8022d22:	2200      	movs	r2, #0
 8022d24:	4905      	ldr	r1, [pc, #20]	; (8022d3c <tcp_timer_needed+0x3c>)
 8022d26:	20fa      	movs	r0, #250	; 0xfa
 8022d28:	f000 f8cc 	bl	8022ec4 <sys_timeout>
  }
}
 8022d2c:	bf00      	nop
 8022d2e:	bd80      	pop	{r7, pc}
 8022d30:	20005a64 	.word	0x20005a64
 8022d34:	2001d51c 	.word	0x2001d51c
 8022d38:	2001d52c 	.word	0x2001d52c
 8022d3c:	08022cb9 	.word	0x08022cb9

08022d40 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8022d40:	b580      	push	{r7, lr}
 8022d42:	b086      	sub	sp, #24
 8022d44:	af00      	add	r7, sp, #0
 8022d46:	60f8      	str	r0, [r7, #12]
 8022d48:	60b9      	str	r1, [r7, #8]
 8022d4a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8022d4c:	200a      	movs	r0, #10
 8022d4e:	f7f8 fc65 	bl	801b61c <memp_malloc>
 8022d52:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8022d54:	693b      	ldr	r3, [r7, #16]
 8022d56:	2b00      	cmp	r3, #0
 8022d58:	d109      	bne.n	8022d6e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8022d5a:	693b      	ldr	r3, [r7, #16]
 8022d5c:	2b00      	cmp	r3, #0
 8022d5e:	d151      	bne.n	8022e04 <sys_timeout_abs+0xc4>
 8022d60:	4b2a      	ldr	r3, [pc, #168]	; (8022e0c <sys_timeout_abs+0xcc>)
 8022d62:	22be      	movs	r2, #190	; 0xbe
 8022d64:	492a      	ldr	r1, [pc, #168]	; (8022e10 <sys_timeout_abs+0xd0>)
 8022d66:	482b      	ldr	r0, [pc, #172]	; (8022e14 <sys_timeout_abs+0xd4>)
 8022d68:	f003 ff76 	bl	8026c58 <iprintf>
    return;
 8022d6c:	e04a      	b.n	8022e04 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8022d6e:	693b      	ldr	r3, [r7, #16]
 8022d70:	2200      	movs	r2, #0
 8022d72:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8022d74:	693b      	ldr	r3, [r7, #16]
 8022d76:	68ba      	ldr	r2, [r7, #8]
 8022d78:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8022d7a:	693b      	ldr	r3, [r7, #16]
 8022d7c:	687a      	ldr	r2, [r7, #4]
 8022d7e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8022d80:	693b      	ldr	r3, [r7, #16]
 8022d82:	68fa      	ldr	r2, [r7, #12]
 8022d84:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8022d86:	4b24      	ldr	r3, [pc, #144]	; (8022e18 <sys_timeout_abs+0xd8>)
 8022d88:	681b      	ldr	r3, [r3, #0]
 8022d8a:	2b00      	cmp	r3, #0
 8022d8c:	d103      	bne.n	8022d96 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8022d8e:	4a22      	ldr	r2, [pc, #136]	; (8022e18 <sys_timeout_abs+0xd8>)
 8022d90:	693b      	ldr	r3, [r7, #16]
 8022d92:	6013      	str	r3, [r2, #0]
    return;
 8022d94:	e037      	b.n	8022e06 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8022d96:	693b      	ldr	r3, [r7, #16]
 8022d98:	685a      	ldr	r2, [r3, #4]
 8022d9a:	4b1f      	ldr	r3, [pc, #124]	; (8022e18 <sys_timeout_abs+0xd8>)
 8022d9c:	681b      	ldr	r3, [r3, #0]
 8022d9e:	685b      	ldr	r3, [r3, #4]
 8022da0:	1ad3      	subs	r3, r2, r3
 8022da2:	0fdb      	lsrs	r3, r3, #31
 8022da4:	f003 0301 	and.w	r3, r3, #1
 8022da8:	b2db      	uxtb	r3, r3
 8022daa:	2b00      	cmp	r3, #0
 8022dac:	d007      	beq.n	8022dbe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8022dae:	4b1a      	ldr	r3, [pc, #104]	; (8022e18 <sys_timeout_abs+0xd8>)
 8022db0:	681a      	ldr	r2, [r3, #0]
 8022db2:	693b      	ldr	r3, [r7, #16]
 8022db4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8022db6:	4a18      	ldr	r2, [pc, #96]	; (8022e18 <sys_timeout_abs+0xd8>)
 8022db8:	693b      	ldr	r3, [r7, #16]
 8022dba:	6013      	str	r3, [r2, #0]
 8022dbc:	e023      	b.n	8022e06 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8022dbe:	4b16      	ldr	r3, [pc, #88]	; (8022e18 <sys_timeout_abs+0xd8>)
 8022dc0:	681b      	ldr	r3, [r3, #0]
 8022dc2:	617b      	str	r3, [r7, #20]
 8022dc4:	e01a      	b.n	8022dfc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8022dc6:	697b      	ldr	r3, [r7, #20]
 8022dc8:	681b      	ldr	r3, [r3, #0]
 8022dca:	2b00      	cmp	r3, #0
 8022dcc:	d00b      	beq.n	8022de6 <sys_timeout_abs+0xa6>
 8022dce:	693b      	ldr	r3, [r7, #16]
 8022dd0:	685a      	ldr	r2, [r3, #4]
 8022dd2:	697b      	ldr	r3, [r7, #20]
 8022dd4:	681b      	ldr	r3, [r3, #0]
 8022dd6:	685b      	ldr	r3, [r3, #4]
 8022dd8:	1ad3      	subs	r3, r2, r3
 8022dda:	0fdb      	lsrs	r3, r3, #31
 8022ddc:	f003 0301 	and.w	r3, r3, #1
 8022de0:	b2db      	uxtb	r3, r3
 8022de2:	2b00      	cmp	r3, #0
 8022de4:	d007      	beq.n	8022df6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8022de6:	697b      	ldr	r3, [r7, #20]
 8022de8:	681a      	ldr	r2, [r3, #0]
 8022dea:	693b      	ldr	r3, [r7, #16]
 8022dec:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8022dee:	697b      	ldr	r3, [r7, #20]
 8022df0:	693a      	ldr	r2, [r7, #16]
 8022df2:	601a      	str	r2, [r3, #0]
        break;
 8022df4:	e007      	b.n	8022e06 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8022df6:	697b      	ldr	r3, [r7, #20]
 8022df8:	681b      	ldr	r3, [r3, #0]
 8022dfa:	617b      	str	r3, [r7, #20]
 8022dfc:	697b      	ldr	r3, [r7, #20]
 8022dfe:	2b00      	cmp	r3, #0
 8022e00:	d1e1      	bne.n	8022dc6 <sys_timeout_abs+0x86>
 8022e02:	e000      	b.n	8022e06 <sys_timeout_abs+0xc6>
    return;
 8022e04:	bf00      	nop
      }
    }
  }
}
 8022e06:	3718      	adds	r7, #24
 8022e08:	46bd      	mov	sp, r7
 8022e0a:	bd80      	pop	{r7, pc}
 8022e0c:	0802f590 	.word	0x0802f590
 8022e10:	0802f5c4 	.word	0x0802f5c4
 8022e14:	0802f604 	.word	0x0802f604
 8022e18:	20005a5c 	.word	0x20005a5c

08022e1c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8022e1c:	b580      	push	{r7, lr}
 8022e1e:	b086      	sub	sp, #24
 8022e20:	af00      	add	r7, sp, #0
 8022e22:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8022e24:	687b      	ldr	r3, [r7, #4]
 8022e26:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8022e28:	697b      	ldr	r3, [r7, #20]
 8022e2a:	685b      	ldr	r3, [r3, #4]
 8022e2c:	4798      	blx	r3

  now = sys_now();
 8022e2e:	f7ed f8ef 	bl	8010010 <sys_now>
 8022e32:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8022e34:	697b      	ldr	r3, [r7, #20]
 8022e36:	681a      	ldr	r2, [r3, #0]
 8022e38:	4b0f      	ldr	r3, [pc, #60]	; (8022e78 <lwip_cyclic_timer+0x5c>)
 8022e3a:	681b      	ldr	r3, [r3, #0]
 8022e3c:	4413      	add	r3, r2
 8022e3e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8022e40:	68fa      	ldr	r2, [r7, #12]
 8022e42:	693b      	ldr	r3, [r7, #16]
 8022e44:	1ad3      	subs	r3, r2, r3
 8022e46:	0fdb      	lsrs	r3, r3, #31
 8022e48:	f003 0301 	and.w	r3, r3, #1
 8022e4c:	b2db      	uxtb	r3, r3
 8022e4e:	2b00      	cmp	r3, #0
 8022e50:	d009      	beq.n	8022e66 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8022e52:	697b      	ldr	r3, [r7, #20]
 8022e54:	681a      	ldr	r2, [r3, #0]
 8022e56:	693b      	ldr	r3, [r7, #16]
 8022e58:	4413      	add	r3, r2
 8022e5a:	687a      	ldr	r2, [r7, #4]
 8022e5c:	4907      	ldr	r1, [pc, #28]	; (8022e7c <lwip_cyclic_timer+0x60>)
 8022e5e:	4618      	mov	r0, r3
 8022e60:	f7ff ff6e 	bl	8022d40 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8022e64:	e004      	b.n	8022e70 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8022e66:	687a      	ldr	r2, [r7, #4]
 8022e68:	4904      	ldr	r1, [pc, #16]	; (8022e7c <lwip_cyclic_timer+0x60>)
 8022e6a:	68f8      	ldr	r0, [r7, #12]
 8022e6c:	f7ff ff68 	bl	8022d40 <sys_timeout_abs>
}
 8022e70:	bf00      	nop
 8022e72:	3718      	adds	r7, #24
 8022e74:	46bd      	mov	sp, r7
 8022e76:	bd80      	pop	{r7, pc}
 8022e78:	20005a60 	.word	0x20005a60
 8022e7c:	08022e1d 	.word	0x08022e1d

08022e80 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8022e80:	b580      	push	{r7, lr}
 8022e82:	b082      	sub	sp, #8
 8022e84:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8022e86:	2301      	movs	r3, #1
 8022e88:	607b      	str	r3, [r7, #4]
 8022e8a:	e00e      	b.n	8022eaa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8022e8c:	4a0b      	ldr	r2, [pc, #44]	; (8022ebc <sys_timeouts_init+0x3c>)
 8022e8e:	687b      	ldr	r3, [r7, #4]
 8022e90:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8022e94:	687b      	ldr	r3, [r7, #4]
 8022e96:	00db      	lsls	r3, r3, #3
 8022e98:	4a08      	ldr	r2, [pc, #32]	; (8022ebc <sys_timeouts_init+0x3c>)
 8022e9a:	4413      	add	r3, r2
 8022e9c:	461a      	mov	r2, r3
 8022e9e:	4908      	ldr	r1, [pc, #32]	; (8022ec0 <sys_timeouts_init+0x40>)
 8022ea0:	f000 f810 	bl	8022ec4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8022ea4:	687b      	ldr	r3, [r7, #4]
 8022ea6:	3301      	adds	r3, #1
 8022ea8:	607b      	str	r3, [r7, #4]
 8022eaa:	687b      	ldr	r3, [r7, #4]
 8022eac:	2b02      	cmp	r3, #2
 8022eae:	d9ed      	bls.n	8022e8c <sys_timeouts_init+0xc>
  }
}
 8022eb0:	bf00      	nop
 8022eb2:	bf00      	nop
 8022eb4:	3708      	adds	r7, #8
 8022eb6:	46bd      	mov	sp, r7
 8022eb8:	bd80      	pop	{r7, pc}
 8022eba:	bf00      	nop
 8022ebc:	080608cc 	.word	0x080608cc
 8022ec0:	08022e1d 	.word	0x08022e1d

08022ec4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8022ec4:	b580      	push	{r7, lr}
 8022ec6:	b086      	sub	sp, #24
 8022ec8:	af00      	add	r7, sp, #0
 8022eca:	60f8      	str	r0, [r7, #12]
 8022ecc:	60b9      	str	r1, [r7, #8]
 8022ece:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8022ed0:	68fb      	ldr	r3, [r7, #12]
 8022ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022ed6:	d306      	bcc.n	8022ee6 <sys_timeout+0x22>
 8022ed8:	4b0a      	ldr	r3, [pc, #40]	; (8022f04 <sys_timeout+0x40>)
 8022eda:	f240 1229 	movw	r2, #297	; 0x129
 8022ede:	490a      	ldr	r1, [pc, #40]	; (8022f08 <sys_timeout+0x44>)
 8022ee0:	480a      	ldr	r0, [pc, #40]	; (8022f0c <sys_timeout+0x48>)
 8022ee2:	f003 feb9 	bl	8026c58 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8022ee6:	f7ed f893 	bl	8010010 <sys_now>
 8022eea:	4602      	mov	r2, r0
 8022eec:	68fb      	ldr	r3, [r7, #12]
 8022eee:	4413      	add	r3, r2
 8022ef0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8022ef2:	687a      	ldr	r2, [r7, #4]
 8022ef4:	68b9      	ldr	r1, [r7, #8]
 8022ef6:	6978      	ldr	r0, [r7, #20]
 8022ef8:	f7ff ff22 	bl	8022d40 <sys_timeout_abs>
#endif
}
 8022efc:	bf00      	nop
 8022efe:	3718      	adds	r7, #24
 8022f00:	46bd      	mov	sp, r7
 8022f02:	bd80      	pop	{r7, pc}
 8022f04:	0802f590 	.word	0x0802f590
 8022f08:	0802f62c 	.word	0x0802f62c
 8022f0c:	0802f604 	.word	0x0802f604

08022f10 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8022f10:	b580      	push	{r7, lr}
 8022f12:	b084      	sub	sp, #16
 8022f14:	af00      	add	r7, sp, #0
 8022f16:	6078      	str	r0, [r7, #4]
 8022f18:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8022f1a:	4b19      	ldr	r3, [pc, #100]	; (8022f80 <sys_untimeout+0x70>)
 8022f1c:	681b      	ldr	r3, [r3, #0]
 8022f1e:	2b00      	cmp	r3, #0
 8022f20:	d029      	beq.n	8022f76 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8022f22:	4b17      	ldr	r3, [pc, #92]	; (8022f80 <sys_untimeout+0x70>)
 8022f24:	681b      	ldr	r3, [r3, #0]
 8022f26:	60bb      	str	r3, [r7, #8]
 8022f28:	2300      	movs	r3, #0
 8022f2a:	60fb      	str	r3, [r7, #12]
 8022f2c:	e01f      	b.n	8022f6e <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8022f2e:	68bb      	ldr	r3, [r7, #8]
 8022f30:	689b      	ldr	r3, [r3, #8]
 8022f32:	687a      	ldr	r2, [r7, #4]
 8022f34:	429a      	cmp	r2, r3
 8022f36:	d115      	bne.n	8022f64 <sys_untimeout+0x54>
 8022f38:	68bb      	ldr	r3, [r7, #8]
 8022f3a:	68db      	ldr	r3, [r3, #12]
 8022f3c:	683a      	ldr	r2, [r7, #0]
 8022f3e:	429a      	cmp	r2, r3
 8022f40:	d110      	bne.n	8022f64 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8022f42:	68fb      	ldr	r3, [r7, #12]
 8022f44:	2b00      	cmp	r3, #0
 8022f46:	d104      	bne.n	8022f52 <sys_untimeout+0x42>
        next_timeout = t->next;
 8022f48:	68bb      	ldr	r3, [r7, #8]
 8022f4a:	681b      	ldr	r3, [r3, #0]
 8022f4c:	4a0c      	ldr	r2, [pc, #48]	; (8022f80 <sys_untimeout+0x70>)
 8022f4e:	6013      	str	r3, [r2, #0]
 8022f50:	e003      	b.n	8022f5a <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8022f52:	68bb      	ldr	r3, [r7, #8]
 8022f54:	681a      	ldr	r2, [r3, #0]
 8022f56:	68fb      	ldr	r3, [r7, #12]
 8022f58:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8022f5a:	68b9      	ldr	r1, [r7, #8]
 8022f5c:	200a      	movs	r0, #10
 8022f5e:	f7f8 fbaf 	bl	801b6c0 <memp_free>
      return;
 8022f62:	e009      	b.n	8022f78 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8022f64:	68bb      	ldr	r3, [r7, #8]
 8022f66:	60fb      	str	r3, [r7, #12]
 8022f68:	68bb      	ldr	r3, [r7, #8]
 8022f6a:	681b      	ldr	r3, [r3, #0]
 8022f6c:	60bb      	str	r3, [r7, #8]
 8022f6e:	68bb      	ldr	r3, [r7, #8]
 8022f70:	2b00      	cmp	r3, #0
 8022f72:	d1dc      	bne.n	8022f2e <sys_untimeout+0x1e>
    }
  }
  return;
 8022f74:	e000      	b.n	8022f78 <sys_untimeout+0x68>
    return;
 8022f76:	bf00      	nop
}
 8022f78:	3710      	adds	r7, #16
 8022f7a:	46bd      	mov	sp, r7
 8022f7c:	bd80      	pop	{r7, pc}
 8022f7e:	bf00      	nop
 8022f80:	20005a5c 	.word	0x20005a5c

08022f84 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8022f84:	b580      	push	{r7, lr}
 8022f86:	b084      	sub	sp, #16
 8022f88:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8022f8a:	f7ed f841 	bl	8010010 <sys_now>
 8022f8e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8022f90:	4b17      	ldr	r3, [pc, #92]	; (8022ff0 <sys_check_timeouts+0x6c>)
 8022f92:	681b      	ldr	r3, [r3, #0]
 8022f94:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8022f96:	68bb      	ldr	r3, [r7, #8]
 8022f98:	2b00      	cmp	r3, #0
 8022f9a:	d022      	beq.n	8022fe2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8022f9c:	68bb      	ldr	r3, [r7, #8]
 8022f9e:	685b      	ldr	r3, [r3, #4]
 8022fa0:	68fa      	ldr	r2, [r7, #12]
 8022fa2:	1ad3      	subs	r3, r2, r3
 8022fa4:	0fdb      	lsrs	r3, r3, #31
 8022fa6:	f003 0301 	and.w	r3, r3, #1
 8022faa:	b2db      	uxtb	r3, r3
 8022fac:	2b00      	cmp	r3, #0
 8022fae:	d11a      	bne.n	8022fe6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8022fb0:	68bb      	ldr	r3, [r7, #8]
 8022fb2:	681b      	ldr	r3, [r3, #0]
 8022fb4:	4a0e      	ldr	r2, [pc, #56]	; (8022ff0 <sys_check_timeouts+0x6c>)
 8022fb6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8022fb8:	68bb      	ldr	r3, [r7, #8]
 8022fba:	689b      	ldr	r3, [r3, #8]
 8022fbc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8022fbe:	68bb      	ldr	r3, [r7, #8]
 8022fc0:	68db      	ldr	r3, [r3, #12]
 8022fc2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8022fc4:	68bb      	ldr	r3, [r7, #8]
 8022fc6:	685b      	ldr	r3, [r3, #4]
 8022fc8:	4a0a      	ldr	r2, [pc, #40]	; (8022ff4 <sys_check_timeouts+0x70>)
 8022fca:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8022fcc:	68b9      	ldr	r1, [r7, #8]
 8022fce:	200a      	movs	r0, #10
 8022fd0:	f7f8 fb76 	bl	801b6c0 <memp_free>
    if (handler != NULL) {
 8022fd4:	687b      	ldr	r3, [r7, #4]
 8022fd6:	2b00      	cmp	r3, #0
 8022fd8:	d0da      	beq.n	8022f90 <sys_check_timeouts+0xc>
      handler(arg);
 8022fda:	687b      	ldr	r3, [r7, #4]
 8022fdc:	6838      	ldr	r0, [r7, #0]
 8022fde:	4798      	blx	r3
  do {
 8022fe0:	e7d6      	b.n	8022f90 <sys_check_timeouts+0xc>
      return;
 8022fe2:	bf00      	nop
 8022fe4:	e000      	b.n	8022fe8 <sys_check_timeouts+0x64>
      return;
 8022fe6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8022fe8:	3710      	adds	r7, #16
 8022fea:	46bd      	mov	sp, r7
 8022fec:	bd80      	pop	{r7, pc}
 8022fee:	bf00      	nop
 8022ff0:	20005a5c 	.word	0x20005a5c
 8022ff4:	20005a60 	.word	0x20005a60

08022ff8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8022ff8:	b580      	push	{r7, lr}
 8022ffa:	b082      	sub	sp, #8
 8022ffc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8022ffe:	4b16      	ldr	r3, [pc, #88]	; (8023058 <sys_timeouts_sleeptime+0x60>)
 8023000:	681b      	ldr	r3, [r3, #0]
 8023002:	2b00      	cmp	r3, #0
 8023004:	d102      	bne.n	802300c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8023006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802300a:	e020      	b.n	802304e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 802300c:	f7ed f800 	bl	8010010 <sys_now>
 8023010:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8023012:	4b11      	ldr	r3, [pc, #68]	; (8023058 <sys_timeouts_sleeptime+0x60>)
 8023014:	681b      	ldr	r3, [r3, #0]
 8023016:	685a      	ldr	r2, [r3, #4]
 8023018:	687b      	ldr	r3, [r7, #4]
 802301a:	1ad3      	subs	r3, r2, r3
 802301c:	0fdb      	lsrs	r3, r3, #31
 802301e:	f003 0301 	and.w	r3, r3, #1
 8023022:	b2db      	uxtb	r3, r3
 8023024:	2b00      	cmp	r3, #0
 8023026:	d001      	beq.n	802302c <sys_timeouts_sleeptime+0x34>
    return 0;
 8023028:	2300      	movs	r3, #0
 802302a:	e010      	b.n	802304e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 802302c:	4b0a      	ldr	r3, [pc, #40]	; (8023058 <sys_timeouts_sleeptime+0x60>)
 802302e:	681b      	ldr	r3, [r3, #0]
 8023030:	685a      	ldr	r2, [r3, #4]
 8023032:	687b      	ldr	r3, [r7, #4]
 8023034:	1ad3      	subs	r3, r2, r3
 8023036:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8023038:	683b      	ldr	r3, [r7, #0]
 802303a:	2b00      	cmp	r3, #0
 802303c:	da06      	bge.n	802304c <sys_timeouts_sleeptime+0x54>
 802303e:	4b07      	ldr	r3, [pc, #28]	; (802305c <sys_timeouts_sleeptime+0x64>)
 8023040:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8023044:	4906      	ldr	r1, [pc, #24]	; (8023060 <sys_timeouts_sleeptime+0x68>)
 8023046:	4807      	ldr	r0, [pc, #28]	; (8023064 <sys_timeouts_sleeptime+0x6c>)
 8023048:	f003 fe06 	bl	8026c58 <iprintf>
    return ret;
 802304c:	683b      	ldr	r3, [r7, #0]
  }
}
 802304e:	4618      	mov	r0, r3
 8023050:	3708      	adds	r7, #8
 8023052:	46bd      	mov	sp, r7
 8023054:	bd80      	pop	{r7, pc}
 8023056:	bf00      	nop
 8023058:	20005a5c 	.word	0x20005a5c
 802305c:	0802f590 	.word	0x0802f590
 8023060:	0802f664 	.word	0x0802f664
 8023064:	0802f604 	.word	0x0802f604

08023068 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8023068:	b580      	push	{r7, lr}
 802306a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 802306c:	f003 fe82 	bl	8026d74 <rand>
 8023070:	4603      	mov	r3, r0
 8023072:	b29b      	uxth	r3, r3
 8023074:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8023078:	b29b      	uxth	r3, r3
 802307a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 802307e:	b29a      	uxth	r2, r3
 8023080:	4b01      	ldr	r3, [pc, #4]	; (8023088 <udp_init+0x20>)
 8023082:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8023084:	bf00      	nop
 8023086:	bd80      	pop	{r7, pc}
 8023088:	20000060 	.word	0x20000060

0802308c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 802308c:	b480      	push	{r7}
 802308e:	b083      	sub	sp, #12
 8023090:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8023092:	2300      	movs	r3, #0
 8023094:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8023096:	4b17      	ldr	r3, [pc, #92]	; (80230f4 <udp_new_port+0x68>)
 8023098:	881b      	ldrh	r3, [r3, #0]
 802309a:	1c5a      	adds	r2, r3, #1
 802309c:	b291      	uxth	r1, r2
 802309e:	4a15      	ldr	r2, [pc, #84]	; (80230f4 <udp_new_port+0x68>)
 80230a0:	8011      	strh	r1, [r2, #0]
 80230a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80230a6:	4293      	cmp	r3, r2
 80230a8:	d103      	bne.n	80230b2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80230aa:	4b12      	ldr	r3, [pc, #72]	; (80230f4 <udp_new_port+0x68>)
 80230ac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80230b0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80230b2:	4b11      	ldr	r3, [pc, #68]	; (80230f8 <udp_new_port+0x6c>)
 80230b4:	681b      	ldr	r3, [r3, #0]
 80230b6:	603b      	str	r3, [r7, #0]
 80230b8:	e011      	b.n	80230de <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80230ba:	683b      	ldr	r3, [r7, #0]
 80230bc:	8a5a      	ldrh	r2, [r3, #18]
 80230be:	4b0d      	ldr	r3, [pc, #52]	; (80230f4 <udp_new_port+0x68>)
 80230c0:	881b      	ldrh	r3, [r3, #0]
 80230c2:	429a      	cmp	r2, r3
 80230c4:	d108      	bne.n	80230d8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80230c6:	88fb      	ldrh	r3, [r7, #6]
 80230c8:	3301      	adds	r3, #1
 80230ca:	80fb      	strh	r3, [r7, #6]
 80230cc:	88fb      	ldrh	r3, [r7, #6]
 80230ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80230d2:	d3e0      	bcc.n	8023096 <udp_new_port+0xa>
        return 0;
 80230d4:	2300      	movs	r3, #0
 80230d6:	e007      	b.n	80230e8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80230d8:	683b      	ldr	r3, [r7, #0]
 80230da:	68db      	ldr	r3, [r3, #12]
 80230dc:	603b      	str	r3, [r7, #0]
 80230de:	683b      	ldr	r3, [r7, #0]
 80230e0:	2b00      	cmp	r3, #0
 80230e2:	d1ea      	bne.n	80230ba <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80230e4:	4b03      	ldr	r3, [pc, #12]	; (80230f4 <udp_new_port+0x68>)
 80230e6:	881b      	ldrh	r3, [r3, #0]
}
 80230e8:	4618      	mov	r0, r3
 80230ea:	370c      	adds	r7, #12
 80230ec:	46bd      	mov	sp, r7
 80230ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230f2:	4770      	bx	lr
 80230f4:	20000060 	.word	0x20000060
 80230f8:	2001d534 	.word	0x2001d534

080230fc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80230fc:	b580      	push	{r7, lr}
 80230fe:	b084      	sub	sp, #16
 8023100:	af00      	add	r7, sp, #0
 8023102:	60f8      	str	r0, [r7, #12]
 8023104:	60b9      	str	r1, [r7, #8]
 8023106:	4613      	mov	r3, r2
 8023108:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 802310a:	68fb      	ldr	r3, [r7, #12]
 802310c:	2b00      	cmp	r3, #0
 802310e:	d105      	bne.n	802311c <udp_input_local_match+0x20>
 8023110:	4b27      	ldr	r3, [pc, #156]	; (80231b0 <udp_input_local_match+0xb4>)
 8023112:	2287      	movs	r2, #135	; 0x87
 8023114:	4927      	ldr	r1, [pc, #156]	; (80231b4 <udp_input_local_match+0xb8>)
 8023116:	4828      	ldr	r0, [pc, #160]	; (80231b8 <udp_input_local_match+0xbc>)
 8023118:	f003 fd9e 	bl	8026c58 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 802311c:	68bb      	ldr	r3, [r7, #8]
 802311e:	2b00      	cmp	r3, #0
 8023120:	d105      	bne.n	802312e <udp_input_local_match+0x32>
 8023122:	4b23      	ldr	r3, [pc, #140]	; (80231b0 <udp_input_local_match+0xb4>)
 8023124:	2288      	movs	r2, #136	; 0x88
 8023126:	4925      	ldr	r1, [pc, #148]	; (80231bc <udp_input_local_match+0xc0>)
 8023128:	4823      	ldr	r0, [pc, #140]	; (80231b8 <udp_input_local_match+0xbc>)
 802312a:	f003 fd95 	bl	8026c58 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802312e:	68fb      	ldr	r3, [r7, #12]
 8023130:	7a1b      	ldrb	r3, [r3, #8]
 8023132:	2b00      	cmp	r3, #0
 8023134:	d00b      	beq.n	802314e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8023136:	68fb      	ldr	r3, [r7, #12]
 8023138:	7a1a      	ldrb	r2, [r3, #8]
 802313a:	4b21      	ldr	r3, [pc, #132]	; (80231c0 <udp_input_local_match+0xc4>)
 802313c:	685b      	ldr	r3, [r3, #4]
 802313e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8023142:	3301      	adds	r3, #1
 8023144:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8023146:	429a      	cmp	r2, r3
 8023148:	d001      	beq.n	802314e <udp_input_local_match+0x52>
    return 0;
 802314a:	2300      	movs	r3, #0
 802314c:	e02b      	b.n	80231a6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 802314e:	79fb      	ldrb	r3, [r7, #7]
 8023150:	2b00      	cmp	r3, #0
 8023152:	d018      	beq.n	8023186 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8023154:	68fb      	ldr	r3, [r7, #12]
 8023156:	2b00      	cmp	r3, #0
 8023158:	d013      	beq.n	8023182 <udp_input_local_match+0x86>
 802315a:	68fb      	ldr	r3, [r7, #12]
 802315c:	681b      	ldr	r3, [r3, #0]
 802315e:	2b00      	cmp	r3, #0
 8023160:	d00f      	beq.n	8023182 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8023162:	4b17      	ldr	r3, [pc, #92]	; (80231c0 <udp_input_local_match+0xc4>)
 8023164:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8023166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802316a:	d00a      	beq.n	8023182 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 802316c:	68fb      	ldr	r3, [r7, #12]
 802316e:	681a      	ldr	r2, [r3, #0]
 8023170:	4b13      	ldr	r3, [pc, #76]	; (80231c0 <udp_input_local_match+0xc4>)
 8023172:	695b      	ldr	r3, [r3, #20]
 8023174:	405a      	eors	r2, r3
 8023176:	68bb      	ldr	r3, [r7, #8]
 8023178:	3308      	adds	r3, #8
 802317a:	681b      	ldr	r3, [r3, #0]
 802317c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 802317e:	2b00      	cmp	r3, #0
 8023180:	d110      	bne.n	80231a4 <udp_input_local_match+0xa8>
          return 1;
 8023182:	2301      	movs	r3, #1
 8023184:	e00f      	b.n	80231a6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8023186:	68fb      	ldr	r3, [r7, #12]
 8023188:	2b00      	cmp	r3, #0
 802318a:	d009      	beq.n	80231a0 <udp_input_local_match+0xa4>
 802318c:	68fb      	ldr	r3, [r7, #12]
 802318e:	681b      	ldr	r3, [r3, #0]
 8023190:	2b00      	cmp	r3, #0
 8023192:	d005      	beq.n	80231a0 <udp_input_local_match+0xa4>
 8023194:	68fb      	ldr	r3, [r7, #12]
 8023196:	681a      	ldr	r2, [r3, #0]
 8023198:	4b09      	ldr	r3, [pc, #36]	; (80231c0 <udp_input_local_match+0xc4>)
 802319a:	695b      	ldr	r3, [r3, #20]
 802319c:	429a      	cmp	r2, r3
 802319e:	d101      	bne.n	80231a4 <udp_input_local_match+0xa8>
        return 1;
 80231a0:	2301      	movs	r3, #1
 80231a2:	e000      	b.n	80231a6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80231a4:	2300      	movs	r3, #0
}
 80231a6:	4618      	mov	r0, r3
 80231a8:	3710      	adds	r7, #16
 80231aa:	46bd      	mov	sp, r7
 80231ac:	bd80      	pop	{r7, pc}
 80231ae:	bf00      	nop
 80231b0:	0802f678 	.word	0x0802f678
 80231b4:	0802f6a8 	.word	0x0802f6a8
 80231b8:	0802f6cc 	.word	0x0802f6cc
 80231bc:	0802f6f4 	.word	0x0802f6f4
 80231c0:	20012bd8 	.word	0x20012bd8

080231c4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80231c4:	b590      	push	{r4, r7, lr}
 80231c6:	b08d      	sub	sp, #52	; 0x34
 80231c8:	af02      	add	r7, sp, #8
 80231ca:	6078      	str	r0, [r7, #4]
 80231cc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80231ce:	2300      	movs	r3, #0
 80231d0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80231d2:	687b      	ldr	r3, [r7, #4]
 80231d4:	2b00      	cmp	r3, #0
 80231d6:	d105      	bne.n	80231e4 <udp_input+0x20>
 80231d8:	4b7c      	ldr	r3, [pc, #496]	; (80233cc <udp_input+0x208>)
 80231da:	22cf      	movs	r2, #207	; 0xcf
 80231dc:	497c      	ldr	r1, [pc, #496]	; (80233d0 <udp_input+0x20c>)
 80231de:	487d      	ldr	r0, [pc, #500]	; (80233d4 <udp_input+0x210>)
 80231e0:	f003 fd3a 	bl	8026c58 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80231e4:	683b      	ldr	r3, [r7, #0]
 80231e6:	2b00      	cmp	r3, #0
 80231e8:	d105      	bne.n	80231f6 <udp_input+0x32>
 80231ea:	4b78      	ldr	r3, [pc, #480]	; (80233cc <udp_input+0x208>)
 80231ec:	22d0      	movs	r2, #208	; 0xd0
 80231ee:	497a      	ldr	r1, [pc, #488]	; (80233d8 <udp_input+0x214>)
 80231f0:	4878      	ldr	r0, [pc, #480]	; (80233d4 <udp_input+0x210>)
 80231f2:	f003 fd31 	bl	8026c58 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80231f6:	687b      	ldr	r3, [r7, #4]
 80231f8:	895b      	ldrh	r3, [r3, #10]
 80231fa:	2b07      	cmp	r3, #7
 80231fc:	d803      	bhi.n	8023206 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80231fe:	6878      	ldr	r0, [r7, #4]
 8023200:	f7f9 f902 	bl	801c408 <pbuf_free>
    goto end;
 8023204:	e0de      	b.n	80233c4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8023206:	687b      	ldr	r3, [r7, #4]
 8023208:	685b      	ldr	r3, [r3, #4]
 802320a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 802320c:	4b73      	ldr	r3, [pc, #460]	; (80233dc <udp_input+0x218>)
 802320e:	695b      	ldr	r3, [r3, #20]
 8023210:	4a72      	ldr	r2, [pc, #456]	; (80233dc <udp_input+0x218>)
 8023212:	6812      	ldr	r2, [r2, #0]
 8023214:	4611      	mov	r1, r2
 8023216:	4618      	mov	r0, r3
 8023218:	f001 ff0a 	bl	8025030 <ip4_addr_isbroadcast_u32>
 802321c:	4603      	mov	r3, r0
 802321e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8023220:	697b      	ldr	r3, [r7, #20]
 8023222:	881b      	ldrh	r3, [r3, #0]
 8023224:	b29b      	uxth	r3, r3
 8023226:	4618      	mov	r0, r3
 8023228:	f7f7 fcb0 	bl	801ab8c <lwip_htons>
 802322c:	4603      	mov	r3, r0
 802322e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8023230:	697b      	ldr	r3, [r7, #20]
 8023232:	885b      	ldrh	r3, [r3, #2]
 8023234:	b29b      	uxth	r3, r3
 8023236:	4618      	mov	r0, r3
 8023238:	f7f7 fca8 	bl	801ab8c <lwip_htons>
 802323c:	4603      	mov	r3, r0
 802323e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8023240:	2300      	movs	r3, #0
 8023242:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8023244:	2300      	movs	r3, #0
 8023246:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8023248:	2300      	movs	r3, #0
 802324a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802324c:	4b64      	ldr	r3, [pc, #400]	; (80233e0 <udp_input+0x21c>)
 802324e:	681b      	ldr	r3, [r3, #0]
 8023250:	627b      	str	r3, [r7, #36]	; 0x24
 8023252:	e054      	b.n	80232fe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8023254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023256:	8a5b      	ldrh	r3, [r3, #18]
 8023258:	89fa      	ldrh	r2, [r7, #14]
 802325a:	429a      	cmp	r2, r3
 802325c:	d14a      	bne.n	80232f4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 802325e:	7cfb      	ldrb	r3, [r7, #19]
 8023260:	461a      	mov	r2, r3
 8023262:	6839      	ldr	r1, [r7, #0]
 8023264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023266:	f7ff ff49 	bl	80230fc <udp_input_local_match>
 802326a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 802326c:	2b00      	cmp	r3, #0
 802326e:	d041      	beq.n	80232f4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8023270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023272:	7c1b      	ldrb	r3, [r3, #16]
 8023274:	f003 0304 	and.w	r3, r3, #4
 8023278:	2b00      	cmp	r3, #0
 802327a:	d11d      	bne.n	80232b8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 802327c:	69fb      	ldr	r3, [r7, #28]
 802327e:	2b00      	cmp	r3, #0
 8023280:	d102      	bne.n	8023288 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8023282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023284:	61fb      	str	r3, [r7, #28]
 8023286:	e017      	b.n	80232b8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8023288:	7cfb      	ldrb	r3, [r7, #19]
 802328a:	2b00      	cmp	r3, #0
 802328c:	d014      	beq.n	80232b8 <udp_input+0xf4>
 802328e:	4b53      	ldr	r3, [pc, #332]	; (80233dc <udp_input+0x218>)
 8023290:	695b      	ldr	r3, [r3, #20]
 8023292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8023296:	d10f      	bne.n	80232b8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8023298:	69fb      	ldr	r3, [r7, #28]
 802329a:	681a      	ldr	r2, [r3, #0]
 802329c:	683b      	ldr	r3, [r7, #0]
 802329e:	3304      	adds	r3, #4
 80232a0:	681b      	ldr	r3, [r3, #0]
 80232a2:	429a      	cmp	r2, r3
 80232a4:	d008      	beq.n	80232b8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80232a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232a8:	681a      	ldr	r2, [r3, #0]
 80232aa:	683b      	ldr	r3, [r7, #0]
 80232ac:	3304      	adds	r3, #4
 80232ae:	681b      	ldr	r3, [r3, #0]
 80232b0:	429a      	cmp	r2, r3
 80232b2:	d101      	bne.n	80232b8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80232b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232b6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80232b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232ba:	8a9b      	ldrh	r3, [r3, #20]
 80232bc:	8a3a      	ldrh	r2, [r7, #16]
 80232be:	429a      	cmp	r2, r3
 80232c0:	d118      	bne.n	80232f4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80232c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232c4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80232c6:	2b00      	cmp	r3, #0
 80232c8:	d005      	beq.n	80232d6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80232ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232cc:	685a      	ldr	r2, [r3, #4]
 80232ce:	4b43      	ldr	r3, [pc, #268]	; (80233dc <udp_input+0x218>)
 80232d0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80232d2:	429a      	cmp	r2, r3
 80232d4:	d10e      	bne.n	80232f4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80232d6:	6a3b      	ldr	r3, [r7, #32]
 80232d8:	2b00      	cmp	r3, #0
 80232da:	d014      	beq.n	8023306 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80232dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232de:	68da      	ldr	r2, [r3, #12]
 80232e0:	6a3b      	ldr	r3, [r7, #32]
 80232e2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80232e4:	4b3e      	ldr	r3, [pc, #248]	; (80233e0 <udp_input+0x21c>)
 80232e6:	681a      	ldr	r2, [r3, #0]
 80232e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232ea:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80232ec:	4a3c      	ldr	r2, [pc, #240]	; (80233e0 <udp_input+0x21c>)
 80232ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232f0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80232f2:	e008      	b.n	8023306 <udp_input+0x142>
      }
    }

    prev = pcb;
 80232f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232f6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80232f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232fa:	68db      	ldr	r3, [r3, #12]
 80232fc:	627b      	str	r3, [r7, #36]	; 0x24
 80232fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023300:	2b00      	cmp	r3, #0
 8023302:	d1a7      	bne.n	8023254 <udp_input+0x90>
 8023304:	e000      	b.n	8023308 <udp_input+0x144>
        break;
 8023306:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8023308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802330a:	2b00      	cmp	r3, #0
 802330c:	d101      	bne.n	8023312 <udp_input+0x14e>
    pcb = uncon_pcb;
 802330e:	69fb      	ldr	r3, [r7, #28]
 8023310:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8023312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023314:	2b00      	cmp	r3, #0
 8023316:	d002      	beq.n	802331e <udp_input+0x15a>
    for_us = 1;
 8023318:	2301      	movs	r3, #1
 802331a:	76fb      	strb	r3, [r7, #27]
 802331c:	e00a      	b.n	8023334 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 802331e:	683b      	ldr	r3, [r7, #0]
 8023320:	3304      	adds	r3, #4
 8023322:	681a      	ldr	r2, [r3, #0]
 8023324:	4b2d      	ldr	r3, [pc, #180]	; (80233dc <udp_input+0x218>)
 8023326:	695b      	ldr	r3, [r3, #20]
 8023328:	429a      	cmp	r2, r3
 802332a:	bf0c      	ite	eq
 802332c:	2301      	moveq	r3, #1
 802332e:	2300      	movne	r3, #0
 8023330:	b2db      	uxtb	r3, r3
 8023332:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8023334:	7efb      	ldrb	r3, [r7, #27]
 8023336:	2b00      	cmp	r3, #0
 8023338:	d041      	beq.n	80233be <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 802333a:	2108      	movs	r1, #8
 802333c:	6878      	ldr	r0, [r7, #4]
 802333e:	f7f8 ffdd 	bl	801c2fc <pbuf_remove_header>
 8023342:	4603      	mov	r3, r0
 8023344:	2b00      	cmp	r3, #0
 8023346:	d00a      	beq.n	802335e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8023348:	4b20      	ldr	r3, [pc, #128]	; (80233cc <udp_input+0x208>)
 802334a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 802334e:	4925      	ldr	r1, [pc, #148]	; (80233e4 <udp_input+0x220>)
 8023350:	4820      	ldr	r0, [pc, #128]	; (80233d4 <udp_input+0x210>)
 8023352:	f003 fc81 	bl	8026c58 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8023356:	6878      	ldr	r0, [r7, #4]
 8023358:	f7f9 f856 	bl	801c408 <pbuf_free>
      goto end;
 802335c:	e032      	b.n	80233c4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 802335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023360:	2b00      	cmp	r3, #0
 8023362:	d012      	beq.n	802338a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8023364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023366:	699b      	ldr	r3, [r3, #24]
 8023368:	2b00      	cmp	r3, #0
 802336a:	d00a      	beq.n	8023382 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 802336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802336e:	699c      	ldr	r4, [r3, #24]
 8023370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023372:	69d8      	ldr	r0, [r3, #28]
 8023374:	8a3b      	ldrh	r3, [r7, #16]
 8023376:	9300      	str	r3, [sp, #0]
 8023378:	4b1b      	ldr	r3, [pc, #108]	; (80233e8 <udp_input+0x224>)
 802337a:	687a      	ldr	r2, [r7, #4]
 802337c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802337e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8023380:	e021      	b.n	80233c6 <udp_input+0x202>
        pbuf_free(p);
 8023382:	6878      	ldr	r0, [r7, #4]
 8023384:	f7f9 f840 	bl	801c408 <pbuf_free>
        goto end;
 8023388:	e01c      	b.n	80233c4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 802338a:	7cfb      	ldrb	r3, [r7, #19]
 802338c:	2b00      	cmp	r3, #0
 802338e:	d112      	bne.n	80233b6 <udp_input+0x1f2>
 8023390:	4b12      	ldr	r3, [pc, #72]	; (80233dc <udp_input+0x218>)
 8023392:	695b      	ldr	r3, [r3, #20]
 8023394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023398:	2be0      	cmp	r3, #224	; 0xe0
 802339a:	d00c      	beq.n	80233b6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 802339c:	4b0f      	ldr	r3, [pc, #60]	; (80233dc <udp_input+0x218>)
 802339e:	899b      	ldrh	r3, [r3, #12]
 80233a0:	3308      	adds	r3, #8
 80233a2:	b29b      	uxth	r3, r3
 80233a4:	b21b      	sxth	r3, r3
 80233a6:	4619      	mov	r1, r3
 80233a8:	6878      	ldr	r0, [r7, #4]
 80233aa:	f7f9 f81a 	bl	801c3e2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80233ae:	2103      	movs	r1, #3
 80233b0:	6878      	ldr	r0, [r7, #4]
 80233b2:	f001 fb1d 	bl	80249f0 <icmp_dest_unreach>
      pbuf_free(p);
 80233b6:	6878      	ldr	r0, [r7, #4]
 80233b8:	f7f9 f826 	bl	801c408 <pbuf_free>
  return;
 80233bc:	e003      	b.n	80233c6 <udp_input+0x202>
    pbuf_free(p);
 80233be:	6878      	ldr	r0, [r7, #4]
 80233c0:	f7f9 f822 	bl	801c408 <pbuf_free>
  return;
 80233c4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80233c6:	372c      	adds	r7, #44	; 0x2c
 80233c8:	46bd      	mov	sp, r7
 80233ca:	bd90      	pop	{r4, r7, pc}
 80233cc:	0802f678 	.word	0x0802f678
 80233d0:	0802f71c 	.word	0x0802f71c
 80233d4:	0802f6cc 	.word	0x0802f6cc
 80233d8:	0802f734 	.word	0x0802f734
 80233dc:	20012bd8 	.word	0x20012bd8
 80233e0:	2001d534 	.word	0x2001d534
 80233e4:	0802f750 	.word	0x0802f750
 80233e8:	20012be8 	.word	0x20012be8

080233ec <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80233ec:	b580      	push	{r7, lr}
 80233ee:	b088      	sub	sp, #32
 80233f0:	af02      	add	r7, sp, #8
 80233f2:	60f8      	str	r0, [r7, #12]
 80233f4:	60b9      	str	r1, [r7, #8]
 80233f6:	607a      	str	r2, [r7, #4]
 80233f8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80233fa:	68fb      	ldr	r3, [r7, #12]
 80233fc:	2b00      	cmp	r3, #0
 80233fe:	d109      	bne.n	8023414 <udp_sendto+0x28>
 8023400:	4b23      	ldr	r3, [pc, #140]	; (8023490 <udp_sendto+0xa4>)
 8023402:	f44f 7206 	mov.w	r2, #536	; 0x218
 8023406:	4923      	ldr	r1, [pc, #140]	; (8023494 <udp_sendto+0xa8>)
 8023408:	4823      	ldr	r0, [pc, #140]	; (8023498 <udp_sendto+0xac>)
 802340a:	f003 fc25 	bl	8026c58 <iprintf>
 802340e:	f06f 030f 	mvn.w	r3, #15
 8023412:	e038      	b.n	8023486 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8023414:	68bb      	ldr	r3, [r7, #8]
 8023416:	2b00      	cmp	r3, #0
 8023418:	d109      	bne.n	802342e <udp_sendto+0x42>
 802341a:	4b1d      	ldr	r3, [pc, #116]	; (8023490 <udp_sendto+0xa4>)
 802341c:	f240 2219 	movw	r2, #537	; 0x219
 8023420:	491e      	ldr	r1, [pc, #120]	; (802349c <udp_sendto+0xb0>)
 8023422:	481d      	ldr	r0, [pc, #116]	; (8023498 <udp_sendto+0xac>)
 8023424:	f003 fc18 	bl	8026c58 <iprintf>
 8023428:	f06f 030f 	mvn.w	r3, #15
 802342c:	e02b      	b.n	8023486 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 802342e:	687b      	ldr	r3, [r7, #4]
 8023430:	2b00      	cmp	r3, #0
 8023432:	d109      	bne.n	8023448 <udp_sendto+0x5c>
 8023434:	4b16      	ldr	r3, [pc, #88]	; (8023490 <udp_sendto+0xa4>)
 8023436:	f240 221a 	movw	r2, #538	; 0x21a
 802343a:	4919      	ldr	r1, [pc, #100]	; (80234a0 <udp_sendto+0xb4>)
 802343c:	4816      	ldr	r0, [pc, #88]	; (8023498 <udp_sendto+0xac>)
 802343e:	f003 fc0b 	bl	8026c58 <iprintf>
 8023442:	f06f 030f 	mvn.w	r3, #15
 8023446:	e01e      	b.n	8023486 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8023448:	68fb      	ldr	r3, [r7, #12]
 802344a:	7a1b      	ldrb	r3, [r3, #8]
 802344c:	2b00      	cmp	r3, #0
 802344e:	d006      	beq.n	802345e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8023450:	68fb      	ldr	r3, [r7, #12]
 8023452:	7a1b      	ldrb	r3, [r3, #8]
 8023454:	4618      	mov	r0, r3
 8023456:	f7f8 fc49 	bl	801bcec <netif_get_by_index>
 802345a:	6178      	str	r0, [r7, #20]
 802345c:	e003      	b.n	8023466 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 802345e:	6878      	ldr	r0, [r7, #4]
 8023460:	f001 fb50 	bl	8024b04 <ip4_route>
 8023464:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8023466:	697b      	ldr	r3, [r7, #20]
 8023468:	2b00      	cmp	r3, #0
 802346a:	d102      	bne.n	8023472 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 802346c:	f06f 0303 	mvn.w	r3, #3
 8023470:	e009      	b.n	8023486 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8023472:	887a      	ldrh	r2, [r7, #2]
 8023474:	697b      	ldr	r3, [r7, #20]
 8023476:	9300      	str	r3, [sp, #0]
 8023478:	4613      	mov	r3, r2
 802347a:	687a      	ldr	r2, [r7, #4]
 802347c:	68b9      	ldr	r1, [r7, #8]
 802347e:	68f8      	ldr	r0, [r7, #12]
 8023480:	f000 f810 	bl	80234a4 <udp_sendto_if>
 8023484:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8023486:	4618      	mov	r0, r3
 8023488:	3718      	adds	r7, #24
 802348a:	46bd      	mov	sp, r7
 802348c:	bd80      	pop	{r7, pc}
 802348e:	bf00      	nop
 8023490:	0802f678 	.word	0x0802f678
 8023494:	0802f79c 	.word	0x0802f79c
 8023498:	0802f6cc 	.word	0x0802f6cc
 802349c:	0802f7b4 	.word	0x0802f7b4
 80234a0:	0802f7d0 	.word	0x0802f7d0

080234a4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80234a4:	b580      	push	{r7, lr}
 80234a6:	b088      	sub	sp, #32
 80234a8:	af02      	add	r7, sp, #8
 80234aa:	60f8      	str	r0, [r7, #12]
 80234ac:	60b9      	str	r1, [r7, #8]
 80234ae:	607a      	str	r2, [r7, #4]
 80234b0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80234b2:	68fb      	ldr	r3, [r7, #12]
 80234b4:	2b00      	cmp	r3, #0
 80234b6:	d109      	bne.n	80234cc <udp_sendto_if+0x28>
 80234b8:	4b2e      	ldr	r3, [pc, #184]	; (8023574 <udp_sendto_if+0xd0>)
 80234ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80234be:	492e      	ldr	r1, [pc, #184]	; (8023578 <udp_sendto_if+0xd4>)
 80234c0:	482e      	ldr	r0, [pc, #184]	; (802357c <udp_sendto_if+0xd8>)
 80234c2:	f003 fbc9 	bl	8026c58 <iprintf>
 80234c6:	f06f 030f 	mvn.w	r3, #15
 80234ca:	e04f      	b.n	802356c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80234cc:	68bb      	ldr	r3, [r7, #8]
 80234ce:	2b00      	cmp	r3, #0
 80234d0:	d109      	bne.n	80234e6 <udp_sendto_if+0x42>
 80234d2:	4b28      	ldr	r3, [pc, #160]	; (8023574 <udp_sendto_if+0xd0>)
 80234d4:	f240 2281 	movw	r2, #641	; 0x281
 80234d8:	4929      	ldr	r1, [pc, #164]	; (8023580 <udp_sendto_if+0xdc>)
 80234da:	4828      	ldr	r0, [pc, #160]	; (802357c <udp_sendto_if+0xd8>)
 80234dc:	f003 fbbc 	bl	8026c58 <iprintf>
 80234e0:	f06f 030f 	mvn.w	r3, #15
 80234e4:	e042      	b.n	802356c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80234e6:	687b      	ldr	r3, [r7, #4]
 80234e8:	2b00      	cmp	r3, #0
 80234ea:	d109      	bne.n	8023500 <udp_sendto_if+0x5c>
 80234ec:	4b21      	ldr	r3, [pc, #132]	; (8023574 <udp_sendto_if+0xd0>)
 80234ee:	f240 2282 	movw	r2, #642	; 0x282
 80234f2:	4924      	ldr	r1, [pc, #144]	; (8023584 <udp_sendto_if+0xe0>)
 80234f4:	4821      	ldr	r0, [pc, #132]	; (802357c <udp_sendto_if+0xd8>)
 80234f6:	f003 fbaf 	bl	8026c58 <iprintf>
 80234fa:	f06f 030f 	mvn.w	r3, #15
 80234fe:	e035      	b.n	802356c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8023500:	6a3b      	ldr	r3, [r7, #32]
 8023502:	2b00      	cmp	r3, #0
 8023504:	d109      	bne.n	802351a <udp_sendto_if+0x76>
 8023506:	4b1b      	ldr	r3, [pc, #108]	; (8023574 <udp_sendto_if+0xd0>)
 8023508:	f240 2283 	movw	r2, #643	; 0x283
 802350c:	491e      	ldr	r1, [pc, #120]	; (8023588 <udp_sendto_if+0xe4>)
 802350e:	481b      	ldr	r0, [pc, #108]	; (802357c <udp_sendto_if+0xd8>)
 8023510:	f003 fba2 	bl	8026c58 <iprintf>
 8023514:	f06f 030f 	mvn.w	r3, #15
 8023518:	e028      	b.n	802356c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 802351a:	68fb      	ldr	r3, [r7, #12]
 802351c:	2b00      	cmp	r3, #0
 802351e:	d009      	beq.n	8023534 <udp_sendto_if+0x90>
 8023520:	68fb      	ldr	r3, [r7, #12]
 8023522:	681b      	ldr	r3, [r3, #0]
 8023524:	2b00      	cmp	r3, #0
 8023526:	d005      	beq.n	8023534 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8023528:	68fb      	ldr	r3, [r7, #12]
 802352a:	681b      	ldr	r3, [r3, #0]
 802352c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8023530:	2be0      	cmp	r3, #224	; 0xe0
 8023532:	d103      	bne.n	802353c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8023534:	6a3b      	ldr	r3, [r7, #32]
 8023536:	3304      	adds	r3, #4
 8023538:	617b      	str	r3, [r7, #20]
 802353a:	e00b      	b.n	8023554 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 802353c:	68fb      	ldr	r3, [r7, #12]
 802353e:	681a      	ldr	r2, [r3, #0]
 8023540:	6a3b      	ldr	r3, [r7, #32]
 8023542:	3304      	adds	r3, #4
 8023544:	681b      	ldr	r3, [r3, #0]
 8023546:	429a      	cmp	r2, r3
 8023548:	d002      	beq.n	8023550 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 802354a:	f06f 0303 	mvn.w	r3, #3
 802354e:	e00d      	b.n	802356c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8023550:	68fb      	ldr	r3, [r7, #12]
 8023552:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8023554:	887a      	ldrh	r2, [r7, #2]
 8023556:	697b      	ldr	r3, [r7, #20]
 8023558:	9301      	str	r3, [sp, #4]
 802355a:	6a3b      	ldr	r3, [r7, #32]
 802355c:	9300      	str	r3, [sp, #0]
 802355e:	4613      	mov	r3, r2
 8023560:	687a      	ldr	r2, [r7, #4]
 8023562:	68b9      	ldr	r1, [r7, #8]
 8023564:	68f8      	ldr	r0, [r7, #12]
 8023566:	f000 f811 	bl	802358c <udp_sendto_if_src>
 802356a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 802356c:	4618      	mov	r0, r3
 802356e:	3718      	adds	r7, #24
 8023570:	46bd      	mov	sp, r7
 8023572:	bd80      	pop	{r7, pc}
 8023574:	0802f678 	.word	0x0802f678
 8023578:	0802f7ec 	.word	0x0802f7ec
 802357c:	0802f6cc 	.word	0x0802f6cc
 8023580:	0802f808 	.word	0x0802f808
 8023584:	0802f824 	.word	0x0802f824
 8023588:	0802f844 	.word	0x0802f844

0802358c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 802358c:	b580      	push	{r7, lr}
 802358e:	b08c      	sub	sp, #48	; 0x30
 8023590:	af04      	add	r7, sp, #16
 8023592:	60f8      	str	r0, [r7, #12]
 8023594:	60b9      	str	r1, [r7, #8]
 8023596:	607a      	str	r2, [r7, #4]
 8023598:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 802359a:	68fb      	ldr	r3, [r7, #12]
 802359c:	2b00      	cmp	r3, #0
 802359e:	d109      	bne.n	80235b4 <udp_sendto_if_src+0x28>
 80235a0:	4b65      	ldr	r3, [pc, #404]	; (8023738 <udp_sendto_if_src+0x1ac>)
 80235a2:	f240 22d1 	movw	r2, #721	; 0x2d1
 80235a6:	4965      	ldr	r1, [pc, #404]	; (802373c <udp_sendto_if_src+0x1b0>)
 80235a8:	4865      	ldr	r0, [pc, #404]	; (8023740 <udp_sendto_if_src+0x1b4>)
 80235aa:	f003 fb55 	bl	8026c58 <iprintf>
 80235ae:	f06f 030f 	mvn.w	r3, #15
 80235b2:	e0bc      	b.n	802372e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80235b4:	68bb      	ldr	r3, [r7, #8]
 80235b6:	2b00      	cmp	r3, #0
 80235b8:	d109      	bne.n	80235ce <udp_sendto_if_src+0x42>
 80235ba:	4b5f      	ldr	r3, [pc, #380]	; (8023738 <udp_sendto_if_src+0x1ac>)
 80235bc:	f240 22d2 	movw	r2, #722	; 0x2d2
 80235c0:	4960      	ldr	r1, [pc, #384]	; (8023744 <udp_sendto_if_src+0x1b8>)
 80235c2:	485f      	ldr	r0, [pc, #380]	; (8023740 <udp_sendto_if_src+0x1b4>)
 80235c4:	f003 fb48 	bl	8026c58 <iprintf>
 80235c8:	f06f 030f 	mvn.w	r3, #15
 80235cc:	e0af      	b.n	802372e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80235ce:	687b      	ldr	r3, [r7, #4]
 80235d0:	2b00      	cmp	r3, #0
 80235d2:	d109      	bne.n	80235e8 <udp_sendto_if_src+0x5c>
 80235d4:	4b58      	ldr	r3, [pc, #352]	; (8023738 <udp_sendto_if_src+0x1ac>)
 80235d6:	f240 22d3 	movw	r2, #723	; 0x2d3
 80235da:	495b      	ldr	r1, [pc, #364]	; (8023748 <udp_sendto_if_src+0x1bc>)
 80235dc:	4858      	ldr	r0, [pc, #352]	; (8023740 <udp_sendto_if_src+0x1b4>)
 80235de:	f003 fb3b 	bl	8026c58 <iprintf>
 80235e2:	f06f 030f 	mvn.w	r3, #15
 80235e6:	e0a2      	b.n	802372e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80235e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80235ea:	2b00      	cmp	r3, #0
 80235ec:	d109      	bne.n	8023602 <udp_sendto_if_src+0x76>
 80235ee:	4b52      	ldr	r3, [pc, #328]	; (8023738 <udp_sendto_if_src+0x1ac>)
 80235f0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80235f4:	4955      	ldr	r1, [pc, #340]	; (802374c <udp_sendto_if_src+0x1c0>)
 80235f6:	4852      	ldr	r0, [pc, #328]	; (8023740 <udp_sendto_if_src+0x1b4>)
 80235f8:	f003 fb2e 	bl	8026c58 <iprintf>
 80235fc:	f06f 030f 	mvn.w	r3, #15
 8023600:	e095      	b.n	802372e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8023602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023604:	2b00      	cmp	r3, #0
 8023606:	d109      	bne.n	802361c <udp_sendto_if_src+0x90>
 8023608:	4b4b      	ldr	r3, [pc, #300]	; (8023738 <udp_sendto_if_src+0x1ac>)
 802360a:	f240 22d5 	movw	r2, #725	; 0x2d5
 802360e:	4950      	ldr	r1, [pc, #320]	; (8023750 <udp_sendto_if_src+0x1c4>)
 8023610:	484b      	ldr	r0, [pc, #300]	; (8023740 <udp_sendto_if_src+0x1b4>)
 8023612:	f003 fb21 	bl	8026c58 <iprintf>
 8023616:	f06f 030f 	mvn.w	r3, #15
 802361a:	e088      	b.n	802372e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 802361c:	68fb      	ldr	r3, [r7, #12]
 802361e:	8a5b      	ldrh	r3, [r3, #18]
 8023620:	2b00      	cmp	r3, #0
 8023622:	d10f      	bne.n	8023644 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8023624:	68f9      	ldr	r1, [r7, #12]
 8023626:	68fb      	ldr	r3, [r7, #12]
 8023628:	8a5b      	ldrh	r3, [r3, #18]
 802362a:	461a      	mov	r2, r3
 802362c:	68f8      	ldr	r0, [r7, #12]
 802362e:	f000 f893 	bl	8023758 <udp_bind>
 8023632:	4603      	mov	r3, r0
 8023634:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8023636:	f997 301b 	ldrsb.w	r3, [r7, #27]
 802363a:	2b00      	cmp	r3, #0
 802363c:	d002      	beq.n	8023644 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 802363e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8023642:	e074      	b.n	802372e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8023644:	68bb      	ldr	r3, [r7, #8]
 8023646:	891b      	ldrh	r3, [r3, #8]
 8023648:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 802364c:	4293      	cmp	r3, r2
 802364e:	d902      	bls.n	8023656 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8023650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023654:	e06b      	b.n	802372e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8023656:	2108      	movs	r1, #8
 8023658:	68b8      	ldr	r0, [r7, #8]
 802365a:	f7f8 fe3f 	bl	801c2dc <pbuf_add_header>
 802365e:	4603      	mov	r3, r0
 8023660:	2b00      	cmp	r3, #0
 8023662:	d015      	beq.n	8023690 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8023664:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023668:	2108      	movs	r1, #8
 802366a:	2022      	movs	r0, #34	; 0x22
 802366c:	f7f8 fbe8 	bl	801be40 <pbuf_alloc>
 8023670:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8023672:	69fb      	ldr	r3, [r7, #28]
 8023674:	2b00      	cmp	r3, #0
 8023676:	d102      	bne.n	802367e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8023678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802367c:	e057      	b.n	802372e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 802367e:	68bb      	ldr	r3, [r7, #8]
 8023680:	891b      	ldrh	r3, [r3, #8]
 8023682:	2b00      	cmp	r3, #0
 8023684:	d006      	beq.n	8023694 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8023686:	68b9      	ldr	r1, [r7, #8]
 8023688:	69f8      	ldr	r0, [r7, #28]
 802368a:	f7f8 ffe1 	bl	801c650 <pbuf_chain>
 802368e:	e001      	b.n	8023694 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8023690:	68bb      	ldr	r3, [r7, #8]
 8023692:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8023694:	69fb      	ldr	r3, [r7, #28]
 8023696:	895b      	ldrh	r3, [r3, #10]
 8023698:	2b07      	cmp	r3, #7
 802369a:	d806      	bhi.n	80236aa <udp_sendto_if_src+0x11e>
 802369c:	4b26      	ldr	r3, [pc, #152]	; (8023738 <udp_sendto_if_src+0x1ac>)
 802369e:	f240 320d 	movw	r2, #781	; 0x30d
 80236a2:	492c      	ldr	r1, [pc, #176]	; (8023754 <udp_sendto_if_src+0x1c8>)
 80236a4:	4826      	ldr	r0, [pc, #152]	; (8023740 <udp_sendto_if_src+0x1b4>)
 80236a6:	f003 fad7 	bl	8026c58 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80236aa:	69fb      	ldr	r3, [r7, #28]
 80236ac:	685b      	ldr	r3, [r3, #4]
 80236ae:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80236b0:	68fb      	ldr	r3, [r7, #12]
 80236b2:	8a5b      	ldrh	r3, [r3, #18]
 80236b4:	4618      	mov	r0, r3
 80236b6:	f7f7 fa69 	bl	801ab8c <lwip_htons>
 80236ba:	4603      	mov	r3, r0
 80236bc:	461a      	mov	r2, r3
 80236be:	697b      	ldr	r3, [r7, #20]
 80236c0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80236c2:	887b      	ldrh	r3, [r7, #2]
 80236c4:	4618      	mov	r0, r3
 80236c6:	f7f7 fa61 	bl	801ab8c <lwip_htons>
 80236ca:	4603      	mov	r3, r0
 80236cc:	461a      	mov	r2, r3
 80236ce:	697b      	ldr	r3, [r7, #20]
 80236d0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80236d2:	697b      	ldr	r3, [r7, #20]
 80236d4:	2200      	movs	r2, #0
 80236d6:	719a      	strb	r2, [r3, #6]
 80236d8:	2200      	movs	r2, #0
 80236da:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80236dc:	69fb      	ldr	r3, [r7, #28]
 80236de:	891b      	ldrh	r3, [r3, #8]
 80236e0:	4618      	mov	r0, r3
 80236e2:	f7f7 fa53 	bl	801ab8c <lwip_htons>
 80236e6:	4603      	mov	r3, r0
 80236e8:	461a      	mov	r2, r3
 80236ea:	697b      	ldr	r3, [r7, #20]
 80236ec:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80236ee:	2311      	movs	r3, #17
 80236f0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80236f2:	68fb      	ldr	r3, [r7, #12]
 80236f4:	7adb      	ldrb	r3, [r3, #11]
 80236f6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80236f8:	68fb      	ldr	r3, [r7, #12]
 80236fa:	7a9b      	ldrb	r3, [r3, #10]
 80236fc:	7cb9      	ldrb	r1, [r7, #18]
 80236fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023700:	9202      	str	r2, [sp, #8]
 8023702:	7cfa      	ldrb	r2, [r7, #19]
 8023704:	9201      	str	r2, [sp, #4]
 8023706:	9300      	str	r3, [sp, #0]
 8023708:	460b      	mov	r3, r1
 802370a:	687a      	ldr	r2, [r7, #4]
 802370c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802370e:	69f8      	ldr	r0, [r7, #28]
 8023710:	f001 fbe0 	bl	8024ed4 <ip4_output_if_src>
 8023714:	4603      	mov	r3, r0
 8023716:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8023718:	69fa      	ldr	r2, [r7, #28]
 802371a:	68bb      	ldr	r3, [r7, #8]
 802371c:	429a      	cmp	r2, r3
 802371e:	d004      	beq.n	802372a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8023720:	69f8      	ldr	r0, [r7, #28]
 8023722:	f7f8 fe71 	bl	801c408 <pbuf_free>
    q = NULL;
 8023726:	2300      	movs	r3, #0
 8023728:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 802372a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 802372e:	4618      	mov	r0, r3
 8023730:	3720      	adds	r7, #32
 8023732:	46bd      	mov	sp, r7
 8023734:	bd80      	pop	{r7, pc}
 8023736:	bf00      	nop
 8023738:	0802f678 	.word	0x0802f678
 802373c:	0802f864 	.word	0x0802f864
 8023740:	0802f6cc 	.word	0x0802f6cc
 8023744:	0802f884 	.word	0x0802f884
 8023748:	0802f8a4 	.word	0x0802f8a4
 802374c:	0802f8c8 	.word	0x0802f8c8
 8023750:	0802f8ec 	.word	0x0802f8ec
 8023754:	0802f910 	.word	0x0802f910

08023758 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8023758:	b580      	push	{r7, lr}
 802375a:	b086      	sub	sp, #24
 802375c:	af00      	add	r7, sp, #0
 802375e:	60f8      	str	r0, [r7, #12]
 8023760:	60b9      	str	r1, [r7, #8]
 8023762:	4613      	mov	r3, r2
 8023764:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8023766:	68bb      	ldr	r3, [r7, #8]
 8023768:	2b00      	cmp	r3, #0
 802376a:	d101      	bne.n	8023770 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 802376c:	4b39      	ldr	r3, [pc, #228]	; (8023854 <udp_bind+0xfc>)
 802376e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8023770:	68fb      	ldr	r3, [r7, #12]
 8023772:	2b00      	cmp	r3, #0
 8023774:	d109      	bne.n	802378a <udp_bind+0x32>
 8023776:	4b38      	ldr	r3, [pc, #224]	; (8023858 <udp_bind+0x100>)
 8023778:	f240 32b7 	movw	r2, #951	; 0x3b7
 802377c:	4937      	ldr	r1, [pc, #220]	; (802385c <udp_bind+0x104>)
 802377e:	4838      	ldr	r0, [pc, #224]	; (8023860 <udp_bind+0x108>)
 8023780:	f003 fa6a 	bl	8026c58 <iprintf>
 8023784:	f06f 030f 	mvn.w	r3, #15
 8023788:	e060      	b.n	802384c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 802378a:	2300      	movs	r3, #0
 802378c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802378e:	4b35      	ldr	r3, [pc, #212]	; (8023864 <udp_bind+0x10c>)
 8023790:	681b      	ldr	r3, [r3, #0]
 8023792:	617b      	str	r3, [r7, #20]
 8023794:	e009      	b.n	80237aa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8023796:	68fa      	ldr	r2, [r7, #12]
 8023798:	697b      	ldr	r3, [r7, #20]
 802379a:	429a      	cmp	r2, r3
 802379c:	d102      	bne.n	80237a4 <udp_bind+0x4c>
      rebind = 1;
 802379e:	2301      	movs	r3, #1
 80237a0:	74fb      	strb	r3, [r7, #19]
      break;
 80237a2:	e005      	b.n	80237b0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80237a4:	697b      	ldr	r3, [r7, #20]
 80237a6:	68db      	ldr	r3, [r3, #12]
 80237a8:	617b      	str	r3, [r7, #20]
 80237aa:	697b      	ldr	r3, [r7, #20]
 80237ac:	2b00      	cmp	r3, #0
 80237ae:	d1f2      	bne.n	8023796 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80237b0:	88fb      	ldrh	r3, [r7, #6]
 80237b2:	2b00      	cmp	r3, #0
 80237b4:	d109      	bne.n	80237ca <udp_bind+0x72>
    port = udp_new_port();
 80237b6:	f7ff fc69 	bl	802308c <udp_new_port>
 80237ba:	4603      	mov	r3, r0
 80237bc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80237be:	88fb      	ldrh	r3, [r7, #6]
 80237c0:	2b00      	cmp	r3, #0
 80237c2:	d12c      	bne.n	802381e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80237c4:	f06f 0307 	mvn.w	r3, #7
 80237c8:	e040      	b.n	802384c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80237ca:	4b26      	ldr	r3, [pc, #152]	; (8023864 <udp_bind+0x10c>)
 80237cc:	681b      	ldr	r3, [r3, #0]
 80237ce:	617b      	str	r3, [r7, #20]
 80237d0:	e022      	b.n	8023818 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80237d2:	68fa      	ldr	r2, [r7, #12]
 80237d4:	697b      	ldr	r3, [r7, #20]
 80237d6:	429a      	cmp	r2, r3
 80237d8:	d01b      	beq.n	8023812 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80237da:	697b      	ldr	r3, [r7, #20]
 80237dc:	8a5b      	ldrh	r3, [r3, #18]
 80237de:	88fa      	ldrh	r2, [r7, #6]
 80237e0:	429a      	cmp	r2, r3
 80237e2:	d116      	bne.n	8023812 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80237e4:	697b      	ldr	r3, [r7, #20]
 80237e6:	681a      	ldr	r2, [r3, #0]
 80237e8:	68bb      	ldr	r3, [r7, #8]
 80237ea:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80237ec:	429a      	cmp	r2, r3
 80237ee:	d00d      	beq.n	802380c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80237f0:	68bb      	ldr	r3, [r7, #8]
 80237f2:	2b00      	cmp	r3, #0
 80237f4:	d00a      	beq.n	802380c <udp_bind+0xb4>
 80237f6:	68bb      	ldr	r3, [r7, #8]
 80237f8:	681b      	ldr	r3, [r3, #0]
 80237fa:	2b00      	cmp	r3, #0
 80237fc:	d006      	beq.n	802380c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80237fe:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8023800:	2b00      	cmp	r3, #0
 8023802:	d003      	beq.n	802380c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8023804:	697b      	ldr	r3, [r7, #20]
 8023806:	681b      	ldr	r3, [r3, #0]
 8023808:	2b00      	cmp	r3, #0
 802380a:	d102      	bne.n	8023812 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 802380c:	f06f 0307 	mvn.w	r3, #7
 8023810:	e01c      	b.n	802384c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8023812:	697b      	ldr	r3, [r7, #20]
 8023814:	68db      	ldr	r3, [r3, #12]
 8023816:	617b      	str	r3, [r7, #20]
 8023818:	697b      	ldr	r3, [r7, #20]
 802381a:	2b00      	cmp	r3, #0
 802381c:	d1d9      	bne.n	80237d2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 802381e:	68bb      	ldr	r3, [r7, #8]
 8023820:	2b00      	cmp	r3, #0
 8023822:	d002      	beq.n	802382a <udp_bind+0xd2>
 8023824:	68bb      	ldr	r3, [r7, #8]
 8023826:	681b      	ldr	r3, [r3, #0]
 8023828:	e000      	b.n	802382c <udp_bind+0xd4>
 802382a:	2300      	movs	r3, #0
 802382c:	68fa      	ldr	r2, [r7, #12]
 802382e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8023830:	68fb      	ldr	r3, [r7, #12]
 8023832:	88fa      	ldrh	r2, [r7, #6]
 8023834:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8023836:	7cfb      	ldrb	r3, [r7, #19]
 8023838:	2b00      	cmp	r3, #0
 802383a:	d106      	bne.n	802384a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 802383c:	4b09      	ldr	r3, [pc, #36]	; (8023864 <udp_bind+0x10c>)
 802383e:	681a      	ldr	r2, [r3, #0]
 8023840:	68fb      	ldr	r3, [r7, #12]
 8023842:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8023844:	4a07      	ldr	r2, [pc, #28]	; (8023864 <udp_bind+0x10c>)
 8023846:	68fb      	ldr	r3, [r7, #12]
 8023848:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 802384a:	2300      	movs	r3, #0
}
 802384c:	4618      	mov	r0, r3
 802384e:	3718      	adds	r7, #24
 8023850:	46bd      	mov	sp, r7
 8023852:	bd80      	pop	{r7, pc}
 8023854:	080608e4 	.word	0x080608e4
 8023858:	0802f678 	.word	0x0802f678
 802385c:	0802f940 	.word	0x0802f940
 8023860:	0802f6cc 	.word	0x0802f6cc
 8023864:	2001d534 	.word	0x2001d534

08023868 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8023868:	b580      	push	{r7, lr}
 802386a:	b084      	sub	sp, #16
 802386c:	af00      	add	r7, sp, #0
 802386e:	60f8      	str	r0, [r7, #12]
 8023870:	60b9      	str	r1, [r7, #8]
 8023872:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8023874:	68fb      	ldr	r3, [r7, #12]
 8023876:	2b00      	cmp	r3, #0
 8023878:	d107      	bne.n	802388a <udp_recv+0x22>
 802387a:	4b08      	ldr	r3, [pc, #32]	; (802389c <udp_recv+0x34>)
 802387c:	f240 428a 	movw	r2, #1162	; 0x48a
 8023880:	4907      	ldr	r1, [pc, #28]	; (80238a0 <udp_recv+0x38>)
 8023882:	4808      	ldr	r0, [pc, #32]	; (80238a4 <udp_recv+0x3c>)
 8023884:	f003 f9e8 	bl	8026c58 <iprintf>
 8023888:	e005      	b.n	8023896 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 802388a:	68fb      	ldr	r3, [r7, #12]
 802388c:	68ba      	ldr	r2, [r7, #8]
 802388e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8023890:	68fb      	ldr	r3, [r7, #12]
 8023892:	687a      	ldr	r2, [r7, #4]
 8023894:	61da      	str	r2, [r3, #28]
}
 8023896:	3710      	adds	r7, #16
 8023898:	46bd      	mov	sp, r7
 802389a:	bd80      	pop	{r7, pc}
 802389c:	0802f678 	.word	0x0802f678
 80238a0:	0802f9ac 	.word	0x0802f9ac
 80238a4:	0802f6cc 	.word	0x0802f6cc

080238a8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80238a8:	b580      	push	{r7, lr}
 80238aa:	b082      	sub	sp, #8
 80238ac:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80238ae:	2000      	movs	r0, #0
 80238b0:	f7f7 feb4 	bl	801b61c <memp_malloc>
 80238b4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80238b6:	687b      	ldr	r3, [r7, #4]
 80238b8:	2b00      	cmp	r3, #0
 80238ba:	d007      	beq.n	80238cc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80238bc:	2220      	movs	r2, #32
 80238be:	2100      	movs	r1, #0
 80238c0:	6878      	ldr	r0, [r7, #4]
 80238c2:	f002 fe99 	bl	80265f8 <memset>
    pcb->ttl = UDP_TTL;
 80238c6:	687b      	ldr	r3, [r7, #4]
 80238c8:	22ff      	movs	r2, #255	; 0xff
 80238ca:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80238cc:	687b      	ldr	r3, [r7, #4]
}
 80238ce:	4618      	mov	r0, r3
 80238d0:	3708      	adds	r7, #8
 80238d2:	46bd      	mov	sp, r7
 80238d4:	bd80      	pop	{r7, pc}

080238d6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80238d6:	b580      	push	{r7, lr}
 80238d8:	b084      	sub	sp, #16
 80238da:	af00      	add	r7, sp, #0
 80238dc:	4603      	mov	r3, r0
 80238de:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80238e0:	f7ff ffe2 	bl	80238a8 <udp_new>
 80238e4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80238e6:	68fb      	ldr	r3, [r7, #12]
}
 80238e8:	4618      	mov	r0, r3
 80238ea:	3710      	adds	r7, #16
 80238ec:	46bd      	mov	sp, r7
 80238ee:	bd80      	pop	{r7, pc}

080238f0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80238f0:	b480      	push	{r7}
 80238f2:	b085      	sub	sp, #20
 80238f4:	af00      	add	r7, sp, #0
 80238f6:	6078      	str	r0, [r7, #4]
 80238f8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80238fa:	687b      	ldr	r3, [r7, #4]
 80238fc:	2b00      	cmp	r3, #0
 80238fe:	d01e      	beq.n	802393e <udp_netif_ip_addr_changed+0x4e>
 8023900:	687b      	ldr	r3, [r7, #4]
 8023902:	681b      	ldr	r3, [r3, #0]
 8023904:	2b00      	cmp	r3, #0
 8023906:	d01a      	beq.n	802393e <udp_netif_ip_addr_changed+0x4e>
 8023908:	683b      	ldr	r3, [r7, #0]
 802390a:	2b00      	cmp	r3, #0
 802390c:	d017      	beq.n	802393e <udp_netif_ip_addr_changed+0x4e>
 802390e:	683b      	ldr	r3, [r7, #0]
 8023910:	681b      	ldr	r3, [r3, #0]
 8023912:	2b00      	cmp	r3, #0
 8023914:	d013      	beq.n	802393e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8023916:	4b0d      	ldr	r3, [pc, #52]	; (802394c <udp_netif_ip_addr_changed+0x5c>)
 8023918:	681b      	ldr	r3, [r3, #0]
 802391a:	60fb      	str	r3, [r7, #12]
 802391c:	e00c      	b.n	8023938 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 802391e:	68fb      	ldr	r3, [r7, #12]
 8023920:	681a      	ldr	r2, [r3, #0]
 8023922:	687b      	ldr	r3, [r7, #4]
 8023924:	681b      	ldr	r3, [r3, #0]
 8023926:	429a      	cmp	r2, r3
 8023928:	d103      	bne.n	8023932 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 802392a:	683b      	ldr	r3, [r7, #0]
 802392c:	681a      	ldr	r2, [r3, #0]
 802392e:	68fb      	ldr	r3, [r7, #12]
 8023930:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8023932:	68fb      	ldr	r3, [r7, #12]
 8023934:	68db      	ldr	r3, [r3, #12]
 8023936:	60fb      	str	r3, [r7, #12]
 8023938:	68fb      	ldr	r3, [r7, #12]
 802393a:	2b00      	cmp	r3, #0
 802393c:	d1ef      	bne.n	802391e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 802393e:	bf00      	nop
 8023940:	3714      	adds	r7, #20
 8023942:	46bd      	mov	sp, r7
 8023944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023948:	4770      	bx	lr
 802394a:	bf00      	nop
 802394c:	2001d534 	.word	0x2001d534

08023950 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8023950:	b580      	push	{r7, lr}
 8023952:	b082      	sub	sp, #8
 8023954:	af00      	add	r7, sp, #0
 8023956:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8023958:	4915      	ldr	r1, [pc, #84]	; (80239b0 <etharp_free_entry+0x60>)
 802395a:	687a      	ldr	r2, [r7, #4]
 802395c:	4613      	mov	r3, r2
 802395e:	005b      	lsls	r3, r3, #1
 8023960:	4413      	add	r3, r2
 8023962:	00db      	lsls	r3, r3, #3
 8023964:	440b      	add	r3, r1
 8023966:	681b      	ldr	r3, [r3, #0]
 8023968:	2b00      	cmp	r3, #0
 802396a:	d013      	beq.n	8023994 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 802396c:	4910      	ldr	r1, [pc, #64]	; (80239b0 <etharp_free_entry+0x60>)
 802396e:	687a      	ldr	r2, [r7, #4]
 8023970:	4613      	mov	r3, r2
 8023972:	005b      	lsls	r3, r3, #1
 8023974:	4413      	add	r3, r2
 8023976:	00db      	lsls	r3, r3, #3
 8023978:	440b      	add	r3, r1
 802397a:	681b      	ldr	r3, [r3, #0]
 802397c:	4618      	mov	r0, r3
 802397e:	f7f8 fd43 	bl	801c408 <pbuf_free>
    arp_table[i].q = NULL;
 8023982:	490b      	ldr	r1, [pc, #44]	; (80239b0 <etharp_free_entry+0x60>)
 8023984:	687a      	ldr	r2, [r7, #4]
 8023986:	4613      	mov	r3, r2
 8023988:	005b      	lsls	r3, r3, #1
 802398a:	4413      	add	r3, r2
 802398c:	00db      	lsls	r3, r3, #3
 802398e:	440b      	add	r3, r1
 8023990:	2200      	movs	r2, #0
 8023992:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8023994:	4906      	ldr	r1, [pc, #24]	; (80239b0 <etharp_free_entry+0x60>)
 8023996:	687a      	ldr	r2, [r7, #4]
 8023998:	4613      	mov	r3, r2
 802399a:	005b      	lsls	r3, r3, #1
 802399c:	4413      	add	r3, r2
 802399e:	00db      	lsls	r3, r3, #3
 80239a0:	440b      	add	r3, r1
 80239a2:	3314      	adds	r3, #20
 80239a4:	2200      	movs	r2, #0
 80239a6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80239a8:	bf00      	nop
 80239aa:	3708      	adds	r7, #8
 80239ac:	46bd      	mov	sp, r7
 80239ae:	bd80      	pop	{r7, pc}
 80239b0:	20005a68 	.word	0x20005a68

080239b4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80239b4:	b580      	push	{r7, lr}
 80239b6:	b082      	sub	sp, #8
 80239b8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80239ba:	2300      	movs	r3, #0
 80239bc:	607b      	str	r3, [r7, #4]
 80239be:	e096      	b.n	8023aee <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80239c0:	494f      	ldr	r1, [pc, #316]	; (8023b00 <etharp_tmr+0x14c>)
 80239c2:	687a      	ldr	r2, [r7, #4]
 80239c4:	4613      	mov	r3, r2
 80239c6:	005b      	lsls	r3, r3, #1
 80239c8:	4413      	add	r3, r2
 80239ca:	00db      	lsls	r3, r3, #3
 80239cc:	440b      	add	r3, r1
 80239ce:	3314      	adds	r3, #20
 80239d0:	781b      	ldrb	r3, [r3, #0]
 80239d2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80239d4:	78fb      	ldrb	r3, [r7, #3]
 80239d6:	2b00      	cmp	r3, #0
 80239d8:	f000 8086 	beq.w	8023ae8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80239dc:	4948      	ldr	r1, [pc, #288]	; (8023b00 <etharp_tmr+0x14c>)
 80239de:	687a      	ldr	r2, [r7, #4]
 80239e0:	4613      	mov	r3, r2
 80239e2:	005b      	lsls	r3, r3, #1
 80239e4:	4413      	add	r3, r2
 80239e6:	00db      	lsls	r3, r3, #3
 80239e8:	440b      	add	r3, r1
 80239ea:	3312      	adds	r3, #18
 80239ec:	881b      	ldrh	r3, [r3, #0]
 80239ee:	3301      	adds	r3, #1
 80239f0:	b298      	uxth	r0, r3
 80239f2:	4943      	ldr	r1, [pc, #268]	; (8023b00 <etharp_tmr+0x14c>)
 80239f4:	687a      	ldr	r2, [r7, #4]
 80239f6:	4613      	mov	r3, r2
 80239f8:	005b      	lsls	r3, r3, #1
 80239fa:	4413      	add	r3, r2
 80239fc:	00db      	lsls	r3, r3, #3
 80239fe:	440b      	add	r3, r1
 8023a00:	3312      	adds	r3, #18
 8023a02:	4602      	mov	r2, r0
 8023a04:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8023a06:	493e      	ldr	r1, [pc, #248]	; (8023b00 <etharp_tmr+0x14c>)
 8023a08:	687a      	ldr	r2, [r7, #4]
 8023a0a:	4613      	mov	r3, r2
 8023a0c:	005b      	lsls	r3, r3, #1
 8023a0e:	4413      	add	r3, r2
 8023a10:	00db      	lsls	r3, r3, #3
 8023a12:	440b      	add	r3, r1
 8023a14:	3312      	adds	r3, #18
 8023a16:	881b      	ldrh	r3, [r3, #0]
 8023a18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8023a1c:	d215      	bcs.n	8023a4a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8023a1e:	4938      	ldr	r1, [pc, #224]	; (8023b00 <etharp_tmr+0x14c>)
 8023a20:	687a      	ldr	r2, [r7, #4]
 8023a22:	4613      	mov	r3, r2
 8023a24:	005b      	lsls	r3, r3, #1
 8023a26:	4413      	add	r3, r2
 8023a28:	00db      	lsls	r3, r3, #3
 8023a2a:	440b      	add	r3, r1
 8023a2c:	3314      	adds	r3, #20
 8023a2e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8023a30:	2b01      	cmp	r3, #1
 8023a32:	d10e      	bne.n	8023a52 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8023a34:	4932      	ldr	r1, [pc, #200]	; (8023b00 <etharp_tmr+0x14c>)
 8023a36:	687a      	ldr	r2, [r7, #4]
 8023a38:	4613      	mov	r3, r2
 8023a3a:	005b      	lsls	r3, r3, #1
 8023a3c:	4413      	add	r3, r2
 8023a3e:	00db      	lsls	r3, r3, #3
 8023a40:	440b      	add	r3, r1
 8023a42:	3312      	adds	r3, #18
 8023a44:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8023a46:	2b04      	cmp	r3, #4
 8023a48:	d903      	bls.n	8023a52 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8023a4a:	6878      	ldr	r0, [r7, #4]
 8023a4c:	f7ff ff80 	bl	8023950 <etharp_free_entry>
 8023a50:	e04a      	b.n	8023ae8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8023a52:	492b      	ldr	r1, [pc, #172]	; (8023b00 <etharp_tmr+0x14c>)
 8023a54:	687a      	ldr	r2, [r7, #4]
 8023a56:	4613      	mov	r3, r2
 8023a58:	005b      	lsls	r3, r3, #1
 8023a5a:	4413      	add	r3, r2
 8023a5c:	00db      	lsls	r3, r3, #3
 8023a5e:	440b      	add	r3, r1
 8023a60:	3314      	adds	r3, #20
 8023a62:	781b      	ldrb	r3, [r3, #0]
 8023a64:	2b03      	cmp	r3, #3
 8023a66:	d10a      	bne.n	8023a7e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8023a68:	4925      	ldr	r1, [pc, #148]	; (8023b00 <etharp_tmr+0x14c>)
 8023a6a:	687a      	ldr	r2, [r7, #4]
 8023a6c:	4613      	mov	r3, r2
 8023a6e:	005b      	lsls	r3, r3, #1
 8023a70:	4413      	add	r3, r2
 8023a72:	00db      	lsls	r3, r3, #3
 8023a74:	440b      	add	r3, r1
 8023a76:	3314      	adds	r3, #20
 8023a78:	2204      	movs	r2, #4
 8023a7a:	701a      	strb	r2, [r3, #0]
 8023a7c:	e034      	b.n	8023ae8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8023a7e:	4920      	ldr	r1, [pc, #128]	; (8023b00 <etharp_tmr+0x14c>)
 8023a80:	687a      	ldr	r2, [r7, #4]
 8023a82:	4613      	mov	r3, r2
 8023a84:	005b      	lsls	r3, r3, #1
 8023a86:	4413      	add	r3, r2
 8023a88:	00db      	lsls	r3, r3, #3
 8023a8a:	440b      	add	r3, r1
 8023a8c:	3314      	adds	r3, #20
 8023a8e:	781b      	ldrb	r3, [r3, #0]
 8023a90:	2b04      	cmp	r3, #4
 8023a92:	d10a      	bne.n	8023aaa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8023a94:	491a      	ldr	r1, [pc, #104]	; (8023b00 <etharp_tmr+0x14c>)
 8023a96:	687a      	ldr	r2, [r7, #4]
 8023a98:	4613      	mov	r3, r2
 8023a9a:	005b      	lsls	r3, r3, #1
 8023a9c:	4413      	add	r3, r2
 8023a9e:	00db      	lsls	r3, r3, #3
 8023aa0:	440b      	add	r3, r1
 8023aa2:	3314      	adds	r3, #20
 8023aa4:	2202      	movs	r2, #2
 8023aa6:	701a      	strb	r2, [r3, #0]
 8023aa8:	e01e      	b.n	8023ae8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8023aaa:	4915      	ldr	r1, [pc, #84]	; (8023b00 <etharp_tmr+0x14c>)
 8023aac:	687a      	ldr	r2, [r7, #4]
 8023aae:	4613      	mov	r3, r2
 8023ab0:	005b      	lsls	r3, r3, #1
 8023ab2:	4413      	add	r3, r2
 8023ab4:	00db      	lsls	r3, r3, #3
 8023ab6:	440b      	add	r3, r1
 8023ab8:	3314      	adds	r3, #20
 8023aba:	781b      	ldrb	r3, [r3, #0]
 8023abc:	2b01      	cmp	r3, #1
 8023abe:	d113      	bne.n	8023ae8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8023ac0:	490f      	ldr	r1, [pc, #60]	; (8023b00 <etharp_tmr+0x14c>)
 8023ac2:	687a      	ldr	r2, [r7, #4]
 8023ac4:	4613      	mov	r3, r2
 8023ac6:	005b      	lsls	r3, r3, #1
 8023ac8:	4413      	add	r3, r2
 8023aca:	00db      	lsls	r3, r3, #3
 8023acc:	440b      	add	r3, r1
 8023ace:	3308      	adds	r3, #8
 8023ad0:	6818      	ldr	r0, [r3, #0]
 8023ad2:	687a      	ldr	r2, [r7, #4]
 8023ad4:	4613      	mov	r3, r2
 8023ad6:	005b      	lsls	r3, r3, #1
 8023ad8:	4413      	add	r3, r2
 8023ada:	00db      	lsls	r3, r3, #3
 8023adc:	4a08      	ldr	r2, [pc, #32]	; (8023b00 <etharp_tmr+0x14c>)
 8023ade:	4413      	add	r3, r2
 8023ae0:	3304      	adds	r3, #4
 8023ae2:	4619      	mov	r1, r3
 8023ae4:	f000 fe6e 	bl	80247c4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023ae8:	687b      	ldr	r3, [r7, #4]
 8023aea:	3301      	adds	r3, #1
 8023aec:	607b      	str	r3, [r7, #4]
 8023aee:	687b      	ldr	r3, [r7, #4]
 8023af0:	2b09      	cmp	r3, #9
 8023af2:	f77f af65 	ble.w	80239c0 <etharp_tmr+0xc>
      }
    }
  }
}
 8023af6:	bf00      	nop
 8023af8:	bf00      	nop
 8023afa:	3708      	adds	r7, #8
 8023afc:	46bd      	mov	sp, r7
 8023afe:	bd80      	pop	{r7, pc}
 8023b00:	20005a68 	.word	0x20005a68

08023b04 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8023b04:	b580      	push	{r7, lr}
 8023b06:	b08a      	sub	sp, #40	; 0x28
 8023b08:	af00      	add	r7, sp, #0
 8023b0a:	60f8      	str	r0, [r7, #12]
 8023b0c:	460b      	mov	r3, r1
 8023b0e:	607a      	str	r2, [r7, #4]
 8023b10:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8023b12:	230a      	movs	r3, #10
 8023b14:	84fb      	strh	r3, [r7, #38]	; 0x26
 8023b16:	230a      	movs	r3, #10
 8023b18:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8023b1a:	230a      	movs	r3, #10
 8023b1c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8023b1e:	2300      	movs	r3, #0
 8023b20:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8023b22:	230a      	movs	r3, #10
 8023b24:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8023b26:	2300      	movs	r3, #0
 8023b28:	83bb      	strh	r3, [r7, #28]
 8023b2a:	2300      	movs	r3, #0
 8023b2c:	837b      	strh	r3, [r7, #26]
 8023b2e:	2300      	movs	r3, #0
 8023b30:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023b32:	2300      	movs	r3, #0
 8023b34:	843b      	strh	r3, [r7, #32]
 8023b36:	e0ae      	b.n	8023c96 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8023b38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023b3c:	49a6      	ldr	r1, [pc, #664]	; (8023dd8 <etharp_find_entry+0x2d4>)
 8023b3e:	4613      	mov	r3, r2
 8023b40:	005b      	lsls	r3, r3, #1
 8023b42:	4413      	add	r3, r2
 8023b44:	00db      	lsls	r3, r3, #3
 8023b46:	440b      	add	r3, r1
 8023b48:	3314      	adds	r3, #20
 8023b4a:	781b      	ldrb	r3, [r3, #0]
 8023b4c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8023b4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8023b52:	2b0a      	cmp	r3, #10
 8023b54:	d105      	bne.n	8023b62 <etharp_find_entry+0x5e>
 8023b56:	7dfb      	ldrb	r3, [r7, #23]
 8023b58:	2b00      	cmp	r3, #0
 8023b5a:	d102      	bne.n	8023b62 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8023b5c:	8c3b      	ldrh	r3, [r7, #32]
 8023b5e:	847b      	strh	r3, [r7, #34]	; 0x22
 8023b60:	e095      	b.n	8023c8e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8023b62:	7dfb      	ldrb	r3, [r7, #23]
 8023b64:	2b00      	cmp	r3, #0
 8023b66:	f000 8092 	beq.w	8023c8e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8023b6a:	7dfb      	ldrb	r3, [r7, #23]
 8023b6c:	2b01      	cmp	r3, #1
 8023b6e:	d009      	beq.n	8023b84 <etharp_find_entry+0x80>
 8023b70:	7dfb      	ldrb	r3, [r7, #23]
 8023b72:	2b01      	cmp	r3, #1
 8023b74:	d806      	bhi.n	8023b84 <etharp_find_entry+0x80>
 8023b76:	4b99      	ldr	r3, [pc, #612]	; (8023ddc <etharp_find_entry+0x2d8>)
 8023b78:	f240 1223 	movw	r2, #291	; 0x123
 8023b7c:	4998      	ldr	r1, [pc, #608]	; (8023de0 <etharp_find_entry+0x2dc>)
 8023b7e:	4899      	ldr	r0, [pc, #612]	; (8023de4 <etharp_find_entry+0x2e0>)
 8023b80:	f003 f86a 	bl	8026c58 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8023b84:	68fb      	ldr	r3, [r7, #12]
 8023b86:	2b00      	cmp	r3, #0
 8023b88:	d020      	beq.n	8023bcc <etharp_find_entry+0xc8>
 8023b8a:	68fb      	ldr	r3, [r7, #12]
 8023b8c:	6819      	ldr	r1, [r3, #0]
 8023b8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023b92:	4891      	ldr	r0, [pc, #580]	; (8023dd8 <etharp_find_entry+0x2d4>)
 8023b94:	4613      	mov	r3, r2
 8023b96:	005b      	lsls	r3, r3, #1
 8023b98:	4413      	add	r3, r2
 8023b9a:	00db      	lsls	r3, r3, #3
 8023b9c:	4403      	add	r3, r0
 8023b9e:	3304      	adds	r3, #4
 8023ba0:	681b      	ldr	r3, [r3, #0]
 8023ba2:	4299      	cmp	r1, r3
 8023ba4:	d112      	bne.n	8023bcc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8023ba6:	687b      	ldr	r3, [r7, #4]
 8023ba8:	2b00      	cmp	r3, #0
 8023baa:	d00c      	beq.n	8023bc6 <etharp_find_entry+0xc2>
 8023bac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023bb0:	4989      	ldr	r1, [pc, #548]	; (8023dd8 <etharp_find_entry+0x2d4>)
 8023bb2:	4613      	mov	r3, r2
 8023bb4:	005b      	lsls	r3, r3, #1
 8023bb6:	4413      	add	r3, r2
 8023bb8:	00db      	lsls	r3, r3, #3
 8023bba:	440b      	add	r3, r1
 8023bbc:	3308      	adds	r3, #8
 8023bbe:	681b      	ldr	r3, [r3, #0]
 8023bc0:	687a      	ldr	r2, [r7, #4]
 8023bc2:	429a      	cmp	r2, r3
 8023bc4:	d102      	bne.n	8023bcc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8023bc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023bca:	e100      	b.n	8023dce <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8023bcc:	7dfb      	ldrb	r3, [r7, #23]
 8023bce:	2b01      	cmp	r3, #1
 8023bd0:	d140      	bne.n	8023c54 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8023bd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023bd6:	4980      	ldr	r1, [pc, #512]	; (8023dd8 <etharp_find_entry+0x2d4>)
 8023bd8:	4613      	mov	r3, r2
 8023bda:	005b      	lsls	r3, r3, #1
 8023bdc:	4413      	add	r3, r2
 8023bde:	00db      	lsls	r3, r3, #3
 8023be0:	440b      	add	r3, r1
 8023be2:	681b      	ldr	r3, [r3, #0]
 8023be4:	2b00      	cmp	r3, #0
 8023be6:	d01a      	beq.n	8023c1e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8023be8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023bec:	497a      	ldr	r1, [pc, #488]	; (8023dd8 <etharp_find_entry+0x2d4>)
 8023bee:	4613      	mov	r3, r2
 8023bf0:	005b      	lsls	r3, r3, #1
 8023bf2:	4413      	add	r3, r2
 8023bf4:	00db      	lsls	r3, r3, #3
 8023bf6:	440b      	add	r3, r1
 8023bf8:	3312      	adds	r3, #18
 8023bfa:	881b      	ldrh	r3, [r3, #0]
 8023bfc:	8bba      	ldrh	r2, [r7, #28]
 8023bfe:	429a      	cmp	r2, r3
 8023c00:	d845      	bhi.n	8023c8e <etharp_find_entry+0x18a>
            old_queue = i;
 8023c02:	8c3b      	ldrh	r3, [r7, #32]
 8023c04:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8023c06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023c0a:	4973      	ldr	r1, [pc, #460]	; (8023dd8 <etharp_find_entry+0x2d4>)
 8023c0c:	4613      	mov	r3, r2
 8023c0e:	005b      	lsls	r3, r3, #1
 8023c10:	4413      	add	r3, r2
 8023c12:	00db      	lsls	r3, r3, #3
 8023c14:	440b      	add	r3, r1
 8023c16:	3312      	adds	r3, #18
 8023c18:	881b      	ldrh	r3, [r3, #0]
 8023c1a:	83bb      	strh	r3, [r7, #28]
 8023c1c:	e037      	b.n	8023c8e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8023c1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023c22:	496d      	ldr	r1, [pc, #436]	; (8023dd8 <etharp_find_entry+0x2d4>)
 8023c24:	4613      	mov	r3, r2
 8023c26:	005b      	lsls	r3, r3, #1
 8023c28:	4413      	add	r3, r2
 8023c2a:	00db      	lsls	r3, r3, #3
 8023c2c:	440b      	add	r3, r1
 8023c2e:	3312      	adds	r3, #18
 8023c30:	881b      	ldrh	r3, [r3, #0]
 8023c32:	8b7a      	ldrh	r2, [r7, #26]
 8023c34:	429a      	cmp	r2, r3
 8023c36:	d82a      	bhi.n	8023c8e <etharp_find_entry+0x18a>
            old_pending = i;
 8023c38:	8c3b      	ldrh	r3, [r7, #32]
 8023c3a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8023c3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023c40:	4965      	ldr	r1, [pc, #404]	; (8023dd8 <etharp_find_entry+0x2d4>)
 8023c42:	4613      	mov	r3, r2
 8023c44:	005b      	lsls	r3, r3, #1
 8023c46:	4413      	add	r3, r2
 8023c48:	00db      	lsls	r3, r3, #3
 8023c4a:	440b      	add	r3, r1
 8023c4c:	3312      	adds	r3, #18
 8023c4e:	881b      	ldrh	r3, [r3, #0]
 8023c50:	837b      	strh	r3, [r7, #26]
 8023c52:	e01c      	b.n	8023c8e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8023c54:	7dfb      	ldrb	r3, [r7, #23]
 8023c56:	2b01      	cmp	r3, #1
 8023c58:	d919      	bls.n	8023c8e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8023c5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023c5e:	495e      	ldr	r1, [pc, #376]	; (8023dd8 <etharp_find_entry+0x2d4>)
 8023c60:	4613      	mov	r3, r2
 8023c62:	005b      	lsls	r3, r3, #1
 8023c64:	4413      	add	r3, r2
 8023c66:	00db      	lsls	r3, r3, #3
 8023c68:	440b      	add	r3, r1
 8023c6a:	3312      	adds	r3, #18
 8023c6c:	881b      	ldrh	r3, [r3, #0]
 8023c6e:	8b3a      	ldrh	r2, [r7, #24]
 8023c70:	429a      	cmp	r2, r3
 8023c72:	d80c      	bhi.n	8023c8e <etharp_find_entry+0x18a>
            old_stable = i;
 8023c74:	8c3b      	ldrh	r3, [r7, #32]
 8023c76:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8023c78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023c7c:	4956      	ldr	r1, [pc, #344]	; (8023dd8 <etharp_find_entry+0x2d4>)
 8023c7e:	4613      	mov	r3, r2
 8023c80:	005b      	lsls	r3, r3, #1
 8023c82:	4413      	add	r3, r2
 8023c84:	00db      	lsls	r3, r3, #3
 8023c86:	440b      	add	r3, r1
 8023c88:	3312      	adds	r3, #18
 8023c8a:	881b      	ldrh	r3, [r3, #0]
 8023c8c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023c8e:	8c3b      	ldrh	r3, [r7, #32]
 8023c90:	3301      	adds	r3, #1
 8023c92:	b29b      	uxth	r3, r3
 8023c94:	843b      	strh	r3, [r7, #32]
 8023c96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023c9a:	2b09      	cmp	r3, #9
 8023c9c:	f77f af4c 	ble.w	8023b38 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8023ca0:	7afb      	ldrb	r3, [r7, #11]
 8023ca2:	f003 0302 	and.w	r3, r3, #2
 8023ca6:	2b00      	cmp	r3, #0
 8023ca8:	d108      	bne.n	8023cbc <etharp_find_entry+0x1b8>
 8023caa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8023cae:	2b0a      	cmp	r3, #10
 8023cb0:	d107      	bne.n	8023cc2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8023cb2:	7afb      	ldrb	r3, [r7, #11]
 8023cb4:	f003 0301 	and.w	r3, r3, #1
 8023cb8:	2b00      	cmp	r3, #0
 8023cba:	d102      	bne.n	8023cc2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8023cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023cc0:	e085      	b.n	8023dce <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8023cc2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8023cc6:	2b09      	cmp	r3, #9
 8023cc8:	dc02      	bgt.n	8023cd0 <etharp_find_entry+0x1cc>
    i = empty;
 8023cca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023ccc:	843b      	strh	r3, [r7, #32]
 8023cce:	e039      	b.n	8023d44 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8023cd0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8023cd4:	2b09      	cmp	r3, #9
 8023cd6:	dc14      	bgt.n	8023d02 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8023cd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023cda:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8023cdc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023ce0:	493d      	ldr	r1, [pc, #244]	; (8023dd8 <etharp_find_entry+0x2d4>)
 8023ce2:	4613      	mov	r3, r2
 8023ce4:	005b      	lsls	r3, r3, #1
 8023ce6:	4413      	add	r3, r2
 8023ce8:	00db      	lsls	r3, r3, #3
 8023cea:	440b      	add	r3, r1
 8023cec:	681b      	ldr	r3, [r3, #0]
 8023cee:	2b00      	cmp	r3, #0
 8023cf0:	d018      	beq.n	8023d24 <etharp_find_entry+0x220>
 8023cf2:	4b3a      	ldr	r3, [pc, #232]	; (8023ddc <etharp_find_entry+0x2d8>)
 8023cf4:	f240 126d 	movw	r2, #365	; 0x16d
 8023cf8:	493b      	ldr	r1, [pc, #236]	; (8023de8 <etharp_find_entry+0x2e4>)
 8023cfa:	483a      	ldr	r0, [pc, #232]	; (8023de4 <etharp_find_entry+0x2e0>)
 8023cfc:	f002 ffac 	bl	8026c58 <iprintf>
 8023d00:	e010      	b.n	8023d24 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8023d02:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8023d06:	2b09      	cmp	r3, #9
 8023d08:	dc02      	bgt.n	8023d10 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8023d0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023d0c:	843b      	strh	r3, [r7, #32]
 8023d0e:	e009      	b.n	8023d24 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8023d10:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8023d14:	2b09      	cmp	r3, #9
 8023d16:	dc02      	bgt.n	8023d1e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8023d18:	8bfb      	ldrh	r3, [r7, #30]
 8023d1a:	843b      	strh	r3, [r7, #32]
 8023d1c:	e002      	b.n	8023d24 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8023d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023d22:	e054      	b.n	8023dce <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8023d24:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023d28:	2b09      	cmp	r3, #9
 8023d2a:	dd06      	ble.n	8023d3a <etharp_find_entry+0x236>
 8023d2c:	4b2b      	ldr	r3, [pc, #172]	; (8023ddc <etharp_find_entry+0x2d8>)
 8023d2e:	f240 127f 	movw	r2, #383	; 0x17f
 8023d32:	492e      	ldr	r1, [pc, #184]	; (8023dec <etharp_find_entry+0x2e8>)
 8023d34:	482b      	ldr	r0, [pc, #172]	; (8023de4 <etharp_find_entry+0x2e0>)
 8023d36:	f002 ff8f 	bl	8026c58 <iprintf>
    etharp_free_entry(i);
 8023d3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023d3e:	4618      	mov	r0, r3
 8023d40:	f7ff fe06 	bl	8023950 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8023d44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023d48:	2b09      	cmp	r3, #9
 8023d4a:	dd06      	ble.n	8023d5a <etharp_find_entry+0x256>
 8023d4c:	4b23      	ldr	r3, [pc, #140]	; (8023ddc <etharp_find_entry+0x2d8>)
 8023d4e:	f240 1283 	movw	r2, #387	; 0x183
 8023d52:	4926      	ldr	r1, [pc, #152]	; (8023dec <etharp_find_entry+0x2e8>)
 8023d54:	4823      	ldr	r0, [pc, #140]	; (8023de4 <etharp_find_entry+0x2e0>)
 8023d56:	f002 ff7f 	bl	8026c58 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8023d5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023d5e:	491e      	ldr	r1, [pc, #120]	; (8023dd8 <etharp_find_entry+0x2d4>)
 8023d60:	4613      	mov	r3, r2
 8023d62:	005b      	lsls	r3, r3, #1
 8023d64:	4413      	add	r3, r2
 8023d66:	00db      	lsls	r3, r3, #3
 8023d68:	440b      	add	r3, r1
 8023d6a:	3314      	adds	r3, #20
 8023d6c:	781b      	ldrb	r3, [r3, #0]
 8023d6e:	2b00      	cmp	r3, #0
 8023d70:	d006      	beq.n	8023d80 <etharp_find_entry+0x27c>
 8023d72:	4b1a      	ldr	r3, [pc, #104]	; (8023ddc <etharp_find_entry+0x2d8>)
 8023d74:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8023d78:	491d      	ldr	r1, [pc, #116]	; (8023df0 <etharp_find_entry+0x2ec>)
 8023d7a:	481a      	ldr	r0, [pc, #104]	; (8023de4 <etharp_find_entry+0x2e0>)
 8023d7c:	f002 ff6c 	bl	8026c58 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8023d80:	68fb      	ldr	r3, [r7, #12]
 8023d82:	2b00      	cmp	r3, #0
 8023d84:	d00b      	beq.n	8023d9e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8023d86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023d8a:	68fb      	ldr	r3, [r7, #12]
 8023d8c:	6819      	ldr	r1, [r3, #0]
 8023d8e:	4812      	ldr	r0, [pc, #72]	; (8023dd8 <etharp_find_entry+0x2d4>)
 8023d90:	4613      	mov	r3, r2
 8023d92:	005b      	lsls	r3, r3, #1
 8023d94:	4413      	add	r3, r2
 8023d96:	00db      	lsls	r3, r3, #3
 8023d98:	4403      	add	r3, r0
 8023d9a:	3304      	adds	r3, #4
 8023d9c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8023d9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023da2:	490d      	ldr	r1, [pc, #52]	; (8023dd8 <etharp_find_entry+0x2d4>)
 8023da4:	4613      	mov	r3, r2
 8023da6:	005b      	lsls	r3, r3, #1
 8023da8:	4413      	add	r3, r2
 8023daa:	00db      	lsls	r3, r3, #3
 8023dac:	440b      	add	r3, r1
 8023dae:	3312      	adds	r3, #18
 8023db0:	2200      	movs	r2, #0
 8023db2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8023db4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023db8:	4907      	ldr	r1, [pc, #28]	; (8023dd8 <etharp_find_entry+0x2d4>)
 8023dba:	4613      	mov	r3, r2
 8023dbc:	005b      	lsls	r3, r3, #1
 8023dbe:	4413      	add	r3, r2
 8023dc0:	00db      	lsls	r3, r3, #3
 8023dc2:	440b      	add	r3, r1
 8023dc4:	3308      	adds	r3, #8
 8023dc6:	687a      	ldr	r2, [r7, #4]
 8023dc8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8023dca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8023dce:	4618      	mov	r0, r3
 8023dd0:	3728      	adds	r7, #40	; 0x28
 8023dd2:	46bd      	mov	sp, r7
 8023dd4:	bd80      	pop	{r7, pc}
 8023dd6:	bf00      	nop
 8023dd8:	20005a68 	.word	0x20005a68
 8023ddc:	0802f9dc 	.word	0x0802f9dc
 8023de0:	0802fa14 	.word	0x0802fa14
 8023de4:	0802fa54 	.word	0x0802fa54
 8023de8:	0802fa7c 	.word	0x0802fa7c
 8023dec:	0802fa94 	.word	0x0802fa94
 8023df0:	0802faa8 	.word	0x0802faa8

08023df4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8023df4:	b580      	push	{r7, lr}
 8023df6:	b088      	sub	sp, #32
 8023df8:	af02      	add	r7, sp, #8
 8023dfa:	60f8      	str	r0, [r7, #12]
 8023dfc:	60b9      	str	r1, [r7, #8]
 8023dfe:	607a      	str	r2, [r7, #4]
 8023e00:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8023e02:	68fb      	ldr	r3, [r7, #12]
 8023e04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8023e08:	2b06      	cmp	r3, #6
 8023e0a:	d006      	beq.n	8023e1a <etharp_update_arp_entry+0x26>
 8023e0c:	4b48      	ldr	r3, [pc, #288]	; (8023f30 <etharp_update_arp_entry+0x13c>)
 8023e0e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8023e12:	4948      	ldr	r1, [pc, #288]	; (8023f34 <etharp_update_arp_entry+0x140>)
 8023e14:	4848      	ldr	r0, [pc, #288]	; (8023f38 <etharp_update_arp_entry+0x144>)
 8023e16:	f002 ff1f 	bl	8026c58 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8023e1a:	68bb      	ldr	r3, [r7, #8]
 8023e1c:	2b00      	cmp	r3, #0
 8023e1e:	d012      	beq.n	8023e46 <etharp_update_arp_entry+0x52>
 8023e20:	68bb      	ldr	r3, [r7, #8]
 8023e22:	681b      	ldr	r3, [r3, #0]
 8023e24:	2b00      	cmp	r3, #0
 8023e26:	d00e      	beq.n	8023e46 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8023e28:	68bb      	ldr	r3, [r7, #8]
 8023e2a:	681b      	ldr	r3, [r3, #0]
 8023e2c:	68f9      	ldr	r1, [r7, #12]
 8023e2e:	4618      	mov	r0, r3
 8023e30:	f001 f8fe 	bl	8025030 <ip4_addr_isbroadcast_u32>
 8023e34:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8023e36:	2b00      	cmp	r3, #0
 8023e38:	d105      	bne.n	8023e46 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8023e3a:	68bb      	ldr	r3, [r7, #8]
 8023e3c:	681b      	ldr	r3, [r3, #0]
 8023e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8023e42:	2be0      	cmp	r3, #224	; 0xe0
 8023e44:	d102      	bne.n	8023e4c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8023e46:	f06f 030f 	mvn.w	r3, #15
 8023e4a:	e06c      	b.n	8023f26 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8023e4c:	78fb      	ldrb	r3, [r7, #3]
 8023e4e:	68fa      	ldr	r2, [r7, #12]
 8023e50:	4619      	mov	r1, r3
 8023e52:	68b8      	ldr	r0, [r7, #8]
 8023e54:	f7ff fe56 	bl	8023b04 <etharp_find_entry>
 8023e58:	4603      	mov	r3, r0
 8023e5a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8023e5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023e60:	2b00      	cmp	r3, #0
 8023e62:	da02      	bge.n	8023e6a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8023e64:	8afb      	ldrh	r3, [r7, #22]
 8023e66:	b25b      	sxtb	r3, r3
 8023e68:	e05d      	b.n	8023f26 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8023e6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023e6e:	4933      	ldr	r1, [pc, #204]	; (8023f3c <etharp_update_arp_entry+0x148>)
 8023e70:	4613      	mov	r3, r2
 8023e72:	005b      	lsls	r3, r3, #1
 8023e74:	4413      	add	r3, r2
 8023e76:	00db      	lsls	r3, r3, #3
 8023e78:	440b      	add	r3, r1
 8023e7a:	3314      	adds	r3, #20
 8023e7c:	2202      	movs	r2, #2
 8023e7e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8023e80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023e84:	492d      	ldr	r1, [pc, #180]	; (8023f3c <etharp_update_arp_entry+0x148>)
 8023e86:	4613      	mov	r3, r2
 8023e88:	005b      	lsls	r3, r3, #1
 8023e8a:	4413      	add	r3, r2
 8023e8c:	00db      	lsls	r3, r3, #3
 8023e8e:	440b      	add	r3, r1
 8023e90:	3308      	adds	r3, #8
 8023e92:	68fa      	ldr	r2, [r7, #12]
 8023e94:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8023e96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023e9a:	4613      	mov	r3, r2
 8023e9c:	005b      	lsls	r3, r3, #1
 8023e9e:	4413      	add	r3, r2
 8023ea0:	00db      	lsls	r3, r3, #3
 8023ea2:	3308      	adds	r3, #8
 8023ea4:	4a25      	ldr	r2, [pc, #148]	; (8023f3c <etharp_update_arp_entry+0x148>)
 8023ea6:	4413      	add	r3, r2
 8023ea8:	3304      	adds	r3, #4
 8023eaa:	2206      	movs	r2, #6
 8023eac:	6879      	ldr	r1, [r7, #4]
 8023eae:	4618      	mov	r0, r3
 8023eb0:	f002 fb7a 	bl	80265a8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8023eb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023eb8:	4920      	ldr	r1, [pc, #128]	; (8023f3c <etharp_update_arp_entry+0x148>)
 8023eba:	4613      	mov	r3, r2
 8023ebc:	005b      	lsls	r3, r3, #1
 8023ebe:	4413      	add	r3, r2
 8023ec0:	00db      	lsls	r3, r3, #3
 8023ec2:	440b      	add	r3, r1
 8023ec4:	3312      	adds	r3, #18
 8023ec6:	2200      	movs	r2, #0
 8023ec8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8023eca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023ece:	491b      	ldr	r1, [pc, #108]	; (8023f3c <etharp_update_arp_entry+0x148>)
 8023ed0:	4613      	mov	r3, r2
 8023ed2:	005b      	lsls	r3, r3, #1
 8023ed4:	4413      	add	r3, r2
 8023ed6:	00db      	lsls	r3, r3, #3
 8023ed8:	440b      	add	r3, r1
 8023eda:	681b      	ldr	r3, [r3, #0]
 8023edc:	2b00      	cmp	r3, #0
 8023ede:	d021      	beq.n	8023f24 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8023ee0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023ee4:	4915      	ldr	r1, [pc, #84]	; (8023f3c <etharp_update_arp_entry+0x148>)
 8023ee6:	4613      	mov	r3, r2
 8023ee8:	005b      	lsls	r3, r3, #1
 8023eea:	4413      	add	r3, r2
 8023eec:	00db      	lsls	r3, r3, #3
 8023eee:	440b      	add	r3, r1
 8023ef0:	681b      	ldr	r3, [r3, #0]
 8023ef2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8023ef4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023ef8:	4910      	ldr	r1, [pc, #64]	; (8023f3c <etharp_update_arp_entry+0x148>)
 8023efa:	4613      	mov	r3, r2
 8023efc:	005b      	lsls	r3, r3, #1
 8023efe:	4413      	add	r3, r2
 8023f00:	00db      	lsls	r3, r3, #3
 8023f02:	440b      	add	r3, r1
 8023f04:	2200      	movs	r2, #0
 8023f06:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8023f08:	68fb      	ldr	r3, [r7, #12]
 8023f0a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8023f0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8023f12:	9300      	str	r3, [sp, #0]
 8023f14:	687b      	ldr	r3, [r7, #4]
 8023f16:	6939      	ldr	r1, [r7, #16]
 8023f18:	68f8      	ldr	r0, [r7, #12]
 8023f1a:	f001 ff91 	bl	8025e40 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8023f1e:	6938      	ldr	r0, [r7, #16]
 8023f20:	f7f8 fa72 	bl	801c408 <pbuf_free>
  }
  return ERR_OK;
 8023f24:	2300      	movs	r3, #0
}
 8023f26:	4618      	mov	r0, r3
 8023f28:	3718      	adds	r7, #24
 8023f2a:	46bd      	mov	sp, r7
 8023f2c:	bd80      	pop	{r7, pc}
 8023f2e:	bf00      	nop
 8023f30:	0802f9dc 	.word	0x0802f9dc
 8023f34:	0802fad4 	.word	0x0802fad4
 8023f38:	0802fa54 	.word	0x0802fa54
 8023f3c:	20005a68 	.word	0x20005a68

08023f40 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8023f40:	b580      	push	{r7, lr}
 8023f42:	b084      	sub	sp, #16
 8023f44:	af00      	add	r7, sp, #0
 8023f46:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023f48:	2300      	movs	r3, #0
 8023f4a:	60fb      	str	r3, [r7, #12]
 8023f4c:	e01e      	b.n	8023f8c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8023f4e:	4913      	ldr	r1, [pc, #76]	; (8023f9c <etharp_cleanup_netif+0x5c>)
 8023f50:	68fa      	ldr	r2, [r7, #12]
 8023f52:	4613      	mov	r3, r2
 8023f54:	005b      	lsls	r3, r3, #1
 8023f56:	4413      	add	r3, r2
 8023f58:	00db      	lsls	r3, r3, #3
 8023f5a:	440b      	add	r3, r1
 8023f5c:	3314      	adds	r3, #20
 8023f5e:	781b      	ldrb	r3, [r3, #0]
 8023f60:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8023f62:	7afb      	ldrb	r3, [r7, #11]
 8023f64:	2b00      	cmp	r3, #0
 8023f66:	d00e      	beq.n	8023f86 <etharp_cleanup_netif+0x46>
 8023f68:	490c      	ldr	r1, [pc, #48]	; (8023f9c <etharp_cleanup_netif+0x5c>)
 8023f6a:	68fa      	ldr	r2, [r7, #12]
 8023f6c:	4613      	mov	r3, r2
 8023f6e:	005b      	lsls	r3, r3, #1
 8023f70:	4413      	add	r3, r2
 8023f72:	00db      	lsls	r3, r3, #3
 8023f74:	440b      	add	r3, r1
 8023f76:	3308      	adds	r3, #8
 8023f78:	681b      	ldr	r3, [r3, #0]
 8023f7a:	687a      	ldr	r2, [r7, #4]
 8023f7c:	429a      	cmp	r2, r3
 8023f7e:	d102      	bne.n	8023f86 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8023f80:	68f8      	ldr	r0, [r7, #12]
 8023f82:	f7ff fce5 	bl	8023950 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023f86:	68fb      	ldr	r3, [r7, #12]
 8023f88:	3301      	adds	r3, #1
 8023f8a:	60fb      	str	r3, [r7, #12]
 8023f8c:	68fb      	ldr	r3, [r7, #12]
 8023f8e:	2b09      	cmp	r3, #9
 8023f90:	dddd      	ble.n	8023f4e <etharp_cleanup_netif+0xe>
    }
  }
}
 8023f92:	bf00      	nop
 8023f94:	bf00      	nop
 8023f96:	3710      	adds	r7, #16
 8023f98:	46bd      	mov	sp, r7
 8023f9a:	bd80      	pop	{r7, pc}
 8023f9c:	20005a68 	.word	0x20005a68

08023fa0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8023fa0:	b5b0      	push	{r4, r5, r7, lr}
 8023fa2:	b08a      	sub	sp, #40	; 0x28
 8023fa4:	af04      	add	r7, sp, #16
 8023fa6:	6078      	str	r0, [r7, #4]
 8023fa8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8023faa:	683b      	ldr	r3, [r7, #0]
 8023fac:	2b00      	cmp	r3, #0
 8023fae:	d107      	bne.n	8023fc0 <etharp_input+0x20>
 8023fb0:	4b3d      	ldr	r3, [pc, #244]	; (80240a8 <etharp_input+0x108>)
 8023fb2:	f240 228a 	movw	r2, #650	; 0x28a
 8023fb6:	493d      	ldr	r1, [pc, #244]	; (80240ac <etharp_input+0x10c>)
 8023fb8:	483d      	ldr	r0, [pc, #244]	; (80240b0 <etharp_input+0x110>)
 8023fba:	f002 fe4d 	bl	8026c58 <iprintf>
 8023fbe:	e06f      	b.n	80240a0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8023fc0:	687b      	ldr	r3, [r7, #4]
 8023fc2:	685b      	ldr	r3, [r3, #4]
 8023fc4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8023fc6:	693b      	ldr	r3, [r7, #16]
 8023fc8:	881b      	ldrh	r3, [r3, #0]
 8023fca:	b29b      	uxth	r3, r3
 8023fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023fd0:	d10c      	bne.n	8023fec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8023fd2:	693b      	ldr	r3, [r7, #16]
 8023fd4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8023fd6:	2b06      	cmp	r3, #6
 8023fd8:	d108      	bne.n	8023fec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8023fda:	693b      	ldr	r3, [r7, #16]
 8023fdc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8023fde:	2b04      	cmp	r3, #4
 8023fe0:	d104      	bne.n	8023fec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8023fe2:	693b      	ldr	r3, [r7, #16]
 8023fe4:	885b      	ldrh	r3, [r3, #2]
 8023fe6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8023fe8:	2b08      	cmp	r3, #8
 8023fea:	d003      	beq.n	8023ff4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8023fec:	6878      	ldr	r0, [r7, #4]
 8023fee:	f7f8 fa0b 	bl	801c408 <pbuf_free>
    return;
 8023ff2:	e055      	b.n	80240a0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8023ff4:	693b      	ldr	r3, [r7, #16]
 8023ff6:	330e      	adds	r3, #14
 8023ff8:	681b      	ldr	r3, [r3, #0]
 8023ffa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8023ffc:	693b      	ldr	r3, [r7, #16]
 8023ffe:	3318      	adds	r3, #24
 8024000:	681b      	ldr	r3, [r3, #0]
 8024002:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8024004:	683b      	ldr	r3, [r7, #0]
 8024006:	3304      	adds	r3, #4
 8024008:	681b      	ldr	r3, [r3, #0]
 802400a:	2b00      	cmp	r3, #0
 802400c:	d102      	bne.n	8024014 <etharp_input+0x74>
    for_us = 0;
 802400e:	2300      	movs	r3, #0
 8024010:	75fb      	strb	r3, [r7, #23]
 8024012:	e009      	b.n	8024028 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8024014:	68ba      	ldr	r2, [r7, #8]
 8024016:	683b      	ldr	r3, [r7, #0]
 8024018:	3304      	adds	r3, #4
 802401a:	681b      	ldr	r3, [r3, #0]
 802401c:	429a      	cmp	r2, r3
 802401e:	bf0c      	ite	eq
 8024020:	2301      	moveq	r3, #1
 8024022:	2300      	movne	r3, #0
 8024024:	b2db      	uxtb	r3, r3
 8024026:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8024028:	693b      	ldr	r3, [r7, #16]
 802402a:	f103 0208 	add.w	r2, r3, #8
 802402e:	7dfb      	ldrb	r3, [r7, #23]
 8024030:	2b00      	cmp	r3, #0
 8024032:	d001      	beq.n	8024038 <etharp_input+0x98>
 8024034:	2301      	movs	r3, #1
 8024036:	e000      	b.n	802403a <etharp_input+0x9a>
 8024038:	2302      	movs	r3, #2
 802403a:	f107 010c 	add.w	r1, r7, #12
 802403e:	6838      	ldr	r0, [r7, #0]
 8024040:	f7ff fed8 	bl	8023df4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8024044:	693b      	ldr	r3, [r7, #16]
 8024046:	88db      	ldrh	r3, [r3, #6]
 8024048:	b29b      	uxth	r3, r3
 802404a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802404e:	d003      	beq.n	8024058 <etharp_input+0xb8>
 8024050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024054:	d01e      	beq.n	8024094 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8024056:	e020      	b.n	802409a <etharp_input+0xfa>
      if (for_us) {
 8024058:	7dfb      	ldrb	r3, [r7, #23]
 802405a:	2b00      	cmp	r3, #0
 802405c:	d01c      	beq.n	8024098 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 802405e:	683b      	ldr	r3, [r7, #0]
 8024060:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8024064:	693b      	ldr	r3, [r7, #16]
 8024066:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 802406a:	683b      	ldr	r3, [r7, #0]
 802406c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8024070:	683b      	ldr	r3, [r7, #0]
 8024072:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8024074:	693a      	ldr	r2, [r7, #16]
 8024076:	3208      	adds	r2, #8
        etharp_raw(netif,
 8024078:	2102      	movs	r1, #2
 802407a:	9103      	str	r1, [sp, #12]
 802407c:	f107 010c 	add.w	r1, r7, #12
 8024080:	9102      	str	r1, [sp, #8]
 8024082:	9201      	str	r2, [sp, #4]
 8024084:	9300      	str	r3, [sp, #0]
 8024086:	462b      	mov	r3, r5
 8024088:	4622      	mov	r2, r4
 802408a:	4601      	mov	r1, r0
 802408c:	6838      	ldr	r0, [r7, #0]
 802408e:	f000 faeb 	bl	8024668 <etharp_raw>
      break;
 8024092:	e001      	b.n	8024098 <etharp_input+0xf8>
      break;
 8024094:	bf00      	nop
 8024096:	e000      	b.n	802409a <etharp_input+0xfa>
      break;
 8024098:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 802409a:	6878      	ldr	r0, [r7, #4]
 802409c:	f7f8 f9b4 	bl	801c408 <pbuf_free>
}
 80240a0:	3718      	adds	r7, #24
 80240a2:	46bd      	mov	sp, r7
 80240a4:	bdb0      	pop	{r4, r5, r7, pc}
 80240a6:	bf00      	nop
 80240a8:	0802f9dc 	.word	0x0802f9dc
 80240ac:	0802fb2c 	.word	0x0802fb2c
 80240b0:	0802fa54 	.word	0x0802fa54

080240b4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80240b4:	b580      	push	{r7, lr}
 80240b6:	b086      	sub	sp, #24
 80240b8:	af02      	add	r7, sp, #8
 80240ba:	60f8      	str	r0, [r7, #12]
 80240bc:	60b9      	str	r1, [r7, #8]
 80240be:	4613      	mov	r3, r2
 80240c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80240c2:	79fa      	ldrb	r2, [r7, #7]
 80240c4:	4944      	ldr	r1, [pc, #272]	; (80241d8 <etharp_output_to_arp_index+0x124>)
 80240c6:	4613      	mov	r3, r2
 80240c8:	005b      	lsls	r3, r3, #1
 80240ca:	4413      	add	r3, r2
 80240cc:	00db      	lsls	r3, r3, #3
 80240ce:	440b      	add	r3, r1
 80240d0:	3314      	adds	r3, #20
 80240d2:	781b      	ldrb	r3, [r3, #0]
 80240d4:	2b01      	cmp	r3, #1
 80240d6:	d806      	bhi.n	80240e6 <etharp_output_to_arp_index+0x32>
 80240d8:	4b40      	ldr	r3, [pc, #256]	; (80241dc <etharp_output_to_arp_index+0x128>)
 80240da:	f240 22ee 	movw	r2, #750	; 0x2ee
 80240de:	4940      	ldr	r1, [pc, #256]	; (80241e0 <etharp_output_to_arp_index+0x12c>)
 80240e0:	4840      	ldr	r0, [pc, #256]	; (80241e4 <etharp_output_to_arp_index+0x130>)
 80240e2:	f002 fdb9 	bl	8026c58 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80240e6:	79fa      	ldrb	r2, [r7, #7]
 80240e8:	493b      	ldr	r1, [pc, #236]	; (80241d8 <etharp_output_to_arp_index+0x124>)
 80240ea:	4613      	mov	r3, r2
 80240ec:	005b      	lsls	r3, r3, #1
 80240ee:	4413      	add	r3, r2
 80240f0:	00db      	lsls	r3, r3, #3
 80240f2:	440b      	add	r3, r1
 80240f4:	3314      	adds	r3, #20
 80240f6:	781b      	ldrb	r3, [r3, #0]
 80240f8:	2b02      	cmp	r3, #2
 80240fa:	d153      	bne.n	80241a4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80240fc:	79fa      	ldrb	r2, [r7, #7]
 80240fe:	4936      	ldr	r1, [pc, #216]	; (80241d8 <etharp_output_to_arp_index+0x124>)
 8024100:	4613      	mov	r3, r2
 8024102:	005b      	lsls	r3, r3, #1
 8024104:	4413      	add	r3, r2
 8024106:	00db      	lsls	r3, r3, #3
 8024108:	440b      	add	r3, r1
 802410a:	3312      	adds	r3, #18
 802410c:	881b      	ldrh	r3, [r3, #0]
 802410e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8024112:	d919      	bls.n	8024148 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8024114:	79fa      	ldrb	r2, [r7, #7]
 8024116:	4613      	mov	r3, r2
 8024118:	005b      	lsls	r3, r3, #1
 802411a:	4413      	add	r3, r2
 802411c:	00db      	lsls	r3, r3, #3
 802411e:	4a2e      	ldr	r2, [pc, #184]	; (80241d8 <etharp_output_to_arp_index+0x124>)
 8024120:	4413      	add	r3, r2
 8024122:	3304      	adds	r3, #4
 8024124:	4619      	mov	r1, r3
 8024126:	68f8      	ldr	r0, [r7, #12]
 8024128:	f000 fb4c 	bl	80247c4 <etharp_request>
 802412c:	4603      	mov	r3, r0
 802412e:	2b00      	cmp	r3, #0
 8024130:	d138      	bne.n	80241a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8024132:	79fa      	ldrb	r2, [r7, #7]
 8024134:	4928      	ldr	r1, [pc, #160]	; (80241d8 <etharp_output_to_arp_index+0x124>)
 8024136:	4613      	mov	r3, r2
 8024138:	005b      	lsls	r3, r3, #1
 802413a:	4413      	add	r3, r2
 802413c:	00db      	lsls	r3, r3, #3
 802413e:	440b      	add	r3, r1
 8024140:	3314      	adds	r3, #20
 8024142:	2203      	movs	r2, #3
 8024144:	701a      	strb	r2, [r3, #0]
 8024146:	e02d      	b.n	80241a4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8024148:	79fa      	ldrb	r2, [r7, #7]
 802414a:	4923      	ldr	r1, [pc, #140]	; (80241d8 <etharp_output_to_arp_index+0x124>)
 802414c:	4613      	mov	r3, r2
 802414e:	005b      	lsls	r3, r3, #1
 8024150:	4413      	add	r3, r2
 8024152:	00db      	lsls	r3, r3, #3
 8024154:	440b      	add	r3, r1
 8024156:	3312      	adds	r3, #18
 8024158:	881b      	ldrh	r3, [r3, #0]
 802415a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 802415e:	d321      	bcc.n	80241a4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8024160:	79fa      	ldrb	r2, [r7, #7]
 8024162:	4613      	mov	r3, r2
 8024164:	005b      	lsls	r3, r3, #1
 8024166:	4413      	add	r3, r2
 8024168:	00db      	lsls	r3, r3, #3
 802416a:	4a1b      	ldr	r2, [pc, #108]	; (80241d8 <etharp_output_to_arp_index+0x124>)
 802416c:	4413      	add	r3, r2
 802416e:	1d19      	adds	r1, r3, #4
 8024170:	79fa      	ldrb	r2, [r7, #7]
 8024172:	4613      	mov	r3, r2
 8024174:	005b      	lsls	r3, r3, #1
 8024176:	4413      	add	r3, r2
 8024178:	00db      	lsls	r3, r3, #3
 802417a:	3308      	adds	r3, #8
 802417c:	4a16      	ldr	r2, [pc, #88]	; (80241d8 <etharp_output_to_arp_index+0x124>)
 802417e:	4413      	add	r3, r2
 8024180:	3304      	adds	r3, #4
 8024182:	461a      	mov	r2, r3
 8024184:	68f8      	ldr	r0, [r7, #12]
 8024186:	f000 fafb 	bl	8024780 <etharp_request_dst>
 802418a:	4603      	mov	r3, r0
 802418c:	2b00      	cmp	r3, #0
 802418e:	d109      	bne.n	80241a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8024190:	79fa      	ldrb	r2, [r7, #7]
 8024192:	4911      	ldr	r1, [pc, #68]	; (80241d8 <etharp_output_to_arp_index+0x124>)
 8024194:	4613      	mov	r3, r2
 8024196:	005b      	lsls	r3, r3, #1
 8024198:	4413      	add	r3, r2
 802419a:	00db      	lsls	r3, r3, #3
 802419c:	440b      	add	r3, r1
 802419e:	3314      	adds	r3, #20
 80241a0:	2203      	movs	r2, #3
 80241a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80241a4:	68fb      	ldr	r3, [r7, #12]
 80241a6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80241aa:	79fa      	ldrb	r2, [r7, #7]
 80241ac:	4613      	mov	r3, r2
 80241ae:	005b      	lsls	r3, r3, #1
 80241b0:	4413      	add	r3, r2
 80241b2:	00db      	lsls	r3, r3, #3
 80241b4:	3308      	adds	r3, #8
 80241b6:	4a08      	ldr	r2, [pc, #32]	; (80241d8 <etharp_output_to_arp_index+0x124>)
 80241b8:	4413      	add	r3, r2
 80241ba:	3304      	adds	r3, #4
 80241bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80241c0:	9200      	str	r2, [sp, #0]
 80241c2:	460a      	mov	r2, r1
 80241c4:	68b9      	ldr	r1, [r7, #8]
 80241c6:	68f8      	ldr	r0, [r7, #12]
 80241c8:	f001 fe3a 	bl	8025e40 <ethernet_output>
 80241cc:	4603      	mov	r3, r0
}
 80241ce:	4618      	mov	r0, r3
 80241d0:	3710      	adds	r7, #16
 80241d2:	46bd      	mov	sp, r7
 80241d4:	bd80      	pop	{r7, pc}
 80241d6:	bf00      	nop
 80241d8:	20005a68 	.word	0x20005a68
 80241dc:	0802f9dc 	.word	0x0802f9dc
 80241e0:	0802fb4c 	.word	0x0802fb4c
 80241e4:	0802fa54 	.word	0x0802fa54

080241e8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80241e8:	b580      	push	{r7, lr}
 80241ea:	b08a      	sub	sp, #40	; 0x28
 80241ec:	af02      	add	r7, sp, #8
 80241ee:	60f8      	str	r0, [r7, #12]
 80241f0:	60b9      	str	r1, [r7, #8]
 80241f2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80241f4:	687b      	ldr	r3, [r7, #4]
 80241f6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80241f8:	68fb      	ldr	r3, [r7, #12]
 80241fa:	2b00      	cmp	r3, #0
 80241fc:	d106      	bne.n	802420c <etharp_output+0x24>
 80241fe:	4b73      	ldr	r3, [pc, #460]	; (80243cc <etharp_output+0x1e4>)
 8024200:	f240 321e 	movw	r2, #798	; 0x31e
 8024204:	4972      	ldr	r1, [pc, #456]	; (80243d0 <etharp_output+0x1e8>)
 8024206:	4873      	ldr	r0, [pc, #460]	; (80243d4 <etharp_output+0x1ec>)
 8024208:	f002 fd26 	bl	8026c58 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 802420c:	68bb      	ldr	r3, [r7, #8]
 802420e:	2b00      	cmp	r3, #0
 8024210:	d106      	bne.n	8024220 <etharp_output+0x38>
 8024212:	4b6e      	ldr	r3, [pc, #440]	; (80243cc <etharp_output+0x1e4>)
 8024214:	f240 321f 	movw	r2, #799	; 0x31f
 8024218:	496f      	ldr	r1, [pc, #444]	; (80243d8 <etharp_output+0x1f0>)
 802421a:	486e      	ldr	r0, [pc, #440]	; (80243d4 <etharp_output+0x1ec>)
 802421c:	f002 fd1c 	bl	8026c58 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8024220:	687b      	ldr	r3, [r7, #4]
 8024222:	2b00      	cmp	r3, #0
 8024224:	d106      	bne.n	8024234 <etharp_output+0x4c>
 8024226:	4b69      	ldr	r3, [pc, #420]	; (80243cc <etharp_output+0x1e4>)
 8024228:	f44f 7248 	mov.w	r2, #800	; 0x320
 802422c:	496b      	ldr	r1, [pc, #428]	; (80243dc <etharp_output+0x1f4>)
 802422e:	4869      	ldr	r0, [pc, #420]	; (80243d4 <etharp_output+0x1ec>)
 8024230:	f002 fd12 	bl	8026c58 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8024234:	687b      	ldr	r3, [r7, #4]
 8024236:	681b      	ldr	r3, [r3, #0]
 8024238:	68f9      	ldr	r1, [r7, #12]
 802423a:	4618      	mov	r0, r3
 802423c:	f000 fef8 	bl	8025030 <ip4_addr_isbroadcast_u32>
 8024240:	4603      	mov	r3, r0
 8024242:	2b00      	cmp	r3, #0
 8024244:	d002      	beq.n	802424c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8024246:	4b66      	ldr	r3, [pc, #408]	; (80243e0 <etharp_output+0x1f8>)
 8024248:	61fb      	str	r3, [r7, #28]
 802424a:	e0af      	b.n	80243ac <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 802424c:	687b      	ldr	r3, [r7, #4]
 802424e:	681b      	ldr	r3, [r3, #0]
 8024250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024254:	2be0      	cmp	r3, #224	; 0xe0
 8024256:	d118      	bne.n	802428a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8024258:	2301      	movs	r3, #1
 802425a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 802425c:	2300      	movs	r3, #0
 802425e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8024260:	235e      	movs	r3, #94	; 0x5e
 8024262:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8024264:	687b      	ldr	r3, [r7, #4]
 8024266:	3301      	adds	r3, #1
 8024268:	781b      	ldrb	r3, [r3, #0]
 802426a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802426e:	b2db      	uxtb	r3, r3
 8024270:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8024272:	687b      	ldr	r3, [r7, #4]
 8024274:	3302      	adds	r3, #2
 8024276:	781b      	ldrb	r3, [r3, #0]
 8024278:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 802427a:	687b      	ldr	r3, [r7, #4]
 802427c:	3303      	adds	r3, #3
 802427e:	781b      	ldrb	r3, [r3, #0]
 8024280:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8024282:	f107 0310 	add.w	r3, r7, #16
 8024286:	61fb      	str	r3, [r7, #28]
 8024288:	e090      	b.n	80243ac <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802428a:	687b      	ldr	r3, [r7, #4]
 802428c:	681a      	ldr	r2, [r3, #0]
 802428e:	68fb      	ldr	r3, [r7, #12]
 8024290:	3304      	adds	r3, #4
 8024292:	681b      	ldr	r3, [r3, #0]
 8024294:	405a      	eors	r2, r3
 8024296:	68fb      	ldr	r3, [r7, #12]
 8024298:	3308      	adds	r3, #8
 802429a:	681b      	ldr	r3, [r3, #0]
 802429c:	4013      	ands	r3, r2
 802429e:	2b00      	cmp	r3, #0
 80242a0:	d012      	beq.n	80242c8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80242a2:	687b      	ldr	r3, [r7, #4]
 80242a4:	681b      	ldr	r3, [r3, #0]
 80242a6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80242a8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80242ac:	4293      	cmp	r3, r2
 80242ae:	d00b      	beq.n	80242c8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80242b0:	68fb      	ldr	r3, [r7, #12]
 80242b2:	330c      	adds	r3, #12
 80242b4:	681b      	ldr	r3, [r3, #0]
 80242b6:	2b00      	cmp	r3, #0
 80242b8:	d003      	beq.n	80242c2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80242ba:	68fb      	ldr	r3, [r7, #12]
 80242bc:	330c      	adds	r3, #12
 80242be:	61bb      	str	r3, [r7, #24]
 80242c0:	e002      	b.n	80242c8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80242c2:	f06f 0303 	mvn.w	r3, #3
 80242c6:	e07d      	b.n	80243c4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80242c8:	4b46      	ldr	r3, [pc, #280]	; (80243e4 <etharp_output+0x1fc>)
 80242ca:	781b      	ldrb	r3, [r3, #0]
 80242cc:	4619      	mov	r1, r3
 80242ce:	4a46      	ldr	r2, [pc, #280]	; (80243e8 <etharp_output+0x200>)
 80242d0:	460b      	mov	r3, r1
 80242d2:	005b      	lsls	r3, r3, #1
 80242d4:	440b      	add	r3, r1
 80242d6:	00db      	lsls	r3, r3, #3
 80242d8:	4413      	add	r3, r2
 80242da:	3314      	adds	r3, #20
 80242dc:	781b      	ldrb	r3, [r3, #0]
 80242de:	2b01      	cmp	r3, #1
 80242e0:	d925      	bls.n	802432e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80242e2:	4b40      	ldr	r3, [pc, #256]	; (80243e4 <etharp_output+0x1fc>)
 80242e4:	781b      	ldrb	r3, [r3, #0]
 80242e6:	4619      	mov	r1, r3
 80242e8:	4a3f      	ldr	r2, [pc, #252]	; (80243e8 <etharp_output+0x200>)
 80242ea:	460b      	mov	r3, r1
 80242ec:	005b      	lsls	r3, r3, #1
 80242ee:	440b      	add	r3, r1
 80242f0:	00db      	lsls	r3, r3, #3
 80242f2:	4413      	add	r3, r2
 80242f4:	3308      	adds	r3, #8
 80242f6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80242f8:	68fa      	ldr	r2, [r7, #12]
 80242fa:	429a      	cmp	r2, r3
 80242fc:	d117      	bne.n	802432e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80242fe:	69bb      	ldr	r3, [r7, #24]
 8024300:	681a      	ldr	r2, [r3, #0]
 8024302:	4b38      	ldr	r3, [pc, #224]	; (80243e4 <etharp_output+0x1fc>)
 8024304:	781b      	ldrb	r3, [r3, #0]
 8024306:	4618      	mov	r0, r3
 8024308:	4937      	ldr	r1, [pc, #220]	; (80243e8 <etharp_output+0x200>)
 802430a:	4603      	mov	r3, r0
 802430c:	005b      	lsls	r3, r3, #1
 802430e:	4403      	add	r3, r0
 8024310:	00db      	lsls	r3, r3, #3
 8024312:	440b      	add	r3, r1
 8024314:	3304      	adds	r3, #4
 8024316:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8024318:	429a      	cmp	r2, r3
 802431a:	d108      	bne.n	802432e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 802431c:	4b31      	ldr	r3, [pc, #196]	; (80243e4 <etharp_output+0x1fc>)
 802431e:	781b      	ldrb	r3, [r3, #0]
 8024320:	461a      	mov	r2, r3
 8024322:	68b9      	ldr	r1, [r7, #8]
 8024324:	68f8      	ldr	r0, [r7, #12]
 8024326:	f7ff fec5 	bl	80240b4 <etharp_output_to_arp_index>
 802432a:	4603      	mov	r3, r0
 802432c:	e04a      	b.n	80243c4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 802432e:	2300      	movs	r3, #0
 8024330:	75fb      	strb	r3, [r7, #23]
 8024332:	e031      	b.n	8024398 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8024334:	7dfa      	ldrb	r2, [r7, #23]
 8024336:	492c      	ldr	r1, [pc, #176]	; (80243e8 <etharp_output+0x200>)
 8024338:	4613      	mov	r3, r2
 802433a:	005b      	lsls	r3, r3, #1
 802433c:	4413      	add	r3, r2
 802433e:	00db      	lsls	r3, r3, #3
 8024340:	440b      	add	r3, r1
 8024342:	3314      	adds	r3, #20
 8024344:	781b      	ldrb	r3, [r3, #0]
 8024346:	2b01      	cmp	r3, #1
 8024348:	d923      	bls.n	8024392 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 802434a:	7dfa      	ldrb	r2, [r7, #23]
 802434c:	4926      	ldr	r1, [pc, #152]	; (80243e8 <etharp_output+0x200>)
 802434e:	4613      	mov	r3, r2
 8024350:	005b      	lsls	r3, r3, #1
 8024352:	4413      	add	r3, r2
 8024354:	00db      	lsls	r3, r3, #3
 8024356:	440b      	add	r3, r1
 8024358:	3308      	adds	r3, #8
 802435a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 802435c:	68fa      	ldr	r2, [r7, #12]
 802435e:	429a      	cmp	r2, r3
 8024360:	d117      	bne.n	8024392 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8024362:	69bb      	ldr	r3, [r7, #24]
 8024364:	6819      	ldr	r1, [r3, #0]
 8024366:	7dfa      	ldrb	r2, [r7, #23]
 8024368:	481f      	ldr	r0, [pc, #124]	; (80243e8 <etharp_output+0x200>)
 802436a:	4613      	mov	r3, r2
 802436c:	005b      	lsls	r3, r3, #1
 802436e:	4413      	add	r3, r2
 8024370:	00db      	lsls	r3, r3, #3
 8024372:	4403      	add	r3, r0
 8024374:	3304      	adds	r3, #4
 8024376:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8024378:	4299      	cmp	r1, r3
 802437a:	d10a      	bne.n	8024392 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 802437c:	4a19      	ldr	r2, [pc, #100]	; (80243e4 <etharp_output+0x1fc>)
 802437e:	7dfb      	ldrb	r3, [r7, #23]
 8024380:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8024382:	7dfb      	ldrb	r3, [r7, #23]
 8024384:	461a      	mov	r2, r3
 8024386:	68b9      	ldr	r1, [r7, #8]
 8024388:	68f8      	ldr	r0, [r7, #12]
 802438a:	f7ff fe93 	bl	80240b4 <etharp_output_to_arp_index>
 802438e:	4603      	mov	r3, r0
 8024390:	e018      	b.n	80243c4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8024392:	7dfb      	ldrb	r3, [r7, #23]
 8024394:	3301      	adds	r3, #1
 8024396:	75fb      	strb	r3, [r7, #23]
 8024398:	7dfb      	ldrb	r3, [r7, #23]
 802439a:	2b09      	cmp	r3, #9
 802439c:	d9ca      	bls.n	8024334 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 802439e:	68ba      	ldr	r2, [r7, #8]
 80243a0:	69b9      	ldr	r1, [r7, #24]
 80243a2:	68f8      	ldr	r0, [r7, #12]
 80243a4:	f000 f822 	bl	80243ec <etharp_query>
 80243a8:	4603      	mov	r3, r0
 80243aa:	e00b      	b.n	80243c4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80243ac:	68fb      	ldr	r3, [r7, #12]
 80243ae:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80243b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80243b6:	9300      	str	r3, [sp, #0]
 80243b8:	69fb      	ldr	r3, [r7, #28]
 80243ba:	68b9      	ldr	r1, [r7, #8]
 80243bc:	68f8      	ldr	r0, [r7, #12]
 80243be:	f001 fd3f 	bl	8025e40 <ethernet_output>
 80243c2:	4603      	mov	r3, r0
}
 80243c4:	4618      	mov	r0, r3
 80243c6:	3720      	adds	r7, #32
 80243c8:	46bd      	mov	sp, r7
 80243ca:	bd80      	pop	{r7, pc}
 80243cc:	0802f9dc 	.word	0x0802f9dc
 80243d0:	0802fb2c 	.word	0x0802fb2c
 80243d4:	0802fa54 	.word	0x0802fa54
 80243d8:	0802fb7c 	.word	0x0802fb7c
 80243dc:	0802fb1c 	.word	0x0802fb1c
 80243e0:	080608e8 	.word	0x080608e8
 80243e4:	20005b58 	.word	0x20005b58
 80243e8:	20005a68 	.word	0x20005a68

080243ec <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80243ec:	b580      	push	{r7, lr}
 80243ee:	b08c      	sub	sp, #48	; 0x30
 80243f0:	af02      	add	r7, sp, #8
 80243f2:	60f8      	str	r0, [r7, #12]
 80243f4:	60b9      	str	r1, [r7, #8]
 80243f6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80243f8:	68fb      	ldr	r3, [r7, #12]
 80243fa:	3326      	adds	r3, #38	; 0x26
 80243fc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80243fe:	23ff      	movs	r3, #255	; 0xff
 8024400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8024404:	2300      	movs	r3, #0
 8024406:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8024408:	68bb      	ldr	r3, [r7, #8]
 802440a:	681b      	ldr	r3, [r3, #0]
 802440c:	68f9      	ldr	r1, [r7, #12]
 802440e:	4618      	mov	r0, r3
 8024410:	f000 fe0e 	bl	8025030 <ip4_addr_isbroadcast_u32>
 8024414:	4603      	mov	r3, r0
 8024416:	2b00      	cmp	r3, #0
 8024418:	d10c      	bne.n	8024434 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802441a:	68bb      	ldr	r3, [r7, #8]
 802441c:	681b      	ldr	r3, [r3, #0]
 802441e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8024422:	2be0      	cmp	r3, #224	; 0xe0
 8024424:	d006      	beq.n	8024434 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8024426:	68bb      	ldr	r3, [r7, #8]
 8024428:	2b00      	cmp	r3, #0
 802442a:	d003      	beq.n	8024434 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 802442c:	68bb      	ldr	r3, [r7, #8]
 802442e:	681b      	ldr	r3, [r3, #0]
 8024430:	2b00      	cmp	r3, #0
 8024432:	d102      	bne.n	802443a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8024434:	f06f 030f 	mvn.w	r3, #15
 8024438:	e101      	b.n	802463e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 802443a:	68fa      	ldr	r2, [r7, #12]
 802443c:	2101      	movs	r1, #1
 802443e:	68b8      	ldr	r0, [r7, #8]
 8024440:	f7ff fb60 	bl	8023b04 <etharp_find_entry>
 8024444:	4603      	mov	r3, r0
 8024446:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8024448:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802444c:	2b00      	cmp	r3, #0
 802444e:	da02      	bge.n	8024456 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8024450:	8a7b      	ldrh	r3, [r7, #18]
 8024452:	b25b      	sxtb	r3, r3
 8024454:	e0f3      	b.n	802463e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8024456:	8a7b      	ldrh	r3, [r7, #18]
 8024458:	2b7e      	cmp	r3, #126	; 0x7e
 802445a:	d906      	bls.n	802446a <etharp_query+0x7e>
 802445c:	4b7a      	ldr	r3, [pc, #488]	; (8024648 <etharp_query+0x25c>)
 802445e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8024462:	497a      	ldr	r1, [pc, #488]	; (802464c <etharp_query+0x260>)
 8024464:	487a      	ldr	r0, [pc, #488]	; (8024650 <etharp_query+0x264>)
 8024466:	f002 fbf7 	bl	8026c58 <iprintf>
  i = (netif_addr_idx_t)i_err;
 802446a:	8a7b      	ldrh	r3, [r7, #18]
 802446c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 802446e:	7c7a      	ldrb	r2, [r7, #17]
 8024470:	4978      	ldr	r1, [pc, #480]	; (8024654 <etharp_query+0x268>)
 8024472:	4613      	mov	r3, r2
 8024474:	005b      	lsls	r3, r3, #1
 8024476:	4413      	add	r3, r2
 8024478:	00db      	lsls	r3, r3, #3
 802447a:	440b      	add	r3, r1
 802447c:	3314      	adds	r3, #20
 802447e:	781b      	ldrb	r3, [r3, #0]
 8024480:	2b00      	cmp	r3, #0
 8024482:	d115      	bne.n	80244b0 <etharp_query+0xc4>
    is_new_entry = 1;
 8024484:	2301      	movs	r3, #1
 8024486:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8024488:	7c7a      	ldrb	r2, [r7, #17]
 802448a:	4972      	ldr	r1, [pc, #456]	; (8024654 <etharp_query+0x268>)
 802448c:	4613      	mov	r3, r2
 802448e:	005b      	lsls	r3, r3, #1
 8024490:	4413      	add	r3, r2
 8024492:	00db      	lsls	r3, r3, #3
 8024494:	440b      	add	r3, r1
 8024496:	3314      	adds	r3, #20
 8024498:	2201      	movs	r2, #1
 802449a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 802449c:	7c7a      	ldrb	r2, [r7, #17]
 802449e:	496d      	ldr	r1, [pc, #436]	; (8024654 <etharp_query+0x268>)
 80244a0:	4613      	mov	r3, r2
 80244a2:	005b      	lsls	r3, r3, #1
 80244a4:	4413      	add	r3, r2
 80244a6:	00db      	lsls	r3, r3, #3
 80244a8:	440b      	add	r3, r1
 80244aa:	3308      	adds	r3, #8
 80244ac:	68fa      	ldr	r2, [r7, #12]
 80244ae:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80244b0:	7c7a      	ldrb	r2, [r7, #17]
 80244b2:	4968      	ldr	r1, [pc, #416]	; (8024654 <etharp_query+0x268>)
 80244b4:	4613      	mov	r3, r2
 80244b6:	005b      	lsls	r3, r3, #1
 80244b8:	4413      	add	r3, r2
 80244ba:	00db      	lsls	r3, r3, #3
 80244bc:	440b      	add	r3, r1
 80244be:	3314      	adds	r3, #20
 80244c0:	781b      	ldrb	r3, [r3, #0]
 80244c2:	2b01      	cmp	r3, #1
 80244c4:	d011      	beq.n	80244ea <etharp_query+0xfe>
 80244c6:	7c7a      	ldrb	r2, [r7, #17]
 80244c8:	4962      	ldr	r1, [pc, #392]	; (8024654 <etharp_query+0x268>)
 80244ca:	4613      	mov	r3, r2
 80244cc:	005b      	lsls	r3, r3, #1
 80244ce:	4413      	add	r3, r2
 80244d0:	00db      	lsls	r3, r3, #3
 80244d2:	440b      	add	r3, r1
 80244d4:	3314      	adds	r3, #20
 80244d6:	781b      	ldrb	r3, [r3, #0]
 80244d8:	2b01      	cmp	r3, #1
 80244da:	d806      	bhi.n	80244ea <etharp_query+0xfe>
 80244dc:	4b5a      	ldr	r3, [pc, #360]	; (8024648 <etharp_query+0x25c>)
 80244de:	f240 32cd 	movw	r2, #973	; 0x3cd
 80244e2:	495d      	ldr	r1, [pc, #372]	; (8024658 <etharp_query+0x26c>)
 80244e4:	485a      	ldr	r0, [pc, #360]	; (8024650 <etharp_query+0x264>)
 80244e6:	f002 fbb7 	bl	8026c58 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80244ea:	6a3b      	ldr	r3, [r7, #32]
 80244ec:	2b00      	cmp	r3, #0
 80244ee:	d102      	bne.n	80244f6 <etharp_query+0x10a>
 80244f0:	687b      	ldr	r3, [r7, #4]
 80244f2:	2b00      	cmp	r3, #0
 80244f4:	d10c      	bne.n	8024510 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80244f6:	68b9      	ldr	r1, [r7, #8]
 80244f8:	68f8      	ldr	r0, [r7, #12]
 80244fa:	f000 f963 	bl	80247c4 <etharp_request>
 80244fe:	4603      	mov	r3, r0
 8024500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8024504:	687b      	ldr	r3, [r7, #4]
 8024506:	2b00      	cmp	r3, #0
 8024508:	d102      	bne.n	8024510 <etharp_query+0x124>
      return result;
 802450a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802450e:	e096      	b.n	802463e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8024510:	687b      	ldr	r3, [r7, #4]
 8024512:	2b00      	cmp	r3, #0
 8024514:	d106      	bne.n	8024524 <etharp_query+0x138>
 8024516:	4b4c      	ldr	r3, [pc, #304]	; (8024648 <etharp_query+0x25c>)
 8024518:	f240 32e1 	movw	r2, #993	; 0x3e1
 802451c:	494f      	ldr	r1, [pc, #316]	; (802465c <etharp_query+0x270>)
 802451e:	484c      	ldr	r0, [pc, #304]	; (8024650 <etharp_query+0x264>)
 8024520:	f002 fb9a 	bl	8026c58 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8024524:	7c7a      	ldrb	r2, [r7, #17]
 8024526:	494b      	ldr	r1, [pc, #300]	; (8024654 <etharp_query+0x268>)
 8024528:	4613      	mov	r3, r2
 802452a:	005b      	lsls	r3, r3, #1
 802452c:	4413      	add	r3, r2
 802452e:	00db      	lsls	r3, r3, #3
 8024530:	440b      	add	r3, r1
 8024532:	3314      	adds	r3, #20
 8024534:	781b      	ldrb	r3, [r3, #0]
 8024536:	2b01      	cmp	r3, #1
 8024538:	d917      	bls.n	802456a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 802453a:	4a49      	ldr	r2, [pc, #292]	; (8024660 <etharp_query+0x274>)
 802453c:	7c7b      	ldrb	r3, [r7, #17]
 802453e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8024540:	7c7a      	ldrb	r2, [r7, #17]
 8024542:	4613      	mov	r3, r2
 8024544:	005b      	lsls	r3, r3, #1
 8024546:	4413      	add	r3, r2
 8024548:	00db      	lsls	r3, r3, #3
 802454a:	3308      	adds	r3, #8
 802454c:	4a41      	ldr	r2, [pc, #260]	; (8024654 <etharp_query+0x268>)
 802454e:	4413      	add	r3, r2
 8024550:	3304      	adds	r3, #4
 8024552:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8024556:	9200      	str	r2, [sp, #0]
 8024558:	697a      	ldr	r2, [r7, #20]
 802455a:	6879      	ldr	r1, [r7, #4]
 802455c:	68f8      	ldr	r0, [r7, #12]
 802455e:	f001 fc6f 	bl	8025e40 <ethernet_output>
 8024562:	4603      	mov	r3, r0
 8024564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8024568:	e067      	b.n	802463a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802456a:	7c7a      	ldrb	r2, [r7, #17]
 802456c:	4939      	ldr	r1, [pc, #228]	; (8024654 <etharp_query+0x268>)
 802456e:	4613      	mov	r3, r2
 8024570:	005b      	lsls	r3, r3, #1
 8024572:	4413      	add	r3, r2
 8024574:	00db      	lsls	r3, r3, #3
 8024576:	440b      	add	r3, r1
 8024578:	3314      	adds	r3, #20
 802457a:	781b      	ldrb	r3, [r3, #0]
 802457c:	2b01      	cmp	r3, #1
 802457e:	d15c      	bne.n	802463a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8024580:	2300      	movs	r3, #0
 8024582:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8024584:	687b      	ldr	r3, [r7, #4]
 8024586:	61fb      	str	r3, [r7, #28]
    while (p) {
 8024588:	e01c      	b.n	80245c4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802458a:	69fb      	ldr	r3, [r7, #28]
 802458c:	895a      	ldrh	r2, [r3, #10]
 802458e:	69fb      	ldr	r3, [r7, #28]
 8024590:	891b      	ldrh	r3, [r3, #8]
 8024592:	429a      	cmp	r2, r3
 8024594:	d10a      	bne.n	80245ac <etharp_query+0x1c0>
 8024596:	69fb      	ldr	r3, [r7, #28]
 8024598:	681b      	ldr	r3, [r3, #0]
 802459a:	2b00      	cmp	r3, #0
 802459c:	d006      	beq.n	80245ac <etharp_query+0x1c0>
 802459e:	4b2a      	ldr	r3, [pc, #168]	; (8024648 <etharp_query+0x25c>)
 80245a0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80245a4:	492f      	ldr	r1, [pc, #188]	; (8024664 <etharp_query+0x278>)
 80245a6:	482a      	ldr	r0, [pc, #168]	; (8024650 <etharp_query+0x264>)
 80245a8:	f002 fb56 	bl	8026c58 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80245ac:	69fb      	ldr	r3, [r7, #28]
 80245ae:	7b1b      	ldrb	r3, [r3, #12]
 80245b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80245b4:	2b00      	cmp	r3, #0
 80245b6:	d002      	beq.n	80245be <etharp_query+0x1d2>
        copy_needed = 1;
 80245b8:	2301      	movs	r3, #1
 80245ba:	61bb      	str	r3, [r7, #24]
        break;
 80245bc:	e005      	b.n	80245ca <etharp_query+0x1de>
      }
      p = p->next;
 80245be:	69fb      	ldr	r3, [r7, #28]
 80245c0:	681b      	ldr	r3, [r3, #0]
 80245c2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80245c4:	69fb      	ldr	r3, [r7, #28]
 80245c6:	2b00      	cmp	r3, #0
 80245c8:	d1df      	bne.n	802458a <etharp_query+0x19e>
    }
    if (copy_needed) {
 80245ca:	69bb      	ldr	r3, [r7, #24]
 80245cc:	2b00      	cmp	r3, #0
 80245ce:	d007      	beq.n	80245e0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80245d0:	687a      	ldr	r2, [r7, #4]
 80245d2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80245d6:	200e      	movs	r0, #14
 80245d8:	f7f8 f9b8 	bl	801c94c <pbuf_clone>
 80245dc:	61f8      	str	r0, [r7, #28]
 80245de:	e004      	b.n	80245ea <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80245e0:	687b      	ldr	r3, [r7, #4]
 80245e2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80245e4:	69f8      	ldr	r0, [r7, #28]
 80245e6:	f7f7 ffb5 	bl	801c554 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80245ea:	69fb      	ldr	r3, [r7, #28]
 80245ec:	2b00      	cmp	r3, #0
 80245ee:	d021      	beq.n	8024634 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80245f0:	7c7a      	ldrb	r2, [r7, #17]
 80245f2:	4918      	ldr	r1, [pc, #96]	; (8024654 <etharp_query+0x268>)
 80245f4:	4613      	mov	r3, r2
 80245f6:	005b      	lsls	r3, r3, #1
 80245f8:	4413      	add	r3, r2
 80245fa:	00db      	lsls	r3, r3, #3
 80245fc:	440b      	add	r3, r1
 80245fe:	681b      	ldr	r3, [r3, #0]
 8024600:	2b00      	cmp	r3, #0
 8024602:	d00a      	beq.n	802461a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8024604:	7c7a      	ldrb	r2, [r7, #17]
 8024606:	4913      	ldr	r1, [pc, #76]	; (8024654 <etharp_query+0x268>)
 8024608:	4613      	mov	r3, r2
 802460a:	005b      	lsls	r3, r3, #1
 802460c:	4413      	add	r3, r2
 802460e:	00db      	lsls	r3, r3, #3
 8024610:	440b      	add	r3, r1
 8024612:	681b      	ldr	r3, [r3, #0]
 8024614:	4618      	mov	r0, r3
 8024616:	f7f7 fef7 	bl	801c408 <pbuf_free>
      }
      arp_table[i].q = p;
 802461a:	7c7a      	ldrb	r2, [r7, #17]
 802461c:	490d      	ldr	r1, [pc, #52]	; (8024654 <etharp_query+0x268>)
 802461e:	4613      	mov	r3, r2
 8024620:	005b      	lsls	r3, r3, #1
 8024622:	4413      	add	r3, r2
 8024624:	00db      	lsls	r3, r3, #3
 8024626:	440b      	add	r3, r1
 8024628:	69fa      	ldr	r2, [r7, #28]
 802462a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 802462c:	2300      	movs	r3, #0
 802462e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8024632:	e002      	b.n	802463a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8024634:	23ff      	movs	r3, #255	; 0xff
 8024636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 802463a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 802463e:	4618      	mov	r0, r3
 8024640:	3728      	adds	r7, #40	; 0x28
 8024642:	46bd      	mov	sp, r7
 8024644:	bd80      	pop	{r7, pc}
 8024646:	bf00      	nop
 8024648:	0802f9dc 	.word	0x0802f9dc
 802464c:	0802fb88 	.word	0x0802fb88
 8024650:	0802fa54 	.word	0x0802fa54
 8024654:	20005a68 	.word	0x20005a68
 8024658:	0802fb98 	.word	0x0802fb98
 802465c:	0802fb7c 	.word	0x0802fb7c
 8024660:	20005b58 	.word	0x20005b58
 8024664:	0802fbc0 	.word	0x0802fbc0

08024668 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8024668:	b580      	push	{r7, lr}
 802466a:	b08a      	sub	sp, #40	; 0x28
 802466c:	af02      	add	r7, sp, #8
 802466e:	60f8      	str	r0, [r7, #12]
 8024670:	60b9      	str	r1, [r7, #8]
 8024672:	607a      	str	r2, [r7, #4]
 8024674:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8024676:	2300      	movs	r3, #0
 8024678:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 802467a:	68fb      	ldr	r3, [r7, #12]
 802467c:	2b00      	cmp	r3, #0
 802467e:	d106      	bne.n	802468e <etharp_raw+0x26>
 8024680:	4b3a      	ldr	r3, [pc, #232]	; (802476c <etharp_raw+0x104>)
 8024682:	f240 4257 	movw	r2, #1111	; 0x457
 8024686:	493a      	ldr	r1, [pc, #232]	; (8024770 <etharp_raw+0x108>)
 8024688:	483a      	ldr	r0, [pc, #232]	; (8024774 <etharp_raw+0x10c>)
 802468a:	f002 fae5 	bl	8026c58 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 802468e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8024692:	211c      	movs	r1, #28
 8024694:	200e      	movs	r0, #14
 8024696:	f7f7 fbd3 	bl	801be40 <pbuf_alloc>
 802469a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 802469c:	69bb      	ldr	r3, [r7, #24]
 802469e:	2b00      	cmp	r3, #0
 80246a0:	d102      	bne.n	80246a8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80246a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80246a6:	e05d      	b.n	8024764 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80246a8:	69bb      	ldr	r3, [r7, #24]
 80246aa:	895b      	ldrh	r3, [r3, #10]
 80246ac:	2b1b      	cmp	r3, #27
 80246ae:	d806      	bhi.n	80246be <etharp_raw+0x56>
 80246b0:	4b2e      	ldr	r3, [pc, #184]	; (802476c <etharp_raw+0x104>)
 80246b2:	f240 4262 	movw	r2, #1122	; 0x462
 80246b6:	4930      	ldr	r1, [pc, #192]	; (8024778 <etharp_raw+0x110>)
 80246b8:	482e      	ldr	r0, [pc, #184]	; (8024774 <etharp_raw+0x10c>)
 80246ba:	f002 facd 	bl	8026c58 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80246be:	69bb      	ldr	r3, [r7, #24]
 80246c0:	685b      	ldr	r3, [r3, #4]
 80246c2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80246c4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80246c6:	4618      	mov	r0, r3
 80246c8:	f7f6 fa60 	bl	801ab8c <lwip_htons>
 80246cc:	4603      	mov	r3, r0
 80246ce:	461a      	mov	r2, r3
 80246d0:	697b      	ldr	r3, [r7, #20]
 80246d2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80246d4:	68fb      	ldr	r3, [r7, #12]
 80246d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80246da:	2b06      	cmp	r3, #6
 80246dc:	d006      	beq.n	80246ec <etharp_raw+0x84>
 80246de:	4b23      	ldr	r3, [pc, #140]	; (802476c <etharp_raw+0x104>)
 80246e0:	f240 4269 	movw	r2, #1129	; 0x469
 80246e4:	4925      	ldr	r1, [pc, #148]	; (802477c <etharp_raw+0x114>)
 80246e6:	4823      	ldr	r0, [pc, #140]	; (8024774 <etharp_raw+0x10c>)
 80246e8:	f002 fab6 	bl	8026c58 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80246ec:	697b      	ldr	r3, [r7, #20]
 80246ee:	3308      	adds	r3, #8
 80246f0:	2206      	movs	r2, #6
 80246f2:	6839      	ldr	r1, [r7, #0]
 80246f4:	4618      	mov	r0, r3
 80246f6:	f001 ff57 	bl	80265a8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80246fa:	697b      	ldr	r3, [r7, #20]
 80246fc:	3312      	adds	r3, #18
 80246fe:	2206      	movs	r2, #6
 8024700:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024702:	4618      	mov	r0, r3
 8024704:	f001 ff50 	bl	80265a8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8024708:	697b      	ldr	r3, [r7, #20]
 802470a:	330e      	adds	r3, #14
 802470c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802470e:	6812      	ldr	r2, [r2, #0]
 8024710:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8024712:	697b      	ldr	r3, [r7, #20]
 8024714:	3318      	adds	r3, #24
 8024716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024718:	6812      	ldr	r2, [r2, #0]
 802471a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 802471c:	697b      	ldr	r3, [r7, #20]
 802471e:	2200      	movs	r2, #0
 8024720:	701a      	strb	r2, [r3, #0]
 8024722:	2200      	movs	r2, #0
 8024724:	f042 0201 	orr.w	r2, r2, #1
 8024728:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802472a:	697b      	ldr	r3, [r7, #20]
 802472c:	2200      	movs	r2, #0
 802472e:	f042 0208 	orr.w	r2, r2, #8
 8024732:	709a      	strb	r2, [r3, #2]
 8024734:	2200      	movs	r2, #0
 8024736:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8024738:	697b      	ldr	r3, [r7, #20]
 802473a:	2206      	movs	r2, #6
 802473c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 802473e:	697b      	ldr	r3, [r7, #20]
 8024740:	2204      	movs	r2, #4
 8024742:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8024744:	f640 0306 	movw	r3, #2054	; 0x806
 8024748:	9300      	str	r3, [sp, #0]
 802474a:	687b      	ldr	r3, [r7, #4]
 802474c:	68ba      	ldr	r2, [r7, #8]
 802474e:	69b9      	ldr	r1, [r7, #24]
 8024750:	68f8      	ldr	r0, [r7, #12]
 8024752:	f001 fb75 	bl	8025e40 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8024756:	69b8      	ldr	r0, [r7, #24]
 8024758:	f7f7 fe56 	bl	801c408 <pbuf_free>
  p = NULL;
 802475c:	2300      	movs	r3, #0
 802475e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8024760:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8024764:	4618      	mov	r0, r3
 8024766:	3720      	adds	r7, #32
 8024768:	46bd      	mov	sp, r7
 802476a:	bd80      	pop	{r7, pc}
 802476c:	0802f9dc 	.word	0x0802f9dc
 8024770:	0802fb2c 	.word	0x0802fb2c
 8024774:	0802fa54 	.word	0x0802fa54
 8024778:	0802fbdc 	.word	0x0802fbdc
 802477c:	0802fc10 	.word	0x0802fc10

08024780 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8024780:	b580      	push	{r7, lr}
 8024782:	b088      	sub	sp, #32
 8024784:	af04      	add	r7, sp, #16
 8024786:	60f8      	str	r0, [r7, #12]
 8024788:	60b9      	str	r1, [r7, #8]
 802478a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802478c:	68fb      	ldr	r3, [r7, #12]
 802478e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8024792:	68fb      	ldr	r3, [r7, #12]
 8024794:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8024798:	68fb      	ldr	r3, [r7, #12]
 802479a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802479c:	2201      	movs	r2, #1
 802479e:	9203      	str	r2, [sp, #12]
 80247a0:	68ba      	ldr	r2, [r7, #8]
 80247a2:	9202      	str	r2, [sp, #8]
 80247a4:	4a06      	ldr	r2, [pc, #24]	; (80247c0 <etharp_request_dst+0x40>)
 80247a6:	9201      	str	r2, [sp, #4]
 80247a8:	9300      	str	r3, [sp, #0]
 80247aa:	4603      	mov	r3, r0
 80247ac:	687a      	ldr	r2, [r7, #4]
 80247ae:	68f8      	ldr	r0, [r7, #12]
 80247b0:	f7ff ff5a 	bl	8024668 <etharp_raw>
 80247b4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80247b6:	4618      	mov	r0, r3
 80247b8:	3710      	adds	r7, #16
 80247ba:	46bd      	mov	sp, r7
 80247bc:	bd80      	pop	{r7, pc}
 80247be:	bf00      	nop
 80247c0:	080608f0 	.word	0x080608f0

080247c4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80247c4:	b580      	push	{r7, lr}
 80247c6:	b082      	sub	sp, #8
 80247c8:	af00      	add	r7, sp, #0
 80247ca:	6078      	str	r0, [r7, #4]
 80247cc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80247ce:	4a05      	ldr	r2, [pc, #20]	; (80247e4 <etharp_request+0x20>)
 80247d0:	6839      	ldr	r1, [r7, #0]
 80247d2:	6878      	ldr	r0, [r7, #4]
 80247d4:	f7ff ffd4 	bl	8024780 <etharp_request_dst>
 80247d8:	4603      	mov	r3, r0
}
 80247da:	4618      	mov	r0, r3
 80247dc:	3708      	adds	r7, #8
 80247de:	46bd      	mov	sp, r7
 80247e0:	bd80      	pop	{r7, pc}
 80247e2:	bf00      	nop
 80247e4:	080608e8 	.word	0x080608e8

080247e8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80247e8:	b580      	push	{r7, lr}
 80247ea:	b08e      	sub	sp, #56	; 0x38
 80247ec:	af04      	add	r7, sp, #16
 80247ee:	6078      	str	r0, [r7, #4]
 80247f0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80247f2:	4b79      	ldr	r3, [pc, #484]	; (80249d8 <icmp_input+0x1f0>)
 80247f4:	689b      	ldr	r3, [r3, #8]
 80247f6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80247f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80247fa:	781b      	ldrb	r3, [r3, #0]
 80247fc:	f003 030f 	and.w	r3, r3, #15
 8024800:	b2db      	uxtb	r3, r3
 8024802:	009b      	lsls	r3, r3, #2
 8024804:	b2db      	uxtb	r3, r3
 8024806:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8024808:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802480a:	2b13      	cmp	r3, #19
 802480c:	f240 80cd 	bls.w	80249aa <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8024810:	687b      	ldr	r3, [r7, #4]
 8024812:	895b      	ldrh	r3, [r3, #10]
 8024814:	2b03      	cmp	r3, #3
 8024816:	f240 80ca 	bls.w	80249ae <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 802481a:	687b      	ldr	r3, [r7, #4]
 802481c:	685b      	ldr	r3, [r3, #4]
 802481e:	781b      	ldrb	r3, [r3, #0]
 8024820:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8024824:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8024828:	2b00      	cmp	r3, #0
 802482a:	f000 80b7 	beq.w	802499c <icmp_input+0x1b4>
 802482e:	2b08      	cmp	r3, #8
 8024830:	f040 80b7 	bne.w	80249a2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8024834:	4b69      	ldr	r3, [pc, #420]	; (80249dc <icmp_input+0x1f4>)
 8024836:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8024838:	4b67      	ldr	r3, [pc, #412]	; (80249d8 <icmp_input+0x1f0>)
 802483a:	695b      	ldr	r3, [r3, #20]
 802483c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024840:	2be0      	cmp	r3, #224	; 0xe0
 8024842:	f000 80bb 	beq.w	80249bc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8024846:	4b64      	ldr	r3, [pc, #400]	; (80249d8 <icmp_input+0x1f0>)
 8024848:	695b      	ldr	r3, [r3, #20]
 802484a:	4a63      	ldr	r2, [pc, #396]	; (80249d8 <icmp_input+0x1f0>)
 802484c:	6812      	ldr	r2, [r2, #0]
 802484e:	4611      	mov	r1, r2
 8024850:	4618      	mov	r0, r3
 8024852:	f000 fbed 	bl	8025030 <ip4_addr_isbroadcast_u32>
 8024856:	4603      	mov	r3, r0
 8024858:	2b00      	cmp	r3, #0
 802485a:	f040 80b1 	bne.w	80249c0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 802485e:	687b      	ldr	r3, [r7, #4]
 8024860:	891b      	ldrh	r3, [r3, #8]
 8024862:	2b07      	cmp	r3, #7
 8024864:	f240 80a5 	bls.w	80249b2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8024868:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802486a:	330e      	adds	r3, #14
 802486c:	4619      	mov	r1, r3
 802486e:	6878      	ldr	r0, [r7, #4]
 8024870:	f7f7 fd34 	bl	801c2dc <pbuf_add_header>
 8024874:	4603      	mov	r3, r0
 8024876:	2b00      	cmp	r3, #0
 8024878:	d04b      	beq.n	8024912 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 802487a:	687b      	ldr	r3, [r7, #4]
 802487c:	891a      	ldrh	r2, [r3, #8]
 802487e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024880:	4413      	add	r3, r2
 8024882:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8024884:	687b      	ldr	r3, [r7, #4]
 8024886:	891b      	ldrh	r3, [r3, #8]
 8024888:	8b7a      	ldrh	r2, [r7, #26]
 802488a:	429a      	cmp	r2, r3
 802488c:	f0c0 809a 	bcc.w	80249c4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8024890:	8b7b      	ldrh	r3, [r7, #26]
 8024892:	f44f 7220 	mov.w	r2, #640	; 0x280
 8024896:	4619      	mov	r1, r3
 8024898:	200e      	movs	r0, #14
 802489a:	f7f7 fad1 	bl	801be40 <pbuf_alloc>
 802489e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80248a0:	697b      	ldr	r3, [r7, #20]
 80248a2:	2b00      	cmp	r3, #0
 80248a4:	f000 8090 	beq.w	80249c8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80248a8:	697b      	ldr	r3, [r7, #20]
 80248aa:	895b      	ldrh	r3, [r3, #10]
 80248ac:	461a      	mov	r2, r3
 80248ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80248b0:	3308      	adds	r3, #8
 80248b2:	429a      	cmp	r2, r3
 80248b4:	d203      	bcs.n	80248be <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80248b6:	6978      	ldr	r0, [r7, #20]
 80248b8:	f7f7 fda6 	bl	801c408 <pbuf_free>
          goto icmperr;
 80248bc:	e085      	b.n	80249ca <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80248be:	697b      	ldr	r3, [r7, #20]
 80248c0:	685b      	ldr	r3, [r3, #4]
 80248c2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80248c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80248c6:	4618      	mov	r0, r3
 80248c8:	f001 fe6e 	bl	80265a8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80248cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80248ce:	4619      	mov	r1, r3
 80248d0:	6978      	ldr	r0, [r7, #20]
 80248d2:	f7f7 fd13 	bl	801c2fc <pbuf_remove_header>
 80248d6:	4603      	mov	r3, r0
 80248d8:	2b00      	cmp	r3, #0
 80248da:	d009      	beq.n	80248f0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80248dc:	4b40      	ldr	r3, [pc, #256]	; (80249e0 <icmp_input+0x1f8>)
 80248de:	22b6      	movs	r2, #182	; 0xb6
 80248e0:	4940      	ldr	r1, [pc, #256]	; (80249e4 <icmp_input+0x1fc>)
 80248e2:	4841      	ldr	r0, [pc, #260]	; (80249e8 <icmp_input+0x200>)
 80248e4:	f002 f9b8 	bl	8026c58 <iprintf>
          pbuf_free(r);
 80248e8:	6978      	ldr	r0, [r7, #20]
 80248ea:	f7f7 fd8d 	bl	801c408 <pbuf_free>
          goto icmperr;
 80248ee:	e06c      	b.n	80249ca <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80248f0:	6879      	ldr	r1, [r7, #4]
 80248f2:	6978      	ldr	r0, [r7, #20]
 80248f4:	f7f7 febc 	bl	801c670 <pbuf_copy>
 80248f8:	4603      	mov	r3, r0
 80248fa:	2b00      	cmp	r3, #0
 80248fc:	d003      	beq.n	8024906 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80248fe:	6978      	ldr	r0, [r7, #20]
 8024900:	f7f7 fd82 	bl	801c408 <pbuf_free>
          goto icmperr;
 8024904:	e061      	b.n	80249ca <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8024906:	6878      	ldr	r0, [r7, #4]
 8024908:	f7f7 fd7e 	bl	801c408 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 802490c:	697b      	ldr	r3, [r7, #20]
 802490e:	607b      	str	r3, [r7, #4]
 8024910:	e00f      	b.n	8024932 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8024912:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024914:	330e      	adds	r3, #14
 8024916:	4619      	mov	r1, r3
 8024918:	6878      	ldr	r0, [r7, #4]
 802491a:	f7f7 fcef 	bl	801c2fc <pbuf_remove_header>
 802491e:	4603      	mov	r3, r0
 8024920:	2b00      	cmp	r3, #0
 8024922:	d006      	beq.n	8024932 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8024924:	4b2e      	ldr	r3, [pc, #184]	; (80249e0 <icmp_input+0x1f8>)
 8024926:	22c7      	movs	r2, #199	; 0xc7
 8024928:	4930      	ldr	r1, [pc, #192]	; (80249ec <icmp_input+0x204>)
 802492a:	482f      	ldr	r0, [pc, #188]	; (80249e8 <icmp_input+0x200>)
 802492c:	f002 f994 	bl	8026c58 <iprintf>
          goto icmperr;
 8024930:	e04b      	b.n	80249ca <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8024932:	687b      	ldr	r3, [r7, #4]
 8024934:	685b      	ldr	r3, [r3, #4]
 8024936:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8024938:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802493a:	4619      	mov	r1, r3
 802493c:	6878      	ldr	r0, [r7, #4]
 802493e:	f7f7 fccd 	bl	801c2dc <pbuf_add_header>
 8024942:	4603      	mov	r3, r0
 8024944:	2b00      	cmp	r3, #0
 8024946:	d12b      	bne.n	80249a0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8024948:	687b      	ldr	r3, [r7, #4]
 802494a:	685b      	ldr	r3, [r3, #4]
 802494c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 802494e:	69fb      	ldr	r3, [r7, #28]
 8024950:	681a      	ldr	r2, [r3, #0]
 8024952:	68fb      	ldr	r3, [r7, #12]
 8024954:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8024956:	4b20      	ldr	r3, [pc, #128]	; (80249d8 <icmp_input+0x1f0>)
 8024958:	691a      	ldr	r2, [r3, #16]
 802495a:	68fb      	ldr	r3, [r7, #12]
 802495c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 802495e:	693b      	ldr	r3, [r7, #16]
 8024960:	2200      	movs	r2, #0
 8024962:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8024964:	693b      	ldr	r3, [r7, #16]
 8024966:	2200      	movs	r2, #0
 8024968:	709a      	strb	r2, [r3, #2]
 802496a:	2200      	movs	r2, #0
 802496c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 802496e:	68fb      	ldr	r3, [r7, #12]
 8024970:	22ff      	movs	r2, #255	; 0xff
 8024972:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8024974:	68fb      	ldr	r3, [r7, #12]
 8024976:	2200      	movs	r2, #0
 8024978:	729a      	strb	r2, [r3, #10]
 802497a:	2200      	movs	r2, #0
 802497c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 802497e:	683b      	ldr	r3, [r7, #0]
 8024980:	9302      	str	r3, [sp, #8]
 8024982:	2301      	movs	r3, #1
 8024984:	9301      	str	r3, [sp, #4]
 8024986:	2300      	movs	r3, #0
 8024988:	9300      	str	r3, [sp, #0]
 802498a:	23ff      	movs	r3, #255	; 0xff
 802498c:	2200      	movs	r2, #0
 802498e:	69f9      	ldr	r1, [r7, #28]
 8024990:	6878      	ldr	r0, [r7, #4]
 8024992:	f000 fa75 	bl	8024e80 <ip4_output_if>
 8024996:	4603      	mov	r3, r0
 8024998:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 802499a:	e001      	b.n	80249a0 <icmp_input+0x1b8>
      break;
 802499c:	bf00      	nop
 802499e:	e000      	b.n	80249a2 <icmp_input+0x1ba>
      break;
 80249a0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80249a2:	6878      	ldr	r0, [r7, #4]
 80249a4:	f7f7 fd30 	bl	801c408 <pbuf_free>
  return;
 80249a8:	e013      	b.n	80249d2 <icmp_input+0x1ea>
    goto lenerr;
 80249aa:	bf00      	nop
 80249ac:	e002      	b.n	80249b4 <icmp_input+0x1cc>
    goto lenerr;
 80249ae:	bf00      	nop
 80249b0:	e000      	b.n	80249b4 <icmp_input+0x1cc>
        goto lenerr;
 80249b2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80249b4:	6878      	ldr	r0, [r7, #4]
 80249b6:	f7f7 fd27 	bl	801c408 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80249ba:	e00a      	b.n	80249d2 <icmp_input+0x1ea>
        goto icmperr;
 80249bc:	bf00      	nop
 80249be:	e004      	b.n	80249ca <icmp_input+0x1e2>
        goto icmperr;
 80249c0:	bf00      	nop
 80249c2:	e002      	b.n	80249ca <icmp_input+0x1e2>
          goto icmperr;
 80249c4:	bf00      	nop
 80249c6:	e000      	b.n	80249ca <icmp_input+0x1e2>
          goto icmperr;
 80249c8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80249ca:	6878      	ldr	r0, [r7, #4]
 80249cc:	f7f7 fd1c 	bl	801c408 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80249d0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80249d2:	3728      	adds	r7, #40	; 0x28
 80249d4:	46bd      	mov	sp, r7
 80249d6:	bd80      	pop	{r7, pc}
 80249d8:	20012bd8 	.word	0x20012bd8
 80249dc:	20012bec 	.word	0x20012bec
 80249e0:	0802fc54 	.word	0x0802fc54
 80249e4:	0802fc8c 	.word	0x0802fc8c
 80249e8:	0802fcc4 	.word	0x0802fcc4
 80249ec:	0802fcec 	.word	0x0802fcec

080249f0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80249f0:	b580      	push	{r7, lr}
 80249f2:	b082      	sub	sp, #8
 80249f4:	af00      	add	r7, sp, #0
 80249f6:	6078      	str	r0, [r7, #4]
 80249f8:	460b      	mov	r3, r1
 80249fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80249fc:	78fb      	ldrb	r3, [r7, #3]
 80249fe:	461a      	mov	r2, r3
 8024a00:	2103      	movs	r1, #3
 8024a02:	6878      	ldr	r0, [r7, #4]
 8024a04:	f000 f814 	bl	8024a30 <icmp_send_response>
}
 8024a08:	bf00      	nop
 8024a0a:	3708      	adds	r7, #8
 8024a0c:	46bd      	mov	sp, r7
 8024a0e:	bd80      	pop	{r7, pc}

08024a10 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8024a10:	b580      	push	{r7, lr}
 8024a12:	b082      	sub	sp, #8
 8024a14:	af00      	add	r7, sp, #0
 8024a16:	6078      	str	r0, [r7, #4]
 8024a18:	460b      	mov	r3, r1
 8024a1a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8024a1c:	78fb      	ldrb	r3, [r7, #3]
 8024a1e:	461a      	mov	r2, r3
 8024a20:	210b      	movs	r1, #11
 8024a22:	6878      	ldr	r0, [r7, #4]
 8024a24:	f000 f804 	bl	8024a30 <icmp_send_response>
}
 8024a28:	bf00      	nop
 8024a2a:	3708      	adds	r7, #8
 8024a2c:	46bd      	mov	sp, r7
 8024a2e:	bd80      	pop	{r7, pc}

08024a30 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8024a30:	b580      	push	{r7, lr}
 8024a32:	b08c      	sub	sp, #48	; 0x30
 8024a34:	af04      	add	r7, sp, #16
 8024a36:	6078      	str	r0, [r7, #4]
 8024a38:	460b      	mov	r3, r1
 8024a3a:	70fb      	strb	r3, [r7, #3]
 8024a3c:	4613      	mov	r3, r2
 8024a3e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8024a40:	f44f 7220 	mov.w	r2, #640	; 0x280
 8024a44:	2124      	movs	r1, #36	; 0x24
 8024a46:	2022      	movs	r0, #34	; 0x22
 8024a48:	f7f7 f9fa 	bl	801be40 <pbuf_alloc>
 8024a4c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8024a4e:	69fb      	ldr	r3, [r7, #28]
 8024a50:	2b00      	cmp	r3, #0
 8024a52:	d04c      	beq.n	8024aee <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8024a54:	69fb      	ldr	r3, [r7, #28]
 8024a56:	895b      	ldrh	r3, [r3, #10]
 8024a58:	2b23      	cmp	r3, #35	; 0x23
 8024a5a:	d806      	bhi.n	8024a6a <icmp_send_response+0x3a>
 8024a5c:	4b26      	ldr	r3, [pc, #152]	; (8024af8 <icmp_send_response+0xc8>)
 8024a5e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8024a62:	4926      	ldr	r1, [pc, #152]	; (8024afc <icmp_send_response+0xcc>)
 8024a64:	4826      	ldr	r0, [pc, #152]	; (8024b00 <icmp_send_response+0xd0>)
 8024a66:	f002 f8f7 	bl	8026c58 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8024a6a:	687b      	ldr	r3, [r7, #4]
 8024a6c:	685b      	ldr	r3, [r3, #4]
 8024a6e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8024a70:	69fb      	ldr	r3, [r7, #28]
 8024a72:	685b      	ldr	r3, [r3, #4]
 8024a74:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8024a76:	697b      	ldr	r3, [r7, #20]
 8024a78:	78fa      	ldrb	r2, [r7, #3]
 8024a7a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8024a7c:	697b      	ldr	r3, [r7, #20]
 8024a7e:	78ba      	ldrb	r2, [r7, #2]
 8024a80:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8024a82:	697b      	ldr	r3, [r7, #20]
 8024a84:	2200      	movs	r2, #0
 8024a86:	711a      	strb	r2, [r3, #4]
 8024a88:	2200      	movs	r2, #0
 8024a8a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8024a8c:	697b      	ldr	r3, [r7, #20]
 8024a8e:	2200      	movs	r2, #0
 8024a90:	719a      	strb	r2, [r3, #6]
 8024a92:	2200      	movs	r2, #0
 8024a94:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8024a96:	69fb      	ldr	r3, [r7, #28]
 8024a98:	685b      	ldr	r3, [r3, #4]
 8024a9a:	f103 0008 	add.w	r0, r3, #8
 8024a9e:	687b      	ldr	r3, [r7, #4]
 8024aa0:	685b      	ldr	r3, [r3, #4]
 8024aa2:	221c      	movs	r2, #28
 8024aa4:	4619      	mov	r1, r3
 8024aa6:	f001 fd7f 	bl	80265a8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8024aaa:	69bb      	ldr	r3, [r7, #24]
 8024aac:	68db      	ldr	r3, [r3, #12]
 8024aae:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8024ab0:	f107 030c 	add.w	r3, r7, #12
 8024ab4:	4618      	mov	r0, r3
 8024ab6:	f000 f825 	bl	8024b04 <ip4_route>
 8024aba:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8024abc:	693b      	ldr	r3, [r7, #16]
 8024abe:	2b00      	cmp	r3, #0
 8024ac0:	d011      	beq.n	8024ae6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8024ac2:	697b      	ldr	r3, [r7, #20]
 8024ac4:	2200      	movs	r2, #0
 8024ac6:	709a      	strb	r2, [r3, #2]
 8024ac8:	2200      	movs	r2, #0
 8024aca:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8024acc:	f107 020c 	add.w	r2, r7, #12
 8024ad0:	693b      	ldr	r3, [r7, #16]
 8024ad2:	9302      	str	r3, [sp, #8]
 8024ad4:	2301      	movs	r3, #1
 8024ad6:	9301      	str	r3, [sp, #4]
 8024ad8:	2300      	movs	r3, #0
 8024ada:	9300      	str	r3, [sp, #0]
 8024adc:	23ff      	movs	r3, #255	; 0xff
 8024ade:	2100      	movs	r1, #0
 8024ae0:	69f8      	ldr	r0, [r7, #28]
 8024ae2:	f000 f9cd 	bl	8024e80 <ip4_output_if>
  }
  pbuf_free(q);
 8024ae6:	69f8      	ldr	r0, [r7, #28]
 8024ae8:	f7f7 fc8e 	bl	801c408 <pbuf_free>
 8024aec:	e000      	b.n	8024af0 <icmp_send_response+0xc0>
    return;
 8024aee:	bf00      	nop
}
 8024af0:	3720      	adds	r7, #32
 8024af2:	46bd      	mov	sp, r7
 8024af4:	bd80      	pop	{r7, pc}
 8024af6:	bf00      	nop
 8024af8:	0802fc54 	.word	0x0802fc54
 8024afc:	0802fd20 	.word	0x0802fd20
 8024b00:	0802fcc4 	.word	0x0802fcc4

08024b04 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8024b04:	b480      	push	{r7}
 8024b06:	b085      	sub	sp, #20
 8024b08:	af00      	add	r7, sp, #0
 8024b0a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8024b0c:	4b33      	ldr	r3, [pc, #204]	; (8024bdc <ip4_route+0xd8>)
 8024b0e:	681b      	ldr	r3, [r3, #0]
 8024b10:	60fb      	str	r3, [r7, #12]
 8024b12:	e036      	b.n	8024b82 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8024b14:	68fb      	ldr	r3, [r7, #12]
 8024b16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8024b1a:	f003 0301 	and.w	r3, r3, #1
 8024b1e:	b2db      	uxtb	r3, r3
 8024b20:	2b00      	cmp	r3, #0
 8024b22:	d02b      	beq.n	8024b7c <ip4_route+0x78>
 8024b24:	68fb      	ldr	r3, [r7, #12]
 8024b26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8024b2a:	089b      	lsrs	r3, r3, #2
 8024b2c:	f003 0301 	and.w	r3, r3, #1
 8024b30:	b2db      	uxtb	r3, r3
 8024b32:	2b00      	cmp	r3, #0
 8024b34:	d022      	beq.n	8024b7c <ip4_route+0x78>
 8024b36:	68fb      	ldr	r3, [r7, #12]
 8024b38:	3304      	adds	r3, #4
 8024b3a:	681b      	ldr	r3, [r3, #0]
 8024b3c:	2b00      	cmp	r3, #0
 8024b3e:	d01d      	beq.n	8024b7c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8024b40:	687b      	ldr	r3, [r7, #4]
 8024b42:	681a      	ldr	r2, [r3, #0]
 8024b44:	68fb      	ldr	r3, [r7, #12]
 8024b46:	3304      	adds	r3, #4
 8024b48:	681b      	ldr	r3, [r3, #0]
 8024b4a:	405a      	eors	r2, r3
 8024b4c:	68fb      	ldr	r3, [r7, #12]
 8024b4e:	3308      	adds	r3, #8
 8024b50:	681b      	ldr	r3, [r3, #0]
 8024b52:	4013      	ands	r3, r2
 8024b54:	2b00      	cmp	r3, #0
 8024b56:	d101      	bne.n	8024b5c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8024b58:	68fb      	ldr	r3, [r7, #12]
 8024b5a:	e038      	b.n	8024bce <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8024b5c:	68fb      	ldr	r3, [r7, #12]
 8024b5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8024b62:	f003 0302 	and.w	r3, r3, #2
 8024b66:	2b00      	cmp	r3, #0
 8024b68:	d108      	bne.n	8024b7c <ip4_route+0x78>
 8024b6a:	687b      	ldr	r3, [r7, #4]
 8024b6c:	681a      	ldr	r2, [r3, #0]
 8024b6e:	68fb      	ldr	r3, [r7, #12]
 8024b70:	330c      	adds	r3, #12
 8024b72:	681b      	ldr	r3, [r3, #0]
 8024b74:	429a      	cmp	r2, r3
 8024b76:	d101      	bne.n	8024b7c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8024b78:	68fb      	ldr	r3, [r7, #12]
 8024b7a:	e028      	b.n	8024bce <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8024b7c:	68fb      	ldr	r3, [r7, #12]
 8024b7e:	681b      	ldr	r3, [r3, #0]
 8024b80:	60fb      	str	r3, [r7, #12]
 8024b82:	68fb      	ldr	r3, [r7, #12]
 8024b84:	2b00      	cmp	r3, #0
 8024b86:	d1c5      	bne.n	8024b14 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8024b88:	4b15      	ldr	r3, [pc, #84]	; (8024be0 <ip4_route+0xdc>)
 8024b8a:	681b      	ldr	r3, [r3, #0]
 8024b8c:	2b00      	cmp	r3, #0
 8024b8e:	d01a      	beq.n	8024bc6 <ip4_route+0xc2>
 8024b90:	4b13      	ldr	r3, [pc, #76]	; (8024be0 <ip4_route+0xdc>)
 8024b92:	681b      	ldr	r3, [r3, #0]
 8024b94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8024b98:	f003 0301 	and.w	r3, r3, #1
 8024b9c:	2b00      	cmp	r3, #0
 8024b9e:	d012      	beq.n	8024bc6 <ip4_route+0xc2>
 8024ba0:	4b0f      	ldr	r3, [pc, #60]	; (8024be0 <ip4_route+0xdc>)
 8024ba2:	681b      	ldr	r3, [r3, #0]
 8024ba4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8024ba8:	f003 0304 	and.w	r3, r3, #4
 8024bac:	2b00      	cmp	r3, #0
 8024bae:	d00a      	beq.n	8024bc6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8024bb0:	4b0b      	ldr	r3, [pc, #44]	; (8024be0 <ip4_route+0xdc>)
 8024bb2:	681b      	ldr	r3, [r3, #0]
 8024bb4:	3304      	adds	r3, #4
 8024bb6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8024bb8:	2b00      	cmp	r3, #0
 8024bba:	d004      	beq.n	8024bc6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8024bbc:	687b      	ldr	r3, [r7, #4]
 8024bbe:	681b      	ldr	r3, [r3, #0]
 8024bc0:	b2db      	uxtb	r3, r3
 8024bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8024bc4:	d101      	bne.n	8024bca <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8024bc6:	2300      	movs	r3, #0
 8024bc8:	e001      	b.n	8024bce <ip4_route+0xca>
  }

  return netif_default;
 8024bca:	4b05      	ldr	r3, [pc, #20]	; (8024be0 <ip4_route+0xdc>)
 8024bcc:	681b      	ldr	r3, [r3, #0]
}
 8024bce:	4618      	mov	r0, r3
 8024bd0:	3714      	adds	r7, #20
 8024bd2:	46bd      	mov	sp, r7
 8024bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bd8:	4770      	bx	lr
 8024bda:	bf00      	nop
 8024bdc:	2001d50c 	.word	0x2001d50c
 8024be0:	2001d510 	.word	0x2001d510

08024be4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8024be4:	b580      	push	{r7, lr}
 8024be6:	b082      	sub	sp, #8
 8024be8:	af00      	add	r7, sp, #0
 8024bea:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8024bec:	687b      	ldr	r3, [r7, #4]
 8024bee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8024bf2:	f003 0301 	and.w	r3, r3, #1
 8024bf6:	b2db      	uxtb	r3, r3
 8024bf8:	2b00      	cmp	r3, #0
 8024bfa:	d016      	beq.n	8024c2a <ip4_input_accept+0x46>
 8024bfc:	687b      	ldr	r3, [r7, #4]
 8024bfe:	3304      	adds	r3, #4
 8024c00:	681b      	ldr	r3, [r3, #0]
 8024c02:	2b00      	cmp	r3, #0
 8024c04:	d011      	beq.n	8024c2a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8024c06:	4b0b      	ldr	r3, [pc, #44]	; (8024c34 <ip4_input_accept+0x50>)
 8024c08:	695a      	ldr	r2, [r3, #20]
 8024c0a:	687b      	ldr	r3, [r7, #4]
 8024c0c:	3304      	adds	r3, #4
 8024c0e:	681b      	ldr	r3, [r3, #0]
 8024c10:	429a      	cmp	r2, r3
 8024c12:	d008      	beq.n	8024c26 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8024c14:	4b07      	ldr	r3, [pc, #28]	; (8024c34 <ip4_input_accept+0x50>)
 8024c16:	695b      	ldr	r3, [r3, #20]
 8024c18:	6879      	ldr	r1, [r7, #4]
 8024c1a:	4618      	mov	r0, r3
 8024c1c:	f000 fa08 	bl	8025030 <ip4_addr_isbroadcast_u32>
 8024c20:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8024c22:	2b00      	cmp	r3, #0
 8024c24:	d001      	beq.n	8024c2a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8024c26:	2301      	movs	r3, #1
 8024c28:	e000      	b.n	8024c2c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8024c2a:	2300      	movs	r3, #0
}
 8024c2c:	4618      	mov	r0, r3
 8024c2e:	3708      	adds	r7, #8
 8024c30:	46bd      	mov	sp, r7
 8024c32:	bd80      	pop	{r7, pc}
 8024c34:	20012bd8 	.word	0x20012bd8

08024c38 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8024c38:	b580      	push	{r7, lr}
 8024c3a:	b086      	sub	sp, #24
 8024c3c:	af00      	add	r7, sp, #0
 8024c3e:	6078      	str	r0, [r7, #4]
 8024c40:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8024c42:	687b      	ldr	r3, [r7, #4]
 8024c44:	685b      	ldr	r3, [r3, #4]
 8024c46:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8024c48:	697b      	ldr	r3, [r7, #20]
 8024c4a:	781b      	ldrb	r3, [r3, #0]
 8024c4c:	091b      	lsrs	r3, r3, #4
 8024c4e:	b2db      	uxtb	r3, r3
 8024c50:	2b04      	cmp	r3, #4
 8024c52:	d004      	beq.n	8024c5e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8024c54:	6878      	ldr	r0, [r7, #4]
 8024c56:	f7f7 fbd7 	bl	801c408 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8024c5a:	2300      	movs	r3, #0
 8024c5c:	e107      	b.n	8024e6e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8024c5e:	697b      	ldr	r3, [r7, #20]
 8024c60:	781b      	ldrb	r3, [r3, #0]
 8024c62:	f003 030f 	and.w	r3, r3, #15
 8024c66:	b2db      	uxtb	r3, r3
 8024c68:	009b      	lsls	r3, r3, #2
 8024c6a:	b2db      	uxtb	r3, r3
 8024c6c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8024c6e:	697b      	ldr	r3, [r7, #20]
 8024c70:	885b      	ldrh	r3, [r3, #2]
 8024c72:	b29b      	uxth	r3, r3
 8024c74:	4618      	mov	r0, r3
 8024c76:	f7f5 ff89 	bl	801ab8c <lwip_htons>
 8024c7a:	4603      	mov	r3, r0
 8024c7c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8024c7e:	687b      	ldr	r3, [r7, #4]
 8024c80:	891b      	ldrh	r3, [r3, #8]
 8024c82:	89ba      	ldrh	r2, [r7, #12]
 8024c84:	429a      	cmp	r2, r3
 8024c86:	d204      	bcs.n	8024c92 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8024c88:	89bb      	ldrh	r3, [r7, #12]
 8024c8a:	4619      	mov	r1, r3
 8024c8c:	6878      	ldr	r0, [r7, #4]
 8024c8e:	f7f7 fa35 	bl	801c0fc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8024c92:	687b      	ldr	r3, [r7, #4]
 8024c94:	895b      	ldrh	r3, [r3, #10]
 8024c96:	89fa      	ldrh	r2, [r7, #14]
 8024c98:	429a      	cmp	r2, r3
 8024c9a:	d807      	bhi.n	8024cac <ip4_input+0x74>
 8024c9c:	687b      	ldr	r3, [r7, #4]
 8024c9e:	891b      	ldrh	r3, [r3, #8]
 8024ca0:	89ba      	ldrh	r2, [r7, #12]
 8024ca2:	429a      	cmp	r2, r3
 8024ca4:	d802      	bhi.n	8024cac <ip4_input+0x74>
 8024ca6:	89fb      	ldrh	r3, [r7, #14]
 8024ca8:	2b13      	cmp	r3, #19
 8024caa:	d804      	bhi.n	8024cb6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8024cac:	6878      	ldr	r0, [r7, #4]
 8024cae:	f7f7 fbab 	bl	801c408 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8024cb2:	2300      	movs	r3, #0
 8024cb4:	e0db      	b.n	8024e6e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8024cb6:	697b      	ldr	r3, [r7, #20]
 8024cb8:	691b      	ldr	r3, [r3, #16]
 8024cba:	4a6f      	ldr	r2, [pc, #444]	; (8024e78 <ip4_input+0x240>)
 8024cbc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8024cbe:	697b      	ldr	r3, [r7, #20]
 8024cc0:	68db      	ldr	r3, [r3, #12]
 8024cc2:	4a6d      	ldr	r2, [pc, #436]	; (8024e78 <ip4_input+0x240>)
 8024cc4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8024cc6:	4b6c      	ldr	r3, [pc, #432]	; (8024e78 <ip4_input+0x240>)
 8024cc8:	695b      	ldr	r3, [r3, #20]
 8024cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024cce:	2be0      	cmp	r3, #224	; 0xe0
 8024cd0:	d112      	bne.n	8024cf8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8024cd2:	683b      	ldr	r3, [r7, #0]
 8024cd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8024cd8:	f003 0301 	and.w	r3, r3, #1
 8024cdc:	b2db      	uxtb	r3, r3
 8024cde:	2b00      	cmp	r3, #0
 8024ce0:	d007      	beq.n	8024cf2 <ip4_input+0xba>
 8024ce2:	683b      	ldr	r3, [r7, #0]
 8024ce4:	3304      	adds	r3, #4
 8024ce6:	681b      	ldr	r3, [r3, #0]
 8024ce8:	2b00      	cmp	r3, #0
 8024cea:	d002      	beq.n	8024cf2 <ip4_input+0xba>
      netif = inp;
 8024cec:	683b      	ldr	r3, [r7, #0]
 8024cee:	613b      	str	r3, [r7, #16]
 8024cf0:	e02a      	b.n	8024d48 <ip4_input+0x110>
    } else {
      netif = NULL;
 8024cf2:	2300      	movs	r3, #0
 8024cf4:	613b      	str	r3, [r7, #16]
 8024cf6:	e027      	b.n	8024d48 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8024cf8:	6838      	ldr	r0, [r7, #0]
 8024cfa:	f7ff ff73 	bl	8024be4 <ip4_input_accept>
 8024cfe:	4603      	mov	r3, r0
 8024d00:	2b00      	cmp	r3, #0
 8024d02:	d002      	beq.n	8024d0a <ip4_input+0xd2>
      netif = inp;
 8024d04:	683b      	ldr	r3, [r7, #0]
 8024d06:	613b      	str	r3, [r7, #16]
 8024d08:	e01e      	b.n	8024d48 <ip4_input+0x110>
    } else {
      netif = NULL;
 8024d0a:	2300      	movs	r3, #0
 8024d0c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8024d0e:	4b5a      	ldr	r3, [pc, #360]	; (8024e78 <ip4_input+0x240>)
 8024d10:	695b      	ldr	r3, [r3, #20]
 8024d12:	b2db      	uxtb	r3, r3
 8024d14:	2b7f      	cmp	r3, #127	; 0x7f
 8024d16:	d017      	beq.n	8024d48 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8024d18:	4b58      	ldr	r3, [pc, #352]	; (8024e7c <ip4_input+0x244>)
 8024d1a:	681b      	ldr	r3, [r3, #0]
 8024d1c:	613b      	str	r3, [r7, #16]
 8024d1e:	e00e      	b.n	8024d3e <ip4_input+0x106>
          if (netif == inp) {
 8024d20:	693a      	ldr	r2, [r7, #16]
 8024d22:	683b      	ldr	r3, [r7, #0]
 8024d24:	429a      	cmp	r2, r3
 8024d26:	d006      	beq.n	8024d36 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8024d28:	6938      	ldr	r0, [r7, #16]
 8024d2a:	f7ff ff5b 	bl	8024be4 <ip4_input_accept>
 8024d2e:	4603      	mov	r3, r0
 8024d30:	2b00      	cmp	r3, #0
 8024d32:	d108      	bne.n	8024d46 <ip4_input+0x10e>
 8024d34:	e000      	b.n	8024d38 <ip4_input+0x100>
            continue;
 8024d36:	bf00      	nop
        NETIF_FOREACH(netif) {
 8024d38:	693b      	ldr	r3, [r7, #16]
 8024d3a:	681b      	ldr	r3, [r3, #0]
 8024d3c:	613b      	str	r3, [r7, #16]
 8024d3e:	693b      	ldr	r3, [r7, #16]
 8024d40:	2b00      	cmp	r3, #0
 8024d42:	d1ed      	bne.n	8024d20 <ip4_input+0xe8>
 8024d44:	e000      	b.n	8024d48 <ip4_input+0x110>
            break;
 8024d46:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8024d48:	4b4b      	ldr	r3, [pc, #300]	; (8024e78 <ip4_input+0x240>)
 8024d4a:	691b      	ldr	r3, [r3, #16]
 8024d4c:	6839      	ldr	r1, [r7, #0]
 8024d4e:	4618      	mov	r0, r3
 8024d50:	f000 f96e 	bl	8025030 <ip4_addr_isbroadcast_u32>
 8024d54:	4603      	mov	r3, r0
 8024d56:	2b00      	cmp	r3, #0
 8024d58:	d105      	bne.n	8024d66 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8024d5a:	4b47      	ldr	r3, [pc, #284]	; (8024e78 <ip4_input+0x240>)
 8024d5c:	691b      	ldr	r3, [r3, #16]
 8024d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8024d62:	2be0      	cmp	r3, #224	; 0xe0
 8024d64:	d104      	bne.n	8024d70 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8024d66:	6878      	ldr	r0, [r7, #4]
 8024d68:	f7f7 fb4e 	bl	801c408 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8024d6c:	2300      	movs	r3, #0
 8024d6e:	e07e      	b.n	8024e6e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8024d70:	693b      	ldr	r3, [r7, #16]
 8024d72:	2b00      	cmp	r3, #0
 8024d74:	d104      	bne.n	8024d80 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8024d76:	6878      	ldr	r0, [r7, #4]
 8024d78:	f7f7 fb46 	bl	801c408 <pbuf_free>
    return ERR_OK;
 8024d7c:	2300      	movs	r3, #0
 8024d7e:	e076      	b.n	8024e6e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8024d80:	697b      	ldr	r3, [r7, #20]
 8024d82:	88db      	ldrh	r3, [r3, #6]
 8024d84:	b29b      	uxth	r3, r3
 8024d86:	461a      	mov	r2, r3
 8024d88:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8024d8c:	4013      	ands	r3, r2
 8024d8e:	2b00      	cmp	r3, #0
 8024d90:	d00b      	beq.n	8024daa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8024d92:	6878      	ldr	r0, [r7, #4]
 8024d94:	f000 fc92 	bl	80256bc <ip4_reass>
 8024d98:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8024d9a:	687b      	ldr	r3, [r7, #4]
 8024d9c:	2b00      	cmp	r3, #0
 8024d9e:	d101      	bne.n	8024da4 <ip4_input+0x16c>
      return ERR_OK;
 8024da0:	2300      	movs	r3, #0
 8024da2:	e064      	b.n	8024e6e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8024da4:	687b      	ldr	r3, [r7, #4]
 8024da6:	685b      	ldr	r3, [r3, #4]
 8024da8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8024daa:	4a33      	ldr	r2, [pc, #204]	; (8024e78 <ip4_input+0x240>)
 8024dac:	693b      	ldr	r3, [r7, #16]
 8024dae:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8024db0:	4a31      	ldr	r2, [pc, #196]	; (8024e78 <ip4_input+0x240>)
 8024db2:	683b      	ldr	r3, [r7, #0]
 8024db4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8024db6:	4a30      	ldr	r2, [pc, #192]	; (8024e78 <ip4_input+0x240>)
 8024db8:	697b      	ldr	r3, [r7, #20]
 8024dba:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8024dbc:	697b      	ldr	r3, [r7, #20]
 8024dbe:	781b      	ldrb	r3, [r3, #0]
 8024dc0:	f003 030f 	and.w	r3, r3, #15
 8024dc4:	b2db      	uxtb	r3, r3
 8024dc6:	009b      	lsls	r3, r3, #2
 8024dc8:	b2db      	uxtb	r3, r3
 8024dca:	b29a      	uxth	r2, r3
 8024dcc:	4b2a      	ldr	r3, [pc, #168]	; (8024e78 <ip4_input+0x240>)
 8024dce:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8024dd0:	89fb      	ldrh	r3, [r7, #14]
 8024dd2:	4619      	mov	r1, r3
 8024dd4:	6878      	ldr	r0, [r7, #4]
 8024dd6:	f7f7 fa91 	bl	801c2fc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8024dda:	697b      	ldr	r3, [r7, #20]
 8024ddc:	7a5b      	ldrb	r3, [r3, #9]
 8024dde:	2b11      	cmp	r3, #17
 8024de0:	d006      	beq.n	8024df0 <ip4_input+0x1b8>
 8024de2:	2b11      	cmp	r3, #17
 8024de4:	dc13      	bgt.n	8024e0e <ip4_input+0x1d6>
 8024de6:	2b01      	cmp	r3, #1
 8024de8:	d00c      	beq.n	8024e04 <ip4_input+0x1cc>
 8024dea:	2b06      	cmp	r3, #6
 8024dec:	d005      	beq.n	8024dfa <ip4_input+0x1c2>
 8024dee:	e00e      	b.n	8024e0e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8024df0:	6839      	ldr	r1, [r7, #0]
 8024df2:	6878      	ldr	r0, [r7, #4]
 8024df4:	f7fe f9e6 	bl	80231c4 <udp_input>
        break;
 8024df8:	e026      	b.n	8024e48 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8024dfa:	6839      	ldr	r1, [r7, #0]
 8024dfc:	6878      	ldr	r0, [r7, #4]
 8024dfe:	f7f9 fd69 	bl	801e8d4 <tcp_input>
        break;
 8024e02:	e021      	b.n	8024e48 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8024e04:	6839      	ldr	r1, [r7, #0]
 8024e06:	6878      	ldr	r0, [r7, #4]
 8024e08:	f7ff fcee 	bl	80247e8 <icmp_input>
        break;
 8024e0c:	e01c      	b.n	8024e48 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8024e0e:	4b1a      	ldr	r3, [pc, #104]	; (8024e78 <ip4_input+0x240>)
 8024e10:	695b      	ldr	r3, [r3, #20]
 8024e12:	6939      	ldr	r1, [r7, #16]
 8024e14:	4618      	mov	r0, r3
 8024e16:	f000 f90b 	bl	8025030 <ip4_addr_isbroadcast_u32>
 8024e1a:	4603      	mov	r3, r0
 8024e1c:	2b00      	cmp	r3, #0
 8024e1e:	d10f      	bne.n	8024e40 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8024e20:	4b15      	ldr	r3, [pc, #84]	; (8024e78 <ip4_input+0x240>)
 8024e22:	695b      	ldr	r3, [r3, #20]
 8024e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8024e28:	2be0      	cmp	r3, #224	; 0xe0
 8024e2a:	d009      	beq.n	8024e40 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8024e2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8024e30:	4619      	mov	r1, r3
 8024e32:	6878      	ldr	r0, [r7, #4]
 8024e34:	f7f7 fad5 	bl	801c3e2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8024e38:	2102      	movs	r1, #2
 8024e3a:	6878      	ldr	r0, [r7, #4]
 8024e3c:	f7ff fdd8 	bl	80249f0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8024e40:	6878      	ldr	r0, [r7, #4]
 8024e42:	f7f7 fae1 	bl	801c408 <pbuf_free>
        break;
 8024e46:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8024e48:	4b0b      	ldr	r3, [pc, #44]	; (8024e78 <ip4_input+0x240>)
 8024e4a:	2200      	movs	r2, #0
 8024e4c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8024e4e:	4b0a      	ldr	r3, [pc, #40]	; (8024e78 <ip4_input+0x240>)
 8024e50:	2200      	movs	r2, #0
 8024e52:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8024e54:	4b08      	ldr	r3, [pc, #32]	; (8024e78 <ip4_input+0x240>)
 8024e56:	2200      	movs	r2, #0
 8024e58:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8024e5a:	4b07      	ldr	r3, [pc, #28]	; (8024e78 <ip4_input+0x240>)
 8024e5c:	2200      	movs	r2, #0
 8024e5e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8024e60:	4b05      	ldr	r3, [pc, #20]	; (8024e78 <ip4_input+0x240>)
 8024e62:	2200      	movs	r2, #0
 8024e64:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8024e66:	4b04      	ldr	r3, [pc, #16]	; (8024e78 <ip4_input+0x240>)
 8024e68:	2200      	movs	r2, #0
 8024e6a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8024e6c:	2300      	movs	r3, #0
}
 8024e6e:	4618      	mov	r0, r3
 8024e70:	3718      	adds	r7, #24
 8024e72:	46bd      	mov	sp, r7
 8024e74:	bd80      	pop	{r7, pc}
 8024e76:	bf00      	nop
 8024e78:	20012bd8 	.word	0x20012bd8
 8024e7c:	2001d50c 	.word	0x2001d50c

08024e80 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8024e80:	b580      	push	{r7, lr}
 8024e82:	b08a      	sub	sp, #40	; 0x28
 8024e84:	af04      	add	r7, sp, #16
 8024e86:	60f8      	str	r0, [r7, #12]
 8024e88:	60b9      	str	r1, [r7, #8]
 8024e8a:	607a      	str	r2, [r7, #4]
 8024e8c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8024e8e:	68bb      	ldr	r3, [r7, #8]
 8024e90:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8024e92:	687b      	ldr	r3, [r7, #4]
 8024e94:	2b00      	cmp	r3, #0
 8024e96:	d009      	beq.n	8024eac <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8024e98:	68bb      	ldr	r3, [r7, #8]
 8024e9a:	2b00      	cmp	r3, #0
 8024e9c:	d003      	beq.n	8024ea6 <ip4_output_if+0x26>
 8024e9e:	68bb      	ldr	r3, [r7, #8]
 8024ea0:	681b      	ldr	r3, [r3, #0]
 8024ea2:	2b00      	cmp	r3, #0
 8024ea4:	d102      	bne.n	8024eac <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8024ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024ea8:	3304      	adds	r3, #4
 8024eaa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8024eac:	78fa      	ldrb	r2, [r7, #3]
 8024eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024eb0:	9302      	str	r3, [sp, #8]
 8024eb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8024eb6:	9301      	str	r3, [sp, #4]
 8024eb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8024ebc:	9300      	str	r3, [sp, #0]
 8024ebe:	4613      	mov	r3, r2
 8024ec0:	687a      	ldr	r2, [r7, #4]
 8024ec2:	6979      	ldr	r1, [r7, #20]
 8024ec4:	68f8      	ldr	r0, [r7, #12]
 8024ec6:	f000 f805 	bl	8024ed4 <ip4_output_if_src>
 8024eca:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8024ecc:	4618      	mov	r0, r3
 8024ece:	3718      	adds	r7, #24
 8024ed0:	46bd      	mov	sp, r7
 8024ed2:	bd80      	pop	{r7, pc}

08024ed4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8024ed4:	b580      	push	{r7, lr}
 8024ed6:	b088      	sub	sp, #32
 8024ed8:	af00      	add	r7, sp, #0
 8024eda:	60f8      	str	r0, [r7, #12]
 8024edc:	60b9      	str	r1, [r7, #8]
 8024ede:	607a      	str	r2, [r7, #4]
 8024ee0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8024ee2:	68fb      	ldr	r3, [r7, #12]
 8024ee4:	7b9b      	ldrb	r3, [r3, #14]
 8024ee6:	2b01      	cmp	r3, #1
 8024ee8:	d006      	beq.n	8024ef8 <ip4_output_if_src+0x24>
 8024eea:	4b4b      	ldr	r3, [pc, #300]	; (8025018 <ip4_output_if_src+0x144>)
 8024eec:	f44f 7255 	mov.w	r2, #852	; 0x354
 8024ef0:	494a      	ldr	r1, [pc, #296]	; (802501c <ip4_output_if_src+0x148>)
 8024ef2:	484b      	ldr	r0, [pc, #300]	; (8025020 <ip4_output_if_src+0x14c>)
 8024ef4:	f001 feb0 	bl	8026c58 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8024ef8:	687b      	ldr	r3, [r7, #4]
 8024efa:	2b00      	cmp	r3, #0
 8024efc:	d060      	beq.n	8024fc0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8024efe:	2314      	movs	r3, #20
 8024f00:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8024f02:	2114      	movs	r1, #20
 8024f04:	68f8      	ldr	r0, [r7, #12]
 8024f06:	f7f7 f9e9 	bl	801c2dc <pbuf_add_header>
 8024f0a:	4603      	mov	r3, r0
 8024f0c:	2b00      	cmp	r3, #0
 8024f0e:	d002      	beq.n	8024f16 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8024f10:	f06f 0301 	mvn.w	r3, #1
 8024f14:	e07c      	b.n	8025010 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8024f16:	68fb      	ldr	r3, [r7, #12]
 8024f18:	685b      	ldr	r3, [r3, #4]
 8024f1a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8024f1c:	68fb      	ldr	r3, [r7, #12]
 8024f1e:	895b      	ldrh	r3, [r3, #10]
 8024f20:	2b13      	cmp	r3, #19
 8024f22:	d806      	bhi.n	8024f32 <ip4_output_if_src+0x5e>
 8024f24:	4b3c      	ldr	r3, [pc, #240]	; (8025018 <ip4_output_if_src+0x144>)
 8024f26:	f44f 7262 	mov.w	r2, #904	; 0x388
 8024f2a:	493e      	ldr	r1, [pc, #248]	; (8025024 <ip4_output_if_src+0x150>)
 8024f2c:	483c      	ldr	r0, [pc, #240]	; (8025020 <ip4_output_if_src+0x14c>)
 8024f2e:	f001 fe93 	bl	8026c58 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8024f32:	69fb      	ldr	r3, [r7, #28]
 8024f34:	78fa      	ldrb	r2, [r7, #3]
 8024f36:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8024f38:	69fb      	ldr	r3, [r7, #28]
 8024f3a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8024f3e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8024f40:	687b      	ldr	r3, [r7, #4]
 8024f42:	681a      	ldr	r2, [r3, #0]
 8024f44:	69fb      	ldr	r3, [r7, #28]
 8024f46:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8024f48:	8b7b      	ldrh	r3, [r7, #26]
 8024f4a:	089b      	lsrs	r3, r3, #2
 8024f4c:	b29b      	uxth	r3, r3
 8024f4e:	b2db      	uxtb	r3, r3
 8024f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024f54:	b2da      	uxtb	r2, r3
 8024f56:	69fb      	ldr	r3, [r7, #28]
 8024f58:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8024f5a:	69fb      	ldr	r3, [r7, #28]
 8024f5c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8024f60:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8024f62:	68fb      	ldr	r3, [r7, #12]
 8024f64:	891b      	ldrh	r3, [r3, #8]
 8024f66:	4618      	mov	r0, r3
 8024f68:	f7f5 fe10 	bl	801ab8c <lwip_htons>
 8024f6c:	4603      	mov	r3, r0
 8024f6e:	461a      	mov	r2, r3
 8024f70:	69fb      	ldr	r3, [r7, #28]
 8024f72:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8024f74:	69fb      	ldr	r3, [r7, #28]
 8024f76:	2200      	movs	r2, #0
 8024f78:	719a      	strb	r2, [r3, #6]
 8024f7a:	2200      	movs	r2, #0
 8024f7c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8024f7e:	4b2a      	ldr	r3, [pc, #168]	; (8025028 <ip4_output_if_src+0x154>)
 8024f80:	881b      	ldrh	r3, [r3, #0]
 8024f82:	4618      	mov	r0, r3
 8024f84:	f7f5 fe02 	bl	801ab8c <lwip_htons>
 8024f88:	4603      	mov	r3, r0
 8024f8a:	461a      	mov	r2, r3
 8024f8c:	69fb      	ldr	r3, [r7, #28]
 8024f8e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8024f90:	4b25      	ldr	r3, [pc, #148]	; (8025028 <ip4_output_if_src+0x154>)
 8024f92:	881b      	ldrh	r3, [r3, #0]
 8024f94:	3301      	adds	r3, #1
 8024f96:	b29a      	uxth	r2, r3
 8024f98:	4b23      	ldr	r3, [pc, #140]	; (8025028 <ip4_output_if_src+0x154>)
 8024f9a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8024f9c:	68bb      	ldr	r3, [r7, #8]
 8024f9e:	2b00      	cmp	r3, #0
 8024fa0:	d104      	bne.n	8024fac <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8024fa2:	4b22      	ldr	r3, [pc, #136]	; (802502c <ip4_output_if_src+0x158>)
 8024fa4:	681a      	ldr	r2, [r3, #0]
 8024fa6:	69fb      	ldr	r3, [r7, #28]
 8024fa8:	60da      	str	r2, [r3, #12]
 8024faa:	e003      	b.n	8024fb4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8024fac:	68bb      	ldr	r3, [r7, #8]
 8024fae:	681a      	ldr	r2, [r3, #0]
 8024fb0:	69fb      	ldr	r3, [r7, #28]
 8024fb2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8024fb4:	69fb      	ldr	r3, [r7, #28]
 8024fb6:	2200      	movs	r2, #0
 8024fb8:	729a      	strb	r2, [r3, #10]
 8024fba:	2200      	movs	r2, #0
 8024fbc:	72da      	strb	r2, [r3, #11]
 8024fbe:	e00f      	b.n	8024fe0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8024fc0:	68fb      	ldr	r3, [r7, #12]
 8024fc2:	895b      	ldrh	r3, [r3, #10]
 8024fc4:	2b13      	cmp	r3, #19
 8024fc6:	d802      	bhi.n	8024fce <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8024fc8:	f06f 0301 	mvn.w	r3, #1
 8024fcc:	e020      	b.n	8025010 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8024fce:	68fb      	ldr	r3, [r7, #12]
 8024fd0:	685b      	ldr	r3, [r3, #4]
 8024fd2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8024fd4:	69fb      	ldr	r3, [r7, #28]
 8024fd6:	691b      	ldr	r3, [r3, #16]
 8024fd8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8024fda:	f107 0314 	add.w	r3, r7, #20
 8024fde:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8024fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024fe2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8024fe4:	2b00      	cmp	r3, #0
 8024fe6:	d00c      	beq.n	8025002 <ip4_output_if_src+0x12e>
 8024fe8:	68fb      	ldr	r3, [r7, #12]
 8024fea:	891a      	ldrh	r2, [r3, #8]
 8024fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024fee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8024ff0:	429a      	cmp	r2, r3
 8024ff2:	d906      	bls.n	8025002 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8024ff4:	687a      	ldr	r2, [r7, #4]
 8024ff6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024ff8:	68f8      	ldr	r0, [r7, #12]
 8024ffa:	f000 fd4d 	bl	8025a98 <ip4_frag>
 8024ffe:	4603      	mov	r3, r0
 8025000:	e006      	b.n	8025010 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8025002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025004:	695b      	ldr	r3, [r3, #20]
 8025006:	687a      	ldr	r2, [r7, #4]
 8025008:	68f9      	ldr	r1, [r7, #12]
 802500a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802500c:	4798      	blx	r3
 802500e:	4603      	mov	r3, r0
}
 8025010:	4618      	mov	r0, r3
 8025012:	3720      	adds	r7, #32
 8025014:	46bd      	mov	sp, r7
 8025016:	bd80      	pop	{r7, pc}
 8025018:	0802fd4c 	.word	0x0802fd4c
 802501c:	0802fd80 	.word	0x0802fd80
 8025020:	0802fd8c 	.word	0x0802fd8c
 8025024:	0802fdb4 	.word	0x0802fdb4
 8025028:	20005b5a 	.word	0x20005b5a
 802502c:	080608e4 	.word	0x080608e4

08025030 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8025030:	b480      	push	{r7}
 8025032:	b085      	sub	sp, #20
 8025034:	af00      	add	r7, sp, #0
 8025036:	6078      	str	r0, [r7, #4]
 8025038:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 802503a:	687b      	ldr	r3, [r7, #4]
 802503c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 802503e:	687b      	ldr	r3, [r7, #4]
 8025040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8025044:	d002      	beq.n	802504c <ip4_addr_isbroadcast_u32+0x1c>
 8025046:	687b      	ldr	r3, [r7, #4]
 8025048:	2b00      	cmp	r3, #0
 802504a:	d101      	bne.n	8025050 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 802504c:	2301      	movs	r3, #1
 802504e:	e02a      	b.n	80250a6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8025050:	683b      	ldr	r3, [r7, #0]
 8025052:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8025056:	f003 0302 	and.w	r3, r3, #2
 802505a:	2b00      	cmp	r3, #0
 802505c:	d101      	bne.n	8025062 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 802505e:	2300      	movs	r3, #0
 8025060:	e021      	b.n	80250a6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8025062:	683b      	ldr	r3, [r7, #0]
 8025064:	3304      	adds	r3, #4
 8025066:	681b      	ldr	r3, [r3, #0]
 8025068:	687a      	ldr	r2, [r7, #4]
 802506a:	429a      	cmp	r2, r3
 802506c:	d101      	bne.n	8025072 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 802506e:	2300      	movs	r3, #0
 8025070:	e019      	b.n	80250a6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8025072:	68fa      	ldr	r2, [r7, #12]
 8025074:	683b      	ldr	r3, [r7, #0]
 8025076:	3304      	adds	r3, #4
 8025078:	681b      	ldr	r3, [r3, #0]
 802507a:	405a      	eors	r2, r3
 802507c:	683b      	ldr	r3, [r7, #0]
 802507e:	3308      	adds	r3, #8
 8025080:	681b      	ldr	r3, [r3, #0]
 8025082:	4013      	ands	r3, r2
 8025084:	2b00      	cmp	r3, #0
 8025086:	d10d      	bne.n	80250a4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8025088:	683b      	ldr	r3, [r7, #0]
 802508a:	3308      	adds	r3, #8
 802508c:	681b      	ldr	r3, [r3, #0]
 802508e:	43da      	mvns	r2, r3
 8025090:	687b      	ldr	r3, [r7, #4]
 8025092:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8025094:	683b      	ldr	r3, [r7, #0]
 8025096:	3308      	adds	r3, #8
 8025098:	681b      	ldr	r3, [r3, #0]
 802509a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 802509c:	429a      	cmp	r2, r3
 802509e:	d101      	bne.n	80250a4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80250a0:	2301      	movs	r3, #1
 80250a2:	e000      	b.n	80250a6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80250a4:	2300      	movs	r3, #0
  }
}
 80250a6:	4618      	mov	r0, r3
 80250a8:	3714      	adds	r7, #20
 80250aa:	46bd      	mov	sp, r7
 80250ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250b0:	4770      	bx	lr
	...

080250b4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80250b4:	b580      	push	{r7, lr}
 80250b6:	b084      	sub	sp, #16
 80250b8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80250ba:	2300      	movs	r3, #0
 80250bc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80250be:	4b12      	ldr	r3, [pc, #72]	; (8025108 <ip_reass_tmr+0x54>)
 80250c0:	681b      	ldr	r3, [r3, #0]
 80250c2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80250c4:	e018      	b.n	80250f8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80250c6:	68fb      	ldr	r3, [r7, #12]
 80250c8:	7fdb      	ldrb	r3, [r3, #31]
 80250ca:	2b00      	cmp	r3, #0
 80250cc:	d00b      	beq.n	80250e6 <ip_reass_tmr+0x32>
      r->timer--;
 80250ce:	68fb      	ldr	r3, [r7, #12]
 80250d0:	7fdb      	ldrb	r3, [r3, #31]
 80250d2:	3b01      	subs	r3, #1
 80250d4:	b2da      	uxtb	r2, r3
 80250d6:	68fb      	ldr	r3, [r7, #12]
 80250d8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80250da:	68fb      	ldr	r3, [r7, #12]
 80250dc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80250de:	68fb      	ldr	r3, [r7, #12]
 80250e0:	681b      	ldr	r3, [r3, #0]
 80250e2:	60fb      	str	r3, [r7, #12]
 80250e4:	e008      	b.n	80250f8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80250e6:	68fb      	ldr	r3, [r7, #12]
 80250e8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80250ea:	68fb      	ldr	r3, [r7, #12]
 80250ec:	681b      	ldr	r3, [r3, #0]
 80250ee:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80250f0:	68b9      	ldr	r1, [r7, #8]
 80250f2:	6878      	ldr	r0, [r7, #4]
 80250f4:	f000 f80a 	bl	802510c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80250f8:	68fb      	ldr	r3, [r7, #12]
 80250fa:	2b00      	cmp	r3, #0
 80250fc:	d1e3      	bne.n	80250c6 <ip_reass_tmr+0x12>
    }
  }
}
 80250fe:	bf00      	nop
 8025100:	bf00      	nop
 8025102:	3710      	adds	r7, #16
 8025104:	46bd      	mov	sp, r7
 8025106:	bd80      	pop	{r7, pc}
 8025108:	20005b5c 	.word	0x20005b5c

0802510c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 802510c:	b580      	push	{r7, lr}
 802510e:	b088      	sub	sp, #32
 8025110:	af00      	add	r7, sp, #0
 8025112:	6078      	str	r0, [r7, #4]
 8025114:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8025116:	2300      	movs	r3, #0
 8025118:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 802511a:	683a      	ldr	r2, [r7, #0]
 802511c:	687b      	ldr	r3, [r7, #4]
 802511e:	429a      	cmp	r2, r3
 8025120:	d105      	bne.n	802512e <ip_reass_free_complete_datagram+0x22>
 8025122:	4b45      	ldr	r3, [pc, #276]	; (8025238 <ip_reass_free_complete_datagram+0x12c>)
 8025124:	22ab      	movs	r2, #171	; 0xab
 8025126:	4945      	ldr	r1, [pc, #276]	; (802523c <ip_reass_free_complete_datagram+0x130>)
 8025128:	4845      	ldr	r0, [pc, #276]	; (8025240 <ip_reass_free_complete_datagram+0x134>)
 802512a:	f001 fd95 	bl	8026c58 <iprintf>
  if (prev != NULL) {
 802512e:	683b      	ldr	r3, [r7, #0]
 8025130:	2b00      	cmp	r3, #0
 8025132:	d00a      	beq.n	802514a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8025134:	683b      	ldr	r3, [r7, #0]
 8025136:	681b      	ldr	r3, [r3, #0]
 8025138:	687a      	ldr	r2, [r7, #4]
 802513a:	429a      	cmp	r2, r3
 802513c:	d005      	beq.n	802514a <ip_reass_free_complete_datagram+0x3e>
 802513e:	4b3e      	ldr	r3, [pc, #248]	; (8025238 <ip_reass_free_complete_datagram+0x12c>)
 8025140:	22ad      	movs	r2, #173	; 0xad
 8025142:	4940      	ldr	r1, [pc, #256]	; (8025244 <ip_reass_free_complete_datagram+0x138>)
 8025144:	483e      	ldr	r0, [pc, #248]	; (8025240 <ip_reass_free_complete_datagram+0x134>)
 8025146:	f001 fd87 	bl	8026c58 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 802514a:	687b      	ldr	r3, [r7, #4]
 802514c:	685b      	ldr	r3, [r3, #4]
 802514e:	685b      	ldr	r3, [r3, #4]
 8025150:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8025152:	697b      	ldr	r3, [r7, #20]
 8025154:	889b      	ldrh	r3, [r3, #4]
 8025156:	b29b      	uxth	r3, r3
 8025158:	2b00      	cmp	r3, #0
 802515a:	d12a      	bne.n	80251b2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 802515c:	687b      	ldr	r3, [r7, #4]
 802515e:	685b      	ldr	r3, [r3, #4]
 8025160:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8025162:	697b      	ldr	r3, [r7, #20]
 8025164:	681a      	ldr	r2, [r3, #0]
 8025166:	687b      	ldr	r3, [r7, #4]
 8025168:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 802516a:	69bb      	ldr	r3, [r7, #24]
 802516c:	6858      	ldr	r0, [r3, #4]
 802516e:	687b      	ldr	r3, [r7, #4]
 8025170:	3308      	adds	r3, #8
 8025172:	2214      	movs	r2, #20
 8025174:	4619      	mov	r1, r3
 8025176:	f001 fa17 	bl	80265a8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 802517a:	2101      	movs	r1, #1
 802517c:	69b8      	ldr	r0, [r7, #24]
 802517e:	f7ff fc47 	bl	8024a10 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8025182:	69b8      	ldr	r0, [r7, #24]
 8025184:	f7f7 f9ce 	bl	801c524 <pbuf_clen>
 8025188:	4603      	mov	r3, r0
 802518a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 802518c:	8bfa      	ldrh	r2, [r7, #30]
 802518e:	8a7b      	ldrh	r3, [r7, #18]
 8025190:	4413      	add	r3, r2
 8025192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8025196:	db05      	blt.n	80251a4 <ip_reass_free_complete_datagram+0x98>
 8025198:	4b27      	ldr	r3, [pc, #156]	; (8025238 <ip_reass_free_complete_datagram+0x12c>)
 802519a:	22bc      	movs	r2, #188	; 0xbc
 802519c:	492a      	ldr	r1, [pc, #168]	; (8025248 <ip_reass_free_complete_datagram+0x13c>)
 802519e:	4828      	ldr	r0, [pc, #160]	; (8025240 <ip_reass_free_complete_datagram+0x134>)
 80251a0:	f001 fd5a 	bl	8026c58 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80251a4:	8bfa      	ldrh	r2, [r7, #30]
 80251a6:	8a7b      	ldrh	r3, [r7, #18]
 80251a8:	4413      	add	r3, r2
 80251aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80251ac:	69b8      	ldr	r0, [r7, #24]
 80251ae:	f7f7 f92b 	bl	801c408 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80251b2:	687b      	ldr	r3, [r7, #4]
 80251b4:	685b      	ldr	r3, [r3, #4]
 80251b6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80251b8:	e01f      	b.n	80251fa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80251ba:	69bb      	ldr	r3, [r7, #24]
 80251bc:	685b      	ldr	r3, [r3, #4]
 80251be:	617b      	str	r3, [r7, #20]
    pcur = p;
 80251c0:	69bb      	ldr	r3, [r7, #24]
 80251c2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80251c4:	697b      	ldr	r3, [r7, #20]
 80251c6:	681b      	ldr	r3, [r3, #0]
 80251c8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80251ca:	68f8      	ldr	r0, [r7, #12]
 80251cc:	f7f7 f9aa 	bl	801c524 <pbuf_clen>
 80251d0:	4603      	mov	r3, r0
 80251d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80251d4:	8bfa      	ldrh	r2, [r7, #30]
 80251d6:	8a7b      	ldrh	r3, [r7, #18]
 80251d8:	4413      	add	r3, r2
 80251da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80251de:	db05      	blt.n	80251ec <ip_reass_free_complete_datagram+0xe0>
 80251e0:	4b15      	ldr	r3, [pc, #84]	; (8025238 <ip_reass_free_complete_datagram+0x12c>)
 80251e2:	22cc      	movs	r2, #204	; 0xcc
 80251e4:	4918      	ldr	r1, [pc, #96]	; (8025248 <ip_reass_free_complete_datagram+0x13c>)
 80251e6:	4816      	ldr	r0, [pc, #88]	; (8025240 <ip_reass_free_complete_datagram+0x134>)
 80251e8:	f001 fd36 	bl	8026c58 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80251ec:	8bfa      	ldrh	r2, [r7, #30]
 80251ee:	8a7b      	ldrh	r3, [r7, #18]
 80251f0:	4413      	add	r3, r2
 80251f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80251f4:	68f8      	ldr	r0, [r7, #12]
 80251f6:	f7f7 f907 	bl	801c408 <pbuf_free>
  while (p != NULL) {
 80251fa:	69bb      	ldr	r3, [r7, #24]
 80251fc:	2b00      	cmp	r3, #0
 80251fe:	d1dc      	bne.n	80251ba <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8025200:	6839      	ldr	r1, [r7, #0]
 8025202:	6878      	ldr	r0, [r7, #4]
 8025204:	f000 f8c2 	bl	802538c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8025208:	4b10      	ldr	r3, [pc, #64]	; (802524c <ip_reass_free_complete_datagram+0x140>)
 802520a:	881b      	ldrh	r3, [r3, #0]
 802520c:	8bfa      	ldrh	r2, [r7, #30]
 802520e:	429a      	cmp	r2, r3
 8025210:	d905      	bls.n	802521e <ip_reass_free_complete_datagram+0x112>
 8025212:	4b09      	ldr	r3, [pc, #36]	; (8025238 <ip_reass_free_complete_datagram+0x12c>)
 8025214:	22d2      	movs	r2, #210	; 0xd2
 8025216:	490e      	ldr	r1, [pc, #56]	; (8025250 <ip_reass_free_complete_datagram+0x144>)
 8025218:	4809      	ldr	r0, [pc, #36]	; (8025240 <ip_reass_free_complete_datagram+0x134>)
 802521a:	f001 fd1d 	bl	8026c58 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 802521e:	4b0b      	ldr	r3, [pc, #44]	; (802524c <ip_reass_free_complete_datagram+0x140>)
 8025220:	881a      	ldrh	r2, [r3, #0]
 8025222:	8bfb      	ldrh	r3, [r7, #30]
 8025224:	1ad3      	subs	r3, r2, r3
 8025226:	b29a      	uxth	r2, r3
 8025228:	4b08      	ldr	r3, [pc, #32]	; (802524c <ip_reass_free_complete_datagram+0x140>)
 802522a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 802522c:	8bfb      	ldrh	r3, [r7, #30]
}
 802522e:	4618      	mov	r0, r3
 8025230:	3720      	adds	r7, #32
 8025232:	46bd      	mov	sp, r7
 8025234:	bd80      	pop	{r7, pc}
 8025236:	bf00      	nop
 8025238:	0802fde4 	.word	0x0802fde4
 802523c:	0802fe20 	.word	0x0802fe20
 8025240:	0802fe2c 	.word	0x0802fe2c
 8025244:	0802fe54 	.word	0x0802fe54
 8025248:	0802fe68 	.word	0x0802fe68
 802524c:	20005b60 	.word	0x20005b60
 8025250:	0802fe88 	.word	0x0802fe88

08025254 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8025254:	b580      	push	{r7, lr}
 8025256:	b08a      	sub	sp, #40	; 0x28
 8025258:	af00      	add	r7, sp, #0
 802525a:	6078      	str	r0, [r7, #4]
 802525c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 802525e:	2300      	movs	r3, #0
 8025260:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8025262:	2300      	movs	r3, #0
 8025264:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8025266:	2300      	movs	r3, #0
 8025268:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 802526a:	2300      	movs	r3, #0
 802526c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 802526e:	2300      	movs	r3, #0
 8025270:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8025272:	4b28      	ldr	r3, [pc, #160]	; (8025314 <ip_reass_remove_oldest_datagram+0xc0>)
 8025274:	681b      	ldr	r3, [r3, #0]
 8025276:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8025278:	e030      	b.n	80252dc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802527c:	695a      	ldr	r2, [r3, #20]
 802527e:	687b      	ldr	r3, [r7, #4]
 8025280:	68db      	ldr	r3, [r3, #12]
 8025282:	429a      	cmp	r2, r3
 8025284:	d10c      	bne.n	80252a0 <ip_reass_remove_oldest_datagram+0x4c>
 8025286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025288:	699a      	ldr	r2, [r3, #24]
 802528a:	687b      	ldr	r3, [r7, #4]
 802528c:	691b      	ldr	r3, [r3, #16]
 802528e:	429a      	cmp	r2, r3
 8025290:	d106      	bne.n	80252a0 <ip_reass_remove_oldest_datagram+0x4c>
 8025292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025294:	899a      	ldrh	r2, [r3, #12]
 8025296:	687b      	ldr	r3, [r7, #4]
 8025298:	889b      	ldrh	r3, [r3, #4]
 802529a:	b29b      	uxth	r3, r3
 802529c:	429a      	cmp	r2, r3
 802529e:	d014      	beq.n	80252ca <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80252a0:	693b      	ldr	r3, [r7, #16]
 80252a2:	3301      	adds	r3, #1
 80252a4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80252a6:	6a3b      	ldr	r3, [r7, #32]
 80252a8:	2b00      	cmp	r3, #0
 80252aa:	d104      	bne.n	80252b6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80252ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252ae:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80252b0:	69fb      	ldr	r3, [r7, #28]
 80252b2:	61bb      	str	r3, [r7, #24]
 80252b4:	e009      	b.n	80252ca <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80252b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252b8:	7fda      	ldrb	r2, [r3, #31]
 80252ba:	6a3b      	ldr	r3, [r7, #32]
 80252bc:	7fdb      	ldrb	r3, [r3, #31]
 80252be:	429a      	cmp	r2, r3
 80252c0:	d803      	bhi.n	80252ca <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80252c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252c4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80252c6:	69fb      	ldr	r3, [r7, #28]
 80252c8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80252ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252cc:	681b      	ldr	r3, [r3, #0]
 80252ce:	2b00      	cmp	r3, #0
 80252d0:	d001      	beq.n	80252d6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80252d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252d4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80252d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252d8:	681b      	ldr	r3, [r3, #0]
 80252da:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80252dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252de:	2b00      	cmp	r3, #0
 80252e0:	d1cb      	bne.n	802527a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80252e2:	6a3b      	ldr	r3, [r7, #32]
 80252e4:	2b00      	cmp	r3, #0
 80252e6:	d008      	beq.n	80252fa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80252e8:	69b9      	ldr	r1, [r7, #24]
 80252ea:	6a38      	ldr	r0, [r7, #32]
 80252ec:	f7ff ff0e 	bl	802510c <ip_reass_free_complete_datagram>
 80252f0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80252f2:	697a      	ldr	r2, [r7, #20]
 80252f4:	68fb      	ldr	r3, [r7, #12]
 80252f6:	4413      	add	r3, r2
 80252f8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80252fa:	697a      	ldr	r2, [r7, #20]
 80252fc:	683b      	ldr	r3, [r7, #0]
 80252fe:	429a      	cmp	r2, r3
 8025300:	da02      	bge.n	8025308 <ip_reass_remove_oldest_datagram+0xb4>
 8025302:	693b      	ldr	r3, [r7, #16]
 8025304:	2b01      	cmp	r3, #1
 8025306:	dcac      	bgt.n	8025262 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8025308:	697b      	ldr	r3, [r7, #20]
}
 802530a:	4618      	mov	r0, r3
 802530c:	3728      	adds	r7, #40	; 0x28
 802530e:	46bd      	mov	sp, r7
 8025310:	bd80      	pop	{r7, pc}
 8025312:	bf00      	nop
 8025314:	20005b5c 	.word	0x20005b5c

08025318 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8025318:	b580      	push	{r7, lr}
 802531a:	b084      	sub	sp, #16
 802531c:	af00      	add	r7, sp, #0
 802531e:	6078      	str	r0, [r7, #4]
 8025320:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8025322:	2004      	movs	r0, #4
 8025324:	f7f6 f97a 	bl	801b61c <memp_malloc>
 8025328:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 802532a:	68fb      	ldr	r3, [r7, #12]
 802532c:	2b00      	cmp	r3, #0
 802532e:	d110      	bne.n	8025352 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8025330:	6839      	ldr	r1, [r7, #0]
 8025332:	6878      	ldr	r0, [r7, #4]
 8025334:	f7ff ff8e 	bl	8025254 <ip_reass_remove_oldest_datagram>
 8025338:	4602      	mov	r2, r0
 802533a:	683b      	ldr	r3, [r7, #0]
 802533c:	4293      	cmp	r3, r2
 802533e:	dc03      	bgt.n	8025348 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8025340:	2004      	movs	r0, #4
 8025342:	f7f6 f96b 	bl	801b61c <memp_malloc>
 8025346:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8025348:	68fb      	ldr	r3, [r7, #12]
 802534a:	2b00      	cmp	r3, #0
 802534c:	d101      	bne.n	8025352 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 802534e:	2300      	movs	r3, #0
 8025350:	e016      	b.n	8025380 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8025352:	2220      	movs	r2, #32
 8025354:	2100      	movs	r1, #0
 8025356:	68f8      	ldr	r0, [r7, #12]
 8025358:	f001 f94e 	bl	80265f8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 802535c:	68fb      	ldr	r3, [r7, #12]
 802535e:	220f      	movs	r2, #15
 8025360:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8025362:	4b09      	ldr	r3, [pc, #36]	; (8025388 <ip_reass_enqueue_new_datagram+0x70>)
 8025364:	681a      	ldr	r2, [r3, #0]
 8025366:	68fb      	ldr	r3, [r7, #12]
 8025368:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 802536a:	4a07      	ldr	r2, [pc, #28]	; (8025388 <ip_reass_enqueue_new_datagram+0x70>)
 802536c:	68fb      	ldr	r3, [r7, #12]
 802536e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8025370:	68fb      	ldr	r3, [r7, #12]
 8025372:	3308      	adds	r3, #8
 8025374:	2214      	movs	r2, #20
 8025376:	6879      	ldr	r1, [r7, #4]
 8025378:	4618      	mov	r0, r3
 802537a:	f001 f915 	bl	80265a8 <memcpy>
  return ipr;
 802537e:	68fb      	ldr	r3, [r7, #12]
}
 8025380:	4618      	mov	r0, r3
 8025382:	3710      	adds	r7, #16
 8025384:	46bd      	mov	sp, r7
 8025386:	bd80      	pop	{r7, pc}
 8025388:	20005b5c 	.word	0x20005b5c

0802538c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 802538c:	b580      	push	{r7, lr}
 802538e:	b082      	sub	sp, #8
 8025390:	af00      	add	r7, sp, #0
 8025392:	6078      	str	r0, [r7, #4]
 8025394:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8025396:	4b10      	ldr	r3, [pc, #64]	; (80253d8 <ip_reass_dequeue_datagram+0x4c>)
 8025398:	681b      	ldr	r3, [r3, #0]
 802539a:	687a      	ldr	r2, [r7, #4]
 802539c:	429a      	cmp	r2, r3
 802539e:	d104      	bne.n	80253aa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80253a0:	687b      	ldr	r3, [r7, #4]
 80253a2:	681b      	ldr	r3, [r3, #0]
 80253a4:	4a0c      	ldr	r2, [pc, #48]	; (80253d8 <ip_reass_dequeue_datagram+0x4c>)
 80253a6:	6013      	str	r3, [r2, #0]
 80253a8:	e00d      	b.n	80253c6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80253aa:	683b      	ldr	r3, [r7, #0]
 80253ac:	2b00      	cmp	r3, #0
 80253ae:	d106      	bne.n	80253be <ip_reass_dequeue_datagram+0x32>
 80253b0:	4b0a      	ldr	r3, [pc, #40]	; (80253dc <ip_reass_dequeue_datagram+0x50>)
 80253b2:	f240 1245 	movw	r2, #325	; 0x145
 80253b6:	490a      	ldr	r1, [pc, #40]	; (80253e0 <ip_reass_dequeue_datagram+0x54>)
 80253b8:	480a      	ldr	r0, [pc, #40]	; (80253e4 <ip_reass_dequeue_datagram+0x58>)
 80253ba:	f001 fc4d 	bl	8026c58 <iprintf>
    prev->next = ipr->next;
 80253be:	687b      	ldr	r3, [r7, #4]
 80253c0:	681a      	ldr	r2, [r3, #0]
 80253c2:	683b      	ldr	r3, [r7, #0]
 80253c4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80253c6:	6879      	ldr	r1, [r7, #4]
 80253c8:	2004      	movs	r0, #4
 80253ca:	f7f6 f979 	bl	801b6c0 <memp_free>
}
 80253ce:	bf00      	nop
 80253d0:	3708      	adds	r7, #8
 80253d2:	46bd      	mov	sp, r7
 80253d4:	bd80      	pop	{r7, pc}
 80253d6:	bf00      	nop
 80253d8:	20005b5c 	.word	0x20005b5c
 80253dc:	0802fde4 	.word	0x0802fde4
 80253e0:	0802feac 	.word	0x0802feac
 80253e4:	0802fe2c 	.word	0x0802fe2c

080253e8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80253e8:	b580      	push	{r7, lr}
 80253ea:	b08c      	sub	sp, #48	; 0x30
 80253ec:	af00      	add	r7, sp, #0
 80253ee:	60f8      	str	r0, [r7, #12]
 80253f0:	60b9      	str	r1, [r7, #8]
 80253f2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80253f4:	2300      	movs	r3, #0
 80253f6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80253f8:	2301      	movs	r3, #1
 80253fa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80253fc:	68bb      	ldr	r3, [r7, #8]
 80253fe:	685b      	ldr	r3, [r3, #4]
 8025400:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8025402:	69fb      	ldr	r3, [r7, #28]
 8025404:	885b      	ldrh	r3, [r3, #2]
 8025406:	b29b      	uxth	r3, r3
 8025408:	4618      	mov	r0, r3
 802540a:	f7f5 fbbf 	bl	801ab8c <lwip_htons>
 802540e:	4603      	mov	r3, r0
 8025410:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8025412:	69fb      	ldr	r3, [r7, #28]
 8025414:	781b      	ldrb	r3, [r3, #0]
 8025416:	f003 030f 	and.w	r3, r3, #15
 802541a:	b2db      	uxtb	r3, r3
 802541c:	009b      	lsls	r3, r3, #2
 802541e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8025420:	7e7b      	ldrb	r3, [r7, #25]
 8025422:	b29b      	uxth	r3, r3
 8025424:	8b7a      	ldrh	r2, [r7, #26]
 8025426:	429a      	cmp	r2, r3
 8025428:	d202      	bcs.n	8025430 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 802542a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802542e:	e135      	b.n	802569c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8025430:	7e7b      	ldrb	r3, [r7, #25]
 8025432:	b29b      	uxth	r3, r3
 8025434:	8b7a      	ldrh	r2, [r7, #26]
 8025436:	1ad3      	subs	r3, r2, r3
 8025438:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 802543a:	69fb      	ldr	r3, [r7, #28]
 802543c:	88db      	ldrh	r3, [r3, #6]
 802543e:	b29b      	uxth	r3, r3
 8025440:	4618      	mov	r0, r3
 8025442:	f7f5 fba3 	bl	801ab8c <lwip_htons>
 8025446:	4603      	mov	r3, r0
 8025448:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802544c:	b29b      	uxth	r3, r3
 802544e:	00db      	lsls	r3, r3, #3
 8025450:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8025452:	68bb      	ldr	r3, [r7, #8]
 8025454:	685b      	ldr	r3, [r3, #4]
 8025456:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8025458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802545a:	2200      	movs	r2, #0
 802545c:	701a      	strb	r2, [r3, #0]
 802545e:	2200      	movs	r2, #0
 8025460:	705a      	strb	r2, [r3, #1]
 8025462:	2200      	movs	r2, #0
 8025464:	709a      	strb	r2, [r3, #2]
 8025466:	2200      	movs	r2, #0
 8025468:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 802546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802546c:	8afa      	ldrh	r2, [r7, #22]
 802546e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8025470:	8afa      	ldrh	r2, [r7, #22]
 8025472:	8b7b      	ldrh	r3, [r7, #26]
 8025474:	4413      	add	r3, r2
 8025476:	b29a      	uxth	r2, r3
 8025478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802547a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 802547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802547e:	88db      	ldrh	r3, [r3, #6]
 8025480:	b29b      	uxth	r3, r3
 8025482:	8afa      	ldrh	r2, [r7, #22]
 8025484:	429a      	cmp	r2, r3
 8025486:	d902      	bls.n	802548e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802548c:	e106      	b.n	802569c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 802548e:	68fb      	ldr	r3, [r7, #12]
 8025490:	685b      	ldr	r3, [r3, #4]
 8025492:	627b      	str	r3, [r7, #36]	; 0x24
 8025494:	e068      	b.n	8025568 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8025496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025498:	685b      	ldr	r3, [r3, #4]
 802549a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 802549c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802549e:	889b      	ldrh	r3, [r3, #4]
 80254a0:	b29a      	uxth	r2, r3
 80254a2:	693b      	ldr	r3, [r7, #16]
 80254a4:	889b      	ldrh	r3, [r3, #4]
 80254a6:	b29b      	uxth	r3, r3
 80254a8:	429a      	cmp	r2, r3
 80254aa:	d235      	bcs.n	8025518 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80254ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80254ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80254b0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80254b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80254b4:	2b00      	cmp	r3, #0
 80254b6:	d020      	beq.n	80254fa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80254b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80254ba:	889b      	ldrh	r3, [r3, #4]
 80254bc:	b29a      	uxth	r2, r3
 80254be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80254c0:	88db      	ldrh	r3, [r3, #6]
 80254c2:	b29b      	uxth	r3, r3
 80254c4:	429a      	cmp	r2, r3
 80254c6:	d307      	bcc.n	80254d8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80254c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80254ca:	88db      	ldrh	r3, [r3, #6]
 80254cc:	b29a      	uxth	r2, r3
 80254ce:	693b      	ldr	r3, [r7, #16]
 80254d0:	889b      	ldrh	r3, [r3, #4]
 80254d2:	b29b      	uxth	r3, r3
 80254d4:	429a      	cmp	r2, r3
 80254d6:	d902      	bls.n	80254de <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80254d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80254dc:	e0de      	b.n	802569c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80254de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80254e0:	68ba      	ldr	r2, [r7, #8]
 80254e2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80254e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80254e6:	88db      	ldrh	r3, [r3, #6]
 80254e8:	b29a      	uxth	r2, r3
 80254ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80254ec:	889b      	ldrh	r3, [r3, #4]
 80254ee:	b29b      	uxth	r3, r3
 80254f0:	429a      	cmp	r2, r3
 80254f2:	d03d      	beq.n	8025570 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80254f4:	2300      	movs	r3, #0
 80254f6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80254f8:	e03a      	b.n	8025570 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80254fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80254fc:	88db      	ldrh	r3, [r3, #6]
 80254fe:	b29a      	uxth	r2, r3
 8025500:	693b      	ldr	r3, [r7, #16]
 8025502:	889b      	ldrh	r3, [r3, #4]
 8025504:	b29b      	uxth	r3, r3
 8025506:	429a      	cmp	r2, r3
 8025508:	d902      	bls.n	8025510 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 802550a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802550e:	e0c5      	b.n	802569c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8025510:	68fb      	ldr	r3, [r7, #12]
 8025512:	68ba      	ldr	r2, [r7, #8]
 8025514:	605a      	str	r2, [r3, #4]
      break;
 8025516:	e02b      	b.n	8025570 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8025518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802551a:	889b      	ldrh	r3, [r3, #4]
 802551c:	b29a      	uxth	r2, r3
 802551e:	693b      	ldr	r3, [r7, #16]
 8025520:	889b      	ldrh	r3, [r3, #4]
 8025522:	b29b      	uxth	r3, r3
 8025524:	429a      	cmp	r2, r3
 8025526:	d102      	bne.n	802552e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802552c:	e0b6      	b.n	802569c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 802552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025530:	889b      	ldrh	r3, [r3, #4]
 8025532:	b29a      	uxth	r2, r3
 8025534:	693b      	ldr	r3, [r7, #16]
 8025536:	88db      	ldrh	r3, [r3, #6]
 8025538:	b29b      	uxth	r3, r3
 802553a:	429a      	cmp	r2, r3
 802553c:	d202      	bcs.n	8025544 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 802553e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8025542:	e0ab      	b.n	802569c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8025544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025546:	2b00      	cmp	r3, #0
 8025548:	d009      	beq.n	802555e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 802554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802554c:	88db      	ldrh	r3, [r3, #6]
 802554e:	b29a      	uxth	r2, r3
 8025550:	693b      	ldr	r3, [r7, #16]
 8025552:	889b      	ldrh	r3, [r3, #4]
 8025554:	b29b      	uxth	r3, r3
 8025556:	429a      	cmp	r2, r3
 8025558:	d001      	beq.n	802555e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 802555a:	2300      	movs	r3, #0
 802555c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 802555e:	693b      	ldr	r3, [r7, #16]
 8025560:	681b      	ldr	r3, [r3, #0]
 8025562:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8025564:	693b      	ldr	r3, [r7, #16]
 8025566:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8025568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802556a:	2b00      	cmp	r3, #0
 802556c:	d193      	bne.n	8025496 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 802556e:	e000      	b.n	8025572 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8025570:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8025572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025574:	2b00      	cmp	r3, #0
 8025576:	d12d      	bne.n	80255d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8025578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802557a:	2b00      	cmp	r3, #0
 802557c:	d01c      	beq.n	80255b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 802557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025580:	88db      	ldrh	r3, [r3, #6]
 8025582:	b29a      	uxth	r2, r3
 8025584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025586:	889b      	ldrh	r3, [r3, #4]
 8025588:	b29b      	uxth	r3, r3
 802558a:	429a      	cmp	r2, r3
 802558c:	d906      	bls.n	802559c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 802558e:	4b45      	ldr	r3, [pc, #276]	; (80256a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8025590:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8025594:	4944      	ldr	r1, [pc, #272]	; (80256a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8025596:	4845      	ldr	r0, [pc, #276]	; (80256ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025598:	f001 fb5e 	bl	8026c58 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 802559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802559e:	68ba      	ldr	r2, [r7, #8]
 80255a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80255a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80255a4:	88db      	ldrh	r3, [r3, #6]
 80255a6:	b29a      	uxth	r2, r3
 80255a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80255aa:	889b      	ldrh	r3, [r3, #4]
 80255ac:	b29b      	uxth	r3, r3
 80255ae:	429a      	cmp	r2, r3
 80255b0:	d010      	beq.n	80255d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80255b2:	2300      	movs	r3, #0
 80255b4:	623b      	str	r3, [r7, #32]
 80255b6:	e00d      	b.n	80255d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80255b8:	68fb      	ldr	r3, [r7, #12]
 80255ba:	685b      	ldr	r3, [r3, #4]
 80255bc:	2b00      	cmp	r3, #0
 80255be:	d006      	beq.n	80255ce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80255c0:	4b38      	ldr	r3, [pc, #224]	; (80256a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80255c2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80255c6:	493a      	ldr	r1, [pc, #232]	; (80256b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80255c8:	4838      	ldr	r0, [pc, #224]	; (80256ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80255ca:	f001 fb45 	bl	8026c58 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80255ce:	68fb      	ldr	r3, [r7, #12]
 80255d0:	68ba      	ldr	r2, [r7, #8]
 80255d2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80255d4:	687b      	ldr	r3, [r7, #4]
 80255d6:	2b00      	cmp	r3, #0
 80255d8:	d105      	bne.n	80255e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80255da:	68fb      	ldr	r3, [r7, #12]
 80255dc:	7f9b      	ldrb	r3, [r3, #30]
 80255de:	f003 0301 	and.w	r3, r3, #1
 80255e2:	2b00      	cmp	r3, #0
 80255e4:	d059      	beq.n	802569a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80255e6:	6a3b      	ldr	r3, [r7, #32]
 80255e8:	2b00      	cmp	r3, #0
 80255ea:	d04f      	beq.n	802568c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80255ec:	68fb      	ldr	r3, [r7, #12]
 80255ee:	685b      	ldr	r3, [r3, #4]
 80255f0:	2b00      	cmp	r3, #0
 80255f2:	d006      	beq.n	8025602 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80255f4:	68fb      	ldr	r3, [r7, #12]
 80255f6:	685b      	ldr	r3, [r3, #4]
 80255f8:	685b      	ldr	r3, [r3, #4]
 80255fa:	889b      	ldrh	r3, [r3, #4]
 80255fc:	b29b      	uxth	r3, r3
 80255fe:	2b00      	cmp	r3, #0
 8025600:	d002      	beq.n	8025608 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8025602:	2300      	movs	r3, #0
 8025604:	623b      	str	r3, [r7, #32]
 8025606:	e041      	b.n	802568c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8025608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802560a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 802560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802560e:	681b      	ldr	r3, [r3, #0]
 8025610:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8025612:	e012      	b.n	802563a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8025614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025616:	685b      	ldr	r3, [r3, #4]
 8025618:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 802561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802561c:	88db      	ldrh	r3, [r3, #6]
 802561e:	b29a      	uxth	r2, r3
 8025620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025622:	889b      	ldrh	r3, [r3, #4]
 8025624:	b29b      	uxth	r3, r3
 8025626:	429a      	cmp	r2, r3
 8025628:	d002      	beq.n	8025630 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 802562a:	2300      	movs	r3, #0
 802562c:	623b      	str	r3, [r7, #32]
            break;
 802562e:	e007      	b.n	8025640 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8025630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025632:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8025634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025636:	681b      	ldr	r3, [r3, #0]
 8025638:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 802563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802563c:	2b00      	cmp	r3, #0
 802563e:	d1e9      	bne.n	8025614 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8025640:	6a3b      	ldr	r3, [r7, #32]
 8025642:	2b00      	cmp	r3, #0
 8025644:	d022      	beq.n	802568c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8025646:	68fb      	ldr	r3, [r7, #12]
 8025648:	685b      	ldr	r3, [r3, #4]
 802564a:	2b00      	cmp	r3, #0
 802564c:	d106      	bne.n	802565c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 802564e:	4b15      	ldr	r3, [pc, #84]	; (80256a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8025650:	f240 12df 	movw	r2, #479	; 0x1df
 8025654:	4917      	ldr	r1, [pc, #92]	; (80256b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8025656:	4815      	ldr	r0, [pc, #84]	; (80256ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025658:	f001 fafe 	bl	8026c58 <iprintf>
          LWIP_ASSERT("sanity check",
 802565c:	68fb      	ldr	r3, [r7, #12]
 802565e:	685b      	ldr	r3, [r3, #4]
 8025660:	685b      	ldr	r3, [r3, #4]
 8025662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025664:	429a      	cmp	r2, r3
 8025666:	d106      	bne.n	8025676 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8025668:	4b0e      	ldr	r3, [pc, #56]	; (80256a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802566a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 802566e:	4911      	ldr	r1, [pc, #68]	; (80256b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8025670:	480e      	ldr	r0, [pc, #56]	; (80256ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025672:	f001 faf1 	bl	8026c58 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8025676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025678:	681b      	ldr	r3, [r3, #0]
 802567a:	2b00      	cmp	r3, #0
 802567c:	d006      	beq.n	802568c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 802567e:	4b09      	ldr	r3, [pc, #36]	; (80256a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8025680:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8025684:	490c      	ldr	r1, [pc, #48]	; (80256b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8025686:	4809      	ldr	r0, [pc, #36]	; (80256ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025688:	f001 fae6 	bl	8026c58 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 802568c:	6a3b      	ldr	r3, [r7, #32]
 802568e:	2b00      	cmp	r3, #0
 8025690:	bf14      	ite	ne
 8025692:	2301      	movne	r3, #1
 8025694:	2300      	moveq	r3, #0
 8025696:	b2db      	uxtb	r3, r3
 8025698:	e000      	b.n	802569c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 802569a:	2300      	movs	r3, #0
}
 802569c:	4618      	mov	r0, r3
 802569e:	3730      	adds	r7, #48	; 0x30
 80256a0:	46bd      	mov	sp, r7
 80256a2:	bd80      	pop	{r7, pc}
 80256a4:	0802fde4 	.word	0x0802fde4
 80256a8:	0802fec8 	.word	0x0802fec8
 80256ac:	0802fe2c 	.word	0x0802fe2c
 80256b0:	0802fee8 	.word	0x0802fee8
 80256b4:	0802ff20 	.word	0x0802ff20
 80256b8:	0802ff30 	.word	0x0802ff30

080256bc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80256bc:	b580      	push	{r7, lr}
 80256be:	b08e      	sub	sp, #56	; 0x38
 80256c0:	af00      	add	r7, sp, #0
 80256c2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80256c4:	687b      	ldr	r3, [r7, #4]
 80256c6:	685b      	ldr	r3, [r3, #4]
 80256c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80256ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80256cc:	781b      	ldrb	r3, [r3, #0]
 80256ce:	f003 030f 	and.w	r3, r3, #15
 80256d2:	b2db      	uxtb	r3, r3
 80256d4:	009b      	lsls	r3, r3, #2
 80256d6:	b2db      	uxtb	r3, r3
 80256d8:	2b14      	cmp	r3, #20
 80256da:	f040 8167 	bne.w	80259ac <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80256de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80256e0:	88db      	ldrh	r3, [r3, #6]
 80256e2:	b29b      	uxth	r3, r3
 80256e4:	4618      	mov	r0, r3
 80256e6:	f7f5 fa51 	bl	801ab8c <lwip_htons>
 80256ea:	4603      	mov	r3, r0
 80256ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80256f0:	b29b      	uxth	r3, r3
 80256f2:	00db      	lsls	r3, r3, #3
 80256f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80256f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80256f8:	885b      	ldrh	r3, [r3, #2]
 80256fa:	b29b      	uxth	r3, r3
 80256fc:	4618      	mov	r0, r3
 80256fe:	f7f5 fa45 	bl	801ab8c <lwip_htons>
 8025702:	4603      	mov	r3, r0
 8025704:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8025706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025708:	781b      	ldrb	r3, [r3, #0]
 802570a:	f003 030f 	and.w	r3, r3, #15
 802570e:	b2db      	uxtb	r3, r3
 8025710:	009b      	lsls	r3, r3, #2
 8025712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8025716:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802571a:	b29b      	uxth	r3, r3
 802571c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802571e:	429a      	cmp	r2, r3
 8025720:	f0c0 8146 	bcc.w	80259b0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8025724:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8025728:	b29b      	uxth	r3, r3
 802572a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802572c:	1ad3      	subs	r3, r2, r3
 802572e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8025730:	6878      	ldr	r0, [r7, #4]
 8025732:	f7f6 fef7 	bl	801c524 <pbuf_clen>
 8025736:	4603      	mov	r3, r0
 8025738:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 802573a:	4b9f      	ldr	r3, [pc, #636]	; (80259b8 <ip4_reass+0x2fc>)
 802573c:	881b      	ldrh	r3, [r3, #0]
 802573e:	461a      	mov	r2, r3
 8025740:	8c3b      	ldrh	r3, [r7, #32]
 8025742:	4413      	add	r3, r2
 8025744:	2b0a      	cmp	r3, #10
 8025746:	dd10      	ble.n	802576a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8025748:	8c3b      	ldrh	r3, [r7, #32]
 802574a:	4619      	mov	r1, r3
 802574c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802574e:	f7ff fd81 	bl	8025254 <ip_reass_remove_oldest_datagram>
 8025752:	4603      	mov	r3, r0
 8025754:	2b00      	cmp	r3, #0
 8025756:	f000 812d 	beq.w	80259b4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 802575a:	4b97      	ldr	r3, [pc, #604]	; (80259b8 <ip4_reass+0x2fc>)
 802575c:	881b      	ldrh	r3, [r3, #0]
 802575e:	461a      	mov	r2, r3
 8025760:	8c3b      	ldrh	r3, [r7, #32]
 8025762:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8025764:	2b0a      	cmp	r3, #10
 8025766:	f300 8125 	bgt.w	80259b4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 802576a:	4b94      	ldr	r3, [pc, #592]	; (80259bc <ip4_reass+0x300>)
 802576c:	681b      	ldr	r3, [r3, #0]
 802576e:	633b      	str	r3, [r7, #48]	; 0x30
 8025770:	e015      	b.n	802579e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8025772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025774:	695a      	ldr	r2, [r3, #20]
 8025776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025778:	68db      	ldr	r3, [r3, #12]
 802577a:	429a      	cmp	r2, r3
 802577c:	d10c      	bne.n	8025798 <ip4_reass+0xdc>
 802577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025780:	699a      	ldr	r2, [r3, #24]
 8025782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025784:	691b      	ldr	r3, [r3, #16]
 8025786:	429a      	cmp	r2, r3
 8025788:	d106      	bne.n	8025798 <ip4_reass+0xdc>
 802578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802578c:	899a      	ldrh	r2, [r3, #12]
 802578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025790:	889b      	ldrh	r3, [r3, #4]
 8025792:	b29b      	uxth	r3, r3
 8025794:	429a      	cmp	r2, r3
 8025796:	d006      	beq.n	80257a6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8025798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802579a:	681b      	ldr	r3, [r3, #0]
 802579c:	633b      	str	r3, [r7, #48]	; 0x30
 802579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80257a0:	2b00      	cmp	r3, #0
 80257a2:	d1e6      	bne.n	8025772 <ip4_reass+0xb6>
 80257a4:	e000      	b.n	80257a8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80257a6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80257a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80257aa:	2b00      	cmp	r3, #0
 80257ac:	d109      	bne.n	80257c2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80257ae:	8c3b      	ldrh	r3, [r7, #32]
 80257b0:	4619      	mov	r1, r3
 80257b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80257b4:	f7ff fdb0 	bl	8025318 <ip_reass_enqueue_new_datagram>
 80257b8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80257ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80257bc:	2b00      	cmp	r3, #0
 80257be:	d11c      	bne.n	80257fa <ip4_reass+0x13e>
      goto nullreturn;
 80257c0:	e109      	b.n	80259d6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80257c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80257c4:	88db      	ldrh	r3, [r3, #6]
 80257c6:	b29b      	uxth	r3, r3
 80257c8:	4618      	mov	r0, r3
 80257ca:	f7f5 f9df 	bl	801ab8c <lwip_htons>
 80257ce:	4603      	mov	r3, r0
 80257d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80257d4:	2b00      	cmp	r3, #0
 80257d6:	d110      	bne.n	80257fa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80257d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80257da:	89db      	ldrh	r3, [r3, #14]
 80257dc:	4618      	mov	r0, r3
 80257de:	f7f5 f9d5 	bl	801ab8c <lwip_htons>
 80257e2:	4603      	mov	r3, r0
 80257e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80257e8:	2b00      	cmp	r3, #0
 80257ea:	d006      	beq.n	80257fa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80257ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80257ee:	3308      	adds	r3, #8
 80257f0:	2214      	movs	r2, #20
 80257f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80257f4:	4618      	mov	r0, r3
 80257f6:	f000 fed7 	bl	80265a8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80257fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80257fc:	88db      	ldrh	r3, [r3, #6]
 80257fe:	b29b      	uxth	r3, r3
 8025800:	f003 0320 	and.w	r3, r3, #32
 8025804:	2b00      	cmp	r3, #0
 8025806:	bf0c      	ite	eq
 8025808:	2301      	moveq	r3, #1
 802580a:	2300      	movne	r3, #0
 802580c:	b2db      	uxtb	r3, r3
 802580e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8025810:	69fb      	ldr	r3, [r7, #28]
 8025812:	2b00      	cmp	r3, #0
 8025814:	d00e      	beq.n	8025834 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8025816:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8025818:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802581a:	4413      	add	r3, r2
 802581c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 802581e:	8b7a      	ldrh	r2, [r7, #26]
 8025820:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8025822:	429a      	cmp	r2, r3
 8025824:	f0c0 80a0 	bcc.w	8025968 <ip4_reass+0x2ac>
 8025828:	8b7b      	ldrh	r3, [r7, #26]
 802582a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 802582e:	4293      	cmp	r3, r2
 8025830:	f200 809a 	bhi.w	8025968 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8025834:	69fa      	ldr	r2, [r7, #28]
 8025836:	6879      	ldr	r1, [r7, #4]
 8025838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802583a:	f7ff fdd5 	bl	80253e8 <ip_reass_chain_frag_into_datagram_and_validate>
 802583e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8025840:	697b      	ldr	r3, [r7, #20]
 8025842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8025846:	f000 8091 	beq.w	802596c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802584a:	4b5b      	ldr	r3, [pc, #364]	; (80259b8 <ip4_reass+0x2fc>)
 802584c:	881a      	ldrh	r2, [r3, #0]
 802584e:	8c3b      	ldrh	r3, [r7, #32]
 8025850:	4413      	add	r3, r2
 8025852:	b29a      	uxth	r2, r3
 8025854:	4b58      	ldr	r3, [pc, #352]	; (80259b8 <ip4_reass+0x2fc>)
 8025856:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8025858:	69fb      	ldr	r3, [r7, #28]
 802585a:	2b00      	cmp	r3, #0
 802585c:	d00d      	beq.n	802587a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 802585e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8025860:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8025862:	4413      	add	r3, r2
 8025864:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8025866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025868:	8a7a      	ldrh	r2, [r7, #18]
 802586a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802586e:	7f9b      	ldrb	r3, [r3, #30]
 8025870:	f043 0301 	orr.w	r3, r3, #1
 8025874:	b2da      	uxtb	r2, r3
 8025876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025878:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 802587a:	697b      	ldr	r3, [r7, #20]
 802587c:	2b01      	cmp	r3, #1
 802587e:	d171      	bne.n	8025964 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8025880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025882:	8b9b      	ldrh	r3, [r3, #28]
 8025884:	3314      	adds	r3, #20
 8025886:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8025888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802588a:	685b      	ldr	r3, [r3, #4]
 802588c:	685b      	ldr	r3, [r3, #4]
 802588e:	681b      	ldr	r3, [r3, #0]
 8025890:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8025892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025894:	685b      	ldr	r3, [r3, #4]
 8025896:	685b      	ldr	r3, [r3, #4]
 8025898:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 802589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802589c:	3308      	adds	r3, #8
 802589e:	2214      	movs	r2, #20
 80258a0:	4619      	mov	r1, r3
 80258a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80258a4:	f000 fe80 	bl	80265a8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80258a8:	8a3b      	ldrh	r3, [r7, #16]
 80258aa:	4618      	mov	r0, r3
 80258ac:	f7f5 f96e 	bl	801ab8c <lwip_htons>
 80258b0:	4603      	mov	r3, r0
 80258b2:	461a      	mov	r2, r3
 80258b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258b6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80258b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258ba:	2200      	movs	r2, #0
 80258bc:	719a      	strb	r2, [r3, #6]
 80258be:	2200      	movs	r2, #0
 80258c0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80258c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258c4:	2200      	movs	r2, #0
 80258c6:	729a      	strb	r2, [r3, #10]
 80258c8:	2200      	movs	r2, #0
 80258ca:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80258cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80258ce:	685b      	ldr	r3, [r3, #4]
 80258d0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80258d2:	e00d      	b.n	80258f0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80258d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80258d6:	685b      	ldr	r3, [r3, #4]
 80258d8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80258da:	2114      	movs	r1, #20
 80258dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80258de:	f7f6 fd0d 	bl	801c2fc <pbuf_remove_header>
      pbuf_cat(p, r);
 80258e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80258e4:	6878      	ldr	r0, [r7, #4]
 80258e6:	f7f6 fe5d 	bl	801c5a4 <pbuf_cat>
      r = iprh->next_pbuf;
 80258ea:	68fb      	ldr	r3, [r7, #12]
 80258ec:	681b      	ldr	r3, [r3, #0]
 80258ee:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80258f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80258f2:	2b00      	cmp	r3, #0
 80258f4:	d1ee      	bne.n	80258d4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80258f6:	4b31      	ldr	r3, [pc, #196]	; (80259bc <ip4_reass+0x300>)
 80258f8:	681b      	ldr	r3, [r3, #0]
 80258fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80258fc:	429a      	cmp	r2, r3
 80258fe:	d102      	bne.n	8025906 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8025900:	2300      	movs	r3, #0
 8025902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025904:	e010      	b.n	8025928 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8025906:	4b2d      	ldr	r3, [pc, #180]	; (80259bc <ip4_reass+0x300>)
 8025908:	681b      	ldr	r3, [r3, #0]
 802590a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802590c:	e007      	b.n	802591e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 802590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025910:	681b      	ldr	r3, [r3, #0]
 8025912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025914:	429a      	cmp	r2, r3
 8025916:	d006      	beq.n	8025926 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8025918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802591a:	681b      	ldr	r3, [r3, #0]
 802591c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025920:	2b00      	cmp	r3, #0
 8025922:	d1f4      	bne.n	802590e <ip4_reass+0x252>
 8025924:	e000      	b.n	8025928 <ip4_reass+0x26c>
          break;
 8025926:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8025928:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802592a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802592c:	f7ff fd2e 	bl	802538c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8025930:	6878      	ldr	r0, [r7, #4]
 8025932:	f7f6 fdf7 	bl	801c524 <pbuf_clen>
 8025936:	4603      	mov	r3, r0
 8025938:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802593a:	4b1f      	ldr	r3, [pc, #124]	; (80259b8 <ip4_reass+0x2fc>)
 802593c:	881b      	ldrh	r3, [r3, #0]
 802593e:	8c3a      	ldrh	r2, [r7, #32]
 8025940:	429a      	cmp	r2, r3
 8025942:	d906      	bls.n	8025952 <ip4_reass+0x296>
 8025944:	4b1e      	ldr	r3, [pc, #120]	; (80259c0 <ip4_reass+0x304>)
 8025946:	f240 229b 	movw	r2, #667	; 0x29b
 802594a:	491e      	ldr	r1, [pc, #120]	; (80259c4 <ip4_reass+0x308>)
 802594c:	481e      	ldr	r0, [pc, #120]	; (80259c8 <ip4_reass+0x30c>)
 802594e:	f001 f983 	bl	8026c58 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8025952:	4b19      	ldr	r3, [pc, #100]	; (80259b8 <ip4_reass+0x2fc>)
 8025954:	881a      	ldrh	r2, [r3, #0]
 8025956:	8c3b      	ldrh	r3, [r7, #32]
 8025958:	1ad3      	subs	r3, r2, r3
 802595a:	b29a      	uxth	r2, r3
 802595c:	4b16      	ldr	r3, [pc, #88]	; (80259b8 <ip4_reass+0x2fc>)
 802595e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8025960:	687b      	ldr	r3, [r7, #4]
 8025962:	e03c      	b.n	80259de <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8025964:	2300      	movs	r3, #0
 8025966:	e03a      	b.n	80259de <ip4_reass+0x322>
      goto nullreturn_ipr;
 8025968:	bf00      	nop
 802596a:	e000      	b.n	802596e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 802596c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 802596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025970:	2b00      	cmp	r3, #0
 8025972:	d106      	bne.n	8025982 <ip4_reass+0x2c6>
 8025974:	4b12      	ldr	r3, [pc, #72]	; (80259c0 <ip4_reass+0x304>)
 8025976:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 802597a:	4914      	ldr	r1, [pc, #80]	; (80259cc <ip4_reass+0x310>)
 802597c:	4812      	ldr	r0, [pc, #72]	; (80259c8 <ip4_reass+0x30c>)
 802597e:	f001 f96b 	bl	8026c58 <iprintf>
  if (ipr->p == NULL) {
 8025982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025984:	685b      	ldr	r3, [r3, #4]
 8025986:	2b00      	cmp	r3, #0
 8025988:	d124      	bne.n	80259d4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 802598a:	4b0c      	ldr	r3, [pc, #48]	; (80259bc <ip4_reass+0x300>)
 802598c:	681b      	ldr	r3, [r3, #0]
 802598e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025990:	429a      	cmp	r2, r3
 8025992:	d006      	beq.n	80259a2 <ip4_reass+0x2e6>
 8025994:	4b0a      	ldr	r3, [pc, #40]	; (80259c0 <ip4_reass+0x304>)
 8025996:	f240 22ab 	movw	r2, #683	; 0x2ab
 802599a:	490d      	ldr	r1, [pc, #52]	; (80259d0 <ip4_reass+0x314>)
 802599c:	480a      	ldr	r0, [pc, #40]	; (80259c8 <ip4_reass+0x30c>)
 802599e:	f001 f95b 	bl	8026c58 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80259a2:	2100      	movs	r1, #0
 80259a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80259a6:	f7ff fcf1 	bl	802538c <ip_reass_dequeue_datagram>
 80259aa:	e014      	b.n	80259d6 <ip4_reass+0x31a>
    goto nullreturn;
 80259ac:	bf00      	nop
 80259ae:	e012      	b.n	80259d6 <ip4_reass+0x31a>
    goto nullreturn;
 80259b0:	bf00      	nop
 80259b2:	e010      	b.n	80259d6 <ip4_reass+0x31a>
      goto nullreturn;
 80259b4:	bf00      	nop
 80259b6:	e00e      	b.n	80259d6 <ip4_reass+0x31a>
 80259b8:	20005b60 	.word	0x20005b60
 80259bc:	20005b5c 	.word	0x20005b5c
 80259c0:	0802fde4 	.word	0x0802fde4
 80259c4:	0802ff54 	.word	0x0802ff54
 80259c8:	0802fe2c 	.word	0x0802fe2c
 80259cc:	0802ff70 	.word	0x0802ff70
 80259d0:	0802ff7c 	.word	0x0802ff7c
  }

nullreturn:
 80259d4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80259d6:	6878      	ldr	r0, [r7, #4]
 80259d8:	f7f6 fd16 	bl	801c408 <pbuf_free>
  return NULL;
 80259dc:	2300      	movs	r3, #0
}
 80259de:	4618      	mov	r0, r3
 80259e0:	3738      	adds	r7, #56	; 0x38
 80259e2:	46bd      	mov	sp, r7
 80259e4:	bd80      	pop	{r7, pc}
 80259e6:	bf00      	nop

080259e8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80259e8:	b580      	push	{r7, lr}
 80259ea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80259ec:	2005      	movs	r0, #5
 80259ee:	f7f5 fe15 	bl	801b61c <memp_malloc>
 80259f2:	4603      	mov	r3, r0
}
 80259f4:	4618      	mov	r0, r3
 80259f6:	bd80      	pop	{r7, pc}

080259f8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80259f8:	b580      	push	{r7, lr}
 80259fa:	b082      	sub	sp, #8
 80259fc:	af00      	add	r7, sp, #0
 80259fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8025a00:	687b      	ldr	r3, [r7, #4]
 8025a02:	2b00      	cmp	r3, #0
 8025a04:	d106      	bne.n	8025a14 <ip_frag_free_pbuf_custom_ref+0x1c>
 8025a06:	4b07      	ldr	r3, [pc, #28]	; (8025a24 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8025a08:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8025a0c:	4906      	ldr	r1, [pc, #24]	; (8025a28 <ip_frag_free_pbuf_custom_ref+0x30>)
 8025a0e:	4807      	ldr	r0, [pc, #28]	; (8025a2c <ip_frag_free_pbuf_custom_ref+0x34>)
 8025a10:	f001 f922 	bl	8026c58 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8025a14:	6879      	ldr	r1, [r7, #4]
 8025a16:	2005      	movs	r0, #5
 8025a18:	f7f5 fe52 	bl	801b6c0 <memp_free>
}
 8025a1c:	bf00      	nop
 8025a1e:	3708      	adds	r7, #8
 8025a20:	46bd      	mov	sp, r7
 8025a22:	bd80      	pop	{r7, pc}
 8025a24:	0802fde4 	.word	0x0802fde4
 8025a28:	0802ff9c 	.word	0x0802ff9c
 8025a2c:	0802fe2c 	.word	0x0802fe2c

08025a30 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8025a30:	b580      	push	{r7, lr}
 8025a32:	b084      	sub	sp, #16
 8025a34:	af00      	add	r7, sp, #0
 8025a36:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8025a38:	687b      	ldr	r3, [r7, #4]
 8025a3a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8025a3c:	68fb      	ldr	r3, [r7, #12]
 8025a3e:	2b00      	cmp	r3, #0
 8025a40:	d106      	bne.n	8025a50 <ipfrag_free_pbuf_custom+0x20>
 8025a42:	4b11      	ldr	r3, [pc, #68]	; (8025a88 <ipfrag_free_pbuf_custom+0x58>)
 8025a44:	f240 22ce 	movw	r2, #718	; 0x2ce
 8025a48:	4910      	ldr	r1, [pc, #64]	; (8025a8c <ipfrag_free_pbuf_custom+0x5c>)
 8025a4a:	4811      	ldr	r0, [pc, #68]	; (8025a90 <ipfrag_free_pbuf_custom+0x60>)
 8025a4c:	f001 f904 	bl	8026c58 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8025a50:	68fa      	ldr	r2, [r7, #12]
 8025a52:	687b      	ldr	r3, [r7, #4]
 8025a54:	429a      	cmp	r2, r3
 8025a56:	d006      	beq.n	8025a66 <ipfrag_free_pbuf_custom+0x36>
 8025a58:	4b0b      	ldr	r3, [pc, #44]	; (8025a88 <ipfrag_free_pbuf_custom+0x58>)
 8025a5a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8025a5e:	490d      	ldr	r1, [pc, #52]	; (8025a94 <ipfrag_free_pbuf_custom+0x64>)
 8025a60:	480b      	ldr	r0, [pc, #44]	; (8025a90 <ipfrag_free_pbuf_custom+0x60>)
 8025a62:	f001 f8f9 	bl	8026c58 <iprintf>
  if (pcr->original != NULL) {
 8025a66:	68fb      	ldr	r3, [r7, #12]
 8025a68:	695b      	ldr	r3, [r3, #20]
 8025a6a:	2b00      	cmp	r3, #0
 8025a6c:	d004      	beq.n	8025a78 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8025a6e:	68fb      	ldr	r3, [r7, #12]
 8025a70:	695b      	ldr	r3, [r3, #20]
 8025a72:	4618      	mov	r0, r3
 8025a74:	f7f6 fcc8 	bl	801c408 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8025a78:	68f8      	ldr	r0, [r7, #12]
 8025a7a:	f7ff ffbd 	bl	80259f8 <ip_frag_free_pbuf_custom_ref>
}
 8025a7e:	bf00      	nop
 8025a80:	3710      	adds	r7, #16
 8025a82:	46bd      	mov	sp, r7
 8025a84:	bd80      	pop	{r7, pc}
 8025a86:	bf00      	nop
 8025a88:	0802fde4 	.word	0x0802fde4
 8025a8c:	0802ffa8 	.word	0x0802ffa8
 8025a90:	0802fe2c 	.word	0x0802fe2c
 8025a94:	0802ffb4 	.word	0x0802ffb4

08025a98 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8025a98:	b580      	push	{r7, lr}
 8025a9a:	b094      	sub	sp, #80	; 0x50
 8025a9c:	af02      	add	r7, sp, #8
 8025a9e:	60f8      	str	r0, [r7, #12]
 8025aa0:	60b9      	str	r1, [r7, #8]
 8025aa2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8025aa4:	2300      	movs	r3, #0
 8025aa6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8025aaa:	68bb      	ldr	r3, [r7, #8]
 8025aac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8025aae:	3b14      	subs	r3, #20
 8025ab0:	2b00      	cmp	r3, #0
 8025ab2:	da00      	bge.n	8025ab6 <ip4_frag+0x1e>
 8025ab4:	3307      	adds	r3, #7
 8025ab6:	10db      	asrs	r3, r3, #3
 8025ab8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8025aba:	2314      	movs	r3, #20
 8025abc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8025abe:	68fb      	ldr	r3, [r7, #12]
 8025ac0:	685b      	ldr	r3, [r3, #4]
 8025ac2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8025ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025ac6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8025ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025aca:	781b      	ldrb	r3, [r3, #0]
 8025acc:	f003 030f 	and.w	r3, r3, #15
 8025ad0:	b2db      	uxtb	r3, r3
 8025ad2:	009b      	lsls	r3, r3, #2
 8025ad4:	b2db      	uxtb	r3, r3
 8025ad6:	2b14      	cmp	r3, #20
 8025ad8:	d002      	beq.n	8025ae0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8025ada:	f06f 0305 	mvn.w	r3, #5
 8025ade:	e110      	b.n	8025d02 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8025ae0:	68fb      	ldr	r3, [r7, #12]
 8025ae2:	895b      	ldrh	r3, [r3, #10]
 8025ae4:	2b13      	cmp	r3, #19
 8025ae6:	d809      	bhi.n	8025afc <ip4_frag+0x64>
 8025ae8:	4b88      	ldr	r3, [pc, #544]	; (8025d0c <ip4_frag+0x274>)
 8025aea:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8025aee:	4988      	ldr	r1, [pc, #544]	; (8025d10 <ip4_frag+0x278>)
 8025af0:	4888      	ldr	r0, [pc, #544]	; (8025d14 <ip4_frag+0x27c>)
 8025af2:	f001 f8b1 	bl	8026c58 <iprintf>
 8025af6:	f06f 0305 	mvn.w	r3, #5
 8025afa:	e102      	b.n	8025d02 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8025afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025afe:	88db      	ldrh	r3, [r3, #6]
 8025b00:	b29b      	uxth	r3, r3
 8025b02:	4618      	mov	r0, r3
 8025b04:	f7f5 f842 	bl	801ab8c <lwip_htons>
 8025b08:	4603      	mov	r3, r0
 8025b0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8025b0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8025b0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025b12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8025b16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8025b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8025b1c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8025b1e:	68fb      	ldr	r3, [r7, #12]
 8025b20:	891b      	ldrh	r3, [r3, #8]
 8025b22:	3b14      	subs	r3, #20
 8025b24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8025b28:	e0e1      	b.n	8025cee <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8025b2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8025b2c:	00db      	lsls	r3, r3, #3
 8025b2e:	b29b      	uxth	r3, r3
 8025b30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8025b34:	4293      	cmp	r3, r2
 8025b36:	bf28      	it	cs
 8025b38:	4613      	movcs	r3, r2
 8025b3a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8025b3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8025b40:	2114      	movs	r1, #20
 8025b42:	200e      	movs	r0, #14
 8025b44:	f7f6 f97c 	bl	801be40 <pbuf_alloc>
 8025b48:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8025b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b4c:	2b00      	cmp	r3, #0
 8025b4e:	f000 80d5 	beq.w	8025cfc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8025b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b54:	895b      	ldrh	r3, [r3, #10]
 8025b56:	2b13      	cmp	r3, #19
 8025b58:	d806      	bhi.n	8025b68 <ip4_frag+0xd0>
 8025b5a:	4b6c      	ldr	r3, [pc, #432]	; (8025d0c <ip4_frag+0x274>)
 8025b5c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8025b60:	496d      	ldr	r1, [pc, #436]	; (8025d18 <ip4_frag+0x280>)
 8025b62:	486c      	ldr	r0, [pc, #432]	; (8025d14 <ip4_frag+0x27c>)
 8025b64:	f001 f878 	bl	8026c58 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8025b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b6a:	685b      	ldr	r3, [r3, #4]
 8025b6c:	2214      	movs	r2, #20
 8025b6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8025b70:	4618      	mov	r0, r3
 8025b72:	f000 fd19 	bl	80265a8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8025b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b78:	685b      	ldr	r3, [r3, #4]
 8025b7a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8025b7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8025b7e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8025b82:	e064      	b.n	8025c4e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8025b84:	68fb      	ldr	r3, [r7, #12]
 8025b86:	895a      	ldrh	r2, [r3, #10]
 8025b88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8025b8a:	1ad3      	subs	r3, r2, r3
 8025b8c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8025b8e:	68fb      	ldr	r3, [r7, #12]
 8025b90:	895b      	ldrh	r3, [r3, #10]
 8025b92:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8025b94:	429a      	cmp	r2, r3
 8025b96:	d906      	bls.n	8025ba6 <ip4_frag+0x10e>
 8025b98:	4b5c      	ldr	r3, [pc, #368]	; (8025d0c <ip4_frag+0x274>)
 8025b9a:	f240 322d 	movw	r2, #813	; 0x32d
 8025b9e:	495f      	ldr	r1, [pc, #380]	; (8025d1c <ip4_frag+0x284>)
 8025ba0:	485c      	ldr	r0, [pc, #368]	; (8025d14 <ip4_frag+0x27c>)
 8025ba2:	f001 f859 	bl	8026c58 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8025ba6:	8bfa      	ldrh	r2, [r7, #30]
 8025ba8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8025bac:	4293      	cmp	r3, r2
 8025bae:	bf28      	it	cs
 8025bb0:	4613      	movcs	r3, r2
 8025bb2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8025bb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8025bba:	2b00      	cmp	r3, #0
 8025bbc:	d105      	bne.n	8025bca <ip4_frag+0x132>
        poff = 0;
 8025bbe:	2300      	movs	r3, #0
 8025bc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8025bc2:	68fb      	ldr	r3, [r7, #12]
 8025bc4:	681b      	ldr	r3, [r3, #0]
 8025bc6:	60fb      	str	r3, [r7, #12]
        continue;
 8025bc8:	e041      	b.n	8025c4e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8025bca:	f7ff ff0d 	bl	80259e8 <ip_frag_alloc_pbuf_custom_ref>
 8025bce:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8025bd0:	69bb      	ldr	r3, [r7, #24]
 8025bd2:	2b00      	cmp	r3, #0
 8025bd4:	d103      	bne.n	8025bde <ip4_frag+0x146>
        pbuf_free(rambuf);
 8025bd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025bd8:	f7f6 fc16 	bl	801c408 <pbuf_free>
        goto memerr;
 8025bdc:	e08f      	b.n	8025cfe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8025bde:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8025be0:	68fb      	ldr	r3, [r7, #12]
 8025be2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8025be4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8025be6:	4413      	add	r3, r2
 8025be8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8025bec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8025bf0:	9201      	str	r2, [sp, #4]
 8025bf2:	9300      	str	r3, [sp, #0]
 8025bf4:	4603      	mov	r3, r0
 8025bf6:	2241      	movs	r2, #65	; 0x41
 8025bf8:	2000      	movs	r0, #0
 8025bfa:	f7f6 fa4b 	bl	801c094 <pbuf_alloced_custom>
 8025bfe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8025c00:	697b      	ldr	r3, [r7, #20]
 8025c02:	2b00      	cmp	r3, #0
 8025c04:	d106      	bne.n	8025c14 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8025c06:	69b8      	ldr	r0, [r7, #24]
 8025c08:	f7ff fef6 	bl	80259f8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8025c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025c0e:	f7f6 fbfb 	bl	801c408 <pbuf_free>
        goto memerr;
 8025c12:	e074      	b.n	8025cfe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8025c14:	68f8      	ldr	r0, [r7, #12]
 8025c16:	f7f6 fc9d 	bl	801c554 <pbuf_ref>
      pcr->original = p;
 8025c1a:	69bb      	ldr	r3, [r7, #24]
 8025c1c:	68fa      	ldr	r2, [r7, #12]
 8025c1e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8025c20:	69bb      	ldr	r3, [r7, #24]
 8025c22:	4a3f      	ldr	r2, [pc, #252]	; (8025d20 <ip4_frag+0x288>)
 8025c24:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8025c26:	6979      	ldr	r1, [r7, #20]
 8025c28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025c2a:	f7f6 fcbb 	bl	801c5a4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8025c2e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8025c32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8025c36:	1ad3      	subs	r3, r2, r3
 8025c38:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8025c3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8025c40:	2b00      	cmp	r3, #0
 8025c42:	d004      	beq.n	8025c4e <ip4_frag+0x1b6>
        poff = 0;
 8025c44:	2300      	movs	r3, #0
 8025c46:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8025c48:	68fb      	ldr	r3, [r7, #12]
 8025c4a:	681b      	ldr	r3, [r3, #0]
 8025c4c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8025c4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8025c52:	2b00      	cmp	r3, #0
 8025c54:	d196      	bne.n	8025b84 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8025c56:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8025c58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8025c5c:	4413      	add	r3, r2
 8025c5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8025c60:	68bb      	ldr	r3, [r7, #8]
 8025c62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8025c64:	f1a3 0213 	sub.w	r2, r3, #19
 8025c68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8025c6c:	429a      	cmp	r2, r3
 8025c6e:	bfcc      	ite	gt
 8025c70:	2301      	movgt	r3, #1
 8025c72:	2300      	movle	r3, #0
 8025c74:	b2db      	uxtb	r3, r3
 8025c76:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8025c78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8025c7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025c80:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8025c82:	6a3b      	ldr	r3, [r7, #32]
 8025c84:	2b00      	cmp	r3, #0
 8025c86:	d002      	beq.n	8025c8e <ip4_frag+0x1f6>
 8025c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025c8a:	2b00      	cmp	r3, #0
 8025c8c:	d003      	beq.n	8025c96 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8025c8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8025c90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8025c94:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8025c96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8025c98:	4618      	mov	r0, r3
 8025c9a:	f7f4 ff77 	bl	801ab8c <lwip_htons>
 8025c9e:	4603      	mov	r3, r0
 8025ca0:	461a      	mov	r2, r3
 8025ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025ca4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8025ca6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8025ca8:	3314      	adds	r3, #20
 8025caa:	b29b      	uxth	r3, r3
 8025cac:	4618      	mov	r0, r3
 8025cae:	f7f4 ff6d 	bl	801ab8c <lwip_htons>
 8025cb2:	4603      	mov	r3, r0
 8025cb4:	461a      	mov	r2, r3
 8025cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025cb8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8025cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025cbc:	2200      	movs	r2, #0
 8025cbe:	729a      	strb	r2, [r3, #10]
 8025cc0:	2200      	movs	r2, #0
 8025cc2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8025cc4:	68bb      	ldr	r3, [r7, #8]
 8025cc6:	695b      	ldr	r3, [r3, #20]
 8025cc8:	687a      	ldr	r2, [r7, #4]
 8025cca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025ccc:	68b8      	ldr	r0, [r7, #8]
 8025cce:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8025cd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025cd2:	f7f6 fb99 	bl	801c408 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8025cd6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8025cda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8025cdc:	1ad3      	subs	r3, r2, r3
 8025cde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8025ce2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8025ce6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8025ce8:	4413      	add	r3, r2
 8025cea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8025cee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8025cf2:	2b00      	cmp	r3, #0
 8025cf4:	f47f af19 	bne.w	8025b2a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8025cf8:	2300      	movs	r3, #0
 8025cfa:	e002      	b.n	8025d02 <ip4_frag+0x26a>
      goto memerr;
 8025cfc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8025cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8025d02:	4618      	mov	r0, r3
 8025d04:	3748      	adds	r7, #72	; 0x48
 8025d06:	46bd      	mov	sp, r7
 8025d08:	bd80      	pop	{r7, pc}
 8025d0a:	bf00      	nop
 8025d0c:	0802fde4 	.word	0x0802fde4
 8025d10:	0802ffc0 	.word	0x0802ffc0
 8025d14:	0802fe2c 	.word	0x0802fe2c
 8025d18:	0802ffdc 	.word	0x0802ffdc
 8025d1c:	0802fffc 	.word	0x0802fffc
 8025d20:	08025a31 	.word	0x08025a31

08025d24 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8025d24:	b580      	push	{r7, lr}
 8025d26:	b086      	sub	sp, #24
 8025d28:	af00      	add	r7, sp, #0
 8025d2a:	6078      	str	r0, [r7, #4]
 8025d2c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8025d2e:	230e      	movs	r3, #14
 8025d30:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8025d32:	687b      	ldr	r3, [r7, #4]
 8025d34:	895b      	ldrh	r3, [r3, #10]
 8025d36:	2b0e      	cmp	r3, #14
 8025d38:	d96e      	bls.n	8025e18 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8025d3a:	687b      	ldr	r3, [r7, #4]
 8025d3c:	7bdb      	ldrb	r3, [r3, #15]
 8025d3e:	2b00      	cmp	r3, #0
 8025d40:	d106      	bne.n	8025d50 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8025d42:	683b      	ldr	r3, [r7, #0]
 8025d44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8025d48:	3301      	adds	r3, #1
 8025d4a:	b2da      	uxtb	r2, r3
 8025d4c:	687b      	ldr	r3, [r7, #4]
 8025d4e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8025d50:	687b      	ldr	r3, [r7, #4]
 8025d52:	685b      	ldr	r3, [r3, #4]
 8025d54:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8025d56:	693b      	ldr	r3, [r7, #16]
 8025d58:	7b1a      	ldrb	r2, [r3, #12]
 8025d5a:	7b5b      	ldrb	r3, [r3, #13]
 8025d5c:	021b      	lsls	r3, r3, #8
 8025d5e:	4313      	orrs	r3, r2
 8025d60:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8025d62:	693b      	ldr	r3, [r7, #16]
 8025d64:	781b      	ldrb	r3, [r3, #0]
 8025d66:	f003 0301 	and.w	r3, r3, #1
 8025d6a:	2b00      	cmp	r3, #0
 8025d6c:	d023      	beq.n	8025db6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8025d6e:	693b      	ldr	r3, [r7, #16]
 8025d70:	781b      	ldrb	r3, [r3, #0]
 8025d72:	2b01      	cmp	r3, #1
 8025d74:	d10f      	bne.n	8025d96 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8025d76:	693b      	ldr	r3, [r7, #16]
 8025d78:	785b      	ldrb	r3, [r3, #1]
 8025d7a:	2b00      	cmp	r3, #0
 8025d7c:	d11b      	bne.n	8025db6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8025d7e:	693b      	ldr	r3, [r7, #16]
 8025d80:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8025d82:	2b5e      	cmp	r3, #94	; 0x5e
 8025d84:	d117      	bne.n	8025db6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8025d86:	687b      	ldr	r3, [r7, #4]
 8025d88:	7b5b      	ldrb	r3, [r3, #13]
 8025d8a:	f043 0310 	orr.w	r3, r3, #16
 8025d8e:	b2da      	uxtb	r2, r3
 8025d90:	687b      	ldr	r3, [r7, #4]
 8025d92:	735a      	strb	r2, [r3, #13]
 8025d94:	e00f      	b.n	8025db6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8025d96:	693b      	ldr	r3, [r7, #16]
 8025d98:	2206      	movs	r2, #6
 8025d9a:	4928      	ldr	r1, [pc, #160]	; (8025e3c <ethernet_input+0x118>)
 8025d9c:	4618      	mov	r0, r3
 8025d9e:	f000 fbf5 	bl	802658c <memcmp>
 8025da2:	4603      	mov	r3, r0
 8025da4:	2b00      	cmp	r3, #0
 8025da6:	d106      	bne.n	8025db6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8025da8:	687b      	ldr	r3, [r7, #4]
 8025daa:	7b5b      	ldrb	r3, [r3, #13]
 8025dac:	f043 0308 	orr.w	r3, r3, #8
 8025db0:	b2da      	uxtb	r2, r3
 8025db2:	687b      	ldr	r3, [r7, #4]
 8025db4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8025db6:	89fb      	ldrh	r3, [r7, #14]
 8025db8:	2b08      	cmp	r3, #8
 8025dba:	d003      	beq.n	8025dc4 <ethernet_input+0xa0>
 8025dbc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8025dc0:	d014      	beq.n	8025dec <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8025dc2:	e032      	b.n	8025e2a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8025dc4:	683b      	ldr	r3, [r7, #0]
 8025dc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8025dca:	f003 0308 	and.w	r3, r3, #8
 8025dce:	2b00      	cmp	r3, #0
 8025dd0:	d024      	beq.n	8025e1c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8025dd2:	8afb      	ldrh	r3, [r7, #22]
 8025dd4:	4619      	mov	r1, r3
 8025dd6:	6878      	ldr	r0, [r7, #4]
 8025dd8:	f7f6 fa90 	bl	801c2fc <pbuf_remove_header>
 8025ddc:	4603      	mov	r3, r0
 8025dde:	2b00      	cmp	r3, #0
 8025de0:	d11e      	bne.n	8025e20 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8025de2:	6839      	ldr	r1, [r7, #0]
 8025de4:	6878      	ldr	r0, [r7, #4]
 8025de6:	f7fe ff27 	bl	8024c38 <ip4_input>
      break;
 8025dea:	e013      	b.n	8025e14 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8025dec:	683b      	ldr	r3, [r7, #0]
 8025dee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8025df2:	f003 0308 	and.w	r3, r3, #8
 8025df6:	2b00      	cmp	r3, #0
 8025df8:	d014      	beq.n	8025e24 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8025dfa:	8afb      	ldrh	r3, [r7, #22]
 8025dfc:	4619      	mov	r1, r3
 8025dfe:	6878      	ldr	r0, [r7, #4]
 8025e00:	f7f6 fa7c 	bl	801c2fc <pbuf_remove_header>
 8025e04:	4603      	mov	r3, r0
 8025e06:	2b00      	cmp	r3, #0
 8025e08:	d10e      	bne.n	8025e28 <ethernet_input+0x104>
        etharp_input(p, netif);
 8025e0a:	6839      	ldr	r1, [r7, #0]
 8025e0c:	6878      	ldr	r0, [r7, #4]
 8025e0e:	f7fe f8c7 	bl	8023fa0 <etharp_input>
      break;
 8025e12:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8025e14:	2300      	movs	r3, #0
 8025e16:	e00c      	b.n	8025e32 <ethernet_input+0x10e>
    goto free_and_return;
 8025e18:	bf00      	nop
 8025e1a:	e006      	b.n	8025e2a <ethernet_input+0x106>
        goto free_and_return;
 8025e1c:	bf00      	nop
 8025e1e:	e004      	b.n	8025e2a <ethernet_input+0x106>
        goto free_and_return;
 8025e20:	bf00      	nop
 8025e22:	e002      	b.n	8025e2a <ethernet_input+0x106>
        goto free_and_return;
 8025e24:	bf00      	nop
 8025e26:	e000      	b.n	8025e2a <ethernet_input+0x106>
        goto free_and_return;
 8025e28:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8025e2a:	6878      	ldr	r0, [r7, #4]
 8025e2c:	f7f6 faec 	bl	801c408 <pbuf_free>
  return ERR_OK;
 8025e30:	2300      	movs	r3, #0
}
 8025e32:	4618      	mov	r0, r3
 8025e34:	3718      	adds	r7, #24
 8025e36:	46bd      	mov	sp, r7
 8025e38:	bd80      	pop	{r7, pc}
 8025e3a:	bf00      	nop
 8025e3c:	080608e8 	.word	0x080608e8

08025e40 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8025e40:	b580      	push	{r7, lr}
 8025e42:	b086      	sub	sp, #24
 8025e44:	af00      	add	r7, sp, #0
 8025e46:	60f8      	str	r0, [r7, #12]
 8025e48:	60b9      	str	r1, [r7, #8]
 8025e4a:	607a      	str	r2, [r7, #4]
 8025e4c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8025e4e:	8c3b      	ldrh	r3, [r7, #32]
 8025e50:	4618      	mov	r0, r3
 8025e52:	f7f4 fe9b 	bl	801ab8c <lwip_htons>
 8025e56:	4603      	mov	r3, r0
 8025e58:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8025e5a:	210e      	movs	r1, #14
 8025e5c:	68b8      	ldr	r0, [r7, #8]
 8025e5e:	f7f6 fa3d 	bl	801c2dc <pbuf_add_header>
 8025e62:	4603      	mov	r3, r0
 8025e64:	2b00      	cmp	r3, #0
 8025e66:	d125      	bne.n	8025eb4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8025e68:	68bb      	ldr	r3, [r7, #8]
 8025e6a:	685b      	ldr	r3, [r3, #4]
 8025e6c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8025e6e:	693b      	ldr	r3, [r7, #16]
 8025e70:	8afa      	ldrh	r2, [r7, #22]
 8025e72:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8025e74:	693b      	ldr	r3, [r7, #16]
 8025e76:	2206      	movs	r2, #6
 8025e78:	6839      	ldr	r1, [r7, #0]
 8025e7a:	4618      	mov	r0, r3
 8025e7c:	f000 fb94 	bl	80265a8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8025e80:	693b      	ldr	r3, [r7, #16]
 8025e82:	3306      	adds	r3, #6
 8025e84:	2206      	movs	r2, #6
 8025e86:	6879      	ldr	r1, [r7, #4]
 8025e88:	4618      	mov	r0, r3
 8025e8a:	f000 fb8d 	bl	80265a8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8025e8e:	68fb      	ldr	r3, [r7, #12]
 8025e90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8025e94:	2b06      	cmp	r3, #6
 8025e96:	d006      	beq.n	8025ea6 <ethernet_output+0x66>
 8025e98:	4b0a      	ldr	r3, [pc, #40]	; (8025ec4 <ethernet_output+0x84>)
 8025e9a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8025e9e:	490a      	ldr	r1, [pc, #40]	; (8025ec8 <ethernet_output+0x88>)
 8025ea0:	480a      	ldr	r0, [pc, #40]	; (8025ecc <ethernet_output+0x8c>)
 8025ea2:	f000 fed9 	bl	8026c58 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8025ea6:	68fb      	ldr	r3, [r7, #12]
 8025ea8:	699b      	ldr	r3, [r3, #24]
 8025eaa:	68b9      	ldr	r1, [r7, #8]
 8025eac:	68f8      	ldr	r0, [r7, #12]
 8025eae:	4798      	blx	r3
 8025eb0:	4603      	mov	r3, r0
 8025eb2:	e002      	b.n	8025eba <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8025eb4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8025eb6:	f06f 0301 	mvn.w	r3, #1
}
 8025eba:	4618      	mov	r0, r3
 8025ebc:	3718      	adds	r7, #24
 8025ebe:	46bd      	mov	sp, r7
 8025ec0:	bd80      	pop	{r7, pc}
 8025ec2:	bf00      	nop
 8025ec4:	0803000c 	.word	0x0803000c
 8025ec8:	08030044 	.word	0x08030044
 8025ecc:	08030078 	.word	0x08030078

08025ed0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8025ed0:	b580      	push	{r7, lr}
 8025ed2:	b086      	sub	sp, #24
 8025ed4:	af00      	add	r7, sp, #0
 8025ed6:	6078      	str	r0, [r7, #4]
 8025ed8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8025eda:	683b      	ldr	r3, [r7, #0]
 8025edc:	60bb      	str	r3, [r7, #8]
 8025ede:	2304      	movs	r3, #4
 8025ee0:	60fb      	str	r3, [r7, #12]
 8025ee2:	2300      	movs	r3, #0
 8025ee4:	613b      	str	r3, [r7, #16]
 8025ee6:	2300      	movs	r3, #0
 8025ee8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8025eea:	f107 0308 	add.w	r3, r7, #8
 8025eee:	2100      	movs	r1, #0
 8025ef0:	4618      	mov	r0, r3
 8025ef2:	f7ee f9f2 	bl	80142da <osMessageCreate>
 8025ef6:	4602      	mov	r2, r0
 8025ef8:	687b      	ldr	r3, [r7, #4]
 8025efa:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8025efc:	687b      	ldr	r3, [r7, #4]
 8025efe:	681b      	ldr	r3, [r3, #0]
 8025f00:	2b00      	cmp	r3, #0
 8025f02:	d102      	bne.n	8025f0a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8025f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8025f08:	e000      	b.n	8025f0c <sys_mbox_new+0x3c>

  return ERR_OK;
 8025f0a:	2300      	movs	r3, #0
}
 8025f0c:	4618      	mov	r0, r3
 8025f0e:	3718      	adds	r7, #24
 8025f10:	46bd      	mov	sp, r7
 8025f12:	bd80      	pop	{r7, pc}

08025f14 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8025f14:	b580      	push	{r7, lr}
 8025f16:	b084      	sub	sp, #16
 8025f18:	af00      	add	r7, sp, #0
 8025f1a:	6078      	str	r0, [r7, #4]
 8025f1c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8025f1e:	687b      	ldr	r3, [r7, #4]
 8025f20:	681b      	ldr	r3, [r3, #0]
 8025f22:	6839      	ldr	r1, [r7, #0]
 8025f24:	2200      	movs	r2, #0
 8025f26:	4618      	mov	r0, r3
 8025f28:	f7ee fa00 	bl	801432c <osMessagePut>
 8025f2c:	4603      	mov	r3, r0
 8025f2e:	2b00      	cmp	r3, #0
 8025f30:	d102      	bne.n	8025f38 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8025f32:	2300      	movs	r3, #0
 8025f34:	73fb      	strb	r3, [r7, #15]
 8025f36:	e001      	b.n	8025f3c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8025f38:	23ff      	movs	r3, #255	; 0xff
 8025f3a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8025f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8025f40:	4618      	mov	r0, r3
 8025f42:	3710      	adds	r7, #16
 8025f44:	46bd      	mov	sp, r7
 8025f46:	bd80      	pop	{r7, pc}

08025f48 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8025f48:	b580      	push	{r7, lr}
 8025f4a:	b08c      	sub	sp, #48	; 0x30
 8025f4c:	af00      	add	r7, sp, #0
 8025f4e:	61f8      	str	r0, [r7, #28]
 8025f50:	61b9      	str	r1, [r7, #24]
 8025f52:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8025f54:	f7ed ffeb 	bl	8013f2e <osKernelSysTick>
 8025f58:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8025f5a:	697b      	ldr	r3, [r7, #20]
 8025f5c:	2b00      	cmp	r3, #0
 8025f5e:	d017      	beq.n	8025f90 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8025f60:	69fb      	ldr	r3, [r7, #28]
 8025f62:	6819      	ldr	r1, [r3, #0]
 8025f64:	f107 0320 	add.w	r3, r7, #32
 8025f68:	697a      	ldr	r2, [r7, #20]
 8025f6a:	4618      	mov	r0, r3
 8025f6c:	f7ee fa1e 	bl	80143ac <osMessageGet>

    if(event.status == osEventMessage)
 8025f70:	6a3b      	ldr	r3, [r7, #32]
 8025f72:	2b10      	cmp	r3, #16
 8025f74:	d109      	bne.n	8025f8a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8025f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f78:	461a      	mov	r2, r3
 8025f7a:	69bb      	ldr	r3, [r7, #24]
 8025f7c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8025f7e:	f7ed ffd6 	bl	8013f2e <osKernelSysTick>
 8025f82:	4602      	mov	r2, r0
 8025f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f86:	1ad3      	subs	r3, r2, r3
 8025f88:	e019      	b.n	8025fbe <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8025f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8025f8e:	e016      	b.n	8025fbe <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8025f90:	69fb      	ldr	r3, [r7, #28]
 8025f92:	6819      	ldr	r1, [r3, #0]
 8025f94:	463b      	mov	r3, r7
 8025f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025f9a:	4618      	mov	r0, r3
 8025f9c:	f7ee fa06 	bl	80143ac <osMessageGet>
 8025fa0:	f107 0320 	add.w	r3, r7, #32
 8025fa4:	463a      	mov	r2, r7
 8025fa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8025fa8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8025fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025fae:	461a      	mov	r2, r3
 8025fb0:	69bb      	ldr	r3, [r7, #24]
 8025fb2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8025fb4:	f7ed ffbb 	bl	8013f2e <osKernelSysTick>
 8025fb8:	4602      	mov	r2, r0
 8025fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025fbc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8025fbe:	4618      	mov	r0, r3
 8025fc0:	3730      	adds	r7, #48	; 0x30
 8025fc2:	46bd      	mov	sp, r7
 8025fc4:	bd80      	pop	{r7, pc}

08025fc6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8025fc6:	b480      	push	{r7}
 8025fc8:	b083      	sub	sp, #12
 8025fca:	af00      	add	r7, sp, #0
 8025fcc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8025fce:	687b      	ldr	r3, [r7, #4]
 8025fd0:	681b      	ldr	r3, [r3, #0]
 8025fd2:	2b00      	cmp	r3, #0
 8025fd4:	d101      	bne.n	8025fda <sys_mbox_valid+0x14>
    return 0;
 8025fd6:	2300      	movs	r3, #0
 8025fd8:	e000      	b.n	8025fdc <sys_mbox_valid+0x16>
  else
    return 1;
 8025fda:	2301      	movs	r3, #1
}
 8025fdc:	4618      	mov	r0, r3
 8025fde:	370c      	adds	r7, #12
 8025fe0:	46bd      	mov	sp, r7
 8025fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fe6:	4770      	bx	lr

08025fe8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8025fe8:	b580      	push	{r7, lr}
 8025fea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8025fec:	4803      	ldr	r0, [pc, #12]	; (8025ffc <sys_init+0x14>)
 8025fee:	f7ee f80e 	bl	801400e <osMutexCreate>
 8025ff2:	4603      	mov	r3, r0
 8025ff4:	4a02      	ldr	r2, [pc, #8]	; (8026000 <sys_init+0x18>)
 8025ff6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8025ff8:	bf00      	nop
 8025ffa:	bd80      	pop	{r7, pc}
 8025ffc:	080608f8 	.word	0x080608f8
 8026000:	2001d53c 	.word	0x2001d53c

08026004 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8026004:	b580      	push	{r7, lr}
 8026006:	b084      	sub	sp, #16
 8026008:	af00      	add	r7, sp, #0
 802600a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 802600c:	2300      	movs	r3, #0
 802600e:	60bb      	str	r3, [r7, #8]
 8026010:	2300      	movs	r3, #0
 8026012:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8026014:	f107 0308 	add.w	r3, r7, #8
 8026018:	4618      	mov	r0, r3
 802601a:	f7ed fff8 	bl	801400e <osMutexCreate>
 802601e:	4602      	mov	r2, r0
 8026020:	687b      	ldr	r3, [r7, #4]
 8026022:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8026024:	687b      	ldr	r3, [r7, #4]
 8026026:	681b      	ldr	r3, [r3, #0]
 8026028:	2b00      	cmp	r3, #0
 802602a:	d102      	bne.n	8026032 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 802602c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8026030:	e000      	b.n	8026034 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8026032:	2300      	movs	r3, #0
}
 8026034:	4618      	mov	r0, r3
 8026036:	3710      	adds	r7, #16
 8026038:	46bd      	mov	sp, r7
 802603a:	bd80      	pop	{r7, pc}

0802603c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 802603c:	b580      	push	{r7, lr}
 802603e:	b082      	sub	sp, #8
 8026040:	af00      	add	r7, sp, #0
 8026042:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8026044:	687b      	ldr	r3, [r7, #4]
 8026046:	681b      	ldr	r3, [r3, #0]
 8026048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802604c:	4618      	mov	r0, r3
 802604e:	f7ed fff7 	bl	8014040 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8026052:	bf00      	nop
 8026054:	3708      	adds	r7, #8
 8026056:	46bd      	mov	sp, r7
 8026058:	bd80      	pop	{r7, pc}

0802605a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 802605a:	b580      	push	{r7, lr}
 802605c:	b082      	sub	sp, #8
 802605e:	af00      	add	r7, sp, #0
 8026060:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8026062:	687b      	ldr	r3, [r7, #4]
 8026064:	681b      	ldr	r3, [r3, #0]
 8026066:	4618      	mov	r0, r3
 8026068:	f7ee f838 	bl	80140dc <osMutexRelease>
}
 802606c:	bf00      	nop
 802606e:	3708      	adds	r7, #8
 8026070:	46bd      	mov	sp, r7
 8026072:	bd80      	pop	{r7, pc}

08026074 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8026074:	b580      	push	{r7, lr}
 8026076:	b08c      	sub	sp, #48	; 0x30
 8026078:	af00      	add	r7, sp, #0
 802607a:	60f8      	str	r0, [r7, #12]
 802607c:	60b9      	str	r1, [r7, #8]
 802607e:	607a      	str	r2, [r7, #4]
 8026080:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8026082:	f107 0314 	add.w	r3, r7, #20
 8026086:	2200      	movs	r2, #0
 8026088:	601a      	str	r2, [r3, #0]
 802608a:	605a      	str	r2, [r3, #4]
 802608c:	609a      	str	r2, [r3, #8]
 802608e:	60da      	str	r2, [r3, #12]
 8026090:	611a      	str	r2, [r3, #16]
 8026092:	615a      	str	r2, [r3, #20]
 8026094:	619a      	str	r2, [r3, #24]
 8026096:	68fb      	ldr	r3, [r7, #12]
 8026098:	617b      	str	r3, [r7, #20]
 802609a:	68bb      	ldr	r3, [r7, #8]
 802609c:	61bb      	str	r3, [r7, #24]
 802609e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80260a0:	b21b      	sxth	r3, r3
 80260a2:	83bb      	strh	r3, [r7, #28]
 80260a4:	683b      	ldr	r3, [r7, #0]
 80260a6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80260a8:	f107 0314 	add.w	r3, r7, #20
 80260ac:	6879      	ldr	r1, [r7, #4]
 80260ae:	4618      	mov	r0, r3
 80260b0:	f7ed ff4d 	bl	8013f4e <osThreadCreate>
 80260b4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80260b6:	4618      	mov	r0, r3
 80260b8:	3730      	adds	r7, #48	; 0x30
 80260ba:	46bd      	mov	sp, r7
 80260bc:	bd80      	pop	{r7, pc}
	...

080260c0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80260c0:	b580      	push	{r7, lr}
 80260c2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80260c4:	4b04      	ldr	r3, [pc, #16]	; (80260d8 <sys_arch_protect+0x18>)
 80260c6:	681b      	ldr	r3, [r3, #0]
 80260c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80260cc:	4618      	mov	r0, r3
 80260ce:	f7ed ffb7 	bl	8014040 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80260d2:	2301      	movs	r3, #1
}
 80260d4:	4618      	mov	r0, r3
 80260d6:	bd80      	pop	{r7, pc}
 80260d8:	2001d53c 	.word	0x2001d53c

080260dc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80260dc:	b580      	push	{r7, lr}
 80260de:	b082      	sub	sp, #8
 80260e0:	af00      	add	r7, sp, #0
 80260e2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80260e4:	4b04      	ldr	r3, [pc, #16]	; (80260f8 <sys_arch_unprotect+0x1c>)
 80260e6:	681b      	ldr	r3, [r3, #0]
 80260e8:	4618      	mov	r0, r3
 80260ea:	f7ed fff7 	bl	80140dc <osMutexRelease>
}
 80260ee:	bf00      	nop
 80260f0:	3708      	adds	r7, #8
 80260f2:	46bd      	mov	sp, r7
 80260f4:	bd80      	pop	{r7, pc}
 80260f6:	bf00      	nop
 80260f8:	2001d53c 	.word	0x2001d53c

080260fc <atoi>:
 80260fc:	220a      	movs	r2, #10
 80260fe:	2100      	movs	r1, #0
 8026100:	f002 bc4a 	b.w	8028998 <strtol>

08026104 <std>:
 8026104:	2300      	movs	r3, #0
 8026106:	b510      	push	{r4, lr}
 8026108:	4604      	mov	r4, r0
 802610a:	e9c0 3300 	strd	r3, r3, [r0]
 802610e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8026112:	6083      	str	r3, [r0, #8]
 8026114:	8181      	strh	r1, [r0, #12]
 8026116:	6643      	str	r3, [r0, #100]	; 0x64
 8026118:	81c2      	strh	r2, [r0, #14]
 802611a:	6183      	str	r3, [r0, #24]
 802611c:	4619      	mov	r1, r3
 802611e:	2208      	movs	r2, #8
 8026120:	305c      	adds	r0, #92	; 0x5c
 8026122:	f000 fa69 	bl	80265f8 <memset>
 8026126:	4b05      	ldr	r3, [pc, #20]	; (802613c <std+0x38>)
 8026128:	6263      	str	r3, [r4, #36]	; 0x24
 802612a:	4b05      	ldr	r3, [pc, #20]	; (8026140 <std+0x3c>)
 802612c:	62a3      	str	r3, [r4, #40]	; 0x28
 802612e:	4b05      	ldr	r3, [pc, #20]	; (8026144 <std+0x40>)
 8026130:	62e3      	str	r3, [r4, #44]	; 0x2c
 8026132:	4b05      	ldr	r3, [pc, #20]	; (8026148 <std+0x44>)
 8026134:	6224      	str	r4, [r4, #32]
 8026136:	6323      	str	r3, [r4, #48]	; 0x30
 8026138:	bd10      	pop	{r4, pc}
 802613a:	bf00      	nop
 802613c:	08026ff9 	.word	0x08026ff9
 8026140:	0802701f 	.word	0x0802701f
 8026144:	08027057 	.word	0x08027057
 8026148:	0802707b 	.word	0x0802707b

0802614c <_cleanup_r>:
 802614c:	4901      	ldr	r1, [pc, #4]	; (8026154 <_cleanup_r+0x8>)
 802614e:	f000 b8af 	b.w	80262b0 <_fwalk_reent>
 8026152:	bf00      	nop
 8026154:	08029271 	.word	0x08029271

08026158 <__sfmoreglue>:
 8026158:	b570      	push	{r4, r5, r6, lr}
 802615a:	1e4a      	subs	r2, r1, #1
 802615c:	2568      	movs	r5, #104	; 0x68
 802615e:	4355      	muls	r5, r2
 8026160:	460e      	mov	r6, r1
 8026162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8026166:	f000 fd1d 	bl	8026ba4 <_malloc_r>
 802616a:	4604      	mov	r4, r0
 802616c:	b140      	cbz	r0, 8026180 <__sfmoreglue+0x28>
 802616e:	2100      	movs	r1, #0
 8026170:	e9c0 1600 	strd	r1, r6, [r0]
 8026174:	300c      	adds	r0, #12
 8026176:	60a0      	str	r0, [r4, #8]
 8026178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802617c:	f000 fa3c 	bl	80265f8 <memset>
 8026180:	4620      	mov	r0, r4
 8026182:	bd70      	pop	{r4, r5, r6, pc}

08026184 <__sfp_lock_acquire>:
 8026184:	4801      	ldr	r0, [pc, #4]	; (802618c <__sfp_lock_acquire+0x8>)
 8026186:	f000 b9ed 	b.w	8026564 <__retarget_lock_acquire_recursive>
 802618a:	bf00      	nop
 802618c:	2001d548 	.word	0x2001d548

08026190 <__sfp_lock_release>:
 8026190:	4801      	ldr	r0, [pc, #4]	; (8026198 <__sfp_lock_release+0x8>)
 8026192:	f000 b9e9 	b.w	8026568 <__retarget_lock_release_recursive>
 8026196:	bf00      	nop
 8026198:	2001d548 	.word	0x2001d548

0802619c <__sinit_lock_acquire>:
 802619c:	4801      	ldr	r0, [pc, #4]	; (80261a4 <__sinit_lock_acquire+0x8>)
 802619e:	f000 b9e1 	b.w	8026564 <__retarget_lock_acquire_recursive>
 80261a2:	bf00      	nop
 80261a4:	2001d543 	.word	0x2001d543

080261a8 <__sinit_lock_release>:
 80261a8:	4801      	ldr	r0, [pc, #4]	; (80261b0 <__sinit_lock_release+0x8>)
 80261aa:	f000 b9dd 	b.w	8026568 <__retarget_lock_release_recursive>
 80261ae:	bf00      	nop
 80261b0:	2001d543 	.word	0x2001d543

080261b4 <__sinit>:
 80261b4:	b510      	push	{r4, lr}
 80261b6:	4604      	mov	r4, r0
 80261b8:	f7ff fff0 	bl	802619c <__sinit_lock_acquire>
 80261bc:	69a3      	ldr	r3, [r4, #24]
 80261be:	b11b      	cbz	r3, 80261c8 <__sinit+0x14>
 80261c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80261c4:	f7ff bff0 	b.w	80261a8 <__sinit_lock_release>
 80261c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80261cc:	6523      	str	r3, [r4, #80]	; 0x50
 80261ce:	4b13      	ldr	r3, [pc, #76]	; (802621c <__sinit+0x68>)
 80261d0:	4a13      	ldr	r2, [pc, #76]	; (8026220 <__sinit+0x6c>)
 80261d2:	681b      	ldr	r3, [r3, #0]
 80261d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80261d6:	42a3      	cmp	r3, r4
 80261d8:	bf04      	itt	eq
 80261da:	2301      	moveq	r3, #1
 80261dc:	61a3      	streq	r3, [r4, #24]
 80261de:	4620      	mov	r0, r4
 80261e0:	f000 f820 	bl	8026224 <__sfp>
 80261e4:	6060      	str	r0, [r4, #4]
 80261e6:	4620      	mov	r0, r4
 80261e8:	f000 f81c 	bl	8026224 <__sfp>
 80261ec:	60a0      	str	r0, [r4, #8]
 80261ee:	4620      	mov	r0, r4
 80261f0:	f000 f818 	bl	8026224 <__sfp>
 80261f4:	2200      	movs	r2, #0
 80261f6:	60e0      	str	r0, [r4, #12]
 80261f8:	2104      	movs	r1, #4
 80261fa:	6860      	ldr	r0, [r4, #4]
 80261fc:	f7ff ff82 	bl	8026104 <std>
 8026200:	68a0      	ldr	r0, [r4, #8]
 8026202:	2201      	movs	r2, #1
 8026204:	2109      	movs	r1, #9
 8026206:	f7ff ff7d 	bl	8026104 <std>
 802620a:	68e0      	ldr	r0, [r4, #12]
 802620c:	2202      	movs	r2, #2
 802620e:	2112      	movs	r1, #18
 8026210:	f7ff ff78 	bl	8026104 <std>
 8026214:	2301      	movs	r3, #1
 8026216:	61a3      	str	r3, [r4, #24]
 8026218:	e7d2      	b.n	80261c0 <__sinit+0xc>
 802621a:	bf00      	nop
 802621c:	08060a64 	.word	0x08060a64
 8026220:	0802614d 	.word	0x0802614d

08026224 <__sfp>:
 8026224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026226:	4607      	mov	r7, r0
 8026228:	f7ff ffac 	bl	8026184 <__sfp_lock_acquire>
 802622c:	4b1e      	ldr	r3, [pc, #120]	; (80262a8 <__sfp+0x84>)
 802622e:	681e      	ldr	r6, [r3, #0]
 8026230:	69b3      	ldr	r3, [r6, #24]
 8026232:	b913      	cbnz	r3, 802623a <__sfp+0x16>
 8026234:	4630      	mov	r0, r6
 8026236:	f7ff ffbd 	bl	80261b4 <__sinit>
 802623a:	3648      	adds	r6, #72	; 0x48
 802623c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8026240:	3b01      	subs	r3, #1
 8026242:	d503      	bpl.n	802624c <__sfp+0x28>
 8026244:	6833      	ldr	r3, [r6, #0]
 8026246:	b30b      	cbz	r3, 802628c <__sfp+0x68>
 8026248:	6836      	ldr	r6, [r6, #0]
 802624a:	e7f7      	b.n	802623c <__sfp+0x18>
 802624c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8026250:	b9d5      	cbnz	r5, 8026288 <__sfp+0x64>
 8026252:	4b16      	ldr	r3, [pc, #88]	; (80262ac <__sfp+0x88>)
 8026254:	60e3      	str	r3, [r4, #12]
 8026256:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802625a:	6665      	str	r5, [r4, #100]	; 0x64
 802625c:	f000 f980 	bl	8026560 <__retarget_lock_init_recursive>
 8026260:	f7ff ff96 	bl	8026190 <__sfp_lock_release>
 8026264:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8026268:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802626c:	6025      	str	r5, [r4, #0]
 802626e:	61a5      	str	r5, [r4, #24]
 8026270:	2208      	movs	r2, #8
 8026272:	4629      	mov	r1, r5
 8026274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026278:	f000 f9be 	bl	80265f8 <memset>
 802627c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8026284:	4620      	mov	r0, r4
 8026286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026288:	3468      	adds	r4, #104	; 0x68
 802628a:	e7d9      	b.n	8026240 <__sfp+0x1c>
 802628c:	2104      	movs	r1, #4
 802628e:	4638      	mov	r0, r7
 8026290:	f7ff ff62 	bl	8026158 <__sfmoreglue>
 8026294:	4604      	mov	r4, r0
 8026296:	6030      	str	r0, [r6, #0]
 8026298:	2800      	cmp	r0, #0
 802629a:	d1d5      	bne.n	8026248 <__sfp+0x24>
 802629c:	f7ff ff78 	bl	8026190 <__sfp_lock_release>
 80262a0:	230c      	movs	r3, #12
 80262a2:	603b      	str	r3, [r7, #0]
 80262a4:	e7ee      	b.n	8026284 <__sfp+0x60>
 80262a6:	bf00      	nop
 80262a8:	08060a64 	.word	0x08060a64
 80262ac:	ffff0001 	.word	0xffff0001

080262b0 <_fwalk_reent>:
 80262b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80262b4:	4606      	mov	r6, r0
 80262b6:	4688      	mov	r8, r1
 80262b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80262bc:	2700      	movs	r7, #0
 80262be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80262c2:	f1b9 0901 	subs.w	r9, r9, #1
 80262c6:	d505      	bpl.n	80262d4 <_fwalk_reent+0x24>
 80262c8:	6824      	ldr	r4, [r4, #0]
 80262ca:	2c00      	cmp	r4, #0
 80262cc:	d1f7      	bne.n	80262be <_fwalk_reent+0xe>
 80262ce:	4638      	mov	r0, r7
 80262d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80262d4:	89ab      	ldrh	r3, [r5, #12]
 80262d6:	2b01      	cmp	r3, #1
 80262d8:	d907      	bls.n	80262ea <_fwalk_reent+0x3a>
 80262da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80262de:	3301      	adds	r3, #1
 80262e0:	d003      	beq.n	80262ea <_fwalk_reent+0x3a>
 80262e2:	4629      	mov	r1, r5
 80262e4:	4630      	mov	r0, r6
 80262e6:	47c0      	blx	r8
 80262e8:	4307      	orrs	r7, r0
 80262ea:	3568      	adds	r5, #104	; 0x68
 80262ec:	e7e9      	b.n	80262c2 <_fwalk_reent+0x12>
	...

080262f0 <__libc_init_array>:
 80262f0:	b570      	push	{r4, r5, r6, lr}
 80262f2:	4d0d      	ldr	r5, [pc, #52]	; (8026328 <__libc_init_array+0x38>)
 80262f4:	4c0d      	ldr	r4, [pc, #52]	; (802632c <__libc_init_array+0x3c>)
 80262f6:	1b64      	subs	r4, r4, r5
 80262f8:	10a4      	asrs	r4, r4, #2
 80262fa:	2600      	movs	r6, #0
 80262fc:	42a6      	cmp	r6, r4
 80262fe:	d109      	bne.n	8026314 <__libc_init_array+0x24>
 8026300:	4d0b      	ldr	r5, [pc, #44]	; (8026330 <__libc_init_array+0x40>)
 8026302:	4c0c      	ldr	r4, [pc, #48]	; (8026334 <__libc_init_array+0x44>)
 8026304:	f005 fa76 	bl	802b7f4 <_init>
 8026308:	1b64      	subs	r4, r4, r5
 802630a:	10a4      	asrs	r4, r4, #2
 802630c:	2600      	movs	r6, #0
 802630e:	42a6      	cmp	r6, r4
 8026310:	d105      	bne.n	802631e <__libc_init_array+0x2e>
 8026312:	bd70      	pop	{r4, r5, r6, pc}
 8026314:	f855 3b04 	ldr.w	r3, [r5], #4
 8026318:	4798      	blx	r3
 802631a:	3601      	adds	r6, #1
 802631c:	e7ee      	b.n	80262fc <__libc_init_array+0xc>
 802631e:	f855 3b04 	ldr.w	r3, [r5], #4
 8026322:	4798      	blx	r3
 8026324:	3601      	adds	r6, #1
 8026326:	e7f2      	b.n	802630e <__libc_init_array+0x1e>
 8026328:	0806119c 	.word	0x0806119c
 802632c:	0806119c 	.word	0x0806119c
 8026330:	0806119c 	.word	0x0806119c
 8026334:	080611a0 	.word	0x080611a0

08026338 <localtime>:
 8026338:	b538      	push	{r3, r4, r5, lr}
 802633a:	4b0b      	ldr	r3, [pc, #44]	; (8026368 <localtime+0x30>)
 802633c:	681d      	ldr	r5, [r3, #0]
 802633e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8026340:	4604      	mov	r4, r0
 8026342:	b953      	cbnz	r3, 802635a <localtime+0x22>
 8026344:	2024      	movs	r0, #36	; 0x24
 8026346:	f000 f911 	bl	802656c <malloc>
 802634a:	4602      	mov	r2, r0
 802634c:	63e8      	str	r0, [r5, #60]	; 0x3c
 802634e:	b920      	cbnz	r0, 802635a <localtime+0x22>
 8026350:	4b06      	ldr	r3, [pc, #24]	; (802636c <localtime+0x34>)
 8026352:	4807      	ldr	r0, [pc, #28]	; (8026370 <localtime+0x38>)
 8026354:	2132      	movs	r1, #50	; 0x32
 8026356:	f002 febd 	bl	80290d4 <__assert_func>
 802635a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 802635c:	4620      	mov	r0, r4
 802635e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026362:	f000 b807 	b.w	8026374 <localtime_r>
 8026366:	bf00      	nop
 8026368:	20000064 	.word	0x20000064
 802636c:	08060a68 	.word	0x08060a68
 8026370:	08060a7f 	.word	0x08060a7f

08026374 <localtime_r>:
 8026374:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8026378:	4607      	mov	r7, r0
 802637a:	9101      	str	r1, [sp, #4]
 802637c:	f003 fb78 	bl	8029a70 <__gettzinfo>
 8026380:	9901      	ldr	r1, [sp, #4]
 8026382:	4680      	mov	r8, r0
 8026384:	4638      	mov	r0, r7
 8026386:	f003 fb77 	bl	8029a78 <gmtime_r>
 802638a:	6943      	ldr	r3, [r0, #20]
 802638c:	079a      	lsls	r2, r3, #30
 802638e:	4604      	mov	r4, r0
 8026390:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8026394:	d105      	bne.n	80263a2 <localtime_r+0x2e>
 8026396:	2264      	movs	r2, #100	; 0x64
 8026398:	fb96 f3f2 	sdiv	r3, r6, r2
 802639c:	fb02 6313 	mls	r3, r2, r3, r6
 80263a0:	bb7b      	cbnz	r3, 8026402 <localtime_r+0x8e>
 80263a2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80263a6:	fb96 f5f3 	sdiv	r5, r6, r3
 80263aa:	fb03 6515 	mls	r5, r3, r5, r6
 80263ae:	fab5 f585 	clz	r5, r5
 80263b2:	096d      	lsrs	r5, r5, #5
 80263b4:	4b68      	ldr	r3, [pc, #416]	; (8026558 <localtime_r+0x1e4>)
 80263b6:	2230      	movs	r2, #48	; 0x30
 80263b8:	fb02 3505 	mla	r5, r2, r5, r3
 80263bc:	f002 fc26 	bl	8028c0c <__tz_lock>
 80263c0:	f002 fc30 	bl	8028c24 <_tzset_unlocked>
 80263c4:	4b65      	ldr	r3, [pc, #404]	; (802655c <localtime_r+0x1e8>)
 80263c6:	681b      	ldr	r3, [r3, #0]
 80263c8:	b353      	cbz	r3, 8026420 <localtime_r+0xac>
 80263ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80263ce:	42b3      	cmp	r3, r6
 80263d0:	d119      	bne.n	8026406 <localtime_r+0x92>
 80263d2:	f8d8 1000 	ldr.w	r1, [r8]
 80263d6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80263da:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80263de:	b9d1      	cbnz	r1, 8026416 <localtime_r+0xa2>
 80263e0:	4296      	cmp	r6, r2
 80263e2:	eb77 0303 	sbcs.w	r3, r7, r3
 80263e6:	da23      	bge.n	8026430 <localtime_r+0xbc>
 80263e8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80263ec:	4296      	cmp	r6, r2
 80263ee:	eb77 0303 	sbcs.w	r3, r7, r3
 80263f2:	bfb4      	ite	lt
 80263f4:	2301      	movlt	r3, #1
 80263f6:	2300      	movge	r3, #0
 80263f8:	6223      	str	r3, [r4, #32]
 80263fa:	db1b      	blt.n	8026434 <localtime_r+0xc0>
 80263fc:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8026400:	e01a      	b.n	8026438 <localtime_r+0xc4>
 8026402:	2501      	movs	r5, #1
 8026404:	e7d6      	b.n	80263b4 <localtime_r+0x40>
 8026406:	4630      	mov	r0, r6
 8026408:	f002 fb58 	bl	8028abc <__tzcalc_limits>
 802640c:	2800      	cmp	r0, #0
 802640e:	d1e0      	bne.n	80263d2 <localtime_r+0x5e>
 8026410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8026414:	e004      	b.n	8026420 <localtime_r+0xac>
 8026416:	4296      	cmp	r6, r2
 8026418:	eb77 0303 	sbcs.w	r3, r7, r3
 802641c:	da02      	bge.n	8026424 <localtime_r+0xb0>
 802641e:	2300      	movs	r3, #0
 8026420:	6223      	str	r3, [r4, #32]
 8026422:	e7eb      	b.n	80263fc <localtime_r+0x88>
 8026424:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8026428:	4296      	cmp	r6, r2
 802642a:	eb77 0303 	sbcs.w	r3, r7, r3
 802642e:	daf6      	bge.n	802641e <localtime_r+0xaa>
 8026430:	2301      	movs	r3, #1
 8026432:	6223      	str	r3, [r4, #32]
 8026434:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8026438:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 802643c:	203c      	movs	r0, #60	; 0x3c
 802643e:	fb91 f6f3 	sdiv	r6, r1, r3
 8026442:	fb03 1316 	mls	r3, r3, r6, r1
 8026446:	6861      	ldr	r1, [r4, #4]
 8026448:	fb93 f2f0 	sdiv	r2, r3, r0
 802644c:	fb00 3012 	mls	r0, r0, r2, r3
 8026450:	6823      	ldr	r3, [r4, #0]
 8026452:	1a89      	subs	r1, r1, r2
 8026454:	68a2      	ldr	r2, [r4, #8]
 8026456:	6061      	str	r1, [r4, #4]
 8026458:	1a1b      	subs	r3, r3, r0
 802645a:	1b92      	subs	r2, r2, r6
 802645c:	2b3b      	cmp	r3, #59	; 0x3b
 802645e:	6023      	str	r3, [r4, #0]
 8026460:	60a2      	str	r2, [r4, #8]
 8026462:	dd35      	ble.n	80264d0 <localtime_r+0x15c>
 8026464:	3101      	adds	r1, #1
 8026466:	6061      	str	r1, [r4, #4]
 8026468:	3b3c      	subs	r3, #60	; 0x3c
 802646a:	6023      	str	r3, [r4, #0]
 802646c:	6863      	ldr	r3, [r4, #4]
 802646e:	2b3b      	cmp	r3, #59	; 0x3b
 8026470:	dd34      	ble.n	80264dc <localtime_r+0x168>
 8026472:	3201      	adds	r2, #1
 8026474:	60a2      	str	r2, [r4, #8]
 8026476:	3b3c      	subs	r3, #60	; 0x3c
 8026478:	6063      	str	r3, [r4, #4]
 802647a:	68a3      	ldr	r3, [r4, #8]
 802647c:	2b17      	cmp	r3, #23
 802647e:	dd33      	ble.n	80264e8 <localtime_r+0x174>
 8026480:	69e2      	ldr	r2, [r4, #28]
 8026482:	3201      	adds	r2, #1
 8026484:	61e2      	str	r2, [r4, #28]
 8026486:	69a2      	ldr	r2, [r4, #24]
 8026488:	3201      	adds	r2, #1
 802648a:	2a06      	cmp	r2, #6
 802648c:	bfc8      	it	gt
 802648e:	2200      	movgt	r2, #0
 8026490:	61a2      	str	r2, [r4, #24]
 8026492:	68e2      	ldr	r2, [r4, #12]
 8026494:	3b18      	subs	r3, #24
 8026496:	3201      	adds	r2, #1
 8026498:	60a3      	str	r3, [r4, #8]
 802649a:	6923      	ldr	r3, [r4, #16]
 802649c:	60e2      	str	r2, [r4, #12]
 802649e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80264a2:	428a      	cmp	r2, r1
 80264a4:	dd0e      	ble.n	80264c4 <localtime_r+0x150>
 80264a6:	2b0b      	cmp	r3, #11
 80264a8:	eba2 0201 	sub.w	r2, r2, r1
 80264ac:	60e2      	str	r2, [r4, #12]
 80264ae:	f103 0201 	add.w	r2, r3, #1
 80264b2:	bf09      	itett	eq
 80264b4:	6963      	ldreq	r3, [r4, #20]
 80264b6:	6122      	strne	r2, [r4, #16]
 80264b8:	2200      	moveq	r2, #0
 80264ba:	3301      	addeq	r3, #1
 80264bc:	bf02      	ittt	eq
 80264be:	6122      	streq	r2, [r4, #16]
 80264c0:	6163      	streq	r3, [r4, #20]
 80264c2:	61e2      	streq	r2, [r4, #28]
 80264c4:	f002 fba8 	bl	8028c18 <__tz_unlock>
 80264c8:	4620      	mov	r0, r4
 80264ca:	b002      	add	sp, #8
 80264cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80264d0:	2b00      	cmp	r3, #0
 80264d2:	dacb      	bge.n	802646c <localtime_r+0xf8>
 80264d4:	3901      	subs	r1, #1
 80264d6:	6061      	str	r1, [r4, #4]
 80264d8:	333c      	adds	r3, #60	; 0x3c
 80264da:	e7c6      	b.n	802646a <localtime_r+0xf6>
 80264dc:	2b00      	cmp	r3, #0
 80264de:	dacc      	bge.n	802647a <localtime_r+0x106>
 80264e0:	3a01      	subs	r2, #1
 80264e2:	60a2      	str	r2, [r4, #8]
 80264e4:	333c      	adds	r3, #60	; 0x3c
 80264e6:	e7c7      	b.n	8026478 <localtime_r+0x104>
 80264e8:	2b00      	cmp	r3, #0
 80264ea:	daeb      	bge.n	80264c4 <localtime_r+0x150>
 80264ec:	69e2      	ldr	r2, [r4, #28]
 80264ee:	3a01      	subs	r2, #1
 80264f0:	61e2      	str	r2, [r4, #28]
 80264f2:	69a2      	ldr	r2, [r4, #24]
 80264f4:	3a01      	subs	r2, #1
 80264f6:	bf48      	it	mi
 80264f8:	2206      	movmi	r2, #6
 80264fa:	61a2      	str	r2, [r4, #24]
 80264fc:	68e2      	ldr	r2, [r4, #12]
 80264fe:	3318      	adds	r3, #24
 8026500:	3a01      	subs	r2, #1
 8026502:	60e2      	str	r2, [r4, #12]
 8026504:	60a3      	str	r3, [r4, #8]
 8026506:	2a00      	cmp	r2, #0
 8026508:	d1dc      	bne.n	80264c4 <localtime_r+0x150>
 802650a:	6923      	ldr	r3, [r4, #16]
 802650c:	3b01      	subs	r3, #1
 802650e:	d405      	bmi.n	802651c <localtime_r+0x1a8>
 8026510:	6123      	str	r3, [r4, #16]
 8026512:	6923      	ldr	r3, [r4, #16]
 8026514:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8026518:	60e3      	str	r3, [r4, #12]
 802651a:	e7d3      	b.n	80264c4 <localtime_r+0x150>
 802651c:	230b      	movs	r3, #11
 802651e:	6123      	str	r3, [r4, #16]
 8026520:	6963      	ldr	r3, [r4, #20]
 8026522:	1e5a      	subs	r2, r3, #1
 8026524:	6162      	str	r2, [r4, #20]
 8026526:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 802652a:	0793      	lsls	r3, r2, #30
 802652c:	d105      	bne.n	802653a <localtime_r+0x1c6>
 802652e:	2164      	movs	r1, #100	; 0x64
 8026530:	fb92 f3f1 	sdiv	r3, r2, r1
 8026534:	fb01 2313 	mls	r3, r1, r3, r2
 8026538:	b963      	cbnz	r3, 8026554 <localtime_r+0x1e0>
 802653a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 802653e:	fb92 f3f1 	sdiv	r3, r2, r1
 8026542:	fb01 2313 	mls	r3, r1, r3, r2
 8026546:	fab3 f383 	clz	r3, r3
 802654a:	095b      	lsrs	r3, r3, #5
 802654c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8026550:	61e3      	str	r3, [r4, #28]
 8026552:	e7de      	b.n	8026512 <localtime_r+0x19e>
 8026554:	2301      	movs	r3, #1
 8026556:	e7f9      	b.n	802654c <localtime_r+0x1d8>
 8026558:	08060b40 	.word	0x08060b40
 802655c:	20005b88 	.word	0x20005b88

08026560 <__retarget_lock_init_recursive>:
 8026560:	4770      	bx	lr

08026562 <__retarget_lock_acquire>:
 8026562:	4770      	bx	lr

08026564 <__retarget_lock_acquire_recursive>:
 8026564:	4770      	bx	lr

08026566 <__retarget_lock_release>:
 8026566:	4770      	bx	lr

08026568 <__retarget_lock_release_recursive>:
 8026568:	4770      	bx	lr
	...

0802656c <malloc>:
 802656c:	4b02      	ldr	r3, [pc, #8]	; (8026578 <malloc+0xc>)
 802656e:	4601      	mov	r1, r0
 8026570:	6818      	ldr	r0, [r3, #0]
 8026572:	f000 bb17 	b.w	8026ba4 <_malloc_r>
 8026576:	bf00      	nop
 8026578:	20000064 	.word	0x20000064

0802657c <free>:
 802657c:	4b02      	ldr	r3, [pc, #8]	; (8026588 <free+0xc>)
 802657e:	4601      	mov	r1, r0
 8026580:	6818      	ldr	r0, [r3, #0]
 8026582:	f000 babf 	b.w	8026b04 <_free_r>
 8026586:	bf00      	nop
 8026588:	20000064 	.word	0x20000064

0802658c <memcmp>:
 802658c:	b530      	push	{r4, r5, lr}
 802658e:	3901      	subs	r1, #1
 8026590:	2400      	movs	r4, #0
 8026592:	42a2      	cmp	r2, r4
 8026594:	d101      	bne.n	802659a <memcmp+0xe>
 8026596:	2000      	movs	r0, #0
 8026598:	e005      	b.n	80265a6 <memcmp+0x1a>
 802659a:	5d03      	ldrb	r3, [r0, r4]
 802659c:	3401      	adds	r4, #1
 802659e:	5d0d      	ldrb	r5, [r1, r4]
 80265a0:	42ab      	cmp	r3, r5
 80265a2:	d0f6      	beq.n	8026592 <memcmp+0x6>
 80265a4:	1b58      	subs	r0, r3, r5
 80265a6:	bd30      	pop	{r4, r5, pc}

080265a8 <memcpy>:
 80265a8:	440a      	add	r2, r1
 80265aa:	4291      	cmp	r1, r2
 80265ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80265b0:	d100      	bne.n	80265b4 <memcpy+0xc>
 80265b2:	4770      	bx	lr
 80265b4:	b510      	push	{r4, lr}
 80265b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80265ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80265be:	4291      	cmp	r1, r2
 80265c0:	d1f9      	bne.n	80265b6 <memcpy+0xe>
 80265c2:	bd10      	pop	{r4, pc}

080265c4 <memmove>:
 80265c4:	4288      	cmp	r0, r1
 80265c6:	b510      	push	{r4, lr}
 80265c8:	eb01 0402 	add.w	r4, r1, r2
 80265cc:	d902      	bls.n	80265d4 <memmove+0x10>
 80265ce:	4284      	cmp	r4, r0
 80265d0:	4623      	mov	r3, r4
 80265d2:	d807      	bhi.n	80265e4 <memmove+0x20>
 80265d4:	1e43      	subs	r3, r0, #1
 80265d6:	42a1      	cmp	r1, r4
 80265d8:	d008      	beq.n	80265ec <memmove+0x28>
 80265da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80265de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80265e2:	e7f8      	b.n	80265d6 <memmove+0x12>
 80265e4:	4402      	add	r2, r0
 80265e6:	4601      	mov	r1, r0
 80265e8:	428a      	cmp	r2, r1
 80265ea:	d100      	bne.n	80265ee <memmove+0x2a>
 80265ec:	bd10      	pop	{r4, pc}
 80265ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80265f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80265f6:	e7f7      	b.n	80265e8 <memmove+0x24>

080265f8 <memset>:
 80265f8:	4402      	add	r2, r0
 80265fa:	4603      	mov	r3, r0
 80265fc:	4293      	cmp	r3, r2
 80265fe:	d100      	bne.n	8026602 <memset+0xa>
 8026600:	4770      	bx	lr
 8026602:	f803 1b01 	strb.w	r1, [r3], #1
 8026606:	e7f9      	b.n	80265fc <memset+0x4>

08026608 <validate_structure>:
 8026608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802660a:	6801      	ldr	r1, [r0, #0]
 802660c:	293b      	cmp	r1, #59	; 0x3b
 802660e:	4604      	mov	r4, r0
 8026610:	d911      	bls.n	8026636 <validate_structure+0x2e>
 8026612:	223c      	movs	r2, #60	; 0x3c
 8026614:	4668      	mov	r0, sp
 8026616:	f002 fd8b 	bl	8029130 <div>
 802661a:	9a01      	ldr	r2, [sp, #4]
 802661c:	6863      	ldr	r3, [r4, #4]
 802661e:	9900      	ldr	r1, [sp, #0]
 8026620:	2a00      	cmp	r2, #0
 8026622:	440b      	add	r3, r1
 8026624:	6063      	str	r3, [r4, #4]
 8026626:	bfbb      	ittet	lt
 8026628:	323c      	addlt	r2, #60	; 0x3c
 802662a:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 802662e:	6022      	strge	r2, [r4, #0]
 8026630:	6022      	strlt	r2, [r4, #0]
 8026632:	bfb8      	it	lt
 8026634:	6063      	strlt	r3, [r4, #4]
 8026636:	6861      	ldr	r1, [r4, #4]
 8026638:	293b      	cmp	r1, #59	; 0x3b
 802663a:	d911      	bls.n	8026660 <validate_structure+0x58>
 802663c:	223c      	movs	r2, #60	; 0x3c
 802663e:	4668      	mov	r0, sp
 8026640:	f002 fd76 	bl	8029130 <div>
 8026644:	9a01      	ldr	r2, [sp, #4]
 8026646:	68a3      	ldr	r3, [r4, #8]
 8026648:	9900      	ldr	r1, [sp, #0]
 802664a:	2a00      	cmp	r2, #0
 802664c:	440b      	add	r3, r1
 802664e:	60a3      	str	r3, [r4, #8]
 8026650:	bfbb      	ittet	lt
 8026652:	323c      	addlt	r2, #60	; 0x3c
 8026654:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8026658:	6062      	strge	r2, [r4, #4]
 802665a:	6062      	strlt	r2, [r4, #4]
 802665c:	bfb8      	it	lt
 802665e:	60a3      	strlt	r3, [r4, #8]
 8026660:	68a1      	ldr	r1, [r4, #8]
 8026662:	2917      	cmp	r1, #23
 8026664:	d911      	bls.n	802668a <validate_structure+0x82>
 8026666:	2218      	movs	r2, #24
 8026668:	4668      	mov	r0, sp
 802666a:	f002 fd61 	bl	8029130 <div>
 802666e:	9a01      	ldr	r2, [sp, #4]
 8026670:	68e3      	ldr	r3, [r4, #12]
 8026672:	9900      	ldr	r1, [sp, #0]
 8026674:	2a00      	cmp	r2, #0
 8026676:	440b      	add	r3, r1
 8026678:	60e3      	str	r3, [r4, #12]
 802667a:	bfbb      	ittet	lt
 802667c:	3218      	addlt	r2, #24
 802667e:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8026682:	60a2      	strge	r2, [r4, #8]
 8026684:	60a2      	strlt	r2, [r4, #8]
 8026686:	bfb8      	it	lt
 8026688:	60e3      	strlt	r3, [r4, #12]
 802668a:	6921      	ldr	r1, [r4, #16]
 802668c:	290b      	cmp	r1, #11
 802668e:	d911      	bls.n	80266b4 <validate_structure+0xac>
 8026690:	220c      	movs	r2, #12
 8026692:	4668      	mov	r0, sp
 8026694:	f002 fd4c 	bl	8029130 <div>
 8026698:	9a01      	ldr	r2, [sp, #4]
 802669a:	6963      	ldr	r3, [r4, #20]
 802669c:	9900      	ldr	r1, [sp, #0]
 802669e:	2a00      	cmp	r2, #0
 80266a0:	440b      	add	r3, r1
 80266a2:	6163      	str	r3, [r4, #20]
 80266a4:	bfbb      	ittet	lt
 80266a6:	320c      	addlt	r2, #12
 80266a8:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 80266ac:	6122      	strge	r2, [r4, #16]
 80266ae:	6122      	strlt	r2, [r4, #16]
 80266b0:	bfb8      	it	lt
 80266b2:	6163      	strlt	r3, [r4, #20]
 80266b4:	6963      	ldr	r3, [r4, #20]
 80266b6:	0799      	lsls	r1, r3, #30
 80266b8:	d120      	bne.n	80266fc <validate_structure+0xf4>
 80266ba:	2164      	movs	r1, #100	; 0x64
 80266bc:	fb93 f2f1 	sdiv	r2, r3, r1
 80266c0:	fb01 3212 	mls	r2, r1, r2, r3
 80266c4:	b9e2      	cbnz	r2, 8026700 <validate_structure+0xf8>
 80266c6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80266ca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80266ce:	fb93 f2f1 	sdiv	r2, r3, r1
 80266d2:	fb01 3312 	mls	r3, r1, r2, r3
 80266d6:	2b00      	cmp	r3, #0
 80266d8:	bf14      	ite	ne
 80266da:	231c      	movne	r3, #28
 80266dc:	231d      	moveq	r3, #29
 80266de:	68e2      	ldr	r2, [r4, #12]
 80266e0:	2a00      	cmp	r2, #0
 80266e2:	dc0f      	bgt.n	8026704 <validate_structure+0xfc>
 80266e4:	4f33      	ldr	r7, [pc, #204]	; (80267b4 <validate_structure+0x1ac>)
 80266e6:	260b      	movs	r6, #11
 80266e8:	2064      	movs	r0, #100	; 0x64
 80266ea:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80266ee:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80266f2:	f1bc 0f00 	cmp.w	ip, #0
 80266f6:	dd31      	ble.n	802675c <validate_structure+0x154>
 80266f8:	b003      	add	sp, #12
 80266fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80266fc:	231c      	movs	r3, #28
 80266fe:	e7ee      	b.n	80266de <validate_structure+0xd6>
 8026700:	231d      	movs	r3, #29
 8026702:	e7ec      	b.n	80266de <validate_structure+0xd6>
 8026704:	4f2b      	ldr	r7, [pc, #172]	; (80267b4 <validate_structure+0x1ac>)
 8026706:	f04f 0c00 	mov.w	ip, #0
 802670a:	2564      	movs	r5, #100	; 0x64
 802670c:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8026710:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8026714:	2a01      	cmp	r2, #1
 8026716:	bf14      	ite	ne
 8026718:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 802671c:	4618      	moveq	r0, r3
 802671e:	4281      	cmp	r1, r0
 8026720:	ddea      	ble.n	80266f8 <validate_structure+0xf0>
 8026722:	3201      	adds	r2, #1
 8026724:	1a09      	subs	r1, r1, r0
 8026726:	2a0c      	cmp	r2, #12
 8026728:	60e1      	str	r1, [r4, #12]
 802672a:	6122      	str	r2, [r4, #16]
 802672c:	d1f0      	bne.n	8026710 <validate_structure+0x108>
 802672e:	6963      	ldr	r3, [r4, #20]
 8026730:	1c5a      	adds	r2, r3, #1
 8026732:	0791      	lsls	r1, r2, #30
 8026734:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8026738:	d137      	bne.n	80267aa <validate_structure+0x1a2>
 802673a:	fb92 f1f5 	sdiv	r1, r2, r5
 802673e:	fb05 2211 	mls	r2, r5, r1, r2
 8026742:	2a00      	cmp	r2, #0
 8026744:	d133      	bne.n	80267ae <validate_structure+0x1a6>
 8026746:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 802674a:	fb93 f2f6 	sdiv	r2, r3, r6
 802674e:	fb06 3312 	mls	r3, r6, r2, r3
 8026752:	2b00      	cmp	r3, #0
 8026754:	bf14      	ite	ne
 8026756:	231c      	movne	r3, #28
 8026758:	231d      	moveq	r3, #29
 802675a:	e7d9      	b.n	8026710 <validate_structure+0x108>
 802675c:	6921      	ldr	r1, [r4, #16]
 802675e:	3901      	subs	r1, #1
 8026760:	6121      	str	r1, [r4, #16]
 8026762:	3101      	adds	r1, #1
 8026764:	d114      	bne.n	8026790 <validate_structure+0x188>
 8026766:	6963      	ldr	r3, [r4, #20]
 8026768:	1e59      	subs	r1, r3, #1
 802676a:	078a      	lsls	r2, r1, #30
 802676c:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8026770:	d117      	bne.n	80267a2 <validate_structure+0x19a>
 8026772:	fb91 f2f0 	sdiv	r2, r1, r0
 8026776:	fb00 1112 	mls	r1, r0, r2, r1
 802677a:	b9a1      	cbnz	r1, 80267a6 <validate_structure+0x19e>
 802677c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8026780:	fb93 f2f5 	sdiv	r2, r3, r5
 8026784:	fb05 3312 	mls	r3, r5, r2, r3
 8026788:	2b00      	cmp	r3, #0
 802678a:	bf14      	ite	ne
 802678c:	231c      	movne	r3, #28
 802678e:	231d      	moveq	r3, #29
 8026790:	6922      	ldr	r2, [r4, #16]
 8026792:	2a01      	cmp	r2, #1
 8026794:	bf14      	ite	ne
 8026796:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 802679a:	461a      	moveq	r2, r3
 802679c:	4462      	add	r2, ip
 802679e:	60e2      	str	r2, [r4, #12]
 80267a0:	e7a5      	b.n	80266ee <validate_structure+0xe6>
 80267a2:	231c      	movs	r3, #28
 80267a4:	e7f4      	b.n	8026790 <validate_structure+0x188>
 80267a6:	231d      	movs	r3, #29
 80267a8:	e7f2      	b.n	8026790 <validate_structure+0x188>
 80267aa:	231c      	movs	r3, #28
 80267ac:	e7b0      	b.n	8026710 <validate_structure+0x108>
 80267ae:	231d      	movs	r3, #29
 80267b0:	e7ae      	b.n	8026710 <validate_structure+0x108>
 80267b2:	bf00      	nop
 80267b4:	08060ae0 	.word	0x08060ae0

080267b8 <mktime>:
 80267b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80267bc:	b08b      	sub	sp, #44	; 0x2c
 80267be:	4605      	mov	r5, r0
 80267c0:	f003 f956 	bl	8029a70 <__gettzinfo>
 80267c4:	4607      	mov	r7, r0
 80267c6:	4628      	mov	r0, r5
 80267c8:	f7ff ff1e 	bl	8026608 <validate_structure>
 80267cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80267d0:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 80267d4:	68a8      	ldr	r0, [r5, #8]
 80267d6:	696e      	ldr	r6, [r5, #20]
 80267d8:	fb0a 2303 	mla	r3, sl, r3, r2
 80267dc:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 80267e0:	fb0a 3a00 	mla	sl, sl, r0, r3
 80267e4:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 80267e8:	4ac3      	ldr	r2, [pc, #780]	; (8026af8 <mktime+0x340>)
 80267ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80267ee:	3c01      	subs	r4, #1
 80267f0:	2b01      	cmp	r3, #1
 80267f2:	4414      	add	r4, r2
 80267f4:	dd11      	ble.n	802681a <mktime+0x62>
 80267f6:	07b1      	lsls	r1, r6, #30
 80267f8:	d10f      	bne.n	802681a <mktime+0x62>
 80267fa:	2264      	movs	r2, #100	; 0x64
 80267fc:	fb96 f3f2 	sdiv	r3, r6, r2
 8026800:	fb02 6313 	mls	r3, r2, r3, r6
 8026804:	b943      	cbnz	r3, 8026818 <mktime+0x60>
 8026806:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 802680a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802680e:	fb91 f3f2 	sdiv	r3, r1, r2
 8026812:	fb02 1313 	mls	r3, r2, r3, r1
 8026816:	b903      	cbnz	r3, 802681a <mktime+0x62>
 8026818:	3401      	adds	r4, #1
 802681a:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 802681e:	3310      	adds	r3, #16
 8026820:	f644 6220 	movw	r2, #20000	; 0x4e20
 8026824:	4293      	cmp	r3, r2
 8026826:	61ec      	str	r4, [r5, #28]
 8026828:	f200 8161 	bhi.w	8026aee <mktime+0x336>
 802682c:	2e46      	cmp	r6, #70	; 0x46
 802682e:	dd77      	ble.n	8026920 <mktime+0x168>
 8026830:	2346      	movs	r3, #70	; 0x46
 8026832:	f240 1e6d 	movw	lr, #365	; 0x16d
 8026836:	2164      	movs	r1, #100	; 0x64
 8026838:	f44f 70c8 	mov.w	r0, #400	; 0x190
 802683c:	079a      	lsls	r2, r3, #30
 802683e:	d169      	bne.n	8026914 <mktime+0x15c>
 8026840:	fb93 f2f1 	sdiv	r2, r3, r1
 8026844:	fb01 3212 	mls	r2, r1, r2, r3
 8026848:	2a00      	cmp	r2, #0
 802684a:	d166      	bne.n	802691a <mktime+0x162>
 802684c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8026850:	fb9c f2f0 	sdiv	r2, ip, r0
 8026854:	fb00 c212 	mls	r2, r0, r2, ip
 8026858:	2a00      	cmp	r2, #0
 802685a:	bf14      	ite	ne
 802685c:	4672      	movne	r2, lr
 802685e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8026862:	3301      	adds	r3, #1
 8026864:	429e      	cmp	r6, r3
 8026866:	4414      	add	r4, r2
 8026868:	d1e8      	bne.n	802683c <mktime+0x84>
 802686a:	4ba4      	ldr	r3, [pc, #656]	; (8026afc <mktime+0x344>)
 802686c:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8026870:	fbc3 ab04 	smlal	sl, fp, r3, r4
 8026874:	f002 f9ca 	bl	8028c0c <__tz_lock>
 8026878:	f002 f9d4 	bl	8028c24 <_tzset_unlocked>
 802687c:	4ba0      	ldr	r3, [pc, #640]	; (8026b00 <mktime+0x348>)
 802687e:	f8d3 9000 	ldr.w	r9, [r3]
 8026882:	f1b9 0f00 	cmp.w	r9, #0
 8026886:	d03f      	beq.n	8026908 <mktime+0x150>
 8026888:	f8d5 9020 	ldr.w	r9, [r5, #32]
 802688c:	6968      	ldr	r0, [r5, #20]
 802688e:	687b      	ldr	r3, [r7, #4]
 8026890:	f1b9 0f01 	cmp.w	r9, #1
 8026894:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8026898:	46c8      	mov	r8, r9
 802689a:	bfa8      	it	ge
 802689c:	f04f 0801 	movge.w	r8, #1
 80268a0:	4283      	cmp	r3, r0
 80268a2:	d17f      	bne.n	80269a4 <mktime+0x1ec>
 80268a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80268a6:	4619      	mov	r1, r3
 80268a8:	17da      	asrs	r2, r3, #31
 80268aa:	e9cd 1200 	strd	r1, r2, [sp]
 80268ae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80268b2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80268b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80268ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80268bc:	1a80      	subs	r0, r0, r2
 80268be:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 80268c2:	4582      	cmp	sl, r0
 80268c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80268c8:	eb7b 0101 	sbcs.w	r1, fp, r1
 80268cc:	da71      	bge.n	80269b2 <mktime+0x1fa>
 80268ce:	9800      	ldr	r0, [sp, #0]
 80268d0:	6a39      	ldr	r1, [r7, #32]
 80268d2:	1a09      	subs	r1, r1, r0
 80268d4:	9104      	str	r1, [sp, #16]
 80268d6:	9801      	ldr	r0, [sp, #4]
 80268d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80268da:	eb61 0100 	sbc.w	r1, r1, r0
 80268de:	9105      	str	r1, [sp, #20]
 80268e0:	6839      	ldr	r1, [r7, #0]
 80268e2:	2900      	cmp	r1, #0
 80268e4:	d075      	beq.n	80269d2 <mktime+0x21a>
 80268e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80268ea:	4582      	cmp	sl, r0
 80268ec:	eb7b 0101 	sbcs.w	r1, fp, r1
 80268f0:	db05      	blt.n	80268fe <mktime+0x146>
 80268f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80268f6:	4582      	cmp	sl, r0
 80268f8:	eb7b 0101 	sbcs.w	r1, fp, r1
 80268fc:	db6f      	blt.n	80269de <mktime+0x226>
 80268fe:	f1b9 0f00 	cmp.w	r9, #0
 8026902:	f04f 0900 	mov.w	r9, #0
 8026906:	da6f      	bge.n	80269e8 <mktime+0x230>
 8026908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802690a:	eb1a 0a03 	adds.w	sl, sl, r3
 802690e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8026912:	e0ae      	b.n	8026a72 <mktime+0x2ba>
 8026914:	f240 126d 	movw	r2, #365	; 0x16d
 8026918:	e7a3      	b.n	8026862 <mktime+0xaa>
 802691a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 802691e:	e7a0      	b.n	8026862 <mktime+0xaa>
 8026920:	d0a3      	beq.n	802686a <mktime+0xb2>
 8026922:	2345      	movs	r3, #69	; 0x45
 8026924:	f240 1e6d 	movw	lr, #365	; 0x16d
 8026928:	2164      	movs	r1, #100	; 0x64
 802692a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 802692e:	e012      	b.n	8026956 <mktime+0x19e>
 8026930:	bb62      	cbnz	r2, 802698c <mktime+0x1d4>
 8026932:	fb93 f2f1 	sdiv	r2, r3, r1
 8026936:	fb01 3212 	mls	r2, r1, r2, r3
 802693a:	bb52      	cbnz	r2, 8026992 <mktime+0x1da>
 802693c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8026940:	fb9c f2f0 	sdiv	r2, ip, r0
 8026944:	fb00 c212 	mls	r2, r0, r2, ip
 8026948:	2a00      	cmp	r2, #0
 802694a:	bf14      	ite	ne
 802694c:	4672      	movne	r2, lr
 802694e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8026952:	1aa4      	subs	r4, r4, r2
 8026954:	3b01      	subs	r3, #1
 8026956:	429e      	cmp	r6, r3
 8026958:	f003 0203 	and.w	r2, r3, #3
 802695c:	dbe8      	blt.n	8026930 <mktime+0x178>
 802695e:	b9da      	cbnz	r2, 8026998 <mktime+0x1e0>
 8026960:	2264      	movs	r2, #100	; 0x64
 8026962:	fb96 f3f2 	sdiv	r3, r6, r2
 8026966:	fb02 6313 	mls	r3, r2, r3, r6
 802696a:	b9c3      	cbnz	r3, 802699e <mktime+0x1e6>
 802696c:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8026970:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8026974:	fb91 f3f2 	sdiv	r3, r1, r2
 8026978:	fb02 1313 	mls	r3, r2, r3, r1
 802697c:	2b00      	cmp	r3, #0
 802697e:	f240 136d 	movw	r3, #365	; 0x16d
 8026982:	bf08      	it	eq
 8026984:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8026988:	1ae4      	subs	r4, r4, r3
 802698a:	e76e      	b.n	802686a <mktime+0xb2>
 802698c:	f240 126d 	movw	r2, #365	; 0x16d
 8026990:	e7df      	b.n	8026952 <mktime+0x19a>
 8026992:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8026996:	e7dc      	b.n	8026952 <mktime+0x19a>
 8026998:	f240 136d 	movw	r3, #365	; 0x16d
 802699c:	e7f4      	b.n	8026988 <mktime+0x1d0>
 802699e:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80269a2:	e7f1      	b.n	8026988 <mktime+0x1d0>
 80269a4:	f002 f88a 	bl	8028abc <__tzcalc_limits>
 80269a8:	2800      	cmp	r0, #0
 80269aa:	f47f af7b 	bne.w	80268a4 <mktime+0xec>
 80269ae:	46c1      	mov	r9, r8
 80269b0:	e054      	b.n	8026a5c <mktime+0x2a4>
 80269b2:	9800      	ldr	r0, [sp, #0]
 80269b4:	9902      	ldr	r1, [sp, #8]
 80269b6:	1a09      	subs	r1, r1, r0
 80269b8:	9108      	str	r1, [sp, #32]
 80269ba:	9801      	ldr	r0, [sp, #4]
 80269bc:	9903      	ldr	r1, [sp, #12]
 80269be:	eb61 0100 	sbc.w	r1, r1, r0
 80269c2:	9109      	str	r1, [sp, #36]	; 0x24
 80269c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80269c8:	4582      	cmp	sl, r0
 80269ca:	eb7b 0101 	sbcs.w	r1, fp, r1
 80269ce:	dbee      	blt.n	80269ae <mktime+0x1f6>
 80269d0:	e77d      	b.n	80268ce <mktime+0x116>
 80269d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80269d6:	4582      	cmp	sl, r0
 80269d8:	eb7b 0101 	sbcs.w	r1, fp, r1
 80269dc:	db89      	blt.n	80268f2 <mktime+0x13a>
 80269de:	f1b9 0f00 	cmp.w	r9, #0
 80269e2:	db3f      	blt.n	8026a64 <mktime+0x2ac>
 80269e4:	f04f 0901 	mov.w	r9, #1
 80269e8:	ea88 0809 	eor.w	r8, r8, r9
 80269ec:	f1b8 0f01 	cmp.w	r8, #1
 80269f0:	d134      	bne.n	8026a5c <mktime+0x2a4>
 80269f2:	f1b9 0f00 	cmp.w	r9, #0
 80269f6:	d04f      	beq.n	8026a98 <mktime+0x2e0>
 80269f8:	1ad3      	subs	r3, r2, r3
 80269fa:	682a      	ldr	r2, [r5, #0]
 80269fc:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8026a00:	441a      	add	r2, r3
 8026a02:	eb1a 0a03 	adds.w	sl, sl, r3
 8026a06:	602a      	str	r2, [r5, #0]
 8026a08:	4628      	mov	r0, r5
 8026a0a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8026a0e:	f7ff fdfb 	bl	8026608 <validate_structure>
 8026a12:	68ea      	ldr	r2, [r5, #12]
 8026a14:	ebb2 0208 	subs.w	r2, r2, r8
 8026a18:	d020      	beq.n	8026a5c <mktime+0x2a4>
 8026a1a:	2a01      	cmp	r2, #1
 8026a1c:	dc3e      	bgt.n	8026a9c <mktime+0x2e4>
 8026a1e:	1c90      	adds	r0, r2, #2
 8026a20:	bfd8      	it	le
 8026a22:	2201      	movle	r2, #1
 8026a24:	69eb      	ldr	r3, [r5, #28]
 8026a26:	18d3      	adds	r3, r2, r3
 8026a28:	4414      	add	r4, r2
 8026a2a:	d540      	bpl.n	8026aae <mktime+0x2f6>
 8026a2c:	1e72      	subs	r2, r6, #1
 8026a2e:	0791      	lsls	r1, r2, #30
 8026a30:	d137      	bne.n	8026aa2 <mktime+0x2ea>
 8026a32:	2164      	movs	r1, #100	; 0x64
 8026a34:	fb92 f3f1 	sdiv	r3, r2, r1
 8026a38:	fb01 2313 	mls	r3, r1, r3, r2
 8026a3c:	bba3      	cbnz	r3, 8026aa8 <mktime+0x2f0>
 8026a3e:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8026a42:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8026a46:	fb96 f3f2 	sdiv	r3, r6, r2
 8026a4a:	fb02 6613 	mls	r6, r2, r3, r6
 8026a4e:	2e00      	cmp	r6, #0
 8026a50:	f240 136d 	movw	r3, #365	; 0x16d
 8026a54:	bf18      	it	ne
 8026a56:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8026a5a:	61eb      	str	r3, [r5, #28]
 8026a5c:	f1b9 0f01 	cmp.w	r9, #1
 8026a60:	f47f af52 	bne.w	8026908 <mktime+0x150>
 8026a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8026a66:	eb1a 0a03 	adds.w	sl, sl, r3
 8026a6a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8026a6e:	f04f 0901 	mov.w	r9, #1
 8026a72:	f002 f8d1 	bl	8028c18 <__tz_unlock>
 8026a76:	3404      	adds	r4, #4
 8026a78:	2307      	movs	r3, #7
 8026a7a:	fb94 f3f3 	sdiv	r3, r4, r3
 8026a7e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8026a82:	1ae4      	subs	r4, r4, r3
 8026a84:	bf48      	it	mi
 8026a86:	3407      	addmi	r4, #7
 8026a88:	f8c5 9020 	str.w	r9, [r5, #32]
 8026a8c:	61ac      	str	r4, [r5, #24]
 8026a8e:	4650      	mov	r0, sl
 8026a90:	4659      	mov	r1, fp
 8026a92:	b00b      	add	sp, #44	; 0x2c
 8026a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a98:	1a9b      	subs	r3, r3, r2
 8026a9a:	e7ae      	b.n	80269fa <mktime+0x242>
 8026a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8026aa0:	e7c0      	b.n	8026a24 <mktime+0x26c>
 8026aa2:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8026aa6:	e7d8      	b.n	8026a5a <mktime+0x2a2>
 8026aa8:	f240 136d 	movw	r3, #365	; 0x16d
 8026aac:	e7d5      	b.n	8026a5a <mktime+0x2a2>
 8026aae:	07b2      	lsls	r2, r6, #30
 8026ab0:	d117      	bne.n	8026ae2 <mktime+0x32a>
 8026ab2:	2164      	movs	r1, #100	; 0x64
 8026ab4:	fb96 f2f1 	sdiv	r2, r6, r1
 8026ab8:	fb01 6212 	mls	r2, r1, r2, r6
 8026abc:	b9a2      	cbnz	r2, 8026ae8 <mktime+0x330>
 8026abe:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8026ac2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8026ac6:	fb96 f2f1 	sdiv	r2, r6, r1
 8026aca:	fb01 6612 	mls	r6, r1, r2, r6
 8026ace:	2e00      	cmp	r6, #0
 8026ad0:	f240 126d 	movw	r2, #365	; 0x16d
 8026ad4:	bf08      	it	eq
 8026ad6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8026ada:	4293      	cmp	r3, r2
 8026adc:	bfa8      	it	ge
 8026ade:	1a9b      	subge	r3, r3, r2
 8026ae0:	e7bb      	b.n	8026a5a <mktime+0x2a2>
 8026ae2:	f240 126d 	movw	r2, #365	; 0x16d
 8026ae6:	e7f8      	b.n	8026ada <mktime+0x322>
 8026ae8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8026aec:	e7f5      	b.n	8026ada <mktime+0x322>
 8026aee:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8026af2:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8026af6:	e7ca      	b.n	8026a8e <mktime+0x2d6>
 8026af8:	08060b10 	.word	0x08060b10
 8026afc:	00015180 	.word	0x00015180
 8026b00:	20005b88 	.word	0x20005b88

08026b04 <_free_r>:
 8026b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026b06:	2900      	cmp	r1, #0
 8026b08:	d048      	beq.n	8026b9c <_free_r+0x98>
 8026b0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026b0e:	9001      	str	r0, [sp, #4]
 8026b10:	2b00      	cmp	r3, #0
 8026b12:	f1a1 0404 	sub.w	r4, r1, #4
 8026b16:	bfb8      	it	lt
 8026b18:	18e4      	addlt	r4, r4, r3
 8026b1a:	f003 f8e9 	bl	8029cf0 <__malloc_lock>
 8026b1e:	4a20      	ldr	r2, [pc, #128]	; (8026ba0 <_free_r+0x9c>)
 8026b20:	9801      	ldr	r0, [sp, #4]
 8026b22:	6813      	ldr	r3, [r2, #0]
 8026b24:	4615      	mov	r5, r2
 8026b26:	b933      	cbnz	r3, 8026b36 <_free_r+0x32>
 8026b28:	6063      	str	r3, [r4, #4]
 8026b2a:	6014      	str	r4, [r2, #0]
 8026b2c:	b003      	add	sp, #12
 8026b2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026b32:	f003 b8e3 	b.w	8029cfc <__malloc_unlock>
 8026b36:	42a3      	cmp	r3, r4
 8026b38:	d90b      	bls.n	8026b52 <_free_r+0x4e>
 8026b3a:	6821      	ldr	r1, [r4, #0]
 8026b3c:	1862      	adds	r2, r4, r1
 8026b3e:	4293      	cmp	r3, r2
 8026b40:	bf04      	itt	eq
 8026b42:	681a      	ldreq	r2, [r3, #0]
 8026b44:	685b      	ldreq	r3, [r3, #4]
 8026b46:	6063      	str	r3, [r4, #4]
 8026b48:	bf04      	itt	eq
 8026b4a:	1852      	addeq	r2, r2, r1
 8026b4c:	6022      	streq	r2, [r4, #0]
 8026b4e:	602c      	str	r4, [r5, #0]
 8026b50:	e7ec      	b.n	8026b2c <_free_r+0x28>
 8026b52:	461a      	mov	r2, r3
 8026b54:	685b      	ldr	r3, [r3, #4]
 8026b56:	b10b      	cbz	r3, 8026b5c <_free_r+0x58>
 8026b58:	42a3      	cmp	r3, r4
 8026b5a:	d9fa      	bls.n	8026b52 <_free_r+0x4e>
 8026b5c:	6811      	ldr	r1, [r2, #0]
 8026b5e:	1855      	adds	r5, r2, r1
 8026b60:	42a5      	cmp	r5, r4
 8026b62:	d10b      	bne.n	8026b7c <_free_r+0x78>
 8026b64:	6824      	ldr	r4, [r4, #0]
 8026b66:	4421      	add	r1, r4
 8026b68:	1854      	adds	r4, r2, r1
 8026b6a:	42a3      	cmp	r3, r4
 8026b6c:	6011      	str	r1, [r2, #0]
 8026b6e:	d1dd      	bne.n	8026b2c <_free_r+0x28>
 8026b70:	681c      	ldr	r4, [r3, #0]
 8026b72:	685b      	ldr	r3, [r3, #4]
 8026b74:	6053      	str	r3, [r2, #4]
 8026b76:	4421      	add	r1, r4
 8026b78:	6011      	str	r1, [r2, #0]
 8026b7a:	e7d7      	b.n	8026b2c <_free_r+0x28>
 8026b7c:	d902      	bls.n	8026b84 <_free_r+0x80>
 8026b7e:	230c      	movs	r3, #12
 8026b80:	6003      	str	r3, [r0, #0]
 8026b82:	e7d3      	b.n	8026b2c <_free_r+0x28>
 8026b84:	6825      	ldr	r5, [r4, #0]
 8026b86:	1961      	adds	r1, r4, r5
 8026b88:	428b      	cmp	r3, r1
 8026b8a:	bf04      	itt	eq
 8026b8c:	6819      	ldreq	r1, [r3, #0]
 8026b8e:	685b      	ldreq	r3, [r3, #4]
 8026b90:	6063      	str	r3, [r4, #4]
 8026b92:	bf04      	itt	eq
 8026b94:	1949      	addeq	r1, r1, r5
 8026b96:	6021      	streq	r1, [r4, #0]
 8026b98:	6054      	str	r4, [r2, #4]
 8026b9a:	e7c7      	b.n	8026b2c <_free_r+0x28>
 8026b9c:	b003      	add	sp, #12
 8026b9e:	bd30      	pop	{r4, r5, pc}
 8026ba0:	20005b64 	.word	0x20005b64

08026ba4 <_malloc_r>:
 8026ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026ba6:	1ccd      	adds	r5, r1, #3
 8026ba8:	f025 0503 	bic.w	r5, r5, #3
 8026bac:	3508      	adds	r5, #8
 8026bae:	2d0c      	cmp	r5, #12
 8026bb0:	bf38      	it	cc
 8026bb2:	250c      	movcc	r5, #12
 8026bb4:	2d00      	cmp	r5, #0
 8026bb6:	4606      	mov	r6, r0
 8026bb8:	db01      	blt.n	8026bbe <_malloc_r+0x1a>
 8026bba:	42a9      	cmp	r1, r5
 8026bbc:	d903      	bls.n	8026bc6 <_malloc_r+0x22>
 8026bbe:	230c      	movs	r3, #12
 8026bc0:	6033      	str	r3, [r6, #0]
 8026bc2:	2000      	movs	r0, #0
 8026bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026bc6:	f003 f893 	bl	8029cf0 <__malloc_lock>
 8026bca:	4921      	ldr	r1, [pc, #132]	; (8026c50 <_malloc_r+0xac>)
 8026bcc:	680a      	ldr	r2, [r1, #0]
 8026bce:	4614      	mov	r4, r2
 8026bd0:	b99c      	cbnz	r4, 8026bfa <_malloc_r+0x56>
 8026bd2:	4f20      	ldr	r7, [pc, #128]	; (8026c54 <_malloc_r+0xb0>)
 8026bd4:	683b      	ldr	r3, [r7, #0]
 8026bd6:	b923      	cbnz	r3, 8026be2 <_malloc_r+0x3e>
 8026bd8:	4621      	mov	r1, r4
 8026bda:	4630      	mov	r0, r6
 8026bdc:	f000 f97c 	bl	8026ed8 <_sbrk_r>
 8026be0:	6038      	str	r0, [r7, #0]
 8026be2:	4629      	mov	r1, r5
 8026be4:	4630      	mov	r0, r6
 8026be6:	f000 f977 	bl	8026ed8 <_sbrk_r>
 8026bea:	1c43      	adds	r3, r0, #1
 8026bec:	d123      	bne.n	8026c36 <_malloc_r+0x92>
 8026bee:	230c      	movs	r3, #12
 8026bf0:	6033      	str	r3, [r6, #0]
 8026bf2:	4630      	mov	r0, r6
 8026bf4:	f003 f882 	bl	8029cfc <__malloc_unlock>
 8026bf8:	e7e3      	b.n	8026bc2 <_malloc_r+0x1e>
 8026bfa:	6823      	ldr	r3, [r4, #0]
 8026bfc:	1b5b      	subs	r3, r3, r5
 8026bfe:	d417      	bmi.n	8026c30 <_malloc_r+0x8c>
 8026c00:	2b0b      	cmp	r3, #11
 8026c02:	d903      	bls.n	8026c0c <_malloc_r+0x68>
 8026c04:	6023      	str	r3, [r4, #0]
 8026c06:	441c      	add	r4, r3
 8026c08:	6025      	str	r5, [r4, #0]
 8026c0a:	e004      	b.n	8026c16 <_malloc_r+0x72>
 8026c0c:	6863      	ldr	r3, [r4, #4]
 8026c0e:	42a2      	cmp	r2, r4
 8026c10:	bf0c      	ite	eq
 8026c12:	600b      	streq	r3, [r1, #0]
 8026c14:	6053      	strne	r3, [r2, #4]
 8026c16:	4630      	mov	r0, r6
 8026c18:	f003 f870 	bl	8029cfc <__malloc_unlock>
 8026c1c:	f104 000b 	add.w	r0, r4, #11
 8026c20:	1d23      	adds	r3, r4, #4
 8026c22:	f020 0007 	bic.w	r0, r0, #7
 8026c26:	1ac2      	subs	r2, r0, r3
 8026c28:	d0cc      	beq.n	8026bc4 <_malloc_r+0x20>
 8026c2a:	1a1b      	subs	r3, r3, r0
 8026c2c:	50a3      	str	r3, [r4, r2]
 8026c2e:	e7c9      	b.n	8026bc4 <_malloc_r+0x20>
 8026c30:	4622      	mov	r2, r4
 8026c32:	6864      	ldr	r4, [r4, #4]
 8026c34:	e7cc      	b.n	8026bd0 <_malloc_r+0x2c>
 8026c36:	1cc4      	adds	r4, r0, #3
 8026c38:	f024 0403 	bic.w	r4, r4, #3
 8026c3c:	42a0      	cmp	r0, r4
 8026c3e:	d0e3      	beq.n	8026c08 <_malloc_r+0x64>
 8026c40:	1a21      	subs	r1, r4, r0
 8026c42:	4630      	mov	r0, r6
 8026c44:	f000 f948 	bl	8026ed8 <_sbrk_r>
 8026c48:	3001      	adds	r0, #1
 8026c4a:	d1dd      	bne.n	8026c08 <_malloc_r+0x64>
 8026c4c:	e7cf      	b.n	8026bee <_malloc_r+0x4a>
 8026c4e:	bf00      	nop
 8026c50:	20005b64 	.word	0x20005b64
 8026c54:	20005b68 	.word	0x20005b68

08026c58 <iprintf>:
 8026c58:	b40f      	push	{r0, r1, r2, r3}
 8026c5a:	4b0a      	ldr	r3, [pc, #40]	; (8026c84 <iprintf+0x2c>)
 8026c5c:	b513      	push	{r0, r1, r4, lr}
 8026c5e:	681c      	ldr	r4, [r3, #0]
 8026c60:	b124      	cbz	r4, 8026c6c <iprintf+0x14>
 8026c62:	69a3      	ldr	r3, [r4, #24]
 8026c64:	b913      	cbnz	r3, 8026c6c <iprintf+0x14>
 8026c66:	4620      	mov	r0, r4
 8026c68:	f7ff faa4 	bl	80261b4 <__sinit>
 8026c6c:	ab05      	add	r3, sp, #20
 8026c6e:	9a04      	ldr	r2, [sp, #16]
 8026c70:	68a1      	ldr	r1, [r4, #8]
 8026c72:	9301      	str	r3, [sp, #4]
 8026c74:	4620      	mov	r0, r4
 8026c76:	f004 f88f 	bl	802ad98 <_vfiprintf_r>
 8026c7a:	b002      	add	sp, #8
 8026c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026c80:	b004      	add	sp, #16
 8026c82:	4770      	bx	lr
 8026c84:	20000064 	.word	0x20000064

08026c88 <_puts_r>:
 8026c88:	b570      	push	{r4, r5, r6, lr}
 8026c8a:	460e      	mov	r6, r1
 8026c8c:	4605      	mov	r5, r0
 8026c8e:	b118      	cbz	r0, 8026c98 <_puts_r+0x10>
 8026c90:	6983      	ldr	r3, [r0, #24]
 8026c92:	b90b      	cbnz	r3, 8026c98 <_puts_r+0x10>
 8026c94:	f7ff fa8e 	bl	80261b4 <__sinit>
 8026c98:	69ab      	ldr	r3, [r5, #24]
 8026c9a:	68ac      	ldr	r4, [r5, #8]
 8026c9c:	b913      	cbnz	r3, 8026ca4 <_puts_r+0x1c>
 8026c9e:	4628      	mov	r0, r5
 8026ca0:	f7ff fa88 	bl	80261b4 <__sinit>
 8026ca4:	4b2c      	ldr	r3, [pc, #176]	; (8026d58 <_puts_r+0xd0>)
 8026ca6:	429c      	cmp	r4, r3
 8026ca8:	d120      	bne.n	8026cec <_puts_r+0x64>
 8026caa:	686c      	ldr	r4, [r5, #4]
 8026cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026cae:	07db      	lsls	r3, r3, #31
 8026cb0:	d405      	bmi.n	8026cbe <_puts_r+0x36>
 8026cb2:	89a3      	ldrh	r3, [r4, #12]
 8026cb4:	0598      	lsls	r0, r3, #22
 8026cb6:	d402      	bmi.n	8026cbe <_puts_r+0x36>
 8026cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026cba:	f7ff fc53 	bl	8026564 <__retarget_lock_acquire_recursive>
 8026cbe:	89a3      	ldrh	r3, [r4, #12]
 8026cc0:	0719      	lsls	r1, r3, #28
 8026cc2:	d51d      	bpl.n	8026d00 <_puts_r+0x78>
 8026cc4:	6923      	ldr	r3, [r4, #16]
 8026cc6:	b1db      	cbz	r3, 8026d00 <_puts_r+0x78>
 8026cc8:	3e01      	subs	r6, #1
 8026cca:	68a3      	ldr	r3, [r4, #8]
 8026ccc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8026cd0:	3b01      	subs	r3, #1
 8026cd2:	60a3      	str	r3, [r4, #8]
 8026cd4:	bb39      	cbnz	r1, 8026d26 <_puts_r+0x9e>
 8026cd6:	2b00      	cmp	r3, #0
 8026cd8:	da38      	bge.n	8026d4c <_puts_r+0xc4>
 8026cda:	4622      	mov	r2, r4
 8026cdc:	210a      	movs	r1, #10
 8026cde:	4628      	mov	r0, r5
 8026ce0:	f002 f922 	bl	8028f28 <__swbuf_r>
 8026ce4:	3001      	adds	r0, #1
 8026ce6:	d011      	beq.n	8026d0c <_puts_r+0x84>
 8026ce8:	250a      	movs	r5, #10
 8026cea:	e011      	b.n	8026d10 <_puts_r+0x88>
 8026cec:	4b1b      	ldr	r3, [pc, #108]	; (8026d5c <_puts_r+0xd4>)
 8026cee:	429c      	cmp	r4, r3
 8026cf0:	d101      	bne.n	8026cf6 <_puts_r+0x6e>
 8026cf2:	68ac      	ldr	r4, [r5, #8]
 8026cf4:	e7da      	b.n	8026cac <_puts_r+0x24>
 8026cf6:	4b1a      	ldr	r3, [pc, #104]	; (8026d60 <_puts_r+0xd8>)
 8026cf8:	429c      	cmp	r4, r3
 8026cfa:	bf08      	it	eq
 8026cfc:	68ec      	ldreq	r4, [r5, #12]
 8026cfe:	e7d5      	b.n	8026cac <_puts_r+0x24>
 8026d00:	4621      	mov	r1, r4
 8026d02:	4628      	mov	r0, r5
 8026d04:	f002 f974 	bl	8028ff0 <__swsetup_r>
 8026d08:	2800      	cmp	r0, #0
 8026d0a:	d0dd      	beq.n	8026cc8 <_puts_r+0x40>
 8026d0c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8026d10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026d12:	07da      	lsls	r2, r3, #31
 8026d14:	d405      	bmi.n	8026d22 <_puts_r+0x9a>
 8026d16:	89a3      	ldrh	r3, [r4, #12]
 8026d18:	059b      	lsls	r3, r3, #22
 8026d1a:	d402      	bmi.n	8026d22 <_puts_r+0x9a>
 8026d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026d1e:	f7ff fc23 	bl	8026568 <__retarget_lock_release_recursive>
 8026d22:	4628      	mov	r0, r5
 8026d24:	bd70      	pop	{r4, r5, r6, pc}
 8026d26:	2b00      	cmp	r3, #0
 8026d28:	da04      	bge.n	8026d34 <_puts_r+0xac>
 8026d2a:	69a2      	ldr	r2, [r4, #24]
 8026d2c:	429a      	cmp	r2, r3
 8026d2e:	dc06      	bgt.n	8026d3e <_puts_r+0xb6>
 8026d30:	290a      	cmp	r1, #10
 8026d32:	d004      	beq.n	8026d3e <_puts_r+0xb6>
 8026d34:	6823      	ldr	r3, [r4, #0]
 8026d36:	1c5a      	adds	r2, r3, #1
 8026d38:	6022      	str	r2, [r4, #0]
 8026d3a:	7019      	strb	r1, [r3, #0]
 8026d3c:	e7c5      	b.n	8026cca <_puts_r+0x42>
 8026d3e:	4622      	mov	r2, r4
 8026d40:	4628      	mov	r0, r5
 8026d42:	f002 f8f1 	bl	8028f28 <__swbuf_r>
 8026d46:	3001      	adds	r0, #1
 8026d48:	d1bf      	bne.n	8026cca <_puts_r+0x42>
 8026d4a:	e7df      	b.n	8026d0c <_puts_r+0x84>
 8026d4c:	6823      	ldr	r3, [r4, #0]
 8026d4e:	250a      	movs	r5, #10
 8026d50:	1c5a      	adds	r2, r3, #1
 8026d52:	6022      	str	r2, [r4, #0]
 8026d54:	701d      	strb	r5, [r3, #0]
 8026d56:	e7db      	b.n	8026d10 <_puts_r+0x88>
 8026d58:	08060a24 	.word	0x08060a24
 8026d5c:	08060a44 	.word	0x08060a44
 8026d60:	08060a04 	.word	0x08060a04

08026d64 <puts>:
 8026d64:	4b02      	ldr	r3, [pc, #8]	; (8026d70 <puts+0xc>)
 8026d66:	4601      	mov	r1, r0
 8026d68:	6818      	ldr	r0, [r3, #0]
 8026d6a:	f7ff bf8d 	b.w	8026c88 <_puts_r>
 8026d6e:	bf00      	nop
 8026d70:	20000064 	.word	0x20000064

08026d74 <rand>:
 8026d74:	4b17      	ldr	r3, [pc, #92]	; (8026dd4 <rand+0x60>)
 8026d76:	b510      	push	{r4, lr}
 8026d78:	681c      	ldr	r4, [r3, #0]
 8026d7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026d7c:	b9b3      	cbnz	r3, 8026dac <rand+0x38>
 8026d7e:	2018      	movs	r0, #24
 8026d80:	f7ff fbf4 	bl	802656c <malloc>
 8026d84:	63a0      	str	r0, [r4, #56]	; 0x38
 8026d86:	b928      	cbnz	r0, 8026d94 <rand+0x20>
 8026d88:	4602      	mov	r2, r0
 8026d8a:	4b13      	ldr	r3, [pc, #76]	; (8026dd8 <rand+0x64>)
 8026d8c:	4813      	ldr	r0, [pc, #76]	; (8026ddc <rand+0x68>)
 8026d8e:	214e      	movs	r1, #78	; 0x4e
 8026d90:	f002 f9a0 	bl	80290d4 <__assert_func>
 8026d94:	4a12      	ldr	r2, [pc, #72]	; (8026de0 <rand+0x6c>)
 8026d96:	4b13      	ldr	r3, [pc, #76]	; (8026de4 <rand+0x70>)
 8026d98:	e9c0 2300 	strd	r2, r3, [r0]
 8026d9c:	4b12      	ldr	r3, [pc, #72]	; (8026de8 <rand+0x74>)
 8026d9e:	6083      	str	r3, [r0, #8]
 8026da0:	230b      	movs	r3, #11
 8026da2:	8183      	strh	r3, [r0, #12]
 8026da4:	2201      	movs	r2, #1
 8026da6:	2300      	movs	r3, #0
 8026da8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8026dac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8026dae:	480f      	ldr	r0, [pc, #60]	; (8026dec <rand+0x78>)
 8026db0:	690a      	ldr	r2, [r1, #16]
 8026db2:	694b      	ldr	r3, [r1, #20]
 8026db4:	4c0e      	ldr	r4, [pc, #56]	; (8026df0 <rand+0x7c>)
 8026db6:	4350      	muls	r0, r2
 8026db8:	fb04 0003 	mla	r0, r4, r3, r0
 8026dbc:	fba2 3404 	umull	r3, r4, r2, r4
 8026dc0:	1c5a      	adds	r2, r3, #1
 8026dc2:	4404      	add	r4, r0
 8026dc4:	f144 0000 	adc.w	r0, r4, #0
 8026dc8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8026dcc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8026dd0:	bd10      	pop	{r4, pc}
 8026dd2:	bf00      	nop
 8026dd4:	20000064 	.word	0x20000064
 8026dd8:	08060a68 	.word	0x08060a68
 8026ddc:	08060ba0 	.word	0x08060ba0
 8026de0:	abcd330e 	.word	0xabcd330e
 8026de4:	e66d1234 	.word	0xe66d1234
 8026de8:	0005deec 	.word	0x0005deec
 8026dec:	5851f42d 	.word	0x5851f42d
 8026df0:	4c957f2d 	.word	0x4c957f2d

08026df4 <realloc>:
 8026df4:	4b02      	ldr	r3, [pc, #8]	; (8026e00 <realloc+0xc>)
 8026df6:	460a      	mov	r2, r1
 8026df8:	4601      	mov	r1, r0
 8026dfa:	6818      	ldr	r0, [r3, #0]
 8026dfc:	f003 bc4e 	b.w	802a69c <_realloc_r>
 8026e00:	20000064 	.word	0x20000064

08026e04 <cleanup_glue>:
 8026e04:	b538      	push	{r3, r4, r5, lr}
 8026e06:	460c      	mov	r4, r1
 8026e08:	6809      	ldr	r1, [r1, #0]
 8026e0a:	4605      	mov	r5, r0
 8026e0c:	b109      	cbz	r1, 8026e12 <cleanup_glue+0xe>
 8026e0e:	f7ff fff9 	bl	8026e04 <cleanup_glue>
 8026e12:	4621      	mov	r1, r4
 8026e14:	4628      	mov	r0, r5
 8026e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026e1a:	f7ff be73 	b.w	8026b04 <_free_r>
	...

08026e20 <_reclaim_reent>:
 8026e20:	4b2c      	ldr	r3, [pc, #176]	; (8026ed4 <_reclaim_reent+0xb4>)
 8026e22:	681b      	ldr	r3, [r3, #0]
 8026e24:	4283      	cmp	r3, r0
 8026e26:	b570      	push	{r4, r5, r6, lr}
 8026e28:	4604      	mov	r4, r0
 8026e2a:	d051      	beq.n	8026ed0 <_reclaim_reent+0xb0>
 8026e2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8026e2e:	b143      	cbz	r3, 8026e42 <_reclaim_reent+0x22>
 8026e30:	68db      	ldr	r3, [r3, #12]
 8026e32:	2b00      	cmp	r3, #0
 8026e34:	d14a      	bne.n	8026ecc <_reclaim_reent+0xac>
 8026e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026e38:	6819      	ldr	r1, [r3, #0]
 8026e3a:	b111      	cbz	r1, 8026e42 <_reclaim_reent+0x22>
 8026e3c:	4620      	mov	r0, r4
 8026e3e:	f7ff fe61 	bl	8026b04 <_free_r>
 8026e42:	6961      	ldr	r1, [r4, #20]
 8026e44:	b111      	cbz	r1, 8026e4c <_reclaim_reent+0x2c>
 8026e46:	4620      	mov	r0, r4
 8026e48:	f7ff fe5c 	bl	8026b04 <_free_r>
 8026e4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8026e4e:	b111      	cbz	r1, 8026e56 <_reclaim_reent+0x36>
 8026e50:	4620      	mov	r0, r4
 8026e52:	f7ff fe57 	bl	8026b04 <_free_r>
 8026e56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8026e58:	b111      	cbz	r1, 8026e60 <_reclaim_reent+0x40>
 8026e5a:	4620      	mov	r0, r4
 8026e5c:	f7ff fe52 	bl	8026b04 <_free_r>
 8026e60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8026e62:	b111      	cbz	r1, 8026e6a <_reclaim_reent+0x4a>
 8026e64:	4620      	mov	r0, r4
 8026e66:	f7ff fe4d 	bl	8026b04 <_free_r>
 8026e6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026e6c:	b111      	cbz	r1, 8026e74 <_reclaim_reent+0x54>
 8026e6e:	4620      	mov	r0, r4
 8026e70:	f7ff fe48 	bl	8026b04 <_free_r>
 8026e74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8026e76:	b111      	cbz	r1, 8026e7e <_reclaim_reent+0x5e>
 8026e78:	4620      	mov	r0, r4
 8026e7a:	f7ff fe43 	bl	8026b04 <_free_r>
 8026e7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8026e80:	b111      	cbz	r1, 8026e88 <_reclaim_reent+0x68>
 8026e82:	4620      	mov	r0, r4
 8026e84:	f7ff fe3e 	bl	8026b04 <_free_r>
 8026e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026e8a:	b111      	cbz	r1, 8026e92 <_reclaim_reent+0x72>
 8026e8c:	4620      	mov	r0, r4
 8026e8e:	f7ff fe39 	bl	8026b04 <_free_r>
 8026e92:	69a3      	ldr	r3, [r4, #24]
 8026e94:	b1e3      	cbz	r3, 8026ed0 <_reclaim_reent+0xb0>
 8026e96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8026e98:	4620      	mov	r0, r4
 8026e9a:	4798      	blx	r3
 8026e9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8026e9e:	b1b9      	cbz	r1, 8026ed0 <_reclaim_reent+0xb0>
 8026ea0:	4620      	mov	r0, r4
 8026ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8026ea6:	f7ff bfad 	b.w	8026e04 <cleanup_glue>
 8026eaa:	5949      	ldr	r1, [r1, r5]
 8026eac:	b941      	cbnz	r1, 8026ec0 <_reclaim_reent+0xa0>
 8026eae:	3504      	adds	r5, #4
 8026eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026eb2:	2d80      	cmp	r5, #128	; 0x80
 8026eb4:	68d9      	ldr	r1, [r3, #12]
 8026eb6:	d1f8      	bne.n	8026eaa <_reclaim_reent+0x8a>
 8026eb8:	4620      	mov	r0, r4
 8026eba:	f7ff fe23 	bl	8026b04 <_free_r>
 8026ebe:	e7ba      	b.n	8026e36 <_reclaim_reent+0x16>
 8026ec0:	680e      	ldr	r6, [r1, #0]
 8026ec2:	4620      	mov	r0, r4
 8026ec4:	f7ff fe1e 	bl	8026b04 <_free_r>
 8026ec8:	4631      	mov	r1, r6
 8026eca:	e7ef      	b.n	8026eac <_reclaim_reent+0x8c>
 8026ecc:	2500      	movs	r5, #0
 8026ece:	e7ef      	b.n	8026eb0 <_reclaim_reent+0x90>
 8026ed0:	bd70      	pop	{r4, r5, r6, pc}
 8026ed2:	bf00      	nop
 8026ed4:	20000064 	.word	0x20000064

08026ed8 <_sbrk_r>:
 8026ed8:	b538      	push	{r3, r4, r5, lr}
 8026eda:	4d06      	ldr	r5, [pc, #24]	; (8026ef4 <_sbrk_r+0x1c>)
 8026edc:	2300      	movs	r3, #0
 8026ede:	4604      	mov	r4, r0
 8026ee0:	4608      	mov	r0, r1
 8026ee2:	602b      	str	r3, [r5, #0]
 8026ee4:	f7e1 f9fe 	bl	80082e4 <_sbrk>
 8026ee8:	1c43      	adds	r3, r0, #1
 8026eea:	d102      	bne.n	8026ef2 <_sbrk_r+0x1a>
 8026eec:	682b      	ldr	r3, [r5, #0]
 8026eee:	b103      	cbz	r3, 8026ef2 <_sbrk_r+0x1a>
 8026ef0:	6023      	str	r3, [r4, #0]
 8026ef2:	bd38      	pop	{r3, r4, r5, pc}
 8026ef4:	2001d538 	.word	0x2001d538

08026ef8 <sniprintf>:
 8026ef8:	b40c      	push	{r2, r3}
 8026efa:	b530      	push	{r4, r5, lr}
 8026efc:	4b17      	ldr	r3, [pc, #92]	; (8026f5c <sniprintf+0x64>)
 8026efe:	1e0c      	subs	r4, r1, #0
 8026f00:	681d      	ldr	r5, [r3, #0]
 8026f02:	b09d      	sub	sp, #116	; 0x74
 8026f04:	da08      	bge.n	8026f18 <sniprintf+0x20>
 8026f06:	238b      	movs	r3, #139	; 0x8b
 8026f08:	602b      	str	r3, [r5, #0]
 8026f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026f0e:	b01d      	add	sp, #116	; 0x74
 8026f10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026f14:	b002      	add	sp, #8
 8026f16:	4770      	bx	lr
 8026f18:	f44f 7302 	mov.w	r3, #520	; 0x208
 8026f1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8026f20:	bf14      	ite	ne
 8026f22:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8026f26:	4623      	moveq	r3, r4
 8026f28:	9304      	str	r3, [sp, #16]
 8026f2a:	9307      	str	r3, [sp, #28]
 8026f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026f30:	9002      	str	r0, [sp, #8]
 8026f32:	9006      	str	r0, [sp, #24]
 8026f34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8026f38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8026f3a:	ab21      	add	r3, sp, #132	; 0x84
 8026f3c:	a902      	add	r1, sp, #8
 8026f3e:	4628      	mov	r0, r5
 8026f40:	9301      	str	r3, [sp, #4]
 8026f42:	f003 fc2d 	bl	802a7a0 <_svfiprintf_r>
 8026f46:	1c43      	adds	r3, r0, #1
 8026f48:	bfbc      	itt	lt
 8026f4a:	238b      	movlt	r3, #139	; 0x8b
 8026f4c:	602b      	strlt	r3, [r5, #0]
 8026f4e:	2c00      	cmp	r4, #0
 8026f50:	d0dd      	beq.n	8026f0e <sniprintf+0x16>
 8026f52:	9b02      	ldr	r3, [sp, #8]
 8026f54:	2200      	movs	r2, #0
 8026f56:	701a      	strb	r2, [r3, #0]
 8026f58:	e7d9      	b.n	8026f0e <sniprintf+0x16>
 8026f5a:	bf00      	nop
 8026f5c:	20000064 	.word	0x20000064

08026f60 <siprintf>:
 8026f60:	b40e      	push	{r1, r2, r3}
 8026f62:	b500      	push	{lr}
 8026f64:	b09c      	sub	sp, #112	; 0x70
 8026f66:	ab1d      	add	r3, sp, #116	; 0x74
 8026f68:	9002      	str	r0, [sp, #8]
 8026f6a:	9006      	str	r0, [sp, #24]
 8026f6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8026f70:	4809      	ldr	r0, [pc, #36]	; (8026f98 <siprintf+0x38>)
 8026f72:	9107      	str	r1, [sp, #28]
 8026f74:	9104      	str	r1, [sp, #16]
 8026f76:	4909      	ldr	r1, [pc, #36]	; (8026f9c <siprintf+0x3c>)
 8026f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8026f7c:	9105      	str	r1, [sp, #20]
 8026f7e:	6800      	ldr	r0, [r0, #0]
 8026f80:	9301      	str	r3, [sp, #4]
 8026f82:	a902      	add	r1, sp, #8
 8026f84:	f003 fc0c 	bl	802a7a0 <_svfiprintf_r>
 8026f88:	9b02      	ldr	r3, [sp, #8]
 8026f8a:	2200      	movs	r2, #0
 8026f8c:	701a      	strb	r2, [r3, #0]
 8026f8e:	b01c      	add	sp, #112	; 0x70
 8026f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8026f94:	b003      	add	sp, #12
 8026f96:	4770      	bx	lr
 8026f98:	20000064 	.word	0x20000064
 8026f9c:	ffff0208 	.word	0xffff0208

08026fa0 <siscanf>:
 8026fa0:	b40e      	push	{r1, r2, r3}
 8026fa2:	b510      	push	{r4, lr}
 8026fa4:	b09f      	sub	sp, #124	; 0x7c
 8026fa6:	ac21      	add	r4, sp, #132	; 0x84
 8026fa8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8026fac:	f854 2b04 	ldr.w	r2, [r4], #4
 8026fb0:	9201      	str	r2, [sp, #4]
 8026fb2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8026fb6:	9004      	str	r0, [sp, #16]
 8026fb8:	9008      	str	r0, [sp, #32]
 8026fba:	f7d9 f913 	bl	80001e4 <strlen>
 8026fbe:	4b0c      	ldr	r3, [pc, #48]	; (8026ff0 <siscanf+0x50>)
 8026fc0:	9005      	str	r0, [sp, #20]
 8026fc2:	9009      	str	r0, [sp, #36]	; 0x24
 8026fc4:	930d      	str	r3, [sp, #52]	; 0x34
 8026fc6:	480b      	ldr	r0, [pc, #44]	; (8026ff4 <siscanf+0x54>)
 8026fc8:	9a01      	ldr	r2, [sp, #4]
 8026fca:	6800      	ldr	r0, [r0, #0]
 8026fcc:	9403      	str	r4, [sp, #12]
 8026fce:	2300      	movs	r3, #0
 8026fd0:	9311      	str	r3, [sp, #68]	; 0x44
 8026fd2:	9316      	str	r3, [sp, #88]	; 0x58
 8026fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026fd8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8026fdc:	a904      	add	r1, sp, #16
 8026fde:	4623      	mov	r3, r4
 8026fe0:	f003 fd38 	bl	802aa54 <__ssvfiscanf_r>
 8026fe4:	b01f      	add	sp, #124	; 0x7c
 8026fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026fea:	b003      	add	sp, #12
 8026fec:	4770      	bx	lr
 8026fee:	bf00      	nop
 8026ff0:	0802701b 	.word	0x0802701b
 8026ff4:	20000064 	.word	0x20000064

08026ff8 <__sread>:
 8026ff8:	b510      	push	{r4, lr}
 8026ffa:	460c      	mov	r4, r1
 8026ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027000:	f004 fada 	bl	802b5b8 <_read_r>
 8027004:	2800      	cmp	r0, #0
 8027006:	bfab      	itete	ge
 8027008:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802700a:	89a3      	ldrhlt	r3, [r4, #12]
 802700c:	181b      	addge	r3, r3, r0
 802700e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8027012:	bfac      	ite	ge
 8027014:	6563      	strge	r3, [r4, #84]	; 0x54
 8027016:	81a3      	strhlt	r3, [r4, #12]
 8027018:	bd10      	pop	{r4, pc}

0802701a <__seofread>:
 802701a:	2000      	movs	r0, #0
 802701c:	4770      	bx	lr

0802701e <__swrite>:
 802701e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027022:	461f      	mov	r7, r3
 8027024:	898b      	ldrh	r3, [r1, #12]
 8027026:	05db      	lsls	r3, r3, #23
 8027028:	4605      	mov	r5, r0
 802702a:	460c      	mov	r4, r1
 802702c:	4616      	mov	r6, r2
 802702e:	d505      	bpl.n	802703c <__swrite+0x1e>
 8027030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027034:	2302      	movs	r3, #2
 8027036:	2200      	movs	r2, #0
 8027038:	f002 fdd2 	bl	8029be0 <_lseek_r>
 802703c:	89a3      	ldrh	r3, [r4, #12]
 802703e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027042:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027046:	81a3      	strh	r3, [r4, #12]
 8027048:	4632      	mov	r2, r6
 802704a:	463b      	mov	r3, r7
 802704c:	4628      	mov	r0, r5
 802704e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027052:	f001 bfbb 	b.w	8028fcc <_write_r>

08027056 <__sseek>:
 8027056:	b510      	push	{r4, lr}
 8027058:	460c      	mov	r4, r1
 802705a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802705e:	f002 fdbf 	bl	8029be0 <_lseek_r>
 8027062:	1c43      	adds	r3, r0, #1
 8027064:	89a3      	ldrh	r3, [r4, #12]
 8027066:	bf15      	itete	ne
 8027068:	6560      	strne	r0, [r4, #84]	; 0x54
 802706a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802706e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8027072:	81a3      	strheq	r3, [r4, #12]
 8027074:	bf18      	it	ne
 8027076:	81a3      	strhne	r3, [r4, #12]
 8027078:	bd10      	pop	{r4, pc}

0802707a <__sclose>:
 802707a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802707e:	f002 b847 	b.w	8029110 <_close_r>

08027082 <strcat>:
 8027082:	b510      	push	{r4, lr}
 8027084:	4602      	mov	r2, r0
 8027086:	7814      	ldrb	r4, [r2, #0]
 8027088:	4613      	mov	r3, r2
 802708a:	3201      	adds	r2, #1
 802708c:	2c00      	cmp	r4, #0
 802708e:	d1fa      	bne.n	8027086 <strcat+0x4>
 8027090:	3b01      	subs	r3, #1
 8027092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8027096:	f803 2f01 	strb.w	r2, [r3, #1]!
 802709a:	2a00      	cmp	r2, #0
 802709c:	d1f9      	bne.n	8027092 <strcat+0x10>
 802709e:	bd10      	pop	{r4, pc}

080270a0 <strchr>:
 80270a0:	b2c9      	uxtb	r1, r1
 80270a2:	4603      	mov	r3, r0
 80270a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80270a8:	b11a      	cbz	r2, 80270b2 <strchr+0x12>
 80270aa:	428a      	cmp	r2, r1
 80270ac:	d1f9      	bne.n	80270a2 <strchr+0x2>
 80270ae:	4618      	mov	r0, r3
 80270b0:	4770      	bx	lr
 80270b2:	2900      	cmp	r1, #0
 80270b4:	bf18      	it	ne
 80270b6:	2300      	movne	r3, #0
 80270b8:	e7f9      	b.n	80270ae <strchr+0xe>

080270ba <strcpy>:
 80270ba:	4603      	mov	r3, r0
 80270bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80270c0:	f803 2b01 	strb.w	r2, [r3], #1
 80270c4:	2a00      	cmp	r2, #0
 80270c6:	d1f9      	bne.n	80270bc <strcpy+0x2>
 80270c8:	4770      	bx	lr
	...

080270cc <iso_year_adjust>:
 80270cc:	6941      	ldr	r1, [r0, #20]
 80270ce:	2900      	cmp	r1, #0
 80270d0:	f240 736c 	movw	r3, #1900	; 0x76c
 80270d4:	bfa8      	it	ge
 80270d6:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80270da:	18ca      	adds	r2, r1, r3
 80270dc:	078b      	lsls	r3, r1, #30
 80270de:	d105      	bne.n	80270ec <iso_year_adjust+0x20>
 80270e0:	2164      	movs	r1, #100	; 0x64
 80270e2:	fb92 f3f1 	sdiv	r3, r2, r1
 80270e6:	fb01 2313 	mls	r3, r1, r3, r2
 80270ea:	b9db      	cbnz	r3, 8027124 <iso_year_adjust+0x58>
 80270ec:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80270f0:	fb92 f3f1 	sdiv	r3, r2, r1
 80270f4:	fb01 2313 	mls	r3, r1, r3, r2
 80270f8:	fab3 f383 	clz	r3, r3
 80270fc:	095b      	lsrs	r3, r3, #5
 80270fe:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8027102:	0040      	lsls	r0, r0, #1
 8027104:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8027108:	4418      	add	r0, r3
 802710a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 802710e:	4298      	cmp	r0, r3
 8027110:	d03a      	beq.n	8027188 <iso_year_adjust+0xbc>
 8027112:	dc21      	bgt.n	8027158 <iso_year_adjust+0x8c>
 8027114:	2801      	cmp	r0, #1
 8027116:	dc1a      	bgt.n	802714e <iso_year_adjust+0x82>
 8027118:	2800      	cmp	r0, #0
 802711a:	bfb4      	ite	lt
 802711c:	2000      	movlt	r0, #0
 802711e:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
 8027122:	4770      	bx	lr
 8027124:	2301      	movs	r3, #1
 8027126:	e7ea      	b.n	80270fe <iso_year_adjust+0x32>
 8027128:	2817      	cmp	r0, #23
 802712a:	d813      	bhi.n	8027154 <iso_year_adjust+0x88>
 802712c:	e8df f000 	tbb	[pc, r0]
 8027130:	0c0c0c0c 	.word	0x0c0c0c0c
 8027134:	0c0c1212 	.word	0x0c0c1212
 8027138:	12121212 	.word	0x12121212
 802713c:	12121212 	.word	0x12121212
 8027140:	0c0c1212 	.word	0x0c0c1212
 8027144:	0c0c1212 	.word	0x0c0c1212
 8027148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802714c:	4770      	bx	lr
 802714e:	380a      	subs	r0, #10
 8027150:	2817      	cmp	r0, #23
 8027152:	d9e9      	bls.n	8027128 <iso_year_adjust+0x5c>
 8027154:	2000      	movs	r0, #0
 8027156:	4770      	bx	lr
 8027158:	f241 63b4 	movw	r3, #5812	; 0x16b4
 802715c:	4298      	cmp	r0, r3
 802715e:	dc06      	bgt.n	802716e <iso_year_adjust+0xa2>
 8027160:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8027164:	4298      	cmp	r0, r3
 8027166:	bfd4      	ite	le
 8027168:	2000      	movle	r0, #0
 802716a:	2001      	movgt	r0, #1
 802716c:	4770      	bx	lr
 802716e:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8027172:	3802      	subs	r0, #2
 8027174:	2815      	cmp	r0, #21
 8027176:	d8ed      	bhi.n	8027154 <iso_year_adjust+0x88>
 8027178:	2301      	movs	r3, #1
 802717a:	4083      	lsls	r3, r0
 802717c:	4803      	ldr	r0, [pc, #12]	; (802718c <iso_year_adjust+0xc0>)
 802717e:	4018      	ands	r0, r3
 8027180:	3800      	subs	r0, #0
 8027182:	bf18      	it	ne
 8027184:	2001      	movne	r0, #1
 8027186:	4770      	bx	lr
 8027188:	2001      	movs	r0, #1
 802718a:	4770      	bx	lr
 802718c:	002a001f 	.word	0x002a001f

08027190 <__strftime>:
 8027190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027194:	b091      	sub	sp, #68	; 0x44
 8027196:	461d      	mov	r5, r3
 8027198:	2300      	movs	r3, #0
 802719a:	4681      	mov	r9, r0
 802719c:	4688      	mov	r8, r1
 802719e:	9304      	str	r3, [sp, #16]
 80271a0:	461c      	mov	r4, r3
 80271a2:	7813      	ldrb	r3, [r2, #0]
 80271a4:	2b00      	cmp	r3, #0
 80271a6:	f000 84d1 	beq.w	8027b4c <__strftime+0x9bc>
 80271aa:	2b25      	cmp	r3, #37	; 0x25
 80271ac:	d11b      	bne.n	80271e6 <__strftime+0x56>
 80271ae:	7857      	ldrb	r7, [r2, #1]
 80271b0:	2f30      	cmp	r7, #48	; 0x30
 80271b2:	d024      	beq.n	80271fe <__strftime+0x6e>
 80271b4:	2f2b      	cmp	r7, #43	; 0x2b
 80271b6:	d022      	beq.n	80271fe <__strftime+0x6e>
 80271b8:	f102 0b01 	add.w	fp, r2, #1
 80271bc:	2700      	movs	r7, #0
 80271be:	f89b 3000 	ldrb.w	r3, [fp]
 80271c2:	3b31      	subs	r3, #49	; 0x31
 80271c4:	2b08      	cmp	r3, #8
 80271c6:	d81d      	bhi.n	8027204 <__strftime+0x74>
 80271c8:	4658      	mov	r0, fp
 80271ca:	220a      	movs	r2, #10
 80271cc:	a908      	add	r1, sp, #32
 80271ce:	f001 fc6b 	bl	8028aa8 <strtoul>
 80271d2:	f8dd b020 	ldr.w	fp, [sp, #32]
 80271d6:	4606      	mov	r6, r0
 80271d8:	f89b 3000 	ldrb.w	r3, [fp]
 80271dc:	2b45      	cmp	r3, #69	; 0x45
 80271de:	d113      	bne.n	8027208 <__strftime+0x78>
 80271e0:	f10b 0b01 	add.w	fp, fp, #1
 80271e4:	e012      	b.n	802720c <__strftime+0x7c>
 80271e6:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 80271ea:	42a1      	cmp	r1, r4
 80271ec:	d802      	bhi.n	80271f4 <__strftime+0x64>
 80271ee:	2400      	movs	r4, #0
 80271f0:	f000 bcb2 	b.w	8027b58 <__strftime+0x9c8>
 80271f4:	f809 3004 	strb.w	r3, [r9, r4]
 80271f8:	3201      	adds	r2, #1
 80271fa:	3401      	adds	r4, #1
 80271fc:	e7d1      	b.n	80271a2 <__strftime+0x12>
 80271fe:	f102 0b02 	add.w	fp, r2, #2
 8027202:	e7dc      	b.n	80271be <__strftime+0x2e>
 8027204:	2600      	movs	r6, #0
 8027206:	e7e7      	b.n	80271d8 <__strftime+0x48>
 8027208:	2b4f      	cmp	r3, #79	; 0x4f
 802720a:	d0e9      	beq.n	80271e0 <__strftime+0x50>
 802720c:	f89b 0000 	ldrb.w	r0, [fp]
 8027210:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8027214:	2b55      	cmp	r3, #85	; 0x55
 8027216:	d8ea      	bhi.n	80271ee <__strftime+0x5e>
 8027218:	a201      	add	r2, pc, #4	; (adr r2, 8027220 <__strftime+0x90>)
 802721a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802721e:	bf00      	nop
 8027220:	08027b3f 	.word	0x08027b3f
 8027224:	080271ef 	.word	0x080271ef
 8027228:	080271ef 	.word	0x080271ef
 802722c:	080271ef 	.word	0x080271ef
 8027230:	080271ef 	.word	0x080271ef
 8027234:	080271ef 	.word	0x080271ef
 8027238:	080271ef 	.word	0x080271ef
 802723c:	080271ef 	.word	0x080271ef
 8027240:	080271ef 	.word	0x080271ef
 8027244:	080271ef 	.word	0x080271ef
 8027248:	080271ef 	.word	0x080271ef
 802724c:	080271ef 	.word	0x080271ef
 8027250:	080271ef 	.word	0x080271ef
 8027254:	080271ef 	.word	0x080271ef
 8027258:	080271ef 	.word	0x080271ef
 802725c:	080271ef 	.word	0x080271ef
 8027260:	080271ef 	.word	0x080271ef
 8027264:	080271ef 	.word	0x080271ef
 8027268:	080271ef 	.word	0x080271ef
 802726c:	080271ef 	.word	0x080271ef
 8027270:	080271ef 	.word	0x080271ef
 8027274:	080271ef 	.word	0x080271ef
 8027278:	080271ef 	.word	0x080271ef
 802727c:	080271ef 	.word	0x080271ef
 8027280:	080271ef 	.word	0x080271ef
 8027284:	080271ef 	.word	0x080271ef
 8027288:	080271ef 	.word	0x080271ef
 802728c:	080271ef 	.word	0x080271ef
 8027290:	080273b7 	.word	0x080273b7
 8027294:	08027411 	.word	0x08027411
 8027298:	08027487 	.word	0x08027487
 802729c:	08027521 	.word	0x08027521
 80272a0:	080271ef 	.word	0x080271ef
 80272a4:	0802756d 	.word	0x0802756d
 80272a8:	0802764d 	.word	0x0802764d
 80272ac:	0802774f 	.word	0x0802774f
 80272b0:	0802775d 	.word	0x0802775d
 80272b4:	080271ef 	.word	0x080271ef
 80272b8:	080271ef 	.word	0x080271ef
 80272bc:	080271ef 	.word	0x080271ef
 80272c0:	0802778d 	.word	0x0802778d
 80272c4:	080271ef 	.word	0x080271ef
 80272c8:	080271ef 	.word	0x080271ef
 80272cc:	080277a5 	.word	0x080277a5
 80272d0:	080271ef 	.word	0x080271ef
 80272d4:	080277f3 	.word	0x080277f3
 80272d8:	08027909 	.word	0x08027909
 80272dc:	0802791b 	.word	0x0802791b
 80272e0:	08027973 	.word	0x08027973
 80272e4:	08027983 	.word	0x08027983
 80272e8:	080279f9 	.word	0x080279f9
 80272ec:	0802747f 	.word	0x0802747f
 80272f0:	08027a2d 	.word	0x08027a2d
 80272f4:	08027aeb 	.word	0x08027aeb
 80272f8:	080271ef 	.word	0x080271ef
 80272fc:	080271ef 	.word	0x080271ef
 8027300:	080271ef 	.word	0x080271ef
 8027304:	080271ef 	.word	0x080271ef
 8027308:	080271ef 	.word	0x080271ef
 802730c:	080271ef 	.word	0x080271ef
 8027310:	08027379 	.word	0x08027379
 8027314:	080273e5 	.word	0x080273e5
 8027318:	0802743f 	.word	0x0802743f
 802731c:	080274f9 	.word	0x080274f9
 8027320:	080274f9 	.word	0x080274f9
 8027324:	080271ef 	.word	0x080271ef
 8027328:	080275b5 	.word	0x080275b5
 802732c:	080273e5 	.word	0x080273e5
 8027330:	080271ef 	.word	0x080271ef
 8027334:	0802777f 	.word	0x0802777f
 8027338:	0802774f 	.word	0x0802774f
 802733c:	0802775d 	.word	0x0802775d
 8027340:	08027787 	.word	0x08027787
 8027344:	08027791 	.word	0x08027791
 8027348:	080271ef 	.word	0x080271ef
 802734c:	080277a5 	.word	0x080277a5
 8027350:	080271ef 	.word	0x080271ef
 8027354:	0802746f 	.word	0x0802746f
 8027358:	08027809 	.word	0x08027809
 802735c:	0802790d 	.word	0x0802790d
 8027360:	08027955 	.word	0x08027955
 8027364:	080271ef 	.word	0x080271ef
 8027368:	080279e9 	.word	0x080279e9
 802736c:	08027477 	.word	0x08027477
 8027370:	08027a11 	.word	0x08027a11
 8027374:	08027a7d 	.word	0x08027a7d
 8027378:	69ab      	ldr	r3, [r5, #24]
 802737a:	4aa7      	ldr	r2, [pc, #668]	; (8027618 <__strftime+0x488>)
 802737c:	3318      	adds	r3, #24
 802737e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8027382:	4630      	mov	r0, r6
 8027384:	f7d8 ff2e 	bl	80001e4 <strlen>
 8027388:	3e01      	subs	r6, #1
 802738a:	4420      	add	r0, r4
 802738c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8027390:	42a0      	cmp	r0, r4
 8027392:	d107      	bne.n	80273a4 <__strftime+0x214>
 8027394:	f89b 3000 	ldrb.w	r3, [fp]
 8027398:	2b00      	cmp	r3, #0
 802739a:	f000 83d7 	beq.w	8027b4c <__strftime+0x9bc>
 802739e:	f10b 0201 	add.w	r2, fp, #1
 80273a2:	e6fe      	b.n	80271a2 <__strftime+0x12>
 80273a4:	42a3      	cmp	r3, r4
 80273a6:	f67f af22 	bls.w	80271ee <__strftime+0x5e>
 80273aa:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80273ae:	f809 2004 	strb.w	r2, [r9, r4]
 80273b2:	3401      	adds	r4, #1
 80273b4:	e7ec      	b.n	8027390 <__strftime+0x200>
 80273b6:	69aa      	ldr	r2, [r5, #24]
 80273b8:	4b97      	ldr	r3, [pc, #604]	; (8027618 <__strftime+0x488>)
 80273ba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80273be:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 80273c0:	4630      	mov	r0, r6
 80273c2:	f7d8 ff0f 	bl	80001e4 <strlen>
 80273c6:	3e01      	subs	r6, #1
 80273c8:	4420      	add	r0, r4
 80273ca:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80273ce:	42a0      	cmp	r0, r4
 80273d0:	d0e0      	beq.n	8027394 <__strftime+0x204>
 80273d2:	42a3      	cmp	r3, r4
 80273d4:	f67f af0b 	bls.w	80271ee <__strftime+0x5e>
 80273d8:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80273dc:	f809 2004 	strb.w	r2, [r9, r4]
 80273e0:	3401      	adds	r4, #1
 80273e2:	e7f4      	b.n	80273ce <__strftime+0x23e>
 80273e4:	4b8c      	ldr	r3, [pc, #560]	; (8027618 <__strftime+0x488>)
 80273e6:	692a      	ldr	r2, [r5, #16]
 80273e8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80273ec:	4630      	mov	r0, r6
 80273ee:	f7d8 fef9 	bl	80001e4 <strlen>
 80273f2:	3e01      	subs	r6, #1
 80273f4:	4420      	add	r0, r4
 80273f6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80273fa:	42a0      	cmp	r0, r4
 80273fc:	d0ca      	beq.n	8027394 <__strftime+0x204>
 80273fe:	42a3      	cmp	r3, r4
 8027400:	f67f aef5 	bls.w	80271ee <__strftime+0x5e>
 8027404:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8027408:	f809 2004 	strb.w	r2, [r9, r4]
 802740c:	3401      	adds	r4, #1
 802740e:	e7f4      	b.n	80273fa <__strftime+0x26a>
 8027410:	692b      	ldr	r3, [r5, #16]
 8027412:	4a81      	ldr	r2, [pc, #516]	; (8027618 <__strftime+0x488>)
 8027414:	330c      	adds	r3, #12
 8027416:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 802741a:	4630      	mov	r0, r6
 802741c:	f7d8 fee2 	bl	80001e4 <strlen>
 8027420:	3e01      	subs	r6, #1
 8027422:	4420      	add	r0, r4
 8027424:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8027428:	42a0      	cmp	r0, r4
 802742a:	d0b3      	beq.n	8027394 <__strftime+0x204>
 802742c:	42a3      	cmp	r3, r4
 802742e:	f67f aede 	bls.w	80271ee <__strftime+0x5e>
 8027432:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8027436:	f809 2004 	strb.w	r2, [r9, r4]
 802743a:	3401      	adds	r4, #1
 802743c:	e7f4      	b.n	8027428 <__strftime+0x298>
 802743e:	4b76      	ldr	r3, [pc, #472]	; (8027618 <__strftime+0x488>)
 8027440:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8027444:	4630      	mov	r0, r6
 8027446:	f7d8 fecd 	bl	80001e4 <strlen>
 802744a:	7833      	ldrb	r3, [r6, #0]
 802744c:	2b00      	cmp	r3, #0
 802744e:	d0a1      	beq.n	8027394 <__strftime+0x204>
 8027450:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8027452:	9300      	str	r3, [sp, #0]
 8027454:	4632      	mov	r2, r6
 8027456:	462b      	mov	r3, r5
 8027458:	eba8 0104 	sub.w	r1, r8, r4
 802745c:	eb09 0004 	add.w	r0, r9, r4
 8027460:	f7ff fe96 	bl	8027190 <__strftime>
 8027464:	2800      	cmp	r0, #0
 8027466:	f77f aec2 	ble.w	80271ee <__strftime+0x5e>
 802746a:	4404      	add	r4, r0
 802746c:	e792      	b.n	8027394 <__strftime+0x204>
 802746e:	4b6a      	ldr	r3, [pc, #424]	; (8027618 <__strftime+0x488>)
 8027470:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 8027474:	e7e6      	b.n	8027444 <__strftime+0x2b4>
 8027476:	4b68      	ldr	r3, [pc, #416]	; (8027618 <__strftime+0x488>)
 8027478:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 802747c:	e7e2      	b.n	8027444 <__strftime+0x2b4>
 802747e:	4b66      	ldr	r3, [pc, #408]	; (8027618 <__strftime+0x488>)
 8027480:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8027484:	e7de      	b.n	8027444 <__strftime+0x2b4>
 8027486:	4965      	ldr	r1, [pc, #404]	; (802761c <__strftime+0x48c>)
 8027488:	f8d5 a014 	ldr.w	sl, [r5, #20]
 802748c:	458a      	cmp	sl, r1
 802748e:	bfac      	ite	ge
 8027490:	2100      	movge	r1, #0
 8027492:	2101      	movlt	r1, #1
 8027494:	f1ba 0f00 	cmp.w	sl, #0
 8027498:	db0e      	blt.n	80274b8 <__strftime+0x328>
 802749a:	2064      	movs	r0, #100	; 0x64
 802749c:	fb9a f0f0 	sdiv	r0, sl, r0
 80274a0:	3013      	adds	r0, #19
 80274a2:	b19f      	cbz	r7, 80274cc <__strftime+0x33c>
 80274a4:	2863      	cmp	r0, #99	; 0x63
 80274a6:	dd25      	ble.n	80274f4 <__strftime+0x364>
 80274a8:	4a5d      	ldr	r2, [pc, #372]	; (8027620 <__strftime+0x490>)
 80274aa:	4b5e      	ldr	r3, [pc, #376]	; (8027624 <__strftime+0x494>)
 80274ac:	2f2b      	cmp	r7, #43	; 0x2b
 80274ae:	bf14      	ite	ne
 80274b0:	4617      	movne	r7, r2
 80274b2:	461f      	moveq	r7, r3
 80274b4:	4a5c      	ldr	r2, [pc, #368]	; (8027628 <__strftime+0x498>)
 80274b6:	e00b      	b.n	80274d0 <__strftime+0x340>
 80274b8:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 80274bc:	9105      	str	r1, [sp, #20]
 80274be:	f001 fe05 	bl	80290cc <abs>
 80274c2:	2364      	movs	r3, #100	; 0x64
 80274c4:	9905      	ldr	r1, [sp, #20]
 80274c6:	fb90 f0f3 	sdiv	r0, r0, r3
 80274ca:	e7ea      	b.n	80274a2 <__strftime+0x312>
 80274cc:	4f54      	ldr	r7, [pc, #336]	; (8027620 <__strftime+0x490>)
 80274ce:	4a57      	ldr	r2, [pc, #348]	; (802762c <__strftime+0x49c>)
 80274d0:	4b57      	ldr	r3, [pc, #348]	; (8027630 <__strftime+0x4a0>)
 80274d2:	9001      	str	r0, [sp, #4]
 80274d4:	2e02      	cmp	r6, #2
 80274d6:	bf2c      	ite	cs
 80274d8:	ebc1 0606 	rsbcs	r6, r1, r6
 80274dc:	f1c1 0602 	rsbcc	r6, r1, #2
 80274e0:	494e      	ldr	r1, [pc, #312]	; (802761c <__strftime+0x48c>)
 80274e2:	9600      	str	r6, [sp, #0]
 80274e4:	458a      	cmp	sl, r1
 80274e6:	bfa8      	it	ge
 80274e8:	463b      	movge	r3, r7
 80274ea:	eba8 0104 	sub.w	r1, r8, r4
 80274ee:	eb09 0004 	add.w	r0, r9, r4
 80274f2:	e02a      	b.n	802754a <__strftime+0x3ba>
 80274f4:	4f4a      	ldr	r7, [pc, #296]	; (8027620 <__strftime+0x490>)
 80274f6:	e7dd      	b.n	80274b4 <__strftime+0x324>
 80274f8:	494e      	ldr	r1, [pc, #312]	; (8027634 <__strftime+0x4a4>)
 80274fa:	4a4f      	ldr	r2, [pc, #316]	; (8027638 <__strftime+0x4a8>)
 80274fc:	68eb      	ldr	r3, [r5, #12]
 80274fe:	2864      	cmp	r0, #100	; 0x64
 8027500:	bf08      	it	eq
 8027502:	460a      	moveq	r2, r1
 8027504:	eba8 0104 	sub.w	r1, r8, r4
 8027508:	eb09 0004 	add.w	r0, r9, r4
 802750c:	f7ff fcf4 	bl	8026ef8 <sniprintf>
 8027510:	2800      	cmp	r0, #0
 8027512:	f6ff ae6c 	blt.w	80271ee <__strftime+0x5e>
 8027516:	4404      	add	r4, r0
 8027518:	45a0      	cmp	r8, r4
 802751a:	f63f af3b 	bhi.w	8027394 <__strftime+0x204>
 802751e:	e666      	b.n	80271ee <__strftime+0x5e>
 8027520:	6968      	ldr	r0, [r5, #20]
 8027522:	692b      	ldr	r3, [r5, #16]
 8027524:	68ef      	ldr	r7, [r5, #12]
 8027526:	2800      	cmp	r0, #0
 8027528:	eb09 0604 	add.w	r6, r9, r4
 802752c:	eba8 0104 	sub.w	r1, r8, r4
 8027530:	f103 0301 	add.w	r3, r3, #1
 8027534:	db0c      	blt.n	8027550 <__strftime+0x3c0>
 8027536:	f04f 0c64 	mov.w	ip, #100	; 0x64
 802753a:	fb90 f2fc 	sdiv	r2, r0, ip
 802753e:	fb0c 0212 	mls	r2, ip, r2, r0
 8027542:	e9cd 7200 	strd	r7, r2, [sp]
 8027546:	4a3d      	ldr	r2, [pc, #244]	; (802763c <__strftime+0x4ac>)
 8027548:	4630      	mov	r0, r6
 802754a:	f7ff fcd5 	bl	8026ef8 <sniprintf>
 802754e:	e7df      	b.n	8027510 <__strftime+0x380>
 8027550:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8027554:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8027558:	f001 fdb8 	bl	80290cc <abs>
 802755c:	2264      	movs	r2, #100	; 0x64
 802755e:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8027562:	fb90 fcf2 	sdiv	ip, r0, r2
 8027566:	fb0c 0212 	mls	r2, ip, r2, r0
 802756a:	e7ea      	b.n	8027542 <__strftime+0x3b2>
 802756c:	2325      	movs	r3, #37	; 0x25
 802756e:	f88d 3020 	strb.w	r3, [sp, #32]
 8027572:	b187      	cbz	r7, 8027596 <__strftime+0x406>
 8027574:	2e06      	cmp	r6, #6
 8027576:	bf38      	it	cc
 8027578:	2606      	movcc	r6, #6
 802757a:	1fb3      	subs	r3, r6, #6
 802757c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8027580:	d10c      	bne.n	802759c <__strftime+0x40c>
 8027582:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8027586:	492e      	ldr	r1, [pc, #184]	; (8027640 <__strftime+0x4b0>)
 8027588:	f7ff fd97 	bl	80270ba <strcpy>
 802758c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802758e:	9300      	str	r3, [sp, #0]
 8027590:	aa08      	add	r2, sp, #32
 8027592:	462b      	mov	r3, r5
 8027594:	e760      	b.n	8027458 <__strftime+0x2c8>
 8027596:	272b      	movs	r7, #43	; 0x2b
 8027598:	260a      	movs	r6, #10
 802759a:	e7ee      	b.n	802757a <__strftime+0x3ea>
 802759c:	4a29      	ldr	r2, [pc, #164]	; (8027644 <__strftime+0x4b4>)
 802759e:	211e      	movs	r1, #30
 80275a0:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80275a4:	f7ff fca8 	bl	8026ef8 <sniprintf>
 80275a8:	2800      	cmp	r0, #0
 80275aa:	ddea      	ble.n	8027582 <__strftime+0x3f2>
 80275ac:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80275b0:	4418      	add	r0, r3
 80275b2:	e7e8      	b.n	8027586 <__strftime+0x3f6>
 80275b4:	4628      	mov	r0, r5
 80275b6:	f7ff fd89 	bl	80270cc <iso_year_adjust>
 80275ba:	4606      	mov	r6, r0
 80275bc:	6968      	ldr	r0, [r5, #20]
 80275be:	2800      	cmp	r0, #0
 80275c0:	db11      	blt.n	80275e6 <__strftime+0x456>
 80275c2:	2264      	movs	r2, #100	; 0x64
 80275c4:	fb90 f3f2 	sdiv	r3, r0, r2
 80275c8:	fb02 0313 	mls	r3, r2, r3, r0
 80275cc:	441e      	add	r6, r3
 80275ce:	2364      	movs	r3, #100	; 0x64
 80275d0:	fb96 f0f3 	sdiv	r0, r6, r3
 80275d4:	fb03 6610 	mls	r6, r3, r0, r6
 80275d8:	441e      	add	r6, r3
 80275da:	fbb6 f2f3 	udiv	r2, r6, r3
 80275de:	fb03 6312 	mls	r3, r3, r2, r6
 80275e2:	4a14      	ldr	r2, [pc, #80]	; (8027634 <__strftime+0x4a4>)
 80275e4:	e78e      	b.n	8027504 <__strftime+0x374>
 80275e6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80275ea:	f001 fd6f 	bl	80290cc <abs>
 80275ee:	2364      	movs	r3, #100	; 0x64
 80275f0:	2e00      	cmp	r6, #0
 80275f2:	fb90 f2f3 	sdiv	r2, r0, r3
 80275f6:	fb02 0313 	mls	r3, r2, r3, r0
 80275fa:	da05      	bge.n	8027608 <__strftime+0x478>
 80275fc:	6969      	ldr	r1, [r5, #20]
 80275fe:	4a12      	ldr	r2, [pc, #72]	; (8027648 <__strftime+0x4b8>)
 8027600:	4291      	cmp	r1, r2
 8027602:	bfb8      	it	lt
 8027604:	2601      	movlt	r6, #1
 8027606:	e7e1      	b.n	80275cc <__strftime+0x43c>
 8027608:	d0e0      	beq.n	80275cc <__strftime+0x43c>
 802760a:	6969      	ldr	r1, [r5, #20]
 802760c:	4a03      	ldr	r2, [pc, #12]	; (802761c <__strftime+0x48c>)
 802760e:	4291      	cmp	r1, r2
 8027610:	bfb8      	it	lt
 8027612:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8027616:	e7d9      	b.n	80275cc <__strftime+0x43c>
 8027618:	08060de4 	.word	0x08060de4
 802761c:	fffff894 	.word	0xfffff894
 8027620:	08060f57 	.word	0x08060f57
 8027624:	08060c0e 	.word	0x08060c0e
 8027628:	08060c06 	.word	0x08060c06
 802762c:	08060bff 	.word	0x08060bff
 8027630:	08061178 	.word	0x08061178
 8027634:	08060c1e 	.word	0x08060c1e
 8027638:	08060c10 	.word	0x08060c10
 802763c:	08060c14 	.word	0x08060c14
 8027640:	08060c27 	.word	0x08060c27
 8027644:	08060c23 	.word	0x08060c23
 8027648:	fffff895 	.word	0xfffff895
 802764c:	4bb6      	ldr	r3, [pc, #728]	; (8027928 <__strftime+0x798>)
 802764e:	6969      	ldr	r1, [r5, #20]
 8027650:	4299      	cmp	r1, r3
 8027652:	bfac      	ite	ge
 8027654:	2300      	movge	r3, #0
 8027656:	2301      	movlt	r3, #1
 8027658:	4628      	mov	r0, r5
 802765a:	e9cd 3105 	strd	r3, r1, [sp, #20]
 802765e:	f7ff fd35 	bl	80270cc <iso_year_adjust>
 8027662:	9906      	ldr	r1, [sp, #24]
 8027664:	2900      	cmp	r1, #0
 8027666:	4682      	mov	sl, r0
 8027668:	db27      	blt.n	80276ba <__strftime+0x52a>
 802766a:	2264      	movs	r2, #100	; 0x64
 802766c:	fb91 f2f2 	sdiv	r2, r1, r2
 8027670:	3213      	adds	r2, #19
 8027672:	6968      	ldr	r0, [r5, #20]
 8027674:	2800      	cmp	r0, #0
 8027676:	db2b      	blt.n	80276d0 <__strftime+0x540>
 8027678:	f04f 0c64 	mov.w	ip, #100	; 0x64
 802767c:	fb90 fefc 	sdiv	lr, r0, ip
 8027680:	fb0c 001e 	mls	r0, ip, lr, r0
 8027684:	f1ba 0f00 	cmp.w	sl, #0
 8027688:	da31      	bge.n	80276ee <__strftime+0x55e>
 802768a:	6969      	ldr	r1, [r5, #20]
 802768c:	4ba7      	ldr	r3, [pc, #668]	; (802792c <__strftime+0x79c>)
 802768e:	4299      	cmp	r1, r3
 8027690:	db38      	blt.n	8027704 <__strftime+0x574>
 8027692:	eb0a 0300 	add.w	r3, sl, r0
 8027696:	1c59      	adds	r1, r3, #1
 8027698:	d139      	bne.n	802770e <__strftime+0x57e>
 802769a:	3a01      	subs	r2, #1
 802769c:	2363      	movs	r3, #99	; 0x63
 802769e:	2064      	movs	r0, #100	; 0x64
 80276a0:	fb00 3202 	mla	r2, r0, r2, r3
 80276a4:	9b05      	ldr	r3, [sp, #20]
 80276a6:	2b00      	cmp	r3, #0
 80276a8:	d036      	beq.n	8027718 <__strftime+0x588>
 80276aa:	232d      	movs	r3, #45	; 0x2d
 80276ac:	f88d 3020 	strb.w	r3, [sp, #32]
 80276b0:	b106      	cbz	r6, 80276b4 <__strftime+0x524>
 80276b2:	3e01      	subs	r6, #1
 80276b4:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80276b8:	e038      	b.n	802772c <__strftime+0x59c>
 80276ba:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80276be:	9106      	str	r1, [sp, #24]
 80276c0:	f001 fd04 	bl	80290cc <abs>
 80276c4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80276c8:	9906      	ldr	r1, [sp, #24]
 80276ca:	fb90 f2fc 	sdiv	r2, r0, ip
 80276ce:	e7d0      	b.n	8027672 <__strftime+0x4e2>
 80276d0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80276d4:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80276d8:	f001 fcf8 	bl	80290cc <abs>
 80276dc:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80276e0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80276e4:	fb90 fefc 	sdiv	lr, r0, ip
 80276e8:	fb0e 001c 	mls	r0, lr, ip, r0
 80276ec:	e7ca      	b.n	8027684 <__strftime+0x4f4>
 80276ee:	d0d0      	beq.n	8027692 <__strftime+0x502>
 80276f0:	4b8d      	ldr	r3, [pc, #564]	; (8027928 <__strftime+0x798>)
 80276f2:	4299      	cmp	r1, r3
 80276f4:	bfb4      	ite	lt
 80276f6:	2301      	movlt	r3, #1
 80276f8:	2300      	movge	r3, #0
 80276fa:	9305      	str	r3, [sp, #20]
 80276fc:	bfb8      	it	lt
 80276fe:	f04f 3aff 	movlt.w	sl, #4294967295	; 0xffffffff
 8027702:	e7c6      	b.n	8027692 <__strftime+0x502>
 8027704:	f04f 0a01 	mov.w	sl, #1
 8027708:	f8cd a014 	str.w	sl, [sp, #20]
 802770c:	e7c1      	b.n	8027692 <__strftime+0x502>
 802770e:	2b64      	cmp	r3, #100	; 0x64
 8027710:	bf04      	itt	eq
 8027712:	3201      	addeq	r2, #1
 8027714:	2300      	moveq	r3, #0
 8027716:	e7c2      	b.n	802769e <__strftime+0x50e>
 8027718:	2f2b      	cmp	r7, #43	; 0x2b
 802771a:	d106      	bne.n	802772a <__strftime+0x59a>
 802771c:	f242 730f 	movw	r3, #9999	; 0x270f
 8027720:	429a      	cmp	r2, r3
 8027722:	d902      	bls.n	802772a <__strftime+0x59a>
 8027724:	f88d 7020 	strb.w	r7, [sp, #32]
 8027728:	e7c2      	b.n	80276b0 <__strftime+0x520>
 802772a:	ab08      	add	r3, sp, #32
 802772c:	2125      	movs	r1, #37	; 0x25
 802772e:	7019      	strb	r1, [r3, #0]
 8027730:	b94f      	cbnz	r7, 8027746 <__strftime+0x5b6>
 8027732:	1c58      	adds	r0, r3, #1
 8027734:	497e      	ldr	r1, [pc, #504]	; (8027930 <__strftime+0x7a0>)
 8027736:	9205      	str	r2, [sp, #20]
 8027738:	f7ff fcbf 	bl	80270ba <strcpy>
 802773c:	9a05      	ldr	r2, [sp, #20]
 802773e:	9200      	str	r2, [sp, #0]
 8027740:	4633      	mov	r3, r6
 8027742:	aa08      	add	r2, sp, #32
 8027744:	e059      	b.n	80277fa <__strftime+0x66a>
 8027746:	2130      	movs	r1, #48	; 0x30
 8027748:	1c98      	adds	r0, r3, #2
 802774a:	7059      	strb	r1, [r3, #1]
 802774c:	e7f2      	b.n	8027734 <__strftime+0x5a4>
 802774e:	4979      	ldr	r1, [pc, #484]	; (8027934 <__strftime+0x7a4>)
 8027750:	4a79      	ldr	r2, [pc, #484]	; (8027938 <__strftime+0x7a8>)
 8027752:	68ab      	ldr	r3, [r5, #8]
 8027754:	286b      	cmp	r0, #107	; 0x6b
 8027756:	bf08      	it	eq
 8027758:	460a      	moveq	r2, r1
 802775a:	e6d3      	b.n	8027504 <__strftime+0x374>
 802775c:	68ab      	ldr	r3, [r5, #8]
 802775e:	b163      	cbz	r3, 802777a <__strftime+0x5ea>
 8027760:	2b0c      	cmp	r3, #12
 8027762:	d004      	beq.n	802776e <__strftime+0x5de>
 8027764:	210c      	movs	r1, #12
 8027766:	fb93 f2f1 	sdiv	r2, r3, r1
 802776a:	fb01 3312 	mls	r3, r1, r2, r3
 802776e:	4972      	ldr	r1, [pc, #456]	; (8027938 <__strftime+0x7a8>)
 8027770:	4a70      	ldr	r2, [pc, #448]	; (8027934 <__strftime+0x7a4>)
 8027772:	2849      	cmp	r0, #73	; 0x49
 8027774:	bf08      	it	eq
 8027776:	460a      	moveq	r2, r1
 8027778:	e6c4      	b.n	8027504 <__strftime+0x374>
 802777a:	230c      	movs	r3, #12
 802777c:	e7f7      	b.n	802776e <__strftime+0x5de>
 802777e:	69eb      	ldr	r3, [r5, #28]
 8027780:	4a6e      	ldr	r2, [pc, #440]	; (802793c <__strftime+0x7ac>)
 8027782:	3301      	adds	r3, #1
 8027784:	e6be      	b.n	8027504 <__strftime+0x374>
 8027786:	692b      	ldr	r3, [r5, #16]
 8027788:	3301      	adds	r3, #1
 802778a:	e72a      	b.n	80275e2 <__strftime+0x452>
 802778c:	686b      	ldr	r3, [r5, #4]
 802778e:	e728      	b.n	80275e2 <__strftime+0x452>
 8027790:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8027794:	42a3      	cmp	r3, r4
 8027796:	f67f ad2a 	bls.w	80271ee <__strftime+0x5e>
 802779a:	230a      	movs	r3, #10
 802779c:	f809 3004 	strb.w	r3, [r9, r4]
 80277a0:	3401      	adds	r4, #1
 80277a2:	e5f7      	b.n	8027394 <__strftime+0x204>
 80277a4:	68ab      	ldr	r3, [r5, #8]
 80277a6:	2b0b      	cmp	r3, #11
 80277a8:	bfcc      	ite	gt
 80277aa:	22a4      	movgt	r2, #164	; 0xa4
 80277ac:	22a0      	movle	r2, #160	; 0xa0
 80277ae:	4b64      	ldr	r3, [pc, #400]	; (8027940 <__strftime+0x7b0>)
 80277b0:	4413      	add	r3, r2
 80277b2:	685e      	ldr	r6, [r3, #4]
 80277b4:	4630      	mov	r0, r6
 80277b6:	f7d8 fd15 	bl	80001e4 <strlen>
 80277ba:	1e72      	subs	r2, r6, #1
 80277bc:	4420      	add	r0, r4
 80277be:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80277c2:	42a0      	cmp	r0, r4
 80277c4:	f43f ade6 	beq.w	8027394 <__strftime+0x204>
 80277c8:	42a6      	cmp	r6, r4
 80277ca:	f67f ad10 	bls.w	80271ee <__strftime+0x5e>
 80277ce:	f89b 1000 	ldrb.w	r1, [fp]
 80277d2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80277d6:	2950      	cmp	r1, #80	; 0x50
 80277d8:	d107      	bne.n	80277ea <__strftime+0x65a>
 80277da:	495a      	ldr	r1, [pc, #360]	; (8027944 <__strftime+0x7b4>)
 80277dc:	5cc9      	ldrb	r1, [r1, r3]
 80277de:	f001 0103 	and.w	r1, r1, #3
 80277e2:	2901      	cmp	r1, #1
 80277e4:	bf08      	it	eq
 80277e6:	3320      	addeq	r3, #32
 80277e8:	b2db      	uxtb	r3, r3
 80277ea:	f809 3004 	strb.w	r3, [r9, r4]
 80277ee:	3401      	adds	r4, #1
 80277f0:	e7e7      	b.n	80277c2 <__strftime+0x632>
 80277f2:	686b      	ldr	r3, [r5, #4]
 80277f4:	9300      	str	r3, [sp, #0]
 80277f6:	4a54      	ldr	r2, [pc, #336]	; (8027948 <__strftime+0x7b8>)
 80277f8:	68ab      	ldr	r3, [r5, #8]
 80277fa:	eba8 0104 	sub.w	r1, r8, r4
 80277fe:	eb09 0004 	add.w	r0, r9, r4
 8027802:	f7ff fb79 	bl	8026ef8 <sniprintf>
 8027806:	e683      	b.n	8027510 <__strftime+0x380>
 8027808:	6a2b      	ldr	r3, [r5, #32]
 802780a:	2b00      	cmp	r3, #0
 802780c:	db79      	blt.n	8027902 <__strftime+0x772>
 802780e:	f001 f9fd 	bl	8028c0c <__tz_lock>
 8027812:	9b04      	ldr	r3, [sp, #16]
 8027814:	b90b      	cbnz	r3, 802781a <__strftime+0x68a>
 8027816:	f001 fa05 	bl	8028c24 <_tzset_unlocked>
 802781a:	f002 f929 	bl	8029a70 <__gettzinfo>
 802781e:	6a2b      	ldr	r3, [r5, #32]
 8027820:	2b00      	cmp	r3, #0
 8027822:	bfcc      	ite	gt
 8027824:	2350      	movgt	r3, #80	; 0x50
 8027826:	2328      	movle	r3, #40	; 0x28
 8027828:	58c3      	ldr	r3, [r0, r3]
 802782a:	f1c3 0a00 	rsb	sl, r3, #0
 802782e:	f001 f9f3 	bl	8028c18 <__tz_unlock>
 8027832:	2301      	movs	r3, #1
 8027834:	9304      	str	r3, [sp, #16]
 8027836:	f8d5 c014 	ldr.w	ip, [r5, #20]
 802783a:	4662      	mov	r2, ip
 802783c:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8027840:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027844:	9602      	str	r6, [sp, #8]
 8027846:	f143 36ff 	adc.w	r6, r3, #4294967295	; 0xffffffff
 802784a:	9603      	str	r6, [sp, #12]
 802784c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8027850:	2e00      	cmp	r6, #0
 8027852:	f177 0600 	sbcs.w	r6, r7, #0
 8027856:	eba8 0104 	sub.w	r1, r8, r4
 802785a:	eb09 0004 	add.w	r0, r9, r4
 802785e:	da05      	bge.n	802786c <__strftime+0x6dc>
 8027860:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 8027864:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8027868:	9602      	str	r6, [sp, #8]
 802786a:	9303      	str	r3, [sp, #12]
 802786c:	9b02      	ldr	r3, [sp, #8]
 802786e:	089e      	lsrs	r6, r3, #2
 8027870:	9b03      	ldr	r3, [sp, #12]
 8027872:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 8027876:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 802787a:	109f      	asrs	r7, r3, #2
 802787c:	2364      	movs	r3, #100	; 0x64
 802787e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027882:	1af6      	subs	r6, r6, r3
 8027884:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8027888:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 802788c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8027890:	fb92 f3f3 	sdiv	r3, r2, r3
 8027894:	18f6      	adds	r6, r6, r3
 8027896:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 802789a:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 802789e:	f240 136d 	movw	r3, #365	; 0x16d
 80278a2:	fb03 fc0c 	mul.w	ip, r3, ip
 80278a6:	69eb      	ldr	r3, [r5, #28]
 80278a8:	eb16 060c 	adds.w	r6, r6, ip
 80278ac:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 80278b0:	18f6      	adds	r6, r6, r3
 80278b2:	f04f 0c18 	mov.w	ip, #24
 80278b6:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80278ba:	fba6 230c 	umull	r2, r3, r6, ip
 80278be:	68ae      	ldr	r6, [r5, #8]
 80278c0:	fb0c 3307 	mla	r3, ip, r7, r3
 80278c4:	1992      	adds	r2, r2, r6
 80278c6:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80278ca:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 80278ce:	fba2 670c 	umull	r6, r7, r2, ip
 80278d2:	fb0c 7703 	mla	r7, ip, r3, r7
 80278d6:	686b      	ldr	r3, [r5, #4]
 80278d8:	18f6      	adds	r6, r6, r3
 80278da:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80278de:	fba6 230c 	umull	r2, r3, r6, ip
 80278e2:	682e      	ldr	r6, [r5, #0]
 80278e4:	fb0c 3307 	mla	r3, ip, r7, r3
 80278e8:	1992      	adds	r2, r2, r6
 80278ea:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 80278ee:	ebb2 020a 	subs.w	r2, r2, sl
 80278f2:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 80278f6:	e9cd 2300 	strd	r2, r3, [sp]
 80278fa:	4a14      	ldr	r2, [pc, #80]	; (802794c <__strftime+0x7bc>)
 80278fc:	f7ff fafc 	bl	8026ef8 <sniprintf>
 8027900:	e606      	b.n	8027510 <__strftime+0x380>
 8027902:	f04f 0a00 	mov.w	sl, #0
 8027906:	e796      	b.n	8027836 <__strftime+0x6a6>
 8027908:	682b      	ldr	r3, [r5, #0]
 802790a:	e66a      	b.n	80275e2 <__strftime+0x452>
 802790c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8027910:	42a3      	cmp	r3, r4
 8027912:	f67f ac6c 	bls.w	80271ee <__strftime+0x5e>
 8027916:	2309      	movs	r3, #9
 8027918:	e740      	b.n	802779c <__strftime+0x60c>
 802791a:	682b      	ldr	r3, [r5, #0]
 802791c:	9301      	str	r3, [sp, #4]
 802791e:	686b      	ldr	r3, [r5, #4]
 8027920:	9300      	str	r3, [sp, #0]
 8027922:	4a0b      	ldr	r2, [pc, #44]	; (8027950 <__strftime+0x7c0>)
 8027924:	68ab      	ldr	r3, [r5, #8]
 8027926:	e5e0      	b.n	80274ea <__strftime+0x35a>
 8027928:	fffff894 	.word	0xfffff894
 802792c:	fffff895 	.word	0xfffff895
 8027930:	08060c2f 	.word	0x08060c2f
 8027934:	08060c10 	.word	0x08060c10
 8027938:	08060c1e 	.word	0x08060c1e
 802793c:	08060c33 	.word	0x08060c33
 8027940:	08060de4 	.word	0x08060de4
 8027944:	08060901 	.word	0x08060901
 8027948:	08060c42 	.word	0x08060c42
 802794c:	08060c38 	.word	0x08060c38
 8027950:	08060c3d 	.word	0x08060c3d
 8027954:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8027958:	42a3      	cmp	r3, r4
 802795a:	f67f ac48 	bls.w	80271ee <__strftime+0x5e>
 802795e:	69ab      	ldr	r3, [r5, #24]
 8027960:	eb09 0204 	add.w	r2, r9, r4
 8027964:	3401      	adds	r4, #1
 8027966:	b913      	cbnz	r3, 802796e <__strftime+0x7de>
 8027968:	2337      	movs	r3, #55	; 0x37
 802796a:	7013      	strb	r3, [r2, #0]
 802796c:	e512      	b.n	8027394 <__strftime+0x204>
 802796e:	3330      	adds	r3, #48	; 0x30
 8027970:	e7fb      	b.n	802796a <__strftime+0x7da>
 8027972:	69eb      	ldr	r3, [r5, #28]
 8027974:	69aa      	ldr	r2, [r5, #24]
 8027976:	3307      	adds	r3, #7
 8027978:	1a9b      	subs	r3, r3, r2
 802797a:	2207      	movs	r2, #7
 802797c:	fb93 f3f2 	sdiv	r3, r3, r2
 8027980:	e62f      	b.n	80275e2 <__strftime+0x452>
 8027982:	4628      	mov	r0, r5
 8027984:	f7ff fba2 	bl	80270cc <iso_year_adjust>
 8027988:	69aa      	ldr	r2, [r5, #24]
 802798a:	b132      	cbz	r2, 802799a <__strftime+0x80a>
 802798c:	3a01      	subs	r2, #1
 802798e:	2800      	cmp	r0, #0
 8027990:	dc28      	bgt.n	80279e4 <__strftime+0x854>
 8027992:	69eb      	ldr	r3, [r5, #28]
 8027994:	d103      	bne.n	802799e <__strftime+0x80e>
 8027996:	330a      	adds	r3, #10
 8027998:	e7ee      	b.n	8027978 <__strftime+0x7e8>
 802799a:	2206      	movs	r2, #6
 802799c:	e7f7      	b.n	802798e <__strftime+0x7fe>
 802799e:	6968      	ldr	r0, [r5, #20]
 80279a0:	2800      	cmp	r0, #0
 80279a2:	eba2 0303 	sub.w	r3, r2, r3
 80279a6:	f240 726b 	movw	r2, #1899	; 0x76b
 80279aa:	bfa8      	it	ge
 80279ac:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 80279b0:	4410      	add	r0, r2
 80279b2:	0782      	lsls	r2, r0, #30
 80279b4:	d105      	bne.n	80279c2 <__strftime+0x832>
 80279b6:	2264      	movs	r2, #100	; 0x64
 80279b8:	fb90 f1f2 	sdiv	r1, r0, r2
 80279bc:	fb02 0111 	mls	r1, r2, r1, r0
 80279c0:	b971      	cbnz	r1, 80279e0 <__strftime+0x850>
 80279c2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80279c6:	fb90 f2f1 	sdiv	r2, r0, r1
 80279ca:	fb01 0212 	mls	r2, r1, r2, r0
 80279ce:	fab2 f282 	clz	r2, r2
 80279d2:	0952      	lsrs	r2, r2, #5
 80279d4:	1a9a      	subs	r2, r3, r2
 80279d6:	2a05      	cmp	r2, #5
 80279d8:	bfb4      	ite	lt
 80279da:	2335      	movlt	r3, #53	; 0x35
 80279dc:	2334      	movge	r3, #52	; 0x34
 80279de:	e600      	b.n	80275e2 <__strftime+0x452>
 80279e0:	2201      	movs	r2, #1
 80279e2:	e7f7      	b.n	80279d4 <__strftime+0x844>
 80279e4:	2301      	movs	r3, #1
 80279e6:	e5fc      	b.n	80275e2 <__strftime+0x452>
 80279e8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80279ec:	42a3      	cmp	r3, r4
 80279ee:	f67f abfe 	bls.w	80271ee <__strftime+0x5e>
 80279f2:	69ab      	ldr	r3, [r5, #24]
 80279f4:	3330      	adds	r3, #48	; 0x30
 80279f6:	e6d1      	b.n	802779c <__strftime+0x60c>
 80279f8:	69ab      	ldr	r3, [r5, #24]
 80279fa:	b13b      	cbz	r3, 8027a0c <__strftime+0x87c>
 80279fc:	3b01      	subs	r3, #1
 80279fe:	69ea      	ldr	r2, [r5, #28]
 8027a00:	3207      	adds	r2, #7
 8027a02:	1ad2      	subs	r2, r2, r3
 8027a04:	2307      	movs	r3, #7
 8027a06:	fb92 f3f3 	sdiv	r3, r2, r3
 8027a0a:	e5ea      	b.n	80275e2 <__strftime+0x452>
 8027a0c:	2306      	movs	r3, #6
 8027a0e:	e7f6      	b.n	80279fe <__strftime+0x86e>
 8027a10:	6968      	ldr	r0, [r5, #20]
 8027a12:	2800      	cmp	r0, #0
 8027a14:	db05      	blt.n	8027a22 <__strftime+0x892>
 8027a16:	2264      	movs	r2, #100	; 0x64
 8027a18:	fb90 f3f2 	sdiv	r3, r0, r2
 8027a1c:	fb03 0312 	mls	r3, r3, r2, r0
 8027a20:	e5df      	b.n	80275e2 <__strftime+0x452>
 8027a22:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8027a26:	f001 fb51 	bl	80290cc <abs>
 8027a2a:	e7f4      	b.n	8027a16 <__strftime+0x886>
 8027a2c:	696b      	ldr	r3, [r5, #20]
 8027a2e:	4a4c      	ldr	r2, [pc, #304]	; (8027b60 <__strftime+0x9d0>)
 8027a30:	4293      	cmp	r3, r2
 8027a32:	da09      	bge.n	8027a48 <__strftime+0x8b8>
 8027a34:	212d      	movs	r1, #45	; 0x2d
 8027a36:	f88d 1020 	strb.w	r1, [sp, #32]
 8027a3a:	eba2 0a03 	sub.w	sl, r2, r3
 8027a3e:	b106      	cbz	r6, 8027a42 <__strftime+0x8b2>
 8027a40:	3e01      	subs	r6, #1
 8027a42:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8027a46:	e00b      	b.n	8027a60 <__strftime+0x8d0>
 8027a48:	2f2b      	cmp	r7, #43	; 0x2b
 8027a4a:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8027a4e:	d106      	bne.n	8027a5e <__strftime+0x8ce>
 8027a50:	f242 730f 	movw	r3, #9999	; 0x270f
 8027a54:	459a      	cmp	sl, r3
 8027a56:	d902      	bls.n	8027a5e <__strftime+0x8ce>
 8027a58:	f88d 7020 	strb.w	r7, [sp, #32]
 8027a5c:	e7ef      	b.n	8027a3e <__strftime+0x8ae>
 8027a5e:	ab08      	add	r3, sp, #32
 8027a60:	2225      	movs	r2, #37	; 0x25
 8027a62:	701a      	strb	r2, [r3, #0]
 8027a64:	b937      	cbnz	r7, 8027a74 <__strftime+0x8e4>
 8027a66:	1c58      	adds	r0, r3, #1
 8027a68:	493e      	ldr	r1, [pc, #248]	; (8027b64 <__strftime+0x9d4>)
 8027a6a:	f7ff fb26 	bl	80270ba <strcpy>
 8027a6e:	f8cd a000 	str.w	sl, [sp]
 8027a72:	e665      	b.n	8027740 <__strftime+0x5b0>
 8027a74:	2230      	movs	r2, #48	; 0x30
 8027a76:	1c98      	adds	r0, r3, #2
 8027a78:	705a      	strb	r2, [r3, #1]
 8027a7a:	e7f5      	b.n	8027a68 <__strftime+0x8d8>
 8027a7c:	6a2b      	ldr	r3, [r5, #32]
 8027a7e:	2b00      	cmp	r3, #0
 8027a80:	f6ff ac88 	blt.w	8027394 <__strftime+0x204>
 8027a84:	f001 f8c2 	bl	8028c0c <__tz_lock>
 8027a88:	9b04      	ldr	r3, [sp, #16]
 8027a8a:	b90b      	cbnz	r3, 8027a90 <__strftime+0x900>
 8027a8c:	f001 f8ca 	bl	8028c24 <_tzset_unlocked>
 8027a90:	f001 ffee 	bl	8029a70 <__gettzinfo>
 8027a94:	6a2b      	ldr	r3, [r5, #32]
 8027a96:	2b00      	cmp	r3, #0
 8027a98:	bfcc      	ite	gt
 8027a9a:	2350      	movgt	r3, #80	; 0x50
 8027a9c:	2328      	movle	r3, #40	; 0x28
 8027a9e:	eb09 0704 	add.w	r7, r9, r4
 8027aa2:	58c6      	ldr	r6, [r0, r3]
 8027aa4:	f001 f8b8 	bl	8028c18 <__tz_unlock>
 8027aa8:	4276      	negs	r6, r6
 8027aaa:	233c      	movs	r3, #60	; 0x3c
 8027aac:	fb96 f0f3 	sdiv	r0, r6, r3
 8027ab0:	f002 f892 	bl	8029bd8 <labs>
 8027ab4:	233c      	movs	r3, #60	; 0x3c
 8027ab6:	eba8 0a04 	sub.w	sl, r8, r4
 8027aba:	fb90 f2f3 	sdiv	r2, r0, r3
 8027abe:	fb02 0013 	mls	r0, r2, r3, r0
 8027ac2:	9000      	str	r0, [sp, #0]
 8027ac4:	4a28      	ldr	r2, [pc, #160]	; (8027b68 <__strftime+0x9d8>)
 8027ac6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8027aca:	4651      	mov	r1, sl
 8027acc:	4638      	mov	r0, r7
 8027ace:	fb96 f3f3 	sdiv	r3, r6, r3
 8027ad2:	f7ff fa11 	bl	8026ef8 <sniprintf>
 8027ad6:	2800      	cmp	r0, #0
 8027ad8:	f6ff ab89 	blt.w	80271ee <__strftime+0x5e>
 8027adc:	4404      	add	r4, r0
 8027ade:	45a0      	cmp	r8, r4
 8027ae0:	f67f ab85 	bls.w	80271ee <__strftime+0x5e>
 8027ae4:	2301      	movs	r3, #1
 8027ae6:	9304      	str	r3, [sp, #16]
 8027ae8:	e454      	b.n	8027394 <__strftime+0x204>
 8027aea:	6a2b      	ldr	r3, [r5, #32]
 8027aec:	2b00      	cmp	r3, #0
 8027aee:	f6ff ac51 	blt.w	8027394 <__strftime+0x204>
 8027af2:	f001 f88b 	bl	8028c0c <__tz_lock>
 8027af6:	9b04      	ldr	r3, [sp, #16]
 8027af8:	b90b      	cbnz	r3, 8027afe <__strftime+0x96e>
 8027afa:	f001 f893 	bl	8028c24 <_tzset_unlocked>
 8027afe:	6a2b      	ldr	r3, [r5, #32]
 8027b00:	4a1a      	ldr	r2, [pc, #104]	; (8027b6c <__strftime+0x9dc>)
 8027b02:	2b00      	cmp	r3, #0
 8027b04:	bfd4      	ite	le
 8027b06:	2300      	movle	r3, #0
 8027b08:	2301      	movgt	r3, #1
 8027b0a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8027b0e:	4630      	mov	r0, r6
 8027b10:	f7d8 fb68 	bl	80001e4 <strlen>
 8027b14:	3e01      	subs	r6, #1
 8027b16:	4420      	add	r0, r4
 8027b18:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8027b1c:	42a0      	cmp	r0, r4
 8027b1e:	d102      	bne.n	8027b26 <__strftime+0x996>
 8027b20:	f001 f87a 	bl	8028c18 <__tz_unlock>
 8027b24:	e7de      	b.n	8027ae4 <__strftime+0x954>
 8027b26:	42a3      	cmp	r3, r4
 8027b28:	d905      	bls.n	8027b36 <__strftime+0x9a6>
 8027b2a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8027b2e:	f809 2004 	strb.w	r2, [r9, r4]
 8027b32:	3401      	adds	r4, #1
 8027b34:	e7f2      	b.n	8027b1c <__strftime+0x98c>
 8027b36:	f001 f86f 	bl	8028c18 <__tz_unlock>
 8027b3a:	f7ff bb58 	b.w	80271ee <__strftime+0x5e>
 8027b3e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8027b42:	42a3      	cmp	r3, r4
 8027b44:	f67f ab53 	bls.w	80271ee <__strftime+0x5e>
 8027b48:	2325      	movs	r3, #37	; 0x25
 8027b4a:	e627      	b.n	802779c <__strftime+0x60c>
 8027b4c:	f1b8 0f00 	cmp.w	r8, #0
 8027b50:	d002      	beq.n	8027b58 <__strftime+0x9c8>
 8027b52:	2300      	movs	r3, #0
 8027b54:	f809 3004 	strb.w	r3, [r9, r4]
 8027b58:	4620      	mov	r0, r4
 8027b5a:	b011      	add	sp, #68	; 0x44
 8027b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b60:	fffff894 	.word	0xfffff894
 8027b64:	08060c2f 	.word	0x08060c2f
 8027b68:	08060c4c 	.word	0x08060c4c
 8027b6c:	200000c8 	.word	0x200000c8

08027b70 <strftime>:
 8027b70:	b513      	push	{r0, r1, r4, lr}
 8027b72:	4c03      	ldr	r4, [pc, #12]	; (8027b80 <strftime+0x10>)
 8027b74:	9400      	str	r4, [sp, #0]
 8027b76:	f7ff fb0b 	bl	8027190 <__strftime>
 8027b7a:	b002      	add	sp, #8
 8027b7c:	bd10      	pop	{r4, pc}
 8027b7e:	bf00      	nop
 8027b80:	2000012c 	.word	0x2000012c

08027b84 <strncmp>:
 8027b84:	b510      	push	{r4, lr}
 8027b86:	b16a      	cbz	r2, 8027ba4 <strncmp+0x20>
 8027b88:	3901      	subs	r1, #1
 8027b8a:	1884      	adds	r4, r0, r2
 8027b8c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8027b90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8027b94:	4293      	cmp	r3, r2
 8027b96:	d103      	bne.n	8027ba0 <strncmp+0x1c>
 8027b98:	42a0      	cmp	r0, r4
 8027b9a:	d001      	beq.n	8027ba0 <strncmp+0x1c>
 8027b9c:	2b00      	cmp	r3, #0
 8027b9e:	d1f5      	bne.n	8027b8c <strncmp+0x8>
 8027ba0:	1a98      	subs	r0, r3, r2
 8027ba2:	bd10      	pop	{r4, pc}
 8027ba4:	4610      	mov	r0, r2
 8027ba6:	e7fc      	b.n	8027ba2 <strncmp+0x1e>

08027ba8 <strncpy>:
 8027ba8:	b510      	push	{r4, lr}
 8027baa:	3901      	subs	r1, #1
 8027bac:	4603      	mov	r3, r0
 8027bae:	b132      	cbz	r2, 8027bbe <strncpy+0x16>
 8027bb0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8027bb4:	f803 4b01 	strb.w	r4, [r3], #1
 8027bb8:	3a01      	subs	r2, #1
 8027bba:	2c00      	cmp	r4, #0
 8027bbc:	d1f7      	bne.n	8027bae <strncpy+0x6>
 8027bbe:	441a      	add	r2, r3
 8027bc0:	2100      	movs	r1, #0
 8027bc2:	4293      	cmp	r3, r2
 8027bc4:	d100      	bne.n	8027bc8 <strncpy+0x20>
 8027bc6:	bd10      	pop	{r4, pc}
 8027bc8:	f803 1b01 	strb.w	r1, [r3], #1
 8027bcc:	e7f9      	b.n	8027bc2 <strncpy+0x1a>

08027bce <sulp>:
 8027bce:	b570      	push	{r4, r5, r6, lr}
 8027bd0:	4604      	mov	r4, r0
 8027bd2:	460d      	mov	r5, r1
 8027bd4:	ec45 4b10 	vmov	d0, r4, r5
 8027bd8:	4616      	mov	r6, r2
 8027bda:	f002 fc01 	bl	802a3e0 <__ulp>
 8027bde:	ec51 0b10 	vmov	r0, r1, d0
 8027be2:	b17e      	cbz	r6, 8027c04 <sulp+0x36>
 8027be4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8027be8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8027bec:	2b00      	cmp	r3, #0
 8027bee:	dd09      	ble.n	8027c04 <sulp+0x36>
 8027bf0:	051b      	lsls	r3, r3, #20
 8027bf2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8027bf6:	2400      	movs	r4, #0
 8027bf8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8027bfc:	4622      	mov	r2, r4
 8027bfe:	462b      	mov	r3, r5
 8027c00:	f7d8 fd0a 	bl	8000618 <__aeabi_dmul>
 8027c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08027c08 <_strtod_l>:
 8027c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c0c:	b0a3      	sub	sp, #140	; 0x8c
 8027c0e:	461f      	mov	r7, r3
 8027c10:	2300      	movs	r3, #0
 8027c12:	931e      	str	r3, [sp, #120]	; 0x78
 8027c14:	4ba4      	ldr	r3, [pc, #656]	; (8027ea8 <_strtod_l+0x2a0>)
 8027c16:	9219      	str	r2, [sp, #100]	; 0x64
 8027c18:	681b      	ldr	r3, [r3, #0]
 8027c1a:	9307      	str	r3, [sp, #28]
 8027c1c:	4604      	mov	r4, r0
 8027c1e:	4618      	mov	r0, r3
 8027c20:	4688      	mov	r8, r1
 8027c22:	f7d8 fadf 	bl	80001e4 <strlen>
 8027c26:	f04f 0a00 	mov.w	sl, #0
 8027c2a:	4605      	mov	r5, r0
 8027c2c:	f04f 0b00 	mov.w	fp, #0
 8027c30:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8027c34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027c36:	781a      	ldrb	r2, [r3, #0]
 8027c38:	2a2b      	cmp	r2, #43	; 0x2b
 8027c3a:	d04c      	beq.n	8027cd6 <_strtod_l+0xce>
 8027c3c:	d839      	bhi.n	8027cb2 <_strtod_l+0xaa>
 8027c3e:	2a0d      	cmp	r2, #13
 8027c40:	d832      	bhi.n	8027ca8 <_strtod_l+0xa0>
 8027c42:	2a08      	cmp	r2, #8
 8027c44:	d832      	bhi.n	8027cac <_strtod_l+0xa4>
 8027c46:	2a00      	cmp	r2, #0
 8027c48:	d03c      	beq.n	8027cc4 <_strtod_l+0xbc>
 8027c4a:	2300      	movs	r3, #0
 8027c4c:	930e      	str	r3, [sp, #56]	; 0x38
 8027c4e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8027c50:	7833      	ldrb	r3, [r6, #0]
 8027c52:	2b30      	cmp	r3, #48	; 0x30
 8027c54:	f040 80b4 	bne.w	8027dc0 <_strtod_l+0x1b8>
 8027c58:	7873      	ldrb	r3, [r6, #1]
 8027c5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8027c5e:	2b58      	cmp	r3, #88	; 0x58
 8027c60:	d16c      	bne.n	8027d3c <_strtod_l+0x134>
 8027c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027c64:	9301      	str	r3, [sp, #4]
 8027c66:	ab1e      	add	r3, sp, #120	; 0x78
 8027c68:	9702      	str	r7, [sp, #8]
 8027c6a:	9300      	str	r3, [sp, #0]
 8027c6c:	4a8f      	ldr	r2, [pc, #572]	; (8027eac <_strtod_l+0x2a4>)
 8027c6e:	ab1f      	add	r3, sp, #124	; 0x7c
 8027c70:	a91d      	add	r1, sp, #116	; 0x74
 8027c72:	4620      	mov	r0, r4
 8027c74:	f001 fbb2 	bl	80293dc <__gethex>
 8027c78:	f010 0707 	ands.w	r7, r0, #7
 8027c7c:	4605      	mov	r5, r0
 8027c7e:	d005      	beq.n	8027c8c <_strtod_l+0x84>
 8027c80:	2f06      	cmp	r7, #6
 8027c82:	d12a      	bne.n	8027cda <_strtod_l+0xd2>
 8027c84:	3601      	adds	r6, #1
 8027c86:	2300      	movs	r3, #0
 8027c88:	961d      	str	r6, [sp, #116]	; 0x74
 8027c8a:	930e      	str	r3, [sp, #56]	; 0x38
 8027c8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027c8e:	2b00      	cmp	r3, #0
 8027c90:	f040 8596 	bne.w	80287c0 <_strtod_l+0xbb8>
 8027c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027c96:	b1db      	cbz	r3, 8027cd0 <_strtod_l+0xc8>
 8027c98:	4652      	mov	r2, sl
 8027c9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8027c9e:	ec43 2b10 	vmov	d0, r2, r3
 8027ca2:	b023      	add	sp, #140	; 0x8c
 8027ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027ca8:	2a20      	cmp	r2, #32
 8027caa:	d1ce      	bne.n	8027c4a <_strtod_l+0x42>
 8027cac:	3301      	adds	r3, #1
 8027cae:	931d      	str	r3, [sp, #116]	; 0x74
 8027cb0:	e7c0      	b.n	8027c34 <_strtod_l+0x2c>
 8027cb2:	2a2d      	cmp	r2, #45	; 0x2d
 8027cb4:	d1c9      	bne.n	8027c4a <_strtod_l+0x42>
 8027cb6:	2201      	movs	r2, #1
 8027cb8:	920e      	str	r2, [sp, #56]	; 0x38
 8027cba:	1c5a      	adds	r2, r3, #1
 8027cbc:	921d      	str	r2, [sp, #116]	; 0x74
 8027cbe:	785b      	ldrb	r3, [r3, #1]
 8027cc0:	2b00      	cmp	r3, #0
 8027cc2:	d1c4      	bne.n	8027c4e <_strtod_l+0x46>
 8027cc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027cc6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8027cca:	2b00      	cmp	r3, #0
 8027ccc:	f040 8576 	bne.w	80287bc <_strtod_l+0xbb4>
 8027cd0:	4652      	mov	r2, sl
 8027cd2:	465b      	mov	r3, fp
 8027cd4:	e7e3      	b.n	8027c9e <_strtod_l+0x96>
 8027cd6:	2200      	movs	r2, #0
 8027cd8:	e7ee      	b.n	8027cb8 <_strtod_l+0xb0>
 8027cda:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8027cdc:	b13a      	cbz	r2, 8027cee <_strtod_l+0xe6>
 8027cde:	2135      	movs	r1, #53	; 0x35
 8027ce0:	a820      	add	r0, sp, #128	; 0x80
 8027ce2:	f002 fc88 	bl	802a5f6 <__copybits>
 8027ce6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8027ce8:	4620      	mov	r0, r4
 8027cea:	f002 f84d 	bl	8029d88 <_Bfree>
 8027cee:	3f01      	subs	r7, #1
 8027cf0:	2f05      	cmp	r7, #5
 8027cf2:	d807      	bhi.n	8027d04 <_strtod_l+0xfc>
 8027cf4:	e8df f007 	tbb	[pc, r7]
 8027cf8:	1d180b0e 	.word	0x1d180b0e
 8027cfc:	030e      	.short	0x030e
 8027cfe:	f04f 0b00 	mov.w	fp, #0
 8027d02:	46da      	mov	sl, fp
 8027d04:	0728      	lsls	r0, r5, #28
 8027d06:	d5c1      	bpl.n	8027c8c <_strtod_l+0x84>
 8027d08:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8027d0c:	e7be      	b.n	8027c8c <_strtod_l+0x84>
 8027d0e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8027d12:	e7f7      	b.n	8027d04 <_strtod_l+0xfc>
 8027d14:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8027d18:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8027d1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8027d1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8027d22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8027d26:	e7ed      	b.n	8027d04 <_strtod_l+0xfc>
 8027d28:	f8df b184 	ldr.w	fp, [pc, #388]	; 8027eb0 <_strtod_l+0x2a8>
 8027d2c:	f04f 0a00 	mov.w	sl, #0
 8027d30:	e7e8      	b.n	8027d04 <_strtod_l+0xfc>
 8027d32:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8027d36:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8027d3a:	e7e3      	b.n	8027d04 <_strtod_l+0xfc>
 8027d3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027d3e:	1c5a      	adds	r2, r3, #1
 8027d40:	921d      	str	r2, [sp, #116]	; 0x74
 8027d42:	785b      	ldrb	r3, [r3, #1]
 8027d44:	2b30      	cmp	r3, #48	; 0x30
 8027d46:	d0f9      	beq.n	8027d3c <_strtod_l+0x134>
 8027d48:	2b00      	cmp	r3, #0
 8027d4a:	d09f      	beq.n	8027c8c <_strtod_l+0x84>
 8027d4c:	2301      	movs	r3, #1
 8027d4e:	f04f 0900 	mov.w	r9, #0
 8027d52:	9304      	str	r3, [sp, #16]
 8027d54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027d56:	930a      	str	r3, [sp, #40]	; 0x28
 8027d58:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8027d5c:	464f      	mov	r7, r9
 8027d5e:	220a      	movs	r2, #10
 8027d60:	981d      	ldr	r0, [sp, #116]	; 0x74
 8027d62:	7806      	ldrb	r6, [r0, #0]
 8027d64:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8027d68:	b2d9      	uxtb	r1, r3
 8027d6a:	2909      	cmp	r1, #9
 8027d6c:	d92a      	bls.n	8027dc4 <_strtod_l+0x1bc>
 8027d6e:	9907      	ldr	r1, [sp, #28]
 8027d70:	462a      	mov	r2, r5
 8027d72:	f7ff ff07 	bl	8027b84 <strncmp>
 8027d76:	b398      	cbz	r0, 8027de0 <_strtod_l+0x1d8>
 8027d78:	2000      	movs	r0, #0
 8027d7a:	4633      	mov	r3, r6
 8027d7c:	463d      	mov	r5, r7
 8027d7e:	9007      	str	r0, [sp, #28]
 8027d80:	4602      	mov	r2, r0
 8027d82:	2b65      	cmp	r3, #101	; 0x65
 8027d84:	d001      	beq.n	8027d8a <_strtod_l+0x182>
 8027d86:	2b45      	cmp	r3, #69	; 0x45
 8027d88:	d118      	bne.n	8027dbc <_strtod_l+0x1b4>
 8027d8a:	b91d      	cbnz	r5, 8027d94 <_strtod_l+0x18c>
 8027d8c:	9b04      	ldr	r3, [sp, #16]
 8027d8e:	4303      	orrs	r3, r0
 8027d90:	d098      	beq.n	8027cc4 <_strtod_l+0xbc>
 8027d92:	2500      	movs	r5, #0
 8027d94:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8027d98:	f108 0301 	add.w	r3, r8, #1
 8027d9c:	931d      	str	r3, [sp, #116]	; 0x74
 8027d9e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8027da2:	2b2b      	cmp	r3, #43	; 0x2b
 8027da4:	d075      	beq.n	8027e92 <_strtod_l+0x28a>
 8027da6:	2b2d      	cmp	r3, #45	; 0x2d
 8027da8:	d07b      	beq.n	8027ea2 <_strtod_l+0x29a>
 8027daa:	f04f 0c00 	mov.w	ip, #0
 8027dae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8027db2:	2909      	cmp	r1, #9
 8027db4:	f240 8082 	bls.w	8027ebc <_strtod_l+0x2b4>
 8027db8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8027dbc:	2600      	movs	r6, #0
 8027dbe:	e09d      	b.n	8027efc <_strtod_l+0x2f4>
 8027dc0:	2300      	movs	r3, #0
 8027dc2:	e7c4      	b.n	8027d4e <_strtod_l+0x146>
 8027dc4:	2f08      	cmp	r7, #8
 8027dc6:	bfd8      	it	le
 8027dc8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8027dca:	f100 0001 	add.w	r0, r0, #1
 8027dce:	bfda      	itte	le
 8027dd0:	fb02 3301 	mlale	r3, r2, r1, r3
 8027dd4:	9309      	strle	r3, [sp, #36]	; 0x24
 8027dd6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8027dda:	3701      	adds	r7, #1
 8027ddc:	901d      	str	r0, [sp, #116]	; 0x74
 8027dde:	e7bf      	b.n	8027d60 <_strtod_l+0x158>
 8027de0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027de2:	195a      	adds	r2, r3, r5
 8027de4:	921d      	str	r2, [sp, #116]	; 0x74
 8027de6:	5d5b      	ldrb	r3, [r3, r5]
 8027de8:	2f00      	cmp	r7, #0
 8027dea:	d037      	beq.n	8027e5c <_strtod_l+0x254>
 8027dec:	9007      	str	r0, [sp, #28]
 8027dee:	463d      	mov	r5, r7
 8027df0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8027df4:	2a09      	cmp	r2, #9
 8027df6:	d912      	bls.n	8027e1e <_strtod_l+0x216>
 8027df8:	2201      	movs	r2, #1
 8027dfa:	e7c2      	b.n	8027d82 <_strtod_l+0x17a>
 8027dfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027dfe:	1c5a      	adds	r2, r3, #1
 8027e00:	921d      	str	r2, [sp, #116]	; 0x74
 8027e02:	785b      	ldrb	r3, [r3, #1]
 8027e04:	3001      	adds	r0, #1
 8027e06:	2b30      	cmp	r3, #48	; 0x30
 8027e08:	d0f8      	beq.n	8027dfc <_strtod_l+0x1f4>
 8027e0a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8027e0e:	2a08      	cmp	r2, #8
 8027e10:	f200 84db 	bhi.w	80287ca <_strtod_l+0xbc2>
 8027e14:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8027e16:	9007      	str	r0, [sp, #28]
 8027e18:	2000      	movs	r0, #0
 8027e1a:	920a      	str	r2, [sp, #40]	; 0x28
 8027e1c:	4605      	mov	r5, r0
 8027e1e:	3b30      	subs	r3, #48	; 0x30
 8027e20:	f100 0201 	add.w	r2, r0, #1
 8027e24:	d014      	beq.n	8027e50 <_strtod_l+0x248>
 8027e26:	9907      	ldr	r1, [sp, #28]
 8027e28:	4411      	add	r1, r2
 8027e2a:	9107      	str	r1, [sp, #28]
 8027e2c:	462a      	mov	r2, r5
 8027e2e:	eb00 0e05 	add.w	lr, r0, r5
 8027e32:	210a      	movs	r1, #10
 8027e34:	4572      	cmp	r2, lr
 8027e36:	d113      	bne.n	8027e60 <_strtod_l+0x258>
 8027e38:	182a      	adds	r2, r5, r0
 8027e3a:	2a08      	cmp	r2, #8
 8027e3c:	f105 0501 	add.w	r5, r5, #1
 8027e40:	4405      	add	r5, r0
 8027e42:	dc1c      	bgt.n	8027e7e <_strtod_l+0x276>
 8027e44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027e46:	220a      	movs	r2, #10
 8027e48:	fb02 3301 	mla	r3, r2, r1, r3
 8027e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8027e4e:	2200      	movs	r2, #0
 8027e50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027e52:	1c59      	adds	r1, r3, #1
 8027e54:	911d      	str	r1, [sp, #116]	; 0x74
 8027e56:	785b      	ldrb	r3, [r3, #1]
 8027e58:	4610      	mov	r0, r2
 8027e5a:	e7c9      	b.n	8027df0 <_strtod_l+0x1e8>
 8027e5c:	4638      	mov	r0, r7
 8027e5e:	e7d2      	b.n	8027e06 <_strtod_l+0x1fe>
 8027e60:	2a08      	cmp	r2, #8
 8027e62:	dc04      	bgt.n	8027e6e <_strtod_l+0x266>
 8027e64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8027e66:	434e      	muls	r6, r1
 8027e68:	9609      	str	r6, [sp, #36]	; 0x24
 8027e6a:	3201      	adds	r2, #1
 8027e6c:	e7e2      	b.n	8027e34 <_strtod_l+0x22c>
 8027e6e:	f102 0c01 	add.w	ip, r2, #1
 8027e72:	f1bc 0f10 	cmp.w	ip, #16
 8027e76:	bfd8      	it	le
 8027e78:	fb01 f909 	mulle.w	r9, r1, r9
 8027e7c:	e7f5      	b.n	8027e6a <_strtod_l+0x262>
 8027e7e:	2d10      	cmp	r5, #16
 8027e80:	bfdc      	itt	le
 8027e82:	220a      	movle	r2, #10
 8027e84:	fb02 3909 	mlale	r9, r2, r9, r3
 8027e88:	e7e1      	b.n	8027e4e <_strtod_l+0x246>
 8027e8a:	2300      	movs	r3, #0
 8027e8c:	9307      	str	r3, [sp, #28]
 8027e8e:	2201      	movs	r2, #1
 8027e90:	e77c      	b.n	8027d8c <_strtod_l+0x184>
 8027e92:	f04f 0c00 	mov.w	ip, #0
 8027e96:	f108 0302 	add.w	r3, r8, #2
 8027e9a:	931d      	str	r3, [sp, #116]	; 0x74
 8027e9c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8027ea0:	e785      	b.n	8027dae <_strtod_l+0x1a6>
 8027ea2:	f04f 0c01 	mov.w	ip, #1
 8027ea6:	e7f6      	b.n	8027e96 <_strtod_l+0x28e>
 8027ea8:	08060fd4 	.word	0x08060fd4
 8027eac:	08060c64 	.word	0x08060c64
 8027eb0:	7ff00000 	.word	0x7ff00000
 8027eb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027eb6:	1c59      	adds	r1, r3, #1
 8027eb8:	911d      	str	r1, [sp, #116]	; 0x74
 8027eba:	785b      	ldrb	r3, [r3, #1]
 8027ebc:	2b30      	cmp	r3, #48	; 0x30
 8027ebe:	d0f9      	beq.n	8027eb4 <_strtod_l+0x2ac>
 8027ec0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8027ec4:	2908      	cmp	r1, #8
 8027ec6:	f63f af79 	bhi.w	8027dbc <_strtod_l+0x1b4>
 8027eca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8027ece:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027ed0:	9308      	str	r3, [sp, #32]
 8027ed2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027ed4:	1c59      	adds	r1, r3, #1
 8027ed6:	911d      	str	r1, [sp, #116]	; 0x74
 8027ed8:	785b      	ldrb	r3, [r3, #1]
 8027eda:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8027ede:	2e09      	cmp	r6, #9
 8027ee0:	d937      	bls.n	8027f52 <_strtod_l+0x34a>
 8027ee2:	9e08      	ldr	r6, [sp, #32]
 8027ee4:	1b89      	subs	r1, r1, r6
 8027ee6:	2908      	cmp	r1, #8
 8027ee8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8027eec:	dc02      	bgt.n	8027ef4 <_strtod_l+0x2ec>
 8027eee:	4576      	cmp	r6, lr
 8027ef0:	bfa8      	it	ge
 8027ef2:	4676      	movge	r6, lr
 8027ef4:	f1bc 0f00 	cmp.w	ip, #0
 8027ef8:	d000      	beq.n	8027efc <_strtod_l+0x2f4>
 8027efa:	4276      	negs	r6, r6
 8027efc:	2d00      	cmp	r5, #0
 8027efe:	d14f      	bne.n	8027fa0 <_strtod_l+0x398>
 8027f00:	9904      	ldr	r1, [sp, #16]
 8027f02:	4301      	orrs	r1, r0
 8027f04:	f47f aec2 	bne.w	8027c8c <_strtod_l+0x84>
 8027f08:	2a00      	cmp	r2, #0
 8027f0a:	f47f aedb 	bne.w	8027cc4 <_strtod_l+0xbc>
 8027f0e:	2b69      	cmp	r3, #105	; 0x69
 8027f10:	d027      	beq.n	8027f62 <_strtod_l+0x35a>
 8027f12:	dc24      	bgt.n	8027f5e <_strtod_l+0x356>
 8027f14:	2b49      	cmp	r3, #73	; 0x49
 8027f16:	d024      	beq.n	8027f62 <_strtod_l+0x35a>
 8027f18:	2b4e      	cmp	r3, #78	; 0x4e
 8027f1a:	f47f aed3 	bne.w	8027cc4 <_strtod_l+0xbc>
 8027f1e:	499e      	ldr	r1, [pc, #632]	; (8028198 <_strtod_l+0x590>)
 8027f20:	a81d      	add	r0, sp, #116	; 0x74
 8027f22:	f001 fcb3 	bl	802988c <__match>
 8027f26:	2800      	cmp	r0, #0
 8027f28:	f43f aecc 	beq.w	8027cc4 <_strtod_l+0xbc>
 8027f2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027f2e:	781b      	ldrb	r3, [r3, #0]
 8027f30:	2b28      	cmp	r3, #40	; 0x28
 8027f32:	d12d      	bne.n	8027f90 <_strtod_l+0x388>
 8027f34:	4999      	ldr	r1, [pc, #612]	; (802819c <_strtod_l+0x594>)
 8027f36:	aa20      	add	r2, sp, #128	; 0x80
 8027f38:	a81d      	add	r0, sp, #116	; 0x74
 8027f3a:	f001 fcbb 	bl	80298b4 <__hexnan>
 8027f3e:	2805      	cmp	r0, #5
 8027f40:	d126      	bne.n	8027f90 <_strtod_l+0x388>
 8027f42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027f44:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8027f48:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8027f4c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8027f50:	e69c      	b.n	8027c8c <_strtod_l+0x84>
 8027f52:	210a      	movs	r1, #10
 8027f54:	fb01 3e0e 	mla	lr, r1, lr, r3
 8027f58:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8027f5c:	e7b9      	b.n	8027ed2 <_strtod_l+0x2ca>
 8027f5e:	2b6e      	cmp	r3, #110	; 0x6e
 8027f60:	e7db      	b.n	8027f1a <_strtod_l+0x312>
 8027f62:	498f      	ldr	r1, [pc, #572]	; (80281a0 <_strtod_l+0x598>)
 8027f64:	a81d      	add	r0, sp, #116	; 0x74
 8027f66:	f001 fc91 	bl	802988c <__match>
 8027f6a:	2800      	cmp	r0, #0
 8027f6c:	f43f aeaa 	beq.w	8027cc4 <_strtod_l+0xbc>
 8027f70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027f72:	498c      	ldr	r1, [pc, #560]	; (80281a4 <_strtod_l+0x59c>)
 8027f74:	3b01      	subs	r3, #1
 8027f76:	a81d      	add	r0, sp, #116	; 0x74
 8027f78:	931d      	str	r3, [sp, #116]	; 0x74
 8027f7a:	f001 fc87 	bl	802988c <__match>
 8027f7e:	b910      	cbnz	r0, 8027f86 <_strtod_l+0x37e>
 8027f80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027f82:	3301      	adds	r3, #1
 8027f84:	931d      	str	r3, [sp, #116]	; 0x74
 8027f86:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80281b4 <_strtod_l+0x5ac>
 8027f8a:	f04f 0a00 	mov.w	sl, #0
 8027f8e:	e67d      	b.n	8027c8c <_strtod_l+0x84>
 8027f90:	4885      	ldr	r0, [pc, #532]	; (80281a8 <_strtod_l+0x5a0>)
 8027f92:	f003 fb25 	bl	802b5e0 <nan>
 8027f96:	ed8d 0b04 	vstr	d0, [sp, #16]
 8027f9a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8027f9e:	e675      	b.n	8027c8c <_strtod_l+0x84>
 8027fa0:	9b07      	ldr	r3, [sp, #28]
 8027fa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027fa4:	1af3      	subs	r3, r6, r3
 8027fa6:	2f00      	cmp	r7, #0
 8027fa8:	bf08      	it	eq
 8027faa:	462f      	moveq	r7, r5
 8027fac:	2d10      	cmp	r5, #16
 8027fae:	9308      	str	r3, [sp, #32]
 8027fb0:	46a8      	mov	r8, r5
 8027fb2:	bfa8      	it	ge
 8027fb4:	f04f 0810 	movge.w	r8, #16
 8027fb8:	f7d8 fab4 	bl	8000524 <__aeabi_ui2d>
 8027fbc:	2d09      	cmp	r5, #9
 8027fbe:	4682      	mov	sl, r0
 8027fc0:	468b      	mov	fp, r1
 8027fc2:	dd13      	ble.n	8027fec <_strtod_l+0x3e4>
 8027fc4:	4b79      	ldr	r3, [pc, #484]	; (80281ac <_strtod_l+0x5a4>)
 8027fc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8027fca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8027fce:	f7d8 fb23 	bl	8000618 <__aeabi_dmul>
 8027fd2:	4682      	mov	sl, r0
 8027fd4:	4648      	mov	r0, r9
 8027fd6:	468b      	mov	fp, r1
 8027fd8:	f7d8 faa4 	bl	8000524 <__aeabi_ui2d>
 8027fdc:	4602      	mov	r2, r0
 8027fde:	460b      	mov	r3, r1
 8027fe0:	4650      	mov	r0, sl
 8027fe2:	4659      	mov	r1, fp
 8027fe4:	f7d8 f962 	bl	80002ac <__adddf3>
 8027fe8:	4682      	mov	sl, r0
 8027fea:	468b      	mov	fp, r1
 8027fec:	2d0f      	cmp	r5, #15
 8027fee:	dc38      	bgt.n	8028062 <_strtod_l+0x45a>
 8027ff0:	9b08      	ldr	r3, [sp, #32]
 8027ff2:	2b00      	cmp	r3, #0
 8027ff4:	f43f ae4a 	beq.w	8027c8c <_strtod_l+0x84>
 8027ff8:	dd24      	ble.n	8028044 <_strtod_l+0x43c>
 8027ffa:	2b16      	cmp	r3, #22
 8027ffc:	dc0b      	bgt.n	8028016 <_strtod_l+0x40e>
 8027ffe:	4d6b      	ldr	r5, [pc, #428]	; (80281ac <_strtod_l+0x5a4>)
 8028000:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8028004:	e9d5 0100 	ldrd	r0, r1, [r5]
 8028008:	4652      	mov	r2, sl
 802800a:	465b      	mov	r3, fp
 802800c:	f7d8 fb04 	bl	8000618 <__aeabi_dmul>
 8028010:	4682      	mov	sl, r0
 8028012:	468b      	mov	fp, r1
 8028014:	e63a      	b.n	8027c8c <_strtod_l+0x84>
 8028016:	9a08      	ldr	r2, [sp, #32]
 8028018:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 802801c:	4293      	cmp	r3, r2
 802801e:	db20      	blt.n	8028062 <_strtod_l+0x45a>
 8028020:	4c62      	ldr	r4, [pc, #392]	; (80281ac <_strtod_l+0x5a4>)
 8028022:	f1c5 050f 	rsb	r5, r5, #15
 8028026:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 802802a:	4652      	mov	r2, sl
 802802c:	465b      	mov	r3, fp
 802802e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8028032:	f7d8 faf1 	bl	8000618 <__aeabi_dmul>
 8028036:	9b08      	ldr	r3, [sp, #32]
 8028038:	1b5d      	subs	r5, r3, r5
 802803a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 802803e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8028042:	e7e3      	b.n	802800c <_strtod_l+0x404>
 8028044:	9b08      	ldr	r3, [sp, #32]
 8028046:	3316      	adds	r3, #22
 8028048:	db0b      	blt.n	8028062 <_strtod_l+0x45a>
 802804a:	9b07      	ldr	r3, [sp, #28]
 802804c:	4a57      	ldr	r2, [pc, #348]	; (80281ac <_strtod_l+0x5a4>)
 802804e:	1b9e      	subs	r6, r3, r6
 8028050:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8028054:	e9d6 2300 	ldrd	r2, r3, [r6]
 8028058:	4650      	mov	r0, sl
 802805a:	4659      	mov	r1, fp
 802805c:	f7d8 fc06 	bl	800086c <__aeabi_ddiv>
 8028060:	e7d6      	b.n	8028010 <_strtod_l+0x408>
 8028062:	9b08      	ldr	r3, [sp, #32]
 8028064:	eba5 0808 	sub.w	r8, r5, r8
 8028068:	4498      	add	r8, r3
 802806a:	f1b8 0f00 	cmp.w	r8, #0
 802806e:	dd71      	ble.n	8028154 <_strtod_l+0x54c>
 8028070:	f018 030f 	ands.w	r3, r8, #15
 8028074:	d00a      	beq.n	802808c <_strtod_l+0x484>
 8028076:	494d      	ldr	r1, [pc, #308]	; (80281ac <_strtod_l+0x5a4>)
 8028078:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802807c:	4652      	mov	r2, sl
 802807e:	465b      	mov	r3, fp
 8028080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8028084:	f7d8 fac8 	bl	8000618 <__aeabi_dmul>
 8028088:	4682      	mov	sl, r0
 802808a:	468b      	mov	fp, r1
 802808c:	f038 080f 	bics.w	r8, r8, #15
 8028090:	d04d      	beq.n	802812e <_strtod_l+0x526>
 8028092:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8028096:	dd22      	ble.n	80280de <_strtod_l+0x4d6>
 8028098:	2500      	movs	r5, #0
 802809a:	462e      	mov	r6, r5
 802809c:	9509      	str	r5, [sp, #36]	; 0x24
 802809e:	9507      	str	r5, [sp, #28]
 80280a0:	2322      	movs	r3, #34	; 0x22
 80280a2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80281b4 <_strtod_l+0x5ac>
 80280a6:	6023      	str	r3, [r4, #0]
 80280a8:	f04f 0a00 	mov.w	sl, #0
 80280ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80280ae:	2b00      	cmp	r3, #0
 80280b0:	f43f adec 	beq.w	8027c8c <_strtod_l+0x84>
 80280b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80280b6:	4620      	mov	r0, r4
 80280b8:	f001 fe66 	bl	8029d88 <_Bfree>
 80280bc:	9907      	ldr	r1, [sp, #28]
 80280be:	4620      	mov	r0, r4
 80280c0:	f001 fe62 	bl	8029d88 <_Bfree>
 80280c4:	4631      	mov	r1, r6
 80280c6:	4620      	mov	r0, r4
 80280c8:	f001 fe5e 	bl	8029d88 <_Bfree>
 80280cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80280ce:	4620      	mov	r0, r4
 80280d0:	f001 fe5a 	bl	8029d88 <_Bfree>
 80280d4:	4629      	mov	r1, r5
 80280d6:	4620      	mov	r0, r4
 80280d8:	f001 fe56 	bl	8029d88 <_Bfree>
 80280dc:	e5d6      	b.n	8027c8c <_strtod_l+0x84>
 80280de:	2300      	movs	r3, #0
 80280e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80280e4:	4650      	mov	r0, sl
 80280e6:	4659      	mov	r1, fp
 80280e8:	4699      	mov	r9, r3
 80280ea:	f1b8 0f01 	cmp.w	r8, #1
 80280ee:	dc21      	bgt.n	8028134 <_strtod_l+0x52c>
 80280f0:	b10b      	cbz	r3, 80280f6 <_strtod_l+0x4ee>
 80280f2:	4682      	mov	sl, r0
 80280f4:	468b      	mov	fp, r1
 80280f6:	4b2e      	ldr	r3, [pc, #184]	; (80281b0 <_strtod_l+0x5a8>)
 80280f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80280fc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8028100:	4652      	mov	r2, sl
 8028102:	465b      	mov	r3, fp
 8028104:	e9d9 0100 	ldrd	r0, r1, [r9]
 8028108:	f7d8 fa86 	bl	8000618 <__aeabi_dmul>
 802810c:	4b29      	ldr	r3, [pc, #164]	; (80281b4 <_strtod_l+0x5ac>)
 802810e:	460a      	mov	r2, r1
 8028110:	400b      	ands	r3, r1
 8028112:	4929      	ldr	r1, [pc, #164]	; (80281b8 <_strtod_l+0x5b0>)
 8028114:	428b      	cmp	r3, r1
 8028116:	4682      	mov	sl, r0
 8028118:	d8be      	bhi.n	8028098 <_strtod_l+0x490>
 802811a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 802811e:	428b      	cmp	r3, r1
 8028120:	bf86      	itte	hi
 8028122:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80281bc <_strtod_l+0x5b4>
 8028126:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 802812a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 802812e:	2300      	movs	r3, #0
 8028130:	9304      	str	r3, [sp, #16]
 8028132:	e081      	b.n	8028238 <_strtod_l+0x630>
 8028134:	f018 0f01 	tst.w	r8, #1
 8028138:	d007      	beq.n	802814a <_strtod_l+0x542>
 802813a:	4b1d      	ldr	r3, [pc, #116]	; (80281b0 <_strtod_l+0x5a8>)
 802813c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8028140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028144:	f7d8 fa68 	bl	8000618 <__aeabi_dmul>
 8028148:	2301      	movs	r3, #1
 802814a:	f109 0901 	add.w	r9, r9, #1
 802814e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8028152:	e7ca      	b.n	80280ea <_strtod_l+0x4e2>
 8028154:	d0eb      	beq.n	802812e <_strtod_l+0x526>
 8028156:	f1c8 0800 	rsb	r8, r8, #0
 802815a:	f018 020f 	ands.w	r2, r8, #15
 802815e:	d00a      	beq.n	8028176 <_strtod_l+0x56e>
 8028160:	4b12      	ldr	r3, [pc, #72]	; (80281ac <_strtod_l+0x5a4>)
 8028162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8028166:	4650      	mov	r0, sl
 8028168:	4659      	mov	r1, fp
 802816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802816e:	f7d8 fb7d 	bl	800086c <__aeabi_ddiv>
 8028172:	4682      	mov	sl, r0
 8028174:	468b      	mov	fp, r1
 8028176:	ea5f 1828 	movs.w	r8, r8, asr #4
 802817a:	d0d8      	beq.n	802812e <_strtod_l+0x526>
 802817c:	f1b8 0f1f 	cmp.w	r8, #31
 8028180:	dd1e      	ble.n	80281c0 <_strtod_l+0x5b8>
 8028182:	2500      	movs	r5, #0
 8028184:	462e      	mov	r6, r5
 8028186:	9509      	str	r5, [sp, #36]	; 0x24
 8028188:	9507      	str	r5, [sp, #28]
 802818a:	2322      	movs	r3, #34	; 0x22
 802818c:	f04f 0a00 	mov.w	sl, #0
 8028190:	f04f 0b00 	mov.w	fp, #0
 8028194:	6023      	str	r3, [r4, #0]
 8028196:	e789      	b.n	80280ac <_strtod_l+0x4a4>
 8028198:	08060cb9 	.word	0x08060cb9
 802819c:	08060c78 	.word	0x08060c78
 80281a0:	08060c58 	.word	0x08060c58
 80281a4:	08060c5b 	.word	0x08060c5b
 80281a8:	08060f57 	.word	0x08060f57
 80281ac:	08061070 	.word	0x08061070
 80281b0:	08061048 	.word	0x08061048
 80281b4:	7ff00000 	.word	0x7ff00000
 80281b8:	7ca00000 	.word	0x7ca00000
 80281bc:	7fefffff 	.word	0x7fefffff
 80281c0:	f018 0310 	ands.w	r3, r8, #16
 80281c4:	bf18      	it	ne
 80281c6:	236a      	movne	r3, #106	; 0x6a
 80281c8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8028580 <_strtod_l+0x978>
 80281cc:	9304      	str	r3, [sp, #16]
 80281ce:	4650      	mov	r0, sl
 80281d0:	4659      	mov	r1, fp
 80281d2:	2300      	movs	r3, #0
 80281d4:	f018 0f01 	tst.w	r8, #1
 80281d8:	d004      	beq.n	80281e4 <_strtod_l+0x5dc>
 80281da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80281de:	f7d8 fa1b 	bl	8000618 <__aeabi_dmul>
 80281e2:	2301      	movs	r3, #1
 80281e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80281e8:	f109 0908 	add.w	r9, r9, #8
 80281ec:	d1f2      	bne.n	80281d4 <_strtod_l+0x5cc>
 80281ee:	b10b      	cbz	r3, 80281f4 <_strtod_l+0x5ec>
 80281f0:	4682      	mov	sl, r0
 80281f2:	468b      	mov	fp, r1
 80281f4:	9b04      	ldr	r3, [sp, #16]
 80281f6:	b1bb      	cbz	r3, 8028228 <_strtod_l+0x620>
 80281f8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80281fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8028200:	2b00      	cmp	r3, #0
 8028202:	4659      	mov	r1, fp
 8028204:	dd10      	ble.n	8028228 <_strtod_l+0x620>
 8028206:	2b1f      	cmp	r3, #31
 8028208:	f340 8128 	ble.w	802845c <_strtod_l+0x854>
 802820c:	2b34      	cmp	r3, #52	; 0x34
 802820e:	bfde      	ittt	le
 8028210:	3b20      	suble	r3, #32
 8028212:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8028216:	fa02 f303 	lslle.w	r3, r2, r3
 802821a:	f04f 0a00 	mov.w	sl, #0
 802821e:	bfcc      	ite	gt
 8028220:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8028224:	ea03 0b01 	andle.w	fp, r3, r1
 8028228:	2200      	movs	r2, #0
 802822a:	2300      	movs	r3, #0
 802822c:	4650      	mov	r0, sl
 802822e:	4659      	mov	r1, fp
 8028230:	f7d8 fc5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8028234:	2800      	cmp	r0, #0
 8028236:	d1a4      	bne.n	8028182 <_strtod_l+0x57a>
 8028238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802823a:	9300      	str	r3, [sp, #0]
 802823c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802823e:	462b      	mov	r3, r5
 8028240:	463a      	mov	r2, r7
 8028242:	4620      	mov	r0, r4
 8028244:	f001 fe0c 	bl	8029e60 <__s2b>
 8028248:	9009      	str	r0, [sp, #36]	; 0x24
 802824a:	2800      	cmp	r0, #0
 802824c:	f43f af24 	beq.w	8028098 <_strtod_l+0x490>
 8028250:	9b07      	ldr	r3, [sp, #28]
 8028252:	1b9e      	subs	r6, r3, r6
 8028254:	9b08      	ldr	r3, [sp, #32]
 8028256:	2b00      	cmp	r3, #0
 8028258:	bfb4      	ite	lt
 802825a:	4633      	movlt	r3, r6
 802825c:	2300      	movge	r3, #0
 802825e:	9310      	str	r3, [sp, #64]	; 0x40
 8028260:	9b08      	ldr	r3, [sp, #32]
 8028262:	2500      	movs	r5, #0
 8028264:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8028268:	9318      	str	r3, [sp, #96]	; 0x60
 802826a:	462e      	mov	r6, r5
 802826c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802826e:	4620      	mov	r0, r4
 8028270:	6859      	ldr	r1, [r3, #4]
 8028272:	f001 fd49 	bl	8029d08 <_Balloc>
 8028276:	9007      	str	r0, [sp, #28]
 8028278:	2800      	cmp	r0, #0
 802827a:	f43f af11 	beq.w	80280a0 <_strtod_l+0x498>
 802827e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028280:	691a      	ldr	r2, [r3, #16]
 8028282:	3202      	adds	r2, #2
 8028284:	f103 010c 	add.w	r1, r3, #12
 8028288:	0092      	lsls	r2, r2, #2
 802828a:	300c      	adds	r0, #12
 802828c:	f7fe f98c 	bl	80265a8 <memcpy>
 8028290:	ec4b ab10 	vmov	d0, sl, fp
 8028294:	aa20      	add	r2, sp, #128	; 0x80
 8028296:	a91f      	add	r1, sp, #124	; 0x7c
 8028298:	4620      	mov	r0, r4
 802829a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 802829e:	f002 f91b 	bl	802a4d8 <__d2b>
 80282a2:	901e      	str	r0, [sp, #120]	; 0x78
 80282a4:	2800      	cmp	r0, #0
 80282a6:	f43f aefb 	beq.w	80280a0 <_strtod_l+0x498>
 80282aa:	2101      	movs	r1, #1
 80282ac:	4620      	mov	r0, r4
 80282ae:	f001 fe71 	bl	8029f94 <__i2b>
 80282b2:	4606      	mov	r6, r0
 80282b4:	2800      	cmp	r0, #0
 80282b6:	f43f aef3 	beq.w	80280a0 <_strtod_l+0x498>
 80282ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80282bc:	9904      	ldr	r1, [sp, #16]
 80282be:	2b00      	cmp	r3, #0
 80282c0:	bfab      	itete	ge
 80282c2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80282c4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80282c6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80282c8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80282cc:	bfac      	ite	ge
 80282ce:	eb03 0902 	addge.w	r9, r3, r2
 80282d2:	1ad7      	sublt	r7, r2, r3
 80282d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80282d6:	eba3 0801 	sub.w	r8, r3, r1
 80282da:	4490      	add	r8, r2
 80282dc:	4ba3      	ldr	r3, [pc, #652]	; (802856c <_strtod_l+0x964>)
 80282de:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80282e2:	4598      	cmp	r8, r3
 80282e4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80282e8:	f280 80cc 	bge.w	8028484 <_strtod_l+0x87c>
 80282ec:	eba3 0308 	sub.w	r3, r3, r8
 80282f0:	2b1f      	cmp	r3, #31
 80282f2:	eba2 0203 	sub.w	r2, r2, r3
 80282f6:	f04f 0101 	mov.w	r1, #1
 80282fa:	f300 80b6 	bgt.w	802846a <_strtod_l+0x862>
 80282fe:	fa01 f303 	lsl.w	r3, r1, r3
 8028302:	9311      	str	r3, [sp, #68]	; 0x44
 8028304:	2300      	movs	r3, #0
 8028306:	930c      	str	r3, [sp, #48]	; 0x30
 8028308:	eb09 0802 	add.w	r8, r9, r2
 802830c:	9b04      	ldr	r3, [sp, #16]
 802830e:	45c1      	cmp	r9, r8
 8028310:	4417      	add	r7, r2
 8028312:	441f      	add	r7, r3
 8028314:	464b      	mov	r3, r9
 8028316:	bfa8      	it	ge
 8028318:	4643      	movge	r3, r8
 802831a:	42bb      	cmp	r3, r7
 802831c:	bfa8      	it	ge
 802831e:	463b      	movge	r3, r7
 8028320:	2b00      	cmp	r3, #0
 8028322:	bfc2      	ittt	gt
 8028324:	eba8 0803 	subgt.w	r8, r8, r3
 8028328:	1aff      	subgt	r7, r7, r3
 802832a:	eba9 0903 	subgt.w	r9, r9, r3
 802832e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8028330:	2b00      	cmp	r3, #0
 8028332:	dd17      	ble.n	8028364 <_strtod_l+0x75c>
 8028334:	4631      	mov	r1, r6
 8028336:	461a      	mov	r2, r3
 8028338:	4620      	mov	r0, r4
 802833a:	f001 fee7 	bl	802a10c <__pow5mult>
 802833e:	4606      	mov	r6, r0
 8028340:	2800      	cmp	r0, #0
 8028342:	f43f aead 	beq.w	80280a0 <_strtod_l+0x498>
 8028346:	4601      	mov	r1, r0
 8028348:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802834a:	4620      	mov	r0, r4
 802834c:	f001 fe38 	bl	8029fc0 <__multiply>
 8028350:	900f      	str	r0, [sp, #60]	; 0x3c
 8028352:	2800      	cmp	r0, #0
 8028354:	f43f aea4 	beq.w	80280a0 <_strtod_l+0x498>
 8028358:	991e      	ldr	r1, [sp, #120]	; 0x78
 802835a:	4620      	mov	r0, r4
 802835c:	f001 fd14 	bl	8029d88 <_Bfree>
 8028360:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028362:	931e      	str	r3, [sp, #120]	; 0x78
 8028364:	f1b8 0f00 	cmp.w	r8, #0
 8028368:	f300 8091 	bgt.w	802848e <_strtod_l+0x886>
 802836c:	9b08      	ldr	r3, [sp, #32]
 802836e:	2b00      	cmp	r3, #0
 8028370:	dd08      	ble.n	8028384 <_strtod_l+0x77c>
 8028372:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8028374:	9907      	ldr	r1, [sp, #28]
 8028376:	4620      	mov	r0, r4
 8028378:	f001 fec8 	bl	802a10c <__pow5mult>
 802837c:	9007      	str	r0, [sp, #28]
 802837e:	2800      	cmp	r0, #0
 8028380:	f43f ae8e 	beq.w	80280a0 <_strtod_l+0x498>
 8028384:	2f00      	cmp	r7, #0
 8028386:	dd08      	ble.n	802839a <_strtod_l+0x792>
 8028388:	9907      	ldr	r1, [sp, #28]
 802838a:	463a      	mov	r2, r7
 802838c:	4620      	mov	r0, r4
 802838e:	f001 ff17 	bl	802a1c0 <__lshift>
 8028392:	9007      	str	r0, [sp, #28]
 8028394:	2800      	cmp	r0, #0
 8028396:	f43f ae83 	beq.w	80280a0 <_strtod_l+0x498>
 802839a:	f1b9 0f00 	cmp.w	r9, #0
 802839e:	dd08      	ble.n	80283b2 <_strtod_l+0x7aa>
 80283a0:	4631      	mov	r1, r6
 80283a2:	464a      	mov	r2, r9
 80283a4:	4620      	mov	r0, r4
 80283a6:	f001 ff0b 	bl	802a1c0 <__lshift>
 80283aa:	4606      	mov	r6, r0
 80283ac:	2800      	cmp	r0, #0
 80283ae:	f43f ae77 	beq.w	80280a0 <_strtod_l+0x498>
 80283b2:	9a07      	ldr	r2, [sp, #28]
 80283b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80283b6:	4620      	mov	r0, r4
 80283b8:	f001 ff8a 	bl	802a2d0 <__mdiff>
 80283bc:	4605      	mov	r5, r0
 80283be:	2800      	cmp	r0, #0
 80283c0:	f43f ae6e 	beq.w	80280a0 <_strtod_l+0x498>
 80283c4:	68c3      	ldr	r3, [r0, #12]
 80283c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80283c8:	2300      	movs	r3, #0
 80283ca:	60c3      	str	r3, [r0, #12]
 80283cc:	4631      	mov	r1, r6
 80283ce:	f001 ff63 	bl	802a298 <__mcmp>
 80283d2:	2800      	cmp	r0, #0
 80283d4:	da65      	bge.n	80284a2 <_strtod_l+0x89a>
 80283d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80283d8:	ea53 030a 	orrs.w	r3, r3, sl
 80283dc:	f040 8087 	bne.w	80284ee <_strtod_l+0x8e6>
 80283e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80283e4:	2b00      	cmp	r3, #0
 80283e6:	f040 8082 	bne.w	80284ee <_strtod_l+0x8e6>
 80283ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80283ee:	0d1b      	lsrs	r3, r3, #20
 80283f0:	051b      	lsls	r3, r3, #20
 80283f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80283f6:	d97a      	bls.n	80284ee <_strtod_l+0x8e6>
 80283f8:	696b      	ldr	r3, [r5, #20]
 80283fa:	b913      	cbnz	r3, 8028402 <_strtod_l+0x7fa>
 80283fc:	692b      	ldr	r3, [r5, #16]
 80283fe:	2b01      	cmp	r3, #1
 8028400:	dd75      	ble.n	80284ee <_strtod_l+0x8e6>
 8028402:	4629      	mov	r1, r5
 8028404:	2201      	movs	r2, #1
 8028406:	4620      	mov	r0, r4
 8028408:	f001 feda 	bl	802a1c0 <__lshift>
 802840c:	4631      	mov	r1, r6
 802840e:	4605      	mov	r5, r0
 8028410:	f001 ff42 	bl	802a298 <__mcmp>
 8028414:	2800      	cmp	r0, #0
 8028416:	dd6a      	ble.n	80284ee <_strtod_l+0x8e6>
 8028418:	9904      	ldr	r1, [sp, #16]
 802841a:	4a55      	ldr	r2, [pc, #340]	; (8028570 <_strtod_l+0x968>)
 802841c:	465b      	mov	r3, fp
 802841e:	2900      	cmp	r1, #0
 8028420:	f000 8085 	beq.w	802852e <_strtod_l+0x926>
 8028424:	ea02 010b 	and.w	r1, r2, fp
 8028428:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802842c:	dc7f      	bgt.n	802852e <_strtod_l+0x926>
 802842e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8028432:	f77f aeaa 	ble.w	802818a <_strtod_l+0x582>
 8028436:	4a4f      	ldr	r2, [pc, #316]	; (8028574 <_strtod_l+0x96c>)
 8028438:	2300      	movs	r3, #0
 802843a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 802843e:	4650      	mov	r0, sl
 8028440:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8028444:	4659      	mov	r1, fp
 8028446:	f7d8 f8e7 	bl	8000618 <__aeabi_dmul>
 802844a:	460b      	mov	r3, r1
 802844c:	4303      	orrs	r3, r0
 802844e:	bf08      	it	eq
 8028450:	2322      	moveq	r3, #34	; 0x22
 8028452:	4682      	mov	sl, r0
 8028454:	468b      	mov	fp, r1
 8028456:	bf08      	it	eq
 8028458:	6023      	streq	r3, [r4, #0]
 802845a:	e62b      	b.n	80280b4 <_strtod_l+0x4ac>
 802845c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8028460:	fa02 f303 	lsl.w	r3, r2, r3
 8028464:	ea03 0a0a 	and.w	sl, r3, sl
 8028468:	e6de      	b.n	8028228 <_strtod_l+0x620>
 802846a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 802846e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8028472:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8028476:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 802847a:	fa01 f308 	lsl.w	r3, r1, r8
 802847e:	930c      	str	r3, [sp, #48]	; 0x30
 8028480:	9111      	str	r1, [sp, #68]	; 0x44
 8028482:	e741      	b.n	8028308 <_strtod_l+0x700>
 8028484:	2300      	movs	r3, #0
 8028486:	930c      	str	r3, [sp, #48]	; 0x30
 8028488:	2301      	movs	r3, #1
 802848a:	9311      	str	r3, [sp, #68]	; 0x44
 802848c:	e73c      	b.n	8028308 <_strtod_l+0x700>
 802848e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8028490:	4642      	mov	r2, r8
 8028492:	4620      	mov	r0, r4
 8028494:	f001 fe94 	bl	802a1c0 <__lshift>
 8028498:	901e      	str	r0, [sp, #120]	; 0x78
 802849a:	2800      	cmp	r0, #0
 802849c:	f47f af66 	bne.w	802836c <_strtod_l+0x764>
 80284a0:	e5fe      	b.n	80280a0 <_strtod_l+0x498>
 80284a2:	465f      	mov	r7, fp
 80284a4:	d16e      	bne.n	8028584 <_strtod_l+0x97c>
 80284a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80284a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80284ac:	b342      	cbz	r2, 8028500 <_strtod_l+0x8f8>
 80284ae:	4a32      	ldr	r2, [pc, #200]	; (8028578 <_strtod_l+0x970>)
 80284b0:	4293      	cmp	r3, r2
 80284b2:	d128      	bne.n	8028506 <_strtod_l+0x8fe>
 80284b4:	9b04      	ldr	r3, [sp, #16]
 80284b6:	4650      	mov	r0, sl
 80284b8:	b1eb      	cbz	r3, 80284f6 <_strtod_l+0x8ee>
 80284ba:	4a2d      	ldr	r2, [pc, #180]	; (8028570 <_strtod_l+0x968>)
 80284bc:	403a      	ands	r2, r7
 80284be:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80284c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80284c6:	d819      	bhi.n	80284fc <_strtod_l+0x8f4>
 80284c8:	0d12      	lsrs	r2, r2, #20
 80284ca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80284ce:	fa01 f303 	lsl.w	r3, r1, r3
 80284d2:	4298      	cmp	r0, r3
 80284d4:	d117      	bne.n	8028506 <_strtod_l+0x8fe>
 80284d6:	4b29      	ldr	r3, [pc, #164]	; (802857c <_strtod_l+0x974>)
 80284d8:	429f      	cmp	r7, r3
 80284da:	d102      	bne.n	80284e2 <_strtod_l+0x8da>
 80284dc:	3001      	adds	r0, #1
 80284de:	f43f addf 	beq.w	80280a0 <_strtod_l+0x498>
 80284e2:	4b23      	ldr	r3, [pc, #140]	; (8028570 <_strtod_l+0x968>)
 80284e4:	403b      	ands	r3, r7
 80284e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80284ea:	f04f 0a00 	mov.w	sl, #0
 80284ee:	9b04      	ldr	r3, [sp, #16]
 80284f0:	2b00      	cmp	r3, #0
 80284f2:	d1a0      	bne.n	8028436 <_strtod_l+0x82e>
 80284f4:	e5de      	b.n	80280b4 <_strtod_l+0x4ac>
 80284f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80284fa:	e7ea      	b.n	80284d2 <_strtod_l+0x8ca>
 80284fc:	460b      	mov	r3, r1
 80284fe:	e7e8      	b.n	80284d2 <_strtod_l+0x8ca>
 8028500:	ea53 030a 	orrs.w	r3, r3, sl
 8028504:	d088      	beq.n	8028418 <_strtod_l+0x810>
 8028506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028508:	b1db      	cbz	r3, 8028542 <_strtod_l+0x93a>
 802850a:	423b      	tst	r3, r7
 802850c:	d0ef      	beq.n	80284ee <_strtod_l+0x8e6>
 802850e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028510:	9a04      	ldr	r2, [sp, #16]
 8028512:	4650      	mov	r0, sl
 8028514:	4659      	mov	r1, fp
 8028516:	b1c3      	cbz	r3, 802854a <_strtod_l+0x942>
 8028518:	f7ff fb59 	bl	8027bce <sulp>
 802851c:	4602      	mov	r2, r0
 802851e:	460b      	mov	r3, r1
 8028520:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8028524:	f7d7 fec2 	bl	80002ac <__adddf3>
 8028528:	4682      	mov	sl, r0
 802852a:	468b      	mov	fp, r1
 802852c:	e7df      	b.n	80284ee <_strtod_l+0x8e6>
 802852e:	4013      	ands	r3, r2
 8028530:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8028534:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8028538:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802853c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8028540:	e7d5      	b.n	80284ee <_strtod_l+0x8e6>
 8028542:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8028544:	ea13 0f0a 	tst.w	r3, sl
 8028548:	e7e0      	b.n	802850c <_strtod_l+0x904>
 802854a:	f7ff fb40 	bl	8027bce <sulp>
 802854e:	4602      	mov	r2, r0
 8028550:	460b      	mov	r3, r1
 8028552:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8028556:	f7d7 fea7 	bl	80002a8 <__aeabi_dsub>
 802855a:	2200      	movs	r2, #0
 802855c:	2300      	movs	r3, #0
 802855e:	4682      	mov	sl, r0
 8028560:	468b      	mov	fp, r1
 8028562:	f7d8 fac1 	bl	8000ae8 <__aeabi_dcmpeq>
 8028566:	2800      	cmp	r0, #0
 8028568:	d0c1      	beq.n	80284ee <_strtod_l+0x8e6>
 802856a:	e60e      	b.n	802818a <_strtod_l+0x582>
 802856c:	fffffc02 	.word	0xfffffc02
 8028570:	7ff00000 	.word	0x7ff00000
 8028574:	39500000 	.word	0x39500000
 8028578:	000fffff 	.word	0x000fffff
 802857c:	7fefffff 	.word	0x7fefffff
 8028580:	08060c90 	.word	0x08060c90
 8028584:	4631      	mov	r1, r6
 8028586:	4628      	mov	r0, r5
 8028588:	f002 f802 	bl	802a590 <__ratio>
 802858c:	ec59 8b10 	vmov	r8, r9, d0
 8028590:	ee10 0a10 	vmov	r0, s0
 8028594:	2200      	movs	r2, #0
 8028596:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802859a:	4649      	mov	r1, r9
 802859c:	f7d8 fab8 	bl	8000b10 <__aeabi_dcmple>
 80285a0:	2800      	cmp	r0, #0
 80285a2:	d07c      	beq.n	802869e <_strtod_l+0xa96>
 80285a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80285a6:	2b00      	cmp	r3, #0
 80285a8:	d04c      	beq.n	8028644 <_strtod_l+0xa3c>
 80285aa:	4b95      	ldr	r3, [pc, #596]	; (8028800 <_strtod_l+0xbf8>)
 80285ac:	2200      	movs	r2, #0
 80285ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80285b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8028800 <_strtod_l+0xbf8>
 80285b6:	f04f 0800 	mov.w	r8, #0
 80285ba:	4b92      	ldr	r3, [pc, #584]	; (8028804 <_strtod_l+0xbfc>)
 80285bc:	403b      	ands	r3, r7
 80285be:	9311      	str	r3, [sp, #68]	; 0x44
 80285c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80285c2:	4b91      	ldr	r3, [pc, #580]	; (8028808 <_strtod_l+0xc00>)
 80285c4:	429a      	cmp	r2, r3
 80285c6:	f040 80b2 	bne.w	802872e <_strtod_l+0xb26>
 80285ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80285ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80285d2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80285d6:	ec4b ab10 	vmov	d0, sl, fp
 80285da:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80285de:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80285e2:	f001 fefd 	bl	802a3e0 <__ulp>
 80285e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80285ea:	ec53 2b10 	vmov	r2, r3, d0
 80285ee:	f7d8 f813 	bl	8000618 <__aeabi_dmul>
 80285f2:	4652      	mov	r2, sl
 80285f4:	465b      	mov	r3, fp
 80285f6:	f7d7 fe59 	bl	80002ac <__adddf3>
 80285fa:	460b      	mov	r3, r1
 80285fc:	4981      	ldr	r1, [pc, #516]	; (8028804 <_strtod_l+0xbfc>)
 80285fe:	4a83      	ldr	r2, [pc, #524]	; (802880c <_strtod_l+0xc04>)
 8028600:	4019      	ands	r1, r3
 8028602:	4291      	cmp	r1, r2
 8028604:	4682      	mov	sl, r0
 8028606:	d95e      	bls.n	80286c6 <_strtod_l+0xabe>
 8028608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802860a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 802860e:	4293      	cmp	r3, r2
 8028610:	d103      	bne.n	802861a <_strtod_l+0xa12>
 8028612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028614:	3301      	adds	r3, #1
 8028616:	f43f ad43 	beq.w	80280a0 <_strtod_l+0x498>
 802861a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8028818 <_strtod_l+0xc10>
 802861e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8028622:	991e      	ldr	r1, [sp, #120]	; 0x78
 8028624:	4620      	mov	r0, r4
 8028626:	f001 fbaf 	bl	8029d88 <_Bfree>
 802862a:	9907      	ldr	r1, [sp, #28]
 802862c:	4620      	mov	r0, r4
 802862e:	f001 fbab 	bl	8029d88 <_Bfree>
 8028632:	4631      	mov	r1, r6
 8028634:	4620      	mov	r0, r4
 8028636:	f001 fba7 	bl	8029d88 <_Bfree>
 802863a:	4629      	mov	r1, r5
 802863c:	4620      	mov	r0, r4
 802863e:	f001 fba3 	bl	8029d88 <_Bfree>
 8028642:	e613      	b.n	802826c <_strtod_l+0x664>
 8028644:	f1ba 0f00 	cmp.w	sl, #0
 8028648:	d11b      	bne.n	8028682 <_strtod_l+0xa7a>
 802864a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802864e:	b9f3      	cbnz	r3, 802868e <_strtod_l+0xa86>
 8028650:	4b6b      	ldr	r3, [pc, #428]	; (8028800 <_strtod_l+0xbf8>)
 8028652:	2200      	movs	r2, #0
 8028654:	4640      	mov	r0, r8
 8028656:	4649      	mov	r1, r9
 8028658:	f7d8 fa50 	bl	8000afc <__aeabi_dcmplt>
 802865c:	b9d0      	cbnz	r0, 8028694 <_strtod_l+0xa8c>
 802865e:	4640      	mov	r0, r8
 8028660:	4649      	mov	r1, r9
 8028662:	4b6b      	ldr	r3, [pc, #428]	; (8028810 <_strtod_l+0xc08>)
 8028664:	2200      	movs	r2, #0
 8028666:	f7d7 ffd7 	bl	8000618 <__aeabi_dmul>
 802866a:	4680      	mov	r8, r0
 802866c:	4689      	mov	r9, r1
 802866e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8028672:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8028676:	931b      	str	r3, [sp, #108]	; 0x6c
 8028678:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 802867c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8028680:	e79b      	b.n	80285ba <_strtod_l+0x9b2>
 8028682:	f1ba 0f01 	cmp.w	sl, #1
 8028686:	d102      	bne.n	802868e <_strtod_l+0xa86>
 8028688:	2f00      	cmp	r7, #0
 802868a:	f43f ad7e 	beq.w	802818a <_strtod_l+0x582>
 802868e:	4b61      	ldr	r3, [pc, #388]	; (8028814 <_strtod_l+0xc0c>)
 8028690:	2200      	movs	r2, #0
 8028692:	e78c      	b.n	80285ae <_strtod_l+0x9a6>
 8028694:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8028810 <_strtod_l+0xc08>
 8028698:	f04f 0800 	mov.w	r8, #0
 802869c:	e7e7      	b.n	802866e <_strtod_l+0xa66>
 802869e:	4b5c      	ldr	r3, [pc, #368]	; (8028810 <_strtod_l+0xc08>)
 80286a0:	4640      	mov	r0, r8
 80286a2:	4649      	mov	r1, r9
 80286a4:	2200      	movs	r2, #0
 80286a6:	f7d7 ffb7 	bl	8000618 <__aeabi_dmul>
 80286aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80286ac:	4680      	mov	r8, r0
 80286ae:	4689      	mov	r9, r1
 80286b0:	b933      	cbnz	r3, 80286c0 <_strtod_l+0xab8>
 80286b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80286b6:	9012      	str	r0, [sp, #72]	; 0x48
 80286b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80286ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80286be:	e7dd      	b.n	802867c <_strtod_l+0xa74>
 80286c0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80286c4:	e7f9      	b.n	80286ba <_strtod_l+0xab2>
 80286c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80286ca:	9b04      	ldr	r3, [sp, #16]
 80286cc:	2b00      	cmp	r3, #0
 80286ce:	d1a8      	bne.n	8028622 <_strtod_l+0xa1a>
 80286d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80286d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80286d6:	0d1b      	lsrs	r3, r3, #20
 80286d8:	051b      	lsls	r3, r3, #20
 80286da:	429a      	cmp	r2, r3
 80286dc:	d1a1      	bne.n	8028622 <_strtod_l+0xa1a>
 80286de:	4640      	mov	r0, r8
 80286e0:	4649      	mov	r1, r9
 80286e2:	f7d8 faf9 	bl	8000cd8 <__aeabi_d2lz>
 80286e6:	f7d7 ff69 	bl	80005bc <__aeabi_l2d>
 80286ea:	4602      	mov	r2, r0
 80286ec:	460b      	mov	r3, r1
 80286ee:	4640      	mov	r0, r8
 80286f0:	4649      	mov	r1, r9
 80286f2:	f7d7 fdd9 	bl	80002a8 <__aeabi_dsub>
 80286f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80286f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80286fc:	ea43 030a 	orr.w	r3, r3, sl
 8028700:	4313      	orrs	r3, r2
 8028702:	4680      	mov	r8, r0
 8028704:	4689      	mov	r9, r1
 8028706:	d053      	beq.n	80287b0 <_strtod_l+0xba8>
 8028708:	a335      	add	r3, pc, #212	; (adr r3, 80287e0 <_strtod_l+0xbd8>)
 802870a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802870e:	f7d8 f9f5 	bl	8000afc <__aeabi_dcmplt>
 8028712:	2800      	cmp	r0, #0
 8028714:	f47f acce 	bne.w	80280b4 <_strtod_l+0x4ac>
 8028718:	a333      	add	r3, pc, #204	; (adr r3, 80287e8 <_strtod_l+0xbe0>)
 802871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802871e:	4640      	mov	r0, r8
 8028720:	4649      	mov	r1, r9
 8028722:	f7d8 fa09 	bl	8000b38 <__aeabi_dcmpgt>
 8028726:	2800      	cmp	r0, #0
 8028728:	f43f af7b 	beq.w	8028622 <_strtod_l+0xa1a>
 802872c:	e4c2      	b.n	80280b4 <_strtod_l+0x4ac>
 802872e:	9b04      	ldr	r3, [sp, #16]
 8028730:	b333      	cbz	r3, 8028780 <_strtod_l+0xb78>
 8028732:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8028734:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8028738:	d822      	bhi.n	8028780 <_strtod_l+0xb78>
 802873a:	a32d      	add	r3, pc, #180	; (adr r3, 80287f0 <_strtod_l+0xbe8>)
 802873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028740:	4640      	mov	r0, r8
 8028742:	4649      	mov	r1, r9
 8028744:	f7d8 f9e4 	bl	8000b10 <__aeabi_dcmple>
 8028748:	b1a0      	cbz	r0, 8028774 <_strtod_l+0xb6c>
 802874a:	4649      	mov	r1, r9
 802874c:	4640      	mov	r0, r8
 802874e:	f7d8 fa3b 	bl	8000bc8 <__aeabi_d2uiz>
 8028752:	2801      	cmp	r0, #1
 8028754:	bf38      	it	cc
 8028756:	2001      	movcc	r0, #1
 8028758:	f7d7 fee4 	bl	8000524 <__aeabi_ui2d>
 802875c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802875e:	4680      	mov	r8, r0
 8028760:	4689      	mov	r9, r1
 8028762:	bb13      	cbnz	r3, 80287aa <_strtod_l+0xba2>
 8028764:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8028768:	9014      	str	r0, [sp, #80]	; 0x50
 802876a:	9315      	str	r3, [sp, #84]	; 0x54
 802876c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8028770:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8028774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028776:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8028778:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 802877c:	1a9b      	subs	r3, r3, r2
 802877e:	930d      	str	r3, [sp, #52]	; 0x34
 8028780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8028784:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8028788:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802878c:	f001 fe28 	bl	802a3e0 <__ulp>
 8028790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8028794:	ec53 2b10 	vmov	r2, r3, d0
 8028798:	f7d7 ff3e 	bl	8000618 <__aeabi_dmul>
 802879c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80287a0:	f7d7 fd84 	bl	80002ac <__adddf3>
 80287a4:	4682      	mov	sl, r0
 80287a6:	468b      	mov	fp, r1
 80287a8:	e78f      	b.n	80286ca <_strtod_l+0xac2>
 80287aa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80287ae:	e7dd      	b.n	802876c <_strtod_l+0xb64>
 80287b0:	a311      	add	r3, pc, #68	; (adr r3, 80287f8 <_strtod_l+0xbf0>)
 80287b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80287b6:	f7d8 f9a1 	bl	8000afc <__aeabi_dcmplt>
 80287ba:	e7b4      	b.n	8028726 <_strtod_l+0xb1e>
 80287bc:	2300      	movs	r3, #0
 80287be:	930e      	str	r3, [sp, #56]	; 0x38
 80287c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80287c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80287c4:	6013      	str	r3, [r2, #0]
 80287c6:	f7ff ba65 	b.w	8027c94 <_strtod_l+0x8c>
 80287ca:	2b65      	cmp	r3, #101	; 0x65
 80287cc:	f43f ab5d 	beq.w	8027e8a <_strtod_l+0x282>
 80287d0:	2b45      	cmp	r3, #69	; 0x45
 80287d2:	f43f ab5a 	beq.w	8027e8a <_strtod_l+0x282>
 80287d6:	2201      	movs	r2, #1
 80287d8:	f7ff bb92 	b.w	8027f00 <_strtod_l+0x2f8>
 80287dc:	f3af 8000 	nop.w
 80287e0:	94a03595 	.word	0x94a03595
 80287e4:	3fdfffff 	.word	0x3fdfffff
 80287e8:	35afe535 	.word	0x35afe535
 80287ec:	3fe00000 	.word	0x3fe00000
 80287f0:	ffc00000 	.word	0xffc00000
 80287f4:	41dfffff 	.word	0x41dfffff
 80287f8:	94a03595 	.word	0x94a03595
 80287fc:	3fcfffff 	.word	0x3fcfffff
 8028800:	3ff00000 	.word	0x3ff00000
 8028804:	7ff00000 	.word	0x7ff00000
 8028808:	7fe00000 	.word	0x7fe00000
 802880c:	7c9fffff 	.word	0x7c9fffff
 8028810:	3fe00000 	.word	0x3fe00000
 8028814:	bff00000 	.word	0xbff00000
 8028818:	7fefffff 	.word	0x7fefffff

0802881c <strtod>:
 802881c:	460a      	mov	r2, r1
 802881e:	4601      	mov	r1, r0
 8028820:	4802      	ldr	r0, [pc, #8]	; (802882c <strtod+0x10>)
 8028822:	4b03      	ldr	r3, [pc, #12]	; (8028830 <strtod+0x14>)
 8028824:	6800      	ldr	r0, [r0, #0]
 8028826:	f7ff b9ef 	b.w	8027c08 <_strtod_l>
 802882a:	bf00      	nop
 802882c:	20000064 	.word	0x20000064
 8028830:	2000012c 	.word	0x2000012c

08028834 <__strtok_r>:
 8028834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028836:	b908      	cbnz	r0, 802883c <__strtok_r+0x8>
 8028838:	6810      	ldr	r0, [r2, #0]
 802883a:	b188      	cbz	r0, 8028860 <__strtok_r+0x2c>
 802883c:	4604      	mov	r4, r0
 802883e:	4620      	mov	r0, r4
 8028840:	f814 5b01 	ldrb.w	r5, [r4], #1
 8028844:	460f      	mov	r7, r1
 8028846:	f817 6b01 	ldrb.w	r6, [r7], #1
 802884a:	b91e      	cbnz	r6, 8028854 <__strtok_r+0x20>
 802884c:	b965      	cbnz	r5, 8028868 <__strtok_r+0x34>
 802884e:	6015      	str	r5, [r2, #0]
 8028850:	4628      	mov	r0, r5
 8028852:	e005      	b.n	8028860 <__strtok_r+0x2c>
 8028854:	42b5      	cmp	r5, r6
 8028856:	d1f6      	bne.n	8028846 <__strtok_r+0x12>
 8028858:	2b00      	cmp	r3, #0
 802885a:	d1f0      	bne.n	802883e <__strtok_r+0xa>
 802885c:	6014      	str	r4, [r2, #0]
 802885e:	7003      	strb	r3, [r0, #0]
 8028860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028862:	461c      	mov	r4, r3
 8028864:	e00c      	b.n	8028880 <__strtok_r+0x4c>
 8028866:	b915      	cbnz	r5, 802886e <__strtok_r+0x3a>
 8028868:	f814 3b01 	ldrb.w	r3, [r4], #1
 802886c:	460e      	mov	r6, r1
 802886e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8028872:	42ab      	cmp	r3, r5
 8028874:	d1f7      	bne.n	8028866 <__strtok_r+0x32>
 8028876:	2b00      	cmp	r3, #0
 8028878:	d0f3      	beq.n	8028862 <__strtok_r+0x2e>
 802887a:	2300      	movs	r3, #0
 802887c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8028880:	6014      	str	r4, [r2, #0]
 8028882:	e7ed      	b.n	8028860 <__strtok_r+0x2c>

08028884 <strtok_r>:
 8028884:	2301      	movs	r3, #1
 8028886:	f7ff bfd5 	b.w	8028834 <__strtok_r>
	...

0802888c <_strtol_l.isra.0>:
 802888c:	2b01      	cmp	r3, #1
 802888e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028892:	d001      	beq.n	8028898 <_strtol_l.isra.0+0xc>
 8028894:	2b24      	cmp	r3, #36	; 0x24
 8028896:	d906      	bls.n	80288a6 <_strtol_l.isra.0+0x1a>
 8028898:	f000 fc5e 	bl	8029158 <__errno>
 802889c:	2316      	movs	r3, #22
 802889e:	6003      	str	r3, [r0, #0]
 80288a0:	2000      	movs	r0, #0
 80288a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80288a6:	4f3a      	ldr	r7, [pc, #232]	; (8028990 <_strtol_l.isra.0+0x104>)
 80288a8:	468e      	mov	lr, r1
 80288aa:	4676      	mov	r6, lr
 80288ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80288b0:	5de5      	ldrb	r5, [r4, r7]
 80288b2:	f015 0508 	ands.w	r5, r5, #8
 80288b6:	d1f8      	bne.n	80288aa <_strtol_l.isra.0+0x1e>
 80288b8:	2c2d      	cmp	r4, #45	; 0x2d
 80288ba:	d134      	bne.n	8028926 <_strtol_l.isra.0+0x9a>
 80288bc:	f89e 4000 	ldrb.w	r4, [lr]
 80288c0:	f04f 0801 	mov.w	r8, #1
 80288c4:	f106 0e02 	add.w	lr, r6, #2
 80288c8:	2b00      	cmp	r3, #0
 80288ca:	d05c      	beq.n	8028986 <_strtol_l.isra.0+0xfa>
 80288cc:	2b10      	cmp	r3, #16
 80288ce:	d10c      	bne.n	80288ea <_strtol_l.isra.0+0x5e>
 80288d0:	2c30      	cmp	r4, #48	; 0x30
 80288d2:	d10a      	bne.n	80288ea <_strtol_l.isra.0+0x5e>
 80288d4:	f89e 4000 	ldrb.w	r4, [lr]
 80288d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80288dc:	2c58      	cmp	r4, #88	; 0x58
 80288de:	d14d      	bne.n	802897c <_strtol_l.isra.0+0xf0>
 80288e0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80288e4:	2310      	movs	r3, #16
 80288e6:	f10e 0e02 	add.w	lr, lr, #2
 80288ea:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80288ee:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80288f2:	2600      	movs	r6, #0
 80288f4:	fbbc f9f3 	udiv	r9, ip, r3
 80288f8:	4635      	mov	r5, r6
 80288fa:	fb03 ca19 	mls	sl, r3, r9, ip
 80288fe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8028902:	2f09      	cmp	r7, #9
 8028904:	d818      	bhi.n	8028938 <_strtol_l.isra.0+0xac>
 8028906:	463c      	mov	r4, r7
 8028908:	42a3      	cmp	r3, r4
 802890a:	dd24      	ble.n	8028956 <_strtol_l.isra.0+0xca>
 802890c:	2e00      	cmp	r6, #0
 802890e:	db1f      	blt.n	8028950 <_strtol_l.isra.0+0xc4>
 8028910:	45a9      	cmp	r9, r5
 8028912:	d31d      	bcc.n	8028950 <_strtol_l.isra.0+0xc4>
 8028914:	d101      	bne.n	802891a <_strtol_l.isra.0+0x8e>
 8028916:	45a2      	cmp	sl, r4
 8028918:	db1a      	blt.n	8028950 <_strtol_l.isra.0+0xc4>
 802891a:	fb05 4503 	mla	r5, r5, r3, r4
 802891e:	2601      	movs	r6, #1
 8028920:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8028924:	e7eb      	b.n	80288fe <_strtol_l.isra.0+0x72>
 8028926:	2c2b      	cmp	r4, #43	; 0x2b
 8028928:	bf08      	it	eq
 802892a:	f89e 4000 	ldrbeq.w	r4, [lr]
 802892e:	46a8      	mov	r8, r5
 8028930:	bf08      	it	eq
 8028932:	f106 0e02 	addeq.w	lr, r6, #2
 8028936:	e7c7      	b.n	80288c8 <_strtol_l.isra.0+0x3c>
 8028938:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 802893c:	2f19      	cmp	r7, #25
 802893e:	d801      	bhi.n	8028944 <_strtol_l.isra.0+0xb8>
 8028940:	3c37      	subs	r4, #55	; 0x37
 8028942:	e7e1      	b.n	8028908 <_strtol_l.isra.0+0x7c>
 8028944:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8028948:	2f19      	cmp	r7, #25
 802894a:	d804      	bhi.n	8028956 <_strtol_l.isra.0+0xca>
 802894c:	3c57      	subs	r4, #87	; 0x57
 802894e:	e7db      	b.n	8028908 <_strtol_l.isra.0+0x7c>
 8028950:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8028954:	e7e4      	b.n	8028920 <_strtol_l.isra.0+0x94>
 8028956:	2e00      	cmp	r6, #0
 8028958:	da05      	bge.n	8028966 <_strtol_l.isra.0+0xda>
 802895a:	2322      	movs	r3, #34	; 0x22
 802895c:	6003      	str	r3, [r0, #0]
 802895e:	4665      	mov	r5, ip
 8028960:	b942      	cbnz	r2, 8028974 <_strtol_l.isra.0+0xe8>
 8028962:	4628      	mov	r0, r5
 8028964:	e79d      	b.n	80288a2 <_strtol_l.isra.0+0x16>
 8028966:	f1b8 0f00 	cmp.w	r8, #0
 802896a:	d000      	beq.n	802896e <_strtol_l.isra.0+0xe2>
 802896c:	426d      	negs	r5, r5
 802896e:	2a00      	cmp	r2, #0
 8028970:	d0f7      	beq.n	8028962 <_strtol_l.isra.0+0xd6>
 8028972:	b10e      	cbz	r6, 8028978 <_strtol_l.isra.0+0xec>
 8028974:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8028978:	6011      	str	r1, [r2, #0]
 802897a:	e7f2      	b.n	8028962 <_strtol_l.isra.0+0xd6>
 802897c:	2430      	movs	r4, #48	; 0x30
 802897e:	2b00      	cmp	r3, #0
 8028980:	d1b3      	bne.n	80288ea <_strtol_l.isra.0+0x5e>
 8028982:	2308      	movs	r3, #8
 8028984:	e7b1      	b.n	80288ea <_strtol_l.isra.0+0x5e>
 8028986:	2c30      	cmp	r4, #48	; 0x30
 8028988:	d0a4      	beq.n	80288d4 <_strtol_l.isra.0+0x48>
 802898a:	230a      	movs	r3, #10
 802898c:	e7ad      	b.n	80288ea <_strtol_l.isra.0+0x5e>
 802898e:	bf00      	nop
 8028990:	08060901 	.word	0x08060901

08028994 <_strtol_r>:
 8028994:	f7ff bf7a 	b.w	802888c <_strtol_l.isra.0>

08028998 <strtol>:
 8028998:	4613      	mov	r3, r2
 802899a:	460a      	mov	r2, r1
 802899c:	4601      	mov	r1, r0
 802899e:	4802      	ldr	r0, [pc, #8]	; (80289a8 <strtol+0x10>)
 80289a0:	6800      	ldr	r0, [r0, #0]
 80289a2:	f7ff bf73 	b.w	802888c <_strtol_l.isra.0>
 80289a6:	bf00      	nop
 80289a8:	20000064 	.word	0x20000064

080289ac <_strtoul_l.isra.0>:
 80289ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80289b0:	4e3b      	ldr	r6, [pc, #236]	; (8028aa0 <_strtoul_l.isra.0+0xf4>)
 80289b2:	4686      	mov	lr, r0
 80289b4:	468c      	mov	ip, r1
 80289b6:	4660      	mov	r0, ip
 80289b8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80289bc:	5da5      	ldrb	r5, [r4, r6]
 80289be:	f015 0508 	ands.w	r5, r5, #8
 80289c2:	d1f8      	bne.n	80289b6 <_strtoul_l.isra.0+0xa>
 80289c4:	2c2d      	cmp	r4, #45	; 0x2d
 80289c6:	d134      	bne.n	8028a32 <_strtoul_l.isra.0+0x86>
 80289c8:	f89c 4000 	ldrb.w	r4, [ip]
 80289cc:	f04f 0801 	mov.w	r8, #1
 80289d0:	f100 0c02 	add.w	ip, r0, #2
 80289d4:	2b00      	cmp	r3, #0
 80289d6:	d05e      	beq.n	8028a96 <_strtoul_l.isra.0+0xea>
 80289d8:	2b10      	cmp	r3, #16
 80289da:	d10c      	bne.n	80289f6 <_strtoul_l.isra.0+0x4a>
 80289dc:	2c30      	cmp	r4, #48	; 0x30
 80289de:	d10a      	bne.n	80289f6 <_strtoul_l.isra.0+0x4a>
 80289e0:	f89c 0000 	ldrb.w	r0, [ip]
 80289e4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80289e8:	2858      	cmp	r0, #88	; 0x58
 80289ea:	d14f      	bne.n	8028a8c <_strtoul_l.isra.0+0xe0>
 80289ec:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80289f0:	2310      	movs	r3, #16
 80289f2:	f10c 0c02 	add.w	ip, ip, #2
 80289f6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80289fa:	2500      	movs	r5, #0
 80289fc:	fbb7 f7f3 	udiv	r7, r7, r3
 8028a00:	fb03 f907 	mul.w	r9, r3, r7
 8028a04:	ea6f 0909 	mvn.w	r9, r9
 8028a08:	4628      	mov	r0, r5
 8028a0a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8028a0e:	2e09      	cmp	r6, #9
 8028a10:	d818      	bhi.n	8028a44 <_strtoul_l.isra.0+0x98>
 8028a12:	4634      	mov	r4, r6
 8028a14:	42a3      	cmp	r3, r4
 8028a16:	dd24      	ble.n	8028a62 <_strtoul_l.isra.0+0xb6>
 8028a18:	2d00      	cmp	r5, #0
 8028a1a:	db1f      	blt.n	8028a5c <_strtoul_l.isra.0+0xb0>
 8028a1c:	4287      	cmp	r7, r0
 8028a1e:	d31d      	bcc.n	8028a5c <_strtoul_l.isra.0+0xb0>
 8028a20:	d101      	bne.n	8028a26 <_strtoul_l.isra.0+0x7a>
 8028a22:	45a1      	cmp	r9, r4
 8028a24:	db1a      	blt.n	8028a5c <_strtoul_l.isra.0+0xb0>
 8028a26:	fb00 4003 	mla	r0, r0, r3, r4
 8028a2a:	2501      	movs	r5, #1
 8028a2c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8028a30:	e7eb      	b.n	8028a0a <_strtoul_l.isra.0+0x5e>
 8028a32:	2c2b      	cmp	r4, #43	; 0x2b
 8028a34:	bf08      	it	eq
 8028a36:	f89c 4000 	ldrbeq.w	r4, [ip]
 8028a3a:	46a8      	mov	r8, r5
 8028a3c:	bf08      	it	eq
 8028a3e:	f100 0c02 	addeq.w	ip, r0, #2
 8028a42:	e7c7      	b.n	80289d4 <_strtoul_l.isra.0+0x28>
 8028a44:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8028a48:	2e19      	cmp	r6, #25
 8028a4a:	d801      	bhi.n	8028a50 <_strtoul_l.isra.0+0xa4>
 8028a4c:	3c37      	subs	r4, #55	; 0x37
 8028a4e:	e7e1      	b.n	8028a14 <_strtoul_l.isra.0+0x68>
 8028a50:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8028a54:	2e19      	cmp	r6, #25
 8028a56:	d804      	bhi.n	8028a62 <_strtoul_l.isra.0+0xb6>
 8028a58:	3c57      	subs	r4, #87	; 0x57
 8028a5a:	e7db      	b.n	8028a14 <_strtoul_l.isra.0+0x68>
 8028a5c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8028a60:	e7e4      	b.n	8028a2c <_strtoul_l.isra.0+0x80>
 8028a62:	2d00      	cmp	r5, #0
 8028a64:	da07      	bge.n	8028a76 <_strtoul_l.isra.0+0xca>
 8028a66:	2322      	movs	r3, #34	; 0x22
 8028a68:	f8ce 3000 	str.w	r3, [lr]
 8028a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8028a70:	b942      	cbnz	r2, 8028a84 <_strtoul_l.isra.0+0xd8>
 8028a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028a76:	f1b8 0f00 	cmp.w	r8, #0
 8028a7a:	d000      	beq.n	8028a7e <_strtoul_l.isra.0+0xd2>
 8028a7c:	4240      	negs	r0, r0
 8028a7e:	2a00      	cmp	r2, #0
 8028a80:	d0f7      	beq.n	8028a72 <_strtoul_l.isra.0+0xc6>
 8028a82:	b10d      	cbz	r5, 8028a88 <_strtoul_l.isra.0+0xdc>
 8028a84:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8028a88:	6011      	str	r1, [r2, #0]
 8028a8a:	e7f2      	b.n	8028a72 <_strtoul_l.isra.0+0xc6>
 8028a8c:	2430      	movs	r4, #48	; 0x30
 8028a8e:	2b00      	cmp	r3, #0
 8028a90:	d1b1      	bne.n	80289f6 <_strtoul_l.isra.0+0x4a>
 8028a92:	2308      	movs	r3, #8
 8028a94:	e7af      	b.n	80289f6 <_strtoul_l.isra.0+0x4a>
 8028a96:	2c30      	cmp	r4, #48	; 0x30
 8028a98:	d0a2      	beq.n	80289e0 <_strtoul_l.isra.0+0x34>
 8028a9a:	230a      	movs	r3, #10
 8028a9c:	e7ab      	b.n	80289f6 <_strtoul_l.isra.0+0x4a>
 8028a9e:	bf00      	nop
 8028aa0:	08060901 	.word	0x08060901

08028aa4 <_strtoul_r>:
 8028aa4:	f7ff bf82 	b.w	80289ac <_strtoul_l.isra.0>

08028aa8 <strtoul>:
 8028aa8:	4613      	mov	r3, r2
 8028aaa:	460a      	mov	r2, r1
 8028aac:	4601      	mov	r1, r0
 8028aae:	4802      	ldr	r0, [pc, #8]	; (8028ab8 <strtoul+0x10>)
 8028ab0:	6800      	ldr	r0, [r0, #0]
 8028ab2:	f7ff bf7b 	b.w	80289ac <_strtoul_l.isra.0>
 8028ab6:	bf00      	nop
 8028ab8:	20000064 	.word	0x20000064

08028abc <__tzcalc_limits>:
 8028abc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028ac0:	4680      	mov	r8, r0
 8028ac2:	f000 ffd5 	bl	8029a70 <__gettzinfo>
 8028ac6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8028aca:	4598      	cmp	r8, r3
 8028acc:	f340 8098 	ble.w	8028c00 <__tzcalc_limits+0x144>
 8028ad0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8028ad4:	4443      	add	r3, r8
 8028ad6:	109b      	asrs	r3, r3, #2
 8028ad8:	f240 126d 	movw	r2, #365	; 0x16d
 8028adc:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8028ae0:	fb02 3505 	mla	r5, r2, r5, r3
 8028ae4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8028ae8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8028aec:	fb93 f3f2 	sdiv	r3, r3, r2
 8028af0:	441d      	add	r5, r3
 8028af2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8028af6:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8028afa:	fb98 f7f3 	sdiv	r7, r8, r3
 8028afe:	fb03 8717 	mls	r7, r3, r7, r8
 8028b02:	4442      	add	r2, r8
 8028b04:	fab7 fc87 	clz	ip, r7
 8028b08:	fbb2 f2f3 	udiv	r2, r2, r3
 8028b0c:	f008 0303 	and.w	r3, r8, #3
 8028b10:	4415      	add	r5, r2
 8028b12:	2264      	movs	r2, #100	; 0x64
 8028b14:	f8c0 8004 	str.w	r8, [r0, #4]
 8028b18:	fb98 f6f2 	sdiv	r6, r8, r2
 8028b1c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028b20:	fb02 8616 	mls	r6, r2, r6, r8
 8028b24:	4604      	mov	r4, r0
 8028b26:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8028b2a:	9300      	str	r3, [sp, #0]
 8028b2c:	f04f 0e07 	mov.w	lr, #7
 8028b30:	7a22      	ldrb	r2, [r4, #8]
 8028b32:	6963      	ldr	r3, [r4, #20]
 8028b34:	2a4a      	cmp	r2, #74	; 0x4a
 8028b36:	d128      	bne.n	8028b8a <__tzcalc_limits+0xce>
 8028b38:	9900      	ldr	r1, [sp, #0]
 8028b3a:	18ea      	adds	r2, r5, r3
 8028b3c:	b901      	cbnz	r1, 8028b40 <__tzcalc_limits+0x84>
 8028b3e:	b906      	cbnz	r6, 8028b42 <__tzcalc_limits+0x86>
 8028b40:	bb0f      	cbnz	r7, 8028b86 <__tzcalc_limits+0xca>
 8028b42:	2b3b      	cmp	r3, #59	; 0x3b
 8028b44:	bfd4      	ite	le
 8028b46:	2300      	movle	r3, #0
 8028b48:	2301      	movgt	r3, #1
 8028b4a:	4413      	add	r3, r2
 8028b4c:	1e5a      	subs	r2, r3, #1
 8028b4e:	69a3      	ldr	r3, [r4, #24]
 8028b50:	492c      	ldr	r1, [pc, #176]	; (8028c04 <__tzcalc_limits+0x148>)
 8028b52:	fb01 3202 	mla	r2, r1, r2, r3
 8028b56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8028b58:	4413      	add	r3, r2
 8028b5a:	461a      	mov	r2, r3
 8028b5c:	17db      	asrs	r3, r3, #31
 8028b5e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8028b62:	3428      	adds	r4, #40	; 0x28
 8028b64:	45a3      	cmp	fp, r4
 8028b66:	d1e3      	bne.n	8028b30 <__tzcalc_limits+0x74>
 8028b68:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8028b6c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8028b70:	4294      	cmp	r4, r2
 8028b72:	eb75 0303 	sbcs.w	r3, r5, r3
 8028b76:	bfb4      	ite	lt
 8028b78:	2301      	movlt	r3, #1
 8028b7a:	2300      	movge	r3, #0
 8028b7c:	6003      	str	r3, [r0, #0]
 8028b7e:	2001      	movs	r0, #1
 8028b80:	b003      	add	sp, #12
 8028b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028b86:	2300      	movs	r3, #0
 8028b88:	e7df      	b.n	8028b4a <__tzcalc_limits+0x8e>
 8028b8a:	2a44      	cmp	r2, #68	; 0x44
 8028b8c:	d101      	bne.n	8028b92 <__tzcalc_limits+0xd6>
 8028b8e:	18ea      	adds	r2, r5, r3
 8028b90:	e7dd      	b.n	8028b4e <__tzcalc_limits+0x92>
 8028b92:	9a00      	ldr	r2, [sp, #0]
 8028b94:	bb72      	cbnz	r2, 8028bf4 <__tzcalc_limits+0x138>
 8028b96:	2e00      	cmp	r6, #0
 8028b98:	bf0c      	ite	eq
 8028b9a:	46e0      	moveq	r8, ip
 8028b9c:	f04f 0801 	movne.w	r8, #1
 8028ba0:	4919      	ldr	r1, [pc, #100]	; (8028c08 <__tzcalc_limits+0x14c>)
 8028ba2:	68e2      	ldr	r2, [r4, #12]
 8028ba4:	9201      	str	r2, [sp, #4]
 8028ba6:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8028baa:	fb0a 1808 	mla	r8, sl, r8, r1
 8028bae:	462a      	mov	r2, r5
 8028bb0:	f04f 0900 	mov.w	r9, #0
 8028bb4:	f1a8 0804 	sub.w	r8, r8, #4
 8028bb8:	9901      	ldr	r1, [sp, #4]
 8028bba:	f109 0901 	add.w	r9, r9, #1
 8028bbe:	4549      	cmp	r1, r9
 8028bc0:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8028bc4:	dc18      	bgt.n	8028bf8 <__tzcalc_limits+0x13c>
 8028bc6:	f102 0804 	add.w	r8, r2, #4
 8028bca:	fb98 f9fe 	sdiv	r9, r8, lr
 8028bce:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8028bd2:	eba8 0909 	sub.w	r9, r8, r9
 8028bd6:	ebb3 0909 	subs.w	r9, r3, r9
 8028bda:	6923      	ldr	r3, [r4, #16]
 8028bdc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8028be0:	bf48      	it	mi
 8028be2:	f109 0907 	addmi.w	r9, r9, #7
 8028be6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8028bea:	444b      	add	r3, r9
 8028bec:	4553      	cmp	r3, sl
 8028bee:	da05      	bge.n	8028bfc <__tzcalc_limits+0x140>
 8028bf0:	441a      	add	r2, r3
 8028bf2:	e7ac      	b.n	8028b4e <__tzcalc_limits+0x92>
 8028bf4:	46e0      	mov	r8, ip
 8028bf6:	e7d3      	b.n	8028ba0 <__tzcalc_limits+0xe4>
 8028bf8:	4452      	add	r2, sl
 8028bfa:	e7dd      	b.n	8028bb8 <__tzcalc_limits+0xfc>
 8028bfc:	3b07      	subs	r3, #7
 8028bfe:	e7f5      	b.n	8028bec <__tzcalc_limits+0x130>
 8028c00:	2000      	movs	r0, #0
 8028c02:	e7bd      	b.n	8028b80 <__tzcalc_limits+0xc4>
 8028c04:	00015180 	.word	0x00015180
 8028c08:	08060b40 	.word	0x08060b40

08028c0c <__tz_lock>:
 8028c0c:	4801      	ldr	r0, [pc, #4]	; (8028c14 <__tz_lock+0x8>)
 8028c0e:	f7fd bca8 	b.w	8026562 <__retarget_lock_acquire>
 8028c12:	bf00      	nop
 8028c14:	2001d547 	.word	0x2001d547

08028c18 <__tz_unlock>:
 8028c18:	4801      	ldr	r0, [pc, #4]	; (8028c20 <__tz_unlock+0x8>)
 8028c1a:	f7fd bca4 	b.w	8026566 <__retarget_lock_release>
 8028c1e:	bf00      	nop
 8028c20:	2001d547 	.word	0x2001d547

08028c24 <_tzset_unlocked>:
 8028c24:	4b01      	ldr	r3, [pc, #4]	; (8028c2c <_tzset_unlocked+0x8>)
 8028c26:	6818      	ldr	r0, [r3, #0]
 8028c28:	f000 b802 	b.w	8028c30 <_tzset_unlocked_r>
 8028c2c:	20000064 	.word	0x20000064

08028c30 <_tzset_unlocked_r>:
 8028c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c34:	b08d      	sub	sp, #52	; 0x34
 8028c36:	4607      	mov	r7, r0
 8028c38:	f000 ff1a 	bl	8029a70 <__gettzinfo>
 8028c3c:	49ae      	ldr	r1, [pc, #696]	; (8028ef8 <_tzset_unlocked_r+0x2c8>)
 8028c3e:	4eaf      	ldr	r6, [pc, #700]	; (8028efc <_tzset_unlocked_r+0x2cc>)
 8028c40:	4605      	mov	r5, r0
 8028c42:	4638      	mov	r0, r7
 8028c44:	f000 ff0c 	bl	8029a60 <_getenv_r>
 8028c48:	4604      	mov	r4, r0
 8028c4a:	b970      	cbnz	r0, 8028c6a <_tzset_unlocked_r+0x3a>
 8028c4c:	4bac      	ldr	r3, [pc, #688]	; (8028f00 <_tzset_unlocked_r+0x2d0>)
 8028c4e:	4aad      	ldr	r2, [pc, #692]	; (8028f04 <_tzset_unlocked_r+0x2d4>)
 8028c50:	6018      	str	r0, [r3, #0]
 8028c52:	4bad      	ldr	r3, [pc, #692]	; (8028f08 <_tzset_unlocked_r+0x2d8>)
 8028c54:	6018      	str	r0, [r3, #0]
 8028c56:	4bad      	ldr	r3, [pc, #692]	; (8028f0c <_tzset_unlocked_r+0x2dc>)
 8028c58:	6830      	ldr	r0, [r6, #0]
 8028c5a:	e9c3 2200 	strd	r2, r2, [r3]
 8028c5e:	f7fd fc8d 	bl	802657c <free>
 8028c62:	6034      	str	r4, [r6, #0]
 8028c64:	b00d      	add	sp, #52	; 0x34
 8028c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c6a:	6831      	ldr	r1, [r6, #0]
 8028c6c:	2900      	cmp	r1, #0
 8028c6e:	d15f      	bne.n	8028d30 <_tzset_unlocked_r+0x100>
 8028c70:	6830      	ldr	r0, [r6, #0]
 8028c72:	f7fd fc83 	bl	802657c <free>
 8028c76:	4620      	mov	r0, r4
 8028c78:	f7d7 fab4 	bl	80001e4 <strlen>
 8028c7c:	1c41      	adds	r1, r0, #1
 8028c7e:	4638      	mov	r0, r7
 8028c80:	f7fd ff90 	bl	8026ba4 <_malloc_r>
 8028c84:	6030      	str	r0, [r6, #0]
 8028c86:	2800      	cmp	r0, #0
 8028c88:	d157      	bne.n	8028d3a <_tzset_unlocked_r+0x10a>
 8028c8a:	7823      	ldrb	r3, [r4, #0]
 8028c8c:	4aa0      	ldr	r2, [pc, #640]	; (8028f10 <_tzset_unlocked_r+0x2e0>)
 8028c8e:	49a1      	ldr	r1, [pc, #644]	; (8028f14 <_tzset_unlocked_r+0x2e4>)
 8028c90:	2b3a      	cmp	r3, #58	; 0x3a
 8028c92:	bf08      	it	eq
 8028c94:	3401      	addeq	r4, #1
 8028c96:	ae0a      	add	r6, sp, #40	; 0x28
 8028c98:	4633      	mov	r3, r6
 8028c9a:	4620      	mov	r0, r4
 8028c9c:	f7fe f980 	bl	8026fa0 <siscanf>
 8028ca0:	2800      	cmp	r0, #0
 8028ca2:	dddf      	ble.n	8028c64 <_tzset_unlocked_r+0x34>
 8028ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028ca6:	18e7      	adds	r7, r4, r3
 8028ca8:	5ce3      	ldrb	r3, [r4, r3]
 8028caa:	2b2d      	cmp	r3, #45	; 0x2d
 8028cac:	d149      	bne.n	8028d42 <_tzset_unlocked_r+0x112>
 8028cae:	3701      	adds	r7, #1
 8028cb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8028cb4:	f10d 0a20 	add.w	sl, sp, #32
 8028cb8:	f10d 0b1e 	add.w	fp, sp, #30
 8028cbc:	f04f 0800 	mov.w	r8, #0
 8028cc0:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8028cc4:	4994      	ldr	r1, [pc, #592]	; (8028f18 <_tzset_unlocked_r+0x2e8>)
 8028cc6:	9603      	str	r6, [sp, #12]
 8028cc8:	f8cd b000 	str.w	fp, [sp]
 8028ccc:	4633      	mov	r3, r6
 8028cce:	aa07      	add	r2, sp, #28
 8028cd0:	4638      	mov	r0, r7
 8028cd2:	f8ad 801e 	strh.w	r8, [sp, #30]
 8028cd6:	f8ad 8020 	strh.w	r8, [sp, #32]
 8028cda:	f7fe f961 	bl	8026fa0 <siscanf>
 8028cde:	4540      	cmp	r0, r8
 8028ce0:	ddc0      	ble.n	8028c64 <_tzset_unlocked_r+0x34>
 8028ce2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8028ce6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8028cea:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8028f24 <_tzset_unlocked_r+0x2f4>
 8028cee:	213c      	movs	r1, #60	; 0x3c
 8028cf0:	fb01 2203 	mla	r2, r1, r3, r2
 8028cf4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8028cf8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8028cfc:	fb01 2303 	mla	r3, r1, r3, r2
 8028d00:	435c      	muls	r4, r3
 8028d02:	62ac      	str	r4, [r5, #40]	; 0x28
 8028d04:	4c81      	ldr	r4, [pc, #516]	; (8028f0c <_tzset_unlocked_r+0x2dc>)
 8028d06:	4b82      	ldr	r3, [pc, #520]	; (8028f10 <_tzset_unlocked_r+0x2e0>)
 8028d08:	6023      	str	r3, [r4, #0]
 8028d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028d0c:	4981      	ldr	r1, [pc, #516]	; (8028f14 <_tzset_unlocked_r+0x2e4>)
 8028d0e:	441f      	add	r7, r3
 8028d10:	464a      	mov	r2, r9
 8028d12:	4633      	mov	r3, r6
 8028d14:	4638      	mov	r0, r7
 8028d16:	f7fe f943 	bl	8026fa0 <siscanf>
 8028d1a:	4540      	cmp	r0, r8
 8028d1c:	dc16      	bgt.n	8028d4c <_tzset_unlocked_r+0x11c>
 8028d1e:	6823      	ldr	r3, [r4, #0]
 8028d20:	6063      	str	r3, [r4, #4]
 8028d22:	4b77      	ldr	r3, [pc, #476]	; (8028f00 <_tzset_unlocked_r+0x2d0>)
 8028d24:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8028d26:	601a      	str	r2, [r3, #0]
 8028d28:	4b77      	ldr	r3, [pc, #476]	; (8028f08 <_tzset_unlocked_r+0x2d8>)
 8028d2a:	f8c3 8000 	str.w	r8, [r3]
 8028d2e:	e799      	b.n	8028c64 <_tzset_unlocked_r+0x34>
 8028d30:	f7d7 fa4e 	bl	80001d0 <strcmp>
 8028d34:	2800      	cmp	r0, #0
 8028d36:	d19b      	bne.n	8028c70 <_tzset_unlocked_r+0x40>
 8028d38:	e794      	b.n	8028c64 <_tzset_unlocked_r+0x34>
 8028d3a:	4621      	mov	r1, r4
 8028d3c:	f7fe f9bd 	bl	80270ba <strcpy>
 8028d40:	e7a3      	b.n	8028c8a <_tzset_unlocked_r+0x5a>
 8028d42:	2b2b      	cmp	r3, #43	; 0x2b
 8028d44:	bf08      	it	eq
 8028d46:	3701      	addeq	r7, #1
 8028d48:	2401      	movs	r4, #1
 8028d4a:	e7b3      	b.n	8028cb4 <_tzset_unlocked_r+0x84>
 8028d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028d4e:	f8c4 9004 	str.w	r9, [r4, #4]
 8028d52:	18fc      	adds	r4, r7, r3
 8028d54:	5cfb      	ldrb	r3, [r7, r3]
 8028d56:	2b2d      	cmp	r3, #45	; 0x2d
 8028d58:	f040 808b 	bne.w	8028e72 <_tzset_unlocked_r+0x242>
 8028d5c:	3401      	adds	r4, #1
 8028d5e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8028d62:	2300      	movs	r3, #0
 8028d64:	f8ad 301c 	strh.w	r3, [sp, #28]
 8028d68:	f8ad 301e 	strh.w	r3, [sp, #30]
 8028d6c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8028d70:	930a      	str	r3, [sp, #40]	; 0x28
 8028d72:	e9cd a602 	strd	sl, r6, [sp, #8]
 8028d76:	e9cd b600 	strd	fp, r6, [sp]
 8028d7a:	4967      	ldr	r1, [pc, #412]	; (8028f18 <_tzset_unlocked_r+0x2e8>)
 8028d7c:	4633      	mov	r3, r6
 8028d7e:	aa07      	add	r2, sp, #28
 8028d80:	4620      	mov	r0, r4
 8028d82:	f7fe f90d 	bl	8026fa0 <siscanf>
 8028d86:	2800      	cmp	r0, #0
 8028d88:	dc78      	bgt.n	8028e7c <_tzset_unlocked_r+0x24c>
 8028d8a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8028d8c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8028d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028d92:	652f      	str	r7, [r5, #80]	; 0x50
 8028d94:	441c      	add	r4, r3
 8028d96:	462f      	mov	r7, r5
 8028d98:	f04f 0900 	mov.w	r9, #0
 8028d9c:	7823      	ldrb	r3, [r4, #0]
 8028d9e:	2b2c      	cmp	r3, #44	; 0x2c
 8028da0:	bf08      	it	eq
 8028da2:	3401      	addeq	r4, #1
 8028da4:	f894 8000 	ldrb.w	r8, [r4]
 8028da8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8028dac:	d178      	bne.n	8028ea0 <_tzset_unlocked_r+0x270>
 8028dae:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8028db2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8028db6:	ab09      	add	r3, sp, #36	; 0x24
 8028db8:	9300      	str	r3, [sp, #0]
 8028dba:	4958      	ldr	r1, [pc, #352]	; (8028f1c <_tzset_unlocked_r+0x2ec>)
 8028dbc:	9603      	str	r6, [sp, #12]
 8028dbe:	4633      	mov	r3, r6
 8028dc0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8028dc4:	4620      	mov	r0, r4
 8028dc6:	f7fe f8eb 	bl	8026fa0 <siscanf>
 8028dca:	2803      	cmp	r0, #3
 8028dcc:	f47f af4a 	bne.w	8028c64 <_tzset_unlocked_r+0x34>
 8028dd0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8028dd4:	1e4b      	subs	r3, r1, #1
 8028dd6:	2b0b      	cmp	r3, #11
 8028dd8:	f63f af44 	bhi.w	8028c64 <_tzset_unlocked_r+0x34>
 8028ddc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8028de0:	1e53      	subs	r3, r2, #1
 8028de2:	2b04      	cmp	r3, #4
 8028de4:	f63f af3e 	bhi.w	8028c64 <_tzset_unlocked_r+0x34>
 8028de8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8028dec:	2b06      	cmp	r3, #6
 8028dee:	f63f af39 	bhi.w	8028c64 <_tzset_unlocked_r+0x34>
 8028df2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8028df6:	f887 8008 	strb.w	r8, [r7, #8]
 8028dfa:	617b      	str	r3, [r7, #20]
 8028dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028dfe:	eb04 0803 	add.w	r8, r4, r3
 8028e02:	2302      	movs	r3, #2
 8028e04:	f8ad 301c 	strh.w	r3, [sp, #28]
 8028e08:	2300      	movs	r3, #0
 8028e0a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8028e0e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8028e12:	930a      	str	r3, [sp, #40]	; 0x28
 8028e14:	f898 3000 	ldrb.w	r3, [r8]
 8028e18:	2b2f      	cmp	r3, #47	; 0x2f
 8028e1a:	d109      	bne.n	8028e30 <_tzset_unlocked_r+0x200>
 8028e1c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8028e20:	e9cd b600 	strd	fp, r6, [sp]
 8028e24:	493e      	ldr	r1, [pc, #248]	; (8028f20 <_tzset_unlocked_r+0x2f0>)
 8028e26:	4633      	mov	r3, r6
 8028e28:	aa07      	add	r2, sp, #28
 8028e2a:	4640      	mov	r0, r8
 8028e2c:	f7fe f8b8 	bl	8026fa0 <siscanf>
 8028e30:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8028e34:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8028e38:	213c      	movs	r1, #60	; 0x3c
 8028e3a:	fb01 2203 	mla	r2, r1, r3, r2
 8028e3e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8028e42:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8028e46:	fb01 2303 	mla	r3, r1, r3, r2
 8028e4a:	61bb      	str	r3, [r7, #24]
 8028e4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028e4e:	3728      	adds	r7, #40	; 0x28
 8028e50:	4444      	add	r4, r8
 8028e52:	f1b9 0f00 	cmp.w	r9, #0
 8028e56:	d020      	beq.n	8028e9a <_tzset_unlocked_r+0x26a>
 8028e58:	6868      	ldr	r0, [r5, #4]
 8028e5a:	f7ff fe2f 	bl	8028abc <__tzcalc_limits>
 8028e5e:	4b28      	ldr	r3, [pc, #160]	; (8028f00 <_tzset_unlocked_r+0x2d0>)
 8028e60:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8028e62:	601a      	str	r2, [r3, #0]
 8028e64:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8028e66:	1a9b      	subs	r3, r3, r2
 8028e68:	4a27      	ldr	r2, [pc, #156]	; (8028f08 <_tzset_unlocked_r+0x2d8>)
 8028e6a:	bf18      	it	ne
 8028e6c:	2301      	movne	r3, #1
 8028e6e:	6013      	str	r3, [r2, #0]
 8028e70:	e6f8      	b.n	8028c64 <_tzset_unlocked_r+0x34>
 8028e72:	2b2b      	cmp	r3, #43	; 0x2b
 8028e74:	bf08      	it	eq
 8028e76:	3401      	addeq	r4, #1
 8028e78:	2701      	movs	r7, #1
 8028e7a:	e772      	b.n	8028d62 <_tzset_unlocked_r+0x132>
 8028e7c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8028e80:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8028e84:	213c      	movs	r1, #60	; 0x3c
 8028e86:	fb01 2203 	mla	r2, r1, r3, r2
 8028e8a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8028e8e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8028e92:	fb01 2303 	mla	r3, r1, r3, r2
 8028e96:	435f      	muls	r7, r3
 8028e98:	e77a      	b.n	8028d90 <_tzset_unlocked_r+0x160>
 8028e9a:	f04f 0901 	mov.w	r9, #1
 8028e9e:	e77d      	b.n	8028d9c <_tzset_unlocked_r+0x16c>
 8028ea0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8028ea4:	bf06      	itte	eq
 8028ea6:	3401      	addeq	r4, #1
 8028ea8:	4643      	moveq	r3, r8
 8028eaa:	2344      	movne	r3, #68	; 0x44
 8028eac:	220a      	movs	r2, #10
 8028eae:	a90b      	add	r1, sp, #44	; 0x2c
 8028eb0:	4620      	mov	r0, r4
 8028eb2:	9305      	str	r3, [sp, #20]
 8028eb4:	f7ff fdf8 	bl	8028aa8 <strtoul>
 8028eb8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8028ebc:	9b05      	ldr	r3, [sp, #20]
 8028ebe:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8028ec2:	45a0      	cmp	r8, r4
 8028ec4:	d114      	bne.n	8028ef0 <_tzset_unlocked_r+0x2c0>
 8028ec6:	234d      	movs	r3, #77	; 0x4d
 8028ec8:	f1b9 0f00 	cmp.w	r9, #0
 8028ecc:	d107      	bne.n	8028ede <_tzset_unlocked_r+0x2ae>
 8028ece:	722b      	strb	r3, [r5, #8]
 8028ed0:	2103      	movs	r1, #3
 8028ed2:	2302      	movs	r3, #2
 8028ed4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8028ed8:	f8c5 9014 	str.w	r9, [r5, #20]
 8028edc:	e791      	b.n	8028e02 <_tzset_unlocked_r+0x1d2>
 8028ede:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8028ee2:	220b      	movs	r2, #11
 8028ee4:	2301      	movs	r3, #1
 8028ee6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8028eea:	2300      	movs	r3, #0
 8028eec:	63eb      	str	r3, [r5, #60]	; 0x3c
 8028eee:	e788      	b.n	8028e02 <_tzset_unlocked_r+0x1d2>
 8028ef0:	b280      	uxth	r0, r0
 8028ef2:	723b      	strb	r3, [r7, #8]
 8028ef4:	6178      	str	r0, [r7, #20]
 8028ef6:	e784      	b.n	8028e02 <_tzset_unlocked_r+0x1d2>
 8028ef8:	08060ee0 	.word	0x08060ee0
 8028efc:	20005b84 	.word	0x20005b84
 8028f00:	20005b8c 	.word	0x20005b8c
 8028f04:	08060ee3 	.word	0x08060ee3
 8028f08:	20005b88 	.word	0x20005b88
 8028f0c:	200000c8 	.word	0x200000c8
 8028f10:	20005b77 	.word	0x20005b77
 8028f14:	08060ee7 	.word	0x08060ee7
 8028f18:	08060f0a 	.word	0x08060f0a
 8028f1c:	08060ef6 	.word	0x08060ef6
 8028f20:	08060f09 	.word	0x08060f09
 8028f24:	20005b6c 	.word	0x20005b6c

08028f28 <__swbuf_r>:
 8028f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028f2a:	460e      	mov	r6, r1
 8028f2c:	4614      	mov	r4, r2
 8028f2e:	4605      	mov	r5, r0
 8028f30:	b118      	cbz	r0, 8028f3a <__swbuf_r+0x12>
 8028f32:	6983      	ldr	r3, [r0, #24]
 8028f34:	b90b      	cbnz	r3, 8028f3a <__swbuf_r+0x12>
 8028f36:	f7fd f93d 	bl	80261b4 <__sinit>
 8028f3a:	4b21      	ldr	r3, [pc, #132]	; (8028fc0 <__swbuf_r+0x98>)
 8028f3c:	429c      	cmp	r4, r3
 8028f3e:	d12b      	bne.n	8028f98 <__swbuf_r+0x70>
 8028f40:	686c      	ldr	r4, [r5, #4]
 8028f42:	69a3      	ldr	r3, [r4, #24]
 8028f44:	60a3      	str	r3, [r4, #8]
 8028f46:	89a3      	ldrh	r3, [r4, #12]
 8028f48:	071a      	lsls	r2, r3, #28
 8028f4a:	d52f      	bpl.n	8028fac <__swbuf_r+0x84>
 8028f4c:	6923      	ldr	r3, [r4, #16]
 8028f4e:	b36b      	cbz	r3, 8028fac <__swbuf_r+0x84>
 8028f50:	6923      	ldr	r3, [r4, #16]
 8028f52:	6820      	ldr	r0, [r4, #0]
 8028f54:	1ac0      	subs	r0, r0, r3
 8028f56:	6963      	ldr	r3, [r4, #20]
 8028f58:	b2f6      	uxtb	r6, r6
 8028f5a:	4283      	cmp	r3, r0
 8028f5c:	4637      	mov	r7, r6
 8028f5e:	dc04      	bgt.n	8028f6a <__swbuf_r+0x42>
 8028f60:	4621      	mov	r1, r4
 8028f62:	4628      	mov	r0, r5
 8028f64:	f000 f984 	bl	8029270 <_fflush_r>
 8028f68:	bb30      	cbnz	r0, 8028fb8 <__swbuf_r+0x90>
 8028f6a:	68a3      	ldr	r3, [r4, #8]
 8028f6c:	3b01      	subs	r3, #1
 8028f6e:	60a3      	str	r3, [r4, #8]
 8028f70:	6823      	ldr	r3, [r4, #0]
 8028f72:	1c5a      	adds	r2, r3, #1
 8028f74:	6022      	str	r2, [r4, #0]
 8028f76:	701e      	strb	r6, [r3, #0]
 8028f78:	6963      	ldr	r3, [r4, #20]
 8028f7a:	3001      	adds	r0, #1
 8028f7c:	4283      	cmp	r3, r0
 8028f7e:	d004      	beq.n	8028f8a <__swbuf_r+0x62>
 8028f80:	89a3      	ldrh	r3, [r4, #12]
 8028f82:	07db      	lsls	r3, r3, #31
 8028f84:	d506      	bpl.n	8028f94 <__swbuf_r+0x6c>
 8028f86:	2e0a      	cmp	r6, #10
 8028f88:	d104      	bne.n	8028f94 <__swbuf_r+0x6c>
 8028f8a:	4621      	mov	r1, r4
 8028f8c:	4628      	mov	r0, r5
 8028f8e:	f000 f96f 	bl	8029270 <_fflush_r>
 8028f92:	b988      	cbnz	r0, 8028fb8 <__swbuf_r+0x90>
 8028f94:	4638      	mov	r0, r7
 8028f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028f98:	4b0a      	ldr	r3, [pc, #40]	; (8028fc4 <__swbuf_r+0x9c>)
 8028f9a:	429c      	cmp	r4, r3
 8028f9c:	d101      	bne.n	8028fa2 <__swbuf_r+0x7a>
 8028f9e:	68ac      	ldr	r4, [r5, #8]
 8028fa0:	e7cf      	b.n	8028f42 <__swbuf_r+0x1a>
 8028fa2:	4b09      	ldr	r3, [pc, #36]	; (8028fc8 <__swbuf_r+0xa0>)
 8028fa4:	429c      	cmp	r4, r3
 8028fa6:	bf08      	it	eq
 8028fa8:	68ec      	ldreq	r4, [r5, #12]
 8028faa:	e7ca      	b.n	8028f42 <__swbuf_r+0x1a>
 8028fac:	4621      	mov	r1, r4
 8028fae:	4628      	mov	r0, r5
 8028fb0:	f000 f81e 	bl	8028ff0 <__swsetup_r>
 8028fb4:	2800      	cmp	r0, #0
 8028fb6:	d0cb      	beq.n	8028f50 <__swbuf_r+0x28>
 8028fb8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8028fbc:	e7ea      	b.n	8028f94 <__swbuf_r+0x6c>
 8028fbe:	bf00      	nop
 8028fc0:	08060a24 	.word	0x08060a24
 8028fc4:	08060a44 	.word	0x08060a44
 8028fc8:	08060a04 	.word	0x08060a04

08028fcc <_write_r>:
 8028fcc:	b538      	push	{r3, r4, r5, lr}
 8028fce:	4d07      	ldr	r5, [pc, #28]	; (8028fec <_write_r+0x20>)
 8028fd0:	4604      	mov	r4, r0
 8028fd2:	4608      	mov	r0, r1
 8028fd4:	4611      	mov	r1, r2
 8028fd6:	2200      	movs	r2, #0
 8028fd8:	602a      	str	r2, [r5, #0]
 8028fda:	461a      	mov	r2, r3
 8028fdc:	f7db fb94 	bl	8004708 <_write>
 8028fe0:	1c43      	adds	r3, r0, #1
 8028fe2:	d102      	bne.n	8028fea <_write_r+0x1e>
 8028fe4:	682b      	ldr	r3, [r5, #0]
 8028fe6:	b103      	cbz	r3, 8028fea <_write_r+0x1e>
 8028fe8:	6023      	str	r3, [r4, #0]
 8028fea:	bd38      	pop	{r3, r4, r5, pc}
 8028fec:	2001d538 	.word	0x2001d538

08028ff0 <__swsetup_r>:
 8028ff0:	4b32      	ldr	r3, [pc, #200]	; (80290bc <__swsetup_r+0xcc>)
 8028ff2:	b570      	push	{r4, r5, r6, lr}
 8028ff4:	681d      	ldr	r5, [r3, #0]
 8028ff6:	4606      	mov	r6, r0
 8028ff8:	460c      	mov	r4, r1
 8028ffa:	b125      	cbz	r5, 8029006 <__swsetup_r+0x16>
 8028ffc:	69ab      	ldr	r3, [r5, #24]
 8028ffe:	b913      	cbnz	r3, 8029006 <__swsetup_r+0x16>
 8029000:	4628      	mov	r0, r5
 8029002:	f7fd f8d7 	bl	80261b4 <__sinit>
 8029006:	4b2e      	ldr	r3, [pc, #184]	; (80290c0 <__swsetup_r+0xd0>)
 8029008:	429c      	cmp	r4, r3
 802900a:	d10f      	bne.n	802902c <__swsetup_r+0x3c>
 802900c:	686c      	ldr	r4, [r5, #4]
 802900e:	89a3      	ldrh	r3, [r4, #12]
 8029010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029014:	0719      	lsls	r1, r3, #28
 8029016:	d42c      	bmi.n	8029072 <__swsetup_r+0x82>
 8029018:	06dd      	lsls	r5, r3, #27
 802901a:	d411      	bmi.n	8029040 <__swsetup_r+0x50>
 802901c:	2309      	movs	r3, #9
 802901e:	6033      	str	r3, [r6, #0]
 8029020:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8029024:	81a3      	strh	r3, [r4, #12]
 8029026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802902a:	e03e      	b.n	80290aa <__swsetup_r+0xba>
 802902c:	4b25      	ldr	r3, [pc, #148]	; (80290c4 <__swsetup_r+0xd4>)
 802902e:	429c      	cmp	r4, r3
 8029030:	d101      	bne.n	8029036 <__swsetup_r+0x46>
 8029032:	68ac      	ldr	r4, [r5, #8]
 8029034:	e7eb      	b.n	802900e <__swsetup_r+0x1e>
 8029036:	4b24      	ldr	r3, [pc, #144]	; (80290c8 <__swsetup_r+0xd8>)
 8029038:	429c      	cmp	r4, r3
 802903a:	bf08      	it	eq
 802903c:	68ec      	ldreq	r4, [r5, #12]
 802903e:	e7e6      	b.n	802900e <__swsetup_r+0x1e>
 8029040:	0758      	lsls	r0, r3, #29
 8029042:	d512      	bpl.n	802906a <__swsetup_r+0x7a>
 8029044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029046:	b141      	cbz	r1, 802905a <__swsetup_r+0x6a>
 8029048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802904c:	4299      	cmp	r1, r3
 802904e:	d002      	beq.n	8029056 <__swsetup_r+0x66>
 8029050:	4630      	mov	r0, r6
 8029052:	f7fd fd57 	bl	8026b04 <_free_r>
 8029056:	2300      	movs	r3, #0
 8029058:	6363      	str	r3, [r4, #52]	; 0x34
 802905a:	89a3      	ldrh	r3, [r4, #12]
 802905c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8029060:	81a3      	strh	r3, [r4, #12]
 8029062:	2300      	movs	r3, #0
 8029064:	6063      	str	r3, [r4, #4]
 8029066:	6923      	ldr	r3, [r4, #16]
 8029068:	6023      	str	r3, [r4, #0]
 802906a:	89a3      	ldrh	r3, [r4, #12]
 802906c:	f043 0308 	orr.w	r3, r3, #8
 8029070:	81a3      	strh	r3, [r4, #12]
 8029072:	6923      	ldr	r3, [r4, #16]
 8029074:	b94b      	cbnz	r3, 802908a <__swsetup_r+0x9a>
 8029076:	89a3      	ldrh	r3, [r4, #12]
 8029078:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802907c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029080:	d003      	beq.n	802908a <__swsetup_r+0x9a>
 8029082:	4621      	mov	r1, r4
 8029084:	4630      	mov	r0, r6
 8029086:	f000 fde1 	bl	8029c4c <__smakebuf_r>
 802908a:	89a0      	ldrh	r0, [r4, #12]
 802908c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029090:	f010 0301 	ands.w	r3, r0, #1
 8029094:	d00a      	beq.n	80290ac <__swsetup_r+0xbc>
 8029096:	2300      	movs	r3, #0
 8029098:	60a3      	str	r3, [r4, #8]
 802909a:	6963      	ldr	r3, [r4, #20]
 802909c:	425b      	negs	r3, r3
 802909e:	61a3      	str	r3, [r4, #24]
 80290a0:	6923      	ldr	r3, [r4, #16]
 80290a2:	b943      	cbnz	r3, 80290b6 <__swsetup_r+0xc6>
 80290a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80290a8:	d1ba      	bne.n	8029020 <__swsetup_r+0x30>
 80290aa:	bd70      	pop	{r4, r5, r6, pc}
 80290ac:	0781      	lsls	r1, r0, #30
 80290ae:	bf58      	it	pl
 80290b0:	6963      	ldrpl	r3, [r4, #20]
 80290b2:	60a3      	str	r3, [r4, #8]
 80290b4:	e7f4      	b.n	80290a0 <__swsetup_r+0xb0>
 80290b6:	2000      	movs	r0, #0
 80290b8:	e7f7      	b.n	80290aa <__swsetup_r+0xba>
 80290ba:	bf00      	nop
 80290bc:	20000064 	.word	0x20000064
 80290c0:	08060a24 	.word	0x08060a24
 80290c4:	08060a44 	.word	0x08060a44
 80290c8:	08060a04 	.word	0x08060a04

080290cc <abs>:
 80290cc:	2800      	cmp	r0, #0
 80290ce:	bfb8      	it	lt
 80290d0:	4240      	neglt	r0, r0
 80290d2:	4770      	bx	lr

080290d4 <__assert_func>:
 80290d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80290d6:	4614      	mov	r4, r2
 80290d8:	461a      	mov	r2, r3
 80290da:	4b09      	ldr	r3, [pc, #36]	; (8029100 <__assert_func+0x2c>)
 80290dc:	681b      	ldr	r3, [r3, #0]
 80290de:	4605      	mov	r5, r0
 80290e0:	68d8      	ldr	r0, [r3, #12]
 80290e2:	b14c      	cbz	r4, 80290f8 <__assert_func+0x24>
 80290e4:	4b07      	ldr	r3, [pc, #28]	; (8029104 <__assert_func+0x30>)
 80290e6:	9100      	str	r1, [sp, #0]
 80290e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80290ec:	4906      	ldr	r1, [pc, #24]	; (8029108 <__assert_func+0x34>)
 80290ee:	462b      	mov	r3, r5
 80290f0:	f000 f8fa 	bl	80292e8 <fiprintf>
 80290f4:	f002 fafd 	bl	802b6f2 <abort>
 80290f8:	4b04      	ldr	r3, [pc, #16]	; (802910c <__assert_func+0x38>)
 80290fa:	461c      	mov	r4, r3
 80290fc:	e7f3      	b.n	80290e6 <__assert_func+0x12>
 80290fe:	bf00      	nop
 8029100:	20000064 	.word	0x20000064
 8029104:	08060f1c 	.word	0x08060f1c
 8029108:	08060f29 	.word	0x08060f29
 802910c:	08060f57 	.word	0x08060f57

08029110 <_close_r>:
 8029110:	b538      	push	{r3, r4, r5, lr}
 8029112:	4d06      	ldr	r5, [pc, #24]	; (802912c <_close_r+0x1c>)
 8029114:	2300      	movs	r3, #0
 8029116:	4604      	mov	r4, r0
 8029118:	4608      	mov	r0, r1
 802911a:	602b      	str	r3, [r5, #0]
 802911c:	f7df f8ad 	bl	800827a <_close>
 8029120:	1c43      	adds	r3, r0, #1
 8029122:	d102      	bne.n	802912a <_close_r+0x1a>
 8029124:	682b      	ldr	r3, [r5, #0]
 8029126:	b103      	cbz	r3, 802912a <_close_r+0x1a>
 8029128:	6023      	str	r3, [r4, #0]
 802912a:	bd38      	pop	{r3, r4, r5, pc}
 802912c:	2001d538 	.word	0x2001d538

08029130 <div>:
 8029130:	2900      	cmp	r1, #0
 8029132:	b510      	push	{r4, lr}
 8029134:	fb91 f4f2 	sdiv	r4, r1, r2
 8029138:	fb02 1314 	mls	r3, r2, r4, r1
 802913c:	db06      	blt.n	802914c <div+0x1c>
 802913e:	2b00      	cmp	r3, #0
 8029140:	da01      	bge.n	8029146 <div+0x16>
 8029142:	3401      	adds	r4, #1
 8029144:	1a9b      	subs	r3, r3, r2
 8029146:	e9c0 4300 	strd	r4, r3, [r0]
 802914a:	bd10      	pop	{r4, pc}
 802914c:	2b00      	cmp	r3, #0
 802914e:	bfc4      	itt	gt
 8029150:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 8029154:	189b      	addgt	r3, r3, r2
 8029156:	e7f6      	b.n	8029146 <div+0x16>

08029158 <__errno>:
 8029158:	4b01      	ldr	r3, [pc, #4]	; (8029160 <__errno+0x8>)
 802915a:	6818      	ldr	r0, [r3, #0]
 802915c:	4770      	bx	lr
 802915e:	bf00      	nop
 8029160:	20000064 	.word	0x20000064

08029164 <__sflush_r>:
 8029164:	898a      	ldrh	r2, [r1, #12]
 8029166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802916a:	4605      	mov	r5, r0
 802916c:	0710      	lsls	r0, r2, #28
 802916e:	460c      	mov	r4, r1
 8029170:	d458      	bmi.n	8029224 <__sflush_r+0xc0>
 8029172:	684b      	ldr	r3, [r1, #4]
 8029174:	2b00      	cmp	r3, #0
 8029176:	dc05      	bgt.n	8029184 <__sflush_r+0x20>
 8029178:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802917a:	2b00      	cmp	r3, #0
 802917c:	dc02      	bgt.n	8029184 <__sflush_r+0x20>
 802917e:	2000      	movs	r0, #0
 8029180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029186:	2e00      	cmp	r6, #0
 8029188:	d0f9      	beq.n	802917e <__sflush_r+0x1a>
 802918a:	2300      	movs	r3, #0
 802918c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8029190:	682f      	ldr	r7, [r5, #0]
 8029192:	602b      	str	r3, [r5, #0]
 8029194:	d032      	beq.n	80291fc <__sflush_r+0x98>
 8029196:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8029198:	89a3      	ldrh	r3, [r4, #12]
 802919a:	075a      	lsls	r2, r3, #29
 802919c:	d505      	bpl.n	80291aa <__sflush_r+0x46>
 802919e:	6863      	ldr	r3, [r4, #4]
 80291a0:	1ac0      	subs	r0, r0, r3
 80291a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80291a4:	b10b      	cbz	r3, 80291aa <__sflush_r+0x46>
 80291a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80291a8:	1ac0      	subs	r0, r0, r3
 80291aa:	2300      	movs	r3, #0
 80291ac:	4602      	mov	r2, r0
 80291ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80291b0:	6a21      	ldr	r1, [r4, #32]
 80291b2:	4628      	mov	r0, r5
 80291b4:	47b0      	blx	r6
 80291b6:	1c43      	adds	r3, r0, #1
 80291b8:	89a3      	ldrh	r3, [r4, #12]
 80291ba:	d106      	bne.n	80291ca <__sflush_r+0x66>
 80291bc:	6829      	ldr	r1, [r5, #0]
 80291be:	291d      	cmp	r1, #29
 80291c0:	d82c      	bhi.n	802921c <__sflush_r+0xb8>
 80291c2:	4a2a      	ldr	r2, [pc, #168]	; (802926c <__sflush_r+0x108>)
 80291c4:	40ca      	lsrs	r2, r1
 80291c6:	07d6      	lsls	r6, r2, #31
 80291c8:	d528      	bpl.n	802921c <__sflush_r+0xb8>
 80291ca:	2200      	movs	r2, #0
 80291cc:	6062      	str	r2, [r4, #4]
 80291ce:	04d9      	lsls	r1, r3, #19
 80291d0:	6922      	ldr	r2, [r4, #16]
 80291d2:	6022      	str	r2, [r4, #0]
 80291d4:	d504      	bpl.n	80291e0 <__sflush_r+0x7c>
 80291d6:	1c42      	adds	r2, r0, #1
 80291d8:	d101      	bne.n	80291de <__sflush_r+0x7a>
 80291da:	682b      	ldr	r3, [r5, #0]
 80291dc:	b903      	cbnz	r3, 80291e0 <__sflush_r+0x7c>
 80291de:	6560      	str	r0, [r4, #84]	; 0x54
 80291e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80291e2:	602f      	str	r7, [r5, #0]
 80291e4:	2900      	cmp	r1, #0
 80291e6:	d0ca      	beq.n	802917e <__sflush_r+0x1a>
 80291e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80291ec:	4299      	cmp	r1, r3
 80291ee:	d002      	beq.n	80291f6 <__sflush_r+0x92>
 80291f0:	4628      	mov	r0, r5
 80291f2:	f7fd fc87 	bl	8026b04 <_free_r>
 80291f6:	2000      	movs	r0, #0
 80291f8:	6360      	str	r0, [r4, #52]	; 0x34
 80291fa:	e7c1      	b.n	8029180 <__sflush_r+0x1c>
 80291fc:	6a21      	ldr	r1, [r4, #32]
 80291fe:	2301      	movs	r3, #1
 8029200:	4628      	mov	r0, r5
 8029202:	47b0      	blx	r6
 8029204:	1c41      	adds	r1, r0, #1
 8029206:	d1c7      	bne.n	8029198 <__sflush_r+0x34>
 8029208:	682b      	ldr	r3, [r5, #0]
 802920a:	2b00      	cmp	r3, #0
 802920c:	d0c4      	beq.n	8029198 <__sflush_r+0x34>
 802920e:	2b1d      	cmp	r3, #29
 8029210:	d001      	beq.n	8029216 <__sflush_r+0xb2>
 8029212:	2b16      	cmp	r3, #22
 8029214:	d101      	bne.n	802921a <__sflush_r+0xb6>
 8029216:	602f      	str	r7, [r5, #0]
 8029218:	e7b1      	b.n	802917e <__sflush_r+0x1a>
 802921a:	89a3      	ldrh	r3, [r4, #12]
 802921c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029220:	81a3      	strh	r3, [r4, #12]
 8029222:	e7ad      	b.n	8029180 <__sflush_r+0x1c>
 8029224:	690f      	ldr	r7, [r1, #16]
 8029226:	2f00      	cmp	r7, #0
 8029228:	d0a9      	beq.n	802917e <__sflush_r+0x1a>
 802922a:	0793      	lsls	r3, r2, #30
 802922c:	680e      	ldr	r6, [r1, #0]
 802922e:	bf08      	it	eq
 8029230:	694b      	ldreq	r3, [r1, #20]
 8029232:	600f      	str	r7, [r1, #0]
 8029234:	bf18      	it	ne
 8029236:	2300      	movne	r3, #0
 8029238:	eba6 0807 	sub.w	r8, r6, r7
 802923c:	608b      	str	r3, [r1, #8]
 802923e:	f1b8 0f00 	cmp.w	r8, #0
 8029242:	dd9c      	ble.n	802917e <__sflush_r+0x1a>
 8029244:	6a21      	ldr	r1, [r4, #32]
 8029246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8029248:	4643      	mov	r3, r8
 802924a:	463a      	mov	r2, r7
 802924c:	4628      	mov	r0, r5
 802924e:	47b0      	blx	r6
 8029250:	2800      	cmp	r0, #0
 8029252:	dc06      	bgt.n	8029262 <__sflush_r+0xfe>
 8029254:	89a3      	ldrh	r3, [r4, #12]
 8029256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802925a:	81a3      	strh	r3, [r4, #12]
 802925c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8029260:	e78e      	b.n	8029180 <__sflush_r+0x1c>
 8029262:	4407      	add	r7, r0
 8029264:	eba8 0800 	sub.w	r8, r8, r0
 8029268:	e7e9      	b.n	802923e <__sflush_r+0xda>
 802926a:	bf00      	nop
 802926c:	20400001 	.word	0x20400001

08029270 <_fflush_r>:
 8029270:	b538      	push	{r3, r4, r5, lr}
 8029272:	690b      	ldr	r3, [r1, #16]
 8029274:	4605      	mov	r5, r0
 8029276:	460c      	mov	r4, r1
 8029278:	b913      	cbnz	r3, 8029280 <_fflush_r+0x10>
 802927a:	2500      	movs	r5, #0
 802927c:	4628      	mov	r0, r5
 802927e:	bd38      	pop	{r3, r4, r5, pc}
 8029280:	b118      	cbz	r0, 802928a <_fflush_r+0x1a>
 8029282:	6983      	ldr	r3, [r0, #24]
 8029284:	b90b      	cbnz	r3, 802928a <_fflush_r+0x1a>
 8029286:	f7fc ff95 	bl	80261b4 <__sinit>
 802928a:	4b14      	ldr	r3, [pc, #80]	; (80292dc <_fflush_r+0x6c>)
 802928c:	429c      	cmp	r4, r3
 802928e:	d11b      	bne.n	80292c8 <_fflush_r+0x58>
 8029290:	686c      	ldr	r4, [r5, #4]
 8029292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029296:	2b00      	cmp	r3, #0
 8029298:	d0ef      	beq.n	802927a <_fflush_r+0xa>
 802929a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802929c:	07d0      	lsls	r0, r2, #31
 802929e:	d404      	bmi.n	80292aa <_fflush_r+0x3a>
 80292a0:	0599      	lsls	r1, r3, #22
 80292a2:	d402      	bmi.n	80292aa <_fflush_r+0x3a>
 80292a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80292a6:	f7fd f95d 	bl	8026564 <__retarget_lock_acquire_recursive>
 80292aa:	4628      	mov	r0, r5
 80292ac:	4621      	mov	r1, r4
 80292ae:	f7ff ff59 	bl	8029164 <__sflush_r>
 80292b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80292b4:	07da      	lsls	r2, r3, #31
 80292b6:	4605      	mov	r5, r0
 80292b8:	d4e0      	bmi.n	802927c <_fflush_r+0xc>
 80292ba:	89a3      	ldrh	r3, [r4, #12]
 80292bc:	059b      	lsls	r3, r3, #22
 80292be:	d4dd      	bmi.n	802927c <_fflush_r+0xc>
 80292c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80292c2:	f7fd f951 	bl	8026568 <__retarget_lock_release_recursive>
 80292c6:	e7d9      	b.n	802927c <_fflush_r+0xc>
 80292c8:	4b05      	ldr	r3, [pc, #20]	; (80292e0 <_fflush_r+0x70>)
 80292ca:	429c      	cmp	r4, r3
 80292cc:	d101      	bne.n	80292d2 <_fflush_r+0x62>
 80292ce:	68ac      	ldr	r4, [r5, #8]
 80292d0:	e7df      	b.n	8029292 <_fflush_r+0x22>
 80292d2:	4b04      	ldr	r3, [pc, #16]	; (80292e4 <_fflush_r+0x74>)
 80292d4:	429c      	cmp	r4, r3
 80292d6:	bf08      	it	eq
 80292d8:	68ec      	ldreq	r4, [r5, #12]
 80292da:	e7da      	b.n	8029292 <_fflush_r+0x22>
 80292dc:	08060a24 	.word	0x08060a24
 80292e0:	08060a44 	.word	0x08060a44
 80292e4:	08060a04 	.word	0x08060a04

080292e8 <fiprintf>:
 80292e8:	b40e      	push	{r1, r2, r3}
 80292ea:	b503      	push	{r0, r1, lr}
 80292ec:	4601      	mov	r1, r0
 80292ee:	ab03      	add	r3, sp, #12
 80292f0:	4805      	ldr	r0, [pc, #20]	; (8029308 <fiprintf+0x20>)
 80292f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80292f6:	6800      	ldr	r0, [r0, #0]
 80292f8:	9301      	str	r3, [sp, #4]
 80292fa:	f001 fd4d 	bl	802ad98 <_vfiprintf_r>
 80292fe:	b002      	add	sp, #8
 8029300:	f85d eb04 	ldr.w	lr, [sp], #4
 8029304:	b003      	add	sp, #12
 8029306:	4770      	bx	lr
 8029308:	20000064 	.word	0x20000064

0802930c <rshift>:
 802930c:	6903      	ldr	r3, [r0, #16]
 802930e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8029312:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029316:	ea4f 1261 	mov.w	r2, r1, asr #5
 802931a:	f100 0414 	add.w	r4, r0, #20
 802931e:	dd45      	ble.n	80293ac <rshift+0xa0>
 8029320:	f011 011f 	ands.w	r1, r1, #31
 8029324:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8029328:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802932c:	d10c      	bne.n	8029348 <rshift+0x3c>
 802932e:	f100 0710 	add.w	r7, r0, #16
 8029332:	4629      	mov	r1, r5
 8029334:	42b1      	cmp	r1, r6
 8029336:	d334      	bcc.n	80293a2 <rshift+0x96>
 8029338:	1a9b      	subs	r3, r3, r2
 802933a:	009b      	lsls	r3, r3, #2
 802933c:	1eea      	subs	r2, r5, #3
 802933e:	4296      	cmp	r6, r2
 8029340:	bf38      	it	cc
 8029342:	2300      	movcc	r3, #0
 8029344:	4423      	add	r3, r4
 8029346:	e015      	b.n	8029374 <rshift+0x68>
 8029348:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802934c:	f1c1 0820 	rsb	r8, r1, #32
 8029350:	40cf      	lsrs	r7, r1
 8029352:	f105 0e04 	add.w	lr, r5, #4
 8029356:	46a1      	mov	r9, r4
 8029358:	4576      	cmp	r6, lr
 802935a:	46f4      	mov	ip, lr
 802935c:	d815      	bhi.n	802938a <rshift+0x7e>
 802935e:	1a9b      	subs	r3, r3, r2
 8029360:	009a      	lsls	r2, r3, #2
 8029362:	3a04      	subs	r2, #4
 8029364:	3501      	adds	r5, #1
 8029366:	42ae      	cmp	r6, r5
 8029368:	bf38      	it	cc
 802936a:	2200      	movcc	r2, #0
 802936c:	18a3      	adds	r3, r4, r2
 802936e:	50a7      	str	r7, [r4, r2]
 8029370:	b107      	cbz	r7, 8029374 <rshift+0x68>
 8029372:	3304      	adds	r3, #4
 8029374:	1b1a      	subs	r2, r3, r4
 8029376:	42a3      	cmp	r3, r4
 8029378:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802937c:	bf08      	it	eq
 802937e:	2300      	moveq	r3, #0
 8029380:	6102      	str	r2, [r0, #16]
 8029382:	bf08      	it	eq
 8029384:	6143      	streq	r3, [r0, #20]
 8029386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802938a:	f8dc c000 	ldr.w	ip, [ip]
 802938e:	fa0c fc08 	lsl.w	ip, ip, r8
 8029392:	ea4c 0707 	orr.w	r7, ip, r7
 8029396:	f849 7b04 	str.w	r7, [r9], #4
 802939a:	f85e 7b04 	ldr.w	r7, [lr], #4
 802939e:	40cf      	lsrs	r7, r1
 80293a0:	e7da      	b.n	8029358 <rshift+0x4c>
 80293a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80293a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80293aa:	e7c3      	b.n	8029334 <rshift+0x28>
 80293ac:	4623      	mov	r3, r4
 80293ae:	e7e1      	b.n	8029374 <rshift+0x68>

080293b0 <__hexdig_fun>:
 80293b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80293b4:	2b09      	cmp	r3, #9
 80293b6:	d802      	bhi.n	80293be <__hexdig_fun+0xe>
 80293b8:	3820      	subs	r0, #32
 80293ba:	b2c0      	uxtb	r0, r0
 80293bc:	4770      	bx	lr
 80293be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80293c2:	2b05      	cmp	r3, #5
 80293c4:	d801      	bhi.n	80293ca <__hexdig_fun+0x1a>
 80293c6:	3847      	subs	r0, #71	; 0x47
 80293c8:	e7f7      	b.n	80293ba <__hexdig_fun+0xa>
 80293ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80293ce:	2b05      	cmp	r3, #5
 80293d0:	d801      	bhi.n	80293d6 <__hexdig_fun+0x26>
 80293d2:	3827      	subs	r0, #39	; 0x27
 80293d4:	e7f1      	b.n	80293ba <__hexdig_fun+0xa>
 80293d6:	2000      	movs	r0, #0
 80293d8:	4770      	bx	lr
	...

080293dc <__gethex>:
 80293dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80293e0:	ed2d 8b02 	vpush	{d8}
 80293e4:	b089      	sub	sp, #36	; 0x24
 80293e6:	ee08 0a10 	vmov	s16, r0
 80293ea:	9304      	str	r3, [sp, #16]
 80293ec:	4bbc      	ldr	r3, [pc, #752]	; (80296e0 <__gethex+0x304>)
 80293ee:	681b      	ldr	r3, [r3, #0]
 80293f0:	9301      	str	r3, [sp, #4]
 80293f2:	4618      	mov	r0, r3
 80293f4:	468b      	mov	fp, r1
 80293f6:	4690      	mov	r8, r2
 80293f8:	f7d6 fef4 	bl	80001e4 <strlen>
 80293fc:	9b01      	ldr	r3, [sp, #4]
 80293fe:	f8db 2000 	ldr.w	r2, [fp]
 8029402:	4403      	add	r3, r0
 8029404:	4682      	mov	sl, r0
 8029406:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802940a:	9305      	str	r3, [sp, #20]
 802940c:	1c93      	adds	r3, r2, #2
 802940e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8029412:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8029416:	32fe      	adds	r2, #254	; 0xfe
 8029418:	18d1      	adds	r1, r2, r3
 802941a:	461f      	mov	r7, r3
 802941c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8029420:	9100      	str	r1, [sp, #0]
 8029422:	2830      	cmp	r0, #48	; 0x30
 8029424:	d0f8      	beq.n	8029418 <__gethex+0x3c>
 8029426:	f7ff ffc3 	bl	80293b0 <__hexdig_fun>
 802942a:	4604      	mov	r4, r0
 802942c:	2800      	cmp	r0, #0
 802942e:	d13a      	bne.n	80294a6 <__gethex+0xca>
 8029430:	9901      	ldr	r1, [sp, #4]
 8029432:	4652      	mov	r2, sl
 8029434:	4638      	mov	r0, r7
 8029436:	f7fe fba5 	bl	8027b84 <strncmp>
 802943a:	4605      	mov	r5, r0
 802943c:	2800      	cmp	r0, #0
 802943e:	d168      	bne.n	8029512 <__gethex+0x136>
 8029440:	f817 000a 	ldrb.w	r0, [r7, sl]
 8029444:	eb07 060a 	add.w	r6, r7, sl
 8029448:	f7ff ffb2 	bl	80293b0 <__hexdig_fun>
 802944c:	2800      	cmp	r0, #0
 802944e:	d062      	beq.n	8029516 <__gethex+0x13a>
 8029450:	4633      	mov	r3, r6
 8029452:	7818      	ldrb	r0, [r3, #0]
 8029454:	2830      	cmp	r0, #48	; 0x30
 8029456:	461f      	mov	r7, r3
 8029458:	f103 0301 	add.w	r3, r3, #1
 802945c:	d0f9      	beq.n	8029452 <__gethex+0x76>
 802945e:	f7ff ffa7 	bl	80293b0 <__hexdig_fun>
 8029462:	2301      	movs	r3, #1
 8029464:	fab0 f480 	clz	r4, r0
 8029468:	0964      	lsrs	r4, r4, #5
 802946a:	4635      	mov	r5, r6
 802946c:	9300      	str	r3, [sp, #0]
 802946e:	463a      	mov	r2, r7
 8029470:	4616      	mov	r6, r2
 8029472:	3201      	adds	r2, #1
 8029474:	7830      	ldrb	r0, [r6, #0]
 8029476:	f7ff ff9b 	bl	80293b0 <__hexdig_fun>
 802947a:	2800      	cmp	r0, #0
 802947c:	d1f8      	bne.n	8029470 <__gethex+0x94>
 802947e:	9901      	ldr	r1, [sp, #4]
 8029480:	4652      	mov	r2, sl
 8029482:	4630      	mov	r0, r6
 8029484:	f7fe fb7e 	bl	8027b84 <strncmp>
 8029488:	b980      	cbnz	r0, 80294ac <__gethex+0xd0>
 802948a:	b94d      	cbnz	r5, 80294a0 <__gethex+0xc4>
 802948c:	eb06 050a 	add.w	r5, r6, sl
 8029490:	462a      	mov	r2, r5
 8029492:	4616      	mov	r6, r2
 8029494:	3201      	adds	r2, #1
 8029496:	7830      	ldrb	r0, [r6, #0]
 8029498:	f7ff ff8a 	bl	80293b0 <__hexdig_fun>
 802949c:	2800      	cmp	r0, #0
 802949e:	d1f8      	bne.n	8029492 <__gethex+0xb6>
 80294a0:	1bad      	subs	r5, r5, r6
 80294a2:	00ad      	lsls	r5, r5, #2
 80294a4:	e004      	b.n	80294b0 <__gethex+0xd4>
 80294a6:	2400      	movs	r4, #0
 80294a8:	4625      	mov	r5, r4
 80294aa:	e7e0      	b.n	802946e <__gethex+0x92>
 80294ac:	2d00      	cmp	r5, #0
 80294ae:	d1f7      	bne.n	80294a0 <__gethex+0xc4>
 80294b0:	7833      	ldrb	r3, [r6, #0]
 80294b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80294b6:	2b50      	cmp	r3, #80	; 0x50
 80294b8:	d13b      	bne.n	8029532 <__gethex+0x156>
 80294ba:	7873      	ldrb	r3, [r6, #1]
 80294bc:	2b2b      	cmp	r3, #43	; 0x2b
 80294be:	d02c      	beq.n	802951a <__gethex+0x13e>
 80294c0:	2b2d      	cmp	r3, #45	; 0x2d
 80294c2:	d02e      	beq.n	8029522 <__gethex+0x146>
 80294c4:	1c71      	adds	r1, r6, #1
 80294c6:	f04f 0900 	mov.w	r9, #0
 80294ca:	7808      	ldrb	r0, [r1, #0]
 80294cc:	f7ff ff70 	bl	80293b0 <__hexdig_fun>
 80294d0:	1e43      	subs	r3, r0, #1
 80294d2:	b2db      	uxtb	r3, r3
 80294d4:	2b18      	cmp	r3, #24
 80294d6:	d82c      	bhi.n	8029532 <__gethex+0x156>
 80294d8:	f1a0 0210 	sub.w	r2, r0, #16
 80294dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80294e0:	f7ff ff66 	bl	80293b0 <__hexdig_fun>
 80294e4:	1e43      	subs	r3, r0, #1
 80294e6:	b2db      	uxtb	r3, r3
 80294e8:	2b18      	cmp	r3, #24
 80294ea:	d91d      	bls.n	8029528 <__gethex+0x14c>
 80294ec:	f1b9 0f00 	cmp.w	r9, #0
 80294f0:	d000      	beq.n	80294f4 <__gethex+0x118>
 80294f2:	4252      	negs	r2, r2
 80294f4:	4415      	add	r5, r2
 80294f6:	f8cb 1000 	str.w	r1, [fp]
 80294fa:	b1e4      	cbz	r4, 8029536 <__gethex+0x15a>
 80294fc:	9b00      	ldr	r3, [sp, #0]
 80294fe:	2b00      	cmp	r3, #0
 8029500:	bf14      	ite	ne
 8029502:	2700      	movne	r7, #0
 8029504:	2706      	moveq	r7, #6
 8029506:	4638      	mov	r0, r7
 8029508:	b009      	add	sp, #36	; 0x24
 802950a:	ecbd 8b02 	vpop	{d8}
 802950e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029512:	463e      	mov	r6, r7
 8029514:	4625      	mov	r5, r4
 8029516:	2401      	movs	r4, #1
 8029518:	e7ca      	b.n	80294b0 <__gethex+0xd4>
 802951a:	f04f 0900 	mov.w	r9, #0
 802951e:	1cb1      	adds	r1, r6, #2
 8029520:	e7d3      	b.n	80294ca <__gethex+0xee>
 8029522:	f04f 0901 	mov.w	r9, #1
 8029526:	e7fa      	b.n	802951e <__gethex+0x142>
 8029528:	230a      	movs	r3, #10
 802952a:	fb03 0202 	mla	r2, r3, r2, r0
 802952e:	3a10      	subs	r2, #16
 8029530:	e7d4      	b.n	80294dc <__gethex+0x100>
 8029532:	4631      	mov	r1, r6
 8029534:	e7df      	b.n	80294f6 <__gethex+0x11a>
 8029536:	1bf3      	subs	r3, r6, r7
 8029538:	3b01      	subs	r3, #1
 802953a:	4621      	mov	r1, r4
 802953c:	2b07      	cmp	r3, #7
 802953e:	dc0b      	bgt.n	8029558 <__gethex+0x17c>
 8029540:	ee18 0a10 	vmov	r0, s16
 8029544:	f000 fbe0 	bl	8029d08 <_Balloc>
 8029548:	4604      	mov	r4, r0
 802954a:	b940      	cbnz	r0, 802955e <__gethex+0x182>
 802954c:	4b65      	ldr	r3, [pc, #404]	; (80296e4 <__gethex+0x308>)
 802954e:	4602      	mov	r2, r0
 8029550:	21de      	movs	r1, #222	; 0xde
 8029552:	4865      	ldr	r0, [pc, #404]	; (80296e8 <__gethex+0x30c>)
 8029554:	f7ff fdbe 	bl	80290d4 <__assert_func>
 8029558:	3101      	adds	r1, #1
 802955a:	105b      	asrs	r3, r3, #1
 802955c:	e7ee      	b.n	802953c <__gethex+0x160>
 802955e:	f100 0914 	add.w	r9, r0, #20
 8029562:	f04f 0b00 	mov.w	fp, #0
 8029566:	f1ca 0301 	rsb	r3, sl, #1
 802956a:	f8cd 9008 	str.w	r9, [sp, #8]
 802956e:	f8cd b000 	str.w	fp, [sp]
 8029572:	9306      	str	r3, [sp, #24]
 8029574:	42b7      	cmp	r7, r6
 8029576:	d340      	bcc.n	80295fa <__gethex+0x21e>
 8029578:	9802      	ldr	r0, [sp, #8]
 802957a:	9b00      	ldr	r3, [sp, #0]
 802957c:	f840 3b04 	str.w	r3, [r0], #4
 8029580:	eba0 0009 	sub.w	r0, r0, r9
 8029584:	1080      	asrs	r0, r0, #2
 8029586:	0146      	lsls	r6, r0, #5
 8029588:	6120      	str	r0, [r4, #16]
 802958a:	4618      	mov	r0, r3
 802958c:	f000 fcb2 	bl	8029ef4 <__hi0bits>
 8029590:	1a30      	subs	r0, r6, r0
 8029592:	f8d8 6000 	ldr.w	r6, [r8]
 8029596:	42b0      	cmp	r0, r6
 8029598:	dd63      	ble.n	8029662 <__gethex+0x286>
 802959a:	1b87      	subs	r7, r0, r6
 802959c:	4639      	mov	r1, r7
 802959e:	4620      	mov	r0, r4
 80295a0:	f001 f84c 	bl	802a63c <__any_on>
 80295a4:	4682      	mov	sl, r0
 80295a6:	b1a8      	cbz	r0, 80295d4 <__gethex+0x1f8>
 80295a8:	1e7b      	subs	r3, r7, #1
 80295aa:	1159      	asrs	r1, r3, #5
 80295ac:	f003 021f 	and.w	r2, r3, #31
 80295b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80295b4:	f04f 0a01 	mov.w	sl, #1
 80295b8:	fa0a f202 	lsl.w	r2, sl, r2
 80295bc:	420a      	tst	r2, r1
 80295be:	d009      	beq.n	80295d4 <__gethex+0x1f8>
 80295c0:	4553      	cmp	r3, sl
 80295c2:	dd05      	ble.n	80295d0 <__gethex+0x1f4>
 80295c4:	1eb9      	subs	r1, r7, #2
 80295c6:	4620      	mov	r0, r4
 80295c8:	f001 f838 	bl	802a63c <__any_on>
 80295cc:	2800      	cmp	r0, #0
 80295ce:	d145      	bne.n	802965c <__gethex+0x280>
 80295d0:	f04f 0a02 	mov.w	sl, #2
 80295d4:	4639      	mov	r1, r7
 80295d6:	4620      	mov	r0, r4
 80295d8:	f7ff fe98 	bl	802930c <rshift>
 80295dc:	443d      	add	r5, r7
 80295de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80295e2:	42ab      	cmp	r3, r5
 80295e4:	da4c      	bge.n	8029680 <__gethex+0x2a4>
 80295e6:	ee18 0a10 	vmov	r0, s16
 80295ea:	4621      	mov	r1, r4
 80295ec:	f000 fbcc 	bl	8029d88 <_Bfree>
 80295f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80295f2:	2300      	movs	r3, #0
 80295f4:	6013      	str	r3, [r2, #0]
 80295f6:	27a3      	movs	r7, #163	; 0xa3
 80295f8:	e785      	b.n	8029506 <__gethex+0x12a>
 80295fa:	1e73      	subs	r3, r6, #1
 80295fc:	9a05      	ldr	r2, [sp, #20]
 80295fe:	9303      	str	r3, [sp, #12]
 8029600:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8029604:	4293      	cmp	r3, r2
 8029606:	d019      	beq.n	802963c <__gethex+0x260>
 8029608:	f1bb 0f20 	cmp.w	fp, #32
 802960c:	d107      	bne.n	802961e <__gethex+0x242>
 802960e:	9b02      	ldr	r3, [sp, #8]
 8029610:	9a00      	ldr	r2, [sp, #0]
 8029612:	f843 2b04 	str.w	r2, [r3], #4
 8029616:	9302      	str	r3, [sp, #8]
 8029618:	2300      	movs	r3, #0
 802961a:	9300      	str	r3, [sp, #0]
 802961c:	469b      	mov	fp, r3
 802961e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8029622:	f7ff fec5 	bl	80293b0 <__hexdig_fun>
 8029626:	9b00      	ldr	r3, [sp, #0]
 8029628:	f000 000f 	and.w	r0, r0, #15
 802962c:	fa00 f00b 	lsl.w	r0, r0, fp
 8029630:	4303      	orrs	r3, r0
 8029632:	9300      	str	r3, [sp, #0]
 8029634:	f10b 0b04 	add.w	fp, fp, #4
 8029638:	9b03      	ldr	r3, [sp, #12]
 802963a:	e00d      	b.n	8029658 <__gethex+0x27c>
 802963c:	9b03      	ldr	r3, [sp, #12]
 802963e:	9a06      	ldr	r2, [sp, #24]
 8029640:	4413      	add	r3, r2
 8029642:	42bb      	cmp	r3, r7
 8029644:	d3e0      	bcc.n	8029608 <__gethex+0x22c>
 8029646:	4618      	mov	r0, r3
 8029648:	9901      	ldr	r1, [sp, #4]
 802964a:	9307      	str	r3, [sp, #28]
 802964c:	4652      	mov	r2, sl
 802964e:	f7fe fa99 	bl	8027b84 <strncmp>
 8029652:	9b07      	ldr	r3, [sp, #28]
 8029654:	2800      	cmp	r0, #0
 8029656:	d1d7      	bne.n	8029608 <__gethex+0x22c>
 8029658:	461e      	mov	r6, r3
 802965a:	e78b      	b.n	8029574 <__gethex+0x198>
 802965c:	f04f 0a03 	mov.w	sl, #3
 8029660:	e7b8      	b.n	80295d4 <__gethex+0x1f8>
 8029662:	da0a      	bge.n	802967a <__gethex+0x29e>
 8029664:	1a37      	subs	r7, r6, r0
 8029666:	4621      	mov	r1, r4
 8029668:	ee18 0a10 	vmov	r0, s16
 802966c:	463a      	mov	r2, r7
 802966e:	f000 fda7 	bl	802a1c0 <__lshift>
 8029672:	1bed      	subs	r5, r5, r7
 8029674:	4604      	mov	r4, r0
 8029676:	f100 0914 	add.w	r9, r0, #20
 802967a:	f04f 0a00 	mov.w	sl, #0
 802967e:	e7ae      	b.n	80295de <__gethex+0x202>
 8029680:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8029684:	42a8      	cmp	r0, r5
 8029686:	dd72      	ble.n	802976e <__gethex+0x392>
 8029688:	1b45      	subs	r5, r0, r5
 802968a:	42ae      	cmp	r6, r5
 802968c:	dc36      	bgt.n	80296fc <__gethex+0x320>
 802968e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8029692:	2b02      	cmp	r3, #2
 8029694:	d02a      	beq.n	80296ec <__gethex+0x310>
 8029696:	2b03      	cmp	r3, #3
 8029698:	d02c      	beq.n	80296f4 <__gethex+0x318>
 802969a:	2b01      	cmp	r3, #1
 802969c:	d115      	bne.n	80296ca <__gethex+0x2ee>
 802969e:	42ae      	cmp	r6, r5
 80296a0:	d113      	bne.n	80296ca <__gethex+0x2ee>
 80296a2:	2e01      	cmp	r6, #1
 80296a4:	d10b      	bne.n	80296be <__gethex+0x2e2>
 80296a6:	9a04      	ldr	r2, [sp, #16]
 80296a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80296ac:	6013      	str	r3, [r2, #0]
 80296ae:	2301      	movs	r3, #1
 80296b0:	6123      	str	r3, [r4, #16]
 80296b2:	f8c9 3000 	str.w	r3, [r9]
 80296b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80296b8:	2762      	movs	r7, #98	; 0x62
 80296ba:	601c      	str	r4, [r3, #0]
 80296bc:	e723      	b.n	8029506 <__gethex+0x12a>
 80296be:	1e71      	subs	r1, r6, #1
 80296c0:	4620      	mov	r0, r4
 80296c2:	f000 ffbb 	bl	802a63c <__any_on>
 80296c6:	2800      	cmp	r0, #0
 80296c8:	d1ed      	bne.n	80296a6 <__gethex+0x2ca>
 80296ca:	ee18 0a10 	vmov	r0, s16
 80296ce:	4621      	mov	r1, r4
 80296d0:	f000 fb5a 	bl	8029d88 <_Bfree>
 80296d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80296d6:	2300      	movs	r3, #0
 80296d8:	6013      	str	r3, [r2, #0]
 80296da:	2750      	movs	r7, #80	; 0x50
 80296dc:	e713      	b.n	8029506 <__gethex+0x12a>
 80296de:	bf00      	nop
 80296e0:	08060fd4 	.word	0x08060fd4
 80296e4:	08060f58 	.word	0x08060f58
 80296e8:	08060f69 	.word	0x08060f69
 80296ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80296ee:	2b00      	cmp	r3, #0
 80296f0:	d1eb      	bne.n	80296ca <__gethex+0x2ee>
 80296f2:	e7d8      	b.n	80296a6 <__gethex+0x2ca>
 80296f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80296f6:	2b00      	cmp	r3, #0
 80296f8:	d1d5      	bne.n	80296a6 <__gethex+0x2ca>
 80296fa:	e7e6      	b.n	80296ca <__gethex+0x2ee>
 80296fc:	1e6f      	subs	r7, r5, #1
 80296fe:	f1ba 0f00 	cmp.w	sl, #0
 8029702:	d131      	bne.n	8029768 <__gethex+0x38c>
 8029704:	b127      	cbz	r7, 8029710 <__gethex+0x334>
 8029706:	4639      	mov	r1, r7
 8029708:	4620      	mov	r0, r4
 802970a:	f000 ff97 	bl	802a63c <__any_on>
 802970e:	4682      	mov	sl, r0
 8029710:	117b      	asrs	r3, r7, #5
 8029712:	2101      	movs	r1, #1
 8029714:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8029718:	f007 071f 	and.w	r7, r7, #31
 802971c:	fa01 f707 	lsl.w	r7, r1, r7
 8029720:	421f      	tst	r7, r3
 8029722:	4629      	mov	r1, r5
 8029724:	4620      	mov	r0, r4
 8029726:	bf18      	it	ne
 8029728:	f04a 0a02 	orrne.w	sl, sl, #2
 802972c:	1b76      	subs	r6, r6, r5
 802972e:	f7ff fded 	bl	802930c <rshift>
 8029732:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8029736:	2702      	movs	r7, #2
 8029738:	f1ba 0f00 	cmp.w	sl, #0
 802973c:	d048      	beq.n	80297d0 <__gethex+0x3f4>
 802973e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8029742:	2b02      	cmp	r3, #2
 8029744:	d015      	beq.n	8029772 <__gethex+0x396>
 8029746:	2b03      	cmp	r3, #3
 8029748:	d017      	beq.n	802977a <__gethex+0x39e>
 802974a:	2b01      	cmp	r3, #1
 802974c:	d109      	bne.n	8029762 <__gethex+0x386>
 802974e:	f01a 0f02 	tst.w	sl, #2
 8029752:	d006      	beq.n	8029762 <__gethex+0x386>
 8029754:	f8d9 0000 	ldr.w	r0, [r9]
 8029758:	ea4a 0a00 	orr.w	sl, sl, r0
 802975c:	f01a 0f01 	tst.w	sl, #1
 8029760:	d10e      	bne.n	8029780 <__gethex+0x3a4>
 8029762:	f047 0710 	orr.w	r7, r7, #16
 8029766:	e033      	b.n	80297d0 <__gethex+0x3f4>
 8029768:	f04f 0a01 	mov.w	sl, #1
 802976c:	e7d0      	b.n	8029710 <__gethex+0x334>
 802976e:	2701      	movs	r7, #1
 8029770:	e7e2      	b.n	8029738 <__gethex+0x35c>
 8029772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029774:	f1c3 0301 	rsb	r3, r3, #1
 8029778:	9315      	str	r3, [sp, #84]	; 0x54
 802977a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802977c:	2b00      	cmp	r3, #0
 802977e:	d0f0      	beq.n	8029762 <__gethex+0x386>
 8029780:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8029784:	f104 0314 	add.w	r3, r4, #20
 8029788:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 802978c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8029790:	f04f 0c00 	mov.w	ip, #0
 8029794:	4618      	mov	r0, r3
 8029796:	f853 2b04 	ldr.w	r2, [r3], #4
 802979a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 802979e:	d01c      	beq.n	80297da <__gethex+0x3fe>
 80297a0:	3201      	adds	r2, #1
 80297a2:	6002      	str	r2, [r0, #0]
 80297a4:	2f02      	cmp	r7, #2
 80297a6:	f104 0314 	add.w	r3, r4, #20
 80297aa:	d13f      	bne.n	802982c <__gethex+0x450>
 80297ac:	f8d8 2000 	ldr.w	r2, [r8]
 80297b0:	3a01      	subs	r2, #1
 80297b2:	42b2      	cmp	r2, r6
 80297b4:	d10a      	bne.n	80297cc <__gethex+0x3f0>
 80297b6:	1171      	asrs	r1, r6, #5
 80297b8:	2201      	movs	r2, #1
 80297ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80297be:	f006 061f 	and.w	r6, r6, #31
 80297c2:	fa02 f606 	lsl.w	r6, r2, r6
 80297c6:	421e      	tst	r6, r3
 80297c8:	bf18      	it	ne
 80297ca:	4617      	movne	r7, r2
 80297cc:	f047 0720 	orr.w	r7, r7, #32
 80297d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80297d2:	601c      	str	r4, [r3, #0]
 80297d4:	9b04      	ldr	r3, [sp, #16]
 80297d6:	601d      	str	r5, [r3, #0]
 80297d8:	e695      	b.n	8029506 <__gethex+0x12a>
 80297da:	4299      	cmp	r1, r3
 80297dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80297e0:	d8d8      	bhi.n	8029794 <__gethex+0x3b8>
 80297e2:	68a3      	ldr	r3, [r4, #8]
 80297e4:	459b      	cmp	fp, r3
 80297e6:	db19      	blt.n	802981c <__gethex+0x440>
 80297e8:	6861      	ldr	r1, [r4, #4]
 80297ea:	ee18 0a10 	vmov	r0, s16
 80297ee:	3101      	adds	r1, #1
 80297f0:	f000 fa8a 	bl	8029d08 <_Balloc>
 80297f4:	4681      	mov	r9, r0
 80297f6:	b918      	cbnz	r0, 8029800 <__gethex+0x424>
 80297f8:	4b1a      	ldr	r3, [pc, #104]	; (8029864 <__gethex+0x488>)
 80297fa:	4602      	mov	r2, r0
 80297fc:	2184      	movs	r1, #132	; 0x84
 80297fe:	e6a8      	b.n	8029552 <__gethex+0x176>
 8029800:	6922      	ldr	r2, [r4, #16]
 8029802:	3202      	adds	r2, #2
 8029804:	f104 010c 	add.w	r1, r4, #12
 8029808:	0092      	lsls	r2, r2, #2
 802980a:	300c      	adds	r0, #12
 802980c:	f7fc fecc 	bl	80265a8 <memcpy>
 8029810:	4621      	mov	r1, r4
 8029812:	ee18 0a10 	vmov	r0, s16
 8029816:	f000 fab7 	bl	8029d88 <_Bfree>
 802981a:	464c      	mov	r4, r9
 802981c:	6923      	ldr	r3, [r4, #16]
 802981e:	1c5a      	adds	r2, r3, #1
 8029820:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8029824:	6122      	str	r2, [r4, #16]
 8029826:	2201      	movs	r2, #1
 8029828:	615a      	str	r2, [r3, #20]
 802982a:	e7bb      	b.n	80297a4 <__gethex+0x3c8>
 802982c:	6922      	ldr	r2, [r4, #16]
 802982e:	455a      	cmp	r2, fp
 8029830:	dd0b      	ble.n	802984a <__gethex+0x46e>
 8029832:	2101      	movs	r1, #1
 8029834:	4620      	mov	r0, r4
 8029836:	f7ff fd69 	bl	802930c <rshift>
 802983a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802983e:	3501      	adds	r5, #1
 8029840:	42ab      	cmp	r3, r5
 8029842:	f6ff aed0 	blt.w	80295e6 <__gethex+0x20a>
 8029846:	2701      	movs	r7, #1
 8029848:	e7c0      	b.n	80297cc <__gethex+0x3f0>
 802984a:	f016 061f 	ands.w	r6, r6, #31
 802984e:	d0fa      	beq.n	8029846 <__gethex+0x46a>
 8029850:	449a      	add	sl, r3
 8029852:	f1c6 0620 	rsb	r6, r6, #32
 8029856:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 802985a:	f000 fb4b 	bl	8029ef4 <__hi0bits>
 802985e:	42b0      	cmp	r0, r6
 8029860:	dbe7      	blt.n	8029832 <__gethex+0x456>
 8029862:	e7f0      	b.n	8029846 <__gethex+0x46a>
 8029864:	08060f58 	.word	0x08060f58

08029868 <L_shift>:
 8029868:	f1c2 0208 	rsb	r2, r2, #8
 802986c:	0092      	lsls	r2, r2, #2
 802986e:	b570      	push	{r4, r5, r6, lr}
 8029870:	f1c2 0620 	rsb	r6, r2, #32
 8029874:	6843      	ldr	r3, [r0, #4]
 8029876:	6804      	ldr	r4, [r0, #0]
 8029878:	fa03 f506 	lsl.w	r5, r3, r6
 802987c:	432c      	orrs	r4, r5
 802987e:	40d3      	lsrs	r3, r2
 8029880:	6004      	str	r4, [r0, #0]
 8029882:	f840 3f04 	str.w	r3, [r0, #4]!
 8029886:	4288      	cmp	r0, r1
 8029888:	d3f4      	bcc.n	8029874 <L_shift+0xc>
 802988a:	bd70      	pop	{r4, r5, r6, pc}

0802988c <__match>:
 802988c:	b530      	push	{r4, r5, lr}
 802988e:	6803      	ldr	r3, [r0, #0]
 8029890:	3301      	adds	r3, #1
 8029892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029896:	b914      	cbnz	r4, 802989e <__match+0x12>
 8029898:	6003      	str	r3, [r0, #0]
 802989a:	2001      	movs	r0, #1
 802989c:	bd30      	pop	{r4, r5, pc}
 802989e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80298a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80298a6:	2d19      	cmp	r5, #25
 80298a8:	bf98      	it	ls
 80298aa:	3220      	addls	r2, #32
 80298ac:	42a2      	cmp	r2, r4
 80298ae:	d0f0      	beq.n	8029892 <__match+0x6>
 80298b0:	2000      	movs	r0, #0
 80298b2:	e7f3      	b.n	802989c <__match+0x10>

080298b4 <__hexnan>:
 80298b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80298b8:	680b      	ldr	r3, [r1, #0]
 80298ba:	6801      	ldr	r1, [r0, #0]
 80298bc:	115e      	asrs	r6, r3, #5
 80298be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80298c2:	f013 031f 	ands.w	r3, r3, #31
 80298c6:	b087      	sub	sp, #28
 80298c8:	bf18      	it	ne
 80298ca:	3604      	addne	r6, #4
 80298cc:	2500      	movs	r5, #0
 80298ce:	1f37      	subs	r7, r6, #4
 80298d0:	4682      	mov	sl, r0
 80298d2:	4690      	mov	r8, r2
 80298d4:	9301      	str	r3, [sp, #4]
 80298d6:	f846 5c04 	str.w	r5, [r6, #-4]
 80298da:	46b9      	mov	r9, r7
 80298dc:	463c      	mov	r4, r7
 80298de:	9502      	str	r5, [sp, #8]
 80298e0:	46ab      	mov	fp, r5
 80298e2:	784a      	ldrb	r2, [r1, #1]
 80298e4:	1c4b      	adds	r3, r1, #1
 80298e6:	9303      	str	r3, [sp, #12]
 80298e8:	b342      	cbz	r2, 802993c <__hexnan+0x88>
 80298ea:	4610      	mov	r0, r2
 80298ec:	9105      	str	r1, [sp, #20]
 80298ee:	9204      	str	r2, [sp, #16]
 80298f0:	f7ff fd5e 	bl	80293b0 <__hexdig_fun>
 80298f4:	2800      	cmp	r0, #0
 80298f6:	d14f      	bne.n	8029998 <__hexnan+0xe4>
 80298f8:	9a04      	ldr	r2, [sp, #16]
 80298fa:	9905      	ldr	r1, [sp, #20]
 80298fc:	2a20      	cmp	r2, #32
 80298fe:	d818      	bhi.n	8029932 <__hexnan+0x7e>
 8029900:	9b02      	ldr	r3, [sp, #8]
 8029902:	459b      	cmp	fp, r3
 8029904:	dd13      	ble.n	802992e <__hexnan+0x7a>
 8029906:	454c      	cmp	r4, r9
 8029908:	d206      	bcs.n	8029918 <__hexnan+0x64>
 802990a:	2d07      	cmp	r5, #7
 802990c:	dc04      	bgt.n	8029918 <__hexnan+0x64>
 802990e:	462a      	mov	r2, r5
 8029910:	4649      	mov	r1, r9
 8029912:	4620      	mov	r0, r4
 8029914:	f7ff ffa8 	bl	8029868 <L_shift>
 8029918:	4544      	cmp	r4, r8
 802991a:	d950      	bls.n	80299be <__hexnan+0x10a>
 802991c:	2300      	movs	r3, #0
 802991e:	f1a4 0904 	sub.w	r9, r4, #4
 8029922:	f844 3c04 	str.w	r3, [r4, #-4]
 8029926:	f8cd b008 	str.w	fp, [sp, #8]
 802992a:	464c      	mov	r4, r9
 802992c:	461d      	mov	r5, r3
 802992e:	9903      	ldr	r1, [sp, #12]
 8029930:	e7d7      	b.n	80298e2 <__hexnan+0x2e>
 8029932:	2a29      	cmp	r2, #41	; 0x29
 8029934:	d156      	bne.n	80299e4 <__hexnan+0x130>
 8029936:	3102      	adds	r1, #2
 8029938:	f8ca 1000 	str.w	r1, [sl]
 802993c:	f1bb 0f00 	cmp.w	fp, #0
 8029940:	d050      	beq.n	80299e4 <__hexnan+0x130>
 8029942:	454c      	cmp	r4, r9
 8029944:	d206      	bcs.n	8029954 <__hexnan+0xa0>
 8029946:	2d07      	cmp	r5, #7
 8029948:	dc04      	bgt.n	8029954 <__hexnan+0xa0>
 802994a:	462a      	mov	r2, r5
 802994c:	4649      	mov	r1, r9
 802994e:	4620      	mov	r0, r4
 8029950:	f7ff ff8a 	bl	8029868 <L_shift>
 8029954:	4544      	cmp	r4, r8
 8029956:	d934      	bls.n	80299c2 <__hexnan+0x10e>
 8029958:	f1a8 0204 	sub.w	r2, r8, #4
 802995c:	4623      	mov	r3, r4
 802995e:	f853 1b04 	ldr.w	r1, [r3], #4
 8029962:	f842 1f04 	str.w	r1, [r2, #4]!
 8029966:	429f      	cmp	r7, r3
 8029968:	d2f9      	bcs.n	802995e <__hexnan+0xaa>
 802996a:	1b3b      	subs	r3, r7, r4
 802996c:	f023 0303 	bic.w	r3, r3, #3
 8029970:	3304      	adds	r3, #4
 8029972:	3401      	adds	r4, #1
 8029974:	3e03      	subs	r6, #3
 8029976:	42b4      	cmp	r4, r6
 8029978:	bf88      	it	hi
 802997a:	2304      	movhi	r3, #4
 802997c:	4443      	add	r3, r8
 802997e:	2200      	movs	r2, #0
 8029980:	f843 2b04 	str.w	r2, [r3], #4
 8029984:	429f      	cmp	r7, r3
 8029986:	d2fb      	bcs.n	8029980 <__hexnan+0xcc>
 8029988:	683b      	ldr	r3, [r7, #0]
 802998a:	b91b      	cbnz	r3, 8029994 <__hexnan+0xe0>
 802998c:	4547      	cmp	r7, r8
 802998e:	d127      	bne.n	80299e0 <__hexnan+0x12c>
 8029990:	2301      	movs	r3, #1
 8029992:	603b      	str	r3, [r7, #0]
 8029994:	2005      	movs	r0, #5
 8029996:	e026      	b.n	80299e6 <__hexnan+0x132>
 8029998:	3501      	adds	r5, #1
 802999a:	2d08      	cmp	r5, #8
 802999c:	f10b 0b01 	add.w	fp, fp, #1
 80299a0:	dd06      	ble.n	80299b0 <__hexnan+0xfc>
 80299a2:	4544      	cmp	r4, r8
 80299a4:	d9c3      	bls.n	802992e <__hexnan+0x7a>
 80299a6:	2300      	movs	r3, #0
 80299a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80299ac:	2501      	movs	r5, #1
 80299ae:	3c04      	subs	r4, #4
 80299b0:	6822      	ldr	r2, [r4, #0]
 80299b2:	f000 000f 	and.w	r0, r0, #15
 80299b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80299ba:	6022      	str	r2, [r4, #0]
 80299bc:	e7b7      	b.n	802992e <__hexnan+0x7a>
 80299be:	2508      	movs	r5, #8
 80299c0:	e7b5      	b.n	802992e <__hexnan+0x7a>
 80299c2:	9b01      	ldr	r3, [sp, #4]
 80299c4:	2b00      	cmp	r3, #0
 80299c6:	d0df      	beq.n	8029988 <__hexnan+0xd4>
 80299c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80299cc:	f1c3 0320 	rsb	r3, r3, #32
 80299d0:	fa22 f303 	lsr.w	r3, r2, r3
 80299d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80299d8:	401a      	ands	r2, r3
 80299da:	f846 2c04 	str.w	r2, [r6, #-4]
 80299de:	e7d3      	b.n	8029988 <__hexnan+0xd4>
 80299e0:	3f04      	subs	r7, #4
 80299e2:	e7d1      	b.n	8029988 <__hexnan+0xd4>
 80299e4:	2004      	movs	r0, #4
 80299e6:	b007      	add	sp, #28
 80299e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080299ec <_findenv_r>:
 80299ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80299f0:	4607      	mov	r7, r0
 80299f2:	4689      	mov	r9, r1
 80299f4:	4616      	mov	r6, r2
 80299f6:	f001 fe83 	bl	802b700 <__env_lock>
 80299fa:	4b18      	ldr	r3, [pc, #96]	; (8029a5c <_findenv_r+0x70>)
 80299fc:	681c      	ldr	r4, [r3, #0]
 80299fe:	469a      	mov	sl, r3
 8029a00:	b134      	cbz	r4, 8029a10 <_findenv_r+0x24>
 8029a02:	464b      	mov	r3, r9
 8029a04:	4698      	mov	r8, r3
 8029a06:	f813 1b01 	ldrb.w	r1, [r3], #1
 8029a0a:	b139      	cbz	r1, 8029a1c <_findenv_r+0x30>
 8029a0c:	293d      	cmp	r1, #61	; 0x3d
 8029a0e:	d1f9      	bne.n	8029a04 <_findenv_r+0x18>
 8029a10:	4638      	mov	r0, r7
 8029a12:	f001 fe7b 	bl	802b70c <__env_unlock>
 8029a16:	2000      	movs	r0, #0
 8029a18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029a1c:	eba8 0809 	sub.w	r8, r8, r9
 8029a20:	46a3      	mov	fp, r4
 8029a22:	f854 0b04 	ldr.w	r0, [r4], #4
 8029a26:	2800      	cmp	r0, #0
 8029a28:	d0f2      	beq.n	8029a10 <_findenv_r+0x24>
 8029a2a:	4642      	mov	r2, r8
 8029a2c:	4649      	mov	r1, r9
 8029a2e:	f7fe f8a9 	bl	8027b84 <strncmp>
 8029a32:	2800      	cmp	r0, #0
 8029a34:	d1f4      	bne.n	8029a20 <_findenv_r+0x34>
 8029a36:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8029a3a:	eb03 0508 	add.w	r5, r3, r8
 8029a3e:	f813 3008 	ldrb.w	r3, [r3, r8]
 8029a42:	2b3d      	cmp	r3, #61	; 0x3d
 8029a44:	d1ec      	bne.n	8029a20 <_findenv_r+0x34>
 8029a46:	f8da 3000 	ldr.w	r3, [sl]
 8029a4a:	ebab 0303 	sub.w	r3, fp, r3
 8029a4e:	109b      	asrs	r3, r3, #2
 8029a50:	4638      	mov	r0, r7
 8029a52:	6033      	str	r3, [r6, #0]
 8029a54:	f001 fe5a 	bl	802b70c <__env_unlock>
 8029a58:	1c68      	adds	r0, r5, #1
 8029a5a:	e7dd      	b.n	8029a18 <_findenv_r+0x2c>
 8029a5c:	20000010 	.word	0x20000010

08029a60 <_getenv_r>:
 8029a60:	b507      	push	{r0, r1, r2, lr}
 8029a62:	aa01      	add	r2, sp, #4
 8029a64:	f7ff ffc2 	bl	80299ec <_findenv_r>
 8029a68:	b003      	add	sp, #12
 8029a6a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08029a70 <__gettzinfo>:
 8029a70:	4800      	ldr	r0, [pc, #0]	; (8029a74 <__gettzinfo+0x4>)
 8029a72:	4770      	bx	lr
 8029a74:	200000d0 	.word	0x200000d0

08029a78 <gmtime_r>:
 8029a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029a7c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8029a80:	460c      	mov	r4, r1
 8029a82:	4a51      	ldr	r2, [pc, #324]	; (8029bc8 <gmtime_r+0x150>)
 8029a84:	2300      	movs	r3, #0
 8029a86:	4630      	mov	r0, r6
 8029a88:	4639      	mov	r1, r7
 8029a8a:	f7d7 f8bd 	bl	8000c08 <__aeabi_ldivmod>
 8029a8e:	4639      	mov	r1, r7
 8029a90:	4605      	mov	r5, r0
 8029a92:	4a4d      	ldr	r2, [pc, #308]	; (8029bc8 <gmtime_r+0x150>)
 8029a94:	4630      	mov	r0, r6
 8029a96:	2300      	movs	r3, #0
 8029a98:	f7d7 f8b6 	bl	8000c08 <__aeabi_ldivmod>
 8029a9c:	2a00      	cmp	r2, #0
 8029a9e:	bfbc      	itt	lt
 8029aa0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8029aa4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8029aa8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8029aac:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8029ab0:	fbb2 f3f1 	udiv	r3, r2, r1
 8029ab4:	fb01 2213 	mls	r2, r1, r3, r2
 8029ab8:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8029abc:	bfac      	ite	ge
 8029abe:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8029ac2:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8029ac6:	60a3      	str	r3, [r4, #8]
 8029ac8:	fbb2 f3f1 	udiv	r3, r2, r1
 8029acc:	fb01 2213 	mls	r2, r1, r3, r2
 8029ad0:	6063      	str	r3, [r4, #4]
 8029ad2:	6022      	str	r2, [r4, #0]
 8029ad4:	1cc3      	adds	r3, r0, #3
 8029ad6:	2207      	movs	r2, #7
 8029ad8:	fb93 f2f2 	sdiv	r2, r3, r2
 8029adc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8029ae0:	1a9b      	subs	r3, r3, r2
 8029ae2:	bf48      	it	mi
 8029ae4:	3307      	addmi	r3, #7
 8029ae6:	2800      	cmp	r0, #0
 8029ae8:	61a3      	str	r3, [r4, #24]
 8029aea:	bfb8      	it	lt
 8029aec:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8029af0:	4936      	ldr	r1, [pc, #216]	; (8029bcc <gmtime_r+0x154>)
 8029af2:	bfae      	itee	ge
 8029af4:	fb90 f1f1 	sdivge	r1, r0, r1
 8029af8:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8029afc:	fb93 f1f1 	sdivlt	r1, r3, r1
 8029b00:	4b33      	ldr	r3, [pc, #204]	; (8029bd0 <gmtime_r+0x158>)
 8029b02:	fb03 0001 	mla	r0, r3, r1, r0
 8029b06:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8029b0a:	fbb0 f2f2 	udiv	r2, r0, r2
 8029b0e:	4402      	add	r2, r0
 8029b10:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8029b14:	fbb0 f3fc 	udiv	r3, r0, ip
 8029b18:	1ad2      	subs	r2, r2, r3
 8029b1a:	f240 176d 	movw	r7, #365	; 0x16d
 8029b1e:	4b2d      	ldr	r3, [pc, #180]	; (8029bd4 <gmtime_r+0x15c>)
 8029b20:	fbb0 f3f3 	udiv	r3, r0, r3
 8029b24:	2664      	movs	r6, #100	; 0x64
 8029b26:	1ad3      	subs	r3, r2, r3
 8029b28:	fbb3 f5f7 	udiv	r5, r3, r7
 8029b2c:	fbb3 f3fc 	udiv	r3, r3, ip
 8029b30:	fbb5 f2f6 	udiv	r2, r5, r6
 8029b34:	1ad3      	subs	r3, r2, r3
 8029b36:	4403      	add	r3, r0
 8029b38:	fb07 3315 	mls	r3, r7, r5, r3
 8029b3c:	2099      	movs	r0, #153	; 0x99
 8029b3e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8029b42:	f10c 0c02 	add.w	ip, ip, #2
 8029b46:	f103 0e01 	add.w	lr, r3, #1
 8029b4a:	fbbc f7f0 	udiv	r7, ip, r0
 8029b4e:	4378      	muls	r0, r7
 8029b50:	3002      	adds	r0, #2
 8029b52:	f04f 0805 	mov.w	r8, #5
 8029b56:	fbb0 f0f8 	udiv	r0, r0, r8
 8029b5a:	ebae 0000 	sub.w	r0, lr, r0
 8029b5e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8029b62:	45f4      	cmp	ip, lr
 8029b64:	bf94      	ite	ls
 8029b66:	f04f 0c02 	movls.w	ip, #2
 8029b6a:	f06f 0c09 	mvnhi.w	ip, #9
 8029b6e:	4467      	add	r7, ip
 8029b70:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8029b74:	fb0c 5101 	mla	r1, ip, r1, r5
 8029b78:	2f01      	cmp	r7, #1
 8029b7a:	bf98      	it	ls
 8029b7c:	3101      	addls	r1, #1
 8029b7e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8029b82:	d30c      	bcc.n	8029b9e <gmtime_r+0x126>
 8029b84:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8029b88:	61e3      	str	r3, [r4, #28]
 8029b8a:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8029b8e:	2300      	movs	r3, #0
 8029b90:	60e0      	str	r0, [r4, #12]
 8029b92:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8029b96:	6223      	str	r3, [r4, #32]
 8029b98:	4620      	mov	r0, r4
 8029b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029b9e:	f015 0f03 	tst.w	r5, #3
 8029ba2:	d102      	bne.n	8029baa <gmtime_r+0x132>
 8029ba4:	fb06 5212 	mls	r2, r6, r2, r5
 8029ba8:	b95a      	cbnz	r2, 8029bc2 <gmtime_r+0x14a>
 8029baa:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8029bae:	fbb5 f2f6 	udiv	r2, r5, r6
 8029bb2:	fb06 5212 	mls	r2, r6, r2, r5
 8029bb6:	fab2 f282 	clz	r2, r2
 8029bba:	0952      	lsrs	r2, r2, #5
 8029bbc:	333b      	adds	r3, #59	; 0x3b
 8029bbe:	4413      	add	r3, r2
 8029bc0:	e7e2      	b.n	8029b88 <gmtime_r+0x110>
 8029bc2:	2201      	movs	r2, #1
 8029bc4:	e7fa      	b.n	8029bbc <gmtime_r+0x144>
 8029bc6:	bf00      	nop
 8029bc8:	00015180 	.word	0x00015180
 8029bcc:	00023ab1 	.word	0x00023ab1
 8029bd0:	fffdc54f 	.word	0xfffdc54f
 8029bd4:	00023ab0 	.word	0x00023ab0

08029bd8 <labs>:
 8029bd8:	2800      	cmp	r0, #0
 8029bda:	bfb8      	it	lt
 8029bdc:	4240      	neglt	r0, r0
 8029bde:	4770      	bx	lr

08029be0 <_lseek_r>:
 8029be0:	b538      	push	{r3, r4, r5, lr}
 8029be2:	4d07      	ldr	r5, [pc, #28]	; (8029c00 <_lseek_r+0x20>)
 8029be4:	4604      	mov	r4, r0
 8029be6:	4608      	mov	r0, r1
 8029be8:	4611      	mov	r1, r2
 8029bea:	2200      	movs	r2, #0
 8029bec:	602a      	str	r2, [r5, #0]
 8029bee:	461a      	mov	r2, r3
 8029bf0:	f7de fb6a 	bl	80082c8 <_lseek>
 8029bf4:	1c43      	adds	r3, r0, #1
 8029bf6:	d102      	bne.n	8029bfe <_lseek_r+0x1e>
 8029bf8:	682b      	ldr	r3, [r5, #0]
 8029bfa:	b103      	cbz	r3, 8029bfe <_lseek_r+0x1e>
 8029bfc:	6023      	str	r3, [r4, #0]
 8029bfe:	bd38      	pop	{r3, r4, r5, pc}
 8029c00:	2001d538 	.word	0x2001d538

08029c04 <__swhatbuf_r>:
 8029c04:	b570      	push	{r4, r5, r6, lr}
 8029c06:	460e      	mov	r6, r1
 8029c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029c0c:	2900      	cmp	r1, #0
 8029c0e:	b096      	sub	sp, #88	; 0x58
 8029c10:	4614      	mov	r4, r2
 8029c12:	461d      	mov	r5, r3
 8029c14:	da07      	bge.n	8029c26 <__swhatbuf_r+0x22>
 8029c16:	2300      	movs	r3, #0
 8029c18:	602b      	str	r3, [r5, #0]
 8029c1a:	89b3      	ldrh	r3, [r6, #12]
 8029c1c:	061a      	lsls	r2, r3, #24
 8029c1e:	d410      	bmi.n	8029c42 <__swhatbuf_r+0x3e>
 8029c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029c24:	e00e      	b.n	8029c44 <__swhatbuf_r+0x40>
 8029c26:	466a      	mov	r2, sp
 8029c28:	f001 fd76 	bl	802b718 <_fstat_r>
 8029c2c:	2800      	cmp	r0, #0
 8029c2e:	dbf2      	blt.n	8029c16 <__swhatbuf_r+0x12>
 8029c30:	9a01      	ldr	r2, [sp, #4]
 8029c32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8029c36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8029c3a:	425a      	negs	r2, r3
 8029c3c:	415a      	adcs	r2, r3
 8029c3e:	602a      	str	r2, [r5, #0]
 8029c40:	e7ee      	b.n	8029c20 <__swhatbuf_r+0x1c>
 8029c42:	2340      	movs	r3, #64	; 0x40
 8029c44:	2000      	movs	r0, #0
 8029c46:	6023      	str	r3, [r4, #0]
 8029c48:	b016      	add	sp, #88	; 0x58
 8029c4a:	bd70      	pop	{r4, r5, r6, pc}

08029c4c <__smakebuf_r>:
 8029c4c:	898b      	ldrh	r3, [r1, #12]
 8029c4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029c50:	079d      	lsls	r5, r3, #30
 8029c52:	4606      	mov	r6, r0
 8029c54:	460c      	mov	r4, r1
 8029c56:	d507      	bpl.n	8029c68 <__smakebuf_r+0x1c>
 8029c58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8029c5c:	6023      	str	r3, [r4, #0]
 8029c5e:	6123      	str	r3, [r4, #16]
 8029c60:	2301      	movs	r3, #1
 8029c62:	6163      	str	r3, [r4, #20]
 8029c64:	b002      	add	sp, #8
 8029c66:	bd70      	pop	{r4, r5, r6, pc}
 8029c68:	ab01      	add	r3, sp, #4
 8029c6a:	466a      	mov	r2, sp
 8029c6c:	f7ff ffca 	bl	8029c04 <__swhatbuf_r>
 8029c70:	9900      	ldr	r1, [sp, #0]
 8029c72:	4605      	mov	r5, r0
 8029c74:	4630      	mov	r0, r6
 8029c76:	f7fc ff95 	bl	8026ba4 <_malloc_r>
 8029c7a:	b948      	cbnz	r0, 8029c90 <__smakebuf_r+0x44>
 8029c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029c80:	059a      	lsls	r2, r3, #22
 8029c82:	d4ef      	bmi.n	8029c64 <__smakebuf_r+0x18>
 8029c84:	f023 0303 	bic.w	r3, r3, #3
 8029c88:	f043 0302 	orr.w	r3, r3, #2
 8029c8c:	81a3      	strh	r3, [r4, #12]
 8029c8e:	e7e3      	b.n	8029c58 <__smakebuf_r+0xc>
 8029c90:	4b0d      	ldr	r3, [pc, #52]	; (8029cc8 <__smakebuf_r+0x7c>)
 8029c92:	62b3      	str	r3, [r6, #40]	; 0x28
 8029c94:	89a3      	ldrh	r3, [r4, #12]
 8029c96:	6020      	str	r0, [r4, #0]
 8029c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029c9c:	81a3      	strh	r3, [r4, #12]
 8029c9e:	9b00      	ldr	r3, [sp, #0]
 8029ca0:	6163      	str	r3, [r4, #20]
 8029ca2:	9b01      	ldr	r3, [sp, #4]
 8029ca4:	6120      	str	r0, [r4, #16]
 8029ca6:	b15b      	cbz	r3, 8029cc0 <__smakebuf_r+0x74>
 8029ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029cac:	4630      	mov	r0, r6
 8029cae:	f001 fd45 	bl	802b73c <_isatty_r>
 8029cb2:	b128      	cbz	r0, 8029cc0 <__smakebuf_r+0x74>
 8029cb4:	89a3      	ldrh	r3, [r4, #12]
 8029cb6:	f023 0303 	bic.w	r3, r3, #3
 8029cba:	f043 0301 	orr.w	r3, r3, #1
 8029cbe:	81a3      	strh	r3, [r4, #12]
 8029cc0:	89a0      	ldrh	r0, [r4, #12]
 8029cc2:	4305      	orrs	r5, r0
 8029cc4:	81a5      	strh	r5, [r4, #12]
 8029cc6:	e7cd      	b.n	8029c64 <__smakebuf_r+0x18>
 8029cc8:	0802614d 	.word	0x0802614d

08029ccc <__ascii_mbtowc>:
 8029ccc:	b082      	sub	sp, #8
 8029cce:	b901      	cbnz	r1, 8029cd2 <__ascii_mbtowc+0x6>
 8029cd0:	a901      	add	r1, sp, #4
 8029cd2:	b142      	cbz	r2, 8029ce6 <__ascii_mbtowc+0x1a>
 8029cd4:	b14b      	cbz	r3, 8029cea <__ascii_mbtowc+0x1e>
 8029cd6:	7813      	ldrb	r3, [r2, #0]
 8029cd8:	600b      	str	r3, [r1, #0]
 8029cda:	7812      	ldrb	r2, [r2, #0]
 8029cdc:	1e10      	subs	r0, r2, #0
 8029cde:	bf18      	it	ne
 8029ce0:	2001      	movne	r0, #1
 8029ce2:	b002      	add	sp, #8
 8029ce4:	4770      	bx	lr
 8029ce6:	4610      	mov	r0, r2
 8029ce8:	e7fb      	b.n	8029ce2 <__ascii_mbtowc+0x16>
 8029cea:	f06f 0001 	mvn.w	r0, #1
 8029cee:	e7f8      	b.n	8029ce2 <__ascii_mbtowc+0x16>

08029cf0 <__malloc_lock>:
 8029cf0:	4801      	ldr	r0, [pc, #4]	; (8029cf8 <__malloc_lock+0x8>)
 8029cf2:	f7fc bc37 	b.w	8026564 <__retarget_lock_acquire_recursive>
 8029cf6:	bf00      	nop
 8029cf8:	2001d544 	.word	0x2001d544

08029cfc <__malloc_unlock>:
 8029cfc:	4801      	ldr	r0, [pc, #4]	; (8029d04 <__malloc_unlock+0x8>)
 8029cfe:	f7fc bc33 	b.w	8026568 <__retarget_lock_release_recursive>
 8029d02:	bf00      	nop
 8029d04:	2001d544 	.word	0x2001d544

08029d08 <_Balloc>:
 8029d08:	b570      	push	{r4, r5, r6, lr}
 8029d0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8029d0c:	4604      	mov	r4, r0
 8029d0e:	460d      	mov	r5, r1
 8029d10:	b976      	cbnz	r6, 8029d30 <_Balloc+0x28>
 8029d12:	2010      	movs	r0, #16
 8029d14:	f7fc fc2a 	bl	802656c <malloc>
 8029d18:	4602      	mov	r2, r0
 8029d1a:	6260      	str	r0, [r4, #36]	; 0x24
 8029d1c:	b920      	cbnz	r0, 8029d28 <_Balloc+0x20>
 8029d1e:	4b18      	ldr	r3, [pc, #96]	; (8029d80 <_Balloc+0x78>)
 8029d20:	4818      	ldr	r0, [pc, #96]	; (8029d84 <_Balloc+0x7c>)
 8029d22:	2166      	movs	r1, #102	; 0x66
 8029d24:	f7ff f9d6 	bl	80290d4 <__assert_func>
 8029d28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8029d2c:	6006      	str	r6, [r0, #0]
 8029d2e:	60c6      	str	r6, [r0, #12]
 8029d30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8029d32:	68f3      	ldr	r3, [r6, #12]
 8029d34:	b183      	cbz	r3, 8029d58 <_Balloc+0x50>
 8029d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029d38:	68db      	ldr	r3, [r3, #12]
 8029d3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8029d3e:	b9b8      	cbnz	r0, 8029d70 <_Balloc+0x68>
 8029d40:	2101      	movs	r1, #1
 8029d42:	fa01 f605 	lsl.w	r6, r1, r5
 8029d46:	1d72      	adds	r2, r6, #5
 8029d48:	0092      	lsls	r2, r2, #2
 8029d4a:	4620      	mov	r0, r4
 8029d4c:	f000 fc97 	bl	802a67e <_calloc_r>
 8029d50:	b160      	cbz	r0, 8029d6c <_Balloc+0x64>
 8029d52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8029d56:	e00e      	b.n	8029d76 <_Balloc+0x6e>
 8029d58:	2221      	movs	r2, #33	; 0x21
 8029d5a:	2104      	movs	r1, #4
 8029d5c:	4620      	mov	r0, r4
 8029d5e:	f000 fc8e 	bl	802a67e <_calloc_r>
 8029d62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029d64:	60f0      	str	r0, [r6, #12]
 8029d66:	68db      	ldr	r3, [r3, #12]
 8029d68:	2b00      	cmp	r3, #0
 8029d6a:	d1e4      	bne.n	8029d36 <_Balloc+0x2e>
 8029d6c:	2000      	movs	r0, #0
 8029d6e:	bd70      	pop	{r4, r5, r6, pc}
 8029d70:	6802      	ldr	r2, [r0, #0]
 8029d72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8029d76:	2300      	movs	r3, #0
 8029d78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8029d7c:	e7f7      	b.n	8029d6e <_Balloc+0x66>
 8029d7e:	bf00      	nop
 8029d80:	08060a68 	.word	0x08060a68
 8029d84:	08060fe8 	.word	0x08060fe8

08029d88 <_Bfree>:
 8029d88:	b570      	push	{r4, r5, r6, lr}
 8029d8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8029d8c:	4605      	mov	r5, r0
 8029d8e:	460c      	mov	r4, r1
 8029d90:	b976      	cbnz	r6, 8029db0 <_Bfree+0x28>
 8029d92:	2010      	movs	r0, #16
 8029d94:	f7fc fbea 	bl	802656c <malloc>
 8029d98:	4602      	mov	r2, r0
 8029d9a:	6268      	str	r0, [r5, #36]	; 0x24
 8029d9c:	b920      	cbnz	r0, 8029da8 <_Bfree+0x20>
 8029d9e:	4b09      	ldr	r3, [pc, #36]	; (8029dc4 <_Bfree+0x3c>)
 8029da0:	4809      	ldr	r0, [pc, #36]	; (8029dc8 <_Bfree+0x40>)
 8029da2:	218a      	movs	r1, #138	; 0x8a
 8029da4:	f7ff f996 	bl	80290d4 <__assert_func>
 8029da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8029dac:	6006      	str	r6, [r0, #0]
 8029dae:	60c6      	str	r6, [r0, #12]
 8029db0:	b13c      	cbz	r4, 8029dc2 <_Bfree+0x3a>
 8029db2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8029db4:	6862      	ldr	r2, [r4, #4]
 8029db6:	68db      	ldr	r3, [r3, #12]
 8029db8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8029dbc:	6021      	str	r1, [r4, #0]
 8029dbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8029dc2:	bd70      	pop	{r4, r5, r6, pc}
 8029dc4:	08060a68 	.word	0x08060a68
 8029dc8:	08060fe8 	.word	0x08060fe8

08029dcc <__multadd>:
 8029dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029dd0:	690e      	ldr	r6, [r1, #16]
 8029dd2:	4607      	mov	r7, r0
 8029dd4:	4698      	mov	r8, r3
 8029dd6:	460c      	mov	r4, r1
 8029dd8:	f101 0014 	add.w	r0, r1, #20
 8029ddc:	2300      	movs	r3, #0
 8029dde:	6805      	ldr	r5, [r0, #0]
 8029de0:	b2a9      	uxth	r1, r5
 8029de2:	fb02 8101 	mla	r1, r2, r1, r8
 8029de6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8029dea:	0c2d      	lsrs	r5, r5, #16
 8029dec:	fb02 c505 	mla	r5, r2, r5, ip
 8029df0:	b289      	uxth	r1, r1
 8029df2:	3301      	adds	r3, #1
 8029df4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8029df8:	429e      	cmp	r6, r3
 8029dfa:	f840 1b04 	str.w	r1, [r0], #4
 8029dfe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8029e02:	dcec      	bgt.n	8029dde <__multadd+0x12>
 8029e04:	f1b8 0f00 	cmp.w	r8, #0
 8029e08:	d022      	beq.n	8029e50 <__multadd+0x84>
 8029e0a:	68a3      	ldr	r3, [r4, #8]
 8029e0c:	42b3      	cmp	r3, r6
 8029e0e:	dc19      	bgt.n	8029e44 <__multadd+0x78>
 8029e10:	6861      	ldr	r1, [r4, #4]
 8029e12:	4638      	mov	r0, r7
 8029e14:	3101      	adds	r1, #1
 8029e16:	f7ff ff77 	bl	8029d08 <_Balloc>
 8029e1a:	4605      	mov	r5, r0
 8029e1c:	b928      	cbnz	r0, 8029e2a <__multadd+0x5e>
 8029e1e:	4602      	mov	r2, r0
 8029e20:	4b0d      	ldr	r3, [pc, #52]	; (8029e58 <__multadd+0x8c>)
 8029e22:	480e      	ldr	r0, [pc, #56]	; (8029e5c <__multadd+0x90>)
 8029e24:	21b5      	movs	r1, #181	; 0xb5
 8029e26:	f7ff f955 	bl	80290d4 <__assert_func>
 8029e2a:	6922      	ldr	r2, [r4, #16]
 8029e2c:	3202      	adds	r2, #2
 8029e2e:	f104 010c 	add.w	r1, r4, #12
 8029e32:	0092      	lsls	r2, r2, #2
 8029e34:	300c      	adds	r0, #12
 8029e36:	f7fc fbb7 	bl	80265a8 <memcpy>
 8029e3a:	4621      	mov	r1, r4
 8029e3c:	4638      	mov	r0, r7
 8029e3e:	f7ff ffa3 	bl	8029d88 <_Bfree>
 8029e42:	462c      	mov	r4, r5
 8029e44:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8029e48:	3601      	adds	r6, #1
 8029e4a:	f8c3 8014 	str.w	r8, [r3, #20]
 8029e4e:	6126      	str	r6, [r4, #16]
 8029e50:	4620      	mov	r0, r4
 8029e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029e56:	bf00      	nop
 8029e58:	08060f58 	.word	0x08060f58
 8029e5c:	08060fe8 	.word	0x08060fe8

08029e60 <__s2b>:
 8029e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029e64:	460c      	mov	r4, r1
 8029e66:	4615      	mov	r5, r2
 8029e68:	461f      	mov	r7, r3
 8029e6a:	2209      	movs	r2, #9
 8029e6c:	3308      	adds	r3, #8
 8029e6e:	4606      	mov	r6, r0
 8029e70:	fb93 f3f2 	sdiv	r3, r3, r2
 8029e74:	2100      	movs	r1, #0
 8029e76:	2201      	movs	r2, #1
 8029e78:	429a      	cmp	r2, r3
 8029e7a:	db09      	blt.n	8029e90 <__s2b+0x30>
 8029e7c:	4630      	mov	r0, r6
 8029e7e:	f7ff ff43 	bl	8029d08 <_Balloc>
 8029e82:	b940      	cbnz	r0, 8029e96 <__s2b+0x36>
 8029e84:	4602      	mov	r2, r0
 8029e86:	4b19      	ldr	r3, [pc, #100]	; (8029eec <__s2b+0x8c>)
 8029e88:	4819      	ldr	r0, [pc, #100]	; (8029ef0 <__s2b+0x90>)
 8029e8a:	21ce      	movs	r1, #206	; 0xce
 8029e8c:	f7ff f922 	bl	80290d4 <__assert_func>
 8029e90:	0052      	lsls	r2, r2, #1
 8029e92:	3101      	adds	r1, #1
 8029e94:	e7f0      	b.n	8029e78 <__s2b+0x18>
 8029e96:	9b08      	ldr	r3, [sp, #32]
 8029e98:	6143      	str	r3, [r0, #20]
 8029e9a:	2d09      	cmp	r5, #9
 8029e9c:	f04f 0301 	mov.w	r3, #1
 8029ea0:	6103      	str	r3, [r0, #16]
 8029ea2:	dd16      	ble.n	8029ed2 <__s2b+0x72>
 8029ea4:	f104 0909 	add.w	r9, r4, #9
 8029ea8:	46c8      	mov	r8, r9
 8029eaa:	442c      	add	r4, r5
 8029eac:	f818 3b01 	ldrb.w	r3, [r8], #1
 8029eb0:	4601      	mov	r1, r0
 8029eb2:	3b30      	subs	r3, #48	; 0x30
 8029eb4:	220a      	movs	r2, #10
 8029eb6:	4630      	mov	r0, r6
 8029eb8:	f7ff ff88 	bl	8029dcc <__multadd>
 8029ebc:	45a0      	cmp	r8, r4
 8029ebe:	d1f5      	bne.n	8029eac <__s2b+0x4c>
 8029ec0:	f1a5 0408 	sub.w	r4, r5, #8
 8029ec4:	444c      	add	r4, r9
 8029ec6:	1b2d      	subs	r5, r5, r4
 8029ec8:	1963      	adds	r3, r4, r5
 8029eca:	42bb      	cmp	r3, r7
 8029ecc:	db04      	blt.n	8029ed8 <__s2b+0x78>
 8029ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029ed2:	340a      	adds	r4, #10
 8029ed4:	2509      	movs	r5, #9
 8029ed6:	e7f6      	b.n	8029ec6 <__s2b+0x66>
 8029ed8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8029edc:	4601      	mov	r1, r0
 8029ede:	3b30      	subs	r3, #48	; 0x30
 8029ee0:	220a      	movs	r2, #10
 8029ee2:	4630      	mov	r0, r6
 8029ee4:	f7ff ff72 	bl	8029dcc <__multadd>
 8029ee8:	e7ee      	b.n	8029ec8 <__s2b+0x68>
 8029eea:	bf00      	nop
 8029eec:	08060f58 	.word	0x08060f58
 8029ef0:	08060fe8 	.word	0x08060fe8

08029ef4 <__hi0bits>:
 8029ef4:	0c03      	lsrs	r3, r0, #16
 8029ef6:	041b      	lsls	r3, r3, #16
 8029ef8:	b9d3      	cbnz	r3, 8029f30 <__hi0bits+0x3c>
 8029efa:	0400      	lsls	r0, r0, #16
 8029efc:	2310      	movs	r3, #16
 8029efe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8029f02:	bf04      	itt	eq
 8029f04:	0200      	lsleq	r0, r0, #8
 8029f06:	3308      	addeq	r3, #8
 8029f08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8029f0c:	bf04      	itt	eq
 8029f0e:	0100      	lsleq	r0, r0, #4
 8029f10:	3304      	addeq	r3, #4
 8029f12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8029f16:	bf04      	itt	eq
 8029f18:	0080      	lsleq	r0, r0, #2
 8029f1a:	3302      	addeq	r3, #2
 8029f1c:	2800      	cmp	r0, #0
 8029f1e:	db05      	blt.n	8029f2c <__hi0bits+0x38>
 8029f20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8029f24:	f103 0301 	add.w	r3, r3, #1
 8029f28:	bf08      	it	eq
 8029f2a:	2320      	moveq	r3, #32
 8029f2c:	4618      	mov	r0, r3
 8029f2e:	4770      	bx	lr
 8029f30:	2300      	movs	r3, #0
 8029f32:	e7e4      	b.n	8029efe <__hi0bits+0xa>

08029f34 <__lo0bits>:
 8029f34:	6803      	ldr	r3, [r0, #0]
 8029f36:	f013 0207 	ands.w	r2, r3, #7
 8029f3a:	4601      	mov	r1, r0
 8029f3c:	d00b      	beq.n	8029f56 <__lo0bits+0x22>
 8029f3e:	07da      	lsls	r2, r3, #31
 8029f40:	d424      	bmi.n	8029f8c <__lo0bits+0x58>
 8029f42:	0798      	lsls	r0, r3, #30
 8029f44:	bf49      	itett	mi
 8029f46:	085b      	lsrmi	r3, r3, #1
 8029f48:	089b      	lsrpl	r3, r3, #2
 8029f4a:	2001      	movmi	r0, #1
 8029f4c:	600b      	strmi	r3, [r1, #0]
 8029f4e:	bf5c      	itt	pl
 8029f50:	600b      	strpl	r3, [r1, #0]
 8029f52:	2002      	movpl	r0, #2
 8029f54:	4770      	bx	lr
 8029f56:	b298      	uxth	r0, r3
 8029f58:	b9b0      	cbnz	r0, 8029f88 <__lo0bits+0x54>
 8029f5a:	0c1b      	lsrs	r3, r3, #16
 8029f5c:	2010      	movs	r0, #16
 8029f5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8029f62:	bf04      	itt	eq
 8029f64:	0a1b      	lsreq	r3, r3, #8
 8029f66:	3008      	addeq	r0, #8
 8029f68:	071a      	lsls	r2, r3, #28
 8029f6a:	bf04      	itt	eq
 8029f6c:	091b      	lsreq	r3, r3, #4
 8029f6e:	3004      	addeq	r0, #4
 8029f70:	079a      	lsls	r2, r3, #30
 8029f72:	bf04      	itt	eq
 8029f74:	089b      	lsreq	r3, r3, #2
 8029f76:	3002      	addeq	r0, #2
 8029f78:	07da      	lsls	r2, r3, #31
 8029f7a:	d403      	bmi.n	8029f84 <__lo0bits+0x50>
 8029f7c:	085b      	lsrs	r3, r3, #1
 8029f7e:	f100 0001 	add.w	r0, r0, #1
 8029f82:	d005      	beq.n	8029f90 <__lo0bits+0x5c>
 8029f84:	600b      	str	r3, [r1, #0]
 8029f86:	4770      	bx	lr
 8029f88:	4610      	mov	r0, r2
 8029f8a:	e7e8      	b.n	8029f5e <__lo0bits+0x2a>
 8029f8c:	2000      	movs	r0, #0
 8029f8e:	4770      	bx	lr
 8029f90:	2020      	movs	r0, #32
 8029f92:	4770      	bx	lr

08029f94 <__i2b>:
 8029f94:	b510      	push	{r4, lr}
 8029f96:	460c      	mov	r4, r1
 8029f98:	2101      	movs	r1, #1
 8029f9a:	f7ff feb5 	bl	8029d08 <_Balloc>
 8029f9e:	4602      	mov	r2, r0
 8029fa0:	b928      	cbnz	r0, 8029fae <__i2b+0x1a>
 8029fa2:	4b05      	ldr	r3, [pc, #20]	; (8029fb8 <__i2b+0x24>)
 8029fa4:	4805      	ldr	r0, [pc, #20]	; (8029fbc <__i2b+0x28>)
 8029fa6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8029faa:	f7ff f893 	bl	80290d4 <__assert_func>
 8029fae:	2301      	movs	r3, #1
 8029fb0:	6144      	str	r4, [r0, #20]
 8029fb2:	6103      	str	r3, [r0, #16]
 8029fb4:	bd10      	pop	{r4, pc}
 8029fb6:	bf00      	nop
 8029fb8:	08060f58 	.word	0x08060f58
 8029fbc:	08060fe8 	.word	0x08060fe8

08029fc0 <__multiply>:
 8029fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029fc4:	4614      	mov	r4, r2
 8029fc6:	690a      	ldr	r2, [r1, #16]
 8029fc8:	6923      	ldr	r3, [r4, #16]
 8029fca:	429a      	cmp	r2, r3
 8029fcc:	bfb8      	it	lt
 8029fce:	460b      	movlt	r3, r1
 8029fd0:	460d      	mov	r5, r1
 8029fd2:	bfbc      	itt	lt
 8029fd4:	4625      	movlt	r5, r4
 8029fd6:	461c      	movlt	r4, r3
 8029fd8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8029fdc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8029fe0:	68ab      	ldr	r3, [r5, #8]
 8029fe2:	6869      	ldr	r1, [r5, #4]
 8029fe4:	eb0a 0709 	add.w	r7, sl, r9
 8029fe8:	42bb      	cmp	r3, r7
 8029fea:	b085      	sub	sp, #20
 8029fec:	bfb8      	it	lt
 8029fee:	3101      	addlt	r1, #1
 8029ff0:	f7ff fe8a 	bl	8029d08 <_Balloc>
 8029ff4:	b930      	cbnz	r0, 802a004 <__multiply+0x44>
 8029ff6:	4602      	mov	r2, r0
 8029ff8:	4b42      	ldr	r3, [pc, #264]	; (802a104 <__multiply+0x144>)
 8029ffa:	4843      	ldr	r0, [pc, #268]	; (802a108 <__multiply+0x148>)
 8029ffc:	f240 115d 	movw	r1, #349	; 0x15d
 802a000:	f7ff f868 	bl	80290d4 <__assert_func>
 802a004:	f100 0614 	add.w	r6, r0, #20
 802a008:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 802a00c:	4633      	mov	r3, r6
 802a00e:	2200      	movs	r2, #0
 802a010:	4543      	cmp	r3, r8
 802a012:	d31e      	bcc.n	802a052 <__multiply+0x92>
 802a014:	f105 0c14 	add.w	ip, r5, #20
 802a018:	f104 0314 	add.w	r3, r4, #20
 802a01c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 802a020:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 802a024:	9202      	str	r2, [sp, #8]
 802a026:	ebac 0205 	sub.w	r2, ip, r5
 802a02a:	3a15      	subs	r2, #21
 802a02c:	f022 0203 	bic.w	r2, r2, #3
 802a030:	3204      	adds	r2, #4
 802a032:	f105 0115 	add.w	r1, r5, #21
 802a036:	458c      	cmp	ip, r1
 802a038:	bf38      	it	cc
 802a03a:	2204      	movcc	r2, #4
 802a03c:	9201      	str	r2, [sp, #4]
 802a03e:	9a02      	ldr	r2, [sp, #8]
 802a040:	9303      	str	r3, [sp, #12]
 802a042:	429a      	cmp	r2, r3
 802a044:	d808      	bhi.n	802a058 <__multiply+0x98>
 802a046:	2f00      	cmp	r7, #0
 802a048:	dc55      	bgt.n	802a0f6 <__multiply+0x136>
 802a04a:	6107      	str	r7, [r0, #16]
 802a04c:	b005      	add	sp, #20
 802a04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a052:	f843 2b04 	str.w	r2, [r3], #4
 802a056:	e7db      	b.n	802a010 <__multiply+0x50>
 802a058:	f8b3 a000 	ldrh.w	sl, [r3]
 802a05c:	f1ba 0f00 	cmp.w	sl, #0
 802a060:	d020      	beq.n	802a0a4 <__multiply+0xe4>
 802a062:	f105 0e14 	add.w	lr, r5, #20
 802a066:	46b1      	mov	r9, r6
 802a068:	2200      	movs	r2, #0
 802a06a:	f85e 4b04 	ldr.w	r4, [lr], #4
 802a06e:	f8d9 b000 	ldr.w	fp, [r9]
 802a072:	b2a1      	uxth	r1, r4
 802a074:	fa1f fb8b 	uxth.w	fp, fp
 802a078:	fb0a b101 	mla	r1, sl, r1, fp
 802a07c:	4411      	add	r1, r2
 802a07e:	f8d9 2000 	ldr.w	r2, [r9]
 802a082:	0c24      	lsrs	r4, r4, #16
 802a084:	0c12      	lsrs	r2, r2, #16
 802a086:	fb0a 2404 	mla	r4, sl, r4, r2
 802a08a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 802a08e:	b289      	uxth	r1, r1
 802a090:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 802a094:	45f4      	cmp	ip, lr
 802a096:	f849 1b04 	str.w	r1, [r9], #4
 802a09a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 802a09e:	d8e4      	bhi.n	802a06a <__multiply+0xaa>
 802a0a0:	9901      	ldr	r1, [sp, #4]
 802a0a2:	5072      	str	r2, [r6, r1]
 802a0a4:	9a03      	ldr	r2, [sp, #12]
 802a0a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802a0aa:	3304      	adds	r3, #4
 802a0ac:	f1b9 0f00 	cmp.w	r9, #0
 802a0b0:	d01f      	beq.n	802a0f2 <__multiply+0x132>
 802a0b2:	6834      	ldr	r4, [r6, #0]
 802a0b4:	f105 0114 	add.w	r1, r5, #20
 802a0b8:	46b6      	mov	lr, r6
 802a0ba:	f04f 0a00 	mov.w	sl, #0
 802a0be:	880a      	ldrh	r2, [r1, #0]
 802a0c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 802a0c4:	fb09 b202 	mla	r2, r9, r2, fp
 802a0c8:	4492      	add	sl, r2
 802a0ca:	b2a4      	uxth	r4, r4
 802a0cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 802a0d0:	f84e 4b04 	str.w	r4, [lr], #4
 802a0d4:	f851 4b04 	ldr.w	r4, [r1], #4
 802a0d8:	f8be 2000 	ldrh.w	r2, [lr]
 802a0dc:	0c24      	lsrs	r4, r4, #16
 802a0de:	fb09 2404 	mla	r4, r9, r4, r2
 802a0e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 802a0e6:	458c      	cmp	ip, r1
 802a0e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802a0ec:	d8e7      	bhi.n	802a0be <__multiply+0xfe>
 802a0ee:	9a01      	ldr	r2, [sp, #4]
 802a0f0:	50b4      	str	r4, [r6, r2]
 802a0f2:	3604      	adds	r6, #4
 802a0f4:	e7a3      	b.n	802a03e <__multiply+0x7e>
 802a0f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802a0fa:	2b00      	cmp	r3, #0
 802a0fc:	d1a5      	bne.n	802a04a <__multiply+0x8a>
 802a0fe:	3f01      	subs	r7, #1
 802a100:	e7a1      	b.n	802a046 <__multiply+0x86>
 802a102:	bf00      	nop
 802a104:	08060f58 	.word	0x08060f58
 802a108:	08060fe8 	.word	0x08060fe8

0802a10c <__pow5mult>:
 802a10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a110:	4615      	mov	r5, r2
 802a112:	f012 0203 	ands.w	r2, r2, #3
 802a116:	4606      	mov	r6, r0
 802a118:	460f      	mov	r7, r1
 802a11a:	d007      	beq.n	802a12c <__pow5mult+0x20>
 802a11c:	4c25      	ldr	r4, [pc, #148]	; (802a1b4 <__pow5mult+0xa8>)
 802a11e:	3a01      	subs	r2, #1
 802a120:	2300      	movs	r3, #0
 802a122:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802a126:	f7ff fe51 	bl	8029dcc <__multadd>
 802a12a:	4607      	mov	r7, r0
 802a12c:	10ad      	asrs	r5, r5, #2
 802a12e:	d03d      	beq.n	802a1ac <__pow5mult+0xa0>
 802a130:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802a132:	b97c      	cbnz	r4, 802a154 <__pow5mult+0x48>
 802a134:	2010      	movs	r0, #16
 802a136:	f7fc fa19 	bl	802656c <malloc>
 802a13a:	4602      	mov	r2, r0
 802a13c:	6270      	str	r0, [r6, #36]	; 0x24
 802a13e:	b928      	cbnz	r0, 802a14c <__pow5mult+0x40>
 802a140:	4b1d      	ldr	r3, [pc, #116]	; (802a1b8 <__pow5mult+0xac>)
 802a142:	481e      	ldr	r0, [pc, #120]	; (802a1bc <__pow5mult+0xb0>)
 802a144:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802a148:	f7fe ffc4 	bl	80290d4 <__assert_func>
 802a14c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802a150:	6004      	str	r4, [r0, #0]
 802a152:	60c4      	str	r4, [r0, #12]
 802a154:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802a158:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802a15c:	b94c      	cbnz	r4, 802a172 <__pow5mult+0x66>
 802a15e:	f240 2171 	movw	r1, #625	; 0x271
 802a162:	4630      	mov	r0, r6
 802a164:	f7ff ff16 	bl	8029f94 <__i2b>
 802a168:	2300      	movs	r3, #0
 802a16a:	f8c8 0008 	str.w	r0, [r8, #8]
 802a16e:	4604      	mov	r4, r0
 802a170:	6003      	str	r3, [r0, #0]
 802a172:	f04f 0900 	mov.w	r9, #0
 802a176:	07eb      	lsls	r3, r5, #31
 802a178:	d50a      	bpl.n	802a190 <__pow5mult+0x84>
 802a17a:	4639      	mov	r1, r7
 802a17c:	4622      	mov	r2, r4
 802a17e:	4630      	mov	r0, r6
 802a180:	f7ff ff1e 	bl	8029fc0 <__multiply>
 802a184:	4639      	mov	r1, r7
 802a186:	4680      	mov	r8, r0
 802a188:	4630      	mov	r0, r6
 802a18a:	f7ff fdfd 	bl	8029d88 <_Bfree>
 802a18e:	4647      	mov	r7, r8
 802a190:	106d      	asrs	r5, r5, #1
 802a192:	d00b      	beq.n	802a1ac <__pow5mult+0xa0>
 802a194:	6820      	ldr	r0, [r4, #0]
 802a196:	b938      	cbnz	r0, 802a1a8 <__pow5mult+0x9c>
 802a198:	4622      	mov	r2, r4
 802a19a:	4621      	mov	r1, r4
 802a19c:	4630      	mov	r0, r6
 802a19e:	f7ff ff0f 	bl	8029fc0 <__multiply>
 802a1a2:	6020      	str	r0, [r4, #0]
 802a1a4:	f8c0 9000 	str.w	r9, [r0]
 802a1a8:	4604      	mov	r4, r0
 802a1aa:	e7e4      	b.n	802a176 <__pow5mult+0x6a>
 802a1ac:	4638      	mov	r0, r7
 802a1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a1b2:	bf00      	nop
 802a1b4:	08061138 	.word	0x08061138
 802a1b8:	08060a68 	.word	0x08060a68
 802a1bc:	08060fe8 	.word	0x08060fe8

0802a1c0 <__lshift>:
 802a1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a1c4:	460c      	mov	r4, r1
 802a1c6:	6849      	ldr	r1, [r1, #4]
 802a1c8:	6923      	ldr	r3, [r4, #16]
 802a1ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802a1ce:	68a3      	ldr	r3, [r4, #8]
 802a1d0:	4607      	mov	r7, r0
 802a1d2:	4691      	mov	r9, r2
 802a1d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802a1d8:	f108 0601 	add.w	r6, r8, #1
 802a1dc:	42b3      	cmp	r3, r6
 802a1de:	db0b      	blt.n	802a1f8 <__lshift+0x38>
 802a1e0:	4638      	mov	r0, r7
 802a1e2:	f7ff fd91 	bl	8029d08 <_Balloc>
 802a1e6:	4605      	mov	r5, r0
 802a1e8:	b948      	cbnz	r0, 802a1fe <__lshift+0x3e>
 802a1ea:	4602      	mov	r2, r0
 802a1ec:	4b28      	ldr	r3, [pc, #160]	; (802a290 <__lshift+0xd0>)
 802a1ee:	4829      	ldr	r0, [pc, #164]	; (802a294 <__lshift+0xd4>)
 802a1f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 802a1f4:	f7fe ff6e 	bl	80290d4 <__assert_func>
 802a1f8:	3101      	adds	r1, #1
 802a1fa:	005b      	lsls	r3, r3, #1
 802a1fc:	e7ee      	b.n	802a1dc <__lshift+0x1c>
 802a1fe:	2300      	movs	r3, #0
 802a200:	f100 0114 	add.w	r1, r0, #20
 802a204:	f100 0210 	add.w	r2, r0, #16
 802a208:	4618      	mov	r0, r3
 802a20a:	4553      	cmp	r3, sl
 802a20c:	db33      	blt.n	802a276 <__lshift+0xb6>
 802a20e:	6920      	ldr	r0, [r4, #16]
 802a210:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802a214:	f104 0314 	add.w	r3, r4, #20
 802a218:	f019 091f 	ands.w	r9, r9, #31
 802a21c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802a220:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802a224:	d02b      	beq.n	802a27e <__lshift+0xbe>
 802a226:	f1c9 0e20 	rsb	lr, r9, #32
 802a22a:	468a      	mov	sl, r1
 802a22c:	2200      	movs	r2, #0
 802a22e:	6818      	ldr	r0, [r3, #0]
 802a230:	fa00 f009 	lsl.w	r0, r0, r9
 802a234:	4302      	orrs	r2, r0
 802a236:	f84a 2b04 	str.w	r2, [sl], #4
 802a23a:	f853 2b04 	ldr.w	r2, [r3], #4
 802a23e:	459c      	cmp	ip, r3
 802a240:	fa22 f20e 	lsr.w	r2, r2, lr
 802a244:	d8f3      	bhi.n	802a22e <__lshift+0x6e>
 802a246:	ebac 0304 	sub.w	r3, ip, r4
 802a24a:	3b15      	subs	r3, #21
 802a24c:	f023 0303 	bic.w	r3, r3, #3
 802a250:	3304      	adds	r3, #4
 802a252:	f104 0015 	add.w	r0, r4, #21
 802a256:	4584      	cmp	ip, r0
 802a258:	bf38      	it	cc
 802a25a:	2304      	movcc	r3, #4
 802a25c:	50ca      	str	r2, [r1, r3]
 802a25e:	b10a      	cbz	r2, 802a264 <__lshift+0xa4>
 802a260:	f108 0602 	add.w	r6, r8, #2
 802a264:	3e01      	subs	r6, #1
 802a266:	4638      	mov	r0, r7
 802a268:	612e      	str	r6, [r5, #16]
 802a26a:	4621      	mov	r1, r4
 802a26c:	f7ff fd8c 	bl	8029d88 <_Bfree>
 802a270:	4628      	mov	r0, r5
 802a272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a276:	f842 0f04 	str.w	r0, [r2, #4]!
 802a27a:	3301      	adds	r3, #1
 802a27c:	e7c5      	b.n	802a20a <__lshift+0x4a>
 802a27e:	3904      	subs	r1, #4
 802a280:	f853 2b04 	ldr.w	r2, [r3], #4
 802a284:	f841 2f04 	str.w	r2, [r1, #4]!
 802a288:	459c      	cmp	ip, r3
 802a28a:	d8f9      	bhi.n	802a280 <__lshift+0xc0>
 802a28c:	e7ea      	b.n	802a264 <__lshift+0xa4>
 802a28e:	bf00      	nop
 802a290:	08060f58 	.word	0x08060f58
 802a294:	08060fe8 	.word	0x08060fe8

0802a298 <__mcmp>:
 802a298:	b530      	push	{r4, r5, lr}
 802a29a:	6902      	ldr	r2, [r0, #16]
 802a29c:	690c      	ldr	r4, [r1, #16]
 802a29e:	1b12      	subs	r2, r2, r4
 802a2a0:	d10e      	bne.n	802a2c0 <__mcmp+0x28>
 802a2a2:	f100 0314 	add.w	r3, r0, #20
 802a2a6:	3114      	adds	r1, #20
 802a2a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802a2ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802a2b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802a2b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802a2b8:	42a5      	cmp	r5, r4
 802a2ba:	d003      	beq.n	802a2c4 <__mcmp+0x2c>
 802a2bc:	d305      	bcc.n	802a2ca <__mcmp+0x32>
 802a2be:	2201      	movs	r2, #1
 802a2c0:	4610      	mov	r0, r2
 802a2c2:	bd30      	pop	{r4, r5, pc}
 802a2c4:	4283      	cmp	r3, r0
 802a2c6:	d3f3      	bcc.n	802a2b0 <__mcmp+0x18>
 802a2c8:	e7fa      	b.n	802a2c0 <__mcmp+0x28>
 802a2ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802a2ce:	e7f7      	b.n	802a2c0 <__mcmp+0x28>

0802a2d0 <__mdiff>:
 802a2d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a2d4:	460c      	mov	r4, r1
 802a2d6:	4606      	mov	r6, r0
 802a2d8:	4611      	mov	r1, r2
 802a2da:	4620      	mov	r0, r4
 802a2dc:	4617      	mov	r7, r2
 802a2de:	f7ff ffdb 	bl	802a298 <__mcmp>
 802a2e2:	1e05      	subs	r5, r0, #0
 802a2e4:	d110      	bne.n	802a308 <__mdiff+0x38>
 802a2e6:	4629      	mov	r1, r5
 802a2e8:	4630      	mov	r0, r6
 802a2ea:	f7ff fd0d 	bl	8029d08 <_Balloc>
 802a2ee:	b930      	cbnz	r0, 802a2fe <__mdiff+0x2e>
 802a2f0:	4b39      	ldr	r3, [pc, #228]	; (802a3d8 <__mdiff+0x108>)
 802a2f2:	4602      	mov	r2, r0
 802a2f4:	f240 2132 	movw	r1, #562	; 0x232
 802a2f8:	4838      	ldr	r0, [pc, #224]	; (802a3dc <__mdiff+0x10c>)
 802a2fa:	f7fe feeb 	bl	80290d4 <__assert_func>
 802a2fe:	2301      	movs	r3, #1
 802a300:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802a304:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a308:	bfa4      	itt	ge
 802a30a:	463b      	movge	r3, r7
 802a30c:	4627      	movge	r7, r4
 802a30e:	4630      	mov	r0, r6
 802a310:	6879      	ldr	r1, [r7, #4]
 802a312:	bfa6      	itte	ge
 802a314:	461c      	movge	r4, r3
 802a316:	2500      	movge	r5, #0
 802a318:	2501      	movlt	r5, #1
 802a31a:	f7ff fcf5 	bl	8029d08 <_Balloc>
 802a31e:	b920      	cbnz	r0, 802a32a <__mdiff+0x5a>
 802a320:	4b2d      	ldr	r3, [pc, #180]	; (802a3d8 <__mdiff+0x108>)
 802a322:	4602      	mov	r2, r0
 802a324:	f44f 7110 	mov.w	r1, #576	; 0x240
 802a328:	e7e6      	b.n	802a2f8 <__mdiff+0x28>
 802a32a:	693e      	ldr	r6, [r7, #16]
 802a32c:	60c5      	str	r5, [r0, #12]
 802a32e:	6925      	ldr	r5, [r4, #16]
 802a330:	f107 0114 	add.w	r1, r7, #20
 802a334:	f104 0914 	add.w	r9, r4, #20
 802a338:	f100 0e14 	add.w	lr, r0, #20
 802a33c:	f107 0210 	add.w	r2, r7, #16
 802a340:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 802a344:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 802a348:	46f2      	mov	sl, lr
 802a34a:	2700      	movs	r7, #0
 802a34c:	f859 3b04 	ldr.w	r3, [r9], #4
 802a350:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802a354:	fa1f f883 	uxth.w	r8, r3
 802a358:	fa17 f78b 	uxtah	r7, r7, fp
 802a35c:	0c1b      	lsrs	r3, r3, #16
 802a35e:	eba7 0808 	sub.w	r8, r7, r8
 802a362:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802a366:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802a36a:	fa1f f888 	uxth.w	r8, r8
 802a36e:	141f      	asrs	r7, r3, #16
 802a370:	454d      	cmp	r5, r9
 802a372:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802a376:	f84a 3b04 	str.w	r3, [sl], #4
 802a37a:	d8e7      	bhi.n	802a34c <__mdiff+0x7c>
 802a37c:	1b2b      	subs	r3, r5, r4
 802a37e:	3b15      	subs	r3, #21
 802a380:	f023 0303 	bic.w	r3, r3, #3
 802a384:	3304      	adds	r3, #4
 802a386:	3415      	adds	r4, #21
 802a388:	42a5      	cmp	r5, r4
 802a38a:	bf38      	it	cc
 802a38c:	2304      	movcc	r3, #4
 802a38e:	4419      	add	r1, r3
 802a390:	4473      	add	r3, lr
 802a392:	469e      	mov	lr, r3
 802a394:	460d      	mov	r5, r1
 802a396:	4565      	cmp	r5, ip
 802a398:	d30e      	bcc.n	802a3b8 <__mdiff+0xe8>
 802a39a:	f10c 0203 	add.w	r2, ip, #3
 802a39e:	1a52      	subs	r2, r2, r1
 802a3a0:	f022 0203 	bic.w	r2, r2, #3
 802a3a4:	3903      	subs	r1, #3
 802a3a6:	458c      	cmp	ip, r1
 802a3a8:	bf38      	it	cc
 802a3aa:	2200      	movcc	r2, #0
 802a3ac:	441a      	add	r2, r3
 802a3ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802a3b2:	b17b      	cbz	r3, 802a3d4 <__mdiff+0x104>
 802a3b4:	6106      	str	r6, [r0, #16]
 802a3b6:	e7a5      	b.n	802a304 <__mdiff+0x34>
 802a3b8:	f855 8b04 	ldr.w	r8, [r5], #4
 802a3bc:	fa17 f488 	uxtah	r4, r7, r8
 802a3c0:	1422      	asrs	r2, r4, #16
 802a3c2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 802a3c6:	b2a4      	uxth	r4, r4
 802a3c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 802a3cc:	f84e 4b04 	str.w	r4, [lr], #4
 802a3d0:	1417      	asrs	r7, r2, #16
 802a3d2:	e7e0      	b.n	802a396 <__mdiff+0xc6>
 802a3d4:	3e01      	subs	r6, #1
 802a3d6:	e7ea      	b.n	802a3ae <__mdiff+0xde>
 802a3d8:	08060f58 	.word	0x08060f58
 802a3dc:	08060fe8 	.word	0x08060fe8

0802a3e0 <__ulp>:
 802a3e0:	b082      	sub	sp, #8
 802a3e2:	ed8d 0b00 	vstr	d0, [sp]
 802a3e6:	9b01      	ldr	r3, [sp, #4]
 802a3e8:	4912      	ldr	r1, [pc, #72]	; (802a434 <__ulp+0x54>)
 802a3ea:	4019      	ands	r1, r3
 802a3ec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 802a3f0:	2900      	cmp	r1, #0
 802a3f2:	dd05      	ble.n	802a400 <__ulp+0x20>
 802a3f4:	2200      	movs	r2, #0
 802a3f6:	460b      	mov	r3, r1
 802a3f8:	ec43 2b10 	vmov	d0, r2, r3
 802a3fc:	b002      	add	sp, #8
 802a3fe:	4770      	bx	lr
 802a400:	4249      	negs	r1, r1
 802a402:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802a406:	ea4f 5021 	mov.w	r0, r1, asr #20
 802a40a:	f04f 0200 	mov.w	r2, #0
 802a40e:	f04f 0300 	mov.w	r3, #0
 802a412:	da04      	bge.n	802a41e <__ulp+0x3e>
 802a414:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 802a418:	fa41 f300 	asr.w	r3, r1, r0
 802a41c:	e7ec      	b.n	802a3f8 <__ulp+0x18>
 802a41e:	f1a0 0114 	sub.w	r1, r0, #20
 802a422:	291e      	cmp	r1, #30
 802a424:	bfda      	itte	le
 802a426:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802a42a:	fa20 f101 	lsrle.w	r1, r0, r1
 802a42e:	2101      	movgt	r1, #1
 802a430:	460a      	mov	r2, r1
 802a432:	e7e1      	b.n	802a3f8 <__ulp+0x18>
 802a434:	7ff00000 	.word	0x7ff00000

0802a438 <__b2d>:
 802a438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a43a:	6905      	ldr	r5, [r0, #16]
 802a43c:	f100 0714 	add.w	r7, r0, #20
 802a440:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 802a444:	1f2e      	subs	r6, r5, #4
 802a446:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802a44a:	4620      	mov	r0, r4
 802a44c:	f7ff fd52 	bl	8029ef4 <__hi0bits>
 802a450:	f1c0 0320 	rsb	r3, r0, #32
 802a454:	280a      	cmp	r0, #10
 802a456:	f8df c07c 	ldr.w	ip, [pc, #124]	; 802a4d4 <__b2d+0x9c>
 802a45a:	600b      	str	r3, [r1, #0]
 802a45c:	dc14      	bgt.n	802a488 <__b2d+0x50>
 802a45e:	f1c0 0e0b 	rsb	lr, r0, #11
 802a462:	fa24 f10e 	lsr.w	r1, r4, lr
 802a466:	42b7      	cmp	r7, r6
 802a468:	ea41 030c 	orr.w	r3, r1, ip
 802a46c:	bf34      	ite	cc
 802a46e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802a472:	2100      	movcs	r1, #0
 802a474:	3015      	adds	r0, #21
 802a476:	fa04 f000 	lsl.w	r0, r4, r0
 802a47a:	fa21 f10e 	lsr.w	r1, r1, lr
 802a47e:	ea40 0201 	orr.w	r2, r0, r1
 802a482:	ec43 2b10 	vmov	d0, r2, r3
 802a486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a488:	42b7      	cmp	r7, r6
 802a48a:	bf3a      	itte	cc
 802a48c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802a490:	f1a5 0608 	subcc.w	r6, r5, #8
 802a494:	2100      	movcs	r1, #0
 802a496:	380b      	subs	r0, #11
 802a498:	d017      	beq.n	802a4ca <__b2d+0x92>
 802a49a:	f1c0 0c20 	rsb	ip, r0, #32
 802a49e:	fa04 f500 	lsl.w	r5, r4, r0
 802a4a2:	42be      	cmp	r6, r7
 802a4a4:	fa21 f40c 	lsr.w	r4, r1, ip
 802a4a8:	ea45 0504 	orr.w	r5, r5, r4
 802a4ac:	bf8c      	ite	hi
 802a4ae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802a4b2:	2400      	movls	r4, #0
 802a4b4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802a4b8:	fa01 f000 	lsl.w	r0, r1, r0
 802a4bc:	fa24 f40c 	lsr.w	r4, r4, ip
 802a4c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802a4c4:	ea40 0204 	orr.w	r2, r0, r4
 802a4c8:	e7db      	b.n	802a482 <__b2d+0x4a>
 802a4ca:	ea44 030c 	orr.w	r3, r4, ip
 802a4ce:	460a      	mov	r2, r1
 802a4d0:	e7d7      	b.n	802a482 <__b2d+0x4a>
 802a4d2:	bf00      	nop
 802a4d4:	3ff00000 	.word	0x3ff00000

0802a4d8 <__d2b>:
 802a4d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802a4dc:	4689      	mov	r9, r1
 802a4de:	2101      	movs	r1, #1
 802a4e0:	ec57 6b10 	vmov	r6, r7, d0
 802a4e4:	4690      	mov	r8, r2
 802a4e6:	f7ff fc0f 	bl	8029d08 <_Balloc>
 802a4ea:	4604      	mov	r4, r0
 802a4ec:	b930      	cbnz	r0, 802a4fc <__d2b+0x24>
 802a4ee:	4602      	mov	r2, r0
 802a4f0:	4b25      	ldr	r3, [pc, #148]	; (802a588 <__d2b+0xb0>)
 802a4f2:	4826      	ldr	r0, [pc, #152]	; (802a58c <__d2b+0xb4>)
 802a4f4:	f240 310a 	movw	r1, #778	; 0x30a
 802a4f8:	f7fe fdec 	bl	80290d4 <__assert_func>
 802a4fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802a500:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802a504:	bb35      	cbnz	r5, 802a554 <__d2b+0x7c>
 802a506:	2e00      	cmp	r6, #0
 802a508:	9301      	str	r3, [sp, #4]
 802a50a:	d028      	beq.n	802a55e <__d2b+0x86>
 802a50c:	4668      	mov	r0, sp
 802a50e:	9600      	str	r6, [sp, #0]
 802a510:	f7ff fd10 	bl	8029f34 <__lo0bits>
 802a514:	9900      	ldr	r1, [sp, #0]
 802a516:	b300      	cbz	r0, 802a55a <__d2b+0x82>
 802a518:	9a01      	ldr	r2, [sp, #4]
 802a51a:	f1c0 0320 	rsb	r3, r0, #32
 802a51e:	fa02 f303 	lsl.w	r3, r2, r3
 802a522:	430b      	orrs	r3, r1
 802a524:	40c2      	lsrs	r2, r0
 802a526:	6163      	str	r3, [r4, #20]
 802a528:	9201      	str	r2, [sp, #4]
 802a52a:	9b01      	ldr	r3, [sp, #4]
 802a52c:	61a3      	str	r3, [r4, #24]
 802a52e:	2b00      	cmp	r3, #0
 802a530:	bf14      	ite	ne
 802a532:	2202      	movne	r2, #2
 802a534:	2201      	moveq	r2, #1
 802a536:	6122      	str	r2, [r4, #16]
 802a538:	b1d5      	cbz	r5, 802a570 <__d2b+0x98>
 802a53a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802a53e:	4405      	add	r5, r0
 802a540:	f8c9 5000 	str.w	r5, [r9]
 802a544:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802a548:	f8c8 0000 	str.w	r0, [r8]
 802a54c:	4620      	mov	r0, r4
 802a54e:	b003      	add	sp, #12
 802a550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802a554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802a558:	e7d5      	b.n	802a506 <__d2b+0x2e>
 802a55a:	6161      	str	r1, [r4, #20]
 802a55c:	e7e5      	b.n	802a52a <__d2b+0x52>
 802a55e:	a801      	add	r0, sp, #4
 802a560:	f7ff fce8 	bl	8029f34 <__lo0bits>
 802a564:	9b01      	ldr	r3, [sp, #4]
 802a566:	6163      	str	r3, [r4, #20]
 802a568:	2201      	movs	r2, #1
 802a56a:	6122      	str	r2, [r4, #16]
 802a56c:	3020      	adds	r0, #32
 802a56e:	e7e3      	b.n	802a538 <__d2b+0x60>
 802a570:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802a574:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802a578:	f8c9 0000 	str.w	r0, [r9]
 802a57c:	6918      	ldr	r0, [r3, #16]
 802a57e:	f7ff fcb9 	bl	8029ef4 <__hi0bits>
 802a582:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802a586:	e7df      	b.n	802a548 <__d2b+0x70>
 802a588:	08060f58 	.word	0x08060f58
 802a58c:	08060fe8 	.word	0x08060fe8

0802a590 <__ratio>:
 802a590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a594:	4688      	mov	r8, r1
 802a596:	4669      	mov	r1, sp
 802a598:	4681      	mov	r9, r0
 802a59a:	f7ff ff4d 	bl	802a438 <__b2d>
 802a59e:	a901      	add	r1, sp, #4
 802a5a0:	4640      	mov	r0, r8
 802a5a2:	ec55 4b10 	vmov	r4, r5, d0
 802a5a6:	f7ff ff47 	bl	802a438 <__b2d>
 802a5aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802a5ae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802a5b2:	eba3 0c02 	sub.w	ip, r3, r2
 802a5b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 802a5ba:	1a9b      	subs	r3, r3, r2
 802a5bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802a5c0:	ec51 0b10 	vmov	r0, r1, d0
 802a5c4:	2b00      	cmp	r3, #0
 802a5c6:	bfd6      	itet	le
 802a5c8:	460a      	movle	r2, r1
 802a5ca:	462a      	movgt	r2, r5
 802a5cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802a5d0:	468b      	mov	fp, r1
 802a5d2:	462f      	mov	r7, r5
 802a5d4:	bfd4      	ite	le
 802a5d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802a5da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802a5de:	4620      	mov	r0, r4
 802a5e0:	ee10 2a10 	vmov	r2, s0
 802a5e4:	465b      	mov	r3, fp
 802a5e6:	4639      	mov	r1, r7
 802a5e8:	f7d6 f940 	bl	800086c <__aeabi_ddiv>
 802a5ec:	ec41 0b10 	vmov	d0, r0, r1
 802a5f0:	b003      	add	sp, #12
 802a5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a5f6 <__copybits>:
 802a5f6:	3901      	subs	r1, #1
 802a5f8:	b570      	push	{r4, r5, r6, lr}
 802a5fa:	1149      	asrs	r1, r1, #5
 802a5fc:	6914      	ldr	r4, [r2, #16]
 802a5fe:	3101      	adds	r1, #1
 802a600:	f102 0314 	add.w	r3, r2, #20
 802a604:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802a608:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802a60c:	1f05      	subs	r5, r0, #4
 802a60e:	42a3      	cmp	r3, r4
 802a610:	d30c      	bcc.n	802a62c <__copybits+0x36>
 802a612:	1aa3      	subs	r3, r4, r2
 802a614:	3b11      	subs	r3, #17
 802a616:	f023 0303 	bic.w	r3, r3, #3
 802a61a:	3211      	adds	r2, #17
 802a61c:	42a2      	cmp	r2, r4
 802a61e:	bf88      	it	hi
 802a620:	2300      	movhi	r3, #0
 802a622:	4418      	add	r0, r3
 802a624:	2300      	movs	r3, #0
 802a626:	4288      	cmp	r0, r1
 802a628:	d305      	bcc.n	802a636 <__copybits+0x40>
 802a62a:	bd70      	pop	{r4, r5, r6, pc}
 802a62c:	f853 6b04 	ldr.w	r6, [r3], #4
 802a630:	f845 6f04 	str.w	r6, [r5, #4]!
 802a634:	e7eb      	b.n	802a60e <__copybits+0x18>
 802a636:	f840 3b04 	str.w	r3, [r0], #4
 802a63a:	e7f4      	b.n	802a626 <__copybits+0x30>

0802a63c <__any_on>:
 802a63c:	f100 0214 	add.w	r2, r0, #20
 802a640:	6900      	ldr	r0, [r0, #16]
 802a642:	114b      	asrs	r3, r1, #5
 802a644:	4298      	cmp	r0, r3
 802a646:	b510      	push	{r4, lr}
 802a648:	db11      	blt.n	802a66e <__any_on+0x32>
 802a64a:	dd0a      	ble.n	802a662 <__any_on+0x26>
 802a64c:	f011 011f 	ands.w	r1, r1, #31
 802a650:	d007      	beq.n	802a662 <__any_on+0x26>
 802a652:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802a656:	fa24 f001 	lsr.w	r0, r4, r1
 802a65a:	fa00 f101 	lsl.w	r1, r0, r1
 802a65e:	428c      	cmp	r4, r1
 802a660:	d10b      	bne.n	802a67a <__any_on+0x3e>
 802a662:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802a666:	4293      	cmp	r3, r2
 802a668:	d803      	bhi.n	802a672 <__any_on+0x36>
 802a66a:	2000      	movs	r0, #0
 802a66c:	bd10      	pop	{r4, pc}
 802a66e:	4603      	mov	r3, r0
 802a670:	e7f7      	b.n	802a662 <__any_on+0x26>
 802a672:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802a676:	2900      	cmp	r1, #0
 802a678:	d0f5      	beq.n	802a666 <__any_on+0x2a>
 802a67a:	2001      	movs	r0, #1
 802a67c:	e7f6      	b.n	802a66c <__any_on+0x30>

0802a67e <_calloc_r>:
 802a67e:	b513      	push	{r0, r1, r4, lr}
 802a680:	434a      	muls	r2, r1
 802a682:	4611      	mov	r1, r2
 802a684:	9201      	str	r2, [sp, #4]
 802a686:	f7fc fa8d 	bl	8026ba4 <_malloc_r>
 802a68a:	4604      	mov	r4, r0
 802a68c:	b118      	cbz	r0, 802a696 <_calloc_r+0x18>
 802a68e:	9a01      	ldr	r2, [sp, #4]
 802a690:	2100      	movs	r1, #0
 802a692:	f7fb ffb1 	bl	80265f8 <memset>
 802a696:	4620      	mov	r0, r4
 802a698:	b002      	add	sp, #8
 802a69a:	bd10      	pop	{r4, pc}

0802a69c <_realloc_r>:
 802a69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a69e:	4607      	mov	r7, r0
 802a6a0:	4614      	mov	r4, r2
 802a6a2:	460e      	mov	r6, r1
 802a6a4:	b921      	cbnz	r1, 802a6b0 <_realloc_r+0x14>
 802a6a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802a6aa:	4611      	mov	r1, r2
 802a6ac:	f7fc ba7a 	b.w	8026ba4 <_malloc_r>
 802a6b0:	b922      	cbnz	r2, 802a6bc <_realloc_r+0x20>
 802a6b2:	f7fc fa27 	bl	8026b04 <_free_r>
 802a6b6:	4625      	mov	r5, r4
 802a6b8:	4628      	mov	r0, r5
 802a6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a6bc:	f001 f84e 	bl	802b75c <_malloc_usable_size_r>
 802a6c0:	42a0      	cmp	r0, r4
 802a6c2:	d20f      	bcs.n	802a6e4 <_realloc_r+0x48>
 802a6c4:	4621      	mov	r1, r4
 802a6c6:	4638      	mov	r0, r7
 802a6c8:	f7fc fa6c 	bl	8026ba4 <_malloc_r>
 802a6cc:	4605      	mov	r5, r0
 802a6ce:	2800      	cmp	r0, #0
 802a6d0:	d0f2      	beq.n	802a6b8 <_realloc_r+0x1c>
 802a6d2:	4631      	mov	r1, r6
 802a6d4:	4622      	mov	r2, r4
 802a6d6:	f7fb ff67 	bl	80265a8 <memcpy>
 802a6da:	4631      	mov	r1, r6
 802a6dc:	4638      	mov	r0, r7
 802a6de:	f7fc fa11 	bl	8026b04 <_free_r>
 802a6e2:	e7e9      	b.n	802a6b8 <_realloc_r+0x1c>
 802a6e4:	4635      	mov	r5, r6
 802a6e6:	e7e7      	b.n	802a6b8 <_realloc_r+0x1c>

0802a6e8 <__ssputs_r>:
 802a6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a6ec:	688e      	ldr	r6, [r1, #8]
 802a6ee:	429e      	cmp	r6, r3
 802a6f0:	4682      	mov	sl, r0
 802a6f2:	460c      	mov	r4, r1
 802a6f4:	4690      	mov	r8, r2
 802a6f6:	461f      	mov	r7, r3
 802a6f8:	d838      	bhi.n	802a76c <__ssputs_r+0x84>
 802a6fa:	898a      	ldrh	r2, [r1, #12]
 802a6fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802a700:	d032      	beq.n	802a768 <__ssputs_r+0x80>
 802a702:	6825      	ldr	r5, [r4, #0]
 802a704:	6909      	ldr	r1, [r1, #16]
 802a706:	eba5 0901 	sub.w	r9, r5, r1
 802a70a:	6965      	ldr	r5, [r4, #20]
 802a70c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802a710:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802a714:	3301      	adds	r3, #1
 802a716:	444b      	add	r3, r9
 802a718:	106d      	asrs	r5, r5, #1
 802a71a:	429d      	cmp	r5, r3
 802a71c:	bf38      	it	cc
 802a71e:	461d      	movcc	r5, r3
 802a720:	0553      	lsls	r3, r2, #21
 802a722:	d531      	bpl.n	802a788 <__ssputs_r+0xa0>
 802a724:	4629      	mov	r1, r5
 802a726:	f7fc fa3d 	bl	8026ba4 <_malloc_r>
 802a72a:	4606      	mov	r6, r0
 802a72c:	b950      	cbnz	r0, 802a744 <__ssputs_r+0x5c>
 802a72e:	230c      	movs	r3, #12
 802a730:	f8ca 3000 	str.w	r3, [sl]
 802a734:	89a3      	ldrh	r3, [r4, #12]
 802a736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a73a:	81a3      	strh	r3, [r4, #12]
 802a73c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802a740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a744:	6921      	ldr	r1, [r4, #16]
 802a746:	464a      	mov	r2, r9
 802a748:	f7fb ff2e 	bl	80265a8 <memcpy>
 802a74c:	89a3      	ldrh	r3, [r4, #12]
 802a74e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802a752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a756:	81a3      	strh	r3, [r4, #12]
 802a758:	6126      	str	r6, [r4, #16]
 802a75a:	6165      	str	r5, [r4, #20]
 802a75c:	444e      	add	r6, r9
 802a75e:	eba5 0509 	sub.w	r5, r5, r9
 802a762:	6026      	str	r6, [r4, #0]
 802a764:	60a5      	str	r5, [r4, #8]
 802a766:	463e      	mov	r6, r7
 802a768:	42be      	cmp	r6, r7
 802a76a:	d900      	bls.n	802a76e <__ssputs_r+0x86>
 802a76c:	463e      	mov	r6, r7
 802a76e:	4632      	mov	r2, r6
 802a770:	6820      	ldr	r0, [r4, #0]
 802a772:	4641      	mov	r1, r8
 802a774:	f7fb ff26 	bl	80265c4 <memmove>
 802a778:	68a3      	ldr	r3, [r4, #8]
 802a77a:	6822      	ldr	r2, [r4, #0]
 802a77c:	1b9b      	subs	r3, r3, r6
 802a77e:	4432      	add	r2, r6
 802a780:	60a3      	str	r3, [r4, #8]
 802a782:	6022      	str	r2, [r4, #0]
 802a784:	2000      	movs	r0, #0
 802a786:	e7db      	b.n	802a740 <__ssputs_r+0x58>
 802a788:	462a      	mov	r2, r5
 802a78a:	f7ff ff87 	bl	802a69c <_realloc_r>
 802a78e:	4606      	mov	r6, r0
 802a790:	2800      	cmp	r0, #0
 802a792:	d1e1      	bne.n	802a758 <__ssputs_r+0x70>
 802a794:	6921      	ldr	r1, [r4, #16]
 802a796:	4650      	mov	r0, sl
 802a798:	f7fc f9b4 	bl	8026b04 <_free_r>
 802a79c:	e7c7      	b.n	802a72e <__ssputs_r+0x46>
	...

0802a7a0 <_svfiprintf_r>:
 802a7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a7a4:	4698      	mov	r8, r3
 802a7a6:	898b      	ldrh	r3, [r1, #12]
 802a7a8:	061b      	lsls	r3, r3, #24
 802a7aa:	b09d      	sub	sp, #116	; 0x74
 802a7ac:	4607      	mov	r7, r0
 802a7ae:	460d      	mov	r5, r1
 802a7b0:	4614      	mov	r4, r2
 802a7b2:	d50e      	bpl.n	802a7d2 <_svfiprintf_r+0x32>
 802a7b4:	690b      	ldr	r3, [r1, #16]
 802a7b6:	b963      	cbnz	r3, 802a7d2 <_svfiprintf_r+0x32>
 802a7b8:	2140      	movs	r1, #64	; 0x40
 802a7ba:	f7fc f9f3 	bl	8026ba4 <_malloc_r>
 802a7be:	6028      	str	r0, [r5, #0]
 802a7c0:	6128      	str	r0, [r5, #16]
 802a7c2:	b920      	cbnz	r0, 802a7ce <_svfiprintf_r+0x2e>
 802a7c4:	230c      	movs	r3, #12
 802a7c6:	603b      	str	r3, [r7, #0]
 802a7c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802a7cc:	e0d1      	b.n	802a972 <_svfiprintf_r+0x1d2>
 802a7ce:	2340      	movs	r3, #64	; 0x40
 802a7d0:	616b      	str	r3, [r5, #20]
 802a7d2:	2300      	movs	r3, #0
 802a7d4:	9309      	str	r3, [sp, #36]	; 0x24
 802a7d6:	2320      	movs	r3, #32
 802a7d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802a7dc:	f8cd 800c 	str.w	r8, [sp, #12]
 802a7e0:	2330      	movs	r3, #48	; 0x30
 802a7e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802a98c <_svfiprintf_r+0x1ec>
 802a7e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802a7ea:	f04f 0901 	mov.w	r9, #1
 802a7ee:	4623      	mov	r3, r4
 802a7f0:	469a      	mov	sl, r3
 802a7f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a7f6:	b10a      	cbz	r2, 802a7fc <_svfiprintf_r+0x5c>
 802a7f8:	2a25      	cmp	r2, #37	; 0x25
 802a7fa:	d1f9      	bne.n	802a7f0 <_svfiprintf_r+0x50>
 802a7fc:	ebba 0b04 	subs.w	fp, sl, r4
 802a800:	d00b      	beq.n	802a81a <_svfiprintf_r+0x7a>
 802a802:	465b      	mov	r3, fp
 802a804:	4622      	mov	r2, r4
 802a806:	4629      	mov	r1, r5
 802a808:	4638      	mov	r0, r7
 802a80a:	f7ff ff6d 	bl	802a6e8 <__ssputs_r>
 802a80e:	3001      	adds	r0, #1
 802a810:	f000 80aa 	beq.w	802a968 <_svfiprintf_r+0x1c8>
 802a814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a816:	445a      	add	r2, fp
 802a818:	9209      	str	r2, [sp, #36]	; 0x24
 802a81a:	f89a 3000 	ldrb.w	r3, [sl]
 802a81e:	2b00      	cmp	r3, #0
 802a820:	f000 80a2 	beq.w	802a968 <_svfiprintf_r+0x1c8>
 802a824:	2300      	movs	r3, #0
 802a826:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802a82a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a82e:	f10a 0a01 	add.w	sl, sl, #1
 802a832:	9304      	str	r3, [sp, #16]
 802a834:	9307      	str	r3, [sp, #28]
 802a836:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802a83a:	931a      	str	r3, [sp, #104]	; 0x68
 802a83c:	4654      	mov	r4, sl
 802a83e:	2205      	movs	r2, #5
 802a840:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a844:	4851      	ldr	r0, [pc, #324]	; (802a98c <_svfiprintf_r+0x1ec>)
 802a846:	f7d5 fcdb 	bl	8000200 <memchr>
 802a84a:	9a04      	ldr	r2, [sp, #16]
 802a84c:	b9d8      	cbnz	r0, 802a886 <_svfiprintf_r+0xe6>
 802a84e:	06d0      	lsls	r0, r2, #27
 802a850:	bf44      	itt	mi
 802a852:	2320      	movmi	r3, #32
 802a854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a858:	0711      	lsls	r1, r2, #28
 802a85a:	bf44      	itt	mi
 802a85c:	232b      	movmi	r3, #43	; 0x2b
 802a85e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a862:	f89a 3000 	ldrb.w	r3, [sl]
 802a866:	2b2a      	cmp	r3, #42	; 0x2a
 802a868:	d015      	beq.n	802a896 <_svfiprintf_r+0xf6>
 802a86a:	9a07      	ldr	r2, [sp, #28]
 802a86c:	4654      	mov	r4, sl
 802a86e:	2000      	movs	r0, #0
 802a870:	f04f 0c0a 	mov.w	ip, #10
 802a874:	4621      	mov	r1, r4
 802a876:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a87a:	3b30      	subs	r3, #48	; 0x30
 802a87c:	2b09      	cmp	r3, #9
 802a87e:	d94e      	bls.n	802a91e <_svfiprintf_r+0x17e>
 802a880:	b1b0      	cbz	r0, 802a8b0 <_svfiprintf_r+0x110>
 802a882:	9207      	str	r2, [sp, #28]
 802a884:	e014      	b.n	802a8b0 <_svfiprintf_r+0x110>
 802a886:	eba0 0308 	sub.w	r3, r0, r8
 802a88a:	fa09 f303 	lsl.w	r3, r9, r3
 802a88e:	4313      	orrs	r3, r2
 802a890:	9304      	str	r3, [sp, #16]
 802a892:	46a2      	mov	sl, r4
 802a894:	e7d2      	b.n	802a83c <_svfiprintf_r+0x9c>
 802a896:	9b03      	ldr	r3, [sp, #12]
 802a898:	1d19      	adds	r1, r3, #4
 802a89a:	681b      	ldr	r3, [r3, #0]
 802a89c:	9103      	str	r1, [sp, #12]
 802a89e:	2b00      	cmp	r3, #0
 802a8a0:	bfbb      	ittet	lt
 802a8a2:	425b      	neglt	r3, r3
 802a8a4:	f042 0202 	orrlt.w	r2, r2, #2
 802a8a8:	9307      	strge	r3, [sp, #28]
 802a8aa:	9307      	strlt	r3, [sp, #28]
 802a8ac:	bfb8      	it	lt
 802a8ae:	9204      	strlt	r2, [sp, #16]
 802a8b0:	7823      	ldrb	r3, [r4, #0]
 802a8b2:	2b2e      	cmp	r3, #46	; 0x2e
 802a8b4:	d10c      	bne.n	802a8d0 <_svfiprintf_r+0x130>
 802a8b6:	7863      	ldrb	r3, [r4, #1]
 802a8b8:	2b2a      	cmp	r3, #42	; 0x2a
 802a8ba:	d135      	bne.n	802a928 <_svfiprintf_r+0x188>
 802a8bc:	9b03      	ldr	r3, [sp, #12]
 802a8be:	1d1a      	adds	r2, r3, #4
 802a8c0:	681b      	ldr	r3, [r3, #0]
 802a8c2:	9203      	str	r2, [sp, #12]
 802a8c4:	2b00      	cmp	r3, #0
 802a8c6:	bfb8      	it	lt
 802a8c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802a8cc:	3402      	adds	r4, #2
 802a8ce:	9305      	str	r3, [sp, #20]
 802a8d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802a99c <_svfiprintf_r+0x1fc>
 802a8d4:	7821      	ldrb	r1, [r4, #0]
 802a8d6:	2203      	movs	r2, #3
 802a8d8:	4650      	mov	r0, sl
 802a8da:	f7d5 fc91 	bl	8000200 <memchr>
 802a8de:	b140      	cbz	r0, 802a8f2 <_svfiprintf_r+0x152>
 802a8e0:	2340      	movs	r3, #64	; 0x40
 802a8e2:	eba0 000a 	sub.w	r0, r0, sl
 802a8e6:	fa03 f000 	lsl.w	r0, r3, r0
 802a8ea:	9b04      	ldr	r3, [sp, #16]
 802a8ec:	4303      	orrs	r3, r0
 802a8ee:	3401      	adds	r4, #1
 802a8f0:	9304      	str	r3, [sp, #16]
 802a8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a8f6:	4826      	ldr	r0, [pc, #152]	; (802a990 <_svfiprintf_r+0x1f0>)
 802a8f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802a8fc:	2206      	movs	r2, #6
 802a8fe:	f7d5 fc7f 	bl	8000200 <memchr>
 802a902:	2800      	cmp	r0, #0
 802a904:	d038      	beq.n	802a978 <_svfiprintf_r+0x1d8>
 802a906:	4b23      	ldr	r3, [pc, #140]	; (802a994 <_svfiprintf_r+0x1f4>)
 802a908:	bb1b      	cbnz	r3, 802a952 <_svfiprintf_r+0x1b2>
 802a90a:	9b03      	ldr	r3, [sp, #12]
 802a90c:	3307      	adds	r3, #7
 802a90e:	f023 0307 	bic.w	r3, r3, #7
 802a912:	3308      	adds	r3, #8
 802a914:	9303      	str	r3, [sp, #12]
 802a916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a918:	4433      	add	r3, r6
 802a91a:	9309      	str	r3, [sp, #36]	; 0x24
 802a91c:	e767      	b.n	802a7ee <_svfiprintf_r+0x4e>
 802a91e:	fb0c 3202 	mla	r2, ip, r2, r3
 802a922:	460c      	mov	r4, r1
 802a924:	2001      	movs	r0, #1
 802a926:	e7a5      	b.n	802a874 <_svfiprintf_r+0xd4>
 802a928:	2300      	movs	r3, #0
 802a92a:	3401      	adds	r4, #1
 802a92c:	9305      	str	r3, [sp, #20]
 802a92e:	4619      	mov	r1, r3
 802a930:	f04f 0c0a 	mov.w	ip, #10
 802a934:	4620      	mov	r0, r4
 802a936:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a93a:	3a30      	subs	r2, #48	; 0x30
 802a93c:	2a09      	cmp	r2, #9
 802a93e:	d903      	bls.n	802a948 <_svfiprintf_r+0x1a8>
 802a940:	2b00      	cmp	r3, #0
 802a942:	d0c5      	beq.n	802a8d0 <_svfiprintf_r+0x130>
 802a944:	9105      	str	r1, [sp, #20]
 802a946:	e7c3      	b.n	802a8d0 <_svfiprintf_r+0x130>
 802a948:	fb0c 2101 	mla	r1, ip, r1, r2
 802a94c:	4604      	mov	r4, r0
 802a94e:	2301      	movs	r3, #1
 802a950:	e7f0      	b.n	802a934 <_svfiprintf_r+0x194>
 802a952:	ab03      	add	r3, sp, #12
 802a954:	9300      	str	r3, [sp, #0]
 802a956:	462a      	mov	r2, r5
 802a958:	4b0f      	ldr	r3, [pc, #60]	; (802a998 <_svfiprintf_r+0x1f8>)
 802a95a:	a904      	add	r1, sp, #16
 802a95c:	4638      	mov	r0, r7
 802a95e:	f3af 8000 	nop.w
 802a962:	1c42      	adds	r2, r0, #1
 802a964:	4606      	mov	r6, r0
 802a966:	d1d6      	bne.n	802a916 <_svfiprintf_r+0x176>
 802a968:	89ab      	ldrh	r3, [r5, #12]
 802a96a:	065b      	lsls	r3, r3, #25
 802a96c:	f53f af2c 	bmi.w	802a7c8 <_svfiprintf_r+0x28>
 802a970:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a972:	b01d      	add	sp, #116	; 0x74
 802a974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a978:	ab03      	add	r3, sp, #12
 802a97a:	9300      	str	r3, [sp, #0]
 802a97c:	462a      	mov	r2, r5
 802a97e:	4b06      	ldr	r3, [pc, #24]	; (802a998 <_svfiprintf_r+0x1f8>)
 802a980:	a904      	add	r1, sp, #16
 802a982:	4638      	mov	r0, r7
 802a984:	f000 fba6 	bl	802b0d4 <_printf_i>
 802a988:	e7eb      	b.n	802a962 <_svfiprintf_r+0x1c2>
 802a98a:	bf00      	nop
 802a98c:	08061144 	.word	0x08061144
 802a990:	0806114e 	.word	0x0806114e
 802a994:	00000000 	.word	0x00000000
 802a998:	0802a6e9 	.word	0x0802a6e9
 802a99c:	0806114a 	.word	0x0806114a

0802a9a0 <_sungetc_r>:
 802a9a0:	b538      	push	{r3, r4, r5, lr}
 802a9a2:	1c4b      	adds	r3, r1, #1
 802a9a4:	4614      	mov	r4, r2
 802a9a6:	d103      	bne.n	802a9b0 <_sungetc_r+0x10>
 802a9a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 802a9ac:	4628      	mov	r0, r5
 802a9ae:	bd38      	pop	{r3, r4, r5, pc}
 802a9b0:	8993      	ldrh	r3, [r2, #12]
 802a9b2:	f023 0320 	bic.w	r3, r3, #32
 802a9b6:	8193      	strh	r3, [r2, #12]
 802a9b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802a9ba:	6852      	ldr	r2, [r2, #4]
 802a9bc:	b2cd      	uxtb	r5, r1
 802a9be:	b18b      	cbz	r3, 802a9e4 <_sungetc_r+0x44>
 802a9c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802a9c2:	4293      	cmp	r3, r2
 802a9c4:	dd08      	ble.n	802a9d8 <_sungetc_r+0x38>
 802a9c6:	6823      	ldr	r3, [r4, #0]
 802a9c8:	1e5a      	subs	r2, r3, #1
 802a9ca:	6022      	str	r2, [r4, #0]
 802a9cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 802a9d0:	6863      	ldr	r3, [r4, #4]
 802a9d2:	3301      	adds	r3, #1
 802a9d4:	6063      	str	r3, [r4, #4]
 802a9d6:	e7e9      	b.n	802a9ac <_sungetc_r+0xc>
 802a9d8:	4621      	mov	r1, r4
 802a9da:	f000 fe43 	bl	802b664 <__submore>
 802a9de:	2800      	cmp	r0, #0
 802a9e0:	d0f1      	beq.n	802a9c6 <_sungetc_r+0x26>
 802a9e2:	e7e1      	b.n	802a9a8 <_sungetc_r+0x8>
 802a9e4:	6921      	ldr	r1, [r4, #16]
 802a9e6:	6823      	ldr	r3, [r4, #0]
 802a9e8:	b151      	cbz	r1, 802aa00 <_sungetc_r+0x60>
 802a9ea:	4299      	cmp	r1, r3
 802a9ec:	d208      	bcs.n	802aa00 <_sungetc_r+0x60>
 802a9ee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802a9f2:	42a9      	cmp	r1, r5
 802a9f4:	d104      	bne.n	802aa00 <_sungetc_r+0x60>
 802a9f6:	3b01      	subs	r3, #1
 802a9f8:	3201      	adds	r2, #1
 802a9fa:	6023      	str	r3, [r4, #0]
 802a9fc:	6062      	str	r2, [r4, #4]
 802a9fe:	e7d5      	b.n	802a9ac <_sungetc_r+0xc>
 802aa00:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802aa04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802aa08:	6363      	str	r3, [r4, #52]	; 0x34
 802aa0a:	2303      	movs	r3, #3
 802aa0c:	63a3      	str	r3, [r4, #56]	; 0x38
 802aa0e:	4623      	mov	r3, r4
 802aa10:	f803 5f46 	strb.w	r5, [r3, #70]!
 802aa14:	6023      	str	r3, [r4, #0]
 802aa16:	2301      	movs	r3, #1
 802aa18:	e7dc      	b.n	802a9d4 <_sungetc_r+0x34>

0802aa1a <__ssrefill_r>:
 802aa1a:	b510      	push	{r4, lr}
 802aa1c:	460c      	mov	r4, r1
 802aa1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802aa20:	b169      	cbz	r1, 802aa3e <__ssrefill_r+0x24>
 802aa22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802aa26:	4299      	cmp	r1, r3
 802aa28:	d001      	beq.n	802aa2e <__ssrefill_r+0x14>
 802aa2a:	f7fc f86b 	bl	8026b04 <_free_r>
 802aa2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802aa30:	6063      	str	r3, [r4, #4]
 802aa32:	2000      	movs	r0, #0
 802aa34:	6360      	str	r0, [r4, #52]	; 0x34
 802aa36:	b113      	cbz	r3, 802aa3e <__ssrefill_r+0x24>
 802aa38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802aa3a:	6023      	str	r3, [r4, #0]
 802aa3c:	bd10      	pop	{r4, pc}
 802aa3e:	6923      	ldr	r3, [r4, #16]
 802aa40:	6023      	str	r3, [r4, #0]
 802aa42:	2300      	movs	r3, #0
 802aa44:	6063      	str	r3, [r4, #4]
 802aa46:	89a3      	ldrh	r3, [r4, #12]
 802aa48:	f043 0320 	orr.w	r3, r3, #32
 802aa4c:	81a3      	strh	r3, [r4, #12]
 802aa4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802aa52:	e7f3      	b.n	802aa3c <__ssrefill_r+0x22>

0802aa54 <__ssvfiscanf_r>:
 802aa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aa58:	460c      	mov	r4, r1
 802aa5a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 802aa5e:	2100      	movs	r1, #0
 802aa60:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802aa64:	49b2      	ldr	r1, [pc, #712]	; (802ad30 <__ssvfiscanf_r+0x2dc>)
 802aa66:	91a0      	str	r1, [sp, #640]	; 0x280
 802aa68:	f10d 0804 	add.w	r8, sp, #4
 802aa6c:	49b1      	ldr	r1, [pc, #708]	; (802ad34 <__ssvfiscanf_r+0x2e0>)
 802aa6e:	4fb2      	ldr	r7, [pc, #712]	; (802ad38 <__ssvfiscanf_r+0x2e4>)
 802aa70:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 802ad3c <__ssvfiscanf_r+0x2e8>
 802aa74:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802aa78:	4606      	mov	r6, r0
 802aa7a:	91a1      	str	r1, [sp, #644]	; 0x284
 802aa7c:	9300      	str	r3, [sp, #0]
 802aa7e:	f892 a000 	ldrb.w	sl, [r2]
 802aa82:	f1ba 0f00 	cmp.w	sl, #0
 802aa86:	f000 8151 	beq.w	802ad2c <__ssvfiscanf_r+0x2d8>
 802aa8a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 802aa8e:	f013 0308 	ands.w	r3, r3, #8
 802aa92:	f102 0501 	add.w	r5, r2, #1
 802aa96:	d019      	beq.n	802aacc <__ssvfiscanf_r+0x78>
 802aa98:	6863      	ldr	r3, [r4, #4]
 802aa9a:	2b00      	cmp	r3, #0
 802aa9c:	dd0f      	ble.n	802aabe <__ssvfiscanf_r+0x6a>
 802aa9e:	6823      	ldr	r3, [r4, #0]
 802aaa0:	781a      	ldrb	r2, [r3, #0]
 802aaa2:	5cba      	ldrb	r2, [r7, r2]
 802aaa4:	0712      	lsls	r2, r2, #28
 802aaa6:	d401      	bmi.n	802aaac <__ssvfiscanf_r+0x58>
 802aaa8:	462a      	mov	r2, r5
 802aaaa:	e7e8      	b.n	802aa7e <__ssvfiscanf_r+0x2a>
 802aaac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802aaae:	3201      	adds	r2, #1
 802aab0:	9245      	str	r2, [sp, #276]	; 0x114
 802aab2:	6862      	ldr	r2, [r4, #4]
 802aab4:	3301      	adds	r3, #1
 802aab6:	3a01      	subs	r2, #1
 802aab8:	6062      	str	r2, [r4, #4]
 802aaba:	6023      	str	r3, [r4, #0]
 802aabc:	e7ec      	b.n	802aa98 <__ssvfiscanf_r+0x44>
 802aabe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802aac0:	4621      	mov	r1, r4
 802aac2:	4630      	mov	r0, r6
 802aac4:	4798      	blx	r3
 802aac6:	2800      	cmp	r0, #0
 802aac8:	d0e9      	beq.n	802aa9e <__ssvfiscanf_r+0x4a>
 802aaca:	e7ed      	b.n	802aaa8 <__ssvfiscanf_r+0x54>
 802aacc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 802aad0:	f040 8083 	bne.w	802abda <__ssvfiscanf_r+0x186>
 802aad4:	9341      	str	r3, [sp, #260]	; 0x104
 802aad6:	9343      	str	r3, [sp, #268]	; 0x10c
 802aad8:	7853      	ldrb	r3, [r2, #1]
 802aada:	2b2a      	cmp	r3, #42	; 0x2a
 802aadc:	bf02      	ittt	eq
 802aade:	2310      	moveq	r3, #16
 802aae0:	1c95      	addeq	r5, r2, #2
 802aae2:	9341      	streq	r3, [sp, #260]	; 0x104
 802aae4:	220a      	movs	r2, #10
 802aae6:	46ab      	mov	fp, r5
 802aae8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 802aaec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 802aaf0:	2b09      	cmp	r3, #9
 802aaf2:	d91d      	bls.n	802ab30 <__ssvfiscanf_r+0xdc>
 802aaf4:	4891      	ldr	r0, [pc, #580]	; (802ad3c <__ssvfiscanf_r+0x2e8>)
 802aaf6:	2203      	movs	r2, #3
 802aaf8:	f7d5 fb82 	bl	8000200 <memchr>
 802aafc:	b140      	cbz	r0, 802ab10 <__ssvfiscanf_r+0xbc>
 802aafe:	2301      	movs	r3, #1
 802ab00:	eba0 0009 	sub.w	r0, r0, r9
 802ab04:	fa03 f000 	lsl.w	r0, r3, r0
 802ab08:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802ab0a:	4318      	orrs	r0, r3
 802ab0c:	9041      	str	r0, [sp, #260]	; 0x104
 802ab0e:	465d      	mov	r5, fp
 802ab10:	f815 3b01 	ldrb.w	r3, [r5], #1
 802ab14:	2b78      	cmp	r3, #120	; 0x78
 802ab16:	d806      	bhi.n	802ab26 <__ssvfiscanf_r+0xd2>
 802ab18:	2b57      	cmp	r3, #87	; 0x57
 802ab1a:	d810      	bhi.n	802ab3e <__ssvfiscanf_r+0xea>
 802ab1c:	2b25      	cmp	r3, #37	; 0x25
 802ab1e:	d05c      	beq.n	802abda <__ssvfiscanf_r+0x186>
 802ab20:	d856      	bhi.n	802abd0 <__ssvfiscanf_r+0x17c>
 802ab22:	2b00      	cmp	r3, #0
 802ab24:	d074      	beq.n	802ac10 <__ssvfiscanf_r+0x1bc>
 802ab26:	2303      	movs	r3, #3
 802ab28:	9347      	str	r3, [sp, #284]	; 0x11c
 802ab2a:	230a      	movs	r3, #10
 802ab2c:	9342      	str	r3, [sp, #264]	; 0x108
 802ab2e:	e081      	b.n	802ac34 <__ssvfiscanf_r+0x1e0>
 802ab30:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802ab32:	fb02 1303 	mla	r3, r2, r3, r1
 802ab36:	3b30      	subs	r3, #48	; 0x30
 802ab38:	9343      	str	r3, [sp, #268]	; 0x10c
 802ab3a:	465d      	mov	r5, fp
 802ab3c:	e7d3      	b.n	802aae6 <__ssvfiscanf_r+0x92>
 802ab3e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802ab42:	2a20      	cmp	r2, #32
 802ab44:	d8ef      	bhi.n	802ab26 <__ssvfiscanf_r+0xd2>
 802ab46:	a101      	add	r1, pc, #4	; (adr r1, 802ab4c <__ssvfiscanf_r+0xf8>)
 802ab48:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802ab4c:	0802ac1f 	.word	0x0802ac1f
 802ab50:	0802ab27 	.word	0x0802ab27
 802ab54:	0802ab27 	.word	0x0802ab27
 802ab58:	0802ac7d 	.word	0x0802ac7d
 802ab5c:	0802ab27 	.word	0x0802ab27
 802ab60:	0802ab27 	.word	0x0802ab27
 802ab64:	0802ab27 	.word	0x0802ab27
 802ab68:	0802ab27 	.word	0x0802ab27
 802ab6c:	0802ab27 	.word	0x0802ab27
 802ab70:	0802ab27 	.word	0x0802ab27
 802ab74:	0802ab27 	.word	0x0802ab27
 802ab78:	0802ac93 	.word	0x0802ac93
 802ab7c:	0802ac69 	.word	0x0802ac69
 802ab80:	0802abd7 	.word	0x0802abd7
 802ab84:	0802abd7 	.word	0x0802abd7
 802ab88:	0802abd7 	.word	0x0802abd7
 802ab8c:	0802ab27 	.word	0x0802ab27
 802ab90:	0802ac6d 	.word	0x0802ac6d
 802ab94:	0802ab27 	.word	0x0802ab27
 802ab98:	0802ab27 	.word	0x0802ab27
 802ab9c:	0802ab27 	.word	0x0802ab27
 802aba0:	0802ab27 	.word	0x0802ab27
 802aba4:	0802aca3 	.word	0x0802aca3
 802aba8:	0802ac75 	.word	0x0802ac75
 802abac:	0802ac17 	.word	0x0802ac17
 802abb0:	0802ab27 	.word	0x0802ab27
 802abb4:	0802ab27 	.word	0x0802ab27
 802abb8:	0802ac9f 	.word	0x0802ac9f
 802abbc:	0802ab27 	.word	0x0802ab27
 802abc0:	0802ac69 	.word	0x0802ac69
 802abc4:	0802ab27 	.word	0x0802ab27
 802abc8:	0802ab27 	.word	0x0802ab27
 802abcc:	0802ac1f 	.word	0x0802ac1f
 802abd0:	3b45      	subs	r3, #69	; 0x45
 802abd2:	2b02      	cmp	r3, #2
 802abd4:	d8a7      	bhi.n	802ab26 <__ssvfiscanf_r+0xd2>
 802abd6:	2305      	movs	r3, #5
 802abd8:	e02b      	b.n	802ac32 <__ssvfiscanf_r+0x1de>
 802abda:	6863      	ldr	r3, [r4, #4]
 802abdc:	2b00      	cmp	r3, #0
 802abde:	dd0d      	ble.n	802abfc <__ssvfiscanf_r+0x1a8>
 802abe0:	6823      	ldr	r3, [r4, #0]
 802abe2:	781a      	ldrb	r2, [r3, #0]
 802abe4:	4552      	cmp	r2, sl
 802abe6:	f040 80a1 	bne.w	802ad2c <__ssvfiscanf_r+0x2d8>
 802abea:	3301      	adds	r3, #1
 802abec:	6862      	ldr	r2, [r4, #4]
 802abee:	6023      	str	r3, [r4, #0]
 802abf0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802abf2:	3a01      	subs	r2, #1
 802abf4:	3301      	adds	r3, #1
 802abf6:	6062      	str	r2, [r4, #4]
 802abf8:	9345      	str	r3, [sp, #276]	; 0x114
 802abfa:	e755      	b.n	802aaa8 <__ssvfiscanf_r+0x54>
 802abfc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802abfe:	4621      	mov	r1, r4
 802ac00:	4630      	mov	r0, r6
 802ac02:	4798      	blx	r3
 802ac04:	2800      	cmp	r0, #0
 802ac06:	d0eb      	beq.n	802abe0 <__ssvfiscanf_r+0x18c>
 802ac08:	9844      	ldr	r0, [sp, #272]	; 0x110
 802ac0a:	2800      	cmp	r0, #0
 802ac0c:	f040 8084 	bne.w	802ad18 <__ssvfiscanf_r+0x2c4>
 802ac10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802ac14:	e086      	b.n	802ad24 <__ssvfiscanf_r+0x2d0>
 802ac16:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802ac18:	f042 0220 	orr.w	r2, r2, #32
 802ac1c:	9241      	str	r2, [sp, #260]	; 0x104
 802ac1e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802ac20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802ac24:	9241      	str	r2, [sp, #260]	; 0x104
 802ac26:	2210      	movs	r2, #16
 802ac28:	2b6f      	cmp	r3, #111	; 0x6f
 802ac2a:	9242      	str	r2, [sp, #264]	; 0x108
 802ac2c:	bf34      	ite	cc
 802ac2e:	2303      	movcc	r3, #3
 802ac30:	2304      	movcs	r3, #4
 802ac32:	9347      	str	r3, [sp, #284]	; 0x11c
 802ac34:	6863      	ldr	r3, [r4, #4]
 802ac36:	2b00      	cmp	r3, #0
 802ac38:	dd41      	ble.n	802acbe <__ssvfiscanf_r+0x26a>
 802ac3a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802ac3c:	0659      	lsls	r1, r3, #25
 802ac3e:	d404      	bmi.n	802ac4a <__ssvfiscanf_r+0x1f6>
 802ac40:	6823      	ldr	r3, [r4, #0]
 802ac42:	781a      	ldrb	r2, [r3, #0]
 802ac44:	5cba      	ldrb	r2, [r7, r2]
 802ac46:	0712      	lsls	r2, r2, #28
 802ac48:	d440      	bmi.n	802accc <__ssvfiscanf_r+0x278>
 802ac4a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802ac4c:	2b02      	cmp	r3, #2
 802ac4e:	dc4f      	bgt.n	802acf0 <__ssvfiscanf_r+0x29c>
 802ac50:	466b      	mov	r3, sp
 802ac52:	4622      	mov	r2, r4
 802ac54:	a941      	add	r1, sp, #260	; 0x104
 802ac56:	4630      	mov	r0, r6
 802ac58:	f000 fb62 	bl	802b320 <_scanf_chars>
 802ac5c:	2801      	cmp	r0, #1
 802ac5e:	d065      	beq.n	802ad2c <__ssvfiscanf_r+0x2d8>
 802ac60:	2802      	cmp	r0, #2
 802ac62:	f47f af21 	bne.w	802aaa8 <__ssvfiscanf_r+0x54>
 802ac66:	e7cf      	b.n	802ac08 <__ssvfiscanf_r+0x1b4>
 802ac68:	220a      	movs	r2, #10
 802ac6a:	e7dd      	b.n	802ac28 <__ssvfiscanf_r+0x1d4>
 802ac6c:	2300      	movs	r3, #0
 802ac6e:	9342      	str	r3, [sp, #264]	; 0x108
 802ac70:	2303      	movs	r3, #3
 802ac72:	e7de      	b.n	802ac32 <__ssvfiscanf_r+0x1de>
 802ac74:	2308      	movs	r3, #8
 802ac76:	9342      	str	r3, [sp, #264]	; 0x108
 802ac78:	2304      	movs	r3, #4
 802ac7a:	e7da      	b.n	802ac32 <__ssvfiscanf_r+0x1de>
 802ac7c:	4629      	mov	r1, r5
 802ac7e:	4640      	mov	r0, r8
 802ac80:	f000 fcb6 	bl	802b5f0 <__sccl>
 802ac84:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802ac86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ac8a:	9341      	str	r3, [sp, #260]	; 0x104
 802ac8c:	4605      	mov	r5, r0
 802ac8e:	2301      	movs	r3, #1
 802ac90:	e7cf      	b.n	802ac32 <__ssvfiscanf_r+0x1de>
 802ac92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802ac94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ac98:	9341      	str	r3, [sp, #260]	; 0x104
 802ac9a:	2300      	movs	r3, #0
 802ac9c:	e7c9      	b.n	802ac32 <__ssvfiscanf_r+0x1de>
 802ac9e:	2302      	movs	r3, #2
 802aca0:	e7c7      	b.n	802ac32 <__ssvfiscanf_r+0x1de>
 802aca2:	9841      	ldr	r0, [sp, #260]	; 0x104
 802aca4:	06c3      	lsls	r3, r0, #27
 802aca6:	f53f aeff 	bmi.w	802aaa8 <__ssvfiscanf_r+0x54>
 802acaa:	9b00      	ldr	r3, [sp, #0]
 802acac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802acae:	1d19      	adds	r1, r3, #4
 802acb0:	9100      	str	r1, [sp, #0]
 802acb2:	681b      	ldr	r3, [r3, #0]
 802acb4:	07c0      	lsls	r0, r0, #31
 802acb6:	bf4c      	ite	mi
 802acb8:	801a      	strhmi	r2, [r3, #0]
 802acba:	601a      	strpl	r2, [r3, #0]
 802acbc:	e6f4      	b.n	802aaa8 <__ssvfiscanf_r+0x54>
 802acbe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802acc0:	4621      	mov	r1, r4
 802acc2:	4630      	mov	r0, r6
 802acc4:	4798      	blx	r3
 802acc6:	2800      	cmp	r0, #0
 802acc8:	d0b7      	beq.n	802ac3a <__ssvfiscanf_r+0x1e6>
 802acca:	e79d      	b.n	802ac08 <__ssvfiscanf_r+0x1b4>
 802accc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802acce:	3201      	adds	r2, #1
 802acd0:	9245      	str	r2, [sp, #276]	; 0x114
 802acd2:	6862      	ldr	r2, [r4, #4]
 802acd4:	3a01      	subs	r2, #1
 802acd6:	2a00      	cmp	r2, #0
 802acd8:	6062      	str	r2, [r4, #4]
 802acda:	dd02      	ble.n	802ace2 <__ssvfiscanf_r+0x28e>
 802acdc:	3301      	adds	r3, #1
 802acde:	6023      	str	r3, [r4, #0]
 802ace0:	e7ae      	b.n	802ac40 <__ssvfiscanf_r+0x1ec>
 802ace2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802ace4:	4621      	mov	r1, r4
 802ace6:	4630      	mov	r0, r6
 802ace8:	4798      	blx	r3
 802acea:	2800      	cmp	r0, #0
 802acec:	d0a8      	beq.n	802ac40 <__ssvfiscanf_r+0x1ec>
 802acee:	e78b      	b.n	802ac08 <__ssvfiscanf_r+0x1b4>
 802acf0:	2b04      	cmp	r3, #4
 802acf2:	dc06      	bgt.n	802ad02 <__ssvfiscanf_r+0x2ae>
 802acf4:	466b      	mov	r3, sp
 802acf6:	4622      	mov	r2, r4
 802acf8:	a941      	add	r1, sp, #260	; 0x104
 802acfa:	4630      	mov	r0, r6
 802acfc:	f000 fb68 	bl	802b3d0 <_scanf_i>
 802ad00:	e7ac      	b.n	802ac5c <__ssvfiscanf_r+0x208>
 802ad02:	4b0f      	ldr	r3, [pc, #60]	; (802ad40 <__ssvfiscanf_r+0x2ec>)
 802ad04:	2b00      	cmp	r3, #0
 802ad06:	f43f aecf 	beq.w	802aaa8 <__ssvfiscanf_r+0x54>
 802ad0a:	466b      	mov	r3, sp
 802ad0c:	4622      	mov	r2, r4
 802ad0e:	a941      	add	r1, sp, #260	; 0x104
 802ad10:	4630      	mov	r0, r6
 802ad12:	f3af 8000 	nop.w
 802ad16:	e7a1      	b.n	802ac5c <__ssvfiscanf_r+0x208>
 802ad18:	89a3      	ldrh	r3, [r4, #12]
 802ad1a:	f013 0f40 	tst.w	r3, #64	; 0x40
 802ad1e:	bf18      	it	ne
 802ad20:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 802ad24:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 802ad28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ad2c:	9844      	ldr	r0, [sp, #272]	; 0x110
 802ad2e:	e7f9      	b.n	802ad24 <__ssvfiscanf_r+0x2d0>
 802ad30:	0802a9a1 	.word	0x0802a9a1
 802ad34:	0802aa1b 	.word	0x0802aa1b
 802ad38:	08060901 	.word	0x08060901
 802ad3c:	0806114a 	.word	0x0806114a
 802ad40:	00000000 	.word	0x00000000

0802ad44 <__sfputc_r>:
 802ad44:	6893      	ldr	r3, [r2, #8]
 802ad46:	3b01      	subs	r3, #1
 802ad48:	2b00      	cmp	r3, #0
 802ad4a:	b410      	push	{r4}
 802ad4c:	6093      	str	r3, [r2, #8]
 802ad4e:	da08      	bge.n	802ad62 <__sfputc_r+0x1e>
 802ad50:	6994      	ldr	r4, [r2, #24]
 802ad52:	42a3      	cmp	r3, r4
 802ad54:	db01      	blt.n	802ad5a <__sfputc_r+0x16>
 802ad56:	290a      	cmp	r1, #10
 802ad58:	d103      	bne.n	802ad62 <__sfputc_r+0x1e>
 802ad5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ad5e:	f7fe b8e3 	b.w	8028f28 <__swbuf_r>
 802ad62:	6813      	ldr	r3, [r2, #0]
 802ad64:	1c58      	adds	r0, r3, #1
 802ad66:	6010      	str	r0, [r2, #0]
 802ad68:	7019      	strb	r1, [r3, #0]
 802ad6a:	4608      	mov	r0, r1
 802ad6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ad70:	4770      	bx	lr

0802ad72 <__sfputs_r>:
 802ad72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ad74:	4606      	mov	r6, r0
 802ad76:	460f      	mov	r7, r1
 802ad78:	4614      	mov	r4, r2
 802ad7a:	18d5      	adds	r5, r2, r3
 802ad7c:	42ac      	cmp	r4, r5
 802ad7e:	d101      	bne.n	802ad84 <__sfputs_r+0x12>
 802ad80:	2000      	movs	r0, #0
 802ad82:	e007      	b.n	802ad94 <__sfputs_r+0x22>
 802ad84:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ad88:	463a      	mov	r2, r7
 802ad8a:	4630      	mov	r0, r6
 802ad8c:	f7ff ffda 	bl	802ad44 <__sfputc_r>
 802ad90:	1c43      	adds	r3, r0, #1
 802ad92:	d1f3      	bne.n	802ad7c <__sfputs_r+0xa>
 802ad94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802ad98 <_vfiprintf_r>:
 802ad98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ad9c:	460d      	mov	r5, r1
 802ad9e:	b09d      	sub	sp, #116	; 0x74
 802ada0:	4614      	mov	r4, r2
 802ada2:	4698      	mov	r8, r3
 802ada4:	4606      	mov	r6, r0
 802ada6:	b118      	cbz	r0, 802adb0 <_vfiprintf_r+0x18>
 802ada8:	6983      	ldr	r3, [r0, #24]
 802adaa:	b90b      	cbnz	r3, 802adb0 <_vfiprintf_r+0x18>
 802adac:	f7fb fa02 	bl	80261b4 <__sinit>
 802adb0:	4b89      	ldr	r3, [pc, #548]	; (802afd8 <_vfiprintf_r+0x240>)
 802adb2:	429d      	cmp	r5, r3
 802adb4:	d11b      	bne.n	802adee <_vfiprintf_r+0x56>
 802adb6:	6875      	ldr	r5, [r6, #4]
 802adb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802adba:	07d9      	lsls	r1, r3, #31
 802adbc:	d405      	bmi.n	802adca <_vfiprintf_r+0x32>
 802adbe:	89ab      	ldrh	r3, [r5, #12]
 802adc0:	059a      	lsls	r2, r3, #22
 802adc2:	d402      	bmi.n	802adca <_vfiprintf_r+0x32>
 802adc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802adc6:	f7fb fbcd 	bl	8026564 <__retarget_lock_acquire_recursive>
 802adca:	89ab      	ldrh	r3, [r5, #12]
 802adcc:	071b      	lsls	r3, r3, #28
 802adce:	d501      	bpl.n	802add4 <_vfiprintf_r+0x3c>
 802add0:	692b      	ldr	r3, [r5, #16]
 802add2:	b9eb      	cbnz	r3, 802ae10 <_vfiprintf_r+0x78>
 802add4:	4629      	mov	r1, r5
 802add6:	4630      	mov	r0, r6
 802add8:	f7fe f90a 	bl	8028ff0 <__swsetup_r>
 802addc:	b1c0      	cbz	r0, 802ae10 <_vfiprintf_r+0x78>
 802adde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ade0:	07dc      	lsls	r4, r3, #31
 802ade2:	d50e      	bpl.n	802ae02 <_vfiprintf_r+0x6a>
 802ade4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802ade8:	b01d      	add	sp, #116	; 0x74
 802adea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802adee:	4b7b      	ldr	r3, [pc, #492]	; (802afdc <_vfiprintf_r+0x244>)
 802adf0:	429d      	cmp	r5, r3
 802adf2:	d101      	bne.n	802adf8 <_vfiprintf_r+0x60>
 802adf4:	68b5      	ldr	r5, [r6, #8]
 802adf6:	e7df      	b.n	802adb8 <_vfiprintf_r+0x20>
 802adf8:	4b79      	ldr	r3, [pc, #484]	; (802afe0 <_vfiprintf_r+0x248>)
 802adfa:	429d      	cmp	r5, r3
 802adfc:	bf08      	it	eq
 802adfe:	68f5      	ldreq	r5, [r6, #12]
 802ae00:	e7da      	b.n	802adb8 <_vfiprintf_r+0x20>
 802ae02:	89ab      	ldrh	r3, [r5, #12]
 802ae04:	0598      	lsls	r0, r3, #22
 802ae06:	d4ed      	bmi.n	802ade4 <_vfiprintf_r+0x4c>
 802ae08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ae0a:	f7fb fbad 	bl	8026568 <__retarget_lock_release_recursive>
 802ae0e:	e7e9      	b.n	802ade4 <_vfiprintf_r+0x4c>
 802ae10:	2300      	movs	r3, #0
 802ae12:	9309      	str	r3, [sp, #36]	; 0x24
 802ae14:	2320      	movs	r3, #32
 802ae16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ae1a:	f8cd 800c 	str.w	r8, [sp, #12]
 802ae1e:	2330      	movs	r3, #48	; 0x30
 802ae20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802afe4 <_vfiprintf_r+0x24c>
 802ae24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802ae28:	f04f 0901 	mov.w	r9, #1
 802ae2c:	4623      	mov	r3, r4
 802ae2e:	469a      	mov	sl, r3
 802ae30:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ae34:	b10a      	cbz	r2, 802ae3a <_vfiprintf_r+0xa2>
 802ae36:	2a25      	cmp	r2, #37	; 0x25
 802ae38:	d1f9      	bne.n	802ae2e <_vfiprintf_r+0x96>
 802ae3a:	ebba 0b04 	subs.w	fp, sl, r4
 802ae3e:	d00b      	beq.n	802ae58 <_vfiprintf_r+0xc0>
 802ae40:	465b      	mov	r3, fp
 802ae42:	4622      	mov	r2, r4
 802ae44:	4629      	mov	r1, r5
 802ae46:	4630      	mov	r0, r6
 802ae48:	f7ff ff93 	bl	802ad72 <__sfputs_r>
 802ae4c:	3001      	adds	r0, #1
 802ae4e:	f000 80aa 	beq.w	802afa6 <_vfiprintf_r+0x20e>
 802ae52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802ae54:	445a      	add	r2, fp
 802ae56:	9209      	str	r2, [sp, #36]	; 0x24
 802ae58:	f89a 3000 	ldrb.w	r3, [sl]
 802ae5c:	2b00      	cmp	r3, #0
 802ae5e:	f000 80a2 	beq.w	802afa6 <_vfiprintf_r+0x20e>
 802ae62:	2300      	movs	r3, #0
 802ae64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802ae68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ae6c:	f10a 0a01 	add.w	sl, sl, #1
 802ae70:	9304      	str	r3, [sp, #16]
 802ae72:	9307      	str	r3, [sp, #28]
 802ae74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802ae78:	931a      	str	r3, [sp, #104]	; 0x68
 802ae7a:	4654      	mov	r4, sl
 802ae7c:	2205      	movs	r2, #5
 802ae7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ae82:	4858      	ldr	r0, [pc, #352]	; (802afe4 <_vfiprintf_r+0x24c>)
 802ae84:	f7d5 f9bc 	bl	8000200 <memchr>
 802ae88:	9a04      	ldr	r2, [sp, #16]
 802ae8a:	b9d8      	cbnz	r0, 802aec4 <_vfiprintf_r+0x12c>
 802ae8c:	06d1      	lsls	r1, r2, #27
 802ae8e:	bf44      	itt	mi
 802ae90:	2320      	movmi	r3, #32
 802ae92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802ae96:	0713      	lsls	r3, r2, #28
 802ae98:	bf44      	itt	mi
 802ae9a:	232b      	movmi	r3, #43	; 0x2b
 802ae9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802aea0:	f89a 3000 	ldrb.w	r3, [sl]
 802aea4:	2b2a      	cmp	r3, #42	; 0x2a
 802aea6:	d015      	beq.n	802aed4 <_vfiprintf_r+0x13c>
 802aea8:	9a07      	ldr	r2, [sp, #28]
 802aeaa:	4654      	mov	r4, sl
 802aeac:	2000      	movs	r0, #0
 802aeae:	f04f 0c0a 	mov.w	ip, #10
 802aeb2:	4621      	mov	r1, r4
 802aeb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 802aeb8:	3b30      	subs	r3, #48	; 0x30
 802aeba:	2b09      	cmp	r3, #9
 802aebc:	d94e      	bls.n	802af5c <_vfiprintf_r+0x1c4>
 802aebe:	b1b0      	cbz	r0, 802aeee <_vfiprintf_r+0x156>
 802aec0:	9207      	str	r2, [sp, #28]
 802aec2:	e014      	b.n	802aeee <_vfiprintf_r+0x156>
 802aec4:	eba0 0308 	sub.w	r3, r0, r8
 802aec8:	fa09 f303 	lsl.w	r3, r9, r3
 802aecc:	4313      	orrs	r3, r2
 802aece:	9304      	str	r3, [sp, #16]
 802aed0:	46a2      	mov	sl, r4
 802aed2:	e7d2      	b.n	802ae7a <_vfiprintf_r+0xe2>
 802aed4:	9b03      	ldr	r3, [sp, #12]
 802aed6:	1d19      	adds	r1, r3, #4
 802aed8:	681b      	ldr	r3, [r3, #0]
 802aeda:	9103      	str	r1, [sp, #12]
 802aedc:	2b00      	cmp	r3, #0
 802aede:	bfbb      	ittet	lt
 802aee0:	425b      	neglt	r3, r3
 802aee2:	f042 0202 	orrlt.w	r2, r2, #2
 802aee6:	9307      	strge	r3, [sp, #28]
 802aee8:	9307      	strlt	r3, [sp, #28]
 802aeea:	bfb8      	it	lt
 802aeec:	9204      	strlt	r2, [sp, #16]
 802aeee:	7823      	ldrb	r3, [r4, #0]
 802aef0:	2b2e      	cmp	r3, #46	; 0x2e
 802aef2:	d10c      	bne.n	802af0e <_vfiprintf_r+0x176>
 802aef4:	7863      	ldrb	r3, [r4, #1]
 802aef6:	2b2a      	cmp	r3, #42	; 0x2a
 802aef8:	d135      	bne.n	802af66 <_vfiprintf_r+0x1ce>
 802aefa:	9b03      	ldr	r3, [sp, #12]
 802aefc:	1d1a      	adds	r2, r3, #4
 802aefe:	681b      	ldr	r3, [r3, #0]
 802af00:	9203      	str	r2, [sp, #12]
 802af02:	2b00      	cmp	r3, #0
 802af04:	bfb8      	it	lt
 802af06:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802af0a:	3402      	adds	r4, #2
 802af0c:	9305      	str	r3, [sp, #20]
 802af0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802aff4 <_vfiprintf_r+0x25c>
 802af12:	7821      	ldrb	r1, [r4, #0]
 802af14:	2203      	movs	r2, #3
 802af16:	4650      	mov	r0, sl
 802af18:	f7d5 f972 	bl	8000200 <memchr>
 802af1c:	b140      	cbz	r0, 802af30 <_vfiprintf_r+0x198>
 802af1e:	2340      	movs	r3, #64	; 0x40
 802af20:	eba0 000a 	sub.w	r0, r0, sl
 802af24:	fa03 f000 	lsl.w	r0, r3, r0
 802af28:	9b04      	ldr	r3, [sp, #16]
 802af2a:	4303      	orrs	r3, r0
 802af2c:	3401      	adds	r4, #1
 802af2e:	9304      	str	r3, [sp, #16]
 802af30:	f814 1b01 	ldrb.w	r1, [r4], #1
 802af34:	482c      	ldr	r0, [pc, #176]	; (802afe8 <_vfiprintf_r+0x250>)
 802af36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802af3a:	2206      	movs	r2, #6
 802af3c:	f7d5 f960 	bl	8000200 <memchr>
 802af40:	2800      	cmp	r0, #0
 802af42:	d03f      	beq.n	802afc4 <_vfiprintf_r+0x22c>
 802af44:	4b29      	ldr	r3, [pc, #164]	; (802afec <_vfiprintf_r+0x254>)
 802af46:	bb1b      	cbnz	r3, 802af90 <_vfiprintf_r+0x1f8>
 802af48:	9b03      	ldr	r3, [sp, #12]
 802af4a:	3307      	adds	r3, #7
 802af4c:	f023 0307 	bic.w	r3, r3, #7
 802af50:	3308      	adds	r3, #8
 802af52:	9303      	str	r3, [sp, #12]
 802af54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802af56:	443b      	add	r3, r7
 802af58:	9309      	str	r3, [sp, #36]	; 0x24
 802af5a:	e767      	b.n	802ae2c <_vfiprintf_r+0x94>
 802af5c:	fb0c 3202 	mla	r2, ip, r2, r3
 802af60:	460c      	mov	r4, r1
 802af62:	2001      	movs	r0, #1
 802af64:	e7a5      	b.n	802aeb2 <_vfiprintf_r+0x11a>
 802af66:	2300      	movs	r3, #0
 802af68:	3401      	adds	r4, #1
 802af6a:	9305      	str	r3, [sp, #20]
 802af6c:	4619      	mov	r1, r3
 802af6e:	f04f 0c0a 	mov.w	ip, #10
 802af72:	4620      	mov	r0, r4
 802af74:	f810 2b01 	ldrb.w	r2, [r0], #1
 802af78:	3a30      	subs	r2, #48	; 0x30
 802af7a:	2a09      	cmp	r2, #9
 802af7c:	d903      	bls.n	802af86 <_vfiprintf_r+0x1ee>
 802af7e:	2b00      	cmp	r3, #0
 802af80:	d0c5      	beq.n	802af0e <_vfiprintf_r+0x176>
 802af82:	9105      	str	r1, [sp, #20]
 802af84:	e7c3      	b.n	802af0e <_vfiprintf_r+0x176>
 802af86:	fb0c 2101 	mla	r1, ip, r1, r2
 802af8a:	4604      	mov	r4, r0
 802af8c:	2301      	movs	r3, #1
 802af8e:	e7f0      	b.n	802af72 <_vfiprintf_r+0x1da>
 802af90:	ab03      	add	r3, sp, #12
 802af92:	9300      	str	r3, [sp, #0]
 802af94:	462a      	mov	r2, r5
 802af96:	4b16      	ldr	r3, [pc, #88]	; (802aff0 <_vfiprintf_r+0x258>)
 802af98:	a904      	add	r1, sp, #16
 802af9a:	4630      	mov	r0, r6
 802af9c:	f3af 8000 	nop.w
 802afa0:	4607      	mov	r7, r0
 802afa2:	1c78      	adds	r0, r7, #1
 802afa4:	d1d6      	bne.n	802af54 <_vfiprintf_r+0x1bc>
 802afa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802afa8:	07d9      	lsls	r1, r3, #31
 802afaa:	d405      	bmi.n	802afb8 <_vfiprintf_r+0x220>
 802afac:	89ab      	ldrh	r3, [r5, #12]
 802afae:	059a      	lsls	r2, r3, #22
 802afb0:	d402      	bmi.n	802afb8 <_vfiprintf_r+0x220>
 802afb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802afb4:	f7fb fad8 	bl	8026568 <__retarget_lock_release_recursive>
 802afb8:	89ab      	ldrh	r3, [r5, #12]
 802afba:	065b      	lsls	r3, r3, #25
 802afbc:	f53f af12 	bmi.w	802ade4 <_vfiprintf_r+0x4c>
 802afc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 802afc2:	e711      	b.n	802ade8 <_vfiprintf_r+0x50>
 802afc4:	ab03      	add	r3, sp, #12
 802afc6:	9300      	str	r3, [sp, #0]
 802afc8:	462a      	mov	r2, r5
 802afca:	4b09      	ldr	r3, [pc, #36]	; (802aff0 <_vfiprintf_r+0x258>)
 802afcc:	a904      	add	r1, sp, #16
 802afce:	4630      	mov	r0, r6
 802afd0:	f000 f880 	bl	802b0d4 <_printf_i>
 802afd4:	e7e4      	b.n	802afa0 <_vfiprintf_r+0x208>
 802afd6:	bf00      	nop
 802afd8:	08060a24 	.word	0x08060a24
 802afdc:	08060a44 	.word	0x08060a44
 802afe0:	08060a04 	.word	0x08060a04
 802afe4:	08061144 	.word	0x08061144
 802afe8:	0806114e 	.word	0x0806114e
 802afec:	00000000 	.word	0x00000000
 802aff0:	0802ad73 	.word	0x0802ad73
 802aff4:	0806114a 	.word	0x0806114a

0802aff8 <_printf_common>:
 802aff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802affc:	4616      	mov	r6, r2
 802affe:	4699      	mov	r9, r3
 802b000:	688a      	ldr	r2, [r1, #8]
 802b002:	690b      	ldr	r3, [r1, #16]
 802b004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802b008:	4293      	cmp	r3, r2
 802b00a:	bfb8      	it	lt
 802b00c:	4613      	movlt	r3, r2
 802b00e:	6033      	str	r3, [r6, #0]
 802b010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802b014:	4607      	mov	r7, r0
 802b016:	460c      	mov	r4, r1
 802b018:	b10a      	cbz	r2, 802b01e <_printf_common+0x26>
 802b01a:	3301      	adds	r3, #1
 802b01c:	6033      	str	r3, [r6, #0]
 802b01e:	6823      	ldr	r3, [r4, #0]
 802b020:	0699      	lsls	r1, r3, #26
 802b022:	bf42      	ittt	mi
 802b024:	6833      	ldrmi	r3, [r6, #0]
 802b026:	3302      	addmi	r3, #2
 802b028:	6033      	strmi	r3, [r6, #0]
 802b02a:	6825      	ldr	r5, [r4, #0]
 802b02c:	f015 0506 	ands.w	r5, r5, #6
 802b030:	d106      	bne.n	802b040 <_printf_common+0x48>
 802b032:	f104 0a19 	add.w	sl, r4, #25
 802b036:	68e3      	ldr	r3, [r4, #12]
 802b038:	6832      	ldr	r2, [r6, #0]
 802b03a:	1a9b      	subs	r3, r3, r2
 802b03c:	42ab      	cmp	r3, r5
 802b03e:	dc26      	bgt.n	802b08e <_printf_common+0x96>
 802b040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802b044:	1e13      	subs	r3, r2, #0
 802b046:	6822      	ldr	r2, [r4, #0]
 802b048:	bf18      	it	ne
 802b04a:	2301      	movne	r3, #1
 802b04c:	0692      	lsls	r2, r2, #26
 802b04e:	d42b      	bmi.n	802b0a8 <_printf_common+0xb0>
 802b050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802b054:	4649      	mov	r1, r9
 802b056:	4638      	mov	r0, r7
 802b058:	47c0      	blx	r8
 802b05a:	3001      	adds	r0, #1
 802b05c:	d01e      	beq.n	802b09c <_printf_common+0xa4>
 802b05e:	6823      	ldr	r3, [r4, #0]
 802b060:	68e5      	ldr	r5, [r4, #12]
 802b062:	6832      	ldr	r2, [r6, #0]
 802b064:	f003 0306 	and.w	r3, r3, #6
 802b068:	2b04      	cmp	r3, #4
 802b06a:	bf08      	it	eq
 802b06c:	1aad      	subeq	r5, r5, r2
 802b06e:	68a3      	ldr	r3, [r4, #8]
 802b070:	6922      	ldr	r2, [r4, #16]
 802b072:	bf0c      	ite	eq
 802b074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b078:	2500      	movne	r5, #0
 802b07a:	4293      	cmp	r3, r2
 802b07c:	bfc4      	itt	gt
 802b07e:	1a9b      	subgt	r3, r3, r2
 802b080:	18ed      	addgt	r5, r5, r3
 802b082:	2600      	movs	r6, #0
 802b084:	341a      	adds	r4, #26
 802b086:	42b5      	cmp	r5, r6
 802b088:	d11a      	bne.n	802b0c0 <_printf_common+0xc8>
 802b08a:	2000      	movs	r0, #0
 802b08c:	e008      	b.n	802b0a0 <_printf_common+0xa8>
 802b08e:	2301      	movs	r3, #1
 802b090:	4652      	mov	r2, sl
 802b092:	4649      	mov	r1, r9
 802b094:	4638      	mov	r0, r7
 802b096:	47c0      	blx	r8
 802b098:	3001      	adds	r0, #1
 802b09a:	d103      	bne.n	802b0a4 <_printf_common+0xac>
 802b09c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b0a4:	3501      	adds	r5, #1
 802b0a6:	e7c6      	b.n	802b036 <_printf_common+0x3e>
 802b0a8:	18e1      	adds	r1, r4, r3
 802b0aa:	1c5a      	adds	r2, r3, #1
 802b0ac:	2030      	movs	r0, #48	; 0x30
 802b0ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802b0b2:	4422      	add	r2, r4
 802b0b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802b0b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802b0bc:	3302      	adds	r3, #2
 802b0be:	e7c7      	b.n	802b050 <_printf_common+0x58>
 802b0c0:	2301      	movs	r3, #1
 802b0c2:	4622      	mov	r2, r4
 802b0c4:	4649      	mov	r1, r9
 802b0c6:	4638      	mov	r0, r7
 802b0c8:	47c0      	blx	r8
 802b0ca:	3001      	adds	r0, #1
 802b0cc:	d0e6      	beq.n	802b09c <_printf_common+0xa4>
 802b0ce:	3601      	adds	r6, #1
 802b0d0:	e7d9      	b.n	802b086 <_printf_common+0x8e>
	...

0802b0d4 <_printf_i>:
 802b0d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802b0d8:	460c      	mov	r4, r1
 802b0da:	4691      	mov	r9, r2
 802b0dc:	7e27      	ldrb	r7, [r4, #24]
 802b0de:	990c      	ldr	r1, [sp, #48]	; 0x30
 802b0e0:	2f78      	cmp	r7, #120	; 0x78
 802b0e2:	4680      	mov	r8, r0
 802b0e4:	469a      	mov	sl, r3
 802b0e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802b0ea:	d807      	bhi.n	802b0fc <_printf_i+0x28>
 802b0ec:	2f62      	cmp	r7, #98	; 0x62
 802b0ee:	d80a      	bhi.n	802b106 <_printf_i+0x32>
 802b0f0:	2f00      	cmp	r7, #0
 802b0f2:	f000 80d8 	beq.w	802b2a6 <_printf_i+0x1d2>
 802b0f6:	2f58      	cmp	r7, #88	; 0x58
 802b0f8:	f000 80a3 	beq.w	802b242 <_printf_i+0x16e>
 802b0fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802b100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802b104:	e03a      	b.n	802b17c <_printf_i+0xa8>
 802b106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802b10a:	2b15      	cmp	r3, #21
 802b10c:	d8f6      	bhi.n	802b0fc <_printf_i+0x28>
 802b10e:	a001      	add	r0, pc, #4	; (adr r0, 802b114 <_printf_i+0x40>)
 802b110:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802b114:	0802b16d 	.word	0x0802b16d
 802b118:	0802b181 	.word	0x0802b181
 802b11c:	0802b0fd 	.word	0x0802b0fd
 802b120:	0802b0fd 	.word	0x0802b0fd
 802b124:	0802b0fd 	.word	0x0802b0fd
 802b128:	0802b0fd 	.word	0x0802b0fd
 802b12c:	0802b181 	.word	0x0802b181
 802b130:	0802b0fd 	.word	0x0802b0fd
 802b134:	0802b0fd 	.word	0x0802b0fd
 802b138:	0802b0fd 	.word	0x0802b0fd
 802b13c:	0802b0fd 	.word	0x0802b0fd
 802b140:	0802b28d 	.word	0x0802b28d
 802b144:	0802b1b1 	.word	0x0802b1b1
 802b148:	0802b26f 	.word	0x0802b26f
 802b14c:	0802b0fd 	.word	0x0802b0fd
 802b150:	0802b0fd 	.word	0x0802b0fd
 802b154:	0802b2af 	.word	0x0802b2af
 802b158:	0802b0fd 	.word	0x0802b0fd
 802b15c:	0802b1b1 	.word	0x0802b1b1
 802b160:	0802b0fd 	.word	0x0802b0fd
 802b164:	0802b0fd 	.word	0x0802b0fd
 802b168:	0802b277 	.word	0x0802b277
 802b16c:	680b      	ldr	r3, [r1, #0]
 802b16e:	1d1a      	adds	r2, r3, #4
 802b170:	681b      	ldr	r3, [r3, #0]
 802b172:	600a      	str	r2, [r1, #0]
 802b174:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802b178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802b17c:	2301      	movs	r3, #1
 802b17e:	e0a3      	b.n	802b2c8 <_printf_i+0x1f4>
 802b180:	6825      	ldr	r5, [r4, #0]
 802b182:	6808      	ldr	r0, [r1, #0]
 802b184:	062e      	lsls	r6, r5, #24
 802b186:	f100 0304 	add.w	r3, r0, #4
 802b18a:	d50a      	bpl.n	802b1a2 <_printf_i+0xce>
 802b18c:	6805      	ldr	r5, [r0, #0]
 802b18e:	600b      	str	r3, [r1, #0]
 802b190:	2d00      	cmp	r5, #0
 802b192:	da03      	bge.n	802b19c <_printf_i+0xc8>
 802b194:	232d      	movs	r3, #45	; 0x2d
 802b196:	426d      	negs	r5, r5
 802b198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b19c:	485e      	ldr	r0, [pc, #376]	; (802b318 <_printf_i+0x244>)
 802b19e:	230a      	movs	r3, #10
 802b1a0:	e019      	b.n	802b1d6 <_printf_i+0x102>
 802b1a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 802b1a6:	6805      	ldr	r5, [r0, #0]
 802b1a8:	600b      	str	r3, [r1, #0]
 802b1aa:	bf18      	it	ne
 802b1ac:	b22d      	sxthne	r5, r5
 802b1ae:	e7ef      	b.n	802b190 <_printf_i+0xbc>
 802b1b0:	680b      	ldr	r3, [r1, #0]
 802b1b2:	6825      	ldr	r5, [r4, #0]
 802b1b4:	1d18      	adds	r0, r3, #4
 802b1b6:	6008      	str	r0, [r1, #0]
 802b1b8:	0628      	lsls	r0, r5, #24
 802b1ba:	d501      	bpl.n	802b1c0 <_printf_i+0xec>
 802b1bc:	681d      	ldr	r5, [r3, #0]
 802b1be:	e002      	b.n	802b1c6 <_printf_i+0xf2>
 802b1c0:	0669      	lsls	r1, r5, #25
 802b1c2:	d5fb      	bpl.n	802b1bc <_printf_i+0xe8>
 802b1c4:	881d      	ldrh	r5, [r3, #0]
 802b1c6:	4854      	ldr	r0, [pc, #336]	; (802b318 <_printf_i+0x244>)
 802b1c8:	2f6f      	cmp	r7, #111	; 0x6f
 802b1ca:	bf0c      	ite	eq
 802b1cc:	2308      	moveq	r3, #8
 802b1ce:	230a      	movne	r3, #10
 802b1d0:	2100      	movs	r1, #0
 802b1d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802b1d6:	6866      	ldr	r6, [r4, #4]
 802b1d8:	60a6      	str	r6, [r4, #8]
 802b1da:	2e00      	cmp	r6, #0
 802b1dc:	bfa2      	ittt	ge
 802b1de:	6821      	ldrge	r1, [r4, #0]
 802b1e0:	f021 0104 	bicge.w	r1, r1, #4
 802b1e4:	6021      	strge	r1, [r4, #0]
 802b1e6:	b90d      	cbnz	r5, 802b1ec <_printf_i+0x118>
 802b1e8:	2e00      	cmp	r6, #0
 802b1ea:	d04d      	beq.n	802b288 <_printf_i+0x1b4>
 802b1ec:	4616      	mov	r6, r2
 802b1ee:	fbb5 f1f3 	udiv	r1, r5, r3
 802b1f2:	fb03 5711 	mls	r7, r3, r1, r5
 802b1f6:	5dc7      	ldrb	r7, [r0, r7]
 802b1f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802b1fc:	462f      	mov	r7, r5
 802b1fe:	42bb      	cmp	r3, r7
 802b200:	460d      	mov	r5, r1
 802b202:	d9f4      	bls.n	802b1ee <_printf_i+0x11a>
 802b204:	2b08      	cmp	r3, #8
 802b206:	d10b      	bne.n	802b220 <_printf_i+0x14c>
 802b208:	6823      	ldr	r3, [r4, #0]
 802b20a:	07df      	lsls	r7, r3, #31
 802b20c:	d508      	bpl.n	802b220 <_printf_i+0x14c>
 802b20e:	6923      	ldr	r3, [r4, #16]
 802b210:	6861      	ldr	r1, [r4, #4]
 802b212:	4299      	cmp	r1, r3
 802b214:	bfde      	ittt	le
 802b216:	2330      	movle	r3, #48	; 0x30
 802b218:	f806 3c01 	strble.w	r3, [r6, #-1]
 802b21c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 802b220:	1b92      	subs	r2, r2, r6
 802b222:	6122      	str	r2, [r4, #16]
 802b224:	f8cd a000 	str.w	sl, [sp]
 802b228:	464b      	mov	r3, r9
 802b22a:	aa03      	add	r2, sp, #12
 802b22c:	4621      	mov	r1, r4
 802b22e:	4640      	mov	r0, r8
 802b230:	f7ff fee2 	bl	802aff8 <_printf_common>
 802b234:	3001      	adds	r0, #1
 802b236:	d14c      	bne.n	802b2d2 <_printf_i+0x1fe>
 802b238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b23c:	b004      	add	sp, #16
 802b23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b242:	4835      	ldr	r0, [pc, #212]	; (802b318 <_printf_i+0x244>)
 802b244:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802b248:	6823      	ldr	r3, [r4, #0]
 802b24a:	680e      	ldr	r6, [r1, #0]
 802b24c:	061f      	lsls	r7, r3, #24
 802b24e:	f856 5b04 	ldr.w	r5, [r6], #4
 802b252:	600e      	str	r6, [r1, #0]
 802b254:	d514      	bpl.n	802b280 <_printf_i+0x1ac>
 802b256:	07d9      	lsls	r1, r3, #31
 802b258:	bf44      	itt	mi
 802b25a:	f043 0320 	orrmi.w	r3, r3, #32
 802b25e:	6023      	strmi	r3, [r4, #0]
 802b260:	b91d      	cbnz	r5, 802b26a <_printf_i+0x196>
 802b262:	6823      	ldr	r3, [r4, #0]
 802b264:	f023 0320 	bic.w	r3, r3, #32
 802b268:	6023      	str	r3, [r4, #0]
 802b26a:	2310      	movs	r3, #16
 802b26c:	e7b0      	b.n	802b1d0 <_printf_i+0xfc>
 802b26e:	6823      	ldr	r3, [r4, #0]
 802b270:	f043 0320 	orr.w	r3, r3, #32
 802b274:	6023      	str	r3, [r4, #0]
 802b276:	2378      	movs	r3, #120	; 0x78
 802b278:	4828      	ldr	r0, [pc, #160]	; (802b31c <_printf_i+0x248>)
 802b27a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802b27e:	e7e3      	b.n	802b248 <_printf_i+0x174>
 802b280:	065e      	lsls	r6, r3, #25
 802b282:	bf48      	it	mi
 802b284:	b2ad      	uxthmi	r5, r5
 802b286:	e7e6      	b.n	802b256 <_printf_i+0x182>
 802b288:	4616      	mov	r6, r2
 802b28a:	e7bb      	b.n	802b204 <_printf_i+0x130>
 802b28c:	680b      	ldr	r3, [r1, #0]
 802b28e:	6826      	ldr	r6, [r4, #0]
 802b290:	6960      	ldr	r0, [r4, #20]
 802b292:	1d1d      	adds	r5, r3, #4
 802b294:	600d      	str	r5, [r1, #0]
 802b296:	0635      	lsls	r5, r6, #24
 802b298:	681b      	ldr	r3, [r3, #0]
 802b29a:	d501      	bpl.n	802b2a0 <_printf_i+0x1cc>
 802b29c:	6018      	str	r0, [r3, #0]
 802b29e:	e002      	b.n	802b2a6 <_printf_i+0x1d2>
 802b2a0:	0671      	lsls	r1, r6, #25
 802b2a2:	d5fb      	bpl.n	802b29c <_printf_i+0x1c8>
 802b2a4:	8018      	strh	r0, [r3, #0]
 802b2a6:	2300      	movs	r3, #0
 802b2a8:	6123      	str	r3, [r4, #16]
 802b2aa:	4616      	mov	r6, r2
 802b2ac:	e7ba      	b.n	802b224 <_printf_i+0x150>
 802b2ae:	680b      	ldr	r3, [r1, #0]
 802b2b0:	1d1a      	adds	r2, r3, #4
 802b2b2:	600a      	str	r2, [r1, #0]
 802b2b4:	681e      	ldr	r6, [r3, #0]
 802b2b6:	6862      	ldr	r2, [r4, #4]
 802b2b8:	2100      	movs	r1, #0
 802b2ba:	4630      	mov	r0, r6
 802b2bc:	f7d4 ffa0 	bl	8000200 <memchr>
 802b2c0:	b108      	cbz	r0, 802b2c6 <_printf_i+0x1f2>
 802b2c2:	1b80      	subs	r0, r0, r6
 802b2c4:	6060      	str	r0, [r4, #4]
 802b2c6:	6863      	ldr	r3, [r4, #4]
 802b2c8:	6123      	str	r3, [r4, #16]
 802b2ca:	2300      	movs	r3, #0
 802b2cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b2d0:	e7a8      	b.n	802b224 <_printf_i+0x150>
 802b2d2:	6923      	ldr	r3, [r4, #16]
 802b2d4:	4632      	mov	r2, r6
 802b2d6:	4649      	mov	r1, r9
 802b2d8:	4640      	mov	r0, r8
 802b2da:	47d0      	blx	sl
 802b2dc:	3001      	adds	r0, #1
 802b2de:	d0ab      	beq.n	802b238 <_printf_i+0x164>
 802b2e0:	6823      	ldr	r3, [r4, #0]
 802b2e2:	079b      	lsls	r3, r3, #30
 802b2e4:	d413      	bmi.n	802b30e <_printf_i+0x23a>
 802b2e6:	68e0      	ldr	r0, [r4, #12]
 802b2e8:	9b03      	ldr	r3, [sp, #12]
 802b2ea:	4298      	cmp	r0, r3
 802b2ec:	bfb8      	it	lt
 802b2ee:	4618      	movlt	r0, r3
 802b2f0:	e7a4      	b.n	802b23c <_printf_i+0x168>
 802b2f2:	2301      	movs	r3, #1
 802b2f4:	4632      	mov	r2, r6
 802b2f6:	4649      	mov	r1, r9
 802b2f8:	4640      	mov	r0, r8
 802b2fa:	47d0      	blx	sl
 802b2fc:	3001      	adds	r0, #1
 802b2fe:	d09b      	beq.n	802b238 <_printf_i+0x164>
 802b300:	3501      	adds	r5, #1
 802b302:	68e3      	ldr	r3, [r4, #12]
 802b304:	9903      	ldr	r1, [sp, #12]
 802b306:	1a5b      	subs	r3, r3, r1
 802b308:	42ab      	cmp	r3, r5
 802b30a:	dcf2      	bgt.n	802b2f2 <_printf_i+0x21e>
 802b30c:	e7eb      	b.n	802b2e6 <_printf_i+0x212>
 802b30e:	2500      	movs	r5, #0
 802b310:	f104 0619 	add.w	r6, r4, #25
 802b314:	e7f5      	b.n	802b302 <_printf_i+0x22e>
 802b316:	bf00      	nop
 802b318:	08061155 	.word	0x08061155
 802b31c:	08061166 	.word	0x08061166

0802b320 <_scanf_chars>:
 802b320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b324:	4615      	mov	r5, r2
 802b326:	688a      	ldr	r2, [r1, #8]
 802b328:	4680      	mov	r8, r0
 802b32a:	460c      	mov	r4, r1
 802b32c:	b932      	cbnz	r2, 802b33c <_scanf_chars+0x1c>
 802b32e:	698a      	ldr	r2, [r1, #24]
 802b330:	2a00      	cmp	r2, #0
 802b332:	bf0c      	ite	eq
 802b334:	2201      	moveq	r2, #1
 802b336:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 802b33a:	608a      	str	r2, [r1, #8]
 802b33c:	6822      	ldr	r2, [r4, #0]
 802b33e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 802b3cc <_scanf_chars+0xac>
 802b342:	06d1      	lsls	r1, r2, #27
 802b344:	bf5f      	itttt	pl
 802b346:	681a      	ldrpl	r2, [r3, #0]
 802b348:	1d11      	addpl	r1, r2, #4
 802b34a:	6019      	strpl	r1, [r3, #0]
 802b34c:	6816      	ldrpl	r6, [r2, #0]
 802b34e:	2700      	movs	r7, #0
 802b350:	69a0      	ldr	r0, [r4, #24]
 802b352:	b188      	cbz	r0, 802b378 <_scanf_chars+0x58>
 802b354:	2801      	cmp	r0, #1
 802b356:	d107      	bne.n	802b368 <_scanf_chars+0x48>
 802b358:	682b      	ldr	r3, [r5, #0]
 802b35a:	781a      	ldrb	r2, [r3, #0]
 802b35c:	6963      	ldr	r3, [r4, #20]
 802b35e:	5c9b      	ldrb	r3, [r3, r2]
 802b360:	b953      	cbnz	r3, 802b378 <_scanf_chars+0x58>
 802b362:	bb27      	cbnz	r7, 802b3ae <_scanf_chars+0x8e>
 802b364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b368:	2802      	cmp	r0, #2
 802b36a:	d120      	bne.n	802b3ae <_scanf_chars+0x8e>
 802b36c:	682b      	ldr	r3, [r5, #0]
 802b36e:	781b      	ldrb	r3, [r3, #0]
 802b370:	f813 3009 	ldrb.w	r3, [r3, r9]
 802b374:	071b      	lsls	r3, r3, #28
 802b376:	d41a      	bmi.n	802b3ae <_scanf_chars+0x8e>
 802b378:	6823      	ldr	r3, [r4, #0]
 802b37a:	06da      	lsls	r2, r3, #27
 802b37c:	bf5e      	ittt	pl
 802b37e:	682b      	ldrpl	r3, [r5, #0]
 802b380:	781b      	ldrbpl	r3, [r3, #0]
 802b382:	f806 3b01 	strbpl.w	r3, [r6], #1
 802b386:	682a      	ldr	r2, [r5, #0]
 802b388:	686b      	ldr	r3, [r5, #4]
 802b38a:	3201      	adds	r2, #1
 802b38c:	602a      	str	r2, [r5, #0]
 802b38e:	68a2      	ldr	r2, [r4, #8]
 802b390:	3b01      	subs	r3, #1
 802b392:	3a01      	subs	r2, #1
 802b394:	606b      	str	r3, [r5, #4]
 802b396:	3701      	adds	r7, #1
 802b398:	60a2      	str	r2, [r4, #8]
 802b39a:	b142      	cbz	r2, 802b3ae <_scanf_chars+0x8e>
 802b39c:	2b00      	cmp	r3, #0
 802b39e:	dcd7      	bgt.n	802b350 <_scanf_chars+0x30>
 802b3a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802b3a4:	4629      	mov	r1, r5
 802b3a6:	4640      	mov	r0, r8
 802b3a8:	4798      	blx	r3
 802b3aa:	2800      	cmp	r0, #0
 802b3ac:	d0d0      	beq.n	802b350 <_scanf_chars+0x30>
 802b3ae:	6823      	ldr	r3, [r4, #0]
 802b3b0:	f013 0310 	ands.w	r3, r3, #16
 802b3b4:	d105      	bne.n	802b3c2 <_scanf_chars+0xa2>
 802b3b6:	68e2      	ldr	r2, [r4, #12]
 802b3b8:	3201      	adds	r2, #1
 802b3ba:	60e2      	str	r2, [r4, #12]
 802b3bc:	69a2      	ldr	r2, [r4, #24]
 802b3be:	b102      	cbz	r2, 802b3c2 <_scanf_chars+0xa2>
 802b3c0:	7033      	strb	r3, [r6, #0]
 802b3c2:	6923      	ldr	r3, [r4, #16]
 802b3c4:	441f      	add	r7, r3
 802b3c6:	6127      	str	r7, [r4, #16]
 802b3c8:	2000      	movs	r0, #0
 802b3ca:	e7cb      	b.n	802b364 <_scanf_chars+0x44>
 802b3cc:	08060901 	.word	0x08060901

0802b3d0 <_scanf_i>:
 802b3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b3d4:	4698      	mov	r8, r3
 802b3d6:	4b74      	ldr	r3, [pc, #464]	; (802b5a8 <_scanf_i+0x1d8>)
 802b3d8:	460c      	mov	r4, r1
 802b3da:	4682      	mov	sl, r0
 802b3dc:	4616      	mov	r6, r2
 802b3de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802b3e2:	b087      	sub	sp, #28
 802b3e4:	ab03      	add	r3, sp, #12
 802b3e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802b3ea:	4b70      	ldr	r3, [pc, #448]	; (802b5ac <_scanf_i+0x1dc>)
 802b3ec:	69a1      	ldr	r1, [r4, #24]
 802b3ee:	4a70      	ldr	r2, [pc, #448]	; (802b5b0 <_scanf_i+0x1e0>)
 802b3f0:	2903      	cmp	r1, #3
 802b3f2:	bf18      	it	ne
 802b3f4:	461a      	movne	r2, r3
 802b3f6:	68a3      	ldr	r3, [r4, #8]
 802b3f8:	9201      	str	r2, [sp, #4]
 802b3fa:	1e5a      	subs	r2, r3, #1
 802b3fc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802b400:	bf88      	it	hi
 802b402:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802b406:	4627      	mov	r7, r4
 802b408:	bf82      	ittt	hi
 802b40a:	eb03 0905 	addhi.w	r9, r3, r5
 802b40e:	f240 135d 	movwhi	r3, #349	; 0x15d
 802b412:	60a3      	strhi	r3, [r4, #8]
 802b414:	f857 3b1c 	ldr.w	r3, [r7], #28
 802b418:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802b41c:	bf98      	it	ls
 802b41e:	f04f 0900 	movls.w	r9, #0
 802b422:	6023      	str	r3, [r4, #0]
 802b424:	463d      	mov	r5, r7
 802b426:	f04f 0b00 	mov.w	fp, #0
 802b42a:	6831      	ldr	r1, [r6, #0]
 802b42c:	ab03      	add	r3, sp, #12
 802b42e:	7809      	ldrb	r1, [r1, #0]
 802b430:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802b434:	2202      	movs	r2, #2
 802b436:	f7d4 fee3 	bl	8000200 <memchr>
 802b43a:	b328      	cbz	r0, 802b488 <_scanf_i+0xb8>
 802b43c:	f1bb 0f01 	cmp.w	fp, #1
 802b440:	d159      	bne.n	802b4f6 <_scanf_i+0x126>
 802b442:	6862      	ldr	r2, [r4, #4]
 802b444:	b92a      	cbnz	r2, 802b452 <_scanf_i+0x82>
 802b446:	6822      	ldr	r2, [r4, #0]
 802b448:	2308      	movs	r3, #8
 802b44a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802b44e:	6063      	str	r3, [r4, #4]
 802b450:	6022      	str	r2, [r4, #0]
 802b452:	6822      	ldr	r2, [r4, #0]
 802b454:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802b458:	6022      	str	r2, [r4, #0]
 802b45a:	68a2      	ldr	r2, [r4, #8]
 802b45c:	1e51      	subs	r1, r2, #1
 802b45e:	60a1      	str	r1, [r4, #8]
 802b460:	b192      	cbz	r2, 802b488 <_scanf_i+0xb8>
 802b462:	6832      	ldr	r2, [r6, #0]
 802b464:	1c51      	adds	r1, r2, #1
 802b466:	6031      	str	r1, [r6, #0]
 802b468:	7812      	ldrb	r2, [r2, #0]
 802b46a:	f805 2b01 	strb.w	r2, [r5], #1
 802b46e:	6872      	ldr	r2, [r6, #4]
 802b470:	3a01      	subs	r2, #1
 802b472:	2a00      	cmp	r2, #0
 802b474:	6072      	str	r2, [r6, #4]
 802b476:	dc07      	bgt.n	802b488 <_scanf_i+0xb8>
 802b478:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802b47c:	4631      	mov	r1, r6
 802b47e:	4650      	mov	r0, sl
 802b480:	4790      	blx	r2
 802b482:	2800      	cmp	r0, #0
 802b484:	f040 8085 	bne.w	802b592 <_scanf_i+0x1c2>
 802b488:	f10b 0b01 	add.w	fp, fp, #1
 802b48c:	f1bb 0f03 	cmp.w	fp, #3
 802b490:	d1cb      	bne.n	802b42a <_scanf_i+0x5a>
 802b492:	6863      	ldr	r3, [r4, #4]
 802b494:	b90b      	cbnz	r3, 802b49a <_scanf_i+0xca>
 802b496:	230a      	movs	r3, #10
 802b498:	6063      	str	r3, [r4, #4]
 802b49a:	6863      	ldr	r3, [r4, #4]
 802b49c:	4945      	ldr	r1, [pc, #276]	; (802b5b4 <_scanf_i+0x1e4>)
 802b49e:	6960      	ldr	r0, [r4, #20]
 802b4a0:	1ac9      	subs	r1, r1, r3
 802b4a2:	f000 f8a5 	bl	802b5f0 <__sccl>
 802b4a6:	f04f 0b00 	mov.w	fp, #0
 802b4aa:	68a3      	ldr	r3, [r4, #8]
 802b4ac:	6822      	ldr	r2, [r4, #0]
 802b4ae:	2b00      	cmp	r3, #0
 802b4b0:	d03d      	beq.n	802b52e <_scanf_i+0x15e>
 802b4b2:	6831      	ldr	r1, [r6, #0]
 802b4b4:	6960      	ldr	r0, [r4, #20]
 802b4b6:	f891 c000 	ldrb.w	ip, [r1]
 802b4ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 802b4be:	2800      	cmp	r0, #0
 802b4c0:	d035      	beq.n	802b52e <_scanf_i+0x15e>
 802b4c2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802b4c6:	d124      	bne.n	802b512 <_scanf_i+0x142>
 802b4c8:	0510      	lsls	r0, r2, #20
 802b4ca:	d522      	bpl.n	802b512 <_scanf_i+0x142>
 802b4cc:	f10b 0b01 	add.w	fp, fp, #1
 802b4d0:	f1b9 0f00 	cmp.w	r9, #0
 802b4d4:	d003      	beq.n	802b4de <_scanf_i+0x10e>
 802b4d6:	3301      	adds	r3, #1
 802b4d8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 802b4dc:	60a3      	str	r3, [r4, #8]
 802b4de:	6873      	ldr	r3, [r6, #4]
 802b4e0:	3b01      	subs	r3, #1
 802b4e2:	2b00      	cmp	r3, #0
 802b4e4:	6073      	str	r3, [r6, #4]
 802b4e6:	dd1b      	ble.n	802b520 <_scanf_i+0x150>
 802b4e8:	6833      	ldr	r3, [r6, #0]
 802b4ea:	3301      	adds	r3, #1
 802b4ec:	6033      	str	r3, [r6, #0]
 802b4ee:	68a3      	ldr	r3, [r4, #8]
 802b4f0:	3b01      	subs	r3, #1
 802b4f2:	60a3      	str	r3, [r4, #8]
 802b4f4:	e7d9      	b.n	802b4aa <_scanf_i+0xda>
 802b4f6:	f1bb 0f02 	cmp.w	fp, #2
 802b4fa:	d1ae      	bne.n	802b45a <_scanf_i+0x8a>
 802b4fc:	6822      	ldr	r2, [r4, #0]
 802b4fe:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802b502:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802b506:	d1bf      	bne.n	802b488 <_scanf_i+0xb8>
 802b508:	2310      	movs	r3, #16
 802b50a:	6063      	str	r3, [r4, #4]
 802b50c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802b510:	e7a2      	b.n	802b458 <_scanf_i+0x88>
 802b512:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802b516:	6022      	str	r2, [r4, #0]
 802b518:	780b      	ldrb	r3, [r1, #0]
 802b51a:	f805 3b01 	strb.w	r3, [r5], #1
 802b51e:	e7de      	b.n	802b4de <_scanf_i+0x10e>
 802b520:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802b524:	4631      	mov	r1, r6
 802b526:	4650      	mov	r0, sl
 802b528:	4798      	blx	r3
 802b52a:	2800      	cmp	r0, #0
 802b52c:	d0df      	beq.n	802b4ee <_scanf_i+0x11e>
 802b52e:	6823      	ldr	r3, [r4, #0]
 802b530:	05d9      	lsls	r1, r3, #23
 802b532:	d50d      	bpl.n	802b550 <_scanf_i+0x180>
 802b534:	42bd      	cmp	r5, r7
 802b536:	d909      	bls.n	802b54c <_scanf_i+0x17c>
 802b538:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802b53c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802b540:	4632      	mov	r2, r6
 802b542:	4650      	mov	r0, sl
 802b544:	4798      	blx	r3
 802b546:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 802b54a:	464d      	mov	r5, r9
 802b54c:	42bd      	cmp	r5, r7
 802b54e:	d028      	beq.n	802b5a2 <_scanf_i+0x1d2>
 802b550:	6822      	ldr	r2, [r4, #0]
 802b552:	f012 0210 	ands.w	r2, r2, #16
 802b556:	d113      	bne.n	802b580 <_scanf_i+0x1b0>
 802b558:	702a      	strb	r2, [r5, #0]
 802b55a:	6863      	ldr	r3, [r4, #4]
 802b55c:	9e01      	ldr	r6, [sp, #4]
 802b55e:	4639      	mov	r1, r7
 802b560:	4650      	mov	r0, sl
 802b562:	47b0      	blx	r6
 802b564:	f8d8 3000 	ldr.w	r3, [r8]
 802b568:	6821      	ldr	r1, [r4, #0]
 802b56a:	1d1a      	adds	r2, r3, #4
 802b56c:	f8c8 2000 	str.w	r2, [r8]
 802b570:	f011 0f20 	tst.w	r1, #32
 802b574:	681b      	ldr	r3, [r3, #0]
 802b576:	d00f      	beq.n	802b598 <_scanf_i+0x1c8>
 802b578:	6018      	str	r0, [r3, #0]
 802b57a:	68e3      	ldr	r3, [r4, #12]
 802b57c:	3301      	adds	r3, #1
 802b57e:	60e3      	str	r3, [r4, #12]
 802b580:	1bed      	subs	r5, r5, r7
 802b582:	44ab      	add	fp, r5
 802b584:	6925      	ldr	r5, [r4, #16]
 802b586:	445d      	add	r5, fp
 802b588:	6125      	str	r5, [r4, #16]
 802b58a:	2000      	movs	r0, #0
 802b58c:	b007      	add	sp, #28
 802b58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b592:	f04f 0b00 	mov.w	fp, #0
 802b596:	e7ca      	b.n	802b52e <_scanf_i+0x15e>
 802b598:	07ca      	lsls	r2, r1, #31
 802b59a:	bf4c      	ite	mi
 802b59c:	8018      	strhmi	r0, [r3, #0]
 802b59e:	6018      	strpl	r0, [r3, #0]
 802b5a0:	e7eb      	b.n	802b57a <_scanf_i+0x1aa>
 802b5a2:	2001      	movs	r0, #1
 802b5a4:	e7f2      	b.n	802b58c <_scanf_i+0x1bc>
 802b5a6:	bf00      	nop
 802b5a8:	080300a0 	.word	0x080300a0
 802b5ac:	08028aa5 	.word	0x08028aa5
 802b5b0:	08028995 	.word	0x08028995
 802b5b4:	08061190 	.word	0x08061190

0802b5b8 <_read_r>:
 802b5b8:	b538      	push	{r3, r4, r5, lr}
 802b5ba:	4d07      	ldr	r5, [pc, #28]	; (802b5d8 <_read_r+0x20>)
 802b5bc:	4604      	mov	r4, r0
 802b5be:	4608      	mov	r0, r1
 802b5c0:	4611      	mov	r1, r2
 802b5c2:	2200      	movs	r2, #0
 802b5c4:	602a      	str	r2, [r5, #0]
 802b5c6:	461a      	mov	r2, r3
 802b5c8:	f7dc fe3a 	bl	8008240 <_read>
 802b5cc:	1c43      	adds	r3, r0, #1
 802b5ce:	d102      	bne.n	802b5d6 <_read_r+0x1e>
 802b5d0:	682b      	ldr	r3, [r5, #0]
 802b5d2:	b103      	cbz	r3, 802b5d6 <_read_r+0x1e>
 802b5d4:	6023      	str	r3, [r4, #0]
 802b5d6:	bd38      	pop	{r3, r4, r5, pc}
 802b5d8:	2001d538 	.word	0x2001d538
 802b5dc:	00000000 	.word	0x00000000

0802b5e0 <nan>:
 802b5e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 802b5e8 <nan+0x8>
 802b5e4:	4770      	bx	lr
 802b5e6:	bf00      	nop
 802b5e8:	00000000 	.word	0x00000000
 802b5ec:	7ff80000 	.word	0x7ff80000

0802b5f0 <__sccl>:
 802b5f0:	b570      	push	{r4, r5, r6, lr}
 802b5f2:	780b      	ldrb	r3, [r1, #0]
 802b5f4:	4604      	mov	r4, r0
 802b5f6:	2b5e      	cmp	r3, #94	; 0x5e
 802b5f8:	bf0b      	itete	eq
 802b5fa:	784b      	ldrbeq	r3, [r1, #1]
 802b5fc:	1c48      	addne	r0, r1, #1
 802b5fe:	1c88      	addeq	r0, r1, #2
 802b600:	2200      	movne	r2, #0
 802b602:	bf08      	it	eq
 802b604:	2201      	moveq	r2, #1
 802b606:	1e61      	subs	r1, r4, #1
 802b608:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802b60c:	f801 2f01 	strb.w	r2, [r1, #1]!
 802b610:	42a9      	cmp	r1, r5
 802b612:	d1fb      	bne.n	802b60c <__sccl+0x1c>
 802b614:	b90b      	cbnz	r3, 802b61a <__sccl+0x2a>
 802b616:	3801      	subs	r0, #1
 802b618:	bd70      	pop	{r4, r5, r6, pc}
 802b61a:	f082 0101 	eor.w	r1, r2, #1
 802b61e:	54e1      	strb	r1, [r4, r3]
 802b620:	1c42      	adds	r2, r0, #1
 802b622:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 802b626:	2d2d      	cmp	r5, #45	; 0x2d
 802b628:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 802b62c:	4610      	mov	r0, r2
 802b62e:	d006      	beq.n	802b63e <__sccl+0x4e>
 802b630:	2d5d      	cmp	r5, #93	; 0x5d
 802b632:	d0f1      	beq.n	802b618 <__sccl+0x28>
 802b634:	b90d      	cbnz	r5, 802b63a <__sccl+0x4a>
 802b636:	4630      	mov	r0, r6
 802b638:	e7ee      	b.n	802b618 <__sccl+0x28>
 802b63a:	462b      	mov	r3, r5
 802b63c:	e7ef      	b.n	802b61e <__sccl+0x2e>
 802b63e:	7816      	ldrb	r6, [r2, #0]
 802b640:	2e5d      	cmp	r6, #93	; 0x5d
 802b642:	d0fa      	beq.n	802b63a <__sccl+0x4a>
 802b644:	42b3      	cmp	r3, r6
 802b646:	dcf8      	bgt.n	802b63a <__sccl+0x4a>
 802b648:	4618      	mov	r0, r3
 802b64a:	3001      	adds	r0, #1
 802b64c:	4286      	cmp	r6, r0
 802b64e:	5421      	strb	r1, [r4, r0]
 802b650:	dcfb      	bgt.n	802b64a <__sccl+0x5a>
 802b652:	43d8      	mvns	r0, r3
 802b654:	4430      	add	r0, r6
 802b656:	1c5d      	adds	r5, r3, #1
 802b658:	42b3      	cmp	r3, r6
 802b65a:	bfa8      	it	ge
 802b65c:	2000      	movge	r0, #0
 802b65e:	182b      	adds	r3, r5, r0
 802b660:	3202      	adds	r2, #2
 802b662:	e7de      	b.n	802b622 <__sccl+0x32>

0802b664 <__submore>:
 802b664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b668:	460c      	mov	r4, r1
 802b66a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802b66c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b670:	4299      	cmp	r1, r3
 802b672:	d11d      	bne.n	802b6b0 <__submore+0x4c>
 802b674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802b678:	f7fb fa94 	bl	8026ba4 <_malloc_r>
 802b67c:	b918      	cbnz	r0, 802b686 <__submore+0x22>
 802b67e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b68a:	63a3      	str	r3, [r4, #56]	; 0x38
 802b68c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802b690:	6360      	str	r0, [r4, #52]	; 0x34
 802b692:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802b696:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802b69a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802b69e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802b6a2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802b6a6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802b6aa:	6020      	str	r0, [r4, #0]
 802b6ac:	2000      	movs	r0, #0
 802b6ae:	e7e8      	b.n	802b682 <__submore+0x1e>
 802b6b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802b6b2:	0077      	lsls	r7, r6, #1
 802b6b4:	463a      	mov	r2, r7
 802b6b6:	f7fe fff1 	bl	802a69c <_realloc_r>
 802b6ba:	4605      	mov	r5, r0
 802b6bc:	2800      	cmp	r0, #0
 802b6be:	d0de      	beq.n	802b67e <__submore+0x1a>
 802b6c0:	eb00 0806 	add.w	r8, r0, r6
 802b6c4:	4601      	mov	r1, r0
 802b6c6:	4632      	mov	r2, r6
 802b6c8:	4640      	mov	r0, r8
 802b6ca:	f7fa ff6d 	bl	80265a8 <memcpy>
 802b6ce:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802b6d2:	f8c4 8000 	str.w	r8, [r4]
 802b6d6:	e7e9      	b.n	802b6ac <__submore+0x48>

0802b6d8 <__ascii_wctomb>:
 802b6d8:	b149      	cbz	r1, 802b6ee <__ascii_wctomb+0x16>
 802b6da:	2aff      	cmp	r2, #255	; 0xff
 802b6dc:	bf85      	ittet	hi
 802b6de:	238a      	movhi	r3, #138	; 0x8a
 802b6e0:	6003      	strhi	r3, [r0, #0]
 802b6e2:	700a      	strbls	r2, [r1, #0]
 802b6e4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 802b6e8:	bf98      	it	ls
 802b6ea:	2001      	movls	r0, #1
 802b6ec:	4770      	bx	lr
 802b6ee:	4608      	mov	r0, r1
 802b6f0:	4770      	bx	lr

0802b6f2 <abort>:
 802b6f2:	b508      	push	{r3, lr}
 802b6f4:	2006      	movs	r0, #6
 802b6f6:	f000 f861 	bl	802b7bc <raise>
 802b6fa:	2001      	movs	r0, #1
 802b6fc:	f7dc fd96 	bl	800822c <_exit>

0802b700 <__env_lock>:
 802b700:	4801      	ldr	r0, [pc, #4]	; (802b708 <__env_lock+0x8>)
 802b702:	f7fa bf2f 	b.w	8026564 <__retarget_lock_acquire_recursive>
 802b706:	bf00      	nop
 802b708:	2001d542 	.word	0x2001d542

0802b70c <__env_unlock>:
 802b70c:	4801      	ldr	r0, [pc, #4]	; (802b714 <__env_unlock+0x8>)
 802b70e:	f7fa bf2b 	b.w	8026568 <__retarget_lock_release_recursive>
 802b712:	bf00      	nop
 802b714:	2001d542 	.word	0x2001d542

0802b718 <_fstat_r>:
 802b718:	b538      	push	{r3, r4, r5, lr}
 802b71a:	4d07      	ldr	r5, [pc, #28]	; (802b738 <_fstat_r+0x20>)
 802b71c:	2300      	movs	r3, #0
 802b71e:	4604      	mov	r4, r0
 802b720:	4608      	mov	r0, r1
 802b722:	4611      	mov	r1, r2
 802b724:	602b      	str	r3, [r5, #0]
 802b726:	f7dc fdb4 	bl	8008292 <_fstat>
 802b72a:	1c43      	adds	r3, r0, #1
 802b72c:	d102      	bne.n	802b734 <_fstat_r+0x1c>
 802b72e:	682b      	ldr	r3, [r5, #0]
 802b730:	b103      	cbz	r3, 802b734 <_fstat_r+0x1c>
 802b732:	6023      	str	r3, [r4, #0]
 802b734:	bd38      	pop	{r3, r4, r5, pc}
 802b736:	bf00      	nop
 802b738:	2001d538 	.word	0x2001d538

0802b73c <_isatty_r>:
 802b73c:	b538      	push	{r3, r4, r5, lr}
 802b73e:	4d06      	ldr	r5, [pc, #24]	; (802b758 <_isatty_r+0x1c>)
 802b740:	2300      	movs	r3, #0
 802b742:	4604      	mov	r4, r0
 802b744:	4608      	mov	r0, r1
 802b746:	602b      	str	r3, [r5, #0]
 802b748:	f7dc fdb3 	bl	80082b2 <_isatty>
 802b74c:	1c43      	adds	r3, r0, #1
 802b74e:	d102      	bne.n	802b756 <_isatty_r+0x1a>
 802b750:	682b      	ldr	r3, [r5, #0]
 802b752:	b103      	cbz	r3, 802b756 <_isatty_r+0x1a>
 802b754:	6023      	str	r3, [r4, #0]
 802b756:	bd38      	pop	{r3, r4, r5, pc}
 802b758:	2001d538 	.word	0x2001d538

0802b75c <_malloc_usable_size_r>:
 802b75c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b760:	1f18      	subs	r0, r3, #4
 802b762:	2b00      	cmp	r3, #0
 802b764:	bfbc      	itt	lt
 802b766:	580b      	ldrlt	r3, [r1, r0]
 802b768:	18c0      	addlt	r0, r0, r3
 802b76a:	4770      	bx	lr

0802b76c <_raise_r>:
 802b76c:	291f      	cmp	r1, #31
 802b76e:	b538      	push	{r3, r4, r5, lr}
 802b770:	4604      	mov	r4, r0
 802b772:	460d      	mov	r5, r1
 802b774:	d904      	bls.n	802b780 <_raise_r+0x14>
 802b776:	2316      	movs	r3, #22
 802b778:	6003      	str	r3, [r0, #0]
 802b77a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b77e:	bd38      	pop	{r3, r4, r5, pc}
 802b780:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802b782:	b112      	cbz	r2, 802b78a <_raise_r+0x1e>
 802b784:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b788:	b94b      	cbnz	r3, 802b79e <_raise_r+0x32>
 802b78a:	4620      	mov	r0, r4
 802b78c:	f000 f830 	bl	802b7f0 <_getpid_r>
 802b790:	462a      	mov	r2, r5
 802b792:	4601      	mov	r1, r0
 802b794:	4620      	mov	r0, r4
 802b796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b79a:	f000 b817 	b.w	802b7cc <_kill_r>
 802b79e:	2b01      	cmp	r3, #1
 802b7a0:	d00a      	beq.n	802b7b8 <_raise_r+0x4c>
 802b7a2:	1c59      	adds	r1, r3, #1
 802b7a4:	d103      	bne.n	802b7ae <_raise_r+0x42>
 802b7a6:	2316      	movs	r3, #22
 802b7a8:	6003      	str	r3, [r0, #0]
 802b7aa:	2001      	movs	r0, #1
 802b7ac:	e7e7      	b.n	802b77e <_raise_r+0x12>
 802b7ae:	2400      	movs	r4, #0
 802b7b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802b7b4:	4628      	mov	r0, r5
 802b7b6:	4798      	blx	r3
 802b7b8:	2000      	movs	r0, #0
 802b7ba:	e7e0      	b.n	802b77e <_raise_r+0x12>

0802b7bc <raise>:
 802b7bc:	4b02      	ldr	r3, [pc, #8]	; (802b7c8 <raise+0xc>)
 802b7be:	4601      	mov	r1, r0
 802b7c0:	6818      	ldr	r0, [r3, #0]
 802b7c2:	f7ff bfd3 	b.w	802b76c <_raise_r>
 802b7c6:	bf00      	nop
 802b7c8:	20000064 	.word	0x20000064

0802b7cc <_kill_r>:
 802b7cc:	b538      	push	{r3, r4, r5, lr}
 802b7ce:	4d07      	ldr	r5, [pc, #28]	; (802b7ec <_kill_r+0x20>)
 802b7d0:	2300      	movs	r3, #0
 802b7d2:	4604      	mov	r4, r0
 802b7d4:	4608      	mov	r0, r1
 802b7d6:	4611      	mov	r1, r2
 802b7d8:	602b      	str	r3, [r5, #0]
 802b7da:	f7dc fd15 	bl	8008208 <_kill>
 802b7de:	1c43      	adds	r3, r0, #1
 802b7e0:	d102      	bne.n	802b7e8 <_kill_r+0x1c>
 802b7e2:	682b      	ldr	r3, [r5, #0]
 802b7e4:	b103      	cbz	r3, 802b7e8 <_kill_r+0x1c>
 802b7e6:	6023      	str	r3, [r4, #0]
 802b7e8:	bd38      	pop	{r3, r4, r5, pc}
 802b7ea:	bf00      	nop
 802b7ec:	2001d538 	.word	0x2001d538

0802b7f0 <_getpid_r>:
 802b7f0:	f7dc bd02 	b.w	80081f8 <_getpid>

0802b7f4 <_init>:
 802b7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b7f6:	bf00      	nop
 802b7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b7fa:	bc08      	pop	{r3}
 802b7fc:	469e      	mov	lr, r3
 802b7fe:	4770      	bx	lr

0802b800 <_fini>:
 802b800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b802:	bf00      	nop
 802b804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b806:	bc08      	pop	{r3}
 802b808:	469e      	mov	lr, r3
 802b80a:	4770      	bx	lr
